
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a8  08012dd0  08012dd0  00022dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014278  08014278  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08014278  08014278  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014278  08014278  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014278  08014278  00024278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801427c  0801427c  0002427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08014280  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  20001e0c  0801608c  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028e4  0801608c  000328e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044511  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000077e7  00000000  00000000  0007634d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002230  00000000  00000000  0007db38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de0  00000000  00000000  0007fd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034ecc  00000000  00000000  00081b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e23f  00000000  00000000  000b6a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126694  00000000  00000000  000e4c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020b2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009670  00000000  00000000  0020b364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012db4 	.word	0x08012db4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	08012db4 	.word	0x08012db4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fa46 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f92e 	bl	8000f74 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012dd0 	.word	0x08012dd0

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fa7b 	bl	800e222 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fed1 	bl	800ead4 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fcb3 	bl	800e6a0 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d fa22 	bl	800e1a0 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 f8b8 	bl	8007ed4 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fbc6 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fdb5 	bl	800f8d8 <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012ddc 	.word	0x08012ddc
 8000d78:	08012dec 	.word	0x08012dec

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	; 0x70
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fff7 	bl	8004d74 <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4870      	ldr	r0, [pc, #448]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000d8e:	f00e fda3 	bl	800f8d8 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 ffef 	bl	8004d74 <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fe8e 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fe8a 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fe86 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fd71 	bl	80048a4 <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4861      	ldr	r0, [pc, #388]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000dca:	f00e fd85 	bl	800f8d8 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fd69 	bl	80048a4 <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f934 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f930 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f92c 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fe9d 	bl	8004b38 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4853      	ldr	r0, [pc, #332]	; (8000f54 <DM_UpdateDisplay+0x1d8>)
 8000e06:	f00e fd67 	bl	800f8d8 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fe95 	bl	8004b38 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fdc4 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fdc0 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fdbc 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fd29 	bl	800488c <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4845      	ldr	r0, [pc, #276]	; (8000f58 <DM_UpdateDisplay+0x1dc>)
 8000e42:	f00e fd49 	bl	800f8d8 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fd21 	bl	800488c <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb9b 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb97 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb93 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb8f 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fed8 	bl	8003c3c <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4832      	ldr	r0, [pc, #200]	; (8000f5c <DM_UpdateDisplay+0x1e0>)
 8000e94:	f00e fd20 	bl	800f8d8 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	482b      	ldr	r0, [pc, #172]	; (8000f60 <DM_UpdateDisplay+0x1e4>)
 8000eb2:	f00d f975 	bl	800e1a0 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec2:	222e      	movs	r2, #46	; 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00e f846 	bl	800ef58 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ecc:	f004 f982 	bl	80051d4 <BO_GetOutputBias>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <DM_UpdateDisplay+0x1e8>)
 8000ed8:	2132      	movs	r1, #50	; 0x32
 8000eda:	f00e fd05 	bl	800f8e8 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ede:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ee2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	220a      	movs	r2, #10
 8000ef0:	21dc      	movs	r1, #220	; 0xdc
 8000ef2:	f00d f955 	bl	800e1a0 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	222e      	movs	r2, #46	; 0x2e
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00e f829 	bl	800ef58 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <DM_UpdateDisplay+0x1ec>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	4638      	mov	r0, r7
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <DM_UpdateDisplay+0x1f0>)
 8000f0e:	2132      	movs	r1, #50	; 0x32
 8000f10:	f00e fcea 	bl	800f8e8 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f14:	4638      	mov	r0, r7
 8000f16:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	2214      	movs	r2, #20
 8000f24:	21dc      	movs	r1, #220	; 0xdc
 8000f26:	f00d f93b 	bl	800e1a0 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <DM_UpdateDisplay+0x1cc>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f32:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	22be      	movs	r2, #190	; 0xbe
 8000f40:	210a      	movs	r1, #10
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f44:	f00d f92c 	bl	800e1a0 <ILI9341_Draw_Text>

}
 8000f48:	bf00      	nop
 8000f4a:	3768      	adds	r7, #104	; 0x68
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08012dfc 	.word	0x08012dfc
 8000f54:	08012e10 	.word	0x08012e10
 8000f58:	08012e24 	.word	0x08012e24
 8000f5c:	08012e38 	.word	0x08012e38
 8000f60:	08012e4c 	.word	0x08012e4c
 8000f64:	08012e70 	.word	0x08012e70
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	08012e80 	.word	0x08012e80
 8000f70:	20001e28 	.word	0x20001e28

08000f74 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b09f      	sub	sp, #124	; 0x7c
 8000f78:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f92:	238c      	movs	r3, #140	; 0x8c
 8000f94:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f98:	2328      	movs	r3, #40	; 0x28
 8000f9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000fb0:	23af      	movs	r3, #175	; 0xaf
 8000fb2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000fb6:	2346      	movs	r3, #70	; 0x46
 8000fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000fce:	238a      	movs	r3, #138	; 0x8a
 8000fd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000fda:	4bc4      	ldr	r3, [pc, #784]	; (80012ec <DM_DisplayFormattedOutput+0x378>)
 8000fdc:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000fec:	23a1      	movs	r3, #161	; 0xa1
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000ff2:	2382      	movs	r3, #130	; 0x82
 8000ff4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000ff8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001002:	b29b      	uxth	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800100e:	460a      	mov	r2, r1
 8001010:	2103      	movs	r1, #3
 8001012:	48b7      	ldr	r0, [pc, #732]	; (80012f0 <DM_DisplayFormattedOutput+0x37c>)
 8001014:	f00d f8c4 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800101c:	b299      	uxth	r1, r3
 800101e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001022:	b29b      	uxth	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	9201      	str	r2, [sp, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800102e:	460a      	mov	r2, r1
 8001030:	2103      	movs	r1, #3
 8001032:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <DM_DisplayFormattedOutput+0x380>)
 8001034:	f00d f8b4 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001038:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800103c:	b299      	uxth	r1, r3
 800103e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800104e:	460a      	mov	r2, r1
 8001050:	2103      	movs	r1, #3
 8001052:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <DM_DisplayFormattedOutput+0x384>)
 8001054:	f00d f8a4 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001058:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800105c:	b299      	uxth	r1, r3
 800105e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001062:	b29b      	uxth	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800106e:	460a      	mov	r2, r1
 8001070:	2103      	movs	r1, #3
 8001072:	48a2      	ldr	r0, [pc, #648]	; (80012fc <DM_DisplayFormattedOutput+0x388>)
 8001074:	f00d f894 	bl	800e1a0 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001078:	f004 ff78 	bl	8005f6c <SM_GetOutputInHertz>
 800107c:	ee10 3a10 	vmov	r3, s0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a9b      	ldr	r2, [pc, #620]	; (8001300 <DM_DisplayFormattedOutput+0x38c>)
 8001094:	210f      	movs	r1, #15
 8001096:	f00e fc27 	bl	800f8e8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800109a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800109e:	b299      	uxth	r1, r3
 80010a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010a4:	b29c      	uxth	r4, r3
 80010a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010ba:	4622      	mov	r2, r4
 80010bc:	f00d f870 	bl	800e1a0 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80010c0:	2000      	movs	r0, #0
 80010c2:	f004 fdab 	bl	8005c1c <SM_GetOutputChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 80010ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01d      	beq.n	8001110 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80010d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010e6:	e9cd 3400 	strd	r3, r4, [sp]
 80010ea:	4a86      	ldr	r2, [pc, #536]	; (8001304 <DM_DisplayFormattedOutput+0x390>)
 80010ec:	2112      	movs	r1, #18
 80010ee:	f00e fbfb 	bl	800f8e8 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80010f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	f107 0014 	add.w	r0, r7, #20
 8001104:	e9cd 3400 	strd	r3, r4, [sp]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <DM_DisplayFormattedOutput+0x394>)
 800110a:	2114      	movs	r1, #20
 800110c:	f00e fbec 	bl	800f8e8 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001110:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001114:	b299      	uxth	r1, r3
 8001116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800111a:	b29c      	uxth	r4, r3
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001120:	b29b      	uxth	r3, r3
 8001122:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001130:	4622      	mov	r2, r4
 8001132:	f00d f835 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001136:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800113a:	b299      	uxth	r1, r3
 800113c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001140:	b29c      	uxth	r4, r3
 8001142:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001146:	b29b      	uxth	r3, r3
 8001148:	f107 0014 	add.w	r0, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001156:	4622      	mov	r2, r4
 8001158:	f00d f822 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800115c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001160:	b29b      	uxth	r3, r3
 8001162:	3380      	adds	r3, #128	; 0x80
 8001164:	b299      	uxth	r1, r3
 8001166:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800116a:	b298      	uxth	r0, r3
 800116c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001170:	b29b      	uxth	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800117c:	4602      	mov	r2, r0
 800117e:	4863      	ldr	r0, [pc, #396]	; (800130c <DM_DisplayFormattedOutput+0x398>)
 8001180:	f00d f80e 	bl	800e1a0 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001184:	f004 f826 	bl	80051d4 <BO_GetOutputBias>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <DM_DisplayFormattedOutput+0x222>
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
 8001194:	e00b      	b.n	80011ae <DM_DisplayFormattedOutput+0x23a>
 8001196:	f004 f81d 	bl	80051d4 <BO_GetOutputBias>
 800119a:	ee07 0a90 	vmov	s15, r0
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80011ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b0:	f7ff f9f2 	bl	8000598 <__aeabi_f2d>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	f107 0008 	add.w	r0, r7, #8
 80011bc:	e9cd 3400 	strd	r3, r4, [sp]
 80011c0:	4a53      	ldr	r2, [pc, #332]	; (8001310 <DM_DisplayFormattedOutput+0x39c>)
 80011c2:	210c      	movs	r1, #12
 80011c4:	f00e fb90 	bl	800f8e8 <sniprintf>
	if(BO_GetBiasPolarity())
 80011c8:	f003 ffa4 	bl	8005114 <BO_GetBiasPolarity>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DM_DisplayFormattedOutput+0x3a0>)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	8019      	strh	r1, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e fbb0 	bl	800f950 <strcat>
 80011f0:	4604      	mov	r4, r0
 80011f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011f6:	b299      	uxth	r1, r3
 80011f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011fc:	b298      	uxth	r0, r3
 80011fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001202:	b29b      	uxth	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800120e:	4602      	mov	r2, r0
 8001210:	4620      	mov	r0, r4
 8001212:	f00c ffc5 	bl	800e1a0 <ILI9341_Draw_Text>
 8001216:	e021      	b.n	800125c <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <DM_DisplayFormattedOutput+0x3a4>)
 800121a:	463b      	mov	r3, r7
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	0c12      	lsrs	r2, r2, #16
 8001226:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	463b      	mov	r3, r7
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f00e fb8d 	bl	800f950 <strcat>
 8001236:	4604      	mov	r4, r0
 8001238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800123c:	b299      	uxth	r1, r3
 800123e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001242:	b298      	uxth	r0, r3
 8001244:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001248:	b29b      	uxth	r3, r3
 800124a:	2200      	movs	r2, #0
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001254:	4602      	mov	r2, r0
 8001256:	4620      	mov	r0, r4
 8001258:	f00c ffa2 	bl	800e1a0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800125c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001260:	b29b      	uxth	r3, r3
 8001262:	2200      	movs	r2, #0
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2103      	movs	r1, #3
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <DM_DisplayFormattedOutput+0x3a8>)
 8001272:	f00c ff95 	bl	800e1a0 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001276:	2000      	movs	r0, #0
 8001278:	f004 fcd0 	bl	8005c1c <SM_GetOutputChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800128c:	2b06      	cmp	r3, #6
 800128e:	f200 8091 	bhi.w	80013b4 <DM_DisplayFormattedOutput+0x440>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <DM_DisplayFormattedOutput+0x324>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012b5 	.word	0x080012b5
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001345 	.word	0x08001345
 80012a8:	08001361 	.word	0x08001361
 80012ac:	0800137d 	.word	0x0800137d
 80012b0:	08001399 	.word	0x08001399
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80012b4:	233c      	movs	r3, #60	; 0x3c
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <DM_DisplayFormattedOutput+0x3ac>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012c4:	2203      	movs	r2, #3
 80012c6:	218c      	movs	r1, #140	; 0x8c
 80012c8:	2050      	movs	r0, #80	; 0x50
 80012ca:	f00c fdc5 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 80012ce:	e071      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <DM_DisplayFormattedOutput+0x3b0>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00c fdb7 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 80012ea:	e063      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
 80012ec:	3a449ba6 	.word	0x3a449ba6
 80012f0:	08012e90 	.word	0x08012e90
 80012f4:	08012ea0 	.word	0x08012ea0
 80012f8:	08012eb0 	.word	0x08012eb0
 80012fc:	08012ec0 	.word	0x08012ec0
 8001300:	08012ed0 	.word	0x08012ed0
 8001304:	08012ee0 	.word	0x08012ee0
 8001308:	08012eec 	.word	0x08012eec
 800130c:	08012ef8 	.word	0x08012ef8
 8001310:	08012f00 	.word	0x08012f00
 8001314:	08012f20 	.word	0x08012f20
 8001318:	08012f24 	.word	0x08012f24
 800131c:	08012f0c 	.word	0x08012f0c
 8001320:	20000e28 	.word	0x20000e28
 8001324:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001328:	233c      	movs	r3, #60	; 0x3c
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	23c8      	movs	r3, #200	; 0xc8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001338:	2203      	movs	r2, #3
 800133a:	21a0      	movs	r1, #160	; 0xa0
 800133c:	2050      	movs	r0, #80	; 0x50
 800133e:	f00c fd8b 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 8001342:	e037      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001344:	233c      	movs	r3, #60	; 0x3c
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001354:	2203      	movs	r2, #3
 8001356:	21a0      	movs	r1, #160	; 0xa0
 8001358:	2050      	movs	r0, #80	; 0x50
 800135a:	f00c fd7d 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 800135e:	e029      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001360:	233c      	movs	r3, #60	; 0x3c
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	23c8      	movs	r3, #200	; 0xc8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001370:	2203      	movs	r2, #3
 8001372:	21a0      	movs	r1, #160	; 0xa0
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f00c fd6f 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 800137a:	e01b      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800137c:	233c      	movs	r3, #60	; 0x3c
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	23c8      	movs	r3, #200	; 0xc8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f240 23fd 	movw	r3, #765	; 0x2fd
 800138c:	2203      	movs	r2, #3
 800138e:	21a0      	movs	r1, #160	; 0xa0
 8001390:	2050      	movs	r0, #80	; 0x50
 8001392:	f00c fd61 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 8001396:	e00d      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001398:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800139c:	b29b      	uxth	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013a8:	22aa      	movs	r2, #170	; 0xaa
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80013ae:	f00c fef7 	bl	800e1a0 <ILI9341_Draw_Text>
			break;
 80013b2:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013c4:	22aa      	movs	r2, #170	; 0xaa
 80013c6:	21b4      	movs	r1, #180	; 0xb4
 80013c8:	4847      	ldr	r0, [pc, #284]	; (80014e8 <DM_DisplayFormattedOutput+0x574>)
 80013ca:	f00c fee9 	bl	800e1a0 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 80013ce:	2001      	movs	r0, #1
 80013d0:	f004 fc24 	bl	8005c1c <SM_GetOutputChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 80013e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d873      	bhi.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <DM_DisplayFormattedOutput+0x47c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001429 	.word	0x08001429
 80013f8:	08001445 	.word	0x08001445
 80013fc:	08001461 	.word	0x08001461
 8001400:	0800147d 	.word	0x0800147d
 8001404:	08001499 	.word	0x08001499
 8001408:	080014b5 	.word	0x080014b5
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800140c:	233c      	movs	r3, #60	; 0x3c
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <DM_DisplayFormattedOutput+0x578>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800141c:	2203      	movs	r2, #3
 800141e:	218c      	movs	r1, #140	; 0x8c
 8001420:	20f5      	movs	r0, #245	; 0xf5
 8001422:	f00c fd19 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 8001426:	e053      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001428:	233c      	movs	r3, #60	; 0x3c
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <DM_DisplayFormattedOutput+0x57c>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	23c8      	movs	r3, #200	; 0xc8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001438:	2203      	movs	r2, #3
 800143a:	21a0      	movs	r1, #160	; 0xa0
 800143c:	20f5      	movs	r0, #245	; 0xf5
 800143e:	f00c fd0b 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 8001442:	e045      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001444:	233c      	movs	r3, #60	; 0x3c
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	23c8      	movs	r3, #200	; 0xc8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001454:	2203      	movs	r2, #3
 8001456:	21a0      	movs	r1, #160	; 0xa0
 8001458:	20f5      	movs	r0, #245	; 0xf5
 800145a:	f00c fcfd 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 800145e:	e037      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001460:	233c      	movs	r3, #60	; 0x3c
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	23c8      	movs	r3, #200	; 0xc8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001470:	2203      	movs	r2, #3
 8001472:	21a0      	movs	r1, #160	; 0xa0
 8001474:	20f5      	movs	r0, #245	; 0xf5
 8001476:	f00c fcef 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 800147a:	e029      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800147c:	233c      	movs	r3, #60	; 0x3c
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	23c8      	movs	r3, #200	; 0xc8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800148c:	2203      	movs	r2, #3
 800148e:	21a0      	movs	r1, #160	; 0xa0
 8001490:	20f5      	movs	r0, #245	; 0xf5
 8001492:	f00c fce1 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 8001496:	e01b      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001498:	233c      	movs	r3, #60	; 0x3c
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	23c8      	movs	r3, #200	; 0xc8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014a8:	2203      	movs	r2, #3
 80014aa:	21a0      	movs	r1, #160	; 0xa0
 80014ac:	20f5      	movs	r0, #245	; 0xf5
 80014ae:	f00c fcd3 	bl	800de58 <ILI9341_Draw_Wave>
			break;
 80014b2:	e00d      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80014b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014c4:	22aa      	movs	r2, #170	; 0xaa
 80014c6:	21f5      	movs	r1, #245	; 0xf5
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80014ca:	f00c fe69 	bl	800e1a0 <ILI9341_Draw_Text>
			break;
 80014ce:	bf00      	nop
	}



}
 80014d0:	bf00      	nop
 80014d2:	376c      	adds	r7, #108	; 0x6c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000c48 	.word	0x20000c48
 80014dc:	20000d38 	.word	0x20000d38
 80014e0:	20001008 	.word	0x20001008
 80014e4:	08012f14 	.word	0x08012f14
 80014e8:	08012f18 	.word	0x08012f18
 80014ec:	20000e28 	.word	0x20000e28
 80014f0:	20000f18 	.word	0x20000f18

080014f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <DM_RefreshScreen+0x88>)
 80014fc:	f00a fc38 	bl	800bd70 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001500:	2000      	movs	r0, #0
 8001502:	f00d f8cd 	bl	800e6a0 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2302      	movs	r3, #2
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2328      	movs	r3, #40	; 0x28
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	21c8      	movs	r1, #200	; 0xc8
 800151a:	2000      	movs	r0, #0
 800151c:	f00c fcdd 	bl	800deda <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2302      	movs	r3, #2
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	2250      	movs	r2, #80	; 0x50
 8001532:	21c8      	movs	r1, #200	; 0xc8
 8001534:	2050      	movs	r0, #80	; 0x50
 8001536:	f00c fcd0 	bl	800deda <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	f00c fcc3 	bl	800deda <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2302      	movs	r3, #2
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	21c8      	movs	r1, #200	; 0xc8
 8001568:	20f0      	movs	r0, #240	; 0xf0
 800156a:	f00c fcb6 	bl	800deda <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <DM_RefreshScreen+0x88>)
 8001570:	f00a fbc8 	bl	800bd04 <HAL_TIM_Base_Start_IT>


}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20002760 	.word	0x20002760

08001580 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <DM_SetErrorDebugMsg+0x1c>)
 800158c:	212d      	movs	r1, #45	; 0x2d
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <DM_SetErrorDebugMsg+0x20>)
 8001590:	f00e f9aa 	bl	800f8e8 <sniprintf>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08012fa4 	.word	0x08012fa4
 80015a0:	20001e28 	.word	0x20001e28

080015a4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d816      	bhi.n	80015e4 <FreqMenu_DrawMenu+0x40>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <FreqMenu_DrawMenu+0x18>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015d3 	.word	0x080015d3
 80015c4:	080015d9 	.word	0x080015d9
 80015c8:	080015df 	.word	0x080015df
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80015cc:	f000 f810 	bl	80015f0 <FreqMenu_DrawMainMenu>
			break;
 80015d0:	e009      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80015d2:	f000 f849 	bl	8001668 <FreqMenu_DrawPresetMenu>
			break;
 80015d6:	e006      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80015d8:	f001 faf4 	bl	8002bc4 <FreqMenu_DrawAdjustMenu>
			break;
 80015dc:	e003      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80015de:	f001 fb07 	bl	8002bf0 <FreqMenu_DrawSweepMenu>
			break;
 80015e2:	e000      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015e4:	bf00      	nop

	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop

080015f0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	220a      	movs	r2, #10
 8001604:	2105      	movs	r1, #5
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <FreqMenu_DrawMainMenu+0x68>)
 8001608:	f00c fdca 	bl	800e1a0 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800160c:	f7ff fcb2 	bl	8000f74 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2302      	movs	r3, #2
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	22d2      	movs	r2, #210	; 0xd2
 800161e:	2105      	movs	r1, #5
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <FreqMenu_DrawMainMenu+0x6c>)
 8001622:	f00c fdbd 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	22d2      	movs	r2, #210	; 0xd2
 8001634:	2157      	movs	r1, #87	; 0x57
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <FreqMenu_DrawMainMenu+0x70>)
 8001638:	f00c fdb2 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800163c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2302      	movs	r3, #2
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	22d2      	movs	r2, #210	; 0xd2
 800164a:	21ae      	movs	r1, #174	; 0xae
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <FreqMenu_DrawMainMenu+0x74>)
 800164e:	f00c fda7 	bl	800e1a0 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08012fa8 	.word	0x08012fa8
 800165c:	08012fb4 	.word	0x08012fb4
 8001660:	08012fbc 	.word	0x08012fbc
 8001664:	08012fc4 	.word	0x08012fc4

08001668 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	220a      	movs	r2, #10
 800167c:	2105      	movs	r1, #5
 800167e:	4886      	ldr	r0, [pc, #536]	; (8001898 <FreqMenu_DrawPresetMenu+0x230>)
 8001680:	f00c fd8e 	bl	800e1a0 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001684:	2328      	movs	r3, #40	; 0x28
 8001686:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001688:	233c      	movs	r3, #60	; 0x3c
 800168a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800168c:	2350      	movs	r3, #80	; 0x50
 800168e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001694:	2378      	movs	r3, #120	; 0x78
 8001696:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001698:	238c      	movs	r3, #140	; 0x8c
 800169a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80016a0:	f003 fed2 	bl	8005448 <FreqO_GetFPresetObject>
 80016a4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f001 825d 	beq.w	8002b68 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f000 849a 	beq.w	8001ff0 <FreqMenu_DrawPresetMenu+0x988>
 80016bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d817      	bhi.n	80016f4 <FreqMenu_DrawPresetMenu+0x8c>
 80016c4:	2b32      	cmp	r3, #50	; 0x32
 80016c6:	f000 81b3 	beq.w	8001a30 <FreqMenu_DrawPresetMenu+0x3c8>
 80016ca:	2b32      	cmp	r3, #50	; 0x32
 80016cc:	d806      	bhi.n	80016dc <FreqMenu_DrawPresetMenu+0x74>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d038      	beq.n	8001744 <FreqMenu_DrawPresetMenu+0xdc>
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	f000 8102 	beq.w	80018dc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80016d8:	f001 ba52 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016dc:	2bfa      	cmp	r3, #250	; 0xfa
 80016de:	f000 8317 	beq.w	8001d10 <FreqMenu_DrawPresetMenu+0x6a8>
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e6:	f000 83d9 	beq.w	8001e9c <FreqMenu_DrawPresetMenu+0x834>
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	f000 8266 	beq.w	8001bbc <FreqMenu_DrawPresetMenu+0x554>
}
 80016f0:	f001 ba46 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f000 8758 	beq.w	80025ae <FreqMenu_DrawPresetMenu+0xf46>
 80016fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001702:	4293      	cmp	r3, r2
 8001704:	d80f      	bhi.n	8001726 <FreqMenu_DrawPresetMenu+0xbe>
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	f000 85e0 	beq.w	80022d0 <FreqMenu_DrawPresetMenu+0xc68>
 8001710:	f242 7210 	movw	r2, #10000	; 0x2710
 8001714:	4293      	cmp	r3, r2
 8001716:	f000 86a1 	beq.w	800245c <FreqMenu_DrawPresetMenu+0xdf4>
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171e:	f000 852d 	beq.w	800217c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001722:	f001 ba2d 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001726:	4a5d      	ldr	r2, [pc, #372]	; (800189c <FreqMenu_DrawPresetMenu+0x234>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f001 80ae 	beq.w	800288a <FreqMenu_DrawPresetMenu+0x1222>
 800172e:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <FreqMenu_DrawPresetMenu+0x238>)
 8001730:	4293      	cmp	r3, r2
 8001732:	f001 816f 	beq.w	8002a14 <FreqMenu_DrawPresetMenu+0x13ac>
 8001736:	f24c 3250 	movw	r2, #50000	; 0xc350
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 87fc 	beq.w	8002738 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001740:	f001 ba1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2105      	movs	r1, #5
 8001756:	4853      	ldr	r0, [pc, #332]	; (80018a4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001758:	f00c fd22 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2302      	movs	r3, #2
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800176c:	2105      	movs	r1, #5
 800176e:	484e      	ldr	r0, [pc, #312]	; (80018a8 <FreqMenu_DrawPresetMenu+0x240>)
 8001770:	f00c fd16 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001784:	2105      	movs	r1, #5
 8001786:	4849      	ldr	r0, [pc, #292]	; (80018ac <FreqMenu_DrawPresetMenu+0x244>)
 8001788:	f00c fd0a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2302      	movs	r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800179c:	2105      	movs	r1, #5
 800179e:	4844      	ldr	r0, [pc, #272]	; (80018b0 <FreqMenu_DrawPresetMenu+0x248>)
 80017a0:	f00c fcfe 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2302      	movs	r3, #2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b4:	2105      	movs	r1, #5
 80017b6:	483f      	ldr	r0, [pc, #252]	; (80018b4 <FreqMenu_DrawPresetMenu+0x24c>)
 80017b8:	f00c fcf2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017bc:	7abb      	ldrb	r3, [r7, #10]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017cc:	2105      	movs	r1, #5
 80017ce:	483a      	ldr	r0, [pc, #232]	; (80018b8 <FreqMenu_DrawPresetMenu+0x250>)
 80017d0:	f00c fce6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e4:	2105      	movs	r1, #5
 80017e6:	4835      	ldr	r0, [pc, #212]	; (80018bc <FreqMenu_DrawPresetMenu+0x254>)
 80017e8:	f00c fcda 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2302      	movs	r3, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	4830      	ldr	r0, [pc, #192]	; (80018c0 <FreqMenu_DrawPresetMenu+0x258>)
 8001800:	f00c fcce 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001814:	2178      	movs	r1, #120	; 0x78
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001818:	f00c fcc2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800181c:	7b7b      	ldrb	r3, [r7, #13]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2302      	movs	r3, #2
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800182c:	2178      	movs	r1, #120	; 0x78
 800182e:	4826      	ldr	r0, [pc, #152]	; (80018c8 <FreqMenu_DrawPresetMenu+0x260>)
 8001830:	f00c fcb6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001834:	7b3b      	ldrb	r3, [r7, #12]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2302      	movs	r3, #2
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001844:	2178      	movs	r1, #120	; 0x78
 8001846:	4821      	ldr	r0, [pc, #132]	; (80018cc <FreqMenu_DrawPresetMenu+0x264>)
 8001848:	f00c fcaa 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	b29a      	uxth	r2, r3
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2302      	movs	r3, #2
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800185c:	2178      	movs	r1, #120	; 0x78
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <FreqMenu_DrawPresetMenu+0x268>)
 8001860:	f00c fc9e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001864:	7abb      	ldrb	r3, [r7, #10]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2302      	movs	r3, #2
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001874:	2178      	movs	r1, #120	; 0x78
 8001876:	4817      	ldr	r0, [pc, #92]	; (80018d4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001878:	f00c fc92 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800187c:	7a7b      	ldrb	r3, [r7, #9]
 800187e:	b29a      	uxth	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800188c:	2178      	movs	r1, #120	; 0x78
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <FreqMenu_DrawPresetMenu+0x270>)
 8001890:	f00c fc86 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001894:	f001 b974 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001898:	08012fcc 	.word	0x08012fcc
 800189c:	000124f8 	.word	0x000124f8
 80018a0:	000186a0 	.word	0x000186a0
 80018a4:	08012fe0 	.word	0x08012fe0
 80018a8:	08012fe8 	.word	0x08012fe8
 80018ac:	08012ff0 	.word	0x08012ff0
 80018b0:	08012ff8 	.word	0x08012ff8
 80018b4:	08013000 	.word	0x08013000
 80018b8:	08013008 	.word	0x08013008
 80018bc:	08013010 	.word	0x08013010
 80018c0:	08013018 	.word	0x08013018
 80018c4:	08013020 	.word	0x08013020
 80018c8:	08013028 	.word	0x08013028
 80018cc:	08013030 	.word	0x08013030
 80018d0:	08013038 	.word	0x08013038
 80018d4:	08013040 	.word	0x08013040
 80018d8:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ec:	2105      	movs	r1, #5
 80018ee:	48a5      	ldr	r0, [pc, #660]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 80018f0:	f00c fc56 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2105      	movs	r1, #5
 8001906:	48a0      	ldr	r0, [pc, #640]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001908:	f00c fc4a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	b29a      	uxth	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800191c:	2105      	movs	r1, #5
 800191e:	489b      	ldr	r0, [pc, #620]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001920:	f00c fc3e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	b29a      	uxth	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2302      	movs	r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001934:	2105      	movs	r1, #5
 8001936:	4896      	ldr	r0, [pc, #600]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001938:	f00c fc32 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	b29a      	uxth	r2, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800194c:	2105      	movs	r1, #5
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001950:	f00c fc26 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001954:	7abb      	ldrb	r3, [r7, #10]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001964:	2105      	movs	r1, #5
 8001966:	488c      	ldr	r0, [pc, #560]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001968:	f00c fc1a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800196c:	7a7b      	ldrb	r3, [r7, #9]
 800196e:	b29a      	uxth	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800197c:	2105      	movs	r1, #5
 800197e:	4887      	ldr	r0, [pc, #540]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001980:	f00c fc0e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	b29a      	uxth	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2302      	movs	r3, #2
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001994:	2178      	movs	r1, #120	; 0x78
 8001996:	4882      	ldr	r0, [pc, #520]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001998:	f00c fc02 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2302      	movs	r3, #2
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ac:	2178      	movs	r1, #120	; 0x78
 80019ae:	487d      	ldr	r0, [pc, #500]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 80019b0:	f00c fbf6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2178      	movs	r1, #120	; 0x78
 80019c6:	4878      	ldr	r0, [pc, #480]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 80019c8:	f00c fbea 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2178      	movs	r1, #120	; 0x78
 80019de:	4873      	ldr	r0, [pc, #460]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 80019e0:	f00c fbde 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019e4:	7afb      	ldrb	r3, [r7, #11]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2302      	movs	r3, #2
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	486e      	ldr	r0, [pc, #440]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 80019f8:	f00c fbd2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7abb      	ldrb	r3, [r7, #10]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2178      	movs	r1, #120	; 0x78
 8001a0e:	4869      	ldr	r0, [pc, #420]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001a10:	f00c fbc6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7a7b      	ldrb	r3, [r7, #9]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	4864      	ldr	r0, [pc, #400]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001a28:	f00c fbba 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001a2c:	f001 b8a8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a40:	2105      	movs	r1, #5
 8001a42:	4850      	ldr	r0, [pc, #320]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a44:	f00c fbac 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	484b      	ldr	r0, [pc, #300]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001a5c:	f00c fba0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a60:	7b7b      	ldrb	r3, [r7, #13]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2105      	movs	r1, #5
 8001a72:	4846      	ldr	r0, [pc, #280]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001a74:	f00c fb94 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a78:	7b3b      	ldrb	r3, [r7, #12]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4841      	ldr	r0, [pc, #260]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001a8c:	f00c fb88 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	483c      	ldr	r0, [pc, #240]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001aa4:	f00c fb7c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa8:	7abb      	ldrb	r3, [r7, #10]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4837      	ldr	r0, [pc, #220]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001abc:	f00c fb70 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac0:	7a7b      	ldrb	r3, [r7, #9]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001ad4:	f00c fb64 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001aec:	f00c fb58 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	2302      	movs	r3, #2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001b04:	f00c fb4c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 8001b1c:	f00c fb40 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 8001b34:	f00c fb34 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 8001b4c:	f00c fb28 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7abb      	ldrb	r3, [r7, #10]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b64:	f00c fb1c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7a7b      	ldrb	r3, [r7, #9]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001b7c:	f00c fb10 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001b80:	f000 bffe 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001b84:	08012fe0 	.word	0x08012fe0
 8001b88:	08012fe8 	.word	0x08012fe8
 8001b8c:	08012ff0 	.word	0x08012ff0
 8001b90:	08012ff8 	.word	0x08012ff8
 8001b94:	08013000 	.word	0x08013000
 8001b98:	08013008 	.word	0x08013008
 8001b9c:	08013010 	.word	0x08013010
 8001ba0:	08013018 	.word	0x08013018
 8001ba4:	08013020 	.word	0x08013020
 8001ba8:	08013028 	.word	0x08013028
 8001bac:	08013030 	.word	0x08013030
 8001bb0:	08013038 	.word	0x08013038
 8001bb4:	08013040 	.word	0x08013040
 8001bb8:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	48a5      	ldr	r0, [pc, #660]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001bd0:	f00c fae6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be4:	2105      	movs	r1, #5
 8001be6:	48a0      	ldr	r0, [pc, #640]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001be8:	f00c fada 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	489b      	ldr	r0, [pc, #620]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001c00:	f00c face 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	4896      	ldr	r0, [pc, #600]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001c18:	f00c fac2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2302      	movs	r3, #2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	4891      	ldr	r0, [pc, #580]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001c30:	f00c fab6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c44:	2105      	movs	r1, #5
 8001c46:	488c      	ldr	r0, [pc, #560]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001c48:	f00c faaa 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2302      	movs	r3, #2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	4887      	ldr	r0, [pc, #540]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001c60:	f00c fa9e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c74:	2178      	movs	r1, #120	; 0x78
 8001c76:	4882      	ldr	r0, [pc, #520]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001c78:	f00c fa92 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c8c:	2178      	movs	r1, #120	; 0x78
 8001c8e:	487d      	ldr	r0, [pc, #500]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c90:	f00c fa86 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2178      	movs	r1, #120	; 0x78
 8001ca6:	4878      	ldr	r0, [pc, #480]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001ca8:	f00c fa7a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2178      	movs	r1, #120	; 0x78
 8001cbe:	4873      	ldr	r0, [pc, #460]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001cc0:	f00c fa6e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	486e      	ldr	r0, [pc, #440]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001cd8:	f00c fa62 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7abb      	ldrb	r3, [r7, #10]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2178      	movs	r1, #120	; 0x78
 8001cee:	4869      	ldr	r0, [pc, #420]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cf0:	f00c fa56 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf4:	7a7b      	ldrb	r3, [r7, #9]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d04:	2178      	movs	r1, #120	; 0x78
 8001d06:	4864      	ldr	r0, [pc, #400]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001d08:	f00c fa4a 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001d0c:	f000 bf38 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d20:	2105      	movs	r1, #5
 8001d22:	4850      	ldr	r0, [pc, #320]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001d24:	f00c fa3c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	484b      	ldr	r0, [pc, #300]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001d3c:	f00c fa30 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d50:	2105      	movs	r1, #5
 8001d52:	4846      	ldr	r0, [pc, #280]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001d54:	f00c fa24 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d58:	7b3b      	ldrb	r3, [r7, #12]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4841      	ldr	r0, [pc, #260]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001d6c:	f00c fa18 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	483c      	ldr	r0, [pc, #240]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d84:	f00c fa0c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d88:	7abb      	ldrb	r3, [r7, #10]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	4837      	ldr	r0, [pc, #220]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001d9c:	f00c fa00 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da0:	7a7b      	ldrb	r3, [r7, #9]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2302      	movs	r3, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db0:	2105      	movs	r1, #5
 8001db2:	4832      	ldr	r0, [pc, #200]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001db4:	f00c f9f4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	482d      	ldr	r0, [pc, #180]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001dcc:	f00c f9e8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4828      	ldr	r0, [pc, #160]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001de4:	f00c f9dc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	4823      	ldr	r0, [pc, #140]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001dfc:	f00c f9d0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	481e      	ldr	r0, [pc, #120]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001e14:	f00c f9c4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001e2c:	f00c f9b8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e44:	f00c f9ac 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e48:	7a7b      	ldrb	r3, [r7, #9]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2302      	movs	r3, #2
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001e5c:	f00c f9a0 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001e60:	f000 be8e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001e64:	08012fe0 	.word	0x08012fe0
 8001e68:	08012fe8 	.word	0x08012fe8
 8001e6c:	08012ff0 	.word	0x08012ff0
 8001e70:	08012ff8 	.word	0x08012ff8
 8001e74:	08013000 	.word	0x08013000
 8001e78:	08013008 	.word	0x08013008
 8001e7c:	08013010 	.word	0x08013010
 8001e80:	08013018 	.word	0x08013018
 8001e84:	08013020 	.word	0x08013020
 8001e88:	08013028 	.word	0x08013028
 8001e8c:	08013030 	.word	0x08013030
 8001e90:	08013038 	.word	0x08013038
 8001e94:	08013040 	.word	0x08013040
 8001e98:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2105      	movs	r1, #5
 8001eae:	48a5      	ldr	r0, [pc, #660]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8001eb0:	f00c f976 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	48a0      	ldr	r0, [pc, #640]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 8001ec8:	f00c f96a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2105      	movs	r1, #5
 8001ede:	489b      	ldr	r0, [pc, #620]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ee0:	f00c f95e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7b3b      	ldrb	r3, [r7, #12]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	4896      	ldr	r0, [pc, #600]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 8001ef8:	f00c f952 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	4891      	ldr	r0, [pc, #580]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8001f10:	f00c f946 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f14:	7abb      	ldrb	r3, [r7, #10]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	488c      	ldr	r0, [pc, #560]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001f28:	f00c f93a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2302      	movs	r3, #2
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	4887      	ldr	r0, [pc, #540]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f40:	f00c f92e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f54:	2178      	movs	r1, #120	; 0x78
 8001f56:	4882      	ldr	r0, [pc, #520]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f58:	f00c f922 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	2302      	movs	r3, #2
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f6c:	2178      	movs	r1, #120	; 0x78
 8001f6e:	487d      	ldr	r0, [pc, #500]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f70:	f00c f916 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2178      	movs	r1, #120	; 0x78
 8001f86:	4878      	ldr	r0, [pc, #480]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f88:	f00c f90a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7b3b      	ldrb	r3, [r7, #12]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2178      	movs	r1, #120	; 0x78
 8001f9e:	4873      	ldr	r0, [pc, #460]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 8001fa0:	f00c f8fe 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2178      	movs	r1, #120	; 0x78
 8001fb6:	486e      	ldr	r0, [pc, #440]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 8001fb8:	f00c f8f2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	4869      	ldr	r0, [pc, #420]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001fd0:	f00c f8e6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	4864      	ldr	r0, [pc, #400]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fe8:	f00c f8da 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8001fec:	f000 bdc8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002000:	2105      	movs	r1, #5
 8002002:	4850      	ldr	r0, [pc, #320]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8002004:	f00c f8cc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	b29a      	uxth	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002018:	2105      	movs	r1, #5
 800201a:	484b      	ldr	r0, [pc, #300]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 800201c:	f00c f8c0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002030:	2105      	movs	r1, #5
 8002032:	4846      	ldr	r0, [pc, #280]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8002034:	f00c f8b4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	b29a      	uxth	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002048:	2105      	movs	r1, #5
 800204a:	4841      	ldr	r0, [pc, #260]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 800204c:	f00c f8a8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002060:	2105      	movs	r1, #5
 8002062:	483c      	ldr	r0, [pc, #240]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8002064:	f00c f89c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2300      	movs	r3, #0
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	2302      	movs	r3, #2
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002078:	2105      	movs	r1, #5
 800207a:	4837      	ldr	r0, [pc, #220]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 800207c:	f00c f890 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2105      	movs	r1, #5
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002094:	f00c f884 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	482d      	ldr	r0, [pc, #180]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 80020ac:	f00c f878 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2302      	movs	r3, #2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4828      	ldr	r0, [pc, #160]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 80020c4:	f00c f86c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 80020dc:	f00c f860 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2302      	movs	r3, #2
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	481e      	ldr	r0, [pc, #120]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 80020f4:	f00c f854 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4819      	ldr	r0, [pc, #100]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 800210c:	f00c f848 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2300      	movs	r3, #0
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002124:	f00c f83c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002128:	7a7b      	ldrb	r3, [r7, #9]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 800213c:	f00c f830 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8002140:	f000 bd1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002144:	08012fe0 	.word	0x08012fe0
 8002148:	08012fe8 	.word	0x08012fe8
 800214c:	08012ff0 	.word	0x08012ff0
 8002150:	08012ff8 	.word	0x08012ff8
 8002154:	08013000 	.word	0x08013000
 8002158:	08013008 	.word	0x08013008
 800215c:	08013010 	.word	0x08013010
 8002160:	08013018 	.word	0x08013018
 8002164:	08013020 	.word	0x08013020
 8002168:	08013028 	.word	0x08013028
 800216c:	08013030 	.word	0x08013030
 8002170:	08013038 	.word	0x08013038
 8002174:	08013040 	.word	0x08013040
 8002178:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2105      	movs	r1, #5
 800218e:	48a5      	ldr	r0, [pc, #660]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002190:	f00c f806 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2105      	movs	r1, #5
 80021a6:	48a0      	ldr	r0, [pc, #640]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80021a8:	f00b fffa 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b7b      	ldrb	r3, [r7, #13]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2105      	movs	r1, #5
 80021be:	489b      	ldr	r0, [pc, #620]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 80021c0:	f00b ffee 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7b3b      	ldrb	r3, [r7, #12]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2105      	movs	r1, #5
 80021d6:	4896      	ldr	r0, [pc, #600]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 80021d8:	f00b ffe2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2105      	movs	r1, #5
 80021ee:	4891      	ldr	r0, [pc, #580]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021f0:	f00b ffd6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7abb      	ldrb	r3, [r7, #10]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2105      	movs	r1, #5
 8002206:	488c      	ldr	r0, [pc, #560]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002208:	f00b ffca 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	b29a      	uxth	r2, r3
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800221c:	2105      	movs	r1, #5
 800221e:	4887      	ldr	r0, [pc, #540]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002220:	f00b ffbe 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	b29a      	uxth	r2, r3
 8002228:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2302      	movs	r3, #2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2300      	movs	r3, #0
 8002234:	2178      	movs	r1, #120	; 0x78
 8002236:	4882      	ldr	r0, [pc, #520]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002238:	f00b ffb2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	b29a      	uxth	r2, r3
 8002240:	2300      	movs	r3, #0
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2302      	movs	r3, #2
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800224c:	2178      	movs	r1, #120	; 0x78
 800224e:	487d      	ldr	r0, [pc, #500]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 8002250:	f00b ffa6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2178      	movs	r1, #120	; 0x78
 8002266:	4878      	ldr	r0, [pc, #480]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 8002268:	f00b ff9a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2178      	movs	r1, #120	; 0x78
 800227e:	4873      	ldr	r0, [pc, #460]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 8002280:	f00b ff8e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2178      	movs	r1, #120	; 0x78
 8002296:	486e      	ldr	r0, [pc, #440]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 8002298:	f00b ff82 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2178      	movs	r1, #120	; 0x78
 80022ae:	4869      	ldr	r0, [pc, #420]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 80022b0:	f00b ff76 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7a7b      	ldrb	r3, [r7, #9]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	4864      	ldr	r0, [pc, #400]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 80022c8:	f00b ff6a 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80022cc:	f000 bc58 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2302      	movs	r3, #2
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e0:	2105      	movs	r1, #5
 80022e2:	4850      	ldr	r0, [pc, #320]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022e4:	f00b ff5c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f8:	2105      	movs	r1, #5
 80022fa:	484b      	ldr	r0, [pc, #300]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022fc:	f00b ff50 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002300:	7b7b      	ldrb	r3, [r7, #13]
 8002302:	b29a      	uxth	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2302      	movs	r3, #2
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002310:	2105      	movs	r1, #5
 8002312:	4846      	ldr	r0, [pc, #280]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002314:	f00b ff44 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002318:	7b3b      	ldrb	r3, [r7, #12]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002328:	2105      	movs	r1, #5
 800232a:	4841      	ldr	r0, [pc, #260]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 800232c:	f00b ff38 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002340:	2105      	movs	r1, #5
 8002342:	483c      	ldr	r0, [pc, #240]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002344:	f00b ff2c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002348:	7abb      	ldrb	r3, [r7, #10]
 800234a:	b29a      	uxth	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002358:	2105      	movs	r1, #5
 800235a:	4837      	ldr	r0, [pc, #220]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 800235c:	f00b ff20 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2302      	movs	r3, #2
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002370:	2105      	movs	r1, #5
 8002372:	4832      	ldr	r0, [pc, #200]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002374:	f00b ff14 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	b29a      	uxth	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2302      	movs	r3, #2
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002388:	2178      	movs	r1, #120	; 0x78
 800238a:	482d      	ldr	r0, [pc, #180]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 800238c:	f00b ff08 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	4828      	ldr	r0, [pc, #160]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 80023a4:	f00b fefc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a8:	7b7b      	ldrb	r3, [r7, #13]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2302      	movs	r3, #2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b8:	2178      	movs	r1, #120	; 0x78
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 80023bc:	f00b fef0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2302      	movs	r3, #2
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d0:	2178      	movs	r1, #120	; 0x78
 80023d2:	481e      	ldr	r0, [pc, #120]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 80023d4:	f00b fee4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ec:	f00b fed8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f0:	7abb      	ldrb	r3, [r7, #10]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002400:	2178      	movs	r1, #120	; 0x78
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 8002404:	f00b fecc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002408:	7a7b      	ldrb	r3, [r7, #9]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 800241c:	f00b fec0 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8002420:	e3ae      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002422:	bf00      	nop
 8002424:	08012fe0 	.word	0x08012fe0
 8002428:	08012fe8 	.word	0x08012fe8
 800242c:	08012ff0 	.word	0x08012ff0
 8002430:	08012ff8 	.word	0x08012ff8
 8002434:	08013000 	.word	0x08013000
 8002438:	08013008 	.word	0x08013008
 800243c:	08013010 	.word	0x08013010
 8002440:	08013018 	.word	0x08013018
 8002444:	08013020 	.word	0x08013020
 8002448:	08013028 	.word	0x08013028
 800244c:	08013030 	.word	0x08013030
 8002450:	08013038 	.word	0x08013038
 8002454:	08013040 	.word	0x08013040
 8002458:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2105      	movs	r1, #5
 800246e:	48a4      	ldr	r0, [pc, #656]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 8002470:	f00b fe96 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2105      	movs	r1, #5
 8002486:	489f      	ldr	r0, [pc, #636]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 8002488:	f00b fe8a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2105      	movs	r1, #5
 800249e:	489a      	ldr	r0, [pc, #616]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80024a0:	f00b fe7e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7b3b      	ldrb	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2105      	movs	r1, #5
 80024b6:	4895      	ldr	r0, [pc, #596]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 80024b8:	f00b fe72 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2105      	movs	r1, #5
 80024ce:	4890      	ldr	r0, [pc, #576]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 80024d0:	f00b fe66 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2105      	movs	r1, #5
 80024e6:	488b      	ldr	r0, [pc, #556]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024e8:	f00b fe5a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ec:	7a7b      	ldrb	r3, [r7, #9]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fc:	2105      	movs	r1, #5
 80024fe:	4886      	ldr	r0, [pc, #536]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002500:	f00b fe4e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2302      	movs	r3, #2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002514:	2178      	movs	r1, #120	; 0x78
 8002516:	4881      	ldr	r0, [pc, #516]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002518:	f00b fe42 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252c:	2178      	movs	r1, #120	; 0x78
 800252e:	487c      	ldr	r0, [pc, #496]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002530:	f00b fe36 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2302      	movs	r3, #2
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2178      	movs	r1, #120	; 0x78
 8002546:	4877      	ldr	r0, [pc, #476]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002548:	f00b fe2a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255c:	2178      	movs	r1, #120	; 0x78
 800255e:	4872      	ldr	r0, [pc, #456]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002560:	f00b fe1e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	b29a      	uxth	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2302      	movs	r3, #2
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002574:	2178      	movs	r1, #120	; 0x78
 8002576:	486d      	ldr	r0, [pc, #436]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002578:	f00b fe12 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257c:	7abb      	ldrb	r3, [r7, #10]
 800257e:	b29a      	uxth	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2302      	movs	r3, #2
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258c:	2178      	movs	r1, #120	; 0x78
 800258e:	4868      	ldr	r0, [pc, #416]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002590:	f00b fe06 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002594:	7a7b      	ldrb	r3, [r7, #9]
 8002596:	b29a      	uxth	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	2302      	movs	r3, #2
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	4863      	ldr	r0, [pc, #396]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80025a8:	f00b fdfa 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80025ac:	e2e8      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2302      	movs	r3, #2
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025be:	2105      	movs	r1, #5
 80025c0:	484f      	ldr	r0, [pc, #316]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 80025c2:	f00b fded 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2302      	movs	r3, #2
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d6:	2105      	movs	r1, #5
 80025d8:	484a      	ldr	r0, [pc, #296]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 80025da:	f00b fde1 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ee:	2105      	movs	r1, #5
 80025f0:	4845      	ldr	r0, [pc, #276]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025f2:	f00b fdd5 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2302      	movs	r3, #2
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002606:	2105      	movs	r1, #5
 8002608:	4840      	ldr	r0, [pc, #256]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 800260a:	f00b fdc9 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	b29a      	uxth	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261e:	2105      	movs	r1, #5
 8002620:	483b      	ldr	r0, [pc, #236]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002622:	f00b fdbd 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002626:	7abb      	ldrb	r3, [r7, #10]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002636:	2105      	movs	r1, #5
 8002638:	4836      	ldr	r0, [pc, #216]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 800263a:	f00b fdb1 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263e:	7a7b      	ldrb	r3, [r7, #9]
 8002640:	b29a      	uxth	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264e:	2105      	movs	r1, #5
 8002650:	4831      	ldr	r0, [pc, #196]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002652:	f00b fda5 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	b29a      	uxth	r2, r3
 800265a:	2300      	movs	r3, #0
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002666:	2178      	movs	r1, #120	; 0x78
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 800266a:	f00b fd99 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	b29a      	uxth	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267e:	2178      	movs	r1, #120	; 0x78
 8002680:	4827      	ldr	r0, [pc, #156]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002682:	f00b fd8d 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002686:	7b7b      	ldrb	r3, [r7, #13]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002696:	2178      	movs	r1, #120	; 0x78
 8002698:	4822      	ldr	r0, [pc, #136]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 800269a:	f00b fd81 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800269e:	7b3b      	ldrb	r3, [r7, #12]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2178      	movs	r1, #120	; 0x78
 80026b0:	481d      	ldr	r0, [pc, #116]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 80026b2:	f00b fd75 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c6:	2178      	movs	r1, #120	; 0x78
 80026c8:	4818      	ldr	r0, [pc, #96]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 80026ca:	f00b fd69 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026de:	2178      	movs	r1, #120	; 0x78
 80026e0:	4813      	ldr	r0, [pc, #76]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026e2:	f00b fd5d 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e6:	7a7b      	ldrb	r3, [r7, #9]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f6:	2178      	movs	r1, #120	; 0x78
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026fa:	f00b fd51 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80026fe:	e23f      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002700:	08012fe0 	.word	0x08012fe0
 8002704:	08012fe8 	.word	0x08012fe8
 8002708:	08012ff0 	.word	0x08012ff0
 800270c:	08012ff8 	.word	0x08012ff8
 8002710:	08013000 	.word	0x08013000
 8002714:	08013008 	.word	0x08013008
 8002718:	08013010 	.word	0x08013010
 800271c:	08013018 	.word	0x08013018
 8002720:	08013020 	.word	0x08013020
 8002724:	08013028 	.word	0x08013028
 8002728:	08013030 	.word	0x08013030
 800272c:	08013038 	.word	0x08013038
 8002730:	08013040 	.word	0x08013040
 8002734:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	b29a      	uxth	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2302      	movs	r3, #2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002748:	2105      	movs	r1, #5
 800274a:	48a4      	ldr	r0, [pc, #656]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800274c:	f00b fd28 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	b29a      	uxth	r2, r3
 8002754:	2300      	movs	r3, #0
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2302      	movs	r3, #2
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002760:	2105      	movs	r1, #5
 8002762:	489f      	ldr	r0, [pc, #636]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002764:	f00b fd1c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002768:	7b7b      	ldrb	r3, [r7, #13]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2302      	movs	r3, #2
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002778:	2105      	movs	r1, #5
 800277a:	489a      	ldr	r0, [pc, #616]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 800277c:	f00b fd10 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002780:	7b3b      	ldrb	r3, [r7, #12]
 8002782:	b29a      	uxth	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002790:	2105      	movs	r1, #5
 8002792:	4895      	ldr	r0, [pc, #596]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002794:	f00b fd04 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	b29a      	uxth	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2302      	movs	r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a8:	2105      	movs	r1, #5
 80027aa:	4890      	ldr	r0, [pc, #576]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80027ac:	f00b fcf8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7abb      	ldrb	r3, [r7, #10]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2105      	movs	r1, #5
 80027c2:	488b      	ldr	r0, [pc, #556]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 80027c4:	f00b fcec 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027c8:	7a7b      	ldrb	r3, [r7, #9]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2302      	movs	r3, #2
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027d8:	2105      	movs	r1, #5
 80027da:	4886      	ldr	r0, [pc, #536]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 80027dc:	f00b fce0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f0:	2178      	movs	r1, #120	; 0x78
 80027f2:	4881      	ldr	r0, [pc, #516]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027f4:	f00b fcd4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002808:	2178      	movs	r1, #120	; 0x78
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800280c:	f00b fcc8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002810:	7b7b      	ldrb	r3, [r7, #13]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2302      	movs	r3, #2
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002820:	2178      	movs	r1, #120	; 0x78
 8002822:	4877      	ldr	r0, [pc, #476]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002824:	f00b fcbc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002828:	7b3b      	ldrb	r3, [r7, #12]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002838:	2178      	movs	r1, #120	; 0x78
 800283a:	4872      	ldr	r0, [pc, #456]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800283c:	f00b fcb0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2302      	movs	r3, #2
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	2178      	movs	r1, #120	; 0x78
 8002852:	486d      	ldr	r0, [pc, #436]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002854:	f00b fca4 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7abb      	ldrb	r3, [r7, #10]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2178      	movs	r1, #120	; 0x78
 800286a:	4868      	ldr	r0, [pc, #416]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 800286c:	f00b fc98 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2178      	movs	r1, #120	; 0x78
 8002882:	4863      	ldr	r0, [pc, #396]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002884:	f00b fc8c 	bl	800e1a0 <ILI9341_Draw_Text>
			break;
 8002888:	e17a      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	b29a      	uxth	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800289a:	2105      	movs	r1, #5
 800289c:	484f      	ldr	r0, [pc, #316]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800289e:	f00b fc7f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b2:	2105      	movs	r1, #5
 80028b4:	484a      	ldr	r0, [pc, #296]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 80028b6:	f00b fc73 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ca:	2105      	movs	r1, #5
 80028cc:	4845      	ldr	r0, [pc, #276]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 80028ce:	f00b fc67 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d2:	7b3b      	ldrb	r3, [r7, #12]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e2:	2105      	movs	r1, #5
 80028e4:	4840      	ldr	r0, [pc, #256]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028e6:	f00b fc5b 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	2300      	movs	r3, #0
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028fa:	2105      	movs	r1, #5
 80028fc:	483b      	ldr	r0, [pc, #236]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80028fe:	f00b fc4f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002902:	7abb      	ldrb	r3, [r7, #10]
 8002904:	b29a      	uxth	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002912:	2105      	movs	r1, #5
 8002914:	4836      	ldr	r0, [pc, #216]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002916:	f00b fc43 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800291a:	7a7b      	ldrb	r3, [r7, #9]
 800291c:	b29a      	uxth	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800292a:	2105      	movs	r1, #5
 800292c:	4831      	ldr	r0, [pc, #196]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 800292e:	f00b fc37 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	b29a      	uxth	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002942:	2178      	movs	r1, #120	; 0x78
 8002944:	482c      	ldr	r0, [pc, #176]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002946:	f00b fc2b 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	b29a      	uxth	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800295a:	2178      	movs	r1, #120	; 0x78
 800295c:	4827      	ldr	r0, [pc, #156]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800295e:	f00b fc1f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002962:	7b7b      	ldrb	r3, [r7, #13]
 8002964:	b29a      	uxth	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002972:	2178      	movs	r1, #120	; 0x78
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002976:	f00b fc13 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800297a:	7b3b      	ldrb	r3, [r7, #12]
 800297c:	b29a      	uxth	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2302      	movs	r3, #2
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800298a:	2178      	movs	r1, #120	; 0x78
 800298c:	481d      	ldr	r0, [pc, #116]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800298e:	f00b fc07 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	b29a      	uxth	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a2:	2178      	movs	r1, #120	; 0x78
 80029a4:	4818      	ldr	r0, [pc, #96]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 80029a6:	f00b fbfb 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029aa:	7abb      	ldrb	r3, [r7, #10]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2178      	movs	r1, #120	; 0x78
 80029bc:	4813      	ldr	r0, [pc, #76]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 80029be:	f00b fbef 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c2:	7a7b      	ldrb	r3, [r7, #9]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d2:	2178      	movs	r1, #120	; 0x78
 80029d4:	480e      	ldr	r0, [pc, #56]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 80029d6:	f00b fbe3 	bl	800e1a0 <ILI9341_Draw_Text>
			break;
 80029da:	e0d1      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 80029dc:	08012fe0 	.word	0x08012fe0
 80029e0:	08012fe8 	.word	0x08012fe8
 80029e4:	08012ff0 	.word	0x08012ff0
 80029e8:	08012ff8 	.word	0x08012ff8
 80029ec:	08013000 	.word	0x08013000
 80029f0:	08013008 	.word	0x08013008
 80029f4:	08013010 	.word	0x08013010
 80029f8:	08013018 	.word	0x08013018
 80029fc:	08013020 	.word	0x08013020
 8002a00:	08013028 	.word	0x08013028
 8002a04:	08013030 	.word	0x08013030
 8002a08:	08013038 	.word	0x08013038
 8002a0c:	08013040 	.word	0x08013040
 8002a10:	08013048 	.word	0x08013048
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a24:	2105      	movs	r1, #5
 8002a26:	4858      	ldr	r0, [pc, #352]	; (8002b88 <FreqMenu_DrawPresetMenu+0x1520>)
 8002a28:	f00b fbba 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a2c:	7bbb      	ldrb	r3, [r7, #14]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2302      	movs	r3, #2
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	4853      	ldr	r0, [pc, #332]	; (8002b8c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a40:	f00b fbae 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a54:	2105      	movs	r1, #5
 8002a56:	484e      	ldr	r0, [pc, #312]	; (8002b90 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a58:	f00b fba2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4849      	ldr	r0, [pc, #292]	; (8002b94 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a70:	f00b fb96 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2105      	movs	r1, #5
 8002a86:	4844      	ldr	r0, [pc, #272]	; (8002b98 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a88:	f00b fb8a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a8c:	7abb      	ldrb	r3, [r7, #10]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2302      	movs	r3, #2
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	483f      	ldr	r0, [pc, #252]	; (8002b9c <FreqMenu_DrawPresetMenu+0x1534>)
 8002aa0:	f00b fb7e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa4:	7a7b      	ldrb	r3, [r7, #9]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <FreqMenu_DrawPresetMenu+0x1538>)
 8002ab8:	f00b fb72 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002acc:	2178      	movs	r1, #120	; 0x78
 8002ace:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <FreqMenu_DrawPresetMenu+0x153c>)
 8002ad0:	f00b fb66 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2302      	movs	r3, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ae4:	2178      	movs	r1, #120	; 0x78
 8002ae6:	4830      	ldr	r0, [pc, #192]	; (8002ba8 <FreqMenu_DrawPresetMenu+0x1540>)
 8002ae8:	f00b fb5a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2302      	movs	r3, #2
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002afc:	2178      	movs	r1, #120	; 0x78
 8002afe:	482b      	ldr	r0, [pc, #172]	; (8002bac <FreqMenu_DrawPresetMenu+0x1544>)
 8002b00:	f00b fb4e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b04:	7b3b      	ldrb	r3, [r7, #12]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b14:	2178      	movs	r1, #120	; 0x78
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002b18:	f00b fb42 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b2c:	2178      	movs	r1, #120	; 0x78
 8002b2e:	4821      	ldr	r0, [pc, #132]	; (8002bb4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002b30:	f00b fb36 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b34:	7abb      	ldrb	r3, [r7, #10]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b44:	2178      	movs	r1, #120	; 0x78
 8002b46:	481c      	ldr	r0, [pc, #112]	; (8002bb8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b48:	f00b fb2a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2302      	movs	r3, #2
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2178      	movs	r1, #120	; 0x78
 8002b5e:	4817      	ldr	r0, [pc, #92]	; (8002bbc <FreqMenu_DrawPresetMenu+0x1554>)
 8002b60:	f00b fb1e 	bl	800e1a0 <ILI9341_Draw_Text>
			break;
 8002b64:	bf00      	nop
 8002b66:	e00b      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b68:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	22b4      	movs	r2, #180	; 0xb4
 8002b76:	2105      	movs	r1, #5
 8002b78:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b7a:	f00b fb11 	bl	800e1a0 <ILI9341_Draw_Text>
}
 8002b7e:	e7ff      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08012fe0 	.word	0x08012fe0
 8002b8c:	08012fe8 	.word	0x08012fe8
 8002b90:	08012ff0 	.word	0x08012ff0
 8002b94:	08012ff8 	.word	0x08012ff8
 8002b98:	08013000 	.word	0x08013000
 8002b9c:	08013008 	.word	0x08013008
 8002ba0:	08013010 	.word	0x08013010
 8002ba4:	08013018 	.word	0x08013018
 8002ba8:	08013020 	.word	0x08013020
 8002bac:	08013028 	.word	0x08013028
 8002bb0:	08013030 	.word	0x08013030
 8002bb4:	08013038 	.word	0x08013038
 8002bb8:	08013040 	.word	0x08013040
 8002bbc:	08013048 	.word	0x08013048
 8002bc0:	08013054 	.word	0x08013054

08002bc4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	2105      	movs	r1, #5
 8002bda:	4804      	ldr	r0, [pc, #16]	; (8002bec <FreqMenu_DrawAdjustMenu+0x28>)
 8002bdc:	f00b fae0 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002be0:	f7fe f9c8 	bl	8000f74 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	08013084 	.word	0x08013084

08002bf0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b0a0      	sub	sp, #128	; 0x80
 8002bf4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	220a      	movs	r2, #10
 8002c04:	2105      	movs	r1, #5
 8002c06:	48a1      	ldr	r0, [pc, #644]	; (8002e8c <FreqMenu_DrawSweepMenu+0x29c>)
 8002c08:	f00b faca 	bl	800e1a0 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c1e:	4b9c      	ldr	r3, [pc, #624]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d109      	bne.n	8002c3e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002c2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c2e:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c30:	461c      	mov	r4, r3
 8002c32:	4615      	mov	r5, r2
 8002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	7023      	strb	r3, [r4, #0]
 8002c3c:	e008      	b.n	8002c50 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c42:	4a95      	ldr	r2, [pc, #596]	; (8002e98 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c44:	461c      	mov	r4, r3
 8002c46:	4615      	mov	r5, r2
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c50:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c54:	2300      	movs	r3, #0
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2302      	movs	r3, #2
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c60:	2228      	movs	r2, #40	; 0x28
 8002c62:	2105      	movs	r1, #5
 8002c64:	f00b fa9c 	bl	800e1a0 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c7e:	f003 f975 	bl	8005f6c <SM_GetOutputInHertz>
 8002c82:	ee10 3a10 	vmov	r3, s0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc86 	bl	8000598 <__aeabi_f2d>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c94:	e9cd 3400 	strd	r3, r4, [sp]
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c9a:	2119      	movs	r1, #25
 8002c9c:	f00c fe24 	bl	800f8e8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ca0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cb0:	223c      	movs	r2, #60	; 0x3c
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	f00b fa74 	bl	800e1a0 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cc4:	2264      	movs	r2, #100	; 0x64
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	4875      	ldr	r0, [pc, #468]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002cca:	f00b fa69 	bl	800e1a0 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d117      	bne.n	8002d0a <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce6:	2264      	movs	r2, #100	; 0x64
 8002ce8:	21eb      	movs	r1, #235	; 0xeb
 8002cea:	486e      	ldr	r0, [pc, #440]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cec:	f00b fa58 	bl	800e1a0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2264      	movs	r2, #100	; 0x64
 8002cfe:	f240 1109 	movw	r1, #265	; 0x109
 8002d02:	4869      	ldr	r0, [pc, #420]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d04:	f00b fa4c 	bl	800e1a0 <ILI9341_Draw_Text>
 8002d08:	e016      	b.n	8002d38 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2302      	movs	r3, #2
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d16:	2264      	movs	r2, #100	; 0x64
 8002d18:	f240 1109 	movw	r1, #265	; 0x109
 8002d1c:	4862      	ldr	r0, [pc, #392]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d1e:	f00b fa3f 	bl	800e1a0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d22:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2264      	movs	r2, #100	; 0x64
 8002d30:	21eb      	movs	r1, #235	; 0xeb
 8002d32:	485c      	ldr	r0, [pc, #368]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d34:	f00b fa34 	bl	800e1a0 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2278      	movs	r2, #120	; 0x78
 8002d4e:	2105      	movs	r1, #5
 8002d50:	4857      	ldr	r0, [pc, #348]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d52:	f00b fa25 	bl	800e1a0 <ILI9341_Draw_Text>
 8002d56:	e00a      	b.n	8002d6e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d64:	2278      	movs	r2, #120	; 0x78
 8002d66:	2105      	movs	r1, #5
 8002d68:	4851      	ldr	r0, [pc, #324]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d6a:	f00b fa19 	bl	800e1a0 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fc05 	bl	8000598 <__aeabi_f2d>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d96:	e9cd 3400 	strd	r3, r4, [sp]
 8002d9a:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d9c:	2119      	movs	r1, #25
 8002d9e:	f00c fda3 	bl	800f8e8 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002db2:	2278      	movs	r2, #120	; 0x78
 8002db4:	21b6      	movs	r1, #182	; 0xb6
 8002db6:	f00b f9f3 	bl	800e1a0 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10f      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002dca:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	228c      	movs	r2, #140	; 0x8c
 8002dd8:	2105      	movs	r1, #5
 8002dda:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002ddc:	f00b f9e0 	bl	800e1a0 <ILI9341_Draw_Text>
 8002de0:	e00a      	b.n	8002df8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dee:	228c      	movs	r2, #140	; 0x8c
 8002df0:	2105      	movs	r1, #5
 8002df2:	4833      	ldr	r0, [pc, #204]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002df4:	f00b f9d4 	bl	800e1a0 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	ee17 0a90 	vmov	r0, s15
 8002e20:	f003 f8e8 	bl	8005ff4 <SM_ConvertPeriodToHertz>
 8002e24:	eeb0 7a40 	vmov.f32	s14, s0
 8002e28:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ecc <FreqMenu_DrawSweepMenu+0x2dc>
 8002e2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e30:	ee16 0a90 	vmov	r0, s13
 8002e34:	f7fd fbb0 	bl	8000598 <__aeabi_f2d>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f107 0018 	add.w	r0, r7, #24
 8002e40:	e9cd 3400 	strd	r3, r4, [sp]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e46:	2114      	movs	r1, #20
 8002e48:	f00c fd4e 	bl	800f8e8 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e4c:	f107 0018 	add.w	r0, r7, #24
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e5c:	228c      	movs	r2, #140	; 0x8c
 8002e5e:	219e      	movs	r1, #158	; 0x9e
 8002e60:	f00b f99e 	bl	800e1a0 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d135      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d131      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	22a0      	movs	r2, #160	; 0xa0
 8002e82:	2105      	movs	r1, #5
 8002e84:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e86:	f00b f98b 	bl	800e1a0 <ILI9341_Draw_Text>
 8002e8a:	e030      	b.n	8002eee <FreqMenu_DrawSweepMenu+0x2fe>
 8002e8c:	08013098 	.word	0x08013098
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	080130ac 	.word	0x080130ac
 8002e98:	080130c0 	.word	0x080130c0
 8002e9c:	080130d4 	.word	0x080130d4
 8002ea0:	080130e8 	.word	0x080130e8
 8002ea4:	080130f4 	.word	0x080130f4
 8002ea8:	080130f8 	.word	0x080130f8
 8002eac:	20001e59 	.word	0x20001e59
 8002eb0:	08013100 	.word	0x08013100
 8002eb4:	20001eac 	.word	0x20001eac
 8002eb8:	08013110 	.word	0x08013110
 8002ebc:	20001e58 	.word	0x20001e58
 8002ec0:	0801311c 	.word	0x0801311c
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	42f00000 	.word	0x42f00000
 8002ed0:	0801312c 	.word	0x0801312c
 8002ed4:	08013138 	.word	0x08013138
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ee4:	22a0      	movs	r2, #160	; 0xa0
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	484d      	ldr	r0, [pc, #308]	; (8003020 <FreqMenu_DrawSweepMenu+0x430>)
 8002eea:	f00b f959 	bl	800e1a0 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <FreqMenu_DrawSweepMenu+0x434>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <FreqMenu_DrawSweepMenu+0x438>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	ee17 0a90 	vmov	r0, s15
 8002f16:	f003 f86d 	bl	8005ff4 <SM_ConvertPeriodToHertz>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800302c <FreqMenu_DrawSweepMenu+0x43c>
 8002f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f26:	ee16 0a90 	vmov	r0, s13
 8002f2a:	f7fd fb35 	bl	8000598 <__aeabi_f2d>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	1d38      	adds	r0, r7, #4
 8002f34:	e9cd 3400 	strd	r3, r4, [sp]
 8002f38:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <FreqMenu_DrawSweepMenu+0x440>)
 8002f3a:	2114      	movs	r1, #20
 8002f3c:	f00c fcd4 	bl	800f8e8 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f40:	1d38      	adds	r0, r7, #4
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f4e:	22a0      	movs	r2, #160	; 0xa0
 8002f50:	21aa      	movs	r1, #170	; 0xaa
 8002f52:	f00b f925 	bl	800e1a0 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <FreqMenu_DrawSweepMenu+0x444>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10b      	bne.n	8002f7a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f62:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	22d5      	movs	r2, #213	; 0xd5
 8002f70:	2106      	movs	r1, #6
 8002f72:	4831      	ldr	r0, [pc, #196]	; (8003038 <FreqMenu_DrawSweepMenu+0x448>)
 8002f74:	f00b f914 	bl	800e1a0 <ILI9341_Draw_Text>
 8002f78:	e00a      	b.n	8002f90 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	2302      	movs	r3, #2
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	22d5      	movs	r2, #213	; 0xd5
 8002f88:	2105      	movs	r1, #5
 8002f8a:	482c      	ldr	r0, [pc, #176]	; (800303c <FreqMenu_DrawSweepMenu+0x44c>)
 8002f8c:	f00b f908 	bl	800e1a0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2302      	movs	r3, #2
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	22cc      	movs	r2, #204	; 0xcc
 8002f9e:	2169      	movs	r1, #105	; 0x69
 8002fa0:	4827      	ldr	r0, [pc, #156]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fa2:	f00b f8fd 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002fa6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2302      	movs	r3, #2
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	22de      	movs	r2, #222	; 0xde
 8002fb4:	2162      	movs	r1, #98	; 0x62
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <FreqMenu_DrawSweepMenu+0x454>)
 8002fb8:	f00b f8f2 	bl	800e1a0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	22cc      	movs	r2, #204	; 0xcc
 8002fca:	21b7      	movs	r1, #183	; 0xb7
 8002fcc:	481c      	ldr	r0, [pc, #112]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fce:	f00b f8e7 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	2302      	movs	r3, #2
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	22de      	movs	r2, #222	; 0xde
 8002fe0:	21ad      	movs	r1, #173	; 0xad
 8002fe2:	4819      	ldr	r0, [pc, #100]	; (8003048 <FreqMenu_DrawSweepMenu+0x458>)
 8002fe4:	f00b f8dc 	bl	800e1a0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fe8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	22cc      	movs	r2, #204	; 0xcc
 8002ff6:	f240 1107 	movw	r1, #263	; 0x107
 8002ffa:	4811      	ldr	r0, [pc, #68]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002ffc:	f00b f8d0 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003000:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	22de      	movs	r2, #222	; 0xde
 800300e:	21fc      	movs	r1, #252	; 0xfc
 8003010:	480e      	ldr	r0, [pc, #56]	; (800304c <FreqMenu_DrawSweepMenu+0x45c>)
 8003012:	f00b f8c5 	bl	800e1a0 <ILI9341_Draw_Text>
}
 8003016:	bf00      	nop
 8003018:	3778      	adds	r7, #120	; 0x78
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	08013138 	.word	0x08013138
 8003024:	20000004 	.word	0x20000004
 8003028:	40013400 	.word	0x40013400
 800302c:	42f00000 	.word	0x42f00000
 8003030:	08013148 	.word	0x08013148
 8003034:	40000c00 	.word	0x40000c00
 8003038:	08013154 	.word	0x08013154
 800303c:	0801315c 	.word	0x0801315c
 8003040:	08013164 	.word	0x08013164
 8003044:	08013168 	.word	0x08013168
 8003048:	08013170 	.word	0x08013170
 800304c:	08013178 	.word	0x08013178

08003050 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d007      	beq.n	8003070 <FuncMenu_DrawMenu+0x20>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d009      	beq.n	8003078 <FuncMenu_DrawMenu+0x28>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d000      	beq.n	800306a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(Aux_CHANNEL);
			break;

		default:
			break;
 8003068:	e00a      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800306a:	f000 f80d 	bl	8003088 <FuncMenu_DrawMainMenu>
			break;
 800306e:	e007      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003070:	2000      	movs	r0, #0
 8003072:	f000 f851 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 8003076:	e003      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(Aux_CHANNEL);
 8003078:	2001      	movs	r0, #1
 800307a:	f000 f84d 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 800307e:	bf00      	nop

	}
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	220a      	movs	r2, #10
 800309c:	210a      	movs	r1, #10
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <FuncMenu_DrawMainMenu+0x80>)
 80030a0:	f00b f87e 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80030a4:	f7fd ff66 	bl	8000f74 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80030a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2302      	movs	r3, #2
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	22d2      	movs	r2, #210	; 0xd2
 80030b6:	2105      	movs	r1, #5
 80030b8:	4814      	ldr	r0, [pc, #80]	; (800310c <FuncMenu_DrawMainMenu+0x84>)
 80030ba:	f00b f871 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Aux", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80030be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	2302      	movs	r3, #2
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	22d2      	movs	r2, #210	; 0xd2
 80030cc:	2161      	movs	r1, #97	; 0x61
 80030ce:	4810      	ldr	r0, [pc, #64]	; (8003110 <FuncMenu_DrawMainMenu+0x88>)
 80030d0:	f00b f866 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80030d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2302      	movs	r3, #2
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	22d2      	movs	r2, #210	; 0xd2
 80030e2:	21af      	movs	r1, #175	; 0xaf
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030e6:	f00b f85b 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2302      	movs	r3, #2
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	22d2      	movs	r2, #210	; 0xd2
 80030f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030fc:	4805      	ldr	r0, [pc, #20]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030fe:	f00b f84f 	bl	800e1a0 <ILI9341_Draw_Text>
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	08013180 	.word	0x08013180
 800310c:	0801318c 	.word	0x0801318c
 8003110:	08013194 	.word	0x08013194
 8003114:	08013198 	.word	0x08013198

08003118 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af02      	add	r7, sp, #8
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->Aux", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	2302      	movs	r3, #2
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	220a      	movs	r2, #10
 8003136:	210a      	movs	r1, #10
 8003138:	4893      	ldr	r0, [pc, #588]	; (8003388 <FuncMenu_DrawOutputMenu+0x270>)
 800313a:	f00b f831 	bl	800e1a0 <ILI9341_Draw_Text>
 800313e:	e00a      	b.n	8003156 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	220a      	movs	r2, #10
 800314e:	210a      	movs	r1, #10
 8003150:	488e      	ldr	r0, [pc, #568]	; (800338c <FuncMenu_DrawOutputMenu+0x274>)
 8003152:	f00b f825 	bl	800e1a0 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fd5f 	bl	8005c1c <SM_GetOutputChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003164:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 83ff 	beq.w	800396c <FuncMenu_DrawOutputMenu+0x854>
	{
		switch(func_profileTmp->func)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b06      	cmp	r3, #6
 8003174:	f200 83fa 	bhi.w	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <FuncMenu_DrawOutputMenu+0x68>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	0800319d 	.word	0x0800319d
 8003184:	08003293 	.word	0x08003293
 8003188:	080033b1 	.word	0x080033b1
 800318c:	080034a7 	.word	0x080034a7
 8003190:	0800359d 	.word	0x0800359d
 8003194:	080036cd 	.word	0x080036cd
 8003198:	080037d9 	.word	0x080037d9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800319c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2302      	movs	r3, #2
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2300      	movs	r3, #0
 80031a8:	2232      	movs	r2, #50	; 0x32
 80031aa:	210a      	movs	r1, #10
 80031ac:	4878      	ldr	r0, [pc, #480]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80031ae:	f00a fff7 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b2:	2300      	movs	r3, #0
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031be:	2246      	movs	r2, #70	; 0x46
 80031c0:	210a      	movs	r1, #10
 80031c2:	4874      	ldr	r0, [pc, #464]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80031c4:	f00a ffec 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c8:	2300      	movs	r3, #0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d4:	225a      	movs	r2, #90	; 0x5a
 80031d6:	210a      	movs	r1, #10
 80031d8:	486f      	ldr	r0, [pc, #444]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80031da:	f00a ffe1 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031de:	2300      	movs	r3, #0
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ea:	226e      	movs	r2, #110	; 0x6e
 80031ec:	210a      	movs	r1, #10
 80031ee:	486b      	ldr	r0, [pc, #428]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80031f0:	f00a ffd6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	2302      	movs	r3, #2
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003200:	2282      	movs	r2, #130	; 0x82
 8003202:	210a      	movs	r1, #10
 8003204:	4866      	ldr	r0, [pc, #408]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 8003206:	f00a ffcb 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800320a:	2300      	movs	r3, #0
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2302      	movs	r3, #2
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003216:	2296      	movs	r2, #150	; 0x96
 8003218:	210a      	movs	r1, #10
 800321a:	4862      	ldr	r0, [pc, #392]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 800321c:	f00a ffc0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322c:	22aa      	movs	r2, #170	; 0xaa
 800322e:	210a      	movs	r1, #10
 8003230:	485d      	ldr	r0, [pc, #372]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003232:	f00a ffb5 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003236:	f240 23fd 	movw	r3, #765	; 0x2fd
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	22d2      	movs	r2, #210	; 0xd2
 8003244:	2105      	movs	r1, #5
 8003246:	4859      	ldr	r0, [pc, #356]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003248:	f00a ffaa 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800324c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	22d2      	movs	r2, #210	; 0xd2
 800325a:	2161      	movs	r1, #97	; 0x61
 800325c:	4853      	ldr	r0, [pc, #332]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800325e:	f00a ff9f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003262:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	22d2      	movs	r2, #210	; 0xd2
 8003270:	21af      	movs	r1, #175	; 0xaf
 8003272:	484e      	ldr	r0, [pc, #312]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003274:	f00a ff94 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003278:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	22d2      	movs	r2, #210	; 0xd2
 8003286:	f44f 7182 	mov.w	r1, #260	; 0x104
 800328a:	4848      	ldr	r0, [pc, #288]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800328c:	f00a ff88 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8003290:	e36c      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003292:	2300      	movs	r3, #0
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	210a      	movs	r1, #10
 80032a2:	483b      	ldr	r0, [pc, #236]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80032a4:	f00a ff7c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80032a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2302      	movs	r3, #2
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	2246      	movs	r2, #70	; 0x46
 80032b6:	210a      	movs	r1, #10
 80032b8:	4836      	ldr	r0, [pc, #216]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80032ba:	f00a ff71 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032be:	2300      	movs	r3, #0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ca:	225a      	movs	r2, #90	; 0x5a
 80032cc:	210a      	movs	r1, #10
 80032ce:	4832      	ldr	r0, [pc, #200]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80032d0:	f00a ff66 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032d4:	2300      	movs	r3, #0
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e0:	226e      	movs	r2, #110	; 0x6e
 80032e2:	210a      	movs	r1, #10
 80032e4:	482d      	ldr	r0, [pc, #180]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80032e6:	f00a ff5b 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032f6:	2282      	movs	r2, #130	; 0x82
 80032f8:	210a      	movs	r1, #10
 80032fa:	4829      	ldr	r0, [pc, #164]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 80032fc:	f00a ff50 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800330c:	2296      	movs	r2, #150	; 0x96
 800330e:	210a      	movs	r1, #10
 8003310:	4824      	ldr	r0, [pc, #144]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 8003312:	f00a ff45 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003316:	2300      	movs	r3, #0
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003322:	22aa      	movs	r2, #170	; 0xaa
 8003324:	210a      	movs	r1, #10
 8003326:	4820      	ldr	r0, [pc, #128]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003328:	f00a ff3a 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2302      	movs	r3, #2
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	22d2      	movs	r2, #210	; 0xd2
 800333a:	2105      	movs	r1, #5
 800333c:	481b      	ldr	r0, [pc, #108]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800333e:	f00a ff2f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003342:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	2302      	movs	r3, #2
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	22d2      	movs	r2, #210	; 0xd2
 8003350:	2161      	movs	r1, #97	; 0x61
 8003352:	4816      	ldr	r0, [pc, #88]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003354:	f00a ff24 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003358:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2302      	movs	r3, #2
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	22d2      	movs	r2, #210	; 0xd2
 8003366:	21af      	movs	r1, #175	; 0xaf
 8003368:	4810      	ldr	r0, [pc, #64]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800336a:	f00a ff19 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800336e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	22d2      	movs	r2, #210	; 0xd2
 800337c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003380:	480a      	ldr	r0, [pc, #40]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003382:	f00a ff0d 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 8003386:	e2f1      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003388:	080131a0 	.word	0x080131a0
 800338c:	080131b0 	.word	0x080131b0
 8003390:	080131c0 	.word	0x080131c0
 8003394:	080131c8 	.word	0x080131c8
 8003398:	080131d4 	.word	0x080131d4
 800339c:	080131dc 	.word	0x080131dc
 80033a0:	080131e8 	.word	0x080131e8
 80033a4:	080131f4 	.word	0x080131f4
 80033a8:	080131fc 	.word	0x080131fc
 80033ac:	08013198 	.word	0x08013198
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033b0:	2300      	movs	r3, #0
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	210a      	movs	r1, #10
 80033c0:	48b9      	ldr	r0, [pc, #740]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80033c2:	f00a feed 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033c6:	2300      	movs	r3, #0
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2302      	movs	r3, #2
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033d2:	2246      	movs	r2, #70	; 0x46
 80033d4:	210a      	movs	r1, #10
 80033d6:	48b5      	ldr	r0, [pc, #724]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80033d8:	f00a fee2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033dc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2302      	movs	r3, #2
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	210a      	movs	r1, #10
 80033ec:	48b0      	ldr	r0, [pc, #704]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80033ee:	f00a fed7 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033fe:	226e      	movs	r2, #110	; 0x6e
 8003400:	210a      	movs	r1, #10
 8003402:	48ac      	ldr	r0, [pc, #688]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 8003404:	f00a fecc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003414:	2282      	movs	r2, #130	; 0x82
 8003416:	210a      	movs	r1, #10
 8003418:	48a7      	ldr	r0, [pc, #668]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 800341a:	f00a fec1 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341e:	2300      	movs	r3, #0
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800342a:	2296      	movs	r2, #150	; 0x96
 800342c:	210a      	movs	r1, #10
 800342e:	48a3      	ldr	r0, [pc, #652]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003430:	f00a feb6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003440:	22aa      	movs	r2, #170	; 0xaa
 8003442:	210a      	movs	r1, #10
 8003444:	489e      	ldr	r0, [pc, #632]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003446:	f00a feab 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800344a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	22d2      	movs	r2, #210	; 0xd2
 8003458:	2105      	movs	r1, #5
 800345a:	489a      	ldr	r0, [pc, #616]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800345c:	f00a fea0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003460:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	22d2      	movs	r2, #210	; 0xd2
 800346e:	2161      	movs	r1, #97	; 0x61
 8003470:	4894      	ldr	r0, [pc, #592]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003472:	f00a fe95 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	22d2      	movs	r2, #210	; 0xd2
 8003484:	21af      	movs	r1, #175	; 0xaf
 8003486:	488f      	ldr	r0, [pc, #572]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003488:	f00a fe8a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800348c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	22d2      	movs	r2, #210	; 0xd2
 800349a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800349e:	4889      	ldr	r0, [pc, #548]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 80034a0:	f00a fe7e 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80034a4:	e262      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2302      	movs	r3, #2
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	210a      	movs	r1, #10
 80034b6:	487c      	ldr	r0, [pc, #496]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80034b8:	f00a fe72 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034bc:	2300      	movs	r3, #0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2302      	movs	r3, #2
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c8:	2246      	movs	r2, #70	; 0x46
 80034ca:	210a      	movs	r1, #10
 80034cc:	4877      	ldr	r0, [pc, #476]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80034ce:	f00a fe67 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034de:	225a      	movs	r2, #90	; 0x5a
 80034e0:	210a      	movs	r1, #10
 80034e2:	4873      	ldr	r0, [pc, #460]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80034e4:	f00a fe5c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2302      	movs	r3, #2
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	226e      	movs	r2, #110	; 0x6e
 80034f6:	210a      	movs	r1, #10
 80034f8:	486e      	ldr	r0, [pc, #440]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80034fa:	f00a fe51 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	2282      	movs	r2, #130	; 0x82
 800350c:	210a      	movs	r1, #10
 800350e:	486a      	ldr	r0, [pc, #424]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003510:	f00a fe46 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003514:	2300      	movs	r3, #0
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003520:	2296      	movs	r2, #150	; 0x96
 8003522:	210a      	movs	r1, #10
 8003524:	4865      	ldr	r0, [pc, #404]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003526:	f00a fe3b 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2302      	movs	r3, #2
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003536:	22aa      	movs	r2, #170	; 0xaa
 8003538:	210a      	movs	r1, #10
 800353a:	4861      	ldr	r0, [pc, #388]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 800353c:	f00a fe30 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003540:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	2105      	movs	r1, #5
 8003550:	485c      	ldr	r0, [pc, #368]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003552:	f00a fe25 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003556:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	2161      	movs	r1, #97	; 0x61
 8003566:	4857      	ldr	r0, [pc, #348]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003568:	f00a fe1a 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800356c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	22d2      	movs	r2, #210	; 0xd2
 800357a:	21af      	movs	r1, #175	; 0xaf
 800357c:	4851      	ldr	r0, [pc, #324]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800357e:	f00a fe0f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003582:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2302      	movs	r3, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	22d2      	movs	r2, #210	; 0xd2
 8003590:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003594:	484b      	ldr	r0, [pc, #300]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003596:	f00a fe03 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 800359a:	e1e7      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	2232      	movs	r2, #50	; 0x32
 80035aa:	210a      	movs	r1, #10
 80035ac:	483e      	ldr	r0, [pc, #248]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80035ae:	f00a fdf7 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	2246      	movs	r2, #70	; 0x46
 80035c0:	210a      	movs	r1, #10
 80035c2:	483a      	ldr	r0, [pc, #232]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80035c4:	f00a fdec 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035c8:	2300      	movs	r3, #0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d4:	225a      	movs	r2, #90	; 0x5a
 80035d6:	210a      	movs	r1, #10
 80035d8:	4835      	ldr	r0, [pc, #212]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80035da:	f00a fde1 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	226e      	movs	r2, #110	; 0x6e
 80035ec:	210a      	movs	r1, #10
 80035ee:	4831      	ldr	r0, [pc, #196]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80035f0:	f00a fdd6 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2302      	movs	r3, #2
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	2282      	movs	r2, #130	; 0x82
 8003602:	210a      	movs	r1, #10
 8003604:	482c      	ldr	r0, [pc, #176]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003606:	f00a fdcb 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360a:	2300      	movs	r3, #0
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2302      	movs	r3, #2
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003616:	2296      	movs	r2, #150	; 0x96
 8003618:	210a      	movs	r1, #10
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 800361c:	f00a fdc0 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	2302      	movs	r3, #2
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800362c:	22aa      	movs	r2, #170	; 0xaa
 800362e:	210a      	movs	r1, #10
 8003630:	4823      	ldr	r0, [pc, #140]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003632:	f00a fdb5 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003636:	f240 23fd 	movw	r3, #765	; 0x2fd
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	22d2      	movs	r2, #210	; 0xd2
 8003644:	2105      	movs	r1, #5
 8003646:	481f      	ldr	r0, [pc, #124]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003648:	f00a fdaa 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800364c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2302      	movs	r3, #2
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	22d2      	movs	r2, #210	; 0xd2
 800365a:	2161      	movs	r1, #97	; 0x61
 800365c:	4819      	ldr	r0, [pc, #100]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800365e:	f00a fd9f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003662:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2302      	movs	r3, #2
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	22d2      	movs	r2, #210	; 0xd2
 8003670:	21af      	movs	r1, #175	; 0xaf
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003674:	f00a fd94 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003678:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2302      	movs	r3, #2
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	22d2      	movs	r2, #210	; 0xd2
 8003686:	f44f 7182 	mov.w	r1, #260	; 0x104
 800368a:	480e      	ldr	r0, [pc, #56]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800368c:	f00a fd88 	bl	800e1a0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2302      	movs	r3, #2
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	2196      	movs	r1, #150	; 0x96
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <FuncMenu_DrawOutputMenu+0x5b0>)
 80036a2:	f00a fd7d 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80036a6:	e161      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 80036a8:	080131c0 	.word	0x080131c0
 80036ac:	080131c8 	.word	0x080131c8
 80036b0:	080131d4 	.word	0x080131d4
 80036b4:	080131dc 	.word	0x080131dc
 80036b8:	080131e8 	.word	0x080131e8
 80036bc:	080131f4 	.word	0x080131f4
 80036c0:	080131fc 	.word	0x080131fc
 80036c4:	08013198 	.word	0x08013198
 80036c8:	08013204 	.word	0x08013204
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2232      	movs	r2, #50	; 0x32
 80036da:	210a      	movs	r1, #10
 80036dc:	48a5      	ldr	r0, [pc, #660]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80036de:	f00a fd5f 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2246      	movs	r2, #70	; 0x46
 80036f0:	210a      	movs	r1, #10
 80036f2:	48a1      	ldr	r0, [pc, #644]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 80036f4:	f00a fd54 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036f8:	2300      	movs	r3, #0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2302      	movs	r3, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003704:	225a      	movs	r2, #90	; 0x5a
 8003706:	210a      	movs	r1, #10
 8003708:	489c      	ldr	r0, [pc, #624]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 800370a:	f00a fd49 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370e:	2300      	movs	r3, #0
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2302      	movs	r3, #2
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800371a:	226e      	movs	r2, #110	; 0x6e
 800371c:	210a      	movs	r1, #10
 800371e:	4898      	ldr	r0, [pc, #608]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 8003720:	f00a fd3e 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003724:	2300      	movs	r3, #0
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	2302      	movs	r3, #2
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003730:	2282      	movs	r2, #130	; 0x82
 8003732:	210a      	movs	r1, #10
 8003734:	4893      	ldr	r0, [pc, #588]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003736:	f00a fd33 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800373a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	2302      	movs	r3, #2
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	2296      	movs	r2, #150	; 0x96
 8003748:	210a      	movs	r1, #10
 800374a:	488f      	ldr	r0, [pc, #572]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 800374c:	f00a fd28 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800375c:	22aa      	movs	r2, #170	; 0xaa
 800375e:	210a      	movs	r1, #10
 8003760:	488a      	ldr	r0, [pc, #552]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 8003762:	f00a fd1d 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003766:	f240 23fd 	movw	r3, #765	; 0x2fd
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2302      	movs	r3, #2
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	22d2      	movs	r2, #210	; 0xd2
 8003774:	2105      	movs	r1, #5
 8003776:	4886      	ldr	r0, [pc, #536]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003778:	f00a fd12 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800377c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2302      	movs	r3, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	22d2      	movs	r2, #210	; 0xd2
 800378a:	2161      	movs	r1, #97	; 0x61
 800378c:	4880      	ldr	r0, [pc, #512]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800378e:	f00a fd07 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003792:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2302      	movs	r3, #2
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	22d2      	movs	r2, #210	; 0xd2
 80037a0:	21af      	movs	r1, #175	; 0xaf
 80037a2:	487b      	ldr	r0, [pc, #492]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037a4:	f00a fcfc 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037a8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2302      	movs	r3, #2
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	22d2      	movs	r2, #210	; 0xd2
 80037b6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037ba:	4875      	ldr	r0, [pc, #468]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037bc:	f00a fcf0 	bl	800e1a0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037c0:	2300      	movs	r3, #0
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2302      	movs	r3, #2
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037cc:	2232      	movs	r2, #50	; 0x32
 80037ce:	2196      	movs	r1, #150	; 0x96
 80037d0:	4870      	ldr	r0, [pc, #448]	; (8003994 <FuncMenu_DrawOutputMenu+0x87c>)
 80037d2:	f00a fce5 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 80037d6:	e0c9      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d8:	2300      	movs	r3, #0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	2302      	movs	r3, #2
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e4:	2232      	movs	r2, #50	; 0x32
 80037e6:	210a      	movs	r1, #10
 80037e8:	4862      	ldr	r0, [pc, #392]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80037ea:	f00a fcd9 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ee:	2300      	movs	r3, #0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2302      	movs	r3, #2
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fa:	2246      	movs	r2, #70	; 0x46
 80037fc:	210a      	movs	r1, #10
 80037fe:	485e      	ldr	r0, [pc, #376]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 8003800:	f00a fcce 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2302      	movs	r3, #2
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003810:	225a      	movs	r2, #90	; 0x5a
 8003812:	210a      	movs	r1, #10
 8003814:	4859      	ldr	r0, [pc, #356]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 8003816:	f00a fcc3 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800381a:	2300      	movs	r3, #0
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2302      	movs	r3, #2
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003826:	226e      	movs	r2, #110	; 0x6e
 8003828:	210a      	movs	r1, #10
 800382a:	4855      	ldr	r0, [pc, #340]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 800382c:	f00a fcb8 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2302      	movs	r3, #2
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800383c:	2282      	movs	r2, #130	; 0x82
 800383e:	210a      	movs	r1, #10
 8003840:	4850      	ldr	r0, [pc, #320]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003842:	f00a fcad 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003846:	2300      	movs	r3, #0
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003852:	2296      	movs	r2, #150	; 0x96
 8003854:	210a      	movs	r1, #10
 8003856:	484c      	ldr	r0, [pc, #304]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 8003858:	f00a fca2 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800385c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	22aa      	movs	r2, #170	; 0xaa
 800386a:	210a      	movs	r1, #10
 800386c:	4847      	ldr	r0, [pc, #284]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 800386e:	f00a fc97 	bl	800e1a0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003872:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2302      	movs	r3, #2
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	22d2      	movs	r2, #210	; 0xd2
 8003880:	2105      	movs	r1, #5
 8003882:	4843      	ldr	r0, [pc, #268]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003884:	f00a fc8c 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003888:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	22d2      	movs	r2, #210	; 0xd2
 8003896:	2161      	movs	r1, #97	; 0x61
 8003898:	483d      	ldr	r0, [pc, #244]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800389a:	f00a fc81 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800389e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	22d2      	movs	r2, #210	; 0xd2
 80038ac:	21af      	movs	r1, #175	; 0xaf
 80038ae:	483a      	ldr	r0, [pc, #232]	; (8003998 <FuncMenu_DrawOutputMenu+0x880>)
 80038b0:	f00a fc76 	bl	800e1a0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	22d2      	movs	r2, #210	; 0xd2
 80038c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c6:	4832      	ldr	r0, [pc, #200]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80038c8:	f00a fc6a 	bl	800e1a0 <ILI9341_Draw_Text>

				if(SM_IsFuncPwmDutyMode())
 80038cc:	f002 fbb8 	bl	8006040 <SM_IsFuncPwmDutyMode>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <FuncMenu_DrawOutputMenu+0x7d6>
					ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	2196      	movs	r1, #150	; 0x96
 80038e6:	482d      	ldr	r0, [pc, #180]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 80038e8:	f00a fc5a 	bl	800e1a0 <ILI9341_Draw_Text>
 80038ec:	e00a      	b.n	8003904 <FuncMenu_DrawOutputMenu+0x7ec>
				else
					ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ee:	2300      	movs	r3, #0
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2302      	movs	r3, #2
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038fa:	2232      	movs	r2, #50	; 0x32
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	4827      	ldr	r0, [pc, #156]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 8003900:	f00a fc4e 	bl	800e1a0 <ILI9341_Draw_Text>

				char duty[10] = "";
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	809a      	strh	r2, [r3, #4]
				snprintf(duty, sizeof(duty), "%0.2f%%", ((float)TIM3->CCR1 / (float)TIM3->ARR) * 100);
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039a4 <FuncMenu_DrawOutputMenu+0x88c>
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	ee17 0a90 	vmov	r0, s15
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
 8003942:	f107 0008 	add.w	r0, r7, #8
 8003946:	e9cd 3400 	strd	r3, r4, [sp]
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <FuncMenu_DrawOutputMenu+0x890>)
 800394c:	210a      	movs	r1, #10
 800394e:	f00b ffcb 	bl	800f8e8 <sniprintf>
				ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003952:	f107 0008 	add.w	r0, r7, #8
 8003956:	2300      	movs	r3, #0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2302      	movs	r3, #2
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003962:	2232      	movs	r2, #50	; 0x32
 8003964:	21dc      	movs	r1, #220	; 0xdc
 8003966:	f00a fc1b 	bl	800e1a0 <ILI9341_Draw_Text>
				break;
 800396a:	bf00      	nop
		}

	}


}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	080131c0 	.word	0x080131c0
 8003978:	080131c8 	.word	0x080131c8
 800397c:	080131d4 	.word	0x080131d4
 8003980:	080131dc 	.word	0x080131dc
 8003984:	080131e8 	.word	0x080131e8
 8003988:	080131f4 	.word	0x080131f4
 800398c:	080131fc 	.word	0x080131fc
 8003990:	08013198 	.word	0x08013198
 8003994:	08013204 	.word	0x08013204
 8003998:	08013214 	.word	0x08013214
 800399c:	0801321c 	.word	0x0801321c
 80039a0:	40000400 	.word	0x40000400
 80039a4:	42c80000 	.word	0x42c80000
 80039a8:	08013224 	.word	0x08013224

080039ac <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d007      	beq.n	80039cc <GainMenu_DrawMenu+0x20>
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d008      	beq.n	80039d2 <GainMenu_DrawMenu+0x26>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d000      	beq.n	80039c6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039c4:	e008      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039c6:	f000 f80b 	bl	80039e0 <GainMenu_DrawMainMenu>
			break;
 80039ca:	e005      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039cc:	f000 f850 	bl	8003a70 <GainMenu_DrawSignalMenu>
			break;
 80039d0:	e002      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039d2:	f000 f863 	bl	8003a9c <GainMenu_DrawAuxMenu>
			break;
 80039d6:	bf00      	nop

	}
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	2302      	movs	r3, #2
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	220a      	movs	r2, #10
 80039f4:	210a      	movs	r1, #10
 80039f6:	481a      	ldr	r0, [pc, #104]	; (8003a60 <GainMenu_DrawMainMenu+0x80>)
 80039f8:	f00a fbd2 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80039fc:	f7fd faba 	bl	8000f74 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a00:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2302      	movs	r3, #2
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	22d2      	movs	r2, #210	; 0xd2
 8003a0e:	2105      	movs	r1, #5
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <GainMenu_DrawMainMenu+0x84>)
 8003a12:	f00a fbc5 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Aux",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a16:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	22d2      	movs	r2, #210	; 0xd2
 8003a24:	2161      	movs	r1, #97	; 0x61
 8003a26:	4810      	ldr	r0, [pc, #64]	; (8003a68 <GainMenu_DrawMainMenu+0x88>)
 8003a28:	f00a fbba 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2302      	movs	r3, #2
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	22d2      	movs	r2, #210	; 0xd2
 8003a3a:	21af      	movs	r1, #175	; 0xaf
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a3e:	f00a fbaf 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a42:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2302      	movs	r3, #2
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	22d2      	movs	r2, #210	; 0xd2
 8003a50:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a56:	f00a fba3 	bl	800e1a0 <ILI9341_Draw_Text>
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0801322c 	.word	0x0801322c
 8003a64:	08013238 	.word	0x08013238
 8003a68:	08013240 	.word	0x08013240
 8003a6c:	08013244 	.word	0x08013244

08003a70 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	220a      	movs	r2, #10
 8003a84:	210a      	movs	r1, #10
 8003a86:	4804      	ldr	r0, [pc, #16]	; (8003a98 <GainMenu_DrawSignalMenu+0x28>)
 8003a88:	f00a fb8a 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a8c:	f7fd fa72 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0801324c 	.word	0x0801324c

08003a9c <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	220a      	movs	r2, #10
 8003ab0:	210a      	movs	r1, #10
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <GainMenu_DrawAuxMenu+0x28>)
 8003ab4:	f00a fb74 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ab8:	f7fd fa5c 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0801325c 	.word	0x0801325c

08003ac8 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d007      	beq.n	8003ae8 <ToplevelMenu_DrawMenu+0x20>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d008      	beq.n	8003aee <ToplevelMenu_DrawMenu+0x26>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d000      	beq.n	8003ae2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003ae0:	e008      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003ae2:	f000 f80b 	bl	8003afc <ToplevelMenu_DrawMainMenu>
			break;
 8003ae6:	e005      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003ae8:	f000 f848 	bl	8003b7c <ToplevelMenu_DrawOutputMenu>
			break;
 8003aec:	e002      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003aee:	f000 f88f 	bl	8003c10 <ToplevelMenu_DrawInputMenu>
			break;
 8003af2:	bf00      	nop

	}
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <ToplevelMenu_DrawMainMenu+0x70>)
 8003b04:	f00b fee8 	bl	800f8d8 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b08:	f7fd fa34 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b0c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2302      	movs	r3, #2
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	22d2      	movs	r2, #210	; 0xd2
 8003b1a:	2106      	movs	r1, #6
 8003b1c:	4814      	ldr	r0, [pc, #80]	; (8003b70 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b1e:	f00a fb3f 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b22:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	22d2      	movs	r2, #210	; 0xd2
 8003b30:	215d      	movs	r1, #93	; 0x5d
 8003b32:	4810      	ldr	r0, [pc, #64]	; (8003b74 <ToplevelMenu_DrawMainMenu+0x78>)
 8003b34:	f00a fb34 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	22d2      	movs	r2, #210	; 0xd2
 8003b46:	21af      	movs	r1, #175	; 0xaf
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b4a:	f00a fb29 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b4e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	22d2      	movs	r2, #210	; 0xd2
 8003b5c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b62:	f00a fb1d 	bl	800e1a0 <ILI9341_Draw_Text>


}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0801326c 	.word	0x0801326c
 8003b70:	08013280 	.word	0x08013280
 8003b74:	08013288 	.word	0x08013288
 8003b78:	08013290 	.word	0x08013290

08003b7c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2302      	movs	r3, #2
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	220a      	movs	r2, #10
 8003b90:	210a      	movs	r1, #10
 8003b92:	481a      	ldr	r0, [pc, #104]	; (8003bfc <ToplevelMenu_DrawOutputMenu+0x80>)
 8003b94:	f00a fb04 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b98:	f7fd f9ec 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b9c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	22d2      	movs	r2, #210	; 0xd2
 8003baa:	210d      	movs	r1, #13
 8003bac:	4814      	ldr	r0, [pc, #80]	; (8003c00 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bae:	f00a faf7 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003bb2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	22d2      	movs	r2, #210	; 0xd2
 8003bc0:	2163      	movs	r1, #99	; 0x63
 8003bc2:	4810      	ldr	r0, [pc, #64]	; (8003c04 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bc4:	f00a faec 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2302      	movs	r3, #2
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	22d2      	movs	r2, #210	; 0xd2
 8003bd6:	21b0      	movs	r1, #176	; 0xb0
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003bda:	f00a fae1 	bl	800e1a0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003bde:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2302      	movs	r3, #2
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	22d2      	movs	r2, #210	; 0xd2
 8003bec:	21f5      	movs	r1, #245	; 0xf5
 8003bee:	4807      	ldr	r0, [pc, #28]	; (8003c0c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003bf0:	f00a fad6 	bl	800e1a0 <ILI9341_Draw_Text>
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08013298 	.word	0x08013298
 8003c00:	080132a0 	.word	0x080132a0
 8003c04:	080132a8 	.word	0x080132a8
 8003c08:	080132b0 	.word	0x080132b0
 8003c0c:	080132b8 	.word	0x080132b8

08003c10 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	220a      	movs	r2, #10
 8003c24:	210a      	movs	r1, #10
 8003c26:	4804      	ldr	r0, [pc, #16]	; (8003c38 <ToplevelMenu_DrawInputMenu+0x28>)
 8003c28:	f00a faba 	bl	800e1a0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c2c:	f7fd f9a2 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	080132c0 	.word	0x080132c0

08003c3c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <BiasMenu_getStatus+0x14>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20001e55 	.word	0x20001e55

08003c54 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <BiasMenuEntryHandler+0x34>)
 8003c5a:	f00b fe3d 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8003c5e:	f7fd fc49 	bl	80014f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <BiasMenuEntryHandler+0x38>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c6a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003c70:	f001 fa5c 	bl	800512c <BO_GetDcBiasEncoderValue>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <BiasMenuEntryHandler+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003c82:	230e      	movs	r3, #14
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080132c8 	.word	0x080132c8
 8003c8c:	20001e55 	.word	0x20001e55
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	20001e57 	.word	0x20001e57

08003c98 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <BiasMenuInputHandler+0x24>)
 8003c9e:	f00b fe1b 	bl	800f8d8 <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f002 f946 	bl	8005f34 <SM_GetEncoderValue>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fa4a 	bl	8005144 <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <BiasMenuInputHandler+0x28>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003cb6:	230e      	movs	r3, #14
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	080132ec 	.word	0x080132ec
 8003cc0:	20001e57 	.word	0x20001e57

08003cc4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003cc8:	4808      	ldr	r0, [pc, #32]	; (8003cec <BiasMenuExitHandler+0x28>)
 8003cca:	f00b fe05 	bl	800f8d8 <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <BiasMenuExitHandler+0x2c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003cd4:	f7fd fc0e 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <BiasMenuExitHandler+0x30>)
 8003cda:	f00b fdfd 	bl	800f8d8 <puts>
	#endif

	eNewEvent = evIdle;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <BiasMenuExitHandler+0x34>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	08013310 	.word	0x08013310
 8003cf0:	20001e55 	.word	0x20001e55
 8003cf4:	08013334 	.word	0x08013334
 8003cf8:	20001e57 	.word	0x20001e57

08003cfc <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003d00:	4bbb      	ldr	r3, [pc, #748]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b0e      	cmp	r3, #14
 8003d06:	f200 821c 	bhi.w	8004142 <EM_ProcessEvent+0x446>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <EM_ProcessEvent+0x14>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d7f 	.word	0x08003d7f
 8003d18:	08003e05 	.word	0x08003e05
 8003d1c:	08003e23 	.word	0x08003e23
 8003d20:	08003e69 	.word	0x08003e69
 8003d24:	08003e9b 	.word	0x08003e9b
 8003d28:	08003ee1 	.word	0x08003ee1
 8003d2c:	08003f2d 	.word	0x08003f2d
 8003d30:	08003f5f 	.word	0x08003f5f
 8003d34:	08004143 	.word	0x08004143
 8003d38:	08003f91 	.word	0x08003f91
 8003d3c:	08004021 	.word	0x08004021
 8003d40:	08004053 	.word	0x08004053
 8003d44:	08004083 	.word	0x08004083
 8003d48:	0800410d 	.word	0x0800410d
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003d4c:	48a9      	ldr	r0, [pc, #676]	; (8003ff4 <EM_ProcessEvent+0x2f8>)
 8003d4e:	f00b fdc3 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003d52:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003d5a:	f001 f827 	bl	8004dac <ToplevelOutputMenuEntryHandler>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d66:	4ba4      	ldr	r3, [pc, #656]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f040 81eb 	bne.w	8004146 <EM_ProcessEvent+0x44a>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003d70:	f001 f848 	bl	8004e04 <ToplevelInputMenuEntryHandler>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d7a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003d7c:	e1e3      	b.n	8004146 <EM_ProcessEvent+0x44a>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003d7e:	489f      	ldr	r0, [pc, #636]	; (8003ffc <EM_ProcessEvent+0x300>)
 8003d80:	f00b fdaa 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003d84:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d105      	bne.n	8003d98 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003d8c:	f001 f824 	bl	8004dd8 <ToplevelOutputMenuExitHandler>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b96      	ldr	r3, [pc, #600]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003d98:	4b97      	ldr	r3, [pc, #604]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f000 fff3 	bl	8004d8c <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003da6:	f000 fd89 	bl	80048bc <FuncMainMenuEntryHandler>
 8003daa:	4603      	mov	r3, r0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003db0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003db2:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d108      	bne.n	8003dcc <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 ffe6 	bl	8004d8c <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003dc0:	f000 fb62 	bl	8004488 <FreqMainMenuEntryHandler>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003dca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003dcc:	4b8a      	ldr	r3, [pc, #552]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d108      	bne.n	8003de6 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f000 ffd9 	bl	8004d8c <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003dda:	f000 feb9 	bl	8004b50 <GainMainMenuEntryHandler>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003de4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003de6:	4b84      	ldr	r3, [pc, #528]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	f040 81ad 	bne.w	800414a <EM_ProcessEvent+0x44e>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 ffcb 	bl	8004d8c <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003df6:	f7ff ff2d 	bl	8003c54 <BiasMenuEntryHandler>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e02:	e1a2      	b.n	800414a <EM_ProcessEvent+0x44e>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003e04:	487e      	ldr	r0, [pc, #504]	; (8004000 <EM_ProcessEvent+0x304>)
 8003e06:	f00b fd67 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	f040 819d 	bne.w	800414e <EM_ProcessEvent+0x452>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003e14:	f001 f80c 	bl	8004e30 <ToplevelInputMenuExitHandler>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e1e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e20:	e195      	b.n	800414e <EM_ProcessEvent+0x452>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003e22:	4878      	ldr	r0, [pc, #480]	; (8004004 <EM_ProcessEvent+0x308>)
 8003e24:	f00b fd58 	bl	800f8d8 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003e28:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d105      	bne.n	8003e3c <EM_ProcessEvent+0x140>
			{
				eNextState = FuncMainMenuExitHandler();
 8003e30:	f000 fd5a 	bl	80048e8 <FuncMainMenuExitHandler>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e3a:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <EM_ProcessEvent+0x154>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003e44:	f000 fd6e 	bl	8004924 <FuncSignalMenuEntryHandler>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e4e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f040 817c 	bne.w	8004152 <EM_ProcessEvent+0x456>
			{
				eNextState = FuncAuxMenuEntryHandler();
 8003e5a:	f000 fdc9 	bl	80049f0 <FuncAuxMenuEntryHandler>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e64:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e66:	e174      	b.n	8004152 <EM_ProcessEvent+0x456>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003e68:	4867      	ldr	r0, [pc, #412]	; (8004008 <EM_ProcessEvent+0x30c>)
 8003e6a:	f00b fd35 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d105      	bne.n	8003e82 <EM_ProcessEvent+0x186>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003e76:	f000 fd8d 	bl	8004994 <FuncSignalMenuInputHandler>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	f040 8165 	bne.w	8004156 <EM_ProcessEvent+0x45a>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003e8c:	f000 fd98 	bl	80049c0 <FuncSignalMenuExitHandler>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e96:	701a      	strb	r2, [r3, #0]
			}


			break;
 8003e98:	e15d      	b.n	8004156 <EM_ProcessEvent+0x45a>

		case Func_Aux_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Aux_Menu_State\n");
 8003e9a:	485c      	ldr	r0, [pc, #368]	; (800400c <EM_ProcessEvent+0x310>)
 8003e9c:	f00b fd1c 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ea0:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d105      	bne.n	8003eb4 <EM_ProcessEvent+0x1b8>
			{
				eNextState = FuncAuxMenuInputHandler();
 8003ea8:	f000 fdda 	bl	8004a60 <FuncAuxMenuInputHandler>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003eb2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d105      	bne.n	8003ec8 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuExitHandler();
 8003ebc:	f000 fe24 	bl	8004b08 <FuncAuxMenuExitHandler>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ec6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	f040 8144 	bne.w	800415a <EM_ProcessEvent+0x45e>
			{
				eNextState = FuncAuxToggleDutyMode();
 8003ed2:	f000 fe07 	bl	8004ae4 <FuncAuxToggleDutyMode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003edc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ede:	e13c      	b.n	800415a <EM_ProcessEvent+0x45e>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003ee0:	484b      	ldr	r0, [pc, #300]	; (8004010 <EM_ProcessEvent+0x314>)
 8003ee2:	f00b fcf9 	bl	800f8d8 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d108      	bne.n	8003f00 <EM_ProcessEvent+0x204>
			{
				eNextState = GainMainMenuExitHandler();
 8003eee:	f000 fe45 	bl	8004b7c <GainMainMenuExitHandler>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ef8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003efa:	2002      	movs	r0, #2
 8003efc:	f000 ff46 	bl	8004d8c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <EM_ProcessEvent+0x218>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003f08:	f000 fe54 	bl	8004bb4 <GainSignalMenuEntryHandler>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f12:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f040 8120 	bne.w	800415e <EM_ProcessEvent+0x462>
			{
				eNextState = GainAuxMenuEntryHandler();
 8003f1e:	f000 fec7 	bl	8004cb0 <GainAuxMenuEntryHandler>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f28:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f2a:	e118      	b.n	800415e <EM_ProcessEvent+0x462>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003f2c:	4839      	ldr	r0, [pc, #228]	; (8004014 <EM_ProcessEvent+0x318>)
 8003f2e:	f00b fcd3 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d105      	bne.n	8003f46 <EM_ProcessEvent+0x24a>
			{
				eNextState = GainSignalMenuInputHandler();
 8003f3a:	f000 fe73 	bl	8004c24 <GainSignalMenuInputHandler>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	f040 8109 	bne.w	8004162 <EM_ProcessEvent+0x466>
			{
				eNextState = GainSignalMenuExitHandler();
 8003f50:	f000 fe98 	bl	8004c84 <GainSignalMenuExitHandler>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f5a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f5c:	e101      	b.n	8004162 <EM_ProcessEvent+0x466>

		case Gain_Aux_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Aux_Menu_State\n");
 8003f5e:	482e      	ldr	r0, [pc, #184]	; (8004018 <EM_ProcessEvent+0x31c>)
 8003f60:	f00b fcba 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d105      	bne.n	8003f78 <EM_ProcessEvent+0x27c>
			{
				eNextState = GainAuxMenuInputHandler();
 8003f6c:	f000 fed6 	bl	8004d1c <GainAuxMenuInputHandler>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	f040 80f2 	bne.w	8004166 <EM_ProcessEvent+0x46a>
			{
				eNextState = GainAuxMenuExitHandler();
 8003f82:	f000 fee1 	bl	8004d48 <GainAuxMenuExitHandler>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f8c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f8e:	e0ea      	b.n	8004166 <EM_ProcessEvent+0x46a>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003f90:	4822      	ldr	r0, [pc, #136]	; (800401c <EM_ProcessEvent+0x320>)
 8003f92:	f00b fca1 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d108      	bne.n	8003fb0 <EM_ProcessEvent+0x2b4>
			{
				eNextState = FreqMainMenuExitHandler();
 8003f9e:	f000 fa89 	bl	80044b4 <FreqMainMenuExitHandler>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fa8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003faa:	2002      	movs	r0, #2
 8003fac:	f000 feee 	bl	8004d8c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <EM_ProcessEvent+0x2c8>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003fb8:	f000 fa9e 	bl	80044f8 <FreqPresetMenuEntryHandler>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d105      	bne.n	8003fd8 <EM_ProcessEvent+0x2dc>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003fcc:	f000 faf2 	bl	80045b4 <FreqAdjustMenuEntryHandler>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	f040 80c4 	bne.w	800416a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003fe2:	f000 f8e9 	bl	80041b8 <FreqSweepMenuEntryHandler>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fec:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003fee:	e0bc      	b.n	800416a <EM_ProcessEvent+0x46e>
 8003ff0:	20001e56 	.word	0x20001e56
 8003ff4:	0801334c 	.word	0x0801334c
 8003ff8:	20001e57 	.word	0x20001e57
 8003ffc:	08013358 	.word	0x08013358
 8004000:	08013374 	.word	0x08013374
 8004004:	08013390 	.word	0x08013390
 8004008:	080133a8 	.word	0x080133a8
 800400c:	080133c0 	.word	0x080133c0
 8004010:	080133d4 	.word	0x080133d4
 8004014:	080133ec 	.word	0x080133ec
 8004018:	08013404 	.word	0x08013404
 800401c:	08013418 	.word	0x08013418

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8004020:	4857      	ldr	r0, [pc, #348]	; (8004180 <EM_ProcessEvent+0x484>)
 8004022:	f00b fc59 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004026:	4b57      	ldr	r3, [pc, #348]	; (8004184 <EM_ProcessEvent+0x488>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d105      	bne.n	800403a <EM_ProcessEvent+0x33e>
			{
				eNextState = FreqPresetMenuInputHandler();
 800402e:	f000 fa95 	bl	800455c <FreqPresetMenuInputHandler>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b54      	ldr	r3, [pc, #336]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004038:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800403a:	4b52      	ldr	r3, [pc, #328]	; (8004184 <EM_ProcessEvent+0x488>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	f040 8095 	bne.w	800416e <EM_ProcessEvent+0x472>
			{
				eNextState = FreqPresetMenuExitHandler();
 8004044:	f000 faa0 	bl	8004588 <FreqPresetMenuExitHandler>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <EM_ProcessEvent+0x48c>)
 800404e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004050:	e08d      	b.n	800416e <EM_ProcessEvent+0x472>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8004052:	484e      	ldr	r0, [pc, #312]	; (800418c <EM_ProcessEvent+0x490>)
 8004054:	f00b fc40 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <EM_ProcessEvent+0x488>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d105      	bne.n	800406c <EM_ProcessEvent+0x370>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8004060:	f000 faca 	bl	80045f8 <FreqAdjustMenuInputHandler>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <EM_ProcessEvent+0x48c>)
 800406a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <EM_ProcessEvent+0x488>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d17e      	bne.n	8004172 <EM_ProcessEvent+0x476>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8004074:	f000 fad2 	bl	800461c <FreqAdjustMenuExitHandler>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <EM_ProcessEvent+0x48c>)
 800407e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004080:	e077      	b.n	8004172 <EM_ProcessEvent+0x476>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8004082:	4843      	ldr	r0, [pc, #268]	; (8004190 <EM_ProcessEvent+0x494>)
 8004084:	f00b fc28 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <EM_ProcessEvent+0x488>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <EM_ProcessEvent+0x3a2>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004090:	2007      	movs	r0, #7
 8004092:	f000 f8ed 	bl	8004270 <FreqSweepMenuInputHandler>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <EM_ProcessEvent+0x48c>)
 800409c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <EM_ProcessEvent+0x488>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d106      	bne.n	80040b4 <EM_ProcessEvent+0x3b8>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80040a6:	2008      	movs	r0, #8
 80040a8:	f000 f8e2 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040b2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <EM_ProcessEvent+0x488>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d106      	bne.n	80040ca <EM_ProcessEvent+0x3ce>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040bc:	2009      	movs	r0, #9
 80040be:	f000 f8d7 	bl	8004270 <FreqSweepMenuInputHandler>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b30      	ldr	r3, [pc, #192]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040c8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <EM_ProcessEvent+0x488>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d106      	bne.n	80040e0 <EM_ProcessEvent+0x3e4>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80040d2:	200a      	movs	r0, #10
 80040d4:	f000 f8cc 	bl	8004270 <FreqSweepMenuInputHandler>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040de:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <EM_ProcessEvent+0x488>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d106      	bne.n	80040f6 <EM_ProcessEvent+0x3fa>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80040e8:	200b      	movs	r0, #11
 80040ea:	f000 f8c1 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <EM_ProcessEvent+0x488>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d13b      	bne.n	8004176 <EM_ProcessEvent+0x47a>
			{
				eNextState = FreqSweepMenuExitHandler();
 80040fe:	f000 f99f 	bl	8004440 <FreqSweepMenuExitHandler>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004108:	701a      	strb	r2, [r3, #0]
			}

			break;
 800410a:	e034      	b.n	8004176 <EM_ProcessEvent+0x47a>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 800410c:	4821      	ldr	r0, [pc, #132]	; (8004194 <EM_ProcessEvent+0x498>)
 800410e:	f00b fbe3 	bl	800f8d8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <EM_ProcessEvent+0x488>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d105      	bne.n	8004126 <EM_ProcessEvent+0x42a>
			{
				eNextState = BiasMenuInputHandler();
 800411a:	f7ff fdbd 	bl	8003c98 <BiasMenuInputHandler>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004124:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <EM_ProcessEvent+0x488>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d125      	bne.n	800417a <EM_ProcessEvent+0x47e>
			{
				eNextState = BiasMenuExitHandler();
 800412e:	f7ff fdc9 	bl	8003cc4 <BiasMenuExitHandler>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004138:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800413a:	2002      	movs	r0, #2
 800413c:	f000 fe26 	bl	8004d8c <ToplevelMenu_setStatus>
			}

			break;
 8004140:	e01b      	b.n	800417a <EM_ProcessEvent+0x47e>

		default:
			break;
 8004142:	bf00      	nop
 8004144:	e01a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004146:	bf00      	nop
 8004148:	e018      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414a:	bf00      	nop
 800414c:	e016      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414e:	bf00      	nop
 8004150:	e014      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004152:	bf00      	nop
 8004154:	e012      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004156:	bf00      	nop
 8004158:	e010      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415a:	bf00      	nop
 800415c:	e00e      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415e:	bf00      	nop
 8004160:	e00c      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800417a:	bf00      	nop
	}

}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	08013430 	.word	0x08013430
 8004184:	20001e57 	.word	0x20001e57
 8004188:	20001e56 	.word	0x20001e56
 800418c:	08013448 	.word	0x08013448
 8004190:	08013460 	.word	0x08013460
 8004194:	08013478 	.word	0x08013478

08004198 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <EM_SetNewEvent+0x1c>)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	7013      	strb	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20001e57 	.word	0x20001e57

080041b8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80041bc:	4825      	ldr	r0, [pc, #148]	; (8004254 <FreqSweepMenuEntryHandler+0x9c>)
 80041be:	f00b fb8b 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 80041c2:	f7fd f997 	bl	80014f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d008      	beq.n	80041f4 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80041fe:	eef4 7a47 	vcmp.f32	s15, s14
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	d101      	bne.n	800420c <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8004208:	f000 fa1e 	bl	8004648 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 800420c:	2000      	movs	r0, #0
 800420e:	f000 fa75 	bl	80046fc <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004212:	2000      	movs	r0, #0
 8004214:	f000 fad0 	bl	80047b8 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8004218:	f000 fb0a 	bl	8004830 <_getCalculatedSweepFrequencyInHertz>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <FreqSweepMenuEntryHandler+0xa8>)
 8004222:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004228:	2200      	movs	r2, #0
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800422c:	2009      	movs	r0, #9
 800422e:	f000 f81f 	bl	8004270 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004234:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 800423c:	2200      	movs	r2, #0
 800423e:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <FreqSweepMenuEntryHandler+0xb0>)
 8004242:	2204      	movs	r2, #4
 8004244:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <FreqSweepMenuEntryHandler+0xb4>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800424c:	230d      	movs	r3, #13
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	08013488 	.word	0x08013488
 8004258:	40013400 	.word	0x40013400
 800425c:	20000004 	.word	0x20000004
 8004260:	20001eac 	.word	0x20001eac
 8004264:	40000c00 	.word	0x40000c00
 8004268:	20001e5a 	.word	0x20001e5a
 800426c:	20001e57 	.word	0x20001e57

08004270 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 800427a:	4865      	ldr	r0, [pc, #404]	; (8004410 <FreqSweepMenuInputHandler+0x1a0>)
 800427c:	f00b fb2c 	bl	800f8d8 <puts>
	#endif



	switch(pEvent)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3b07      	subs	r3, #7
 8004284:	2b04      	cmp	r3, #4
 8004286:	f200 80ba 	bhi.w	80043fe <FreqSweepMenuInputHandler+0x18e>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <FreqSweepMenuInputHandler+0x20>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a5 	.word	0x080042a5
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080043ef 	.word	0x080043ef
 800429c:	080043f7 	.word	0x080043f7
 80042a0:	08004305 	.word	0x08004305
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 80042a4:	485b      	ldr	r0, [pc, #364]	; (8004414 <FreqSweepMenuInputHandler+0x1a4>)
 80042a6:	f00b fb17 	bl	800f8d8 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b0:	f083 0301 	eor.w	r3, r3, #1
 80042b4:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
			break;
 80042c2:	e09d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 80042c4:	4855      	ldr	r0, [pc, #340]	; (800441c <FreqSweepMenuInputHandler+0x1ac>)
 80042c6:	f00b fb07 	bl	800f8d8 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f083 0301 	eor.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042d6:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d004      	beq.n	80042ea <FreqSweepMenuInputHandler+0x7a>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <FreqSweepMenuInputHandler+0x86>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <FreqSweepMenuInputHandler+0x80>
 80042e8:	e006      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 80042ea:	f000 f9ad 	bl	8004648 <_setSweepModeDown>
					break;
 80042ee:	e003      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 80042f0:	f000 f9da 	bl	80046a8 <_setSweepModeUp>
					break;
 80042f4:	e000      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80042f6:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f9fd 	bl	80046fc <_setEncoderControlMode>

			break;
 8004302:	e07d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004304:	4848      	ldr	r0, [pc, #288]	; (8004428 <FreqSweepMenuInputHandler+0x1b8>)
 8004306:	f00b fae7 	bl	800f8d8 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <FreqSweepMenuInputHandler+0xa8>
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00b      	beq.n	800432e <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004316:	e073      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004318:	2000      	movs	r0, #0
 800431a:	f000 fa4d 	bl	80047b8 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800431e:	f000 fa87 	bl	8004830 <_getCalculatedSweepFrequencyInHertz>
 8004322:	eef0 7a40 	vmov.f32	s15, s0
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <FreqSweepMenuInputHandler+0x1bc>)
 8004328:	edc3 7a00 	vstr	s15, [r3]
					break;
 800432c:	e05e      	b.n	80043ec <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <FreqSweepMenuInputHandler+0xcc>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d02a      	beq.n	8004390 <FreqSweepMenuInputHandler+0x120>
							break;
 800433a:	e056      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 800433c:	4b3c      	ldr	r3, [pc, #240]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d803      	bhi.n	800434c <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004346:	220d      	movs	r2, #13
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800434a:	e04e      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	dd09      	ble.n	800437c <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004374:	ee17 2a90 	vmov	r2, s15
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800437a:	e036      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 800438a:	edc3 7a00 	vstr	s15, [r3]
							break;
 800438e:	e02c      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004398:	4293      	cmp	r3, r2
 800439a:	d904      	bls.n	80043a6 <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800439e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043a4:	e020      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d509      	bpl.n	80043d6 <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ce:	ee17 2a90 	vmov	r2, s15
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043d4:	e008      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 80043e4:	edc3 7a00 	vstr	s15, [r3]
							break;
 80043e8:	bf00      	nop
					break;
 80043ea:	bf00      	nop
			break;
 80043ec:	e008      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f000 f984 	bl	80046fc <_setEncoderControlMode>

			break;
 80043f4:	e004      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f000 f980 	bl	80046fc <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80043fc:	e000      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 80043fe:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <FreqSweepMenuInputHandler+0x1cc>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004406:	230d      	movs	r3, #13
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	080134ac 	.word	0x080134ac
 8004414:	080134d8 	.word	0x080134d8
 8004418:	40000c00 	.word	0x40000c00
 800441c:	080134f0 	.word	0x080134f0
 8004420:	20001e58 	.word	0x20001e58
 8004424:	20001e59 	.word	0x20001e59
 8004428:	08013508 	.word	0x08013508
 800442c:	20001eac 	.word	0x20001eac
 8004430:	40012c00 	.word	0x40012c00
 8004434:	20000004 	.word	0x20000004
 8004438:	20000000 	.word	0x20000000
 800443c:	20001e57 	.word	0x20001e57

08004440 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <FreqSweepMenuExitHandler+0x38>)
 8004446:	f00b fa47 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 800444a:	f7fd f853 	bl	80014f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <FreqSweepMenuExitHandler+0x40>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <FreqSweepMenuExitHandler+0x44>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004472:	230a      	movs	r3, #10
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08013520 	.word	0x08013520
 800447c:	40000c00 	.word	0x40000c00
 8004480:	20001e5a 	.word	0x20001e5a
 8004484:	20001e57 	.word	0x20001e57

08004488 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 800448c:	4806      	ldr	r0, [pc, #24]	; (80044a8 <FreqMainMenuEntryHandler+0x20>)
 800448e:	f00b fa23 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004492:	f7fd f82f 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <FreqMainMenuEntryHandler+0x24>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <FreqMainMenuEntryHandler+0x28>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044a2:	230a      	movs	r3, #10
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08013548 	.word	0x08013548
 80044ac:	20001e5a 	.word	0x20001e5a
 80044b0:	20001e57 	.word	0x20001e57

080044b4 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <FreqMainMenuExitHandler+0x30>)
 80044ba:	f00b fa0d 	bl	800f8d8 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <FreqMainMenuExitHandler+0x34>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <FreqMainMenuExitHandler+0x38>)
 80044c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80044cc:	f7fd f812 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <FreqMainMenuExitHandler+0x3c>)
 80044d2:	f00b fa01 	bl	800f8d8 <puts>
	#endif

	eNewEvent = evIdle;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <FreqMainMenuExitHandler+0x40>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80044dc:	2301      	movs	r3, #1
}
 80044de:	4618      	mov	r0, r3
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08013598 	.word	0x08013598
 80044e8:	20001e5a 	.word	0x20001e5a
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	080135c0 	.word	0x080135c0
 80044f4:	20001e57 	.word	0x20001e57

080044f8 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 80044fe:	4812      	ldr	r0, [pc, #72]	; (8004548 <FreqPresetMenuEntryHandler+0x50>)
 8004500:	f00b f9ea 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004504:	f7fc fff6 	bl	80014f4 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004508:	f000 ffec 	bl	80054e4 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <FreqPresetMenuEntryHandler+0x54>)
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004512:	f000 ff99 	bl	8005448 <FreqO_GetFPresetObject>
 8004516:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <FreqPresetMenuEntryHandler+0x38>
	{
		//ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
		//ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
		ENCODER_TIMER->CNT = 32768;
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <FreqPresetMenuEntryHandler+0x58>)
 8004520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <FreqPresetMenuEntryHandler+0x58>)
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
 800452e:	e002      	b.n	8004536 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004530:	4808      	ldr	r0, [pc, #32]	; (8004554 <FreqPresetMenuEntryHandler+0x5c>)
 8004532:	f7fd f825 	bl	8001580 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <FreqPresetMenuEntryHandler+0x60>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800453c:	230b      	movs	r3, #11
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	080135d8 	.word	0x080135d8
 800454c:	20001e5a 	.word	0x20001e5a
 8004550:	40012c00 	.word	0x40012c00
 8004554:	08013604 	.word	0x08013604
 8004558:	20001e57 	.word	0x20001e57

0800455c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8004560:	4807      	ldr	r0, [pc, #28]	; (8004580 <FreqPresetMenuInputHandler+0x24>)
 8004562:	f00b f9b9 	bl	800f8d8 <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004566:	2001      	movs	r0, #1
 8004568:	f001 fce4 	bl	8005f34 <SM_GetEncoderValue>
 800456c:	4603      	mov	r3, r0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 feea 	bl	8005348 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <FreqPresetMenuInputHandler+0x28>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800457a:	230b      	movs	r3, #11
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08013640 	.word	0x08013640
 8004584:	20001e57 	.word	0x20001e57

08004588 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 800458c:	4806      	ldr	r0, [pc, #24]	; (80045a8 <FreqPresetMenuExitHandler+0x20>)
 800458e:	f00b f9a3 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004592:	f7fc ffaf 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <FreqPresetMenuExitHandler+0x24>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <FreqPresetMenuExitHandler+0x28>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80045a2:	230a      	movs	r3, #10
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	0801366c 	.word	0x0801366c
 80045ac:	20001e5a 	.word	0x20001e5a
 80045b0:	20001e57 	.word	0x20001e57

080045b4 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 80045b8:	480a      	ldr	r0, [pc, #40]	; (80045e4 <FreqAdjustMenuEntryHandler+0x30>)
 80045ba:	f00b f98d 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 80045be:	f7fc ff99 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <FreqAdjustMenuEntryHandler+0x34>)
 80045c4:	2203      	movs	r2, #3
 80045c6:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <FreqAdjustMenuEntryHandler+0x38>)
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <FreqAdjustMenuEntryHandler+0x3c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <FreqAdjustMenuEntryHandler+0x3c>)
 80045d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <FreqAdjustMenuEntryHandler+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80045de:	230c      	movs	r3, #12
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	08013698 	.word	0x08013698
 80045e8:	20001e5a 	.word	0x20001e5a
 80045ec:	40013400 	.word	0x40013400
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	20001e57 	.word	0x20001e57

080045f8 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80045fc:	4805      	ldr	r0, [pc, #20]	; (8004614 <FreqAdjustMenuInputHandler+0x1c>)
 80045fe:	f00b f96b 	bl	800f8d8 <puts>
	#endif

	FreqO_AdjustFreq();
 8004602:	f000 fe73 	bl	80052ec <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <FreqAdjustMenuInputHandler+0x20>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800460c:	230c      	movs	r3, #12
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	080134ac 	.word	0x080134ac
 8004618:	20001e57 	.word	0x20001e57

0800461c <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004620:	4806      	ldr	r0, [pc, #24]	; (800463c <FreqAdjustMenuExitHandler+0x20>)
 8004622:	f00b f959 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004626:	f7fc ff65 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <FreqAdjustMenuExitHandler+0x24>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <FreqAdjustMenuExitHandler+0x28>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004636:	230a      	movs	r3, #10
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	080136c4 	.word	0x080136c4
 8004640:	20001e5a 	.word	0x20001e5a
 8004644:	20001e57 	.word	0x20001e57

08004648 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 800464c:	4b10      	ldr	r3, [pc, #64]	; (8004690 <_setSweepModeDown+0x48>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <_setSweepModeDown+0x48>)
 8004652:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004656:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <_setSweepModeDown+0x48>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <_setSweepModeDown+0x48>)
 800465e:	f043 0310 	orr.w	r3, r3, #16
 8004662:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <_setSweepModeDown+0x4c>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <_setSweepModeDown+0x50>)
 8004672:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <_setSweepModeDown+0x54>)
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <_setSweepModeDown+0x58>)
 800467a:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <_setSweepModeDown+0x5c>)
 800467e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004682:	625a      	str	r2, [r3, #36]	; 0x24

}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40013400 	.word	0x40013400
 8004698:	20000000 	.word	0x20000000
 800469c:	20000004 	.word	0x20000004
 80046a0:	477fff00 	.word	0x477fff00
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <_setSweepModeUp+0x40>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <_setSweepModeUp+0x40>)
 80046b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80046b6:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <_setSweepModeUp+0x40>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <_setSweepModeUp+0x40>)
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <_setSweepModeUp+0x44>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <_setSweepModeUp+0x48>)
 80046d2:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <_setSweepModeUp+0x4c>)
 80046d8:	4a07      	ldr	r2, [pc, #28]	; (80046f8 <_setSweepModeUp+0x50>)
 80046da:	601a      	str	r2, [r3, #0]


}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40013400 	.word	0x40013400
 80046f0:	20000004 	.word	0x20000004
 80046f4:	20000000 	.word	0x20000000
 80046f8:	41500000 	.word	0x41500000

080046fc <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d038      	beq.n	800477e <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <_setEncoderControlMode+0xa4>)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004714:	220d      	movs	r2, #13
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <_setEncoderControlMode+0xa8>)
 800471a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <_setEncoderControlMode+0xac>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <_setEncoderControlMode+0x32>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d014      	beq.n	8004756 <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 800472c:	e031      	b.n	8004792 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <_setEncoderControlMode+0xb0>)
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004748:	dc00      	bgt.n	800474c <_setEncoderControlMode+0x50>
				break;
 800474a:	e022      	b.n	8004792 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <_setEncoderControlMode+0xb4>)
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004754:	e01d      	b.n	8004792 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <_setEncoderControlMode+0xb8>)
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d400      	bmi.n	8004774 <_setEncoderControlMode+0x78>
				break;
 8004772:	e00e      	b.n	8004792 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <_setEncoderControlMode+0xb4>)
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800477c:	e009      	b.n	8004792 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <_setEncoderControlMode+0xa4>)
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <_setEncoderControlMode+0xa8>)
 8004786:	2201      	movs	r2, #1
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <_setEncoderControlMode+0xa8>)
 800478c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001e59 	.word	0x20001e59
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	20001e58 	.word	0x20001e58
 80047ac:	20000004 	.word	0x20000004
 80047b0:	40013400 	.word	0x40013400
 80047b4:	20000000 	.word	0x20000000

080047b8 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d122      	bne.n	800480e <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fec1 	bl	8000554 <__aeabi_ui2d>
 80047d2:	4603      	mov	r3, r0
 80047d4:	460c      	mov	r4, r1
 80047d6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004818 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 80047da:	ec44 3b10 	vmov	d0, r3, r4
 80047de:	f00d f853 	bl	8011888 <pow>
 80047e2:	ec51 0b10 	vmov	r0, r1, d0
 80047e6:	a30e      	add	r3, pc, #56	; (adr r3, 8004820 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb fd76 	bl	80002dc <__adddf3>
 80047f0:	4603      	mov	r3, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4618      	mov	r0, r3
 80047f6:	4621      	mov	r1, r4
 80047f8:	f7fc f9fe 	bl	8000bf8 <__aeabi_d2uiz>
 80047fc:	4603      	mov	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004806:	d002      	beq.n	800480e <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	bf00      	nop
 8004818:	00000000 	.word	0x00000000
 800481c:	40080000 	.word	0x40080000
 8004820:	00000000 	.word	0x00000000
 8004824:	40d06800 	.word	0x40d06800
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40000c00 	.word	0x40000c00

08004830 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <_getCalculatedSweepFrequencyInHertz+0x54>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004848:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004888 <_getCalculatedSweepFrequencyInHertz+0x58>
 800484c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004850:	e011      	b.n	8004876 <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800486e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004888 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004872:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8004876:	eeb0 0a67 	vmov.f32	s0, s15
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40000c00 	.word	0x40000c00
 8004888:	4d2037a0 	.word	0x4d2037a0

0800488c <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <FreqMenu_getStatus+0x14>)
 8004892:	781b      	ldrb	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20001e5a 	.word	0x20001e5a

080048a4 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <FuncMenu_getStatus+0x14>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20001e5b 	.word	0x20001e5b

080048bc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 80048c0:	4806      	ldr	r0, [pc, #24]	; (80048dc <FuncMainMenuEntryHandler+0x20>)
 80048c2:	f00b f809 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 80048c6:	f7fc fe15 	bl	80014f4 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <FuncMainMenuEntryHandler+0x24>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <FuncMainMenuEntryHandler+0x28>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80048d6:	2303      	movs	r3, #3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	080136f0 	.word	0x080136f0
 80048e0:	20001e5b 	.word	0x20001e5b
 80048e4:	20001e57 	.word	0x20001e57

080048e8 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 80048ec:	4809      	ldr	r0, [pc, #36]	; (8004914 <FuncMainMenuExitHandler+0x2c>)
 80048ee:	f00a fff3 	bl	800f8d8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <FuncMainMenuExitHandler+0x30>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80048f8:	2002      	movs	r0, #2
 80048fa:	f000 fa47 	bl	8004d8c <ToplevelMenu_setStatus>
//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80048fe:	f7fc fdf9 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004902:	4806      	ldr	r0, [pc, #24]	; (800491c <FuncMainMenuExitHandler+0x34>)
 8004904:	f00a ffe8 	bl	800f8d8 <puts>
	#endif

	eNewEvent = evIdle;
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <FuncMainMenuExitHandler+0x38>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800490e:	2301      	movs	r3, #1
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	08013740 	.word	0x08013740
 8004918:	20001e5b 	.word	0x20001e5b
 800491c:	08013768 	.word	0x08013768
 8004920:	20001e57 	.word	0x20001e57

08004924 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 800492a:	4815      	ldr	r0, [pc, #84]	; (8004980 <FuncSignalMenuEntryHandler+0x5c>)
 800492c:	f00a ffd4 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004930:	f7fc fde0 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004934:	f000 fde2 	bl	80054fc <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <FuncSignalMenuEntryHandler+0x60>)
 800493a:	2202      	movs	r2, #2
 800493c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800493e:	2000      	movs	r0, #0
 8004940:	f001 f96c 	bl	8005c1c <SM_GetOutputChannel>
 8004944:	4603      	mov	r3, r0
 8004946:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800494a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	785a      	ldrb	r2, [r3, #1]
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <FuncSignalMenuEntryHandler+0x64>)
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800495a:	f000 ff47 	bl	80057ec <FuncO_GetFuncPresetEncoderRange>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <FuncSignalMenuEntryHandler+0x64>)
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c
 8004966:	e002      	b.n	800496e <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <FuncSignalMenuEntryHandler+0x68>)
 800496a:	f7fc fe09 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <FuncSignalMenuEntryHandler+0x6c>)
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004974:	2304      	movs	r3, #4
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	08013780 	.word	0x08013780
 8004984:	20001e5b 	.word	0x20001e5b
 8004988:	40012c00 	.word	0x40012c00
 800498c:	080137ac 	.word	0x080137ac
 8004990:	20001e57 	.word	0x20001e57

08004994 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 8004998:	4807      	ldr	r0, [pc, #28]	; (80049b8 <FuncSignalMenuInputHandler+0x24>)
 800499a:	f00a ff9d 	bl	800f8d8 <puts>
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800499e:	2001      	movs	r0, #1
 80049a0:	f001 fac8 	bl	8005f34 <SM_GetEncoderValue>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fdb4 	bl	8005514 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <FuncSignalMenuInputHandler+0x28>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80049b2:	2304      	movs	r3, #4
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	080137e0 	.word	0x080137e0
 80049bc:	20001e57 	.word	0x20001e57

080049c0 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 80049c4:	4807      	ldr	r0, [pc, #28]	; (80049e4 <FuncSignalMenuExitHandler+0x24>)
 80049c6:	f00a ff87 	bl	800f8d8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <FuncSignalMenuExitHandler+0x28>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80049d0:	f7fc fd90 	bl	80014f4 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 80049d4:	f001 fb50 	bl	8006078 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <FuncSignalMenuExitHandler+0x2c>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80049de:	2303      	movs	r3, #3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0801380c 	.word	0x0801380c
 80049e8:	20001e5b 	.word	0x20001e5b
 80049ec:	20001e57 	.word	0x20001e57

080049f0 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuEntryHandler Event captured\n");
 80049f6:	4815      	ldr	r0, [pc, #84]	; (8004a4c <FuncAuxMenuEntryHandler+0x5c>)
 80049f8:	f00a ff6e 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 80049fc:	f7fc fd7a 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004a00:	f000 fd7c 	bl	80054fc <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <FuncAuxMenuEntryHandler+0x60>)
 8004a06:	2203      	movs	r2, #3
 8004a08:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetAuxFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(Aux_CHANNEL)->func_profile;
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f001 f906 	bl	8005c1c <SM_GetOutputChannel>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004a16:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <FuncAuxMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	785a      	ldrb	r2, [r3, #1]
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <FuncAuxMenuEntryHandler+0x64>)
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004a26:	f000 fee1 	bl	80057ec <FuncO_GetFuncPresetEncoderRange>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <FuncAuxMenuEntryHandler+0x64>)
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a32:	e002      	b.n	8004a3a <FuncAuxMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004a34:	4808      	ldr	r0, [pc, #32]	; (8004a58 <FuncAuxMenuEntryHandler+0x68>)
 8004a36:	f7fc fda3 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <FuncAuxMenuEntryHandler+0x6c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004a40:	2305      	movs	r3, #5
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08013838 	.word	0x08013838
 8004a50:	20001e5b 	.word	0x20001e5b
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	080137ac 	.word	0x080137ac
 8004a5c:	20001e57 	.word	0x20001e57

08004a60 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuInputHandler Event captured\n");
 8004a66:	481c      	ldr	r0, [pc, #112]	; (8004ad8 <FuncAuxMenuInputHandler+0x78>)
 8004a68:	f00a ff36 	bl	800f8d8 <puts>
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004a6c:	f001 fae8 	bl	8006040 <SM_IsFuncPwmDutyMode>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01a      	beq.n	8004aac <FuncAuxMenuInputHandler+0x4c>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f001 fa5c 	bl	8005f34 <SM_GetEncoderValue>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	80fb      	strh	r3, [r7, #6]
		TIM3->CCR1 = (pow(enc_value, 2));
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd66 	bl	8000554 <__aeabi_ui2d>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004ad0 <FuncAuxMenuInputHandler+0x70>
 8004a90:	ec44 3b10 	vmov	d0, r3, r4
 8004a94:	f00c fef8 	bl	8011888 <pow>
 8004a98:	ec53 2b10 	vmov	r2, r3, d0
 8004a9c:	4c0f      	ldr	r4, [pc, #60]	; (8004adc <FuncAuxMenuInputHandler+0x7c>)
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f7fc f8a9 	bl	8000bf8 <__aeabi_d2uiz>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aaa:	e006      	b.n	8004aba <FuncAuxMenuInputHandler+0x5a>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004aac:	2001      	movs	r0, #1
 8004aae:	f001 fa41 	bl	8005f34 <SM_GetEncoderValue>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd67 	bl	8005588 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <FuncAuxMenuInputHandler+0x80>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004ac0:	2305      	movs	r3, #5
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	40000000 	.word	0x40000000
 8004ad8:	08013860 	.word	0x08013860
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	20001e57 	.word	0x20001e57

08004ae4 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004ae8:	f001 fab6 	bl	8006058 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <FuncAuxToggleDutyMode+0x1c>)
 8004aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <FuncAuxToggleDutyMode+0x20>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004afa:	2305      	movs	r3, #5
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	20001e57 	.word	0x20001e57

08004b08 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuExitHandler Event captured\n");
 8004b0c:	4807      	ldr	r0, [pc, #28]	; (8004b2c <FuncAuxMenuExitHandler+0x24>)
 8004b0e:	f00a fee3 	bl	800f8d8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <FuncAuxMenuExitHandler+0x28>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004b18:	f001 faae 	bl	8006078 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004b1c:	f7fc fcea 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <FuncAuxMenuExitHandler+0x2c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004b26:	2303      	movs	r3, #3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	08013888 	.word	0x08013888
 8004b30:	20001e5b 	.word	0x20001e5b
 8004b34:	20001e57 	.word	0x20001e57

08004b38 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <GainMenu_getStatus+0x14>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20001e5c 	.word	0x20001e5c

08004b50 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 8004b54:	4806      	ldr	r0, [pc, #24]	; (8004b70 <GainMainMenuEntryHandler+0x20>)
 8004b56:	f00a febf 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004b5a:	f7fc fccb 	bl	80014f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <GainMainMenuEntryHandler+0x24>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <GainMainMenuEntryHandler+0x28>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b6a:	2306      	movs	r3, #6
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	080138b0 	.word	0x080138b0
 8004b74:	20001e5c 	.word	0x20001e5c
 8004b78:	20001e57 	.word	0x20001e57

08004b7c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <GainMainMenuExitHandler+0x28>)
 8004b82:	f00a fea9 	bl	800f8d8 <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <GainMainMenuExitHandler+0x2c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b8c:	f7fc fcb2 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004b90:	4806      	ldr	r0, [pc, #24]	; (8004bac <GainMainMenuExitHandler+0x30>)
 8004b92:	f00a fea1 	bl	800f8d8 <puts>
	#endif

	eNewEvent = evIdle;
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <GainMainMenuExitHandler+0x34>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b9c:	2301      	movs	r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	08013900 	.word	0x08013900
 8004ba8:	20001e5c 	.word	0x20001e5c
 8004bac:	08013928 	.word	0x08013928
 8004bb0:	20001e57 	.word	0x20001e57

08004bb4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 8004bba:	4815      	ldr	r0, [pc, #84]	; (8004c10 <GainSignalMenuEntryHandler+0x5c>)
 8004bbc:	f00a fe8c 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004bc0:	f7fc fc98 	bl	80014f4 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004bc4:	f000 fe1e 	bl	8005804 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004bc8:	f001 fa62 	bl	8006090 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <GainSignalMenuEntryHandler+0x60>)
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f001 f822 	bl	8005c1c <SM_GetOutputChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004bde:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <GainSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8b1a      	ldrh	r2, [r3, #24]
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <GainSignalMenuEntryHandler+0x64>)
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <GainSignalMenuEntryHandler+0x64>)
 8004bf0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bf6:	e002      	b.n	8004bfe <GainSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <GainSignalMenuEntryHandler+0x68>)
 8004bfa:	f7fc fcc1 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <GainSignalMenuEntryHandler+0x6c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004c04:	2307      	movs	r3, #7
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	08013940 	.word	0x08013940
 8004c14:	20001e5c 	.word	0x20001e5c
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	0801396c 	.word	0x0801396c
 8004c20:	20001e57 	.word	0x20001e57

08004c24 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004c2a:	4814      	ldr	r0, [pc, #80]	; (8004c7c <GainSignalMenuInputHandler+0x58>)
 8004c2c:	f00a fe54 	bl	800f8d8 <puts>
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004c30:	2000      	movs	r0, #0
 8004c32:	f000 fff3 	bl	8005c1c <SM_GetOutputChannel>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004c3c:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d012      	beq.n	8004c6a <GainSignalMenuInputHandler+0x46>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d107      	bne.n	8004c5c <GainSignalMenuInputHandler+0x38>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f001 f971 	bl	8005f34 <SM_GetEncoderValue>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fde1 	bl	800581c <GO_MapEncoderPositionToSignalOutput>
 8004c5a:	e006      	b.n	8004c6a <GainSignalMenuInputHandler+0x46>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f001 f969 	bl	8005f34 <SM_GetEncoderValue>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fb85 	bl	8006374 <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <GainSignalMenuInputHandler+0x5c>)
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004c70:	2307      	movs	r3, #7
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	080139a4 	.word	0x080139a4
 8004c80:	20001e57 	.word	0x20001e57

08004c84 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 8004c88:	4806      	ldr	r0, [pc, #24]	; (8004ca4 <GainSignalMenuExitHandler+0x20>)
 8004c8a:	f00a fe25 	bl	800f8d8 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <GainSignalMenuExitHandler+0x24>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004c94:	f7fc fc2e 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <GainSignalMenuExitHandler+0x28>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004c9e:	2306      	movs	r3, #6
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	080139d0 	.word	0x080139d0
 8004ca8:	20001e5c 	.word	0x20001e5c
 8004cac:	20001e57 	.word	0x20001e57

08004cb0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuEntryHandler Event captured\n");
 8004cb6:	4814      	ldr	r0, [pc, #80]	; (8004d08 <GainAuxMenuEntryHandler+0x58>)
 8004cb8:	f00a fe0e 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004cbc:	f7fc fc1a 	bl	80014f4 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004cc0:	f001 f9e6 	bl	8006090 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <GainAuxMenuEntryHandler+0x5c>)
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile;
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f000 ffa6 	bl	8005c1c <SM_GetOutputChannel>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004cd6:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <GainAuxMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8b1a      	ldrh	r2, [r3, #24]
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <GainAuxMenuEntryHandler+0x60>)
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <GainAuxMenuEntryHandler+0x60>)
 8004ce8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cee:	e002      	b.n	8004cf6 <GainAuxMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004cf0:	4808      	ldr	r0, [pc, #32]	; (8004d14 <GainAuxMenuEntryHandler+0x64>)
 8004cf2:	f7fc fc45 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <GainAuxMenuEntryHandler+0x68>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004cfc:	2308      	movs	r3, #8
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	080139fc 	.word	0x080139fc
 8004d0c:	20001e5c 	.word	0x20001e5c
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	0801396c 	.word	0x0801396c
 8004d18:	20001e57 	.word	0x20001e57

08004d1c <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuInputHandler Event captured\n");
 8004d20:	4807      	ldr	r0, [pc, #28]	; (8004d40 <GainAuxMenuInputHandler+0x24>)
 8004d22:	f00a fdd9 	bl	800f8d8 <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004d26:	2001      	movs	r0, #1
 8004d28:	f001 f904 	bl	8005f34 <SM_GetEncoderValue>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fb5a 	bl	80063e8 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <GainAuxMenuInputHandler+0x28>)
 8004d36:	2203      	movs	r2, #3
 8004d38:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004d3a:	2308      	movs	r3, #8
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	08013a24 	.word	0x08013a24
 8004d44:	20001e57 	.word	0x20001e57

08004d48 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuExitHandler Event captured\n");
 8004d4c:	4806      	ldr	r0, [pc, #24]	; (8004d68 <GainAuxMenuExitHandler+0x20>)
 8004d4e:	f00a fdc3 	bl	800f8d8 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <GainAuxMenuExitHandler+0x24>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004d58:	f7fc fbcc 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <GainAuxMenuExitHandler+0x28>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004d62:	2306      	movs	r3, #6
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	08013a4c 	.word	0x08013a4c
 8004d6c:	20001e5c 	.word	0x20001e5c
 8004d70:	20001e57 	.word	0x20001e57

08004d74 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <ToplevelMenu_getStatus+0x14>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000008 	.word	0x20000008

08004d8c <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <ToplevelMenu_setStatus+0x1c>)
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	7013      	strb	r3, [r2, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000008 	.word	0x20000008

08004dac <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004db0:	4806      	ldr	r0, [pc, #24]	; (8004dcc <ToplevelOutputMenuEntryHandler+0x20>)
 8004db2:	f00a fd91 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004db6:	f7fc fb9d 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <ToplevelOutputMenuEntryHandler+0x24>)
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <ToplevelOutputMenuEntryHandler+0x28>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004dc6:	2301      	movs	r3, #1
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08013b10 	.word	0x08013b10
 8004dd0:	20000008 	.word	0x20000008
 8004dd4:	20001e57 	.word	0x20001e57

08004dd8 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004ddc:	4806      	ldr	r0, [pc, #24]	; (8004df8 <ToplevelOutputMenuExitHandler+0x20>)
 8004dde:	f00a fd7b 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004de2:	f7fc fb87 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <ToplevelOutputMenuExitHandler+0x24>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <ToplevelOutputMenuExitHandler+0x28>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	08013b70 	.word	0x08013b70
 8004dfc:	20000008 	.word	0x20000008
 8004e00:	20001e57 	.word	0x20001e57

08004e04 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004e08:	4806      	ldr	r0, [pc, #24]	; (8004e24 <ToplevelInputMenuEntryHandler+0x20>)
 8004e0a:	f00a fd65 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004e0e:	f7fc fb71 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <ToplevelInputMenuEntryHandler+0x24>)
 8004e14:	2203      	movs	r2, #3
 8004e16:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <ToplevelInputMenuEntryHandler+0x28>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004e1e:	2302      	movs	r3, #2
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08013ba0 	.word	0x08013ba0
 8004e28:	20000008 	.word	0x20000008
 8004e2c:	20001e57 	.word	0x20001e57

08004e30 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004e34:	4806      	ldr	r0, [pc, #24]	; (8004e50 <ToplevelInputMenuExitHandler+0x20>)
 8004e36:	f00a fd4f 	bl	800f8d8 <puts>
	#endif

	DM_RefreshScreen();
 8004e3a:	f7fc fb5b 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <ToplevelInputMenuExitHandler+0x24>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <ToplevelInputMenuExitHandler+0x28>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	08013c00 	.word	0x08013c00
 8004e54:	20000008 	.word	0x20000008
 8004e58:	20001e57 	.word	0x20001e57

08004e5c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d101      	bne.n	8004e76 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40010400 	.word	0x40010400

08004e88 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <IM_Init+0x1c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <IM_Init+0x1c>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40014400 	.word	0x40014400

08004ea8 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004eac:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11c      	bne.n	8004ef2 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004eb8:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	db09      	blt.n	8004ee8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004ed6:	edd3 7a00 	vldr	s15, [r3]
 8004eda:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee0:	ee17 2a90 	vmov	r2, s15
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004ee6:	e029      	b.n	8004f3c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	3201      	adds	r2, #1
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ef0:	e024      	b.n	8004f3c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d104      	bne.n	8004f04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f02:	e01b      	b.n	8004f3c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004f12:	edd3 7a00 	vldr	s15, [r3]
 8004f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1e:	d809      	bhi.n	8004f34 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 2a90 	vmov	r2, s15
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f32:	e003      	b.n	8004f3c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	20000004 	.word	0x20000004
 8004f54:	20000000 	.word	0x20000000

08004f58 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <IM_BTN1_EXTI14_Handler+0x44>)
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <IM_BTN1_EXTI14_Handler+0x48>)
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f70:	dd0c      	ble.n	8004f8c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004f72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f76:	f7ff ff71 	bl	8004e5c <LL_EXTI_IsActiveFlag_0_31>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004f80:	2001      	movs	r0, #1
 8004f82:	f7ff f909 	bl	8004198 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004f86:	4807      	ldr	r0, [pc, #28]	; (8004fa4 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004f88:	f00a fca6 	bl	800f8d8 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <IM_BTN1_EXTI14_Handler+0x48>)
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	8013      	strh	r3, [r2, #0]


}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	20001e5e 	.word	0x20001e5e
 8004fa4:	08013c2c 	.word	0x08013c2c

08004fa8 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <IM_BTN2_EXTI15_Handler+0x44>)
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <IM_BTN2_EXTI15_Handler+0x48>)
 8004fb8:	8812      	ldrh	r2, [r2, #0]
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc0:	dd0c      	ble.n	8004fdc <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004fc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fc6:	f7ff ff49 	bl	8004e5c <LL_EXTI_IsActiveFlag_0_31>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004fd0:	2003      	movs	r0, #3
 8004fd2:	f7ff f8e1 	bl	8004198 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004fd6:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004fd8:	f00a fc7e 	bl	800f8d8 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <IM_BTN2_EXTI15_Handler+0x48>)
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	8013      	strh	r3, [r2, #0]


}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	20001e60 	.word	0x20001e60
 8004ff4:	08013c44 	.word	0x08013c44

08004ff8 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <IM_BTN3_EXTI0_Handler+0x40>)
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	4a0d      	ldr	r2, [pc, #52]	; (800503c <IM_BTN3_EXTI0_Handler+0x44>)
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005010:	dd0b      	ble.n	800502a <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005012:	2001      	movs	r0, #1
 8005014:	f7ff ff22 	bl	8004e5c <LL_EXTI_IsActiveFlag_0_31>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800501e:	2004      	movs	r0, #4
 8005020:	f7ff f8ba 	bl	8004198 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005024:	4806      	ldr	r0, [pc, #24]	; (8005040 <IM_BTN3_EXTI0_Handler+0x48>)
 8005026:	f00a fc57 	bl	800f8d8 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <IM_BTN3_EXTI0_Handler+0x44>)
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	8013      	strh	r3, [r2, #0]


}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40014400 	.word	0x40014400
 800503c:	20001e62 	.word	0x20001e62
 8005040:	08013c60 	.word	0x08013c60

08005044 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800504a:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <IM_BTN4_EXTI1_Handler+0x40>)
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <IM_BTN4_EXTI1_Handler+0x44>)
 8005054:	8812      	ldrh	r2, [r2, #0]
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800505c:	dd0b      	ble.n	8005076 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800505e:	2002      	movs	r0, #2
 8005060:	f7ff fefc 	bl	8004e5c <LL_EXTI_IsActiveFlag_0_31>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 800506a:	2002      	movs	r0, #2
 800506c:	f7ff f894 	bl	8004198 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <IM_BTN4_EXTI1_Handler+0x48>)
 8005072:	f00a fc31 	bl	800f8d8 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8005076:	4a04      	ldr	r2, [pc, #16]	; (8005088 <IM_BTN4_EXTI1_Handler+0x44>)
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	8013      	strh	r3, [r2, #0]


}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40014400 	.word	0x40014400
 8005088:	20001e64 	.word	0x20001e64
 800508c:	08013c78 	.word	0x08013c78

08005090 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005096:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <IM_ENC_EXTI2_Handler+0x40>)
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <IM_ENC_EXTI2_Handler+0x44>)
 80050a0:	8812      	ldrh	r2, [r2, #0]
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a8:	dd0b      	ble.n	80050c2 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80050aa:	2004      	movs	r0, #4
 80050ac:	f7ff fed6 	bl	8004e5c <LL_EXTI_IsActiveFlag_0_31>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80050b6:	2006      	movs	r0, #6
 80050b8:	f7ff f86e 	bl	8004198 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80050bc:	4806      	ldr	r0, [pc, #24]	; (80050d8 <IM_ENC_EXTI2_Handler+0x48>)
 80050be:	f00a fc0b 	bl	800f8d8 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <IM_ENC_EXTI2_Handler+0x44>)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	8013      	strh	r3, [r2, #0]


}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40014400 	.word	0x40014400
 80050d4:	20001e66 	.word	0x20001e66
 80050d8:	08013c90 	.word	0x08013c90

080050dc <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <IM_ENC_DIRF_Handler+0x30>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d10b      	bne.n	8005106 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 80050ee:	2005      	movs	r0, #5
 80050f0:	f7ff f852 	bl	8004198 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80050f4:	4806      	ldr	r0, [pc, #24]	; (8005110 <IM_ENC_DIRF_Handler+0x34>)
 80050f6:	f00a fbef 	bl	800f8d8 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <IM_ENC_DIRF_Handler+0x30>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	4a03      	ldr	r2, [pc, #12]	; (800510c <IM_ENC_DIRF_Handler+0x30>)
 8005100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005104:	6113      	str	r3, [r2, #16]

	}
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	08013cac 	.word	0x08013cac

08005114 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <BO_GetBiasPolarity+0x14>)
 800511a:	781b      	ldrb	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000009 	.word	0x20000009

0800512c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <BO_GetDcBiasEncoderValue+0x14>)
 8005132:	881b      	ldrh	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	2000000a 	.word	0x2000000a

08005144 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800514e:	2000      	movs	r0, #0
 8005150:	f000 fef0 	bl	8005f34 <SM_GetEncoderValue>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <BO_MapEncoderPositionToSignalOutput+0x84>)
 800515a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005162:	d214      	bcs.n	800518e <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005178:	2200      	movs	r2, #0
 800517a:	2110      	movs	r1, #16
 800517c:	4814      	ldr	r0, [pc, #80]	; (80051d0 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 800517e:	f004 fcd7 	bl	8009b30 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8005182:	2201      	movs	r2, #1
 8005184:	2108      	movs	r1, #8
 8005186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800518a:	f005 fc93 	bl	800aab4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005194:	d314      	bcc.n	80051c0 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80051aa:	2200      	movs	r2, #0
 80051ac:	2110      	movs	r1, #16
 80051ae:	4808      	ldr	r0, [pc, #32]	; (80051d0 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80051b0:	f004 fcbe 	bl	8009b30 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80051b4:	2200      	movs	r2, #0
 80051b6:	2108      	movs	r1, #8
 80051b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051bc:	f005 fc7a 	bl	800aab4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2000000a 	.word	0x2000000a
 80051cc:	20000009 	.word	0x20000009
 80051d0:	2000263c 	.word	0x2000263c

080051d4 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80051d8:	2110      	movs	r1, #16
 80051da:	4803      	ldr	r0, [pc, #12]	; (80051e8 <BO_GetOutputBias+0x14>)
 80051dc:	f004 fcee 	bl	8009bbc <HAL_DAC_GetValue>
 80051e0:	4603      	mov	r3, r0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2000263c 	.word	0x2000263c

080051ec <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	e06b      	b.n	80052d0 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80051f8:	493a      	ldr	r1, [pc, #232]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3308      	adds	r3, #8
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d129      	bne.n	8005262 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800520e:	4935      	ldr	r1, [pc, #212]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3304      	adds	r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a31      	ldr	r2, [pc, #196]	; (80052e8 <FreqO_InitFreqProfiles+0xfc>)
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3310      	adds	r3, #16
 800523e:	edd3 7a00 	vldr	s15, [r3]
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524a:	ee17 0a90 	vmov	r0, s15
 800524e:	4925      	ldr	r1, [pc, #148]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	330c      	adds	r3, #12
 800525e:	6018      	str	r0, [r3, #0]
 8005260:	e033      	b.n	80052ca <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8005262:	4920      	ldr	r1, [pc, #128]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3304      	adds	r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <FreqO_InitFreqProfiles+0xfc>)
 8005276:	fbb2 f1f3 	udiv	r1, r2, r3
 800527a:	481a      	ldr	r0, [pc, #104]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4403      	add	r3, r0
 8005288:	3308      	adds	r3, #8
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005298:	4912      	ldr	r1, [pc, #72]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3310      	adds	r3, #16
 80052a8:	edd3 7a00 	vldr	s15, [r3]
 80052ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b4:	ee17 0a90 	vmov	r0, s15
 80052b8:	490a      	ldr	r1, [pc, #40]	; (80052e4 <FreqO_InitFreqProfiles+0xf8>)
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	330c      	adds	r3, #12
 80052c8:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3301      	adds	r3, #1
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b0d      	cmp	r3, #13
 80052d4:	dd90      	ble.n	80051f8 <FreqO_InitFreqProfiles+0xc>
	}
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	00155cc0 	.word	0x00155cc0

080052ec <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80052f2:	2000      	movs	r0, #0
 80052f4:	f000 fe1e 	bl	8005f34 <SM_GetEncoderValue>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <FreqO_AdjustFreq+0x54>)
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 8005300:	2001      	movs	r0, #1
 8005302:	f000 fc8b 	bl	8005c1c <SM_GetOutputChannel>
 8005306:	4603      	mov	r3, r0
 8005308:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	2b06      	cmp	r3, #6
 8005314:	d110      	bne.n	8005338 <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <FreqO_AdjustFreq+0x58>)
 8005318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 800531e:	2000      	movs	r0, #0
 8005320:	f000 fe08 	bl	8005f34 <SM_GetEncoderValue>
 8005324:	4603      	mov	r3, r0
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <FreqO_AdjustFreq+0x58>)
 800532c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = TIM3->ARR/2;
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <FreqO_AdjustFreq+0x58>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <FreqO_AdjustFreq+0x58>)
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40013400 	.word	0x40013400
 8005344:	40000400 	.word	0x40000400

08005348 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <FreqO_MapEncoderPositionToBothOutput+0x78>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	429a      	cmp	r2, r3
 8005362:	d910      	bls.n	8005386 <FreqO_MapEncoderPositionToBothOutput+0x3e>
	{
		tmpFreqIndex++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b0d      	cmp	r3, #13
 800536e:	d901      	bls.n	8005374 <FreqO_MapEncoderPositionToBothOutput+0x2c>
 8005370:	230d      	movs	r3, #13
 8005372:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f8a1 	bl	80054bc <FreqO_GetProfileByIndex>
 800537a:	4603      	mov	r3, r0
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f822 	bl	80053c8 <FreqO_ApplyProfile>
 8005384:	e014      	b.n	80053b0 <FreqO_MapEncoderPositionToBothOutput+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	429a      	cmp	r2, r3
 800538e:	d20f      	bcs.n	80053b0 <FreqO_MapEncoderPositionToBothOutput+0x68>
	{
		tmpFreqIndex--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b0d      	cmp	r3, #13
 800539a:	d901      	bls.n	80053a0 <FreqO_MapEncoderPositionToBothOutput+0x58>
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f88b 	bl	80054bc <FreqO_GetProfileByIndex>
 80053a6:	4603      	mov	r3, r0
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f80c 	bl	80053c8 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	8013      	strh	r3, [r2, #0]

}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000124 	.word	0x20000124
 80053c4:	20001e68 	.word	0x20001e68

080053c8 <FreqO_ApplyProfile>:

 *	@retval None
 *
 */
void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f845 	bl	8005460 <FreqO_FindFPresetObject>
 80053d6:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d024      	beq.n	8005428 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <FreqO_ApplyProfile+0x70>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <FreqO_ApplyProfile+0x70>)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 80053ee:	2001      	movs	r0, #1
 80053f0:	f000 fc14 	bl	8005c1c <SM_GetOutputChannel>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	2b06      	cmp	r3, #6
 8005402:	d10d      	bne.n	8005420 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 8005404:	4b0d      	ldr	r3, [pc, #52]	; (800543c <FreqO_ApplyProfile+0x74>)
 8005406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = tmpFreqProfile->arr/2;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <FreqO_ApplyProfile+0x74>)
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 = TIM3->ARR/2;
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <FreqO_ApplyProfile+0x74>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <FreqO_ApplyProfile+0x74>)
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <FreqO_ApplyProfile+0x78>)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005426:	e002      	b.n	800542e <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005428:	4806      	ldr	r0, [pc, #24]	; (8005444 <FreqO_ApplyProfile+0x7c>)
 800542a:	f7fc f8a9 	bl	8001580 <DM_SetErrorDebugMsg>
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40013400 	.word	0x40013400
 800543c:	40000400 	.word	0x40000400
 8005440:	20000124 	.word	0x20000124
 8005444:	08013cc4 	.word	0x08013cc4

08005448 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	return freq_profile;
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <FreqO_GetFPresetObject+0x14>)
 800544e:	681b      	ldr	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000124 	.word	0x20000124

08005460 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e016      	b.n	800549c <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800546e:	4911      	ldr	r1, [pc, #68]	; (80054b4 <FreqO_FindFPresetObject+0x54>)
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3304      	adds	r3, #4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d107      	bne.n	8005496 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <FreqO_FindFPresetObject+0x54>)
 8005492:	4413      	add	r3, r2
 8005494:	e009      	b.n	80054aa <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3301      	adds	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b0d      	cmp	r3, #13
 80054a0:	dde5      	ble.n	800546e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80054a2:	4805      	ldr	r0, [pc, #20]	; (80054b8 <FreqO_FindFPresetObject+0x58>)
 80054a4:	f7fc f86c 	bl	8001580 <DM_SetErrorDebugMsg>
	return 0;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	08013cec 	.word	0x08013cec

080054bc <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <FreqO_GetProfileByIndex+0x24>)
 80054d0:	4413      	add	r3, r2
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	2000000c 	.word	0x2000000c

080054e4 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <FreqO_ResetLastEncoderValue+0x14>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]
}
 80054ee:	bf00      	nop
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20001e68 	.word	0x20001e68

080054fc <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <FuncO_ResetLastEncoderValue+0x14>)
 8005502:	2200      	movs	r2, #0
 8005504:	801a      	strh	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20001e96 	.word	0x20001e96

08005514 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800551e:	2000      	movs	r0, #0
 8005520:	f000 fb7c 	bl	8005c1c <SM_GetOutputChannel>
 8005524:	4603      	mov	r3, r0
 8005526:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	429a      	cmp	r2, r3
 8005536:	d90c      	bls.n	8005552 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	3301      	adds	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d901      	bls.n	8005548 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005544:	2306      	movs	r3, #6
 8005546:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f856 	bl	80055fc <FuncO_ApplyProfileToSignal>
 8005550:	e010      	b.n	8005574 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	429a      	cmp	r2, r3
 800555a:	d20b      	bcs.n	8005574 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3b01      	subs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d901      	bls.n	800556c <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f844 	bl	80055fc <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005574:	4a03      	ldr	r2, [pc, #12]	; (8005584 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	8013      	strh	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20001e96 	.word	0x20001e96

08005588 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 8005592:	2001      	movs	r0, #1
 8005594:	f000 fb42 	bl	8005c1c <SM_GetOutputChannel>
 8005598:	4603      	mov	r3, r0
 800559a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d90c      	bls.n	80055c6 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	3301      	adds	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b06      	cmp	r3, #6
 80055b6:	d901      	bls.n	80055bc <FuncO_MapEncoderPositionToAuxOutput+0x34>
 80055b8:	2306      	movs	r3, #6
 80055ba:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f87c 	bl	80056bc <FuncO_ApplyProfileToAux>
 80055c4:	e010      	b.n	80055e8 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d20b      	bcs.n	80055e8 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d901      	bls.n	80055e0 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f86a 	bl	80056bc <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	8013      	strh	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20001e96 	.word	0x20001e96

080055fc <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b087      	sub	sp, #28
 8005600:	af02      	add	r7, sp, #8
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005606:	79fc      	ldrb	r4, [r7, #7]
 8005608:	2000      	movs	r0, #0
 800560a:	f000 fb07 	bl	8005c1c <SM_GetOutputChannel>
 800560e:	4601      	mov	r1, r0
 8005610:	00e3      	lsls	r3, r4, #3
 8005612:	4a26      	ldr	r2, [pc, #152]	; (80056ac <FuncO_ApplyProfileToSignal+0xb0>)
 8005614:	4413      	add	r3, r2
 8005616:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8
	}
	else
	{
	*/
		// copy the lookup table for the next output function in to SignalChannel object
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800561a:	79fc      	ldrb	r4, [r7, #7]
 800561c:	2000      	movs	r0, #0
 800561e:	f000 fafd 	bl	8005c1c <SM_GetOutputChannel>
 8005622:	4601      	mov	r1, r0
 8005624:	4a21      	ldr	r2, [pc, #132]	; (80056ac <FuncO_ApplyProfileToSignal+0xb0>)
 8005626:	00e3      	lsls	r3, r4, #3
 8005628:	4413      	add	r3, r2
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800562e:	2000      	movs	r0, #0
 8005630:	f000 faf4 	bl	8005c1c <SM_GetOutputChannel>
 8005634:	4603      	mov	r3, r0
 8005636:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fd31 	bl	80060a8 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <FuncO_ApplyProfileToSignal+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <FuncO_ApplyProfileToSignal+0xb4>)
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005652:	2100      	movs	r1, #0
 8005654:	4817      	ldr	r0, [pc, #92]	; (80056b4 <FuncO_ApplyProfileToSignal+0xb8>)
 8005656:	f004 fa15 	bl	8009a84 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800565a:	2000      	movs	r0, #0
 800565c:	f000 fade 	bl	8005c1c <SM_GetOutputChannel>
 8005660:	4603      	mov	r3, r0
 8005662:	f103 0208 	add.w	r2, r3, #8
 8005666:	2300      	movs	r3, #0
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	2378      	movs	r3, #120	; 0x78
 800566c:	2100      	movs	r1, #0
 800566e:	4811      	ldr	r0, [pc, #68]	; (80056b4 <FuncO_ApplyProfileToSignal+0xb8>)
 8005670:	f004 f946 	bl	8009900 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005674:	2100      	movs	r1, #0
 8005676:	4810      	ldr	r0, [pc, #64]	; (80056b8 <FuncO_ApplyProfileToSignal+0xbc>)
 8005678:	f004 fa04 	bl	8009a84 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(Aux_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800567c:	2001      	movs	r0, #1
 800567e:	f000 facd 	bl	8005c1c <SM_GetOutputChannel>
 8005682:	4603      	mov	r3, r0
 8005684:	f103 0208 	add.w	r2, r3, #8
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2378      	movs	r3, #120	; 0x78
 800568e:	2100      	movs	r1, #0
 8005690:	4809      	ldr	r0, [pc, #36]	; (80056b8 <FuncO_ApplyProfileToSignal+0xbc>)
 8005692:	f004 f935 	bl	8009900 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <FuncO_ApplyProfileToSignal+0xb4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a05      	ldr	r2, [pc, #20]	; (80056b0 <FuncO_ApplyProfileToSignal+0xb4>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6013      	str	r3, [r2, #0]

	//}

}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd90      	pop	{r4, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	2000012c 	.word	0x2000012c
 80056b0:	40013400 	.word	0x40013400
 80056b4:	2000263c 	.word	0x2000263c
 80056b8:	20002628 	.word	0x20002628

080056bc <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b087      	sub	sp, #28
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(Aux_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80056c6:	79fc      	ldrb	r4, [r7, #7]
 80056c8:	2001      	movs	r0, #1
 80056ca:	f000 faa7 	bl	8005c1c <SM_GetOutputChannel>
 80056ce:	4601      	mov	r1, r0
 80056d0:	00e3      	lsls	r3, r4, #3
 80056d2:	4a42      	ldr	r2, [pc, #264]	; (80057dc <FuncO_ApplyProfileToAux+0x120>)
 80056d4:	4413      	add	r3, r2
 80056d6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d107      	bne.n	80056f0 <FuncO_ApplyProfileToAux+0x34>
	{
		// switch output signal from DAC to PWM
		SM_DisableDacToAux();
 80056e0:	f000 fc1e 	bl	8005f20 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 80056e4:	f000 fab0 	bl	8005c48 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 80056e8:	4b3d      	ldr	r3, [pc, #244]	; (80057e0 <FuncO_ApplyProfileToAux+0x124>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}
}
 80056ee:	e071      	b.n	80057d4 <FuncO_ApplyProfileToAux+0x118>
	else if(last_output_mode_was_pwm)
 80056f0:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <FuncO_ApplyProfileToAux+0x124>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03a      	beq.n	800576e <FuncO_ApplyProfileToAux+0xb2>
		SM_DisablePwmToAux();
 80056f8:	f000 fb66 	bl	8005dc8 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 80056fc:	f000 fb74 	bl	8005de8 <SM_EnableDacToAux>
		SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005700:	79fc      	ldrb	r4, [r7, #7]
 8005702:	2001      	movs	r0, #1
 8005704:	f000 fa8a 	bl	8005c1c <SM_GetOutputChannel>
 8005708:	4601      	mov	r1, r0
 800570a:	4a34      	ldr	r2, [pc, #208]	; (80057dc <FuncO_ApplyProfileToAux+0x120>)
 800570c:	00e3      	lsls	r3, r4, #3
 800570e:	4413      	add	r3, r2
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 8005714:	2001      	movs	r0, #1
 8005716:	f000 fa81 	bl	8005c1c <SM_GetOutputChannel>
 800571a:	4603      	mov	r3, r0
 800571c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	73bb      	strb	r3, [r7, #14]
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fcec 	bl	8006104 <VPP_ApplyProfileToAux>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800572c:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005738:	2100      	movs	r1, #0
 800573a:	482b      	ldr	r0, [pc, #172]	; (80057e8 <FuncO_ApplyProfileToAux+0x12c>)
 800573c:	f004 f9a2 	bl	8009a84 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005740:	2000      	movs	r0, #0
 8005742:	f000 fa6b 	bl	8005c1c <SM_GetOutputChannel>
 8005746:	4603      	mov	r3, r0
 8005748:	f103 0208 	add.w	r2, r3, #8
 800574c:	2300      	movs	r3, #0
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2378      	movs	r3, #120	; 0x78
 8005752:	2100      	movs	r1, #0
 8005754:	4824      	ldr	r0, [pc, #144]	; (80057e8 <FuncO_ApplyProfileToAux+0x12c>)
 8005756:	f004 f8d3 	bl	8009900 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800575a:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]
		last_output_mode_was_pwm = 0;
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <FuncO_ApplyProfileToAux+0x124>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
}
 800576c:	e032      	b.n	80057d4 <FuncO_ApplyProfileToAux+0x118>
		SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800576e:	79fc      	ldrb	r4, [r7, #7]
 8005770:	2001      	movs	r0, #1
 8005772:	f000 fa53 	bl	8005c1c <SM_GetOutputChannel>
 8005776:	4601      	mov	r1, r0
 8005778:	4a18      	ldr	r2, [pc, #96]	; (80057dc <FuncO_ApplyProfileToAux+0x120>)
 800577a:	00e3      	lsls	r3, r4, #3
 800577c:	4413      	add	r3, r2
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 8005782:	2001      	movs	r0, #1
 8005784:	f000 fa4a 	bl	8005c1c <SM_GetOutputChannel>
 8005788:	4603      	mov	r3, r0
 800578a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fcb5 	bl	8006104 <VPP_ApplyProfileToAux>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80057a6:	2100      	movs	r1, #0
 80057a8:	480f      	ldr	r0, [pc, #60]	; (80057e8 <FuncO_ApplyProfileToAux+0x12c>)
 80057aa:	f004 f96b 	bl	8009a84 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057ae:	2000      	movs	r0, #0
 80057b0:	f000 fa34 	bl	8005c1c <SM_GetOutputChannel>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f103 0208 	add.w	r2, r3, #8
 80057ba:	2300      	movs	r3, #0
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	2378      	movs	r3, #120	; 0x78
 80057c0:	2100      	movs	r1, #0
 80057c2:	4809      	ldr	r0, [pc, #36]	; (80057e8 <FuncO_ApplyProfileToAux+0x12c>)
 80057c4:	f004 f89c 	bl	8009900 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <FuncO_ApplyProfileToAux+0x128>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd90      	pop	{r4, r7, pc}
 80057dc:	2000012c 	.word	0x2000012c
 80057e0:	20001e94 	.word	0x20001e94
 80057e4:	40013400 	.word	0x40013400
 80057e8:	2000263c 	.word	0x2000263c

080057ec <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <FuncO_GetFuncPresetEncoderRange+0x14>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000128 	.word	0x20000128

08005804 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <GO_ResetLastEncoderValue+0x14>)
 800580a:	2200      	movs	r2, #0
 800580c:	801a      	strh	r2, [r3, #0]
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20001e98 	.word	0x20001e98

0800581c <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005826:	2000      	movs	r0, #0
 8005828:	f000 f9f8 	bl	8005c1c <SM_GetOutputChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	429a      	cmp	r2, r3
 800583e:	d90c      	bls.n	800585a <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	3301      	adds	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b07      	cmp	r3, #7
 800584a:	d901      	bls.n	8005850 <GO_MapEncoderPositionToSignalOutput+0x34>
 800584c:	2307      	movs	r3, #7
 800584e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f81c 	bl	8005890 <GO_ApplyPresetToSignal>
 8005858:	e010      	b.n	800587c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	429a      	cmp	r2, r3
 8005862:	d20b      	bcs.n	800587c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	3b01      	subs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b07      	cmp	r3, #7
 800586e:	d901      	bls.n	8005874 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f80a 	bl	8005890 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800587c:	4a03      	ldr	r2, [pc, #12]	; (800588c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001e98 	.word	0x20001e98

08005890 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800589a:	79fc      	ldrb	r4, [r7, #7]
 800589c:	2000      	movs	r0, #0
 800589e:	f000 f9bd 	bl	8005c1c <SM_GetOutputChannel>
 80058a2:	4601      	mov	r1, r0
 80058a4:	4623      	mov	r3, r4
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4423      	add	r3, r4
 80058aa:	4a4f      	ldr	r2, [pc, #316]	; (80059e8 <GO_ApplyPresetToSignal+0x158>)
 80058ac:	4413      	add	r3, r2
 80058ae:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	2b07      	cmp	r3, #7
 80058b6:	f200 8093 	bhi.w	80059e0 <GO_ApplyPresetToSignal+0x150>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <GO_ApplyPresetToSignal+0x30>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058e1 	.word	0x080058e1
 80058c4:	08005901 	.word	0x08005901
 80058c8:	08005921 	.word	0x08005921
 80058cc:	08005941 	.word	0x08005941
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005981 	.word	0x08005981
 80058d8:	080059a1 	.word	0x080059a1
 80058dc:	080059c1 	.word	0x080059c1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80058e0:	2200      	movs	r2, #0
 80058e2:	2101      	movs	r1, #1
 80058e4:	4841      	ldr	r0, [pc, #260]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 80058e6:	f005 f8e5 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80058ea:	2200      	movs	r2, #0
 80058ec:	2120      	movs	r1, #32
 80058ee:	4840      	ldr	r0, [pc, #256]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80058f0:	f005 f8e0 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058f4:	2200      	movs	r2, #0
 80058f6:	2110      	movs	r1, #16
 80058f8:	483d      	ldr	r0, [pc, #244]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80058fa:	f005 f8db 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 80058fe:	e06f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005900:	2201      	movs	r2, #1
 8005902:	2101      	movs	r1, #1
 8005904:	4839      	ldr	r0, [pc, #228]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 8005906:	f005 f8d5 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800590a:	2200      	movs	r2, #0
 800590c:	2120      	movs	r1, #32
 800590e:	4838      	ldr	r0, [pc, #224]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 8005910:	f005 f8d0 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005914:	2200      	movs	r2, #0
 8005916:	2110      	movs	r1, #16
 8005918:	4835      	ldr	r0, [pc, #212]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 800591a:	f005 f8cb 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 800591e:	e05f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005920:	2200      	movs	r2, #0
 8005922:	2101      	movs	r1, #1
 8005924:	4831      	ldr	r0, [pc, #196]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 8005926:	f005 f8c5 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800592a:	2201      	movs	r2, #1
 800592c:	2120      	movs	r1, #32
 800592e:	4830      	ldr	r0, [pc, #192]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 8005930:	f005 f8c0 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005934:	2200      	movs	r2, #0
 8005936:	2110      	movs	r1, #16
 8005938:	482d      	ldr	r0, [pc, #180]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 800593a:	f005 f8bb 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 800593e:	e04f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005940:	2201      	movs	r2, #1
 8005942:	2101      	movs	r1, #1
 8005944:	4829      	ldr	r0, [pc, #164]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 8005946:	f005 f8b5 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800594a:	2201      	movs	r2, #1
 800594c:	2120      	movs	r1, #32
 800594e:	4828      	ldr	r0, [pc, #160]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 8005950:	f005 f8b0 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005954:	2200      	movs	r2, #0
 8005956:	2110      	movs	r1, #16
 8005958:	4825      	ldr	r0, [pc, #148]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 800595a:	f005 f8ab 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 800595e:	e03f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005960:	2200      	movs	r2, #0
 8005962:	2101      	movs	r1, #1
 8005964:	4821      	ldr	r0, [pc, #132]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 8005966:	f005 f8a5 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800596a:	2200      	movs	r2, #0
 800596c:	2120      	movs	r1, #32
 800596e:	4820      	ldr	r0, [pc, #128]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 8005970:	f005 f8a0 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005974:	2201      	movs	r2, #1
 8005976:	2110      	movs	r1, #16
 8005978:	481d      	ldr	r0, [pc, #116]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 800597a:	f005 f89b 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 800597e:	e02f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005980:	2201      	movs	r2, #1
 8005982:	2101      	movs	r1, #1
 8005984:	4819      	ldr	r0, [pc, #100]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 8005986:	f005 f895 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800598a:	2200      	movs	r2, #0
 800598c:	2120      	movs	r1, #32
 800598e:	4818      	ldr	r0, [pc, #96]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 8005990:	f005 f890 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005994:	2201      	movs	r2, #1
 8005996:	2110      	movs	r1, #16
 8005998:	4815      	ldr	r0, [pc, #84]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 800599a:	f005 f88b 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 800599e:	e01f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2101      	movs	r1, #1
 80059a4:	4811      	ldr	r0, [pc, #68]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 80059a6:	f005 f885 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80059aa:	2201      	movs	r2, #1
 80059ac:	2120      	movs	r1, #32
 80059ae:	4810      	ldr	r0, [pc, #64]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80059b0:	f005 f880 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80059b4:	2201      	movs	r2, #1
 80059b6:	2110      	movs	r1, #16
 80059b8:	480d      	ldr	r0, [pc, #52]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80059ba:	f005 f87b 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 80059be:	e00f      	b.n	80059e0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80059c0:	2201      	movs	r2, #1
 80059c2:	2101      	movs	r1, #1
 80059c4:	4809      	ldr	r0, [pc, #36]	; (80059ec <GO_ApplyPresetToSignal+0x15c>)
 80059c6:	f005 f875 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80059ca:	2201      	movs	r2, #1
 80059cc:	2120      	movs	r1, #32
 80059ce:	4808      	ldr	r0, [pc, #32]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80059d0:	f005 f870 	bl	800aab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80059d4:	2201      	movs	r2, #1
 80059d6:	2110      	movs	r1, #16
 80059d8:	4805      	ldr	r0, [pc, #20]	; (80059f0 <GO_ApplyPresetToSignal+0x160>)
 80059da:	f005 f86b 	bl	800aab4 <HAL_GPIO_WritePin>
			break;
 80059de:	bf00      	nop
	}

}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd90      	pop	{r4, r7, pc}
 80059e8:	20000164 	.word	0x20000164
 80059ec:	48000400 	.word	0x48000400
 80059f0:	48000800 	.word	0x48000800

080059f4 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80059f8:	f7ff fbf8 	bl	80051ec <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80059fc:	f000 f8ae 	bl	8005b5c <_InitOutputChannels>
	_InitAmpProfiles();
 8005a00:	f000 f824 	bl	8005a4c <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005a04:	2110      	movs	r1, #16
 8005a06:	480f      	ldr	r0, [pc, #60]	; (8005a44 <SM_Init+0x50>)
 8005a08:	f003 ff27 	bl	800985a <HAL_DAC_Start>
	HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	2108      	movs	r1, #8
 8005a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a14:	f005 f84e 	bl	800aab4 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <SM_Init+0x54>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <SM_Init+0x54>)
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005a24:	2000      	movs	r0, #0
 8005a26:	f7ff fde9 	bl	80055fc <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8005a2a:	2059      	movs	r0, #89	; 0x59
 8005a2c:	f000 fb3c 	bl	80060a8 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7ff fe43 	bl	80056bc <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8005a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a3a:	f7ff fcc5 	bl	80053c8 <FreqO_ApplyProfile>

}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	2000263c 	.word	0x2000263c
 8005a48:	40013400 	.word	0x40013400

08005a4c <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b08b      	sub	sp, #44	; 0x2c
 8005a50:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
 8005a56:	e033      	b.n	8005ac0 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005a58:	493c      	ldr	r1, [pc, #240]	; (8005b4c <_InitAmpProfiles+0x100>)
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	3304      	adds	r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005a6c:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <_InitAmpProfiles+0x104>)
 8005a6e:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005a70:	4936      	ldr	r1, [pc, #216]	; (8005b4c <_InitAmpProfiles+0x100>)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3308      	adds	r3, #8
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005a8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005aa6:	4929      	ldr	r1, [pc, #164]	; (8005b4c <_InitAmpProfiles+0x100>)
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	2b61      	cmp	r3, #97	; 0x61
 8005ac4:	ddc8      	ble.n	8005a58 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	e037      	b.n	8005b3c <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005acc:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <_InitAmpProfiles+0x108>)
 8005ace:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005ad0:	491e      	ldr	r1, [pc, #120]	; (8005b4c <_InitAmpProfiles+0x100>)
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005ae4:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ae8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005aec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005af0:	ee16 0a90 	vmov	r0, s13
 8005af4:	f7fa fd50 	bl	8000598 <__aeabi_f2d>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	ec44 3b10 	vmov	d0, r3, r4
 8005b00:	f00b fe42 	bl	8011788 <log10>
 8005b04:	ec51 0b10 	vmov	r0, r1, d0
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <_InitAmpProfiles+0x10c>)
 8005b0e:	f7fa fd9b 	bl	8000648 <__aeabi_dmul>
 8005b12:	4603      	mov	r3, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	4618      	mov	r0, r3
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7fb f88d 	bl	8000c38 <__aeabi_d2f>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005b22:	490a      	ldr	r1, [pc, #40]	; (8005b4c <_InitAmpProfiles+0x100>)
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	330c      	adds	r3, #12
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	2b61      	cmp	r3, #97	; 0x61
 8005b40:	ddc4      	ble.n	8005acc <_InitAmpProfiles+0x80>

	}
}
 8005b42:	bf00      	nop
 8005b44:	372c      	adds	r7, #44	; 0x2c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2000017c 	.word	0x2000017c
 8005b50:	402ccccd 	.word	0x402ccccd
 8005b54:	3a83126f 	.word	0x3a83126f
 8005b58:	40340000 	.word	0x40340000

08005b5c <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005b62:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <_InitOutputChannels+0xac>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005b6e:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005b72:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <_InitOutputChannels+0xac>)
 8005b74:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	e00b      	b.n	8005b96 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b7e:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <_InitOutputChannels+0xb0>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b86:	491f      	ldr	r1, [pc, #124]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3301      	adds	r3, #1
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b77      	cmp	r3, #119	; 0x77
 8005b9a:	ddf0      	ble.n	8005b7e <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <_InitOutputChannels+0xb4>)
 8005ba0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005ba4:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <_InitOutputChannels+0xa8>)
 8005ba6:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <_InitOutputChannels+0xb8>)
 8005ba8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = Aux_CHANNEL;
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <_InitOutputChannels+0xac>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005bb8:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005bba:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005bbc:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <_InitOutputChannels+0xac>)
 8005bbe:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	e00b      	b.n	8005be0 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005bc8:	4a10      	ldr	r2, [pc, #64]	; (8005c0c <_InitOutputChannels+0xb0>)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bd0:	4911      	ldr	r1, [pc, #68]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b77      	cmp	r3, #119	; 0x77
 8005be4:	ddf0      	ble.n	8005bc8 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <_InitOutputChannels+0xb4>)
 8005bea:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <_InitOutputChannels+0xbc>)
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <_InitOutputChannels+0xb8>)
 8005bf2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20001f70 	.word	0x20001f70
 8005c08:	2000012c 	.word	0x2000012c
 8005c0c:	200014b8 	.word	0x200014b8
 8005c10:	20000b38 	.word	0x20000b38
 8005c14:	20000179 	.word	0x20000179
 8005c18:	20002164 	.word	0x20002164

08005c1c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <SM_GetOutputChannel+0x24>)
 8005c2e:	e000      	b.n	8005c32 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <SM_GetOutputChannel+0x28>)
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20001f70 	.word	0x20001f70
 8005c44:	20002164 	.word	0x20002164

08005c48 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b096      	sub	sp, #88	; 0x58
 8005c4c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005c68:	f107 0320 	add.w	r3, r7, #32
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	611a      	str	r2, [r3, #16]
 8005c78:	615a      	str	r2, [r3, #20]
 8005c7a:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c7c:	f107 030c 	add.w	r3, r7, #12
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005c8e:	4a4c      	ldr	r2, [pc, #304]	; (8005dc0 <SM_EnablePwmToAux+0x178>)
 8005c90:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005c92:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005c98:	4b48      	ldr	r3, [pc, #288]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005ca4:	4b45      	ldr	r3, [pc, #276]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005caa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cac:	4b43      	ldr	r3, [pc, #268]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005cb2:	4842      	ldr	r0, [pc, #264]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005cb4:	f005 ffa0 	bl	800bbf8 <HAL_TIM_Base_Init>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <SM_EnablePwmToAux+0x7a>
	{
		Error_Handler();
 8005cbe:	f001 faa3 	bl	8007208 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ccc:	4619      	mov	r1, r3
 8005cce:	483b      	ldr	r0, [pc, #236]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005cd0:	f006 fcee 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <SM_EnablePwmToAux+0x96>
	{
		Error_Handler();
 8005cda:	f001 fa95 	bl	8007208 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cde:	4837      	ldr	r0, [pc, #220]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005ce0:	f006 f875 	bl	800bdce <HAL_TIM_PWM_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <SM_EnablePwmToAux+0xa6>
	{
		Error_Handler();
 8005cea:	f001 fa8d 	bl	8007208 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cee:	2320      	movs	r3, #32
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	482f      	ldr	r0, [pc, #188]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005cfe:	f007 fb8b 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <SM_EnablePwmToAux+0xc4>
	{
		Error_Handler();
 8005d08:	f001 fa7e 	bl	8007208 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d0c:	2360      	movs	r3, #96	; 0x60
 8005d0e:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d14:	2300      	movs	r3, #0
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d1c:	f107 0320 	add.w	r3, r7, #32
 8005d20:	2200      	movs	r2, #0
 8005d22:	4619      	mov	r1, r3
 8005d24:	4825      	ldr	r0, [pc, #148]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005d26:	f006 fbb3 	bl	800c490 <HAL_TIM_PWM_ConfigChannel>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <SM_EnablePwmToAux+0xec>
	{
		Error_Handler();
 8005d30:	f001 fa6a 	bl	8007208 <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d34:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d40:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d50:	2302      	movs	r3, #2
 8005d52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	4619      	mov	r1, r3
 8005d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d6a:	f004 fc3f 	bl	800a5ec <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d74:	f043 0302 	orr.w	r3, r3, #2
 8005d78:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <SM_EnablePwmToAux+0x17c>)
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	201d      	movs	r0, #29
 8005d8c:	f003 fd01 	bl	8009792 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d90:	201d      	movs	r0, #29
 8005d92:	f003 fd18 	bl	80097c6 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005d96:	2100      	movs	r1, #0
 8005d98:	4808      	ldr	r0, [pc, #32]	; (8005dbc <SM_EnablePwmToAux+0x174>)
 8005d9a:	f006 f879 	bl	800be90 <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8005d9e:	2007      	movs	r0, #7
 8005da0:	f7ff fd76 	bl	8005890 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR1 = 32768;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <SM_EnablePwmToAux+0x178>)
 8005da6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005daa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->ARR = 65535;
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <SM_EnablePwmToAux+0x178>)
 8005dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005db4:	bf00      	nop
 8005db6:	3758      	adds	r7, #88	; 0x58
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20001f1c 	.word	0x20001f1c
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40021000 	.word	0x40021000

08005dc8 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_MspDeInit 0 */

	/* USER CODE END TIM3_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_TIM3_CLK_DISABLE();
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <SM_DisablePwmToAux+0x1c>)
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	4a04      	ldr	r2, [pc, #16]	; (8005de4 <SM_DisablePwmToAux+0x1c>)
 8005dd2:	f023 0302 	bic.w	r3, r3, #2
 8005dd6:	6593      	str	r3, [r2, #88]	; 0x58

	/* TIM3 interrupt Deinit */
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005dd8:	201d      	movs	r0, #29
 8005dda:	f003 fd02 	bl	80097e2 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN TIM3_MspDeInit 1 */

	/* USER CODE END TIM3_MspDeInit 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000

08005de8 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b0b0      	sub	sp, #192	; 0xc0
 8005dec:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8005dee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005df2:	2230      	movs	r2, #48	; 0x30
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f009 f8ae 	bl	800ef58 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	60da      	str	r2, [r3, #12]
 8005e0a:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <SM_EnableDacToAux+0x12c>)
 8005e0e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8005e10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e14:	4618      	mov	r0, r3
 8005e16:	f003 fcfe 	bl	8009816 <HAL_DAC_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <SM_EnableDacToAux+0x3c>
	{
		Error_Handler();
 8005e20:	f001 f9f2 	bl	8007208 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_SignedFormat = DISABLE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005e3e:	2306      	movs	r3, #6
 8005e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005e5c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005e60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e64:	2200      	movs	r2, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f003 febe 	bl	8009be8 <HAL_DAC_ConfigChannel>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <SM_EnableDacToAux+0x8e>
	{
		Error_Handler();
 8005e72:	f001 f9c9 	bl	8007208 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	__HAL_RCC_DAC2_CLK_ENABLE();
 8005e76:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e82:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8e:	4b22      	ldr	r3, [pc, #136]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	4a21      	ldr	r2, [pc, #132]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e9a:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <SM_EnableDacToAux+0x130>)
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ec0:	f004 fb94 	bl	800a5ec <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <SM_EnableDacToAux+0x134>)
 8005ec6:	60bb      	str	r3, [r7, #8]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8005ec8:	2329      	movs	r3, #41	; 0x29
 8005eca:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ecc:	2310      	movs	r3, #16
 8005ece:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005edc:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ee2:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8005ee4:	2320      	movs	r3, #32
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8005eec:	f107 0308 	add.w	r3, r7, #8
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f004 f8af 	bl	800a054 <HAL_DMA_Init>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <SM_EnableDacToAux+0x118>
	{
	  Error_Handler();
 8005efc:	f001 f984 	bl	8007208 <Error_Handler>
	}

	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8005f00:	f107 0308 	add.w	r3, r7, #8
 8005f04:	673b      	str	r3, [r7, #112]	; 0x70
 8005f06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8005f0c:	bf00      	nop
 8005f0e:	37c0      	adds	r7, #192	; 0xc0
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	50000c00 	.word	0x50000c00
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40020030 	.word	0x40020030

08005f20 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f2a:	f004 fce1 	bl	800a8f0 <HAL_GPIO_DeInit>
}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <SM_GetEncoderValue+0x34>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <SM_GetEncoderValue+0x34>)
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	e002      	b.n	8005f5c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <SM_GetEncoderValue+0x34>)
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	b29b      	uxth	r3, r3
	}
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40012c00 	.word	0x40012c00

08005f6c <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <SM_GetOutputInHertz+0x7c>)
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <SM_GetOutputInHertz+0x16>
 8005f7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	e007      	b.n	8005f92 <SM_GetOutputInHertz+0x26>
 8005f82:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <SM_GetOutputInHertz+0x7c>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <SM_GetOutputInHertz+0x7c>)
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <SM_GetOutputInHertz+0x36>
 8005f9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	e007      	b.n	8005fb2 <SM_GetOutputInHertz+0x46>
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <SM_GetOutputInHertz+0x7c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005fb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fbe:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005fec <SM_GetOutputInHertz+0x80>
 8005fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc6:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005ff0 <SM_GetOutputInHertz+0x84>
 8005fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8005fda:	eeb0 0a67 	vmov.f32	s0, s15
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	4d2037a0 	.word	0x4d2037a0
 8005ff0:	42f00000 	.word	0x42f00000

08005ff4 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <SM_ConvertPeriodToHertz+0x16>
 8006006:	2301      	movs	r3, #1
 8006008:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800600a:	887b      	ldrh	r3, [r7, #2]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800603c <SM_ConvertPeriodToHertz+0x48>
 8006026:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800602a:	eef0 7a66 	vmov.f32	s15, s13
}
 800602e:	eeb0 0a67 	vmov.f32	s0, s15
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	4d2037a0 	.word	0x4d2037a0

08006040 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <SM_IsFuncPwmDutyMode+0x14>)
 8006046:	781b      	ldrb	r3, [r3, #0]
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20001e9a 	.word	0x20001e9a

08006058 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f083 0301 	eor.w	r3, r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006068:	701a      	strb	r2, [r3, #0]
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20001e9a 	.word	0x20001e9a

08006078 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <SM_ResetFuncPwmDutyMode+0x14>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]

}
 8006082:	bf00      	nop
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20001e9a 	.word	0x20001e9a

08006090 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <VPP_ResetLastEncoderValue+0x14>)
 8006096:	2200      	movs	r2, #0
 8006098:	801a      	strh	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	20001e9c 	.word	0x20001e9c

080060a8 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80060b2:	79fa      	ldrb	r2, [r7, #7]
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <VPP_ApplyProfileToSignal+0x58>)
 80060be:	4413      	add	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7ff fdaa 	bl	8005c1c <SM_GetOutputChannel>
 80060c8:	4602      	mov	r2, r0
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	7a1b      	ldrb	r3, [r3, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fbdb 	bl	8005890 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8b1b      	ldrh	r3, [r3, #24]
 80060ea:	4618      	mov	r0, r3
 80060ec:	eef0 0a47 	vmov.f32	s1, s14
 80060f0:	eeb0 0a67 	vmov.f32	s0, s15
 80060f4:	f000 f830 	bl	8006158 <_ProcessSignalDataTable>


}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	2000017c 	.word	0x2000017c

08006104 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800610e:	79fa      	ldrb	r2, [r7, #7]
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <VPP_ApplyProfileToAux+0x50>)
 800611a:	4413      	add	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(Aux_CHANNEL)->amp_profile = pNextEncPreset;
 800611e:	2001      	movs	r0, #1
 8006120:	f7ff fd7c 	bl	8005c1c <SM_GetOutputChannel>
 8006124:	4602      	mov	r2, r0
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	ed93 7a05 	vldr	s14, [r3, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8b1b      	ldrh	r3, [r3, #24]
 800613c:	4618      	mov	r0, r3
 800613e:	eef0 0a47 	vmov.f32	s1, s14
 8006142:	eeb0 0a67 	vmov.f32	s0, s15
 8006146:	f000 f88d 	bl	8006264 <_ProcessAuxDataTable>



}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000017c 	.word	0x2000017c

08006158 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af00      	add	r7, sp, #0
 800615e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006162:	edc7 0a02 	vstr	s1, [r7, #8]
 8006166:	4603      	mov	r3, r0
 8006168:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800616a:	2000      	movs	r0, #0
 800616c:	f7ff fd56 	bl	8005c1c <SM_GetOutputChannel>
 8006170:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b06      	cmp	r3, #6
 800617c:	d06b      	beq.n	8006256 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
 8006182:	e00c      	b.n	800619e <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4933      	ldr	r1, [pc, #204]	; (8006260 <_ProcessSignalDataTable+0x108>)
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	3301      	adds	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b77      	cmp	r3, #119	; 0x77
 80061a2:	ddef      	ble.n	8006184 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80061a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80061a8:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061be:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e02e      	b.n	8006226 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <_ProcessSignalDataTable+0x108>)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80061dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e4:	ee17 1a90 	vmov	r1, s15
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <_ProcessSignalDataTable+0x108>)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <_ProcessSignalDataTable+0x108>)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006200:	edd7 7a08 	vldr	s15, [r7, #32]
 8006204:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800620c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 1a90 	vmov	r1, s15
 8006218:	4a11      	ldr	r2, [pc, #68]	; (8006260 <_ProcessSignalDataTable+0x108>)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b77      	cmp	r3, #119	; 0x77
 800622a:	ddcd      	ble.n	80061c8 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800622c:	2300      	movs	r3, #0
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e00e      	b.n	8006250 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006232:	2000      	movs	r0, #0
 8006234:	f7ff fcf2 	bl	8005c1c <SM_GetOutputChannel>
 8006238:	4601      	mov	r1, r0
 800623a:	4a09      	ldr	r2, [pc, #36]	; (8006260 <_ProcessSignalDataTable+0x108>)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3302      	adds	r3, #2
 8006246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	3301      	adds	r3, #1
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b77      	cmp	r3, #119	; 0x77
 8006254:	dded      	ble.n	8006232 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006256:	bf00      	nop
 8006258:	3728      	adds	r7, #40	; 0x28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20002358 	.word	0x20002358

08006264 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	ed87 0a03 	vstr	s0, [r7, #12]
 800626e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006272:	4603      	mov	r3, r0
 8006274:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006276:	2001      	movs	r0, #1
 8006278:	f7ff fcd0 	bl	8005c1c <SM_GetOutputChannel>
 800627c:	4603      	mov	r3, r0
 800627e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b06      	cmp	r3, #6
 8006286:	d059      	beq.n	800633c <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e00f      	b.n	80062ae <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data[i];
 800628e:	2001      	movs	r0, #1
 8006290:	f7ff fcc4 	bl	8005c1c <SM_GetOutputChannel>
 8006294:	4603      	mov	r3, r0
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4933      	ldr	r1, [pc, #204]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2b77      	cmp	r3, #119	; 0x77
 80062b2:	ddec      	ble.n	800628e <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80062b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80062b8:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ce:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e02e      	b.n	8006336 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80062ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f4:	ee17 1a90 	vmov	r1, s15
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006310:	edd7 7a06 	vldr	s15, [r7, #24]
 8006314:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800631c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006324:	ee17 1a90 	vmov	r1, s15
 8006328:	4a11      	ldr	r2, [pc, #68]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	3301      	adds	r3, #1
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b77      	cmp	r3, #119	; 0x77
 800633a:	ddcd      	ble.n	80062d8 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e00e      	b.n	8006360 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(Aux_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006342:	2001      	movs	r0, #1
 8006344:	f7ff fc6a 	bl	8005c1c <SM_GetOutputChannel>
 8006348:	4601      	mov	r1, r0
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <_ProcessAuxDataTable+0x10c>)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3302      	adds	r3, #2
 8006356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	3301      	adds	r3, #1
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b77      	cmp	r3, #119	; 0x77
 8006364:	dded      	ble.n	8006342 <_ProcessAuxDataTable+0xde>
	}
}
 8006366:	bf00      	nop
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20002358 	.word	0x20002358

08006374 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800637e:	2000      	movs	r0, #0
 8006380:	f7ff fc4c 	bl	8005c1c <SM_GetOutputChannel>
 8006384:	4603      	mov	r3, r0
 8006386:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	429a      	cmp	r2, r3
 8006396:	d90c      	bls.n	80063b2 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	3301      	adds	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b61      	cmp	r3, #97	; 0x61
 80063a2:	d901      	bls.n	80063a8 <VPP_MapEncoderPositionToSignalOutput+0x34>
 80063a4:	2361      	movs	r3, #97	; 0x61
 80063a6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fe7c 	bl	80060a8 <VPP_ApplyProfileToSignal>
 80063b0:	e010      	b.n	80063d4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80063b2:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d20b      	bcs.n	80063d4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	3b01      	subs	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b61      	cmp	r3, #97	; 0x61
 80063c6:	d901      	bls.n	80063cc <VPP_MapEncoderPositionToSignalOutput+0x58>
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fe6a 	bl	80060a8 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 80063d4:	4a03      	ldr	r2, [pc, #12]	; (80063e4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	8013      	strh	r3, [r2, #0]

}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20001e9c 	.word	0x20001e9c

080063e8 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 80063f2:	2001      	movs	r0, #1
 80063f4:	f7ff fc12 	bl	8005c1c <SM_GetOutputChannel>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	429a      	cmp	r2, r3
 800640a:	d90c      	bls.n	8006426 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	3301      	adds	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b61      	cmp	r3, #97	; 0x61
 8006416:	d901      	bls.n	800641c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006418:	2361      	movs	r3, #97	; 0x61
 800641a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fe70 	bl	8006104 <VPP_ApplyProfileToAux>
 8006424:	e010      	b.n	8006448 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	3b01      	subs	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b61      	cmp	r3, #97	; 0x61
 800643a:	d901      	bls.n	8006440 <VPP_MapEncoderPositionToAuxOutput+0x58>
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fe5e 	bl	8006104 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8006448:	4a03      	ldr	r2, [pc, #12]	; (8006458 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	8013      	strh	r3, [r2, #0]

}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20001e9c 	.word	0x20001e9c

0800645c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08c      	sub	sp, #48	; 0x30
 8006460:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	2220      	movs	r2, #32
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f008 fd6f 	bl	800ef58 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800647a:	4b32      	ldr	r3, [pc, #200]	; (8006544 <MX_ADC1_Init+0xe8>)
 800647c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006482:	4b30      	ldr	r3, [pc, #192]	; (8006544 <MX_ADC1_Init+0xe8>)
 8006484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800648a:	4b2e      	ldr	r3, [pc, #184]	; (8006544 <MX_ADC1_Init+0xe8>)
 800648c:	2200      	movs	r2, #0
 800648e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006490:	4b2c      	ldr	r3, [pc, #176]	; (8006544 <MX_ADC1_Init+0xe8>)
 8006492:	2200      	movs	r2, #0
 8006494:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006496:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <MX_ADC1_Init+0xe8>)
 8006498:	2200      	movs	r2, #0
 800649a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800649c:	4b29      	ldr	r3, [pc, #164]	; (8006544 <MX_ADC1_Init+0xe8>)
 800649e:	2200      	movs	r2, #0
 80064a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80064a2:	4b28      	ldr	r3, [pc, #160]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064a4:	2204      	movs	r2, #4
 80064a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80064a8:	4b26      	ldr	r3, [pc, #152]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80064ae:	4b25      	ldr	r3, [pc, #148]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80064b4:	4b23      	ldr	r3, [pc, #140]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064c8:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80064d6:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80064de:	4b19      	ldr	r3, [pc, #100]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064e6:	4817      	ldr	r0, [pc, #92]	; (8006544 <MX_ADC1_Init+0xe8>)
 80064e8:	f001 fed8 	bl	800829c <HAL_ADC_Init>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80064f2:	f000 fe89 	bl	8007208 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80064fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064fe:	4619      	mov	r1, r3
 8006500:	4810      	ldr	r0, [pc, #64]	; (8006544 <MX_ADC1_Init+0xe8>)
 8006502:	f002 fc61 	bl	8008dc8 <HAL_ADCEx_MultiModeConfigChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800650c:	f000 fe7c 	bl	8007208 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <MX_ADC1_Init+0xec>)
 8006512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006514:	2306      	movs	r3, #6
 8006516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800651c:	237f      	movs	r3, #127	; 0x7f
 800651e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006520:	2304      	movs	r3, #4
 8006522:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4805      	ldr	r0, [pc, #20]	; (8006544 <MX_ADC1_Init+0xe8>)
 800652e:	f002 f875 	bl	800861c <HAL_ADC_ConfigChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006538:	f000 fe66 	bl	8007208 <Error_Handler>
  }

}
 800653c:	bf00      	nop
 800653e:	3730      	adds	r7, #48	; 0x30
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20002538 	.word	0x20002538
 8006548:	0c900008 	.word	0x0c900008

0800654c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006554:	f107 0314 	add.w	r3, r7, #20
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656c:	d14f      	bne.n	800660e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	4a29      	ldr	r2, [pc, #164]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 8006574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 8006588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <HAL_ADC_MspInit+0xcc>)
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800659e:	2304      	movs	r3, #4
 80065a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a2:	2303      	movs	r3, #3
 80065a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b4:	f004 f81a 	bl	800a5ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80065b8:	4b18      	ldr	r3, [pc, #96]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065ba:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_ADC_MspInit+0xd4>)
 80065bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065c0:	2205      	movs	r2, #5
 80065c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80065d0:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065e8:	2220      	movs	r2, #32
 80065ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80065f2:	480a      	ldr	r0, [pc, #40]	; (800661c <HAL_ADC_MspInit+0xd0>)
 80065f4:	f003 fd2e 	bl	800a054 <HAL_DMA_Init>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80065fe:	f000 fe03 	bl	8007208 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <HAL_ADC_MspInit+0xd0>)
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
 8006608:	4a04      	ldr	r2, [pc, #16]	; (800661c <HAL_ADC_MspInit+0xd0>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800660e:	bf00      	nop
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
 800661c:	200025a4 	.word	0x200025a4
 8006620:	40020008 	.word	0x40020008

08006624 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006628:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <MX_COMP1_Init+0x44>)
 800662a:	4a10      	ldr	r2, [pc, #64]	; (800666c <MX_COMP1_Init+0x48>)
 800662c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <MX_COMP1_Init+0x44>)
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <MX_COMP1_Init+0x44>)
 8006636:	4a0e      	ldr	r2, [pc, #56]	; (8006670 <MX_COMP1_Init+0x4c>)
 8006638:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800663a:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <MX_COMP1_Init+0x44>)
 800663c:	2200      	movs	r2, #0
 800663e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <MX_COMP1_Init+0x44>)
 8006642:	2200      	movs	r2, #0
 8006644:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <MX_COMP1_Init+0x44>)
 8006648:	2200      	movs	r2, #0
 800664a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <MX_COMP1_Init+0x44>)
 800664e:	2200      	movs	r2, #0
 8006650:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006652:	4805      	ldr	r0, [pc, #20]	; (8006668 <MX_COMP1_Init+0x44>)
 8006654:	f002 fe0c 	bl	8009270 <HAL_COMP_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800665e:	f000 fdd3 	bl	8007208 <Error_Handler>
  }

}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20002604 	.word	0x20002604
 800666c:	40010200 	.word	0x40010200
 8006670:	00800030 	.word	0x00800030

08006674 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800667c:	f107 030c 	add.w	r3, r7, #12
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <HAL_COMP_MspInit+0x5c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d118      	bne.n	80066c8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <HAL_COMP_MspInit+0x60>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	4a0e      	ldr	r2, [pc, #56]	; (80066d4 <HAL_COMP_MspInit+0x60>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <HAL_COMP_MspInit+0x60>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80066ae:	2302      	movs	r3, #2
 80066b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066b2:	2303      	movs	r3, #3
 80066b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	4619      	mov	r1, r3
 80066c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066c4:	f003 ff92 	bl	800a5ec <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40010200 	.word	0x40010200
 80066d4:	40021000 	.word	0x40021000

080066d8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08c      	sub	sp, #48	; 0x30
 80066dc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80066de:	463b      	mov	r3, r7
 80066e0:	2230      	movs	r2, #48	; 0x30
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f008 fc37 	bl	800ef58 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80066ea:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <MX_DAC1_Init+0x8c>)
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <MX_DAC1_Init+0x90>)
 80066ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80066f0:	481c      	ldr	r0, [pc, #112]	; (8006764 <MX_DAC1_Init+0x8c>)
 80066f2:	f003 f890 	bl	8009816 <HAL_DAC_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80066fc:	f000 fd84 	bl	8007208 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006704:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006706:	2300      	movs	r3, #0
 8006708:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800670a:	2300      	movs	r3, #0
 800670c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006712:	2306      	movs	r3, #6
 8006714:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800671e:	2301      	movs	r3, #1
 8006720:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006726:	463b      	mov	r3, r7
 8006728:	2200      	movs	r2, #0
 800672a:	4619      	mov	r1, r3
 800672c:	480d      	ldr	r0, [pc, #52]	; (8006764 <MX_DAC1_Init+0x8c>)
 800672e:	f003 fa5b 	bl	8009be8 <HAL_DAC_ConfigChannel>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006738:	f000 fd66 	bl	8007208 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006740:	2301      	movs	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006744:	463b      	mov	r3, r7
 8006746:	2210      	movs	r2, #16
 8006748:	4619      	mov	r1, r3
 800674a:	4806      	ldr	r0, [pc, #24]	; (8006764 <MX_DAC1_Init+0x8c>)
 800674c:	f003 fa4c 	bl	8009be8 <HAL_DAC_ConfigChannel>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006756:	f000 fd57 	bl	8007208 <Error_Handler>
  }

}
 800675a:	bf00      	nop
 800675c:	3730      	adds	r7, #48	; 0x30
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	2000263c 	.word	0x2000263c
 8006768:	50000800 	.word	0x50000800

0800676c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08c      	sub	sp, #48	; 0x30
 8006770:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006772:	463b      	mov	r3, r7
 8006774:	2230      	movs	r2, #48	; 0x30
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f008 fbed 	bl	800ef58 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <MX_DAC2_Init+0x6c>)
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <MX_DAC2_Init+0x70>)
 8006782:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006784:	4814      	ldr	r0, [pc, #80]	; (80067d8 <MX_DAC2_Init+0x6c>)
 8006786:	f003 f846 	bl	8009816 <HAL_DAC_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006790:	f000 fd3a 	bl	8007208 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006798:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800679a:	2300      	movs	r3, #0
 800679c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800679e:	2300      	movs	r3, #0
 80067a0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80067a6:	2306      	movs	r3, #6
 80067a8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80067ba:	463b      	mov	r3, r7
 80067bc:	2200      	movs	r2, #0
 80067be:	4619      	mov	r1, r3
 80067c0:	4805      	ldr	r0, [pc, #20]	; (80067d8 <MX_DAC2_Init+0x6c>)
 80067c2:	f003 fa11 	bl	8009be8 <HAL_DAC_ConfigChannel>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80067cc:	f000 fd1c 	bl	8007208 <Error_Handler>
  }

}
 80067d0:	bf00      	nop
 80067d2:	3730      	adds	r7, #48	; 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20002628 	.word	0x20002628
 80067dc:	50000c00 	.word	0x50000c00

080067e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08c      	sub	sp, #48	; 0x30
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e8:	f107 031c 	add.w	r3, r7, #28
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a56      	ldr	r2, [pc, #344]	; (8006958 <HAL_DAC_MspInit+0x178>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d150      	bne.n	80068a4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006802:	4b56      	ldr	r3, [pc, #344]	; (800695c <HAL_DAC_MspInit+0x17c>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	4a55      	ldr	r2, [pc, #340]	; (800695c <HAL_DAC_MspInit+0x17c>)
 8006808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800680e:	4b53      	ldr	r3, [pc, #332]	; (800695c <HAL_DAC_MspInit+0x17c>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800681a:	4b50      	ldr	r3, [pc, #320]	; (800695c <HAL_DAC_MspInit+0x17c>)
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	4a4f      	ldr	r2, [pc, #316]	; (800695c <HAL_DAC_MspInit+0x17c>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006826:	4b4d      	ldr	r3, [pc, #308]	; (800695c <HAL_DAC_MspInit+0x17c>)
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006832:	2330      	movs	r3, #48	; 0x30
 8006834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006836:	2303      	movs	r3, #3
 8006838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800683e:	f107 031c 	add.w	r3, r7, #28
 8006842:	4619      	mov	r1, r3
 8006844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006848:	f003 fed0 	bl	800a5ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800684c:	4b44      	ldr	r3, [pc, #272]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800684e:	4a45      	ldr	r2, [pc, #276]	; (8006964 <HAL_DAC_MspInit+0x184>)
 8006850:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006852:	4b43      	ldr	r3, [pc, #268]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006854:	2206      	movs	r2, #6
 8006856:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006858:	4b41      	ldr	r3, [pc, #260]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800685a:	2210      	movs	r2, #16
 800685c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800685e:	4b40      	ldr	r3, [pc, #256]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006860:	2200      	movs	r2, #0
 8006862:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006864:	4b3e      	ldr	r3, [pc, #248]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800686a:	4b3d      	ldr	r3, [pc, #244]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006878:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800687a:	4b39      	ldr	r3, [pc, #228]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800687c:	2220      	movs	r2, #32
 800687e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006880:	4b37      	ldr	r3, [pc, #220]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006882:	2200      	movs	r2, #0
 8006884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006886:	4836      	ldr	r0, [pc, #216]	; (8006960 <HAL_DAC_MspInit+0x180>)
 8006888:	f003 fbe4 	bl	800a054 <HAL_DMA_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006892:	f000 fcb9 	bl	8007208 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a31      	ldr	r2, [pc, #196]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	4a30      	ldr	r2, [pc, #192]	; (8006960 <HAL_DAC_MspInit+0x180>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80068a2:	e054      	b.n	800694e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2f      	ldr	r2, [pc, #188]	; (8006968 <HAL_DAC_MspInit+0x188>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d14f      	bne.n	800694e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80068ae:	4b2b      	ldr	r3, [pc, #172]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	4a2a      	ldr	r2, [pc, #168]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c6:	4b25      	ldr	r3, [pc, #148]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ca:	4a24      	ldr	r2, [pc, #144]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <HAL_DAC_MspInit+0x17c>)
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068e2:	2303      	movs	r3, #3
 80068e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ea:	f107 031c 	add.w	r3, r7, #28
 80068ee:	4619      	mov	r1, r3
 80068f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068f4:	f003 fe7a 	bl	800a5ec <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_DAC_MspInit+0x18c>)
 80068fa:	4a1d      	ldr	r2, [pc, #116]	; (8006970 <HAL_DAC_MspInit+0x190>)
 80068fc:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006900:	2229      	movs	r2, #41	; 0x29
 8006902:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006906:	2210      	movs	r2, #16
 8006908:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <HAL_DAC_MspInit+0x18c>)
 800690c:	2200      	movs	r2, #0
 800690e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006924:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006928:	2220      	movs	r2, #32
 800692a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <HAL_DAC_MspInit+0x18c>)
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006934:	f003 fb8e 	bl	800a054 <HAL_DMA_Init>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800693e:	f000 fc63 	bl	8007208 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a09      	ldr	r2, [pc, #36]	; (800696c <HAL_DAC_MspInit+0x18c>)
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <HAL_DAC_MspInit+0x18c>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800694e:	bf00      	nop
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	50000800 	.word	0x50000800
 800695c:	40021000 	.word	0x40021000
 8006960:	20001eb0 	.word	0x20001eb0
 8006964:	4002001c 	.word	0x4002001c
 8006968:	50000c00 	.word	0x50000c00
 800696c:	20002650 	.word	0x20002650
 8006970:	40020030 	.word	0x40020030

08006974 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800697a:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <MX_DMA_Init+0x70>)
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <MX_DMA_Init+0x70>)
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6493      	str	r3, [r2, #72]	; 0x48
 8006986:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <MX_DMA_Init+0x70>)
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <MX_DMA_Init+0x70>)
 8006994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006996:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <MX_DMA_Init+0x70>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6493      	str	r3, [r2, #72]	; 0x48
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <MX_DMA_Init+0x70>)
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2101      	movs	r1, #1
 80069ae:	200b      	movs	r0, #11
 80069b0:	f002 feef 	bl	8009792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80069b4:	200b      	movs	r0, #11
 80069b6:	f002 ff06 	bl	80097c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	200c      	movs	r0, #12
 80069c0:	f002 fee7 	bl	8009792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80069c4:	200c      	movs	r0, #12
 80069c6:	f002 fefe 	bl	80097c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80069ca:	2200      	movs	r2, #0
 80069cc:	2100      	movs	r1, #0
 80069ce:	200d      	movs	r0, #13
 80069d0:	f002 fedf 	bl	8009792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80069d4:	200d      	movs	r0, #13
 80069d6:	f002 fef6 	bl	80097c6 <HAL_NVIC_EnableIRQ>

}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000

080069e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <__NVIC_GetPriorityGrouping+0x18>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	f003 0307 	and.w	r3, r3, #7
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	e000ed00 	.word	0xe000ed00

08006a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	db0b      	blt.n	8006a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	f003 021f 	and.w	r2, r3, #31
 8006a1c:	4907      	ldr	r1, [pc, #28]	; (8006a3c <__NVIC_EnableIRQ+0x38>)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	2001      	movs	r0, #1
 8006a26:	fa00 f202 	lsl.w	r2, r0, r2
 8006a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000e100 	.word	0xe000e100

08006a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db0a      	blt.n	8006a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	490c      	ldr	r1, [pc, #48]	; (8006a8c <__NVIC_SetPriority+0x4c>)
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	0112      	lsls	r2, r2, #4
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	440b      	add	r3, r1
 8006a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a68:	e00a      	b.n	8006a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4908      	ldr	r1, [pc, #32]	; (8006a90 <__NVIC_SetPriority+0x50>)
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	3b04      	subs	r3, #4
 8006a78:	0112      	lsls	r2, r2, #4
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	761a      	strb	r2, [r3, #24]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	e000e100 	.word	0xe000e100
 8006a90:	e000ed00 	.word	0xe000ed00

08006a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	; 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f1c3 0307 	rsb	r3, r3, #7
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf28      	it	cs
 8006ab2:	2304      	movcs	r3, #4
 8006ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d902      	bls.n	8006ac4 <NVIC_EncodePriority+0x30>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3b03      	subs	r3, #3
 8006ac2:	e000      	b.n	8006ac6 <NVIC_EncodePriority+0x32>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	43da      	mvns	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	401a      	ands	r2, r3
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006adc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	43d9      	mvns	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aec:	4313      	orrs	r3, r2
         );
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3724      	adds	r7, #36	; 0x24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006b06:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	3302      	adds	r3, #2
 8006b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	ea02 0103 	and.w	r1, r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	fa93 f3a3 	rbit	r3, r3
 8006b2a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	fab3 f383 	clz	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	4806      	ldr	r0, [pc, #24]	; (8006b58 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	430a      	orrs	r2, r1
 8006b46:	3302      	adds	r3, #2
 8006b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40010000 	.word	0x40010000

08006b5c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	; 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	fa93 f3a3 	rbit	r3, r3
 8006b76:	613b      	str	r3, [r7, #16]
  return result;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	fab3 f383 	clz	r3, r3
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	2103      	movs	r1, #3
 8006b84:	fa01 f303 	lsl.w	r3, r1, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	61bb      	str	r3, [r7, #24]
  return result;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	fab3 f383 	clz	r3, r3
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]
}
 8006bae:	bf00      	nop
 8006bb0:	3724      	adds	r7, #36	; 0x24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b089      	sub	sp, #36	; 0x24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	fa93 f3a3 	rbit	r3, r3
 8006bd4:	613b      	str	r3, [r7, #16]
  return result;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	fab3 f383 	clz	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	2103      	movs	r1, #3
 8006be2:	fa01 f303 	lsl.w	r3, r1, r3
 8006be6:	43db      	mvns	r3, r3
 8006be8:	401a      	ands	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	fa93 f3a3 	rbit	r3, r3
 8006bf4:	61bb      	str	r3, [r7, #24]
  return result;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	fab3 f383 	clz	r3, r3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	fa01 f303 	lsl.w	r3, r1, r3
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	60da      	str	r2, [r3, #12]
}
 8006c0c:	bf00      	nop
 8006c0e:	3724      	adds	r7, #36	; 0x24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c40:	4907      	ldr	r1, [pc, #28]	; (8006c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c52:	68fb      	ldr	r3, [r7, #12]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	40021000 	.word	0x40021000

08006c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006c6a:	f107 031c 	add.w	r3, r7, #28
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	609a      	str	r2, [r3, #8]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	611a      	str	r2, [r3, #16]
 8006c84:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006c86:	2004      	movs	r0, #4
 8006c88:	f7ff ffd4 	bl	8006c34 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006c8c:	2020      	movs	r0, #32
 8006c8e:	f7ff ffd1 	bl	8006c34 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006c92:	2001      	movs	r0, #1
 8006c94:	f7ff ffce 	bl	8006c34 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006c98:	2002      	movs	r0, #2
 8006c9a:	f7ff ffcb 	bl	8006c34 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006c9e:	2108      	movs	r1, #8
 8006ca0:	48d3      	ldr	r0, [pc, #844]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006ca2:	f7ff ffb9 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006ca6:	2108      	movs	r1, #8
 8006ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cac:	f7ff ffb4 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006cb0:	2110      	movs	r1, #16
 8006cb2:	48cf      	ldr	r0, [pc, #828]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006cb4:	f7ff ffb0 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006cb8:	2120      	movs	r1, #32
 8006cba:	48cd      	ldr	r0, [pc, #820]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006cbc:	f7ff ffac 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	48cc      	ldr	r0, [pc, #816]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006cc4:	f7ff ffa8 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ccc:	48c8      	ldr	r0, [pc, #800]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006cce:	f7ff ffa3 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cd6:	48c6      	ldr	r0, [pc, #792]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006cd8:	f7ff ff9e 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	48c5      	ldr	r0, [pc, #788]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006ce0:	f7ff ff9a 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	48c3      	ldr	r0, [pc, #780]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006ce8:	f7ff ff96 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cf0:	48c0      	ldr	r0, [pc, #768]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006cf2:	f7ff ff91 	bl	8006c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006cf6:	49c0      	ldr	r1, [pc, #768]	; (8006ff8 <MX_GPIO_Init+0x394>)
 8006cf8:	2002      	movs	r0, #2
 8006cfa:	f7ff feff 	bl	8006afc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006cfe:	49bf      	ldr	r1, [pc, #764]	; (8006ffc <MX_GPIO_Init+0x398>)
 8006d00:	2002      	movs	r0, #2
 8006d02:	f7ff fefb 	bl	8006afc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006d06:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006d0a:	2005      	movs	r0, #5
 8006d0c:	f7ff fef6 	bl	8006afc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006d10:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006d14:	2005      	movs	r0, #5
 8006d16:	f7ff fef1 	bl	8006afc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006d1a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006d1e:	2002      	movs	r0, #2
 8006d20:	f7ff feec 	bl	8006afc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d28:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d36:	2302      	movs	r3, #2
 8006d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d3c:	f107 031c 	add.w	r3, r7, #28
 8006d40:	4618      	mov	r0, r3
 8006d42:	f006 fe27 	bl	800d994 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d5e:	f107 031c 	add.w	r3, r7, #28
 8006d62:	4618      	mov	r0, r3
 8006d64:	f006 fe16 	bl	800d994 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d7e:	f107 031c 	add.w	r3, r7, #28
 8006d82:	4618      	mov	r0, r3
 8006d84:	f006 fe06 	bl	800d994 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d9e:	f107 031c 	add.w	r3, r7, #28
 8006da2:	4618      	mov	r0, r3
 8006da4:	f006 fdf6 	bl	800d994 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006da8:	2304      	movs	r3, #4
 8006daa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006dbe:	f107 031c 	add.w	r3, r7, #28
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f006 fde6 	bl	800d994 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dce:	4888      	ldr	r0, [pc, #544]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006dd0:	f7ff fef3 	bl	8006bba <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dda:	4885      	ldr	r0, [pc, #532]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006ddc:	f7ff feed 	bl	8006bba <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006de0:	2201      	movs	r2, #1
 8006de2:	2101      	movs	r1, #1
 8006de4:	4886      	ldr	r0, [pc, #536]	; (8007000 <MX_GPIO_Init+0x39c>)
 8006de6:	f7ff fee8 	bl	8006bba <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006dea:	2201      	movs	r2, #1
 8006dec:	2102      	movs	r1, #2
 8006dee:	4884      	ldr	r0, [pc, #528]	; (8007000 <MX_GPIO_Init+0x39c>)
 8006df0:	f7ff fee3 	bl	8006bba <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006df4:	2201      	movs	r2, #1
 8006df6:	2104      	movs	r1, #4
 8006df8:	487d      	ldr	r0, [pc, #500]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006dfa:	f7ff fede 	bl	8006bba <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e04:	487a      	ldr	r0, [pc, #488]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006e06:	f7ff fea9 	bl	8006b5c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e10:	4877      	ldr	r0, [pc, #476]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006e12:	f7ff fea3 	bl	8006b5c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4879      	ldr	r0, [pc, #484]	; (8007000 <MX_GPIO_Init+0x39c>)
 8006e1c:	f7ff fe9e 	bl	8006b5c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006e20:	2200      	movs	r2, #0
 8006e22:	2102      	movs	r1, #2
 8006e24:	4876      	ldr	r0, [pc, #472]	; (8007000 <MX_GPIO_Init+0x39c>)
 8006e26:	f7ff fe99 	bl	8006b5c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	4870      	ldr	r0, [pc, #448]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006e30:	f7ff fe94 	bl	8006b5c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006e34:	2308      	movs	r3, #8
 8006e36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006e44:	2302      	movs	r3, #2
 8006e46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8006e48:	1d3b      	adds	r3, r7, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4868      	ldr	r0, [pc, #416]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006e4e:	f006 ff94 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006e52:	2308      	movs	r3, #8
 8006e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e56:	2301      	movs	r3, #1
 8006e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e6e:	f006 ff84 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006e72:	2310      	movs	r3, #16
 8006e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e76:	2301      	movs	r3, #1
 8006e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006e86:	1d3b      	adds	r3, r7, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4859      	ldr	r0, [pc, #356]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006e8c:	f006 ff75 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006e90:	2320      	movs	r3, #32
 8006e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006ea4:	1d3b      	adds	r3, r7, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4851      	ldr	r0, [pc, #324]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006eaa:	f006 ff66 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006ec2:	1d3b      	adds	r3, r7, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	484b      	ldr	r0, [pc, #300]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006ec8:	f006 ff57 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4842      	ldr	r0, [pc, #264]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006ee8:	f006 ff47 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	483a      	ldr	r0, [pc, #232]	; (8006ff0 <MX_GPIO_Init+0x38c>)
 8006f08:	f006 ff37 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006f10:	2301      	movs	r3, #1
 8006f12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006f14:	2303      	movs	r3, #3
 8006f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4833      	ldr	r0, [pc, #204]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006f26:	f006 ff28 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006f32:	2303      	movs	r3, #3
 8006f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	4619      	mov	r1, r3
 8006f42:	482c      	ldr	r0, [pc, #176]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006f44:	f006 ff19 	bl	800dd7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006f52:	2303      	movs	r3, #3
 8006f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4824      	ldr	r0, [pc, #144]	; (8006ff4 <MX_GPIO_Init+0x390>)
 8006f64:	f006 ff09 	bl	800dd7a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f68:	f7ff fd3e 	bl	80069e8 <__NVIC_GetPriorityGrouping>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd8e 	bl	8006a94 <NVIC_EncodePriority>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	2006      	movs	r0, #6
 8006f7e:	f7ff fd5f 	bl	8006a40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006f82:	2006      	movs	r0, #6
 8006f84:	f7ff fd3e 	bl	8006a04 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f88:	f7ff fd2e 	bl	80069e8 <__NVIC_GetPriorityGrouping>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fd7e 	bl	8006a94 <NVIC_EncodePriority>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	2007      	movs	r0, #7
 8006f9e:	f7ff fd4f 	bl	8006a40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006fa2:	2007      	movs	r0, #7
 8006fa4:	f7ff fd2e 	bl	8006a04 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006fa8:	f7ff fd1e 	bl	80069e8 <__NVIC_GetPriorityGrouping>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fd6e 	bl	8006a94 <NVIC_EncodePriority>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	4619      	mov	r1, r3
 8006fbc:	2008      	movs	r0, #8
 8006fbe:	f7ff fd3f 	bl	8006a40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006fc2:	2008      	movs	r0, #8
 8006fc4:	f7ff fd1e 	bl	8006a04 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006fc8:	f7ff fd0e 	bl	80069e8 <__NVIC_GetPriorityGrouping>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fd5e 	bl	8006a94 <NVIC_EncodePriority>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4619      	mov	r1, r3
 8006fdc:	2028      	movs	r0, #40	; 0x28
 8006fde:	f7ff fd2f 	bl	8006a40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fe2:	2028      	movs	r0, #40	; 0x28
 8006fe4:	f7ff fd0e 	bl	8006a04 <__NVIC_EnableIRQ>

}
 8006fe8:	bf00      	nop
 8006fea:	3728      	adds	r7, #40	; 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	e009      	b.n	8007004 <MX_GPIO_Init+0x3a0>
 8006ff0:	48000800 	.word	0x48000800
 8006ff4:	48000400 	.word	0x48000400
 8006ff8:	0f000003 	.word	0x0f000003
 8006ffc:	f0000003 	.word	0xf0000003
 8007000:	48001400 	.word	0x48001400
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop

08007008 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007014:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d013      	beq.n	8007048 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007020:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007024:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007028:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007030:	e000      	b.n	8007034 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007032:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f9      	beq.n	8007032 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800703e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007048:	687b      	ldr	r3, [r7, #4]
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  int i=0;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e009      	b.n	8007080 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	60ba      	str	r2, [r7, #8]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff ffc7 	bl	8007008 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	3301      	adds	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	dbf1      	blt.n	800706c <_write+0x16>
  return len;
 8007088:	687b      	ldr	r3, [r7, #4]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007098:	f000 feab 	bl	8007df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800709c:	f000 f846 	bl	800712c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070a0:	f7ff fde0 	bl	8006c64 <MX_GPIO_Init>
  MX_DMA_Init();
 80070a4:	f7ff fc66 	bl	8006974 <MX_DMA_Init>
  MX_DAC1_Init();
 80070a8:	f7ff fb16 	bl	80066d8 <MX_DAC1_Init>
  MX_ADC1_Init();
 80070ac:	f7ff f9d6 	bl	800645c <MX_ADC1_Init>
  MX_COMP1_Init();
 80070b0:	f7ff fab8 	bl	8006624 <MX_COMP1_Init>
  MX_TIM2_Init();
 80070b4:	f000 fb86 	bl	80077c4 <MX_TIM2_Init>
  MX_SPI3_Init();
 80070b8:	f000 f8e4 	bl	8007284 <MX_SPI3_Init>
  MX_RNG_Init();
 80070bc:	f000 f8d4 	bl	8007268 <MX_RNG_Init>
  MX_TIM1_Init();
 80070c0:	f000 fb10 	bl	80076e4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80070c4:	f000 fc82 	bl	80079cc <MX_TIM8_Init>
  MX_TIM16_Init();
 80070c8:	f000 fd3a 	bl	8007b40 <MX_TIM16_Init>
  MX_TIM15_Init();
 80070cc:	f000 fce6 	bl	8007a9c <MX_TIM15_Init>
  MX_TIM5_Init();
 80070d0:	f000 fc2e 	bl	8007930 <MX_TIM5_Init>
  MX_TIM3_Init();
 80070d4:	f000 fbde 	bl	8007894 <MX_TIM3_Init>
  MX_DAC2_Init();
 80070d8:	f7ff fb48 	bl	800676c <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80070dc:	f7fe fc8a 	bl	80059f4 <SM_Init>




// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80070e0:	2200      	movs	r2, #0
 80070e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070e6:	480e      	ldr	r0, [pc, #56]	; (8007120 <main+0x8c>)
 80070e8:	f003 fce4 	bl	800aab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80070ec:	2200      	movs	r2, #0
 80070ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070f2:	480b      	ldr	r0, [pc, #44]	; (8007120 <main+0x8c>)
 80070f4:	f003 fcde 	bl	800aab4 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80070f8:	480a      	ldr	r0, [pc, #40]	; (8007124 <main+0x90>)
 80070fa:	f004 fdd5 	bl	800bca8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <main+0x94>)
 8007100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007104:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <main+0x94>)
 8007108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800710e:	f7f9 fe09 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007112:	f7f9 fe15 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007116:	f7fd feb7 	bl	8004e88 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 800711a:	f7fc fdef 	bl	8003cfc <EM_ProcessEvent>
 800711e:	e7fc      	b.n	800711a <main+0x86>
 8007120:	48000800 	.word	0x48000800
 8007124:	200027f8 	.word	0x200027f8
 8007128:	40001000 	.word	0x40001000

0800712c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b0a8      	sub	sp, #160	; 0xa0
 8007130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007132:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007136:	2238      	movs	r2, #56	; 0x38
 8007138:	2100      	movs	r1, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f007 ff0c 	bl	800ef58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007150:	463b      	mov	r3, r7
 8007152:	2254      	movs	r2, #84	; 0x54
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f007 fefe 	bl	800ef58 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800715c:	2000      	movs	r0, #0
 800715e:	f003 fcc1 	bl	800aae4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007162:	2322      	movs	r3, #34	; 0x22
 8007164:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800716a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007170:	2301      	movs	r3, #1
 8007172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007176:	2302      	movs	r3, #2
 8007178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800717c:	2302      	movs	r3, #2
 800717e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007182:	2302      	movs	r3, #2
 8007184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007188:	232a      	movs	r3, #42	; 0x2a
 800718a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800718e:	231e      	movs	r3, #30
 8007190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007194:	2304      	movs	r3, #4
 8007196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800719a:	2302      	movs	r3, #2
 800719c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071a4:	4618      	mov	r0, r3
 80071a6:	f003 fd41 	bl	800ac2c <HAL_RCC_OscConfig>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80071b0:	f000 f82a 	bl	8007208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071b4:	230f      	movs	r3, #15
 80071b6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071b8:	2303      	movs	r3, #3
 80071ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071bc:	2300      	movs	r3, #0
 80071be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80071c0:	2300      	movs	r3, #0
 80071c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071c4:	2300      	movs	r3, #0
 80071c6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80071c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071cc:	2108      	movs	r1, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f004 f844 	bl	800b25c <HAL_RCC_ClockConfig>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80071da:	f000 f815 	bl	8007208 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80071de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80071e4:	2300      	movs	r3, #0
 80071e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80071e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071ee:	463b      	mov	r3, r7
 80071f0:	4618      	mov	r0, r3
 80071f2:	f004 fa23 	bl	800b63c <HAL_RCCEx_PeriphCLKConfig>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80071fc:	f000 f804 	bl	8007208 <Error_Handler>
  }
}
 8007200:	bf00      	nop
 8007202:	37a0      	adds	r7, #160	; 0xa0
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800720c:	bf00      	nop
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f043 0204 	orr.w	r2, r3, #4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <LL_AHB2_GRP1_EnableClock>:
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007244:	4907      	ldr	r1, [pc, #28]	; (8007264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4313      	orrs	r3, r2
 800724a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800724e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4013      	ands	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40021000 	.word	0x40021000

08007268 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800726c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007270:	f7ff ffe2 	bl	8007238 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007274:	4802      	ldr	r0, [pc, #8]	; (8007280 <MX_RNG_Init+0x18>)
 8007276:	f7ff ffce 	bl	8007216 <LL_RNG_Enable>

}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	50060800 	.word	0x50060800

08007284 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007288:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <MX_SPI3_Init+0x74>)
 800728a:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <MX_SPI3_Init+0x78>)
 800728c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800728e:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <MX_SPI3_Init+0x74>)
 8007290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007294:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <MX_SPI3_Init+0x74>)
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800729c:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <MX_SPI3_Init+0x74>)
 800729e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80072a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80072b8:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072ba:	2210      	movs	r2, #16
 80072bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80072be:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072d2:	2207      	movs	r2, #7
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80072d6:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072d8:	2200      	movs	r2, #0
 80072da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072de:	2208      	movs	r2, #8
 80072e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <MX_SPI3_Init+0x74>)
 80072e4:	f004 fbf6 	bl	800bad4 <HAL_SPI_Init>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80072ee:	f7ff ff8b 	bl	8007208 <Error_Handler>
  }

}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200026b0 	.word	0x200026b0
 80072fc:	40003c00 	.word	0x40003c00

08007300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	609a      	str	r2, [r3, #8]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a17      	ldr	r2, [pc, #92]	; (800737c <HAL_SPI_MspInit+0x7c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d128      	bne.n	8007374 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <HAL_SPI_MspInit+0x80>)
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <HAL_SPI_MspInit+0x80>)
 8007328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732c:	6593      	str	r3, [r2, #88]	; 0x58
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <HAL_SPI_MspInit+0x80>)
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800733a:	4b11      	ldr	r3, [pc, #68]	; (8007380 <HAL_SPI_MspInit+0x80>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	4a10      	ldr	r2, [pc, #64]	; (8007380 <HAL_SPI_MspInit+0x80>)
 8007340:	f043 0304 	orr.w	r3, r3, #4
 8007344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <HAL_SPI_MspInit+0x80>)
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007352:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007358:	2302      	movs	r3, #2
 800735a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007360:	2300      	movs	r3, #0
 8007362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007364:	2306      	movs	r3, #6
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007368:	f107 0314 	add.w	r3, r7, #20
 800736c:	4619      	mov	r1, r3
 800736e:	4805      	ldr	r0, [pc, #20]	; (8007384 <HAL_SPI_MspInit+0x84>)
 8007370:	f003 f93c 	bl	800a5ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007374:	bf00      	nop
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40003c00 	.word	0x40003c00
 8007380:	40021000 	.word	0x40021000
 8007384:	48000800 	.word	0x48000800

08007388 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007396:	6093      	str	r3, [r2, #8]
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40007000 	.word	0x40007000

080073a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <HAL_MspInit+0x44>)
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <HAL_MspInit+0x44>)
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	6613      	str	r3, [r2, #96]	; 0x60
 80073ba:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <HAL_MspInit+0x44>)
 80073bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	607b      	str	r3, [r7, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_MspInit+0x44>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	4a08      	ldr	r2, [pc, #32]	; (80073ec <HAL_MspInit+0x44>)
 80073cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6593      	str	r3, [r2, #88]	; 0x58
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_MspInit+0x44>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80073de:	f7ff ffd3 	bl	8007388 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000

080073f0 <LL_EXTI_IsActiveFlag_0_31>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4013      	ands	r3, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d101      	bne.n	800740a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40010400 	.word	0x40010400

0800741c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007424:	4a04      	ldr	r2, [pc, #16]	; (8007438 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6153      	str	r3, [r2, #20]
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40010400 	.word	0x40010400

0800743c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800744a:	b480      	push	{r7}
 800744c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800744e:	e7fe      	b.n	800744e <HardFault_Handler+0x4>

08007450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007454:	e7fe      	b.n	8007454 <MemManage_Handler+0x4>

08007456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007456:	b480      	push	{r7}
 8007458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800745a:	e7fe      	b.n	800745a <BusFault_Handler+0x4>

0800745c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007460:	e7fe      	b.n	8007460 <UsageFault_Handler+0x4>

08007462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007462:	b480      	push	{r7}
 8007464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007466:	bf00      	nop
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800747e:	b480      	push	{r7}
 8007480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007482:	bf00      	nop
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007490:	f000 fd02 	bl	8007e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007494:	bf00      	nop
 8007496:	bd80      	pop	{r7, pc}

08007498 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800749c:	f7fd fdac 	bl	8004ff8 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7ff ffa5 	bl	80073f0 <LL_EXTI_IsActiveFlag_0_31>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80074ac:	2001      	movs	r0, #1
 80074ae:	f7ff ffb5 	bl	800741c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80074b2:	bf00      	nop
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80074ba:	f7fd fdc3 	bl	8005044 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80074be:	2002      	movs	r0, #2
 80074c0:	f7ff ff96 	bl	80073f0 <LL_EXTI_IsActiveFlag_0_31>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80074ca:	2002      	movs	r0, #2
 80074cc:	f7ff ffa6 	bl	800741c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80074d0:	bf00      	nop
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80074d8:	f7fd fdda 	bl	8005090 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80074dc:	2004      	movs	r0, #4
 80074de:	f7ff ff87 	bl	80073f0 <LL_EXTI_IsActiveFlag_0_31>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80074e8:	2004      	movs	r0, #4
 80074ea:	f7ff ff97 	bl	800741c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <DMA1_Channel1_IRQHandler+0x10>)
 80074fa:	f002 ff27 	bl	800a34c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200025a4 	.word	0x200025a4

08007508 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800750c:	4802      	ldr	r0, [pc, #8]	; (8007518 <DMA1_Channel2_IRQHandler+0x10>)
 800750e:	f002 ff1d 	bl	800a34c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20001eb0 	.word	0x20001eb0

0800751c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007520:	4802      	ldr	r0, [pc, #8]	; (800752c <DMA1_Channel3_IRQHandler+0x10>)
 8007522:	f002 ff13 	bl	800a34c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20002650 	.word	0x20002650

08007530 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007534:	f7f9 fc22 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007538:	f7fd fdd0 	bl	80050dc <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800753c:	4803      	ldr	r0, [pc, #12]	; (800754c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800753e:	f004 fe27 	bl	800c190 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007542:	4803      	ldr	r0, [pc, #12]	; (8007550 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007544:	f004 fe24 	bl	800c190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200027f8 	.word	0x200027f8
 8007550:	20002760 	.word	0x20002760

08007554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <TIM3_IRQHandler+0x10>)
 800755a:	f004 fe19 	bl	800c190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20001f1c 	.word	0x20001f1c

08007568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 800756c:	f7fd fcf4 	bl	8004f58 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007570:	f7fd fd1a 	bl	8004fa8 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007574:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007578:	f7ff ff3a 	bl	80073f0 <LL_EXTI_IsActiveFlag_0_31>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007582:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007586:	f7ff ff49 	bl	800741c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800758a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800758e:	f7ff ff2f 	bl	80073f0 <LL_EXTI_IsActiveFlag_0_31>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800759c:	f7ff ff3e 	bl	800741c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80075a0:	bf00      	nop
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80075a8:	f7fd fc7e 	bl	8004ea8 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80075ac:	4802      	ldr	r0, [pc, #8]	; (80075b8 <TIM5_IRQHandler+0x14>)
 80075ae:	f004 fdef 	bl	800c190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200027ac 	.word	0x200027ac

080075bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e00a      	b.n	80075e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075ce:	f3af 8000 	nop.w
 80075d2:	4601      	mov	r1, r0
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	60ba      	str	r2, [r7, #8]
 80075da:	b2ca      	uxtb	r2, r1
 80075dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	3301      	adds	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	dbf0      	blt.n	80075ce <_read+0x12>
	}

return len;
 80075ec:	687b      	ldr	r3, [r7, #4]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
	return -1;
 80075fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800761e:	605a      	str	r2, [r3, #4]
	return 0;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <_isatty>:

int _isatty(int file)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
	return 1;
 8007636:	2301      	movs	r3, #1
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
	return 0;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <_sbrk+0x50>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <_sbrk+0x16>
		heap_end = &end;
 8007670:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <_sbrk+0x50>)
 8007672:	4a10      	ldr	r2, [pc, #64]	; (80076b4 <_sbrk+0x54>)
 8007674:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <_sbrk+0x50>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800767c:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <_sbrk+0x50>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	466a      	mov	r2, sp
 8007686:	4293      	cmp	r3, r2
 8007688:	d907      	bls.n	800769a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800768a:	f007 fc3b 	bl	800ef04 <__errno>
 800768e:	4602      	mov	r2, r0
 8007690:	230c      	movs	r3, #12
 8007692:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007698:	e006      	b.n	80076a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <_sbrk+0x50>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	4a03      	ldr	r2, [pc, #12]	; (80076b0 <_sbrk+0x50>)
 80076a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80076a6:	68fb      	ldr	r3, [r7, #12]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001ea0 	.word	0x20001ea0
 80076b4:	200028e8 	.word	0x200028e8

080076b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <SystemInit+0x28>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c2:	4a07      	ldr	r2, [pc, #28]	; (80076e0 <SystemInit+0x28>)
 80076c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <SystemInit+0x28>)
 80076ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076d2:	609a      	str	r2, [r3, #8]
#endif
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000ed00 	.word	0xe000ed00

080076e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b09a      	sub	sp, #104	; 0x68
 80076e8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80076ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80076ee:	2224      	movs	r2, #36	; 0x24
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f007 fc30 	bl	800ef58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007704:	1d3b      	adds	r3, r7, #4
 8007706:	2234      	movs	r2, #52	; 0x34
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f007 fc24 	bl	800ef58 <memset>

  htim1.Instance = TIM1;
 8007710:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007712:	4a2b      	ldr	r2, [pc, #172]	; (80077c0 <MX_TIM1_Init+0xdc>)
 8007714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007716:	4b29      	ldr	r3, [pc, #164]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007718:	2200      	movs	r2, #0
 800771a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800771c:	4b27      	ldr	r3, [pc, #156]	; (80077bc <MX_TIM1_Init+0xd8>)
 800771e:	2260      	movs	r2, #96	; 0x60
 8007720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800772a:	4b24      	ldr	r3, [pc, #144]	; (80077bc <MX_TIM1_Init+0xd8>)
 800772c:	2200      	movs	r2, #0
 800772e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007730:	4b22      	ldr	r3, [pc, #136]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007732:	2200      	movs	r2, #0
 8007734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007736:	4b21      	ldr	r3, [pc, #132]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800773c:	2302      	movs	r3, #2
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007740:	2300      	movs	r3, #0
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007744:	2301      	movs	r3, #1
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007748:	2300      	movs	r3, #0
 800774a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007750:	2300      	movs	r3, #0
 8007752:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007754:	2301      	movs	r3, #1
 8007756:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007758:	2300      	movs	r3, #0
 800775a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007764:	4619      	mov	r1, r3
 8007766:	4815      	ldr	r0, [pc, #84]	; (80077bc <MX_TIM1_Init+0xd8>)
 8007768:	f004 fc6c 	bl	800c044 <HAL_TIM_Encoder_Init>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007772:	f7ff fd49 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007776:	2320      	movs	r3, #32
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800777e:	2300      	movs	r3, #0
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007786:	4619      	mov	r1, r3
 8007788:	480c      	ldr	r0, [pc, #48]	; (80077bc <MX_TIM1_Init+0xd8>)
 800778a:	f005 fe45 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007794:	f7ff fd38 	bl	8007208 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007798:	2300      	movs	r3, #0
 800779a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800779c:	2300      	movs	r3, #0
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80077a0:	1d3b      	adds	r3, r7, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4805      	ldr	r0, [pc, #20]	; (80077bc <MX_TIM1_Init+0xd8>)
 80077a6:	f005 fecd 	bl	800d544 <HAL_TIMEx_ConfigBreakDeadTime>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80077b0:	f7ff fd2a 	bl	8007208 <Error_Handler>
  }

}
 80077b4:	bf00      	nop
 80077b6:	3768      	adds	r7, #104	; 0x68
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200027f8 	.word	0x200027f8
 80077c0:	40012c00 	.word	0x40012c00

080077c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08c      	sub	sp, #48	; 0x30
 80077c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077ca:	f107 0320 	add.w	r3, r7, #32
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80077d8:	f107 030c 	add.w	r3, r7, #12
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	60da      	str	r2, [r3, #12]
 80077e6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077e8:	463b      	mov	r3, r7
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80077f2:	4b27      	ldr	r3, [pc, #156]	; (8007890 <MX_TIM2_Init+0xcc>)
 80077f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80077fa:	4b25      	ldr	r3, [pc, #148]	; (8007890 <MX_TIM2_Init+0xcc>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007800:	4b23      	ldr	r3, [pc, #140]	; (8007890 <MX_TIM2_Init+0xcc>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007806:	4b22      	ldr	r3, [pc, #136]	; (8007890 <MX_TIM2_Init+0xcc>)
 8007808:	2201      	movs	r2, #1
 800780a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800780c:	4b20      	ldr	r3, [pc, #128]	; (8007890 <MX_TIM2_Init+0xcc>)
 800780e:	2200      	movs	r2, #0
 8007810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007812:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <MX_TIM2_Init+0xcc>)
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007818:	481d      	ldr	r0, [pc, #116]	; (8007890 <MX_TIM2_Init+0xcc>)
 800781a:	f004 f9ed 	bl	800bbf8 <HAL_TIM_Base_Init>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8007824:	f7ff fcf0 	bl	8007208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800782c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800782e:	f107 0320 	add.w	r3, r7, #32
 8007832:	4619      	mov	r1, r3
 8007834:	4816      	ldr	r0, [pc, #88]	; (8007890 <MX_TIM2_Init+0xcc>)
 8007836:	f004 ff3b 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8007840:	f7ff fce2 	bl	8007208 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8007844:	2305      	movs	r3, #5
 8007846:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007848:	2350      	movs	r3, #80	; 0x50
 800784a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8007854:	f107 030c 	add.w	r3, r7, #12
 8007858:	4619      	mov	r1, r3
 800785a:	480d      	ldr	r0, [pc, #52]	; (8007890 <MX_TIM2_Init+0xcc>)
 800785c:	f005 f818 	bl	800c890 <HAL_TIM_SlaveConfigSynchro>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8007866:	f7ff fccf 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800786a:	2320      	movs	r3, #32
 800786c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007872:	463b      	mov	r3, r7
 8007874:	4619      	mov	r1, r3
 8007876:	4806      	ldr	r0, [pc, #24]	; (8007890 <MX_TIM2_Init+0xcc>)
 8007878:	f005 fdce 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8007882:	f7ff fcc1 	bl	8007208 <Error_Handler>
  }

}
 8007886:	bf00      	nop
 8007888:	3730      	adds	r7, #48	; 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20002844 	.word	0x20002844

08007894 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	605a      	str	r2, [r3, #4]
 80078a4:	609a      	str	r2, [r3, #8]
 80078a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80078b2:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <MX_TIM3_Init+0x94>)
 80078b4:	4a1d      	ldr	r2, [pc, #116]	; (800792c <MX_TIM3_Init+0x98>)
 80078b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <MX_TIM3_Init+0x94>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80078be:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <MX_TIM3_Init+0x94>)
 80078c0:	2210      	movs	r2, #16
 80078c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80078c4:	4b18      	ldr	r3, [pc, #96]	; (8007928 <MX_TIM3_Init+0x94>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80078ca:	4b17      	ldr	r3, [pc, #92]	; (8007928 <MX_TIM3_Init+0x94>)
 80078cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <MX_TIM3_Init+0x94>)
 80078d4:	2280      	movs	r2, #128	; 0x80
 80078d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80078d8:	4813      	ldr	r0, [pc, #76]	; (8007928 <MX_TIM3_Init+0x94>)
 80078da:	f004 f98d 	bl	800bbf8 <HAL_TIM_Base_Init>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80078e4:	f7ff fc90 	bl	8007208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80078ee:	f107 0310 	add.w	r3, r7, #16
 80078f2:	4619      	mov	r1, r3
 80078f4:	480c      	ldr	r0, [pc, #48]	; (8007928 <MX_TIM3_Init+0x94>)
 80078f6:	f004 fedb 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007900:	f7ff fc82 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007904:	2320      	movs	r3, #32
 8007906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800790c:	1d3b      	adds	r3, r7, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <MX_TIM3_Init+0x94>)
 8007912:	f005 fd81 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800791c:	f7ff fc74 	bl	8007208 <Error_Handler>
  }

}
 8007920:	bf00      	nop
 8007922:	3720      	adds	r7, #32
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20001f1c 	.word	0x20001f1c
 800792c:	40000400 	.word	0x40000400

08007930 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007936:	f107 0310 	add.w	r3, r7, #16
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	609a      	str	r2, [r3, #8]
 8007942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
 800794c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800794e:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007950:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <MX_TIM5_Init+0x98>)
 8007952:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007954:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800795a:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <MX_TIM5_Init+0x94>)
 800795c:	2200      	movs	r2, #0
 800795e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007960:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007966:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007968:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <MX_TIM5_Init+0x94>)
 800796a:	2200      	movs	r2, #0
 800796c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007970:	2280      	movs	r2, #128	; 0x80
 8007972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007974:	4813      	ldr	r0, [pc, #76]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007976:	f004 f93f 	bl	800bbf8 <HAL_TIM_Base_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007980:	f7ff fc42 	bl	8007208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800798a:	f107 0310 	add.w	r3, r7, #16
 800798e:	4619      	mov	r1, r3
 8007990:	480c      	ldr	r0, [pc, #48]	; (80079c4 <MX_TIM5_Init+0x94>)
 8007992:	f004 fe8d 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800799c:	f7ff fc34 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079a0:	2300      	movs	r3, #0
 80079a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80079a8:	1d3b      	adds	r3, r7, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <MX_TIM5_Init+0x94>)
 80079ae:	f005 fd33 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80079b8:	f7ff fc26 	bl	8007208 <Error_Handler>
  }

}
 80079bc:	bf00      	nop
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200027ac 	.word	0x200027ac
 80079c8:	40000c00 	.word	0x40000c00

080079cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b094      	sub	sp, #80	; 0x50
 80079d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	605a      	str	r2, [r3, #4]
 80079dc:	609a      	str	r2, [r3, #8]
 80079de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80079ec:	463b      	mov	r3, r7
 80079ee:	2234      	movs	r2, #52	; 0x34
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f007 fab0 	bl	800ef58 <memset>

  htim8.Instance = TIM8;
 80079f8:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <MX_TIM8_Init+0xc8>)
 80079fa:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <MX_TIM8_Init+0xcc>)
 80079fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80079fe:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a04:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007a0a:	4b22      	ldr	r3, [pc, #136]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a10:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007a16:	4b1f      	ldr	r3, [pc, #124]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a1e:	2280      	movs	r2, #128	; 0x80
 8007a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007a22:	481c      	ldr	r0, [pc, #112]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a24:	f004 f8e8 	bl	800bbf8 <HAL_TIM_Base_Init>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007a2e:	f7ff fbeb 	bl	8007208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a36:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4815      	ldr	r0, [pc, #84]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a40:	f004 fe36 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007a4a:	f7ff fbdd 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a4e:	2320      	movs	r3, #32
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a5e:	4619      	mov	r1, r3
 8007a60:	480c      	ldr	r0, [pc, #48]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a62:	f005 fcd9 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007a6c:	f7ff fbcc 	bl	8007208 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007a78:	463b      	mov	r3, r7
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4805      	ldr	r0, [pc, #20]	; (8007a94 <MX_TIM8_Init+0xc8>)
 8007a7e:	f005 fd61 	bl	800d544 <HAL_TIMEx_ConfigBreakDeadTime>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007a88:	f7ff fbbe 	bl	8007208 <Error_Handler>
  }

}
 8007a8c:	bf00      	nop
 8007a8e:	3750      	adds	r7, #80	; 0x50
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20002714 	.word	0x20002714
 8007a98:	40013400 	.word	0x40013400

08007a9c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aa2:	f107 0310 	add.w	r3, r7, #16
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	605a      	str	r2, [r3, #4]
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	605a      	str	r2, [r3, #4]
 8007ab8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007aba:	4b1f      	ldr	r3, [pc, #124]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <MX_TIM15_Init+0xa0>)
 8007abe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ac6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007ace:	4b1a      	ldr	r3, [pc, #104]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ad4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007adc:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007ae8:	4813      	ldr	r0, [pc, #76]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007aea:	f004 f885 	bl	800bbf8 <HAL_TIM_Base_Init>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007af4:	f7ff fb88 	bl	8007208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007afe:	f107 0310 	add.w	r3, r7, #16
 8007b02:	4619      	mov	r1, r3
 8007b04:	480c      	ldr	r0, [pc, #48]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007b06:	f004 fdd3 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007b10:	f7ff fb7a 	bl	8007208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b14:	2300      	movs	r3, #0
 8007b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <MX_TIM15_Init+0x9c>)
 8007b22:	f005 fc79 	bl	800d418 <HAL_TIMEx_MasterConfigSynchronization>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007b2c:	f7ff fb6c 	bl	8007208 <Error_Handler>
  }

}
 8007b30:	bf00      	nop
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20002760 	.word	0x20002760
 8007b3c:	40014000 	.word	0x40014000

08007b40 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b46:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <MX_TIM16_Init+0x4c>)
 8007b48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b50:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b52:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007b58:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007b66:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <MX_TIM16_Init+0x48>)
 8007b74:	f004 f840 	bl	800bbf8 <HAL_TIM_Base_Init>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007b7e:	f7ff fb43 	bl	8007208 <Error_Handler>
  }

}
 8007b82:	bf00      	nop
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20002890 	.word	0x20002890
 8007b8c:	40014400 	.word	0x40014400

08007b90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	60da      	str	r2, [r3, #12]
 8007ba6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <HAL_TIM_Encoder_MspInit+0x8c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d12f      	bne.n	8007c12 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007bb2:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	4a1a      	ldr	r2, [pc, #104]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8007bbe:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bca:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bce:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bd0:	f043 0304 	orr.w	r3, r3, #4
 8007bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <HAL_TIM_Encoder_MspInit+0x90>)
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007be2:	2303      	movs	r3, #3
 8007be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be6:	2302      	movs	r3, #2
 8007be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bf6:	f107 0314 	add.w	r3, r7, #20
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4809      	ldr	r0, [pc, #36]	; (8007c24 <HAL_TIM_Encoder_MspInit+0x94>)
 8007bfe:	f002 fcf5 	bl	800a5ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007c02:	2200      	movs	r2, #0
 8007c04:	2100      	movs	r1, #0
 8007c06:	2018      	movs	r0, #24
 8007c08:	f001 fdc3 	bl	8009792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007c0c:	2018      	movs	r0, #24
 8007c0e:	f001 fdda 	bl	80097c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007c12:	bf00      	nop
 8007c14:	3728      	adds	r7, #40	; 0x28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40012c00 	.word	0x40012c00
 8007c20:	40021000 	.word	0x40021000
 8007c24:	48000800 	.word	0x48000800

08007c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08e      	sub	sp, #56	; 0x38
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c48:	d129      	bne.n	8007c9e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	4a4e      	ldr	r2, [pc, #312]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6593      	str	r3, [r2, #88]	; 0x58
 8007c56:	4b4c      	ldr	r3, [pc, #304]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	623b      	str	r3, [r7, #32]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c62:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c66:	4a48      	ldr	r2, [pc, #288]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c6e:	4b46      	ldr	r3, [pc, #280]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c86:	2300      	movs	r3, #0
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c92:	4619      	mov	r1, r3
 8007c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c98:	f002 fca8 	bl	800a5ec <HAL_GPIO_Init>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007c9c:	e070      	b.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a3a      	ldr	r2, [pc, #232]	; (8007d8c <HAL_TIM_Base_MspInit+0x164>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d114      	bne.n	8007cd2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ca8:	4b37      	ldr	r3, [pc, #220]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cac:	4a36      	ldr	r2, [pc, #216]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007cb4:	4b34      	ldr	r3, [pc, #208]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	201d      	movs	r0, #29
 8007cc6:	f001 fd64 	bl	8009792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007cca:	201d      	movs	r0, #29
 8007ccc:	f001 fd7b 	bl	80097c6 <HAL_NVIC_EnableIRQ>
}
 8007cd0:	e056      	b.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a2e      	ldr	r2, [pc, #184]	; (8007d90 <HAL_TIM_Base_MspInit+0x168>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d114      	bne.n	8007d06 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007cdc:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce0:	4a29      	ldr	r2, [pc, #164]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007ce2:	f043 0308 	orr.w	r3, r3, #8
 8007ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ce8:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	2032      	movs	r0, #50	; 0x32
 8007cfa:	f001 fd4a 	bl	8009792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007cfe:	2032      	movs	r0, #50	; 0x32
 8007d00:	f001 fd61 	bl	80097c6 <HAL_NVIC_EnableIRQ>
}
 8007d04:	e03c      	b.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <HAL_TIM_Base_MspInit+0x16c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10c      	bne.n	8007d2a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d14:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	693b      	ldr	r3, [r7, #16]
}
 8007d28:	e02a      	b.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a1a      	ldr	r2, [pc, #104]	; (8007d98 <HAL_TIM_Base_MspInit+0x170>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d114      	bne.n	8007d5e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2100      	movs	r1, #0
 8007d50:	2018      	movs	r0, #24
 8007d52:	f001 fd1e 	bl	8009792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007d56:	2018      	movs	r0, #24
 8007d58:	f001 fd35 	bl	80097c6 <HAL_NVIC_EnableIRQ>
}
 8007d5c:	e010      	b.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a0e      	ldr	r2, [pc, #56]	; (8007d9c <HAL_TIM_Base_MspInit+0x174>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10b      	bne.n	8007d80 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6c:	4a06      	ldr	r2, [pc, #24]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d72:	6613      	str	r3, [r2, #96]	; 0x60
 8007d74:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <HAL_TIM_Base_MspInit+0x160>)
 8007d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
}
 8007d80:	bf00      	nop
 8007d82:	3738      	adds	r7, #56	; 0x38
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40013400 	.word	0x40013400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400

08007da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007da0:	480d      	ldr	r0, [pc, #52]	; (8007dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007da2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007da4:	480d      	ldr	r0, [pc, #52]	; (8007ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8007da6:	490e      	ldr	r1, [pc, #56]	; (8007de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007da8:	4a0e      	ldr	r2, [pc, #56]	; (8007de4 <LoopForever+0xe>)
  movs r3, #0
 8007daa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007dac:	e002      	b.n	8007db4 <LoopCopyDataInit>

08007dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007db2:	3304      	adds	r3, #4

08007db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007db8:	d3f9      	bcc.n	8007dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007dba:	4a0b      	ldr	r2, [pc, #44]	; (8007de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007dbc:	4c0b      	ldr	r4, [pc, #44]	; (8007dec <LoopForever+0x16>)
  movs r3, #0
 8007dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007dc0:	e001      	b.n	8007dc6 <LoopFillZerobss>

08007dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007dc4:	3204      	adds	r2, #4

08007dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dc8:	d3fb      	bcc.n	8007dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007dca:	f7ff fc75 	bl	80076b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dce:	f007 f89f 	bl	800ef10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007dd2:	f7ff f95f 	bl	8007094 <main>

08007dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8007dd6:	e7fe      	b.n	8007dd6 <LoopForever>
  ldr   r0, =_estack
 8007dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007de0:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8007de4:	08014280 	.word	0x08014280
  ldr r2, =_sbss
 8007de8:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8007dec:	200028e4 	.word	0x200028e4

08007df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007df0:	e7fe      	b.n	8007df0 <ADC1_2_IRQHandler>

08007df2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dfc:	2003      	movs	r0, #3
 8007dfe:	f001 fcbd 	bl	800977c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007e02:	2000      	movs	r0, #0
 8007e04:	f000 f80e 	bl	8007e24 <HAL_InitTick>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	71fb      	strb	r3, [r7, #7]
 8007e12:	e001      	b.n	8007e18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007e14:	f7ff fac8 	bl	80073a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007e18:	79fb      	ldrb	r3, [r7, #7]

}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007e30:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <HAL_InitTick+0x68>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d022      	beq.n	8007e7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <HAL_InitTick+0x6c>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <HAL_InitTick+0x68>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fcd6 	bl	80097fe <HAL_SYSTICK_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10f      	bne.n	8007e78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b0f      	cmp	r3, #15
 8007e5c:	d809      	bhi.n	8007e72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e66:	f001 fc94 	bl	8009792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <HAL_InitTick+0x70>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e007      	b.n	8007e82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	73fb      	strb	r3, [r7, #15]
 8007e76:	e004      	b.n	8007e82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
 8007e7c:	e001      	b.n	8007e82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000c3c 	.word	0x20000c3c
 8007e90:	20000c34 	.word	0x20000c34
 8007e94:	20000c38 	.word	0x20000c38

08007e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <HAL_IncTick+0x1c>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_IncTick+0x20>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <HAL_IncTick+0x1c>)
 8007ea8:	6013      	str	r3, [r2, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	200028dc 	.word	0x200028dc
 8007eb8:	20000c3c 	.word	0x20000c3c

08007ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <HAL_GetTick+0x14>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	200028dc 	.word	0x200028dc

08007ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007edc:	f7ff ffee 	bl	8007ebc <HAL_GetTick>
 8007ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eec:	d004      	beq.n	8007ef8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <HAL_Delay+0x40>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007ef8:	bf00      	nop
 8007efa:	f7ff ffdf 	bl	8007ebc <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d8f7      	bhi.n	8007efa <HAL_Delay+0x26>
  {
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000c3c 	.word	0x20000c3c

08007f18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	609a      	str	r2, [r3, #8]
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	609a      	str	r2, [r3, #8]
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007f80:	b490      	push	{r4, r7}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3360      	adds	r3, #96	; 0x60
 8007f92:	461a      	mov	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	4b08      	ldr	r3, [pc, #32]	; (8007fc0 <LL_ADC_SetOffset+0x40>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc90      	pop	{r4, r7}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	03fff000 	.word	0x03fff000

08007fc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007fc4:	b490      	push	{r4, r7}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3360      	adds	r3, #96	; 0x60
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc90      	pop	{r4, r7}
 8007fea:	4770      	bx	lr

08007fec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007fec:	b490      	push	{r4, r7}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3360      	adds	r3, #96	; 0x60
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4313      	orrs	r3, r2
 8008010:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bc90      	pop	{r4, r7}
 800801a:	4770      	bx	lr

0800801c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800801c:	b490      	push	{r4, r7}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3360      	adds	r3, #96	; 0x60
 800802c:	461a      	mov	r2, r3
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4313      	orrs	r3, r2
 8008040:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bc90      	pop	{r4, r7}
 800804a:	4770      	bx	lr

0800804c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800804c:	b490      	push	{r4, r7}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3360      	adds	r3, #96	; 0x60
 800805c:	461a      	mov	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4313      	orrs	r3, r2
 8008070:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bc90      	pop	{r4, r7}
 800807a:	4770      	bx	lr

0800807c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	615a      	str	r2, [r3, #20]
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80080a2:	b490      	push	{r4, r7}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	461a      	mov	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	f003 030c 	and.w	r3, r3, #12
 80080be:	4413      	add	r3, r2
 80080c0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f003 031f 	and.w	r3, r3, #31
 80080ca:	211f      	movs	r1, #31
 80080cc:	fa01 f303 	lsl.w	r3, r1, r3
 80080d0:	43db      	mvns	r3, r3
 80080d2:	401a      	ands	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	0e9b      	lsrs	r3, r3, #26
 80080d8:	f003 011f 	and.w	r1, r3, #31
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	fa01 f303 	lsl.w	r3, r1, r3
 80080e6:	4313      	orrs	r3, r2
 80080e8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc90      	pop	{r4, r7}
 80080f2:	4770      	bx	lr

080080f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80080f4:	b490      	push	{r4, r7}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3314      	adds	r3, #20
 8008104:	461a      	mov	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	0e5b      	lsrs	r3, r3, #25
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2107      	movs	r1, #7
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	401a      	ands	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bc90      	pop	{r4, r7}
 8008142:	4770      	bx	lr

08008144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800815c:	43db      	mvns	r3, r3
 800815e:	401a      	ands	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0318 	and.w	r3, r3, #24
 8008166:	4908      	ldr	r1, [pc, #32]	; (8008188 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008168:	40d9      	lsrs	r1, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	400b      	ands	r3, r1
 800816e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008172:	431a      	orrs	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	0007ffff 	.word	0x0007ffff

0800818c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800819c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6093      	str	r3, [r2, #8]
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c4:	d101      	bne.n	80081ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80081e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80081ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008214:	d101      	bne.n	800821a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <LL_ADC_IsEnabled+0x18>
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <LL_ADC_IsEnabled+0x1a>
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b04      	cmp	r3, #4
 8008260:	d101      	bne.n	8008266 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b08      	cmp	r3, #8
 8008286:	d101      	bne.n	800828c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800829c:	b590      	push	{r4, r7, lr}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e1ad      	b.n	8008612 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe f941 	bl	800654c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f7ff ff67 	bl	80081b0 <LL_ADC_IsDeepPowerDownEnabled>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff4d 	bl	800818c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff ff82 	bl	8008200 <LL_ADC_IsInternalRegulatorEnabled>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d113      	bne.n	800832a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff ff66 	bl	80081d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800830c:	4b9e      	ldr	r3, [pc, #632]	; (8008588 <HAL_ADC_Init+0x2ec>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	099b      	lsrs	r3, r3, #6
 8008312:	4a9e      	ldr	r2, [pc, #632]	; (800858c <HAL_ADC_Init+0x2f0>)
 8008314:	fba2 2303 	umull	r2, r3, r2, r3
 8008318:	099b      	lsrs	r3, r3, #6
 800831a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800831c:	e002      	b.n	8008324 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	3b01      	subs	r3, #1
 8008322:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f9      	bne.n	800831e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff ff66 	bl	8008200 <LL_ADC_IsInternalRegulatorEnabled>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10d      	bne.n	8008356 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	f043 0210 	orr.w	r2, r3, #16
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834a:	f043 0201 	orr.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff ff77 	bl	800824e <LL_ADC_REG_IsConversionOngoing>
 8008360:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 8148 	bne.w	8008600 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 8144 	bne.w	8008600 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008380:	f043 0202 	orr.w	r2, r3, #2
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ff4b 	bl	8008228 <LL_ADC_IsEnabled>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d141      	bne.n	800841c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a0:	d004      	beq.n	80083ac <HAL_ADC_Init+0x110>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a7a      	ldr	r2, [pc, #488]	; (8008590 <HAL_ADC_Init+0x2f4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10f      	bne.n	80083cc <HAL_ADC_Init+0x130>
 80083ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80083b0:	f7ff ff3a 	bl	8008228 <LL_ADC_IsEnabled>
 80083b4:	4604      	mov	r4, r0
 80083b6:	4876      	ldr	r0, [pc, #472]	; (8008590 <HAL_ADC_Init+0x2f4>)
 80083b8:	f7ff ff36 	bl	8008228 <LL_ADC_IsEnabled>
 80083bc:	4603      	mov	r3, r0
 80083be:	4323      	orrs	r3, r4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	e012      	b.n	80083f2 <HAL_ADC_Init+0x156>
 80083cc:	4871      	ldr	r0, [pc, #452]	; (8008594 <HAL_ADC_Init+0x2f8>)
 80083ce:	f7ff ff2b 	bl	8008228 <LL_ADC_IsEnabled>
 80083d2:	4604      	mov	r4, r0
 80083d4:	4870      	ldr	r0, [pc, #448]	; (8008598 <HAL_ADC_Init+0x2fc>)
 80083d6:	f7ff ff27 	bl	8008228 <LL_ADC_IsEnabled>
 80083da:	4603      	mov	r3, r0
 80083dc:	431c      	orrs	r4, r3
 80083de:	486f      	ldr	r0, [pc, #444]	; (800859c <HAL_ADC_Init+0x300>)
 80083e0:	f7ff ff22 	bl	8008228 <LL_ADC_IsEnabled>
 80083e4:	4603      	mov	r3, r0
 80083e6:	4323      	orrs	r3, r4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083fe:	d004      	beq.n	800840a <HAL_ADC_Init+0x16e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a62      	ldr	r2, [pc, #392]	; (8008590 <HAL_ADC_Init+0x2f4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d101      	bne.n	800840e <HAL_ADC_Init+0x172>
 800840a:	4a65      	ldr	r2, [pc, #404]	; (80085a0 <HAL_ADC_Init+0x304>)
 800840c:	e000      	b.n	8008410 <HAL_ADC_Init+0x174>
 800840e:	4a65      	ldr	r2, [pc, #404]	; (80085a4 <HAL_ADC_Init+0x308>)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7ff fd7e 	bl	8007f18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7f5b      	ldrb	r3, [r3, #29]
 8008420:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008426:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800842c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008432:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800843a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800843c:	4313      	orrs	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008446:	2b01      	cmp	r3, #1
 8008448:	d106      	bne.n	8008458 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	3b01      	subs	r3, #1
 8008450:	045b      	lsls	r3, r3, #17
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	4313      	orrs	r3, r2
 8008456:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4313      	orrs	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	4b4b      	ldr	r3, [pc, #300]	; (80085a8 <HAL_ADC_Init+0x30c>)
 800847c:	4013      	ands	r3, r2
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	69b9      	ldr	r1, [r7, #24]
 8008484:	430b      	orrs	r3, r1
 8008486:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fed3 	bl	800824e <LL_ADC_REG_IsConversionOngoing>
 80084a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fee0 	bl	8008274 <LL_ADC_INJ_IsConversionOngoing>
 80084b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d17f      	bne.n	80085bc <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d17c      	bne.n	80085bc <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80084c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80084d0:	4313      	orrs	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084de:	f023 0302 	bic.w	r3, r3, #2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	69b9      	ldr	r1, [r7, #24]
 80084e8:	430b      	orrs	r3, r1
 80084ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d017      	beq.n	8008524 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008502:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800850c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6911      	ldr	r1, [r2, #16]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	430b      	orrs	r3, r1
 800851e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008522:	e013      	b.n	800854c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008532:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008548:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008552:	2b01      	cmp	r3, #1
 8008554:	d12a      	bne.n	80085ac <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008560:	f023 0304 	bic.w	r3, r3, #4
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800856c:	4311      	orrs	r1, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008572:	4311      	orrs	r1, r2
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008578:	430a      	orrs	r2, r1
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0201 	orr.w	r2, r2, #1
 8008584:	611a      	str	r2, [r3, #16]
 8008586:	e019      	b.n	80085bc <HAL_ADC_Init+0x320>
 8008588:	20000c34 	.word	0x20000c34
 800858c:	053e2d63 	.word	0x053e2d63
 8008590:	50000100 	.word	0x50000100
 8008594:	50000400 	.word	0x50000400
 8008598:	50000500 	.word	0x50000500
 800859c:	50000600 	.word	0x50000600
 80085a0:	50000300 	.word	0x50000300
 80085a4:	50000700 	.word	0x50000700
 80085a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0201 	bic.w	r2, r2, #1
 80085ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10c      	bne.n	80085de <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f023 010f 	bic.w	r1, r3, #15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	1e5a      	subs	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	631a      	str	r2, [r3, #48]	; 0x30
 80085dc:	e007      	b.n	80085ee <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 020f 	bic.w	r2, r2, #15
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	f043 0201 	orr.w	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80085fe:	e007      	b.n	8008610 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008604:	f043 0210 	orr.w	r2, r3, #16
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008610:	7ffb      	ldrb	r3, [r7, #31]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3724      	adds	r7, #36	; 0x24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd90      	pop	{r4, r7, pc}
 800861a:	bf00      	nop

0800861c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b0a6      	sub	sp, #152	; 0x98
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_ADC_ConfigChannel+0x22>
 800863a:	2302      	movs	r3, #2
 800863c:	e38e      	b.n	8008d5c <HAL_ADC_ConfigChannel+0x740>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fdff 	bl	800824e <LL_ADC_REG_IsConversionOngoing>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 836f 	bne.w	8008d36 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	6859      	ldr	r1, [r3, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	f7ff fd1c 	bl	80080a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fded 	bl	800824e <LL_ADC_REG_IsConversionOngoing>
 8008674:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff fdf9 	bl	8008274 <LL_ADC_INJ_IsConversionOngoing>
 8008682:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 817b 	bne.w	8008986 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008694:	2b00      	cmp	r3, #0
 8008696:	f040 8176 	bne.w	8008986 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a2:	d10f      	bne.n	80086c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2200      	movs	r2, #0
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7ff fd20 	bl	80080f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fcdd 	bl	800807c <LL_ADC_SetSamplingTimeCommonConfig>
 80086c2:	e00e      	b.n	80086e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6819      	ldr	r1, [r3, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	461a      	mov	r2, r3
 80086d2:	f7ff fd0f 	bl	80080f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fccd 	bl	800807c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	08db      	lsrs	r3, r3, #3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	2b04      	cmp	r3, #4
 8008702:	d022      	beq.n	800874a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6919      	ldr	r1, [r3, #16]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008714:	f7ff fc34 	bl	8007f80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6919      	ldr	r1, [r3, #16]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	461a      	mov	r2, r3
 8008726:	f7ff fc79 	bl	800801c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6919      	ldr	r1, [r3, #16]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	7f1b      	ldrb	r3, [r3, #28]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d102      	bne.n	8008740 <HAL_ADC_ConfigChannel+0x124>
 800873a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800873e:	e000      	b.n	8008742 <HAL_ADC_ConfigChannel+0x126>
 8008740:	2300      	movs	r3, #0
 8008742:	461a      	mov	r2, r3
 8008744:	f7ff fc82 	bl	800804c <LL_ADC_SetOffsetSaturation>
 8008748:	e11d      	b.n	8008986 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fc37 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008756:	4603      	mov	r3, r0
 8008758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10a      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x15a>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2100      	movs	r1, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fc2c 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 800876c:	4603      	mov	r3, r0
 800876e:	0e9b      	lsrs	r3, r3, #26
 8008770:	f003 021f 	and.w	r2, r3, #31
 8008774:	e012      	b.n	800879c <HAL_ADC_ConfigChannel+0x180>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2100      	movs	r1, #0
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff fc21 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008782:	4603      	mov	r3, r0
 8008784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800878c:	fa93 f3a3 	rbit	r3, r3
 8008790:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008794:	fab3 f383 	clz	r3, r3
 8008798:	b2db      	uxtb	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d105      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x198>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	0e9b      	lsrs	r3, r3, #26
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	e00a      	b.n	80087ca <HAL_ADC_ConfigChannel+0x1ae>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087bc:	fa93 f3a3 	rbit	r3, r3
 80087c0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80087c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087c4:	fab3 f383 	clz	r3, r3
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d106      	bne.n	80087dc <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fc08 	bl	8007fec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2101      	movs	r1, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fbee 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 80087e8:	4603      	mov	r3, r0
 80087ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <HAL_ADC_ConfigChannel+0x1ec>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2101      	movs	r1, #1
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fbe3 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 80087fe:	4603      	mov	r3, r0
 8008800:	0e9b      	lsrs	r3, r3, #26
 8008802:	f003 021f 	and.w	r2, r3, #31
 8008806:	e010      	b.n	800882a <HAL_ADC_ConfigChannel+0x20e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fbd8 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008814:	4603      	mov	r3, r0
 8008816:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800881a:	fa93 f3a3 	rbit	r3, r3
 800881e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008822:	fab3 f383 	clz	r3, r3
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_ADC_ConfigChannel+0x226>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	0e9b      	lsrs	r3, r3, #26
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	e00a      	b.n	8008858 <HAL_ADC_ConfigChannel+0x23c>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800884a:	fa93 f3a3 	rbit	r3, r3
 800884e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008852:	fab3 f383 	clz	r3, r3
 8008856:	b2db      	uxtb	r3, r3
 8008858:	429a      	cmp	r2, r3
 800885a:	d106      	bne.n	800886a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2200      	movs	r2, #0
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fbc1 	bl	8007fec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2102      	movs	r1, #2
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fba7 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008876:	4603      	mov	r3, r0
 8008878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <HAL_ADC_ConfigChannel+0x27a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2102      	movs	r1, #2
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fb9c 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 800888c:	4603      	mov	r3, r0
 800888e:	0e9b      	lsrs	r3, r3, #26
 8008890:	f003 021f 	and.w	r2, r3, #31
 8008894:	e010      	b.n	80088b8 <HAL_ADC_ConfigChannel+0x29c>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2102      	movs	r1, #2
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fb91 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 80088a2:	4603      	mov	r3, r0
 80088a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088a8:	fa93 f3a3 	rbit	r3, r3
 80088ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80088ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b0:	fab3 f383 	clz	r3, r3
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <HAL_ADC_ConfigChannel+0x2b4>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	0e9b      	lsrs	r3, r3, #26
 80088ca:	f003 031f 	and.w	r3, r3, #31
 80088ce:	e00a      	b.n	80088e6 <HAL_ADC_ConfigChannel+0x2ca>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d8:	fa93 f3a3 	rbit	r3, r3
 80088dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80088de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e0:	fab3 f383 	clz	r3, r3
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d106      	bne.n	80088f8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2200      	movs	r2, #0
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fb7a 	bl	8007fec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2103      	movs	r1, #3
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fb60 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008904:	4603      	mov	r3, r0
 8008906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <HAL_ADC_ConfigChannel+0x308>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2103      	movs	r1, #3
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fb55 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 800891a:	4603      	mov	r3, r0
 800891c:	0e9b      	lsrs	r3, r3, #26
 800891e:	f003 021f 	and.w	r2, r3, #31
 8008922:	e010      	b.n	8008946 <HAL_ADC_ConfigChannel+0x32a>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2103      	movs	r1, #3
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fb4a 	bl	8007fc4 <LL_ADC_GetOffsetChannel>
 8008930:	4603      	mov	r3, r0
 8008932:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008936:	fa93 f3a3 	rbit	r3, r3
 800893a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800893c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893e:	fab3 f383 	clz	r3, r3
 8008942:	b2db      	uxtb	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <HAL_ADC_ConfigChannel+0x342>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	0e9b      	lsrs	r3, r3, #26
 8008958:	f003 031f 	and.w	r3, r3, #31
 800895c:	e00a      	b.n	8008974 <HAL_ADC_ConfigChannel+0x358>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008966:	fa93 f3a3 	rbit	r3, r3
 800896a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800896c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896e:	fab3 f383 	clz	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	429a      	cmp	r2, r3
 8008976:	d106      	bne.n	8008986 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	2103      	movs	r1, #3
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fb33 	bl	8007fec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fc4c 	bl	8008228 <LL_ADC_IsEnabled>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 810c 	bne.w	8008bb0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f7ff fbcd 	bl	8008144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	4aaf      	ldr	r2, [pc, #700]	; (8008c6c <HAL_ADC_ConfigChannel+0x650>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f040 80fd 	bne.w	8008bb0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <HAL_ADC_ConfigChannel+0x3c2>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	0e9b      	lsrs	r3, r3, #26
 80089cc:	3301      	adds	r3, #1
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2b09      	cmp	r3, #9
 80089d4:	bf94      	ite	ls
 80089d6:	2301      	movls	r3, #1
 80089d8:	2300      	movhi	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	e012      	b.n	8008a04 <HAL_ADC_ConfigChannel+0x3e8>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	fa93 f3a3 	rbit	r3, r3
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80089ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ee:	fab3 f383 	clz	r3, r3
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	3301      	adds	r3, #1
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	bf94      	ite	ls
 80089fe:	2301      	movls	r3, #1
 8008a00:	2300      	movhi	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d064      	beq.n	8008ad2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d107      	bne.n	8008a24 <HAL_ADC_ConfigChannel+0x408>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	0e9b      	lsrs	r3, r3, #26
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	069b      	lsls	r3, r3, #26
 8008a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a22:	e00e      	b.n	8008a42 <HAL_ADC_ConfigChannel+0x426>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	fa93 f3a3 	rbit	r3, r3
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	fab3 f383 	clz	r3, r3
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	069b      	lsls	r3, r3, #26
 8008a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <HAL_ADC_ConfigChannel+0x446>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	0e9b      	lsrs	r3, r3, #26
 8008a54:	3301      	adds	r3, #1
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a60:	e010      	b.n	8008a84 <HAL_ADC_ConfigChannel+0x468>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	fa93 f3a3 	rbit	r3, r3
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	fab3 f383 	clz	r3, r3
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	2101      	movs	r1, #1
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	ea42 0103 	orr.w	r1, r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <HAL_ADC_ConfigChannel+0x48e>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	0e9b      	lsrs	r3, r3, #26
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f003 021f 	and.w	r2, r3, #31
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	051b      	lsls	r3, r3, #20
 8008aa8:	e011      	b.n	8008ace <HAL_ADC_ConfigChannel+0x4b2>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	fa93 f3a3 	rbit	r3, r3
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	fab3 f383 	clz	r3, r3
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	f003 021f 	and.w	r2, r3, #31
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	e069      	b.n	8008ba6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d107      	bne.n	8008aee <HAL_ADC_ConfigChannel+0x4d2>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	0e9b      	lsrs	r3, r3, #26
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	069b      	lsls	r3, r3, #26
 8008ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aec:	e00e      	b.n	8008b0c <HAL_ADC_ConfigChannel+0x4f0>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	fa93 f3a3 	rbit	r3, r3
 8008afa:	61fb      	str	r3, [r7, #28]
  return result;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	fab3 f383 	clz	r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3301      	adds	r3, #1
 8008b06:	069b      	lsls	r3, r3, #26
 8008b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_ADC_ConfigChannel+0x510>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	0e9b      	lsrs	r3, r3, #26
 8008b1e:	3301      	adds	r3, #1
 8008b20:	f003 031f 	and.w	r3, r3, #31
 8008b24:	2101      	movs	r1, #1
 8008b26:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2a:	e010      	b.n	8008b4e <HAL_ADC_ConfigChannel+0x532>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	fa93 f3a3 	rbit	r3, r3
 8008b38:	617b      	str	r3, [r7, #20]
  return result;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	fab3 f383 	clz	r3, r3
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	3301      	adds	r3, #1
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2101      	movs	r1, #1
 8008b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4e:	ea42 0103 	orr.w	r1, r2, r3
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10d      	bne.n	8008b7a <HAL_ADC_ConfigChannel+0x55e>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	0e9b      	lsrs	r3, r3, #26
 8008b64:	3301      	adds	r3, #1
 8008b66:	f003 021f 	and.w	r2, r3, #31
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	3b1e      	subs	r3, #30
 8008b72:	051b      	lsls	r3, r3, #20
 8008b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b78:	e014      	b.n	8008ba4 <HAL_ADC_ConfigChannel+0x588>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	fa93 f3a3 	rbit	r3, r3
 8008b86:	60fb      	str	r3, [r7, #12]
  return result;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	fab3 f383 	clz	r3, r3
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	3301      	adds	r3, #1
 8008b92:	f003 021f 	and.w	r2, r3, #31
 8008b96:	4613      	mov	r3, r2
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4413      	add	r3, r2
 8008b9c:	3b1e      	subs	r3, #30
 8008b9e:	051b      	lsls	r3, r3, #20
 8008ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	6892      	ldr	r2, [r2, #8]
 8008baa:	4619      	mov	r1, r3
 8008bac:	f7ff faa2 	bl	80080f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <HAL_ADC_ConfigChannel+0x654>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80c9 	beq.w	8008d50 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bc6:	d004      	beq.n	8008bd2 <HAL_ADC_ConfigChannel+0x5b6>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a29      	ldr	r2, [pc, #164]	; (8008c74 <HAL_ADC_ConfigChannel+0x658>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_ADC_ConfigChannel+0x5ba>
 8008bd2:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <HAL_ADC_ConfigChannel+0x65c>)
 8008bd4:	e000      	b.n	8008bd8 <HAL_ADC_ConfigChannel+0x5bc>
 8008bd6:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <HAL_ADC_ConfigChannel+0x660>)
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff f9c3 	bl	8007f64 <LL_ADC_GetCommonPathInternalCh>
 8008bde:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <HAL_ADC_ConfigChannel+0x664>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d004      	beq.n	8008bf6 <HAL_ADC_ConfigChannel+0x5da>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <HAL_ADC_ConfigChannel+0x668>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d14e      	bne.n	8008c94 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d148      	bne.n	8008c94 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c0a:	d005      	beq.n	8008c18 <HAL_ADC_ConfigChannel+0x5fc>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <HAL_ADC_ConfigChannel+0x66c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	f040 8099 	bne.w	8008d4a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c20:	d004      	beq.n	8008c2c <HAL_ADC_ConfigChannel+0x610>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a13      	ldr	r2, [pc, #76]	; (8008c74 <HAL_ADC_ConfigChannel+0x658>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d101      	bne.n	8008c30 <HAL_ADC_ConfigChannel+0x614>
 8008c2c:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <HAL_ADC_ConfigChannel+0x65c>)
 8008c2e:	e000      	b.n	8008c32 <HAL_ADC_ConfigChannel+0x616>
 8008c30:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <HAL_ADC_ConfigChannel+0x660>)
 8008c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f7ff f97e 	bl	8007f3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008c42:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <HAL_ADC_ConfigChannel+0x670>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	099b      	lsrs	r3, r3, #6
 8008c48:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <HAL_ADC_ConfigChannel+0x674>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	099a      	lsrs	r2, r3, #6
 8008c50:	4613      	mov	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008c5a:	e002      	b.n	8008c62 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f9      	bne.n	8008c5c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008c68:	e06f      	b.n	8008d4a <HAL_ADC_ConfigChannel+0x72e>
 8008c6a:	bf00      	nop
 8008c6c:	407f0000 	.word	0x407f0000
 8008c70:	80080000 	.word	0x80080000
 8008c74:	50000100 	.word	0x50000100
 8008c78:	50000300 	.word	0x50000300
 8008c7c:	50000700 	.word	0x50000700
 8008c80:	c3210000 	.word	0xc3210000
 8008c84:	90c00010 	.word	0x90c00010
 8008c88:	50000600 	.word	0x50000600
 8008c8c:	20000c34 	.word	0x20000c34
 8008c90:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a32      	ldr	r2, [pc, #200]	; (8008d64 <HAL_ADC_ConfigChannel+0x748>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d125      	bne.n	8008cea <HAL_ADC_ConfigChannel+0x6ce>
 8008c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d11f      	bne.n	8008cea <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a2e      	ldr	r2, [pc, #184]	; (8008d68 <HAL_ADC_ConfigChannel+0x74c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d104      	bne.n	8008cbe <HAL_ADC_ConfigChannel+0x6a2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a2c      	ldr	r2, [pc, #176]	; (8008d6c <HAL_ADC_ConfigChannel+0x750>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d047      	beq.n	8008d4e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc6:	d004      	beq.n	8008cd2 <HAL_ADC_ConfigChannel+0x6b6>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a26      	ldr	r2, [pc, #152]	; (8008d68 <HAL_ADC_ConfigChannel+0x74c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <HAL_ADC_ConfigChannel+0x6ba>
 8008cd2:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <HAL_ADC_ConfigChannel+0x754>)
 8008cd4:	e000      	b.n	8008cd8 <HAL_ADC_ConfigChannel+0x6bc>
 8008cd6:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <HAL_ADC_ConfigChannel+0x758>)
 8008cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7ff f92b 	bl	8007f3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ce8:	e031      	b.n	8008d4e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a22      	ldr	r2, [pc, #136]	; (8008d78 <HAL_ADC_ConfigChannel+0x75c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d12d      	bne.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d127      	bne.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_ADC_ConfigChannel+0x74c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d022      	beq.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d12:	d004      	beq.n	8008d1e <HAL_ADC_ConfigChannel+0x702>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <HAL_ADC_ConfigChannel+0x74c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d101      	bne.n	8008d22 <HAL_ADC_ConfigChannel+0x706>
 8008d1e:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <HAL_ADC_ConfigChannel+0x754>)
 8008d20:	e000      	b.n	8008d24 <HAL_ADC_ConfigChannel+0x708>
 8008d22:	4a14      	ldr	r2, [pc, #80]	; (8008d74 <HAL_ADC_ConfigChannel+0x758>)
 8008d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7ff f905 	bl	8007f3e <LL_ADC_SetCommonPathInternalCh>
 8008d34:	e00c      	b.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008d48:	e002      	b.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008d58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3798      	adds	r7, #152	; 0x98
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	c7520000 	.word	0xc7520000
 8008d68:	50000100 	.word	0x50000100
 8008d6c:	50000500 	.word	0x50000500
 8008d70:	50000300 	.word	0x50000300
 8008d74:	50000700 	.word	0x50000700
 8008d78:	cb840000 	.word	0xcb840000

08008d7c <LL_ADC_IsEnabled>:
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <LL_ADC_IsEnabled+0x18>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <LL_ADC_IsEnabled+0x1a>
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <LL_ADC_REG_IsConversionOngoing>:
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d101      	bne.n	8008dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0a1      	sub	sp, #132	; 0x84
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e0e3      	b.n	8008fae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df6:	d102      	bne.n	8008dfe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008df8:	4b6f      	ldr	r3, [pc, #444]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008dfa:	60bb      	str	r3, [r7, #8]
 8008dfc:	e009      	b.n	8008e12 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a6e      	ldr	r2, [pc, #440]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d102      	bne.n	8008e0e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008e08:	4b6d      	ldr	r3, [pc, #436]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e0a:	60bb      	str	r3, [r7, #8]
 8008e0c:	e001      	b.n	8008e12 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10b      	bne.n	8008e30 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e0be      	b.n	8008fae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff ffb5 	bl	8008da2 <LL_ADC_REG_IsConversionOngoing>
 8008e38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff ffaf 	bl	8008da2 <LL_ADC_REG_IsConversionOngoing>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 80a0 	bne.w	8008f8c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 809c 	bne.w	8008f8c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e5c:	d004      	beq.n	8008e68 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a55      	ldr	r2, [pc, #340]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d101      	bne.n	8008e6c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008e68:	4b56      	ldr	r3, [pc, #344]	; (8008fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008e6a:	e000      	b.n	8008e6e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008e6c:	4b56      	ldr	r3, [pc, #344]	; (8008fc8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008e6e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04b      	beq.n	8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	6859      	ldr	r1, [r3, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e8a:	035b      	lsls	r3, r3, #13
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9c:	d004      	beq.n	8008ea8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a45      	ldr	r2, [pc, #276]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d10f      	bne.n	8008ec8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008ea8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008eac:	f7ff ff66 	bl	8008d7c <LL_ADC_IsEnabled>
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4841      	ldr	r0, [pc, #260]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008eb4:	f7ff ff62 	bl	8008d7c <LL_ADC_IsEnabled>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	4323      	orrs	r3, r4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2301      	moveq	r3, #1
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	e012      	b.n	8008eee <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008ec8:	483c      	ldr	r0, [pc, #240]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008eca:	f7ff ff57 	bl	8008d7c <LL_ADC_IsEnabled>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	483b      	ldr	r0, [pc, #236]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ed2:	f7ff ff53 	bl	8008d7c <LL_ADC_IsEnabled>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	431c      	orrs	r4, r3
 8008eda:	483c      	ldr	r0, [pc, #240]	; (8008fcc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008edc:	f7ff ff4e 	bl	8008d7c <LL_ADC_IsEnabled>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	4323      	orrs	r3, r4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bf0c      	ite	eq
 8008ee8:	2301      	moveq	r3, #1
 8008eea:	2300      	movne	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d056      	beq.n	8008fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008efa:	f023 030f 	bic.w	r3, r3, #15
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	6892      	ldr	r2, [r2, #8]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f0e:	e047      	b.n	8008fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f24:	d004      	beq.n	8008f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a23      	ldr	r2, [pc, #140]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10f      	bne.n	8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008f30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f34:	f7ff ff22 	bl	8008d7c <LL_ADC_IsEnabled>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	481f      	ldr	r0, [pc, #124]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008f3c:	f7ff ff1e 	bl	8008d7c <LL_ADC_IsEnabled>
 8008f40:	4603      	mov	r3, r0
 8008f42:	4323      	orrs	r3, r4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	e012      	b.n	8008f76 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008f50:	481a      	ldr	r0, [pc, #104]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008f52:	f7ff ff13 	bl	8008d7c <LL_ADC_IsEnabled>
 8008f56:	4604      	mov	r4, r0
 8008f58:	4819      	ldr	r0, [pc, #100]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008f5a:	f7ff ff0f 	bl	8008d7c <LL_ADC_IsEnabled>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	431c      	orrs	r4, r3
 8008f62:	481a      	ldr	r0, [pc, #104]	; (8008fcc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008f64:	f7ff ff0a 	bl	8008d7c <LL_ADC_IsEnabled>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	4323      	orrs	r3, r4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d012      	beq.n	8008fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f82:	f023 030f 	bic.w	r3, r3, #15
 8008f86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f8a:	e009      	b.n	8008fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f90:	f043 0220 	orr.w	r2, r3, #32
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008f9e:	e000      	b.n	8008fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008fa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008faa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3784      	adds	r7, #132	; 0x84
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd90      	pop	{r4, r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	50000100 	.word	0x50000100
 8008fbc:	50000400 	.word	0x50000400
 8008fc0:	50000500 	.word	0x50000500
 8008fc4:	50000300 	.word	0x50000300
 8008fc8:	50000700 	.word	0x50000700
 8008fcc:	50000600 	.word	0x50000600

08008fd0 <LL_EXTI_EnableIT_0_31>:
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4904      	ldr	r1, [pc, #16]	; (8008ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	600b      	str	r3, [r1, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	40010400 	.word	0x40010400

08008ff4 <LL_EXTI_EnableIT_32_63>:
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <LL_EXTI_EnableIT_32_63+0x20>)
 8008ffe:	6a1a      	ldr	r2, [r3, #32]
 8009000:	4904      	ldr	r1, [pc, #16]	; (8009014 <LL_EXTI_EnableIT_32_63+0x20>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4313      	orrs	r3, r2
 8009006:	620b      	str	r3, [r1, #32]
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	40010400 	.word	0x40010400

08009018 <LL_EXTI_DisableIT_0_31>:
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <LL_EXTI_DisableIT_0_31+0x24>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	43db      	mvns	r3, r3
 8009028:	4904      	ldr	r1, [pc, #16]	; (800903c <LL_EXTI_DisableIT_0_31+0x24>)
 800902a:	4013      	ands	r3, r2
 800902c:	600b      	str	r3, [r1, #0]
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	40010400 	.word	0x40010400

08009040 <LL_EXTI_DisableIT_32_63>:
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009048:	4b06      	ldr	r3, [pc, #24]	; (8009064 <LL_EXTI_DisableIT_32_63+0x24>)
 800904a:	6a1a      	ldr	r2, [r3, #32]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	43db      	mvns	r3, r3
 8009050:	4904      	ldr	r1, [pc, #16]	; (8009064 <LL_EXTI_DisableIT_32_63+0x24>)
 8009052:	4013      	ands	r3, r2
 8009054:	620b      	str	r3, [r1, #32]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010400 	.word	0x40010400

08009068 <LL_EXTI_EnableEvent_0_31>:
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4904      	ldr	r1, [pc, #16]	; (8009088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4313      	orrs	r3, r2
 800907a:	604b      	str	r3, [r1, #4]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40010400 	.word	0x40010400

0800908c <LL_EXTI_EnableEvent_32_63>:
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <LL_EXTI_EnableEvent_32_63+0x20>)
 8009096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009098:	4904      	ldr	r1, [pc, #16]	; (80090ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4313      	orrs	r3, r2
 800909e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	40010400 	.word	0x40010400

080090b0 <LL_EXTI_DisableEvent_0_31>:
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80090b8:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	43db      	mvns	r3, r3
 80090c0:	4904      	ldr	r1, [pc, #16]	; (80090d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	604b      	str	r3, [r1, #4]
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40010400 	.word	0x40010400

080090d8 <LL_EXTI_DisableEvent_32_63>:
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80090e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	43db      	mvns	r3, r3
 80090e8:	4904      	ldr	r1, [pc, #16]	; (80090fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40010400 	.word	0x40010400

08009100 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	4904      	ldr	r1, [pc, #16]	; (8009120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4313      	orrs	r3, r2
 8009112:	608b      	str	r3, [r1, #8]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	40010400 	.word	0x40010400

08009124 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800912c:	4b05      	ldr	r3, [pc, #20]	; (8009144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800912e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009130:	4904      	ldr	r1, [pc, #16]	; (8009144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4313      	orrs	r3, r2
 8009136:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	40010400 	.word	0x40010400

08009148 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	43db      	mvns	r3, r3
 8009158:	4904      	ldr	r1, [pc, #16]	; (800916c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800915a:	4013      	ands	r3, r2
 800915c:	608b      	str	r3, [r1, #8]
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010400 	.word	0x40010400

08009170 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009178:	4b06      	ldr	r3, [pc, #24]	; (8009194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800917a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	43db      	mvns	r3, r3
 8009180:	4904      	ldr	r1, [pc, #16]	; (8009194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009182:	4013      	ands	r3, r2
 8009184:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40010400 	.word	0x40010400

08009198 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	4904      	ldr	r1, [pc, #16]	; (80091b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60cb      	str	r3, [r1, #12]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	40010400 	.word	0x40010400

080091bc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	4904      	ldr	r1, [pc, #16]	; (80091dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40010400 	.word	0x40010400

080091e0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80091e8:	4b06      	ldr	r3, [pc, #24]	; (8009204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	43db      	mvns	r3, r3
 80091f0:	4904      	ldr	r1, [pc, #16]	; (8009204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80091f2:	4013      	ands	r3, r2
 80091f4:	60cb      	str	r3, [r1, #12]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40010400 	.word	0x40010400

08009208 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	43db      	mvns	r3, r3
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800921a:	4013      	ands	r3, r2
 800921c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40010400 	.word	0x40010400

08009230 <LL_EXTI_ClearFlag_0_31>:
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009238:	4a04      	ldr	r2, [pc, #16]	; (800924c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6153      	str	r3, [r2, #20]
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010400 	.word	0x40010400

08009250 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009258:	4a04      	ldr	r2, [pc, #16]	; (800926c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40010400 	.word	0x40010400

08009270 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	77fb      	strb	r3, [r7, #31]
 800928a:	e180      	b.n	800958e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929a:	d102      	bne.n	80092a2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	77fb      	strb	r3, [r7, #31]
 80092a0:	e175      	b.n	800958e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7f5b      	ldrb	r3, [r3, #29]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d108      	bne.n	80092be <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fd f9db 	bl	8006674 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80092e4:	4313      	orrs	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b98      	ldr	r3, [pc, #608]	; (8009550 <HAL_COMP_Init+0x2e0>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6812      	ldr	r2, [r2, #0]
 80092f6:	6979      	ldr	r1, [r7, #20]
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d015      	beq.n	8009336 <HAL_COMP_Init+0xc6>
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d112      	bne.n	8009336 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009310:	4b90      	ldr	r3, [pc, #576]	; (8009554 <HAL_COMP_Init+0x2e4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	099b      	lsrs	r3, r3, #6
 8009316:	4a90      	ldr	r2, [pc, #576]	; (8009558 <HAL_COMP_Init+0x2e8>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	099a      	lsrs	r2, r3, #6
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009328:	e002      	b.n	8009330 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b01      	subs	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f9      	bne.n	800932a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a88      	ldr	r2, [pc, #544]	; (800955c <HAL_COMP_Init+0x2ec>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d028      	beq.n	8009392 <HAL_COMP_Init+0x122>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a86      	ldr	r2, [pc, #536]	; (8009560 <HAL_COMP_Init+0x2f0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d020      	beq.n	800938c <HAL_COMP_Init+0x11c>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a85      	ldr	r2, [pc, #532]	; (8009564 <HAL_COMP_Init+0x2f4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d018      	beq.n	8009386 <HAL_COMP_Init+0x116>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a83      	ldr	r2, [pc, #524]	; (8009568 <HAL_COMP_Init+0x2f8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d010      	beq.n	8009380 <HAL_COMP_Init+0x110>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a82      	ldr	r2, [pc, #520]	; (800956c <HAL_COMP_Init+0x2fc>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d008      	beq.n	800937a <HAL_COMP_Init+0x10a>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a80      	ldr	r2, [pc, #512]	; (8009570 <HAL_COMP_Init+0x300>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d101      	bne.n	8009376 <HAL_COMP_Init+0x106>
 8009372:	2301      	movs	r3, #1
 8009374:	e00f      	b.n	8009396 <HAL_COMP_Init+0x126>
 8009376:	2302      	movs	r3, #2
 8009378:	e00d      	b.n	8009396 <HAL_COMP_Init+0x126>
 800937a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800937e:	e00a      	b.n	8009396 <HAL_COMP_Init+0x126>
 8009380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009384:	e007      	b.n	8009396 <HAL_COMP_Init+0x126>
 8009386:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800938a:	e004      	b.n	8009396 <HAL_COMP_Init+0x126>
 800938c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009390:	e001      	b.n	8009396 <HAL_COMP_Init+0x126>
 8009392:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009396:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80b6 	beq.w	8009512 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d011      	beq.n	80093d6 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a6e      	ldr	r2, [pc, #440]	; (8009570 <HAL_COMP_Init+0x300>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d004      	beq.n	80093c6 <HAL_COMP_Init+0x156>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a6c      	ldr	r2, [pc, #432]	; (8009574 <HAL_COMP_Init+0x304>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d103      	bne.n	80093ce <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80093c6:	6938      	ldr	r0, [r7, #16]
 80093c8:	f7ff feac 	bl	8009124 <LL_EXTI_EnableRisingTrig_32_63>
 80093cc:	e014      	b.n	80093f8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80093ce:	6938      	ldr	r0, [r7, #16]
 80093d0:	f7ff fe96 	bl	8009100 <LL_EXTI_EnableRisingTrig_0_31>
 80093d4:	e010      	b.n	80093f8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a65      	ldr	r2, [pc, #404]	; (8009570 <HAL_COMP_Init+0x300>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d004      	beq.n	80093ea <HAL_COMP_Init+0x17a>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a63      	ldr	r2, [pc, #396]	; (8009574 <HAL_COMP_Init+0x304>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d103      	bne.n	80093f2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f7ff fec0 	bl	8009170 <LL_EXTI_DisableRisingTrig_32_63>
 80093f0:	e002      	b.n	80093f8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80093f2:	6938      	ldr	r0, [r7, #16]
 80093f4:	f7ff fea8 	bl	8009148 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	f003 0320 	and.w	r3, r3, #32
 8009400:	2b00      	cmp	r3, #0
 8009402:	d011      	beq.n	8009428 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a59      	ldr	r2, [pc, #356]	; (8009570 <HAL_COMP_Init+0x300>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_COMP_Init+0x1a8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a58      	ldr	r2, [pc, #352]	; (8009574 <HAL_COMP_Init+0x304>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d103      	bne.n	8009420 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009418:	6938      	ldr	r0, [r7, #16]
 800941a:	f7ff fecf 	bl	80091bc <LL_EXTI_EnableFallingTrig_32_63>
 800941e:	e014      	b.n	800944a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009420:	6938      	ldr	r0, [r7, #16]
 8009422:	f7ff feb9 	bl	8009198 <LL_EXTI_EnableFallingTrig_0_31>
 8009426:	e010      	b.n	800944a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a50      	ldr	r2, [pc, #320]	; (8009570 <HAL_COMP_Init+0x300>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <HAL_COMP_Init+0x1cc>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a4f      	ldr	r2, [pc, #316]	; (8009574 <HAL_COMP_Init+0x304>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800943c:	6938      	ldr	r0, [r7, #16]
 800943e:	f7ff fee3 	bl	8009208 <LL_EXTI_DisableFallingTrig_32_63>
 8009442:	e002      	b.n	800944a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009444:	6938      	ldr	r0, [r7, #16]
 8009446:	f7ff fecb 	bl	80091e0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a48      	ldr	r2, [pc, #288]	; (8009570 <HAL_COMP_Init+0x300>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_COMP_Init+0x1ee>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a46      	ldr	r2, [pc, #280]	; (8009574 <HAL_COMP_Init+0x304>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d103      	bne.n	8009466 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800945e:	6938      	ldr	r0, [r7, #16]
 8009460:	f7ff fef6 	bl	8009250 <LL_EXTI_ClearFlag_32_63>
 8009464:	e002      	b.n	800946c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009466:	6938      	ldr	r0, [r7, #16]
 8009468:	f7ff fee2 	bl	8009230 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d011      	beq.n	800949c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a3c      	ldr	r2, [pc, #240]	; (8009570 <HAL_COMP_Init+0x300>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d004      	beq.n	800948c <HAL_COMP_Init+0x21c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a3b      	ldr	r2, [pc, #236]	; (8009574 <HAL_COMP_Init+0x304>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d103      	bne.n	8009494 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800948c:	6938      	ldr	r0, [r7, #16]
 800948e:	f7ff fdfd 	bl	800908c <LL_EXTI_EnableEvent_32_63>
 8009492:	e014      	b.n	80094be <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009494:	6938      	ldr	r0, [r7, #16]
 8009496:	f7ff fde7 	bl	8009068 <LL_EXTI_EnableEvent_0_31>
 800949a:	e010      	b.n	80094be <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a33      	ldr	r2, [pc, #204]	; (8009570 <HAL_COMP_Init+0x300>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d004      	beq.n	80094b0 <HAL_COMP_Init+0x240>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a32      	ldr	r2, [pc, #200]	; (8009574 <HAL_COMP_Init+0x304>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d103      	bne.n	80094b8 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80094b0:	6938      	ldr	r0, [r7, #16]
 80094b2:	f7ff fe11 	bl	80090d8 <LL_EXTI_DisableEvent_32_63>
 80094b6:	e002      	b.n	80094be <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80094b8:	6938      	ldr	r0, [r7, #16]
 80094ba:	f7ff fdf9 	bl	80090b0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d011      	beq.n	80094ee <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a28      	ldr	r2, [pc, #160]	; (8009570 <HAL_COMP_Init+0x300>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d004      	beq.n	80094de <HAL_COMP_Init+0x26e>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a26      	ldr	r2, [pc, #152]	; (8009574 <HAL_COMP_Init+0x304>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d103      	bne.n	80094e6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80094de:	6938      	ldr	r0, [r7, #16]
 80094e0:	f7ff fd88 	bl	8008ff4 <LL_EXTI_EnableIT_32_63>
 80094e4:	e04b      	b.n	800957e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80094e6:	6938      	ldr	r0, [r7, #16]
 80094e8:	f7ff fd72 	bl	8008fd0 <LL_EXTI_EnableIT_0_31>
 80094ec:	e047      	b.n	800957e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a1f      	ldr	r2, [pc, #124]	; (8009570 <HAL_COMP_Init+0x300>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_COMP_Init+0x292>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a1d      	ldr	r2, [pc, #116]	; (8009574 <HAL_COMP_Init+0x304>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d103      	bne.n	800950a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009502:	6938      	ldr	r0, [r7, #16]
 8009504:	f7ff fd9c 	bl	8009040 <LL_EXTI_DisableIT_32_63>
 8009508:	e039      	b.n	800957e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f7ff fd84 	bl	8009018 <LL_EXTI_DisableIT_0_31>
 8009510:	e035      	b.n	800957e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a16      	ldr	r2, [pc, #88]	; (8009570 <HAL_COMP_Init+0x300>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d004      	beq.n	8009526 <HAL_COMP_Init+0x2b6>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a14      	ldr	r2, [pc, #80]	; (8009574 <HAL_COMP_Init+0x304>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d103      	bne.n	800952e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009526:	6938      	ldr	r0, [r7, #16]
 8009528:	f7ff fdd6 	bl	80090d8 <LL_EXTI_DisableEvent_32_63>
 800952c:	e002      	b.n	8009534 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	f7ff fdbe 	bl	80090b0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a0d      	ldr	r2, [pc, #52]	; (8009570 <HAL_COMP_Init+0x300>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d004      	beq.n	8009548 <HAL_COMP_Init+0x2d8>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <HAL_COMP_Init+0x304>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d117      	bne.n	8009578 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009548:	6938      	ldr	r0, [r7, #16]
 800954a:	f7ff fd79 	bl	8009040 <LL_EXTI_DisableIT_32_63>
 800954e:	e016      	b.n	800957e <HAL_COMP_Init+0x30e>
 8009550:	ff007e0f 	.word	0xff007e0f
 8009554:	20000c34 	.word	0x20000c34
 8009558:	053e2d63 	.word	0x053e2d63
 800955c:	40010200 	.word	0x40010200
 8009560:	40010204 	.word	0x40010204
 8009564:	40010208 	.word	0x40010208
 8009568:	4001020c 	.word	0x4001020c
 800956c:	40010210 	.word	0x40010210
 8009570:	40010214 	.word	0x40010214
 8009574:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009578:	6938      	ldr	r0, [r7, #16]
 800957a:	f7ff fd4d 	bl	8009018 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7f5b      	ldrb	r3, [r3, #29]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800958e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <__NVIC_SetPriorityGrouping>:
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095a8:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <__NVIC_SetPriorityGrouping+0x44>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80095b4:	4013      	ands	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80095c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80095c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80095ca:	4a04      	ldr	r2, [pc, #16]	; (80095dc <__NVIC_SetPriorityGrouping+0x44>)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	60d3      	str	r3, [r2, #12]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	e000ed00 	.word	0xe000ed00

080095e0 <__NVIC_GetPriorityGrouping>:
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80095e4:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <__NVIC_GetPriorityGrouping+0x18>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	0a1b      	lsrs	r3, r3, #8
 80095ea:	f003 0307 	and.w	r3, r3, #7
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	e000ed00 	.word	0xe000ed00

080095fc <__NVIC_EnableIRQ>:
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800960a:	2b00      	cmp	r3, #0
 800960c:	db0b      	blt.n	8009626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	f003 021f 	and.w	r2, r3, #31
 8009614:	4907      	ldr	r1, [pc, #28]	; (8009634 <__NVIC_EnableIRQ+0x38>)
 8009616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800961a:	095b      	lsrs	r3, r3, #5
 800961c:	2001      	movs	r0, #1
 800961e:	fa00 f202 	lsl.w	r2, r0, r2
 8009622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	e000e100 	.word	0xe000e100

08009638 <__NVIC_DisableIRQ>:
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	db10      	blt.n	800966c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	f003 021f 	and.w	r2, r3, #31
 8009650:	4909      	ldr	r1, [pc, #36]	; (8009678 <__NVIC_DisableIRQ+0x40>)
 8009652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2001      	movs	r0, #1
 800965a:	fa00 f202 	lsl.w	r2, r0, r2
 800965e:	3320      	adds	r3, #32
 8009660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009668:	f3bf 8f6f 	isb	sy
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	e000e100 	.word	0xe000e100

0800967c <__NVIC_SetPriority>:
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968c:	2b00      	cmp	r3, #0
 800968e:	db0a      	blt.n	80096a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	b2da      	uxtb	r2, r3
 8009694:	490c      	ldr	r1, [pc, #48]	; (80096c8 <__NVIC_SetPriority+0x4c>)
 8009696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969a:	0112      	lsls	r2, r2, #4
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	440b      	add	r3, r1
 80096a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80096a4:	e00a      	b.n	80096bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	4908      	ldr	r1, [pc, #32]	; (80096cc <__NVIC_SetPriority+0x50>)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	3b04      	subs	r3, #4
 80096b4:	0112      	lsls	r2, r2, #4
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	440b      	add	r3, r1
 80096ba:	761a      	strb	r2, [r3, #24]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	e000e100 	.word	0xe000e100
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <NVIC_EncodePriority>:
{
 80096d0:	b480      	push	{r7}
 80096d2:	b089      	sub	sp, #36	; 0x24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f1c3 0307 	rsb	r3, r3, #7
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	bf28      	it	cs
 80096ee:	2304      	movcs	r3, #4
 80096f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2b06      	cmp	r3, #6
 80096f8:	d902      	bls.n	8009700 <NVIC_EncodePriority+0x30>
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3b03      	subs	r3, #3
 80096fe:	e000      	b.n	8009702 <NVIC_EncodePriority+0x32>
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	fa02 f303 	lsl.w	r3, r2, r3
 800970e:	43da      	mvns	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	401a      	ands	r2, r3
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	fa01 f303 	lsl.w	r3, r1, r3
 8009722:	43d9      	mvns	r1, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009728:	4313      	orrs	r3, r2
}
 800972a:	4618      	mov	r0, r3
 800972c:	3724      	adds	r7, #36	; 0x24
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <SysTick_Config>:
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3b01      	subs	r3, #1
 8009744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009748:	d301      	bcc.n	800974e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800974a:	2301      	movs	r3, #1
 800974c:	e00f      	b.n	800976e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800974e:	4a0a      	ldr	r2, [pc, #40]	; (8009778 <SysTick_Config+0x40>)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3b01      	subs	r3, #1
 8009754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009756:	210f      	movs	r1, #15
 8009758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800975c:	f7ff ff8e 	bl	800967c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <SysTick_Config+0x40>)
 8009762:	2200      	movs	r2, #0
 8009764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <SysTick_Config+0x40>)
 8009768:	2207      	movs	r2, #7
 800976a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	e000e010 	.word	0xe000e010

0800977c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff ff07 	bl	8009598 <__NVIC_SetPriorityGrouping>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	4603      	mov	r3, r0
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80097a0:	f7ff ff1e 	bl	80095e0 <__NVIC_GetPriorityGrouping>
 80097a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	6978      	ldr	r0, [r7, #20]
 80097ac:	f7ff ff90 	bl	80096d0 <NVIC_EncodePriority>
 80097b0:	4602      	mov	r2, r0
 80097b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b6:	4611      	mov	r1, r2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ff5f 	bl	800967c <__NVIC_SetPriority>
}
 80097be:	bf00      	nop
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	4603      	mov	r3, r0
 80097ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff ff11 	bl	80095fc <__NVIC_EnableIRQ>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80097ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff ff21 	bl	8009638 <__NVIC_DisableIRQ>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff ff96 	bl	8009738 <SysTick_Config>
 800980c:	4603      	mov	r3, r0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e014      	b.n	8009852 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	791b      	ldrb	r3, [r3, #4]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7fc ffd1 	bl	80067e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	795b      	ldrb	r3, [r3, #5]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_DAC_Start+0x16>
 800986c:	2302      	movs	r3, #2
 800986e:	e043      	b.n	80098f8 <HAL_DAC_Start+0x9e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2202      	movs	r2, #2
 800987a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	f003 0310 	and.w	r3, r3, #16
 8009888:	2201      	movs	r2, #1
 800988a:	409a      	lsls	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009894:	2001      	movs	r0, #1
 8009896:	f7fe fb1d 	bl	8007ed4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d11d      	bne.n	80098ea <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	605a      	str	r2, [r3, #4]
 80098be:	e014      	b.n	80098ea <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2102      	movs	r1, #2
 80098d2:	fa01 f303 	lsl.w	r3, r1, r3
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d107      	bne.n	80098ea <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0202 	orr.w	r2, r2, #2
 80098e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	795b      	ldrb	r3, [r3, #5]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_DAC_Start_DMA+0x1e>
 800991a:	2302      	movs	r3, #2
 800991c:	e0a1      	b.n	8009a62 <HAL_DAC_Start_DMA+0x162>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2202      	movs	r2, #2
 8009928:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d12a      	bne.n	8009986 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4a4d      	ldr	r2, [pc, #308]	; (8009a6c <HAL_DAC_Start_DMA+0x16c>)
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	4a4c      	ldr	r2, [pc, #304]	; (8009a70 <HAL_DAC_Start_DMA+0x170>)
 800993e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	4a4b      	ldr	r2, [pc, #300]	; (8009a74 <HAL_DAC_Start_DMA+0x174>)
 8009946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009956:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d009      	beq.n	8009972 <HAL_DAC_Start_DMA+0x72>
 800995e:	2b08      	cmp	r3, #8
 8009960:	d00c      	beq.n	800997c <HAL_DAC_Start_DMA+0x7c>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d000      	beq.n	8009968 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009966:	e039      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	613b      	str	r3, [r7, #16]
        break;
 8009970:	e034      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	330c      	adds	r3, #12
 8009978:	613b      	str	r3, [r7, #16]
        break;
 800997a:	e02f      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3310      	adds	r3, #16
 8009982:	613b      	str	r3, [r7, #16]
        break;
 8009984:	e02a      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	4a3b      	ldr	r2, [pc, #236]	; (8009a78 <HAL_DAC_Start_DMA+0x178>)
 800998c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	4a3a      	ldr	r2, [pc, #232]	; (8009a7c <HAL_DAC_Start_DMA+0x17c>)
 8009994:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	4a39      	ldr	r2, [pc, #228]	; (8009a80 <HAL_DAC_Start_DMA+0x180>)
 800999c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d009      	beq.n	80099c8 <HAL_DAC_Start_DMA+0xc8>
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d00c      	beq.n	80099d2 <HAL_DAC_Start_DMA+0xd2>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d000      	beq.n	80099be <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80099bc:	e00e      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3314      	adds	r3, #20
 80099c4:	613b      	str	r3, [r7, #16]
        break;
 80099c6:	e009      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3318      	adds	r3, #24
 80099ce:	613b      	str	r3, [r7, #16]
        break;
 80099d0:	e004      	b.n	80099dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	331c      	adds	r3, #28
 80099d8:	613b      	str	r3, [r7, #16]
        break;
 80099da:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d111      	bne.n	8009a06 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6898      	ldr	r0, [r3, #8]
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	f000 fbd2 	bl	800a1a4 <HAL_DMA_Start_IT>
 8009a00:	4603      	mov	r3, r0
 8009a02:	75fb      	strb	r3, [r7, #23]
 8009a04:	e010      	b.n	8009a28 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009a14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68d8      	ldr	r0, [r3, #12]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	f000 fbc0 	bl	800a1a4 <HAL_DMA_Start_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2201      	movs	r2, #1
 8009a42:	409a      	lsls	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009a4c:	2001      	movs	r0, #1
 8009a4e:	f7fe fa41 	bl	8007ed4 <HAL_Delay>
 8009a52:	e005      	b.n	8009a60 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f043 0204 	orr.w	r2, r3, #4
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	08009f41 	.word	0x08009f41
 8009a70:	08009f63 	.word	0x08009f63
 8009a74:	08009f7f 	.word	0x08009f7f
 8009a78:	08009fe9 	.word	0x08009fe9
 8009a7c:	0800a00b 	.word	0x0800a00b
 8009a80:	0800a027 	.word	0x0800a027

08009a84 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	400a      	ands	r2, r1
 8009aaa:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6819      	ldr	r1, [r3, #0]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2201      	movs	r2, #1
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43da      	mvns	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7fe fa03 	bl	8007ed4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10f      	bne.n	8009af4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 fbde 	bl	800a29a <HAL_DMA_Abort>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	e00e      	b.n	8009b12 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fbce 	bl	800a29a <HAL_DMA_Abort>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009b10:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d003      	beq.n	8009b20 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	711a      	strb	r2, [r3, #4]
 8009b1e:	e002      	b.n	8009b26 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e004      	b.n	8009b6a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4413      	add	r3, r2
 8009b66:	3314      	adds	r3, #20
 8009b68:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	e002      	b.n	8009bda <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
	...

08009be8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	795b      	ldrb	r3, [r3, #5]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <HAL_DAC_ConfigChannel+0x1c>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e194      	b.n	8009f2e <HAL_DAC_ConfigChannel+0x346>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2201      	movs	r2, #1
 8009c08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d174      	bne.n	8009d02 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d137      	bne.n	8009c8e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009c1e:	f7fe f94d 	bl	8007ebc <HAL_GetTick>
 8009c22:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009c24:	e011      	b.n	8009c4a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009c26:	f7fe f949 	bl	8007ebc <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d90a      	bls.n	8009c4a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f043 0208 	orr.w	r2, r3, #8
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2203      	movs	r2, #3
 8009c44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	e171      	b.n	8009f2e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e6      	bne.n	8009c26 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7fe f93b 	bl	8007ed4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c66:	641a      	str	r2, [r3, #64]	; 0x40
 8009c68:	e01e      	b.n	8009ca8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009c6a:	f7fe f927 	bl	8007ebc <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d90a      	bls.n	8009c8e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f043 0208 	orr.w	r2, r3, #8
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2203      	movs	r2, #3
 8009c88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e14f      	b.n	8009f2e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dbe8      	blt.n	8009c6a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f7fe f91b 	bl	8007ed4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ca6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	ea02 0103 	and.w	r1, r2, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	409a      	lsls	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f003 0310 	and.w	r3, r3, #16
 8009ce2:	21ff      	movs	r1, #255	; 0xff
 8009ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce8:	43db      	mvns	r3, r3
 8009cea:	ea02 0103 	and.w	r1, r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	409a      	lsls	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d11d      	bne.n	8009d46 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	221f      	movs	r2, #31
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d22:	4013      	ands	r3, r2
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2207      	movs	r2, #7
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	43db      	mvns	r3, r3
 8009d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5e:	4013      	ands	r3, r2
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	623b      	str	r3, [r7, #32]
 8009d72:	e011      	b.n	8009d98 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009d80:	2301      	movs	r3, #1
 8009d82:	623b      	str	r3, [r7, #32]
 8009d84:	e008      	b.n	8009d98 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d102      	bne.n	8009d94 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	623b      	str	r3, [r7, #32]
 8009d92:	e001      	b.n	8009d98 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009d94:	2300      	movs	r3, #0
 8009d96:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	6a3a      	ldr	r2, [r7, #32]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f003 0310 	and.w	r3, r3, #16
 8009dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db2:	fa02 f303 	lsl.w	r3, r2, r3
 8009db6:	43db      	mvns	r3, r3
 8009db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dba:	4013      	ands	r3, r2
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	791b      	ldrb	r3, [r3, #4]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d102      	bne.n	8009dcc <HAL_DAC_ConfigChannel+0x1e4>
 8009dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dca:	e000      	b.n	8009dce <HAL_DAC_ConfigChannel+0x1e6>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f003 0310 	and.w	r3, r3, #16
 8009dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dde:	fa02 f303 	lsl.w	r3, r2, r3
 8009de2:	43db      	mvns	r3, r3
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	4013      	ands	r3, r2
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	795b      	ldrb	r3, [r3, #5]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d102      	bne.n	8009df8 <HAL_DAC_ConfigChannel+0x210>
 8009df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df6:	e000      	b.n	8009dfa <HAL_DAC_ConfigChannel+0x212>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d114      	bne.n	8009e3a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009e10:	f001 fbc2 	bl	800b598 <HAL_RCC_GetHCLKFreq>
 8009e14:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4a47      	ldr	r2, [pc, #284]	; (8009f38 <HAL_DAC_ConfigChannel+0x350>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d904      	bls.n	8009e28 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e24:	627b      	str	r3, [r7, #36]	; 0x24
 8009e26:	e00d      	b.n	8009e44 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	4a44      	ldr	r2, [pc, #272]	; (8009f3c <HAL_DAC_ConfigChannel+0x354>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d909      	bls.n	8009e44 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
 8009e38:	e004      	b.n	8009e44 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e40:	4313      	orrs	r3, r2
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0310 	and.w	r3, r3, #16
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e52:	4313      	orrs	r3, r2
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6819      	ldr	r1, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	43da      	mvns	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	400a      	ands	r2, r1
 8009e7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	43db      	mvns	r3, r3
 8009e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e96:	4013      	ands	r3, r2
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f003 0310 	and.w	r3, r3, #16
 8009ec6:	22c0      	movs	r2, #192	; 0xc0
 8009ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ecc:	43da      	mvns	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	400a      	ands	r2, r1
 8009ed4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	089b      	lsrs	r3, r3, #2
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	089b      	lsrs	r3, r3, #2
 8009ee8:	021b      	lsls	r3, r3, #8
 8009eea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f003 0310 	and.w	r3, r3, #16
 8009f00:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009f04:	fa01 f303 	lsl.w	r3, r1, r3
 8009f08:	43db      	mvns	r3, r3
 8009f0a:	ea02 0103 	and.w	r1, r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	69ba      	ldr	r2, [r7, #24]
 8009f16:	409a      	lsls	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	09896800 	.word	0x09896800
 8009f3c:	04c4b400 	.word	0x04c4b400

08009f40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fe16 	bl	8009b80 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	711a      	strb	r2, [r3, #4]
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fe0f 	bl	8009b94 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	f043 0204 	orr.w	r2, r3, #4
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fe05 	bl	8009ba8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	711a      	strb	r2, [r3, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff ffd8 	bl	8009fac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	711a      	strb	r2, [r3, #4]
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff ffd1 	bl	8009fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f043 0204 	orr.w	r2, r3, #4
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff ffc7 	bl	8009fd4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	711a      	strb	r2, [r3, #4]
}
 800a04c:	bf00      	nop
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e08d      	b.n	800a182 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	4b47      	ldr	r3, [pc, #284]	; (800a18c <HAL_DMA_Init+0x138>)
 800a06e:	429a      	cmp	r2, r3
 800a070:	d80f      	bhi.n	800a092 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	4b45      	ldr	r3, [pc, #276]	; (800a190 <HAL_DMA_Init+0x13c>)
 800a07a:	4413      	add	r3, r2
 800a07c:	4a45      	ldr	r2, [pc, #276]	; (800a194 <HAL_DMA_Init+0x140>)
 800a07e:	fba2 2303 	umull	r2, r3, r2, r3
 800a082:	091b      	lsrs	r3, r3, #4
 800a084:	009a      	lsls	r2, r3, #2
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a42      	ldr	r2, [pc, #264]	; (800a198 <HAL_DMA_Init+0x144>)
 800a08e:	641a      	str	r2, [r3, #64]	; 0x40
 800a090:	e00e      	b.n	800a0b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	4b40      	ldr	r3, [pc, #256]	; (800a19c <HAL_DMA_Init+0x148>)
 800a09a:	4413      	add	r3, r2
 800a09c:	4a3d      	ldr	r2, [pc, #244]	; (800a194 <HAL_DMA_Init+0x140>)
 800a09e:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	009a      	lsls	r2, r3, #2
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a3c      	ldr	r2, [pc, #240]	; (800a1a0 <HAL_DMA_Init+0x14c>)
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a0d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fa10 	bl	800a528 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a110:	d102      	bne.n	800a118 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a12c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <HAL_DMA_Init+0x104>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d80c      	bhi.n	800a158 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa30 	bl	800a5a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	e008      	b.n	800a16a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40020407 	.word	0x40020407
 800a190:	bffdfff8 	.word	0xbffdfff8
 800a194:	cccccccd 	.word	0xcccccccd
 800a198:	40020000 	.word	0x40020000
 800a19c:	bffdfbf8 	.word	0xbffdfbf8
 800a1a0:	40020400 	.word	0x40020400

0800a1a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_DMA_Start_IT+0x20>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e066      	b.n	800a292 <HAL_DMA_Start_IT+0xee>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d155      	bne.n	800a284 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f954 	bl	800a4aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a206:	2b00      	cmp	r3, #0
 800a208:	d008      	beq.n	800a21c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 020e 	orr.w	r2, r2, #14
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	e00f      	b.n	800a23c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0204 	bic.w	r2, r2, #4
 800a22a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 020a 	orr.w	r2, r2, #10
 800a23a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a258:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a270:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0201 	orr.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e005      	b.n	800a290 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a28c:	2302      	movs	r3, #2
 800a28e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a290:	7dfb      	ldrb	r3, [r7, #23]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b085      	sub	sp, #20
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d005      	beq.n	800a2be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	73fb      	strb	r3, [r7, #15]
 800a2bc:	e037      	b.n	800a32e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 020e 	bic.w	r2, r2, #14
 800a2cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0201 	bic.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f2:	f003 021f 	and.w	r2, r3, #31
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	fa01 f202 	lsl.w	r2, r1, r2
 800a300:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a30a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00c      	beq.n	800a32e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a322:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a32c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a368:	f003 031f 	and.w	r3, r3, #31
 800a36c:	2204      	movs	r2, #4
 800a36e:	409a      	lsls	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4013      	ands	r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d026      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0x7a>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d021      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d107      	bne.n	800a3a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0204 	bic.w	r2, r2, #4
 800a39e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a4:	f003 021f 	and.w	r2, r3, #31
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	fa01 f202 	lsl.w	r2, r1, r2
 800a3b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d071      	beq.n	800a4a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a3c4:	e06c      	b.n	800a4a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	409a      	lsls	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d02e      	beq.n	800a438 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d029      	beq.n	800a438 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10b      	bne.n	800a40a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 020a 	bic.w	r2, r2, #10
 800a400:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40e:	f003 021f 	and.w	r2, r3, #31
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	2102      	movs	r1, #2
 800a418:	fa01 f202 	lsl.w	r2, r1, r2
 800a41c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d038      	beq.n	800a4a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a436:	e033      	b.n	800a4a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	2208      	movs	r2, #8
 800a442:	409a      	lsls	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4013      	ands	r3, r2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d02a      	beq.n	800a4a2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d025      	beq.n	800a4a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 020e 	bic.w	r2, r2, #14
 800a464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46a:	f003 021f 	and.w	r2, r3, #31
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	2101      	movs	r1, #1
 800a474:	fa01 f202 	lsl.w	r2, r1, r2
 800a478:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d004      	beq.n	800a4a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
}
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a4c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a4d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d8:	f003 021f 	and.w	r2, r3, #31
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	fa01 f202 	lsl.w	r2, r1, r2
 800a4e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	2b10      	cmp	r3, #16
 800a4f6:	d108      	bne.n	800a50a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a508:	e007      	b.n	800a51a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	4b16      	ldr	r3, [pc, #88]	; (800a590 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a538:	429a      	cmp	r2, r3
 800a53a:	d802      	bhi.n	800a542 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a53c:	4b15      	ldr	r3, [pc, #84]	; (800a594 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e001      	b.n	800a546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a542:	4b15      	ldr	r3, [pc, #84]	; (800a598 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a544:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	3b08      	subs	r3, #8
 800a552:	4a12      	ldr	r2, [pc, #72]	; (800a59c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a554:	fba2 2303 	umull	r2, r3, r2, r3
 800a558:	091b      	lsrs	r3, r3, #4
 800a55a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a560:	089b      	lsrs	r3, r3, #2
 800a562:	009a      	lsls	r2, r3, #2
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4413      	add	r3, r2
 800a568:	461a      	mov	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a0b      	ldr	r2, [pc, #44]	; (800a5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a572:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 031f 	and.w	r3, r3, #31
 800a57a:	2201      	movs	r2, #1
 800a57c:	409a      	lsls	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a582:	bf00      	nop
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40020407 	.word	0x40020407
 800a594:	40020800 	.word	0x40020800
 800a598:	40020820 	.word	0x40020820
 800a59c:	cccccccd 	.word	0xcccccccd
 800a5a0:	40020880 	.word	0x40020880

0800a5a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a08      	ldr	r2, [pc, #32]	; (800a5e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a5c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	f003 031f 	and.w	r3, r3, #31
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a5d8:	bf00      	nop
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	1000823f 	.word	0x1000823f
 800a5e8:	40020940 	.word	0x40020940

0800a5ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a5fa:	e15a      	b.n	800a8b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	2101      	movs	r1, #1
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	fa01 f303 	lsl.w	r3, r1, r3
 800a608:	4013      	ands	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 814c 	beq.w	800a8ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d00b      	beq.n	800a634 <HAL_GPIO_Init+0x48>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d007      	beq.n	800a634 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a628:	2b11      	cmp	r3, #17
 800a62a:	d003      	beq.n	800a634 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2b12      	cmp	r3, #18
 800a632:	d130      	bne.n	800a696 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	2203      	movs	r2, #3
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	43db      	mvns	r3, r3
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4013      	ands	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a66a:	2201      	movs	r2, #1
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43db      	mvns	r3, r3
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	4013      	ands	r3, r2
 800a678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	091b      	lsrs	r3, r3, #4
 800a680:	f003 0201 	and.w	r2, r3, #1
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	fa02 f303 	lsl.w	r3, r2, r3
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a6:	43db      	mvns	r3, r3
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d003      	beq.n	800a6d6 <HAL_GPIO_Init+0xea>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b12      	cmp	r3, #18
 800a6d4:	d123      	bne.n	800a71e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	08da      	lsrs	r2, r3, #3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3208      	adds	r2, #8
 800a6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	220f      	movs	r2, #15
 800a6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	691a      	ldr	r2, [r3, #16]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	fa02 f303 	lsl.w	r3, r2, r3
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	08da      	lsrs	r2, r3, #3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3208      	adds	r2, #8
 800a718:	6939      	ldr	r1, [r7, #16]
 800a71a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	2203      	movs	r2, #3
 800a72a:	fa02 f303 	lsl.w	r3, r2, r3
 800a72e:	43db      	mvns	r3, r3
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4013      	ands	r3, r2
 800a734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f003 0203 	and.w	r2, r3, #3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	fa02 f303 	lsl.w	r3, r2, r3
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80a6 	beq.w	800a8ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a760:	4b5b      	ldr	r3, [pc, #364]	; (800a8d0 <HAL_GPIO_Init+0x2e4>)
 800a762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a764:	4a5a      	ldr	r2, [pc, #360]	; (800a8d0 <HAL_GPIO_Init+0x2e4>)
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	6613      	str	r3, [r2, #96]	; 0x60
 800a76c:	4b58      	ldr	r3, [pc, #352]	; (800a8d0 <HAL_GPIO_Init+0x2e4>)
 800a76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	60bb      	str	r3, [r7, #8]
 800a776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a778:	4a56      	ldr	r2, [pc, #344]	; (800a8d4 <HAL_GPIO_Init+0x2e8>)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	089b      	lsrs	r3, r3, #2
 800a77e:	3302      	adds	r3, #2
 800a780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	220f      	movs	r2, #15
 800a790:	fa02 f303 	lsl.w	r3, r2, r3
 800a794:	43db      	mvns	r3, r3
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	4013      	ands	r3, r2
 800a79a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a7a2:	d01f      	beq.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a4c      	ldr	r2, [pc, #304]	; (800a8d8 <HAL_GPIO_Init+0x2ec>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d019      	beq.n	800a7e0 <HAL_GPIO_Init+0x1f4>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a4b      	ldr	r2, [pc, #300]	; (800a8dc <HAL_GPIO_Init+0x2f0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <HAL_GPIO_Init+0x1f0>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a4a      	ldr	r2, [pc, #296]	; (800a8e0 <HAL_GPIO_Init+0x2f4>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00d      	beq.n	800a7d8 <HAL_GPIO_Init+0x1ec>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a49      	ldr	r2, [pc, #292]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d007      	beq.n	800a7d4 <HAL_GPIO_Init+0x1e8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a48      	ldr	r2, [pc, #288]	; (800a8e8 <HAL_GPIO_Init+0x2fc>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d101      	bne.n	800a7d0 <HAL_GPIO_Init+0x1e4>
 800a7cc:	2305      	movs	r3, #5
 800a7ce:	e00a      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7d0:	2306      	movs	r3, #6
 800a7d2:	e008      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	e006      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e004      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e002      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <HAL_GPIO_Init+0x1fa>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	f002 0203 	and.w	r2, r2, #3
 800a7ec:	0092      	lsls	r2, r2, #2
 800a7ee:	4093      	lsls	r3, r2
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7f6:	4937      	ldr	r1, [pc, #220]	; (800a8d4 <HAL_GPIO_Init+0x2e8>)
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	089b      	lsrs	r3, r3, #2
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a804:	4b39      	ldr	r3, [pc, #228]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	43db      	mvns	r3, r3
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	4013      	ands	r3, r2
 800a812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a828:	4a30      	ldr	r2, [pc, #192]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a82e:	4b2f      	ldr	r3, [pc, #188]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	43db      	mvns	r3, r3
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	4013      	ands	r3, r2
 800a83c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4313      	orrs	r3, r2
 800a850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a852:	4a26      	ldr	r2, [pc, #152]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a858:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	43db      	mvns	r3, r3
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4013      	ands	r3, r2
 800a866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4313      	orrs	r3, r2
 800a87a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a87c:	4a1b      	ldr	r2, [pc, #108]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a882:	4b1a      	ldr	r3, [pc, #104]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	43db      	mvns	r3, r3
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	4013      	ands	r3, r2
 800a890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a8a6:	4a11      	ldr	r2, [pc, #68]	; (800a8ec <HAL_GPIO_Init+0x300>)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f47f ae9d 	bne.w	800a5fc <HAL_GPIO_Init+0x10>
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	40010000 	.word	0x40010000
 800a8d8:	48000400 	.word	0x48000400
 800a8dc:	48000800 	.word	0x48000800
 800a8e0:	48000c00 	.word	0x48000c00
 800a8e4:	48001000 	.word	0x48001000
 800a8e8:	48001400 	.word	0x48001400
 800a8ec:	40010400 	.word	0x40010400

0800a8f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a8fe:	e0bd      	b.n	800aa7c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a900:	2201      	movs	r2, #1
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	4013      	ands	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 80b0 	beq.w	800aa76 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a916:	4a60      	ldr	r2, [pc, #384]	; (800aa98 <HAL_GPIO_DeInit+0x1a8>)
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	089b      	lsrs	r3, r3, #2
 800a91c:	3302      	adds	r3, #2
 800a91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a922:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	220f      	movs	r2, #15
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4013      	ands	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a93e:	d01f      	beq.n	800a980 <HAL_GPIO_DeInit+0x90>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a56      	ldr	r2, [pc, #344]	; (800aa9c <HAL_GPIO_DeInit+0x1ac>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d019      	beq.n	800a97c <HAL_GPIO_DeInit+0x8c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a55      	ldr	r2, [pc, #340]	; (800aaa0 <HAL_GPIO_DeInit+0x1b0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d013      	beq.n	800a978 <HAL_GPIO_DeInit+0x88>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a54      	ldr	r2, [pc, #336]	; (800aaa4 <HAL_GPIO_DeInit+0x1b4>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00d      	beq.n	800a974 <HAL_GPIO_DeInit+0x84>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a53      	ldr	r2, [pc, #332]	; (800aaa8 <HAL_GPIO_DeInit+0x1b8>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d007      	beq.n	800a970 <HAL_GPIO_DeInit+0x80>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a52      	ldr	r2, [pc, #328]	; (800aaac <HAL_GPIO_DeInit+0x1bc>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d101      	bne.n	800a96c <HAL_GPIO_DeInit+0x7c>
 800a968:	2305      	movs	r3, #5
 800a96a:	e00a      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a96c:	2306      	movs	r3, #6
 800a96e:	e008      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a970:	2304      	movs	r3, #4
 800a972:	e006      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a974:	2303      	movs	r3, #3
 800a976:	e004      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a978:	2302      	movs	r3, #2
 800a97a:	e002      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a97c:	2301      	movs	r3, #1
 800a97e:	e000      	b.n	800a982 <HAL_GPIO_DeInit+0x92>
 800a980:	2300      	movs	r3, #0
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	f002 0203 	and.w	r2, r2, #3
 800a988:	0092      	lsls	r2, r2, #2
 800a98a:	4093      	lsls	r3, r2
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d132      	bne.n	800a9f8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a992:	4b47      	ldr	r3, [pc, #284]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	43db      	mvns	r3, r3
 800a99a:	4945      	ldr	r1, [pc, #276]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a9a0:	4b43      	ldr	r3, [pc, #268]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	43db      	mvns	r3, r3
 800a9a8:	4941      	ldr	r1, [pc, #260]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a9ae:	4b40      	ldr	r3, [pc, #256]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	43db      	mvns	r3, r3
 800a9b6:	493e      	ldr	r1, [pc, #248]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a9bc:	4b3c      	ldr	r3, [pc, #240]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	43db      	mvns	r3, r3
 800a9c4:	493a      	ldr	r1, [pc, #232]	; (800aab0 <HAL_GPIO_DeInit+0x1c0>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	220f      	movs	r2, #15
 800a9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a9da:	4a2f      	ldr	r2, [pc, #188]	; (800aa98 <HAL_GPIO_DeInit+0x1a8>)
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	089b      	lsrs	r3, r3, #2
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	43da      	mvns	r2, r3
 800a9ea:	482b      	ldr	r0, [pc, #172]	; (800aa98 <HAL_GPIO_DeInit+0x1a8>)
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	089b      	lsrs	r3, r3, #2
 800a9f0:	400a      	ands	r2, r1
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	2103      	movs	r1, #3
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	431a      	orrs	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	08da      	lsrs	r2, r3, #3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3208      	adds	r2, #8
 800aa14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	220f      	movs	r2, #15
 800aa22:	fa02 f303 	lsl.w	r3, r2, r3
 800aa26:	43db      	mvns	r3, r3
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	08d2      	lsrs	r2, r2, #3
 800aa2c:	4019      	ands	r1, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3208      	adds	r2, #8
 800aa32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	2103      	movs	r1, #3
 800aa40:	fa01 f303 	lsl.w	r3, r1, r3
 800aa44:	43db      	mvns	r3, r3
 800aa46:	401a      	ands	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	2101      	movs	r1, #1
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	fa01 f303 	lsl.w	r3, r1, r3
 800aa58:	43db      	mvns	r3, r3
 800aa5a:	401a      	ands	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	2103      	movs	r1, #3
 800aa6a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6e:	43db      	mvns	r3, r3
 800aa70:	401a      	ands	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	609a      	str	r2, [r3, #8]
    }

    position++;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	fa22 f303 	lsr.w	r3, r2, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f47f af3b 	bne.w	800a900 <HAL_GPIO_DeInit+0x10>
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	48000400 	.word	0x48000400
 800aaa0:	48000800 	.word	0x48000800
 800aaa4:	48000c00 	.word	0x48000c00
 800aaa8:	48001000 	.word	0x48001000
 800aaac:	48001400 	.word	0x48001400
 800aab0:	40010400 	.word	0x40010400

0800aab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	807b      	strh	r3, [r7, #2]
 800aac0:	4613      	mov	r3, r2
 800aac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aac4:	787b      	ldrb	r3, [r7, #1]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aaca:	887a      	ldrh	r2, [r7, #2]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aad0:	e002      	b.n	800aad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aad2:	887a      	ldrh	r2, [r7, #2]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d141      	bne.n	800ab76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aaf2:	4b4b      	ldr	r3, [pc, #300]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aafa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafe:	d131      	bne.n	800ab64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab00:	4b47      	ldr	r3, [pc, #284]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab06:	4a46      	ldr	r2, [pc, #280]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab10:	4b43      	ldr	r3, [pc, #268]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab18:	4a41      	ldr	r2, [pc, #260]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab20:	4b40      	ldr	r3, [pc, #256]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2232      	movs	r2, #50	; 0x32
 800ab26:	fb02 f303 	mul.w	r3, r2, r3
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab30:	0c9b      	lsrs	r3, r3, #18
 800ab32:	3301      	adds	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab36:	e002      	b.n	800ab3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab3e:	4b38      	ldr	r3, [pc, #224]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab4a:	d102      	bne.n	800ab52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f2      	bne.n	800ab38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab52:	4b33      	ldr	r3, [pc, #204]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab5e:	d158      	bne.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e057      	b.n	800ac14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab64:	4b2e      	ldr	r3, [pc, #184]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab74:	e04d      	b.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab7c:	d141      	bne.n	800ac02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab7e:	4b28      	ldr	r3, [pc, #160]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab8a:	d131      	bne.n	800abf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab8c:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab92:	4a23      	ldr	r2, [pc, #140]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab9c:	4b20      	ldr	r3, [pc, #128]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aba4:	4a1e      	ldr	r2, [pc, #120]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800abac:	4b1d      	ldr	r3, [pc, #116]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2232      	movs	r2, #50	; 0x32
 800abb2:	fb02 f303 	mul.w	r3, r2, r3
 800abb6:	4a1c      	ldr	r2, [pc, #112]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800abb8:	fba2 2303 	umull	r2, r3, r2, r3
 800abbc:	0c9b      	lsrs	r3, r3, #18
 800abbe:	3301      	adds	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abc2:	e002      	b.n	800abca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abca:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd6:	d102      	bne.n	800abde <HAL_PWREx_ControlVoltageScaling+0xfa>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1f2      	bne.n	800abc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800abde:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abea:	d112      	bne.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e011      	b.n	800ac14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abf6:	4a0a      	ldr	r2, [pc, #40]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ac00:	e007      	b.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac02:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac0a:	4a05      	ldr	r2, [pc, #20]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	40007000 	.word	0x40007000
 800ac24:	20000c34 	.word	0x20000c34
 800ac28:	431bde83 	.word	0x431bde83

0800ac2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e308      	b.n	800b250 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d075      	beq.n	800ad36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac4a:	4ba3      	ldr	r3, [pc, #652]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f003 030c 	and.w	r3, r3, #12
 800ac52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac54:	4ba0      	ldr	r3, [pc, #640]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f003 0303 	and.w	r3, r3, #3
 800ac5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	2b0c      	cmp	r3, #12
 800ac62:	d102      	bne.n	800ac6a <HAL_RCC_OscConfig+0x3e>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d002      	beq.n	800ac70 <HAL_RCC_OscConfig+0x44>
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d10b      	bne.n	800ac88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac70:	4b99      	ldr	r3, [pc, #612]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05b      	beq.n	800ad34 <HAL_RCC_OscConfig+0x108>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d157      	bne.n	800ad34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e2e3      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac90:	d106      	bne.n	800aca0 <HAL_RCC_OscConfig+0x74>
 800ac92:	4b91      	ldr	r3, [pc, #580]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a90      	ldr	r2, [pc, #576]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ac98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	e01d      	b.n	800acdc <HAL_RCC_OscConfig+0xb0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca8:	d10c      	bne.n	800acc4 <HAL_RCC_OscConfig+0x98>
 800acaa:	4b8b      	ldr	r3, [pc, #556]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a8a      	ldr	r2, [pc, #552]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	4b88      	ldr	r3, [pc, #544]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a87      	ldr	r2, [pc, #540]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e00b      	b.n	800acdc <HAL_RCC_OscConfig+0xb0>
 800acc4:	4b84      	ldr	r3, [pc, #528]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a83      	ldr	r2, [pc, #524]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4b81      	ldr	r3, [pc, #516]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a80      	ldr	r2, [pc, #512]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800acd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d013      	beq.n	800ad0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace4:	f7fd f8ea 	bl	8007ebc <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acea:	e008      	b.n	800acfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acec:	f7fd f8e6 	bl	8007ebc <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	2b64      	cmp	r3, #100	; 0x64
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e2a8      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acfe:	4b76      	ldr	r3, [pc, #472]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0f0      	beq.n	800acec <HAL_RCC_OscConfig+0xc0>
 800ad0a:	e014      	b.n	800ad36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad0c:	f7fd f8d6 	bl	8007ebc <HAL_GetTick>
 800ad10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad12:	e008      	b.n	800ad26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad14:	f7fd f8d2 	bl	8007ebc <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	2b64      	cmp	r3, #100	; 0x64
 800ad20:	d901      	bls.n	800ad26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e294      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad26:	4b6c      	ldr	r3, [pc, #432]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f0      	bne.n	800ad14 <HAL_RCC_OscConfig+0xe8>
 800ad32:	e000      	b.n	800ad36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d075      	beq.n	800ae2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad42:	4b65      	ldr	r3, [pc, #404]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f003 030c 	and.w	r3, r3, #12
 800ad4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad4c:	4b62      	ldr	r3, [pc, #392]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	2b0c      	cmp	r3, #12
 800ad5a:	d102      	bne.n	800ad62 <HAL_RCC_OscConfig+0x136>
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d002      	beq.n	800ad68 <HAL_RCC_OscConfig+0x13c>
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d11f      	bne.n	800ada8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad68:	4b5b      	ldr	r3, [pc, #364]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d005      	beq.n	800ad80 <HAL_RCC_OscConfig+0x154>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e267      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad80:	4b55      	ldr	r3, [pc, #340]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	061b      	lsls	r3, r3, #24
 800ad8e:	4952      	ldr	r1, [pc, #328]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ad94:	4b51      	ldr	r3, [pc, #324]	; (800aedc <HAL_RCC_OscConfig+0x2b0>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fd f843 	bl	8007e24 <HAL_InitTick>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d043      	beq.n	800ae2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e253      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d023      	beq.n	800adf8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adb0:	4b49      	ldr	r3, [pc, #292]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a48      	ldr	r2, [pc, #288]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800adb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adbc:	f7fd f87e 	bl	8007ebc <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc4:	f7fd f87a 	bl	8007ebc <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e23c      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800add6:	4b40      	ldr	r3, [pc, #256]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f0      	beq.n	800adc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ade2:	4b3d      	ldr	r3, [pc, #244]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	061b      	lsls	r3, r3, #24
 800adf0:	4939      	ldr	r1, [pc, #228]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	604b      	str	r3, [r1, #4]
 800adf6:	e01a      	b.n	800ae2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adf8:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a36      	ldr	r2, [pc, #216]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800adfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae04:	f7fd f85a 	bl	8007ebc <HAL_GetTick>
 800ae08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae0a:	e008      	b.n	800ae1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae0c:	f7fd f856 	bl	8007ebc <HAL_GetTick>
 800ae10:	4602      	mov	r2, r0
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d901      	bls.n	800ae1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e218      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae1e:	4b2e      	ldr	r3, [pc, #184]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1f0      	bne.n	800ae0c <HAL_RCC_OscConfig+0x1e0>
 800ae2a:	e000      	b.n	800ae2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0308 	and.w	r3, r3, #8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d03c      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d01c      	beq.n	800ae7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae42:	4b25      	ldr	r3, [pc, #148]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae48:	4a23      	ldr	r2, [pc, #140]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae52:	f7fd f833 	bl	8007ebc <HAL_GetTick>
 800ae56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae58:	e008      	b.n	800ae6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae5a:	f7fd f82f 	bl	8007ebc <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d901      	bls.n	800ae6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e1f1      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae6c:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0ef      	beq.n	800ae5a <HAL_RCC_OscConfig+0x22e>
 800ae7a:	e01b      	b.n	800aeb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae7c:	4b16      	ldr	r3, [pc, #88]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800ae84:	f023 0301 	bic.w	r3, r3, #1
 800ae88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae8c:	f7fd f816 	bl	8007ebc <HAL_GetTick>
 800ae90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae92:	e008      	b.n	800aea6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae94:	f7fd f812 	bl	8007ebc <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d901      	bls.n	800aea6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e1d4      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1ef      	bne.n	800ae94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 80ab 	beq.w	800b018 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aec2:	2300      	movs	r3, #0
 800aec4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aec6:	4b04      	ldr	r3, [pc, #16]	; (800aed8 <HAL_RCC_OscConfig+0x2ac>)
 800aec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <HAL_RCC_OscConfig+0x2b4>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e005      	b.n	800aee2 <HAL_RCC_OscConfig+0x2b6>
 800aed6:	bf00      	nop
 800aed8:	40021000 	.word	0x40021000
 800aedc:	20000c38 	.word	0x20000c38
 800aee0:	2300      	movs	r3, #0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00d      	beq.n	800af02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aee6:	4baf      	ldr	r3, [pc, #700]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800aee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeea:	4aae      	ldr	r2, [pc, #696]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800aeec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aef0:	6593      	str	r3, [r2, #88]	; 0x58
 800aef2:	4bac      	ldr	r3, [pc, #688]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aefe:	2301      	movs	r3, #1
 800af00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af02:	4ba9      	ldr	r3, [pc, #676]	; (800b1a8 <HAL_RCC_OscConfig+0x57c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d118      	bne.n	800af40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af0e:	4ba6      	ldr	r3, [pc, #664]	; (800b1a8 <HAL_RCC_OscConfig+0x57c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4aa5      	ldr	r2, [pc, #660]	; (800b1a8 <HAL_RCC_OscConfig+0x57c>)
 800af14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af1a:	f7fc ffcf 	bl	8007ebc <HAL_GetTick>
 800af1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af20:	e008      	b.n	800af34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af22:	f7fc ffcb 	bl	8007ebc <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e18d      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af34:	4b9c      	ldr	r3, [pc, #624]	; (800b1a8 <HAL_RCC_OscConfig+0x57c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d0f0      	beq.n	800af22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d108      	bne.n	800af5a <HAL_RCC_OscConfig+0x32e>
 800af48:	4b96      	ldr	r3, [pc, #600]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4e:	4a95      	ldr	r2, [pc, #596]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af50:	f043 0301 	orr.w	r3, r3, #1
 800af54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af58:	e024      	b.n	800afa4 <HAL_RCC_OscConfig+0x378>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d110      	bne.n	800af84 <HAL_RCC_OscConfig+0x358>
 800af62:	4b90      	ldr	r3, [pc, #576]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af68:	4a8e      	ldr	r2, [pc, #568]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af6a:	f043 0304 	orr.w	r3, r3, #4
 800af6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af72:	4b8c      	ldr	r3, [pc, #560]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af78:	4a8a      	ldr	r2, [pc, #552]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af7a:	f043 0301 	orr.w	r3, r3, #1
 800af7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af82:	e00f      	b.n	800afa4 <HAL_RCC_OscConfig+0x378>
 800af84:	4b87      	ldr	r3, [pc, #540]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8a:	4a86      	ldr	r2, [pc, #536]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af8c:	f023 0301 	bic.w	r3, r3, #1
 800af90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af94:	4b83      	ldr	r3, [pc, #524]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af9a:	4a82      	ldr	r2, [pc, #520]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800af9c:	f023 0304 	bic.w	r3, r3, #4
 800afa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d016      	beq.n	800afda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afac:	f7fc ff86 	bl	8007ebc <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afb2:	e00a      	b.n	800afca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afb4:	f7fc ff82 	bl	8007ebc <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d901      	bls.n	800afca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e142      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afca:	4b76      	ldr	r3, [pc, #472]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800afcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0ed      	beq.n	800afb4 <HAL_RCC_OscConfig+0x388>
 800afd8:	e015      	b.n	800b006 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afda:	f7fc ff6f 	bl	8007ebc <HAL_GetTick>
 800afde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800afe0:	e00a      	b.n	800aff8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afe2:	f7fc ff6b 	bl	8007ebc <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d901      	bls.n	800aff8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e12b      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aff8:	4b6a      	ldr	r3, [pc, #424]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800affa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1ed      	bne.n	800afe2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b006:	7ffb      	ldrb	r3, [r7, #31]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d105      	bne.n	800b018 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b00c:	4b65      	ldr	r3, [pc, #404]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b010:	4a64      	ldr	r2, [pc, #400]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b016:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0320 	and.w	r3, r3, #32
 800b020:	2b00      	cmp	r3, #0
 800b022:	d03c      	beq.n	800b09e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d01c      	beq.n	800b066 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b02c:	4b5d      	ldr	r3, [pc, #372]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b032:	4a5c      	ldr	r2, [pc, #368]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b034:	f043 0301 	orr.w	r3, r3, #1
 800b038:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b03c:	f7fc ff3e 	bl	8007ebc <HAL_GetTick>
 800b040:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b042:	e008      	b.n	800b056 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b044:	f7fc ff3a 	bl	8007ebc <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e0fc      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b056:	4b53      	ldr	r3, [pc, #332]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d0ef      	beq.n	800b044 <HAL_RCC_OscConfig+0x418>
 800b064:	e01b      	b.n	800b09e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b066:	4b4f      	ldr	r3, [pc, #316]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b06c:	4a4d      	ldr	r2, [pc, #308]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b06e:	f023 0301 	bic.w	r3, r3, #1
 800b072:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b076:	f7fc ff21 	bl	8007ebc <HAL_GetTick>
 800b07a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b07c:	e008      	b.n	800b090 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b07e:	f7fc ff1d 	bl	8007ebc <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d901      	bls.n	800b090 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e0df      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b090:	4b44      	ldr	r3, [pc, #272]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1ef      	bne.n	800b07e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80d3 	beq.w	800b24e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0a8:	4b3e      	ldr	r3, [pc, #248]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 030c 	and.w	r3, r3, #12
 800b0b0:	2b0c      	cmp	r3, #12
 800b0b2:	f000 808d 	beq.w	800b1d0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d15a      	bne.n	800b174 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0be:	4b39      	ldr	r3, [pc, #228]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a38      	ldr	r2, [pc, #224]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b0c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ca:	f7fc fef7 	bl	8007ebc <HAL_GetTick>
 800b0ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0d0:	e008      	b.n	800b0e4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d2:	f7fc fef3 	bl	8007ebc <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d901      	bls.n	800b0e4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e0b5      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0e4:	4b2f      	ldr	r3, [pc, #188]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1f0      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0f0:	4b2c      	ldr	r3, [pc, #176]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	4b2d      	ldr	r3, [pc, #180]	; (800b1ac <HAL_RCC_OscConfig+0x580>)
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6a11      	ldr	r1, [r2, #32]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b100:	3a01      	subs	r2, #1
 800b102:	0112      	lsls	r2, r2, #4
 800b104:	4311      	orrs	r1, r2
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b10a:	0212      	lsls	r2, r2, #8
 800b10c:	4311      	orrs	r1, r2
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b112:	0852      	lsrs	r2, r2, #1
 800b114:	3a01      	subs	r2, #1
 800b116:	0552      	lsls	r2, r2, #21
 800b118:	4311      	orrs	r1, r2
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b11e:	0852      	lsrs	r2, r2, #1
 800b120:	3a01      	subs	r2, #1
 800b122:	0652      	lsls	r2, r2, #25
 800b124:	4311      	orrs	r1, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b12a:	06d2      	lsls	r2, r2, #27
 800b12c:	430a      	orrs	r2, r1
 800b12e:	491d      	ldr	r1, [pc, #116]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b130:	4313      	orrs	r3, r2
 800b132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b134:	4b1b      	ldr	r3, [pc, #108]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1a      	ldr	r2, [pc, #104]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b13a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b13e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b140:	4b18      	ldr	r3, [pc, #96]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4a17      	ldr	r2, [pc, #92]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b14a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14c:	f7fc feb6 	bl	8007ebc <HAL_GetTick>
 800b150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b152:	e008      	b.n	800b166 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b154:	f7fc feb2 	bl	8007ebc <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d901      	bls.n	800b166 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e074      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b166:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0f0      	beq.n	800b154 <HAL_RCC_OscConfig+0x528>
 800b172:	e06c      	b.n	800b24e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b174:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a0a      	ldr	r2, [pc, #40]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b17a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b17e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	4a07      	ldr	r2, [pc, #28]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b18c:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	4a04      	ldr	r2, [pc, #16]	; (800b1a4 <HAL_RCC_OscConfig+0x578>)
 800b192:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b19c:	f7fc fe8e 	bl	8007ebc <HAL_GetTick>
 800b1a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1a2:	e00e      	b.n	800b1c2 <HAL_RCC_OscConfig+0x596>
 800b1a4:	40021000 	.word	0x40021000
 800b1a8:	40007000 	.word	0x40007000
 800b1ac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1b0:	f7fc fe84 	bl	8007ebc <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e046      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1c2:	4b25      	ldr	r3, [pc, #148]	; (800b258 <HAL_RCC_OscConfig+0x62c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f0      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x584>
 800b1ce:	e03e      	b.n	800b24e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e039      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b1dc:	4b1e      	ldr	r3, [pc, #120]	; (800b258 <HAL_RCC_OscConfig+0x62c>)
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f003 0203 	and.w	r2, r3, #3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d12c      	bne.n	800b24a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d123      	bne.n	800b24a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b20e:	429a      	cmp	r2, r3
 800b210:	d11b      	bne.n	800b24a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b21e:	429a      	cmp	r2, r3
 800b220:	d113      	bne.n	800b24a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22c:	085b      	lsrs	r3, r3, #1
 800b22e:	3b01      	subs	r3, #1
 800b230:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b232:	429a      	cmp	r2, r3
 800b234:	d109      	bne.n	800b24a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	3b01      	subs	r3, #1
 800b244:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b246:	429a      	cmp	r2, r3
 800b248:	d001      	beq.n	800b24e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e000      	b.n	800b250 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3720      	adds	r7, #32
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	40021000 	.word	0x40021000

0800b25c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e11e      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b274:	4b91      	ldr	r3, [pc, #580]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d910      	bls.n	800b2a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b282:	4b8e      	ldr	r3, [pc, #568]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f023 020f 	bic.w	r2, r3, #15
 800b28a:	498c      	ldr	r1, [pc, #560]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	4313      	orrs	r3, r2
 800b290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b292:	4b8a      	ldr	r3, [pc, #552]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d001      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e106      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d073      	beq.n	800b398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d129      	bne.n	800b30c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2b8:	4b81      	ldr	r3, [pc, #516]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e0f4      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b2c8:	f000 f972 	bl	800b5b0 <RCC_GetSysClockFreqFromPLLSource>
 800b2cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4a7c      	ldr	r2, [pc, #496]	; (800b4c4 <HAL_RCC_ClockConfig+0x268>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d93f      	bls.n	800b356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b2d6:	4b7a      	ldr	r3, [pc, #488]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d009      	beq.n	800b2f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d033      	beq.n	800b356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d12f      	bne.n	800b356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b2f6:	4b72      	ldr	r3, [pc, #456]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2fe:	4a70      	ldr	r2, [pc, #448]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b306:	2380      	movs	r3, #128	; 0x80
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e024      	b.n	800b356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d107      	bne.n	800b324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b314:	4b6a      	ldr	r3, [pc, #424]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e0c6      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b324:	4b66      	ldr	r3, [pc, #408]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e0be      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b334:	f000 f8ce 	bl	800b4d4 <HAL_RCC_GetSysClockFreq>
 800b338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	4a61      	ldr	r2, [pc, #388]	; (800b4c4 <HAL_RCC_ClockConfig+0x268>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d909      	bls.n	800b356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b342:	4b5f      	ldr	r3, [pc, #380]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b34a:	4a5d      	ldr	r2, [pc, #372]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b352:	2380      	movs	r3, #128	; 0x80
 800b354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b356:	4b5a      	ldr	r3, [pc, #360]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f023 0203 	bic.w	r2, r3, #3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	4957      	ldr	r1, [pc, #348]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b364:	4313      	orrs	r3, r2
 800b366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b368:	f7fc fda8 	bl	8007ebc <HAL_GetTick>
 800b36c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b36e:	e00a      	b.n	800b386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b370:	f7fc fda4 	bl	8007ebc <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b37e:	4293      	cmp	r3, r2
 800b380:	d901      	bls.n	800b386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e095      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b386:	4b4e      	ldr	r3, [pc, #312]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 020c 	and.w	r2, r3, #12
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	429a      	cmp	r2, r3
 800b396:	d1eb      	bne.n	800b370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d023      	beq.n	800b3ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3b0:	4b43      	ldr	r3, [pc, #268]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	4a42      	ldr	r2, [pc, #264]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b3c8:	4b3d      	ldr	r3, [pc, #244]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3d0:	4a3b      	ldr	r2, [pc, #236]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3d8:	4b39      	ldr	r3, [pc, #228]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4936      	ldr	r1, [pc, #216]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	608b      	str	r3, [r1, #8]
 800b3ea:	e008      	b.n	800b3fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b80      	cmp	r3, #128	; 0x80
 800b3f0:	d105      	bne.n	800b3fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b3f2:	4b33      	ldr	r3, [pc, #204]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	4a32      	ldr	r2, [pc, #200]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b3f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3fe:	4b2f      	ldr	r3, [pc, #188]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 030f 	and.w	r3, r3, #15
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d21d      	bcs.n	800b448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b40c:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f023 020f 	bic.w	r2, r3, #15
 800b414:	4929      	ldr	r1, [pc, #164]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	4313      	orrs	r3, r2
 800b41a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b41c:	f7fc fd4e 	bl	8007ebc <HAL_GetTick>
 800b420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b422:	e00a      	b.n	800b43a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b424:	f7fc fd4a 	bl	8007ebc <HAL_GetTick>
 800b428:	4602      	mov	r2, r0
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b432:	4293      	cmp	r3, r2
 800b434:	d901      	bls.n	800b43a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e03b      	b.n	800b4b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b43a:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <HAL_RCC_ClockConfig+0x260>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 030f 	and.w	r3, r3, #15
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d1ed      	bne.n	800b424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d008      	beq.n	800b466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	4917      	ldr	r1, [pc, #92]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b462:	4313      	orrs	r3, r2
 800b464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0308 	and.w	r3, r3, #8
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b472:	4b13      	ldr	r3, [pc, #76]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	490f      	ldr	r1, [pc, #60]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b482:	4313      	orrs	r3, r2
 800b484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b486:	f000 f825 	bl	800b4d4 <HAL_RCC_GetSysClockFreq>
 800b48a:	4601      	mov	r1, r0
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <HAL_RCC_ClockConfig+0x264>)
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	091b      	lsrs	r3, r3, #4
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	4a0c      	ldr	r2, [pc, #48]	; (800b4c8 <HAL_RCC_ClockConfig+0x26c>)
 800b498:	5cd3      	ldrb	r3, [r2, r3]
 800b49a:	f003 031f 	and.w	r3, r3, #31
 800b49e:	fa21 f303 	lsr.w	r3, r1, r3
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <HAL_RCC_ClockConfig+0x270>)
 800b4a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b4a6:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <HAL_RCC_ClockConfig+0x274>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fc fcba 	bl	8007e24 <HAL_InitTick>
 800b4b0:	4603      	mov	r3, r0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40022000 	.word	0x40022000
 800b4c0:	40021000 	.word	0x40021000
 800b4c4:	04c4b400 	.word	0x04c4b400
 800b4c8:	08013d1c 	.word	0x08013d1c
 800b4cc:	20000c34 	.word	0x20000c34
 800b4d0:	20000c38 	.word	0x20000c38

0800b4d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b4da:	4b2c      	ldr	r3, [pc, #176]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f003 030c 	and.w	r3, r3, #12
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d102      	bne.n	800b4ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	e047      	b.n	800b57c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b4ec:	4b27      	ldr	r3, [pc, #156]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f003 030c 	and.w	r3, r3, #12
 800b4f4:	2b08      	cmp	r3, #8
 800b4f6:	d102      	bne.n	800b4fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b4f8:	4b26      	ldr	r3, [pc, #152]	; (800b594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b4fa:	613b      	str	r3, [r7, #16]
 800b4fc:	e03e      	b.n	800b57c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b4fe:	4b23      	ldr	r3, [pc, #140]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f003 030c 	and.w	r3, r3, #12
 800b506:	2b0c      	cmp	r3, #12
 800b508:	d136      	bne.n	800b578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b50a:	4b20      	ldr	r3, [pc, #128]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b514:	4b1d      	ldr	r3, [pc, #116]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	091b      	lsrs	r3, r3, #4
 800b51a:	f003 030f 	and.w	r3, r3, #15
 800b51e:	3301      	adds	r3, #1
 800b520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b03      	cmp	r3, #3
 800b526:	d10c      	bne.n	800b542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b528:	4a1a      	ldr	r2, [pc, #104]	; (800b594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	4a16      	ldr	r2, [pc, #88]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b532:	68d2      	ldr	r2, [r2, #12]
 800b534:	0a12      	lsrs	r2, r2, #8
 800b536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b53a:	fb02 f303 	mul.w	r3, r2, r3
 800b53e:	617b      	str	r3, [r7, #20]
      break;
 800b540:	e00c      	b.n	800b55c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b542:	4a13      	ldr	r2, [pc, #76]	; (800b590 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54a:	4a10      	ldr	r2, [pc, #64]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b54c:	68d2      	ldr	r2, [r2, #12]
 800b54e:	0a12      	lsrs	r2, r2, #8
 800b550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b554:	fb02 f303 	mul.w	r3, r2, r3
 800b558:	617b      	str	r3, [r7, #20]
      break;
 800b55a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b55c:	4b0b      	ldr	r3, [pc, #44]	; (800b58c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	0e5b      	lsrs	r3, r3, #25
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	3301      	adds	r3, #1
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	fbb2 f3f3 	udiv	r3, r2, r3
 800b574:	613b      	str	r3, [r7, #16]
 800b576:	e001      	b.n	800b57c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b57c:	693b      	ldr	r3, [r7, #16]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	371c      	adds	r7, #28
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	40021000 	.word	0x40021000
 800b590:	00f42400 	.word	0x00f42400
 800b594:	007a1200 	.word	0x007a1200

0800b598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b598:	b480      	push	{r7}
 800b59a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b59c:	4b03      	ldr	r3, [pc, #12]	; (800b5ac <HAL_RCC_GetHCLKFreq+0x14>)
 800b59e:	681b      	ldr	r3, [r3, #0]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20000c34 	.word	0x20000c34

0800b5b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	; (800b630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b5c0:	4b1b      	ldr	r3, [pc, #108]	; (800b630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	091b      	lsrs	r3, r3, #4
 800b5c6:	f003 030f 	and.w	r3, r3, #15
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d10c      	bne.n	800b5ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b5d4:	4a17      	ldr	r2, [pc, #92]	; (800b634 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5dc:	4a14      	ldr	r2, [pc, #80]	; (800b630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5de:	68d2      	ldr	r2, [r2, #12]
 800b5e0:	0a12      	lsrs	r2, r2, #8
 800b5e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b5e6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ea:	617b      	str	r3, [r7, #20]
    break;
 800b5ec:	e00c      	b.n	800b608 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b5ee:	4a12      	ldr	r2, [pc, #72]	; (800b638 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f6:	4a0e      	ldr	r2, [pc, #56]	; (800b630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5f8:	68d2      	ldr	r2, [r2, #12]
 800b5fa:	0a12      	lsrs	r2, r2, #8
 800b5fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b600:	fb02 f303 	mul.w	r3, r2, r3
 800b604:	617b      	str	r3, [r7, #20]
    break;
 800b606:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b608:	4b09      	ldr	r3, [pc, #36]	; (800b630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	0e5b      	lsrs	r3, r3, #25
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	3301      	adds	r3, #1
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b622:	687b      	ldr	r3, [r7, #4]
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	40021000 	.word	0x40021000
 800b634:	007a1200 	.word	0x007a1200
 800b638:	00f42400 	.word	0x00f42400

0800b63c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b644:	2300      	movs	r3, #0
 800b646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b648:	2300      	movs	r3, #0
 800b64a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8098 	beq.w	800b78a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b65a:	2300      	movs	r3, #0
 800b65c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b65e:	4b43      	ldr	r3, [pc, #268]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10d      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b66a:	4b40      	ldr	r3, [pc, #256]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b66e:	4a3f      	ldr	r2, [pc, #252]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b674:	6593      	str	r3, [r2, #88]	; 0x58
 800b676:	4b3d      	ldr	r3, [pc, #244]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b67e:	60bb      	str	r3, [r7, #8]
 800b680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b682:	2301      	movs	r3, #1
 800b684:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b686:	4b3a      	ldr	r3, [pc, #232]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a39      	ldr	r2, [pc, #228]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b692:	f7fc fc13 	bl	8007ebc <HAL_GetTick>
 800b696:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b698:	e009      	b.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b69a:	f7fc fc0f 	bl	8007ebc <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d902      	bls.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	74fb      	strb	r3, [r7, #19]
        break;
 800b6ac:	e005      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ae:	4b30      	ldr	r3, [pc, #192]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0ef      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b6ba:	7cfb      	ldrb	r3, [r7, #19]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d159      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b6c0:	4b2a      	ldr	r3, [pc, #168]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01e      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d019      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b6dc:	4b23      	ldr	r3, [pc, #140]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b6e8:	4b20      	ldr	r3, [pc, #128]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ee:	4a1f      	ldr	r2, [pc, #124]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b6f8:	4b1c      	ldr	r3, [pc, #112]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b708:	4a18      	ldr	r2, [pc, #96]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b71a:	f7fc fbcf 	bl	8007ebc <HAL_GetTick>
 800b71e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b720:	e00b      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b722:	f7fc fbcb 	bl	8007ebc <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b730:	4293      	cmp	r3, r2
 800b732:	d902      	bls.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	74fb      	strb	r3, [r7, #19]
            break;
 800b738:	e006      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b73a:	4b0c      	ldr	r3, [pc, #48]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d0ec      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b748:	7cfb      	ldrb	r3, [r7, #19]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10b      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b74e:	4b07      	ldr	r3, [pc, #28]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75c:	4903      	ldr	r1, [pc, #12]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b75e:	4313      	orrs	r3, r2
 800b760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b764:	e008      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b766:	7cfb      	ldrb	r3, [r7, #19]
 800b768:	74bb      	strb	r3, [r7, #18]
 800b76a:	e005      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b76c:	40021000 	.word	0x40021000
 800b770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b774:	7cfb      	ldrb	r3, [r7, #19]
 800b776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b778:	7c7b      	ldrb	r3, [r7, #17]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d105      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b77e:	4baf      	ldr	r3, [pc, #700]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b782:	4aae      	ldr	r2, [pc, #696]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b796:	4ba9      	ldr	r3, [pc, #676]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79c:	f023 0203 	bic.w	r2, r3, #3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	49a5      	ldr	r1, [pc, #660]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00a      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b7b8:	4ba0      	ldr	r3, [pc, #640]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7be:	f023 020c 	bic.w	r2, r3, #12
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	499d      	ldr	r1, [pc, #628]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b7da:	4b98      	ldr	r3, [pc, #608]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	4994      	ldr	r1, [pc, #592]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0308 	and.w	r3, r3, #8
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b7fc:	4b8f      	ldr	r3, [pc, #572]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	498c      	ldr	r1, [pc, #560]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b80c:	4313      	orrs	r3, r2
 800b80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b81e:	4b87      	ldr	r3, [pc, #540]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	4983      	ldr	r1, [pc, #524]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00a      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b840:	4b7e      	ldr	r3, [pc, #504]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	497b      	ldr	r1, [pc, #492]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b850:	4313      	orrs	r3, r2
 800b852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b862:	4b76      	ldr	r3, [pc, #472]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b868:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	4972      	ldr	r1, [pc, #456]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b872:	4313      	orrs	r3, r2
 800b874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b884:	4b6d      	ldr	r3, [pc, #436]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	496a      	ldr	r1, [pc, #424]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b894:	4313      	orrs	r3, r2
 800b896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8a6:	4b65      	ldr	r3, [pc, #404]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	4961      	ldr	r1, [pc, #388]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00a      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8c8:	4b5c      	ldr	r3, [pc, #368]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8ce:	f023 0203 	bic.w	r2, r3, #3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	4959      	ldr	r1, [pc, #356]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00a      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8ea:	4b54      	ldr	r3, [pc, #336]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	4950      	ldr	r1, [pc, #320]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d015      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b90c:	4b4b      	ldr	r3, [pc, #300]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91a:	4948      	ldr	r1, [pc, #288]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b92a:	d105      	bne.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b92c:	4b43      	ldr	r3, [pc, #268]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	4a42      	ldr	r2, [pc, #264]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b936:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b940:	2b00      	cmp	r3, #0
 800b942:	d015      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b944:	4b3d      	ldr	r3, [pc, #244]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b94a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b952:	493a      	ldr	r1, [pc, #232]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b954:	4313      	orrs	r3, r2
 800b956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b962:	d105      	bne.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b964:	4b35      	ldr	r3, [pc, #212]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	4a34      	ldr	r2, [pc, #208]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b96a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b96e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d015      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b97c:	4b2f      	ldr	r3, [pc, #188]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b982:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	492c      	ldr	r1, [pc, #176]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b99a:	d105      	bne.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b99c:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d015      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9b4:	4b21      	ldr	r3, [pc, #132]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c2:	491e      	ldr	r1, [pc, #120]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9d2:	d105      	bne.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9d4:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	4a18      	ldr	r2, [pc, #96]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d015      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9ec:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fa:	4910      	ldr	r1, [pc, #64]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba0a:	d105      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	4a0a      	ldr	r2, [pc, #40]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d018      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ba24:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba32:	4902      	ldr	r1, [pc, #8]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba34:	4313      	orrs	r3, r2
 800ba36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ba3a:	e001      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800ba3c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba48:	d105      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba4a:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	4a20      	ldr	r2, [pc, #128]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba54:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d015      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ba62:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba68:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba70:	4917      	ldr	r1, [pc, #92]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba80:	d105      	bne.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba82:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	4a12      	ldr	r2, [pc, #72]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba8c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d015      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa8:	4909      	ldr	r1, [pc, #36]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bab8:	d105      	bne.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800baba:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	4a04      	ldr	r2, [pc, #16]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bac4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bac6:	7cbb      	ldrb	r3, [r7, #18]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	40021000 	.word	0x40021000

0800bad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e084      	b.n	800bbf0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d106      	bne.n	800bb06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7fb fbfd 	bl	8007300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb1c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb26:	d902      	bls.n	800bb2e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e002      	b.n	800bb34 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb3c:	d007      	beq.n	800bb4e <HAL_SPI_Init+0x7a>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb46:	d002      	beq.n	800bb4e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb5e:	d903      	bls.n	800bb68 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2202      	movs	r2, #2
 800bb64:	631a      	str	r2, [r3, #48]	; 0x30
 800bb66:	e002      	b.n	800bb6e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	431a      	orrs	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	69db      	ldr	r3, [r3, #28]
 800bb92:	431a      	orrs	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	ea42 0103 	orr.w	r1, r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	f003 0204 	and.w	r2, r3, #4
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	ea42 0103 	orr.w	r1, r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	69da      	ldr	r2, [r3, #28]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e049      	b.n	800bc9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7fc f802 	bl	8007c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f000 fe9e 	bl	800c978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d001      	beq.n	800bcc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e019      	b.n	800bcf4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <HAL_TIM_Base_Start+0x58>)
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b06      	cmp	r3, #6
 800bcd8:	d00b      	beq.n	800bcf2 <HAL_TIM_Base_Start+0x4a>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce0:	d007      	beq.n	800bcf2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f042 0201 	orr.w	r2, r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	00010007 	.word	0x00010007

0800bd04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d001      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e021      	b.n	800bd60 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f042 0201 	orr.w	r2, r2, #1
 800bd32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689a      	ldr	r2, [r3, #8]
 800bd3a:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <HAL_TIM_Base_Start_IT+0x68>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b06      	cmp	r3, #6
 800bd44:	d00b      	beq.n	800bd5e <HAL_TIM_Base_Start_IT+0x5a>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd4c:	d007      	beq.n	800bd5e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f042 0201 	orr.w	r2, r2, #1
 800bd5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	00010007 	.word	0x00010007

0800bd70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68da      	ldr	r2, [r3, #12]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 0201 	bic.w	r2, r2, #1
 800bd86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	6a1a      	ldr	r2, [r3, #32]
 800bd8e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd92:	4013      	ands	r3, r2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10f      	bne.n	800bdb8 <HAL_TIM_Base_Stop_IT+0x48>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6a1a      	ldr	r2, [r3, #32]
 800bd9e:	f244 4344 	movw	r3, #17476	; 0x4444
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d107      	bne.n	800bdb8 <HAL_TIM_Base_Stop_IT+0x48>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 0201 	bic.w	r2, r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e049      	b.n	800be74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d106      	bne.n	800bdfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f841 	bl	800be7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3304      	adds	r3, #4
 800be0a:	4619      	mov	r1, r3
 800be0c:	4610      	mov	r0, r2
 800be0e:	f000 fdb3 	bl	800c978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d109      	bne.n	800beb4 <HAL_TIM_PWM_Start+0x24>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	bf14      	ite	ne
 800beac:	2301      	movne	r3, #1
 800beae:	2300      	moveq	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	e03c      	b.n	800bf2e <HAL_TIM_PWM_Start+0x9e>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d109      	bne.n	800bece <HAL_TIM_PWM_Start+0x3e>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	bf14      	ite	ne
 800bec6:	2301      	movne	r3, #1
 800bec8:	2300      	moveq	r3, #0
 800beca:	b2db      	uxtb	r3, r3
 800becc:	e02f      	b.n	800bf2e <HAL_TIM_PWM_Start+0x9e>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b08      	cmp	r3, #8
 800bed2:	d109      	bne.n	800bee8 <HAL_TIM_PWM_Start+0x58>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	bf14      	ite	ne
 800bee0:	2301      	movne	r3, #1
 800bee2:	2300      	moveq	r3, #0
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	e022      	b.n	800bf2e <HAL_TIM_PWM_Start+0x9e>
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2b0c      	cmp	r3, #12
 800beec:	d109      	bne.n	800bf02 <HAL_TIM_PWM_Start+0x72>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	bf14      	ite	ne
 800befa:	2301      	movne	r3, #1
 800befc:	2300      	moveq	r3, #0
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	e015      	b.n	800bf2e <HAL_TIM_PWM_Start+0x9e>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b10      	cmp	r3, #16
 800bf06:	d109      	bne.n	800bf1c <HAL_TIM_PWM_Start+0x8c>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	bf14      	ite	ne
 800bf14:	2301      	movne	r3, #1
 800bf16:	2300      	moveq	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	e008      	b.n	800bf2e <HAL_TIM_PWM_Start+0x9e>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	bf14      	ite	ne
 800bf28:	2301      	movne	r3, #1
 800bf2a:	2300      	moveq	r3, #0
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e073      	b.n	800c01e <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d104      	bne.n	800bf46 <HAL_TIM_PWM_Start+0xb6>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf44:	e023      	b.n	800bf8e <HAL_TIM_PWM_Start+0xfe>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d104      	bne.n	800bf56 <HAL_TIM_PWM_Start+0xc6>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf54:	e01b      	b.n	800bf8e <HAL_TIM_PWM_Start+0xfe>
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b08      	cmp	r3, #8
 800bf5a:	d104      	bne.n	800bf66 <HAL_TIM_PWM_Start+0xd6>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf64:	e013      	b.n	800bf8e <HAL_TIM_PWM_Start+0xfe>
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b0c      	cmp	r3, #12
 800bf6a:	d104      	bne.n	800bf76 <HAL_TIM_PWM_Start+0xe6>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf74:	e00b      	b.n	800bf8e <HAL_TIM_PWM_Start+0xfe>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b10      	cmp	r3, #16
 800bf7a:	d104      	bne.n	800bf86 <HAL_TIM_PWM_Start+0xf6>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf84:	e003      	b.n	800bf8e <HAL_TIM_PWM_Start+0xfe>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2201      	movs	r2, #1
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f001 fa18 	bl	800d3cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a21      	ldr	r2, [pc, #132]	; (800c028 <HAL_TIM_PWM_Start+0x198>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d018      	beq.n	800bfd8 <HAL_TIM_PWM_Start+0x148>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <HAL_TIM_PWM_Start+0x19c>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d013      	beq.n	800bfd8 <HAL_TIM_PWM_Start+0x148>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1e      	ldr	r2, [pc, #120]	; (800c030 <HAL_TIM_PWM_Start+0x1a0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d00e      	beq.n	800bfd8 <HAL_TIM_PWM_Start+0x148>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1d      	ldr	r2, [pc, #116]	; (800c034 <HAL_TIM_PWM_Start+0x1a4>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d009      	beq.n	800bfd8 <HAL_TIM_PWM_Start+0x148>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <HAL_TIM_PWM_Start+0x1a8>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d004      	beq.n	800bfd8 <HAL_TIM_PWM_Start+0x148>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a1a      	ldr	r2, [pc, #104]	; (800c03c <HAL_TIM_PWM_Start+0x1ac>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d101      	bne.n	800bfdc <HAL_TIM_PWM_Start+0x14c>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e000      	b.n	800bfde <HAL_TIM_PWM_Start+0x14e>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d007      	beq.n	800bff2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	4b11      	ldr	r3, [pc, #68]	; (800c040 <HAL_TIM_PWM_Start+0x1b0>)
 800bffa:	4013      	ands	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b06      	cmp	r3, #6
 800c002:	d00b      	beq.n	800c01c <HAL_TIM_PWM_Start+0x18c>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00a:	d007      	beq.n	800c01c <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f042 0201 	orr.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	40012c00 	.word	0x40012c00
 800c02c:	40013400 	.word	0x40013400
 800c030:	40014000 	.word	0x40014000
 800c034:	40014400 	.word	0x40014400
 800c038:	40014800 	.word	0x40014800
 800c03c:	40015000 	.word	0x40015000
 800c040:	00010007 	.word	0x00010007

0800c044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e097      	b.n	800c188 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d106      	bne.n	800c072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7fb fd8f 	bl	8007b90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2202      	movs	r2, #2
 800c076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	6812      	ldr	r2, [r2, #0]
 800c084:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c088:	f023 0307 	bic.w	r3, r3, #7
 800c08c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3304      	adds	r3, #4
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f000 fc6d 	bl	800c978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c6:	f023 0303 	bic.w	r3, r3, #3
 800c0ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	689a      	ldr	r2, [r3, #8]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	021b      	lsls	r3, r3, #8
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c0e4:	f023 030c 	bic.w	r3, r3, #12
 800c0e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	021b      	lsls	r3, r3, #8
 800c100:	4313      	orrs	r3, r2
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	4313      	orrs	r3, r2
 800c106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	011a      	lsls	r2, r3, #4
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	031b      	lsls	r3, r3, #12
 800c114:	4313      	orrs	r3, r2
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	4313      	orrs	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c122:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c12a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	4313      	orrs	r3, r2
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d122      	bne.n	800c1ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d11b      	bne.n	800c1ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f06f 0202 	mvn.w	r2, #2
 800c1bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	f003 0303 	and.w	r3, r3, #3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fbb2 	bl	800c93c <HAL_TIM_IC_CaptureCallback>
 800c1d8:	e005      	b.n	800c1e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fba4 	bl	800c928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fbb5 	bl	800c950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	f003 0304 	and.w	r3, r3, #4
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	d122      	bne.n	800c240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b04      	cmp	r3, #4
 800c206:	d11b      	bne.n	800c240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f06f 0204 	mvn.w	r2, #4
 800c210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fb88 	bl	800c93c <HAL_TIM_IC_CaptureCallback>
 800c22c:	e005      	b.n	800c23a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fb7a 	bl	800c928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fb8b 	bl	800c950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f003 0308 	and.w	r3, r3, #8
 800c24a:	2b08      	cmp	r3, #8
 800c24c:	d122      	bne.n	800c294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	f003 0308 	and.w	r3, r3, #8
 800c258:	2b08      	cmp	r3, #8
 800c25a:	d11b      	bne.n	800c294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f06f 0208 	mvn.w	r2, #8
 800c264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2204      	movs	r2, #4
 800c26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fb5e 	bl	800c93c <HAL_TIM_IC_CaptureCallback>
 800c280:	e005      	b.n	800c28e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fb50 	bl	800c928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fb61 	bl	800c950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	f003 0310 	and.w	r3, r3, #16
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	d122      	bne.n	800c2e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	f003 0310 	and.w	r3, r3, #16
 800c2ac:	2b10      	cmp	r3, #16
 800c2ae:	d11b      	bne.n	800c2e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f06f 0210 	mvn.w	r2, #16
 800c2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2208      	movs	r2, #8
 800c2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	69db      	ldr	r3, [r3, #28]
 800c2c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fb34 	bl	800c93c <HAL_TIM_IC_CaptureCallback>
 800c2d4:	e005      	b.n	800c2e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fb26 	bl	800c928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fb37 	bl	800c950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d10e      	bne.n	800c314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	f003 0301 	and.w	r3, r3, #1
 800c300:	2b01      	cmp	r3, #1
 800c302:	d107      	bne.n	800c314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f06f 0201 	mvn.w	r2, #1
 800c30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fb00 	bl	800c914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31e:	2b80      	cmp	r3, #128	; 0x80
 800c320:	d10e      	bne.n	800c340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c32c:	2b80      	cmp	r3, #128	; 0x80
 800c32e:	d107      	bne.n	800c340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 f9be 	bl	800d6bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34e:	d10e      	bne.n	800c36e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35a:	2b80      	cmp	r3, #128	; 0x80
 800c35c:	d107      	bne.n	800c36e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f001 f9b1 	bl	800d6d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b40      	cmp	r3, #64	; 0x40
 800c37a:	d10e      	bne.n	800c39a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c386:	2b40      	cmp	r3, #64	; 0x40
 800c388:	d107      	bne.n	800c39a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fae5 	bl	800c964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	f003 0320 	and.w	r3, r3, #32
 800c3a4:	2b20      	cmp	r3, #32
 800c3a6:	d10e      	bne.n	800c3c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f003 0320 	and.w	r3, r3, #32
 800c3b2:	2b20      	cmp	r3, #32
 800c3b4:	d107      	bne.n	800c3c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f06f 0220 	mvn.w	r2, #32
 800c3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f001 f971 	bl	800d6a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3d4:	d10f      	bne.n	800c3f6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3e4:	d107      	bne.n	800c3f6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f001 f977 	bl	800d6e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c404:	d10f      	bne.n	800c426 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c414:	d107      	bne.n	800c426 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f001 f969 	bl	800d6f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c434:	d10f      	bne.n	800c456 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c444:	d107      	bne.n	800c456 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f001 f95b 	bl	800d70c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c464:	d10f      	bne.n	800c486 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c474:	d107      	bne.n	800c486 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 f94d 	bl	800d720 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d101      	bne.n	800c4aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	e0fd      	b.n	800c6a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b14      	cmp	r3, #20
 800c4b6:	f200 80f0 	bhi.w	800c69a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c515 	.word	0x0800c515
 800c4c4:	0800c69b 	.word	0x0800c69b
 800c4c8:	0800c69b 	.word	0x0800c69b
 800c4cc:	0800c69b 	.word	0x0800c69b
 800c4d0:	0800c555 	.word	0x0800c555
 800c4d4:	0800c69b 	.word	0x0800c69b
 800c4d8:	0800c69b 	.word	0x0800c69b
 800c4dc:	0800c69b 	.word	0x0800c69b
 800c4e0:	0800c597 	.word	0x0800c597
 800c4e4:	0800c69b 	.word	0x0800c69b
 800c4e8:	0800c69b 	.word	0x0800c69b
 800c4ec:	0800c69b 	.word	0x0800c69b
 800c4f0:	0800c5d7 	.word	0x0800c5d7
 800c4f4:	0800c69b 	.word	0x0800c69b
 800c4f8:	0800c69b 	.word	0x0800c69b
 800c4fc:	0800c69b 	.word	0x0800c69b
 800c500:	0800c619 	.word	0x0800c619
 800c504:	0800c69b 	.word	0x0800c69b
 800c508:	0800c69b 	.word	0x0800c69b
 800c50c:	0800c69b 	.word	0x0800c69b
 800c510:	0800c659 	.word	0x0800c659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fad4 	bl	800cac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	699a      	ldr	r2, [r3, #24]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f042 0208 	orr.w	r2, r2, #8
 800c52e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	699a      	ldr	r2, [r3, #24]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f022 0204 	bic.w	r2, r2, #4
 800c53e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6999      	ldr	r1, [r3, #24]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	430a      	orrs	r2, r1
 800c550:	619a      	str	r2, [r3, #24]
      break;
 800c552:	e0a3      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fb4e 	bl	800cbfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	699a      	ldr	r2, [r3, #24]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c56e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699a      	ldr	r2, [r3, #24]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c57e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6999      	ldr	r1, [r3, #24]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	021a      	lsls	r2, r3, #8
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	430a      	orrs	r2, r1
 800c592:	619a      	str	r2, [r3, #24]
      break;
 800c594:	e082      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fbc1 	bl	800cd24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	69da      	ldr	r2, [r3, #28]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f042 0208 	orr.w	r2, r2, #8
 800c5b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	69da      	ldr	r2, [r3, #28]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0204 	bic.w	r2, r2, #4
 800c5c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	69d9      	ldr	r1, [r3, #28]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	691a      	ldr	r2, [r3, #16]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	61da      	str	r2, [r3, #28]
      break;
 800c5d4:	e062      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fc33 	bl	800ce48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69da      	ldr	r2, [r3, #28]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	69da      	ldr	r2, [r3, #28]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	69d9      	ldr	r1, [r3, #28]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	021a      	lsls	r2, r3, #8
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	430a      	orrs	r2, r1
 800c614:	61da      	str	r2, [r3, #28]
      break;
 800c616:	e041      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 fca6 	bl	800cf70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f042 0208 	orr.w	r2, r2, #8
 800c632:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f022 0204 	bic.w	r2, r2, #4
 800c642:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	691a      	ldr	r2, [r3, #16]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c656:	e021      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fcf0 	bl	800d044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c672:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c682:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	021a      	lsls	r2, r3, #8
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	430a      	orrs	r2, r1
 800c696:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c698:	e000      	b.n	800c69c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c69a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop

0800c6b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d101      	bne.n	800c6c8 <HAL_TIM_ConfigClockSource+0x18>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e0d2      	b.n	800c86e <HAL_TIM_ConfigClockSource+0x1be>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c6e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c6ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c704:	f000 80a9 	beq.w	800c85a <HAL_TIM_ConfigClockSource+0x1aa>
 800c708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c70c:	d81a      	bhi.n	800c744 <HAL_TIM_ConfigClockSource+0x94>
 800c70e:	2b30      	cmp	r3, #48	; 0x30
 800c710:	f000 809a 	beq.w	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c714:	2b30      	cmp	r3, #48	; 0x30
 800c716:	d809      	bhi.n	800c72c <HAL_TIM_ConfigClockSource+0x7c>
 800c718:	2b10      	cmp	r3, #16
 800c71a:	f000 8095 	beq.w	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c71e:	2b20      	cmp	r3, #32
 800c720:	f000 8092 	beq.w	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 808f 	beq.w	800c848 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c72a:	e097      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c72c:	2b50      	cmp	r3, #80	; 0x50
 800c72e:	d05b      	beq.n	800c7e8 <HAL_TIM_ConfigClockSource+0x138>
 800c730:	2b50      	cmp	r3, #80	; 0x50
 800c732:	d802      	bhi.n	800c73a <HAL_TIM_ConfigClockSource+0x8a>
 800c734:	2b40      	cmp	r3, #64	; 0x40
 800c736:	d077      	beq.n	800c828 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c738:	e090      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c73a:	2b60      	cmp	r3, #96	; 0x60
 800c73c:	d064      	beq.n	800c808 <HAL_TIM_ConfigClockSource+0x158>
 800c73e:	2b70      	cmp	r3, #112	; 0x70
 800c740:	d028      	beq.n	800c794 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c742:	e08b      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c744:	4a4c      	ldr	r2, [pc, #304]	; (800c878 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d07e      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c74a:	4a4b      	ldr	r2, [pc, #300]	; (800c878 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d810      	bhi.n	800c772 <HAL_TIM_ConfigClockSource+0xc2>
 800c750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c754:	d078      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c75a:	d803      	bhi.n	800c764 <HAL_TIM_ConfigClockSource+0xb4>
 800c75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c760:	d02f      	beq.n	800c7c2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c762:	e07b      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c764:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c768:	d06e      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c76a:	4a44      	ldr	r2, [pc, #272]	; (800c87c <HAL_TIM_ConfigClockSource+0x1cc>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d06b      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c770:	e074      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c772:	4a43      	ldr	r2, [pc, #268]	; (800c880 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d067      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c778:	4a41      	ldr	r2, [pc, #260]	; (800c880 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d803      	bhi.n	800c786 <HAL_TIM_ConfigClockSource+0xd6>
 800c77e:	4a41      	ldr	r2, [pc, #260]	; (800c884 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d061      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c784:	e06a      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c786:	4a40      	ldr	r2, [pc, #256]	; (800c888 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d05d      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
 800c78c:	4a3f      	ldr	r2, [pc, #252]	; (800c88c <HAL_TIM_ConfigClockSource+0x1dc>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d05a      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c792:	e063      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	6899      	ldr	r1, [r3, #8]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685a      	ldr	r2, [r3, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f000 fdf2 	bl	800d38c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c7b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	609a      	str	r2, [r3, #8]
      break;
 800c7c0:	e04c      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	6899      	ldr	r1, [r3, #8]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f000 fddb 	bl	800d38c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7e4:	609a      	str	r2, [r3, #8]
      break;
 800c7e6:	e039      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6818      	ldr	r0, [r3, #0]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	6859      	ldr	r1, [r3, #4]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	f000 fd4d 	bl	800d294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2150      	movs	r1, #80	; 0x50
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fda6 	bl	800d352 <TIM_ITRx_SetConfig>
      break;
 800c806:	e029      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	6859      	ldr	r1, [r3, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	461a      	mov	r2, r3
 800c816:	f000 fd6c 	bl	800d2f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2160      	movs	r1, #96	; 0x60
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fd96 	bl	800d352 <TIM_ITRx_SetConfig>
      break;
 800c826:	e019      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6818      	ldr	r0, [r3, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	6859      	ldr	r1, [r3, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	461a      	mov	r2, r3
 800c836:	f000 fd2d 	bl	800d294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2140      	movs	r1, #64	; 0x40
 800c840:	4618      	mov	r0, r3
 800c842:	f000 fd86 	bl	800d352 <TIM_ITRx_SetConfig>
      break;
 800c846:	e009      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4619      	mov	r1, r3
 800c852:	4610      	mov	r0, r2
 800c854:	f000 fd7d 	bl	800d352 <TIM_ITRx_SetConfig>
      break;
 800c858:	e000      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c85a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	00100030 	.word	0x00100030
 800c87c:	00100020 	.word	0x00100020
 800c880:	00100050 	.word	0x00100050
 800c884:	00100040 	.word	0x00100040
 800c888:	00100060 	.word	0x00100060
 800c88c:	00100070 	.word	0x00100070

0800c890 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e031      	b.n	800c90c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fc2e 	bl	800d11c <TIM_SlaveTimer_SetConfig>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d009      	beq.n	800c8da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e018      	b.n	800c90c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68da      	ldr	r2, [r3, #12]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a46      	ldr	r2, [pc, #280]	; (800caa4 <TIM_Base_SetConfig+0x12c>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d017      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c996:	d013      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a43      	ldr	r2, [pc, #268]	; (800caa8 <TIM_Base_SetConfig+0x130>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00f      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a42      	ldr	r2, [pc, #264]	; (800caac <TIM_Base_SetConfig+0x134>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00b      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a41      	ldr	r2, [pc, #260]	; (800cab0 <TIM_Base_SetConfig+0x138>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d007      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a40      	ldr	r2, [pc, #256]	; (800cab4 <TIM_Base_SetConfig+0x13c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d003      	beq.n	800c9c0 <TIM_Base_SetConfig+0x48>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a3f      	ldr	r2, [pc, #252]	; (800cab8 <TIM_Base_SetConfig+0x140>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d108      	bne.n	800c9d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a33      	ldr	r2, [pc, #204]	; (800caa4 <TIM_Base_SetConfig+0x12c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d023      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e0:	d01f      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a30      	ldr	r2, [pc, #192]	; (800caa8 <TIM_Base_SetConfig+0x130>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d01b      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a2f      	ldr	r2, [pc, #188]	; (800caac <TIM_Base_SetConfig+0x134>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d017      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a2e      	ldr	r2, [pc, #184]	; (800cab0 <TIM_Base_SetConfig+0x138>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d013      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <TIM_Base_SetConfig+0x13c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d00f      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a2d      	ldr	r2, [pc, #180]	; (800cabc <TIM_Base_SetConfig+0x144>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00b      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a2c      	ldr	r2, [pc, #176]	; (800cac0 <TIM_Base_SetConfig+0x148>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d007      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a2b      	ldr	r2, [pc, #172]	; (800cac4 <TIM_Base_SetConfig+0x14c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d003      	beq.n	800ca22 <TIM_Base_SetConfig+0xaa>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a26      	ldr	r2, [pc, #152]	; (800cab8 <TIM_Base_SetConfig+0x140>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d108      	bne.n	800ca34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a12      	ldr	r2, [pc, #72]	; (800caa4 <TIM_Base_SetConfig+0x12c>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d013      	beq.n	800ca88 <TIM_Base_SetConfig+0x110>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <TIM_Base_SetConfig+0x13c>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d00f      	beq.n	800ca88 <TIM_Base_SetConfig+0x110>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a14      	ldr	r2, [pc, #80]	; (800cabc <TIM_Base_SetConfig+0x144>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00b      	beq.n	800ca88 <TIM_Base_SetConfig+0x110>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a13      	ldr	r2, [pc, #76]	; (800cac0 <TIM_Base_SetConfig+0x148>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d007      	beq.n	800ca88 <TIM_Base_SetConfig+0x110>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a12      	ldr	r2, [pc, #72]	; (800cac4 <TIM_Base_SetConfig+0x14c>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d003      	beq.n	800ca88 <TIM_Base_SetConfig+0x110>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a0d      	ldr	r2, [pc, #52]	; (800cab8 <TIM_Base_SetConfig+0x140>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d103      	bne.n	800ca90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	691a      	ldr	r2, [r3, #16]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	615a      	str	r2, [r3, #20]
}
 800ca96:	bf00      	nop
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	40012c00 	.word	0x40012c00
 800caa8:	40000400 	.word	0x40000400
 800caac:	40000800 	.word	0x40000800
 800cab0:	40000c00 	.word	0x40000c00
 800cab4:	40013400 	.word	0x40013400
 800cab8:	40015000 	.word	0x40015000
 800cabc:	40014000 	.word	0x40014000
 800cac0:	40014400 	.word	0x40014400
 800cac4:	40014800 	.word	0x40014800

0800cac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	f023 0201 	bic.w	r2, r3, #1
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cafa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 0303 	bic.w	r3, r3, #3
 800cb02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f023 0302 	bic.w	r3, r3, #2
 800cb14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a30      	ldr	r2, [pc, #192]	; (800cbe4 <TIM_OC1_SetConfig+0x11c>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d013      	beq.n	800cb50 <TIM_OC1_SetConfig+0x88>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a2f      	ldr	r2, [pc, #188]	; (800cbe8 <TIM_OC1_SetConfig+0x120>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d00f      	beq.n	800cb50 <TIM_OC1_SetConfig+0x88>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a2e      	ldr	r2, [pc, #184]	; (800cbec <TIM_OC1_SetConfig+0x124>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00b      	beq.n	800cb50 <TIM_OC1_SetConfig+0x88>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a2d      	ldr	r2, [pc, #180]	; (800cbf0 <TIM_OC1_SetConfig+0x128>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d007      	beq.n	800cb50 <TIM_OC1_SetConfig+0x88>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a2c      	ldr	r2, [pc, #176]	; (800cbf4 <TIM_OC1_SetConfig+0x12c>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d003      	beq.n	800cb50 <TIM_OC1_SetConfig+0x88>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a2b      	ldr	r2, [pc, #172]	; (800cbf8 <TIM_OC1_SetConfig+0x130>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10c      	bne.n	800cb6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f023 0308 	bic.w	r3, r3, #8
 800cb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f023 0304 	bic.w	r3, r3, #4
 800cb68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1d      	ldr	r2, [pc, #116]	; (800cbe4 <TIM_OC1_SetConfig+0x11c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d013      	beq.n	800cb9a <TIM_OC1_SetConfig+0xd2>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1c      	ldr	r2, [pc, #112]	; (800cbe8 <TIM_OC1_SetConfig+0x120>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d00f      	beq.n	800cb9a <TIM_OC1_SetConfig+0xd2>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1b      	ldr	r2, [pc, #108]	; (800cbec <TIM_OC1_SetConfig+0x124>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d00b      	beq.n	800cb9a <TIM_OC1_SetConfig+0xd2>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a1a      	ldr	r2, [pc, #104]	; (800cbf0 <TIM_OC1_SetConfig+0x128>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d007      	beq.n	800cb9a <TIM_OC1_SetConfig+0xd2>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a19      	ldr	r2, [pc, #100]	; (800cbf4 <TIM_OC1_SetConfig+0x12c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d003      	beq.n	800cb9a <TIM_OC1_SetConfig+0xd2>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a18      	ldr	r2, [pc, #96]	; (800cbf8 <TIM_OC1_SetConfig+0x130>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d111      	bne.n	800cbbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	621a      	str	r2, [r3, #32]
}
 800cbd8:	bf00      	nop
 800cbda:	371c      	adds	r7, #28
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	40012c00 	.word	0x40012c00
 800cbe8:	40013400 	.word	0x40013400
 800cbec:	40014000 	.word	0x40014000
 800cbf0:	40014400 	.word	0x40014400
 800cbf4:	40014800 	.word	0x40014800
 800cbf8:	40015000 	.word	0x40015000

0800cbfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	f023 0210 	bic.w	r2, r3, #16
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	021b      	lsls	r3, r3, #8
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f023 0320 	bic.w	r3, r3, #32
 800cc4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a2c      	ldr	r2, [pc, #176]	; (800cd0c <TIM_OC2_SetConfig+0x110>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d007      	beq.n	800cc70 <TIM_OC2_SetConfig+0x74>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a2b      	ldr	r2, [pc, #172]	; (800cd10 <TIM_OC2_SetConfig+0x114>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d003      	beq.n	800cc70 <TIM_OC2_SetConfig+0x74>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <TIM_OC2_SetConfig+0x118>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d10d      	bne.n	800cc8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a1f      	ldr	r2, [pc, #124]	; (800cd0c <TIM_OC2_SetConfig+0x110>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d013      	beq.n	800ccbc <TIM_OC2_SetConfig+0xc0>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a1e      	ldr	r2, [pc, #120]	; (800cd10 <TIM_OC2_SetConfig+0x114>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d00f      	beq.n	800ccbc <TIM_OC2_SetConfig+0xc0>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a1e      	ldr	r2, [pc, #120]	; (800cd18 <TIM_OC2_SetConfig+0x11c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d00b      	beq.n	800ccbc <TIM_OC2_SetConfig+0xc0>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a1d      	ldr	r2, [pc, #116]	; (800cd1c <TIM_OC2_SetConfig+0x120>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d007      	beq.n	800ccbc <TIM_OC2_SetConfig+0xc0>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a1c      	ldr	r2, [pc, #112]	; (800cd20 <TIM_OC2_SetConfig+0x124>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d003      	beq.n	800ccbc <TIM_OC2_SetConfig+0xc0>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a17      	ldr	r2, [pc, #92]	; (800cd14 <TIM_OC2_SetConfig+0x118>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d113      	bne.n	800cce4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	695b      	ldr	r3, [r3, #20]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	621a      	str	r2, [r3, #32]
}
 800ccfe:	bf00      	nop
 800cd00:	371c      	adds	r7, #28
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	40012c00 	.word	0x40012c00
 800cd10:	40013400 	.word	0x40013400
 800cd14:	40015000 	.word	0x40015000
 800cd18:	40014000 	.word	0x40014000
 800cd1c:	40014400 	.word	0x40014400
 800cd20:	40014800 	.word	0x40014800

0800cd24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f023 0303 	bic.w	r3, r3, #3
 800cd5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a2b      	ldr	r2, [pc, #172]	; (800ce30 <TIM_OC3_SetConfig+0x10c>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d007      	beq.n	800cd96 <TIM_OC3_SetConfig+0x72>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a2a      	ldr	r2, [pc, #168]	; (800ce34 <TIM_OC3_SetConfig+0x110>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d003      	beq.n	800cd96 <TIM_OC3_SetConfig+0x72>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a29      	ldr	r2, [pc, #164]	; (800ce38 <TIM_OC3_SetConfig+0x114>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d10d      	bne.n	800cdb2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	021b      	lsls	r3, r3, #8
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a1e      	ldr	r2, [pc, #120]	; (800ce30 <TIM_OC3_SetConfig+0x10c>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d013      	beq.n	800cde2 <TIM_OC3_SetConfig+0xbe>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a1d      	ldr	r2, [pc, #116]	; (800ce34 <TIM_OC3_SetConfig+0x110>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d00f      	beq.n	800cde2 <TIM_OC3_SetConfig+0xbe>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a1d      	ldr	r2, [pc, #116]	; (800ce3c <TIM_OC3_SetConfig+0x118>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00b      	beq.n	800cde2 <TIM_OC3_SetConfig+0xbe>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a1c      	ldr	r2, [pc, #112]	; (800ce40 <TIM_OC3_SetConfig+0x11c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d007      	beq.n	800cde2 <TIM_OC3_SetConfig+0xbe>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a1b      	ldr	r2, [pc, #108]	; (800ce44 <TIM_OC3_SetConfig+0x120>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d003      	beq.n	800cde2 <TIM_OC3_SetConfig+0xbe>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a16      	ldr	r2, [pc, #88]	; (800ce38 <TIM_OC3_SetConfig+0x114>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d113      	bne.n	800ce0a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cde8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	011b      	lsls	r3, r3, #4
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	621a      	str	r2, [r3, #32]
}
 800ce24:	bf00      	nop
 800ce26:	371c      	adds	r7, #28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	40012c00 	.word	0x40012c00
 800ce34:	40013400 	.word	0x40013400
 800ce38:	40015000 	.word	0x40015000
 800ce3c:	40014000 	.word	0x40014000
 800ce40:	40014400 	.word	0x40014400
 800ce44:	40014800 	.word	0x40014800

0800ce48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	021b      	lsls	r3, r3, #8
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	031b      	lsls	r3, r3, #12
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a2c      	ldr	r2, [pc, #176]	; (800cf58 <TIM_OC4_SetConfig+0x110>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d007      	beq.n	800cebc <TIM_OC4_SetConfig+0x74>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a2b      	ldr	r2, [pc, #172]	; (800cf5c <TIM_OC4_SetConfig+0x114>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d003      	beq.n	800cebc <TIM_OC4_SetConfig+0x74>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a2a      	ldr	r2, [pc, #168]	; (800cf60 <TIM_OC4_SetConfig+0x118>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d10d      	bne.n	800ced8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	031b      	lsls	r3, r3, #12
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	4313      	orrs	r3, r2
 800cece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ced6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a1f      	ldr	r2, [pc, #124]	; (800cf58 <TIM_OC4_SetConfig+0x110>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d013      	beq.n	800cf08 <TIM_OC4_SetConfig+0xc0>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a1e      	ldr	r2, [pc, #120]	; (800cf5c <TIM_OC4_SetConfig+0x114>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d00f      	beq.n	800cf08 <TIM_OC4_SetConfig+0xc0>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a1e      	ldr	r2, [pc, #120]	; (800cf64 <TIM_OC4_SetConfig+0x11c>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d00b      	beq.n	800cf08 <TIM_OC4_SetConfig+0xc0>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a1d      	ldr	r2, [pc, #116]	; (800cf68 <TIM_OC4_SetConfig+0x120>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d007      	beq.n	800cf08 <TIM_OC4_SetConfig+0xc0>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a1c      	ldr	r2, [pc, #112]	; (800cf6c <TIM_OC4_SetConfig+0x124>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d003      	beq.n	800cf08 <TIM_OC4_SetConfig+0xc0>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a17      	ldr	r2, [pc, #92]	; (800cf60 <TIM_OC4_SetConfig+0x118>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d113      	bne.n	800cf30 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf0e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf16:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	019b      	lsls	r3, r3, #6
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	019b      	lsls	r3, r3, #6
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	621a      	str	r2, [r3, #32]
}
 800cf4a:	bf00      	nop
 800cf4c:	371c      	adds	r7, #28
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	40012c00 	.word	0x40012c00
 800cf5c:	40013400 	.word	0x40013400
 800cf60:	40015000 	.word	0x40015000
 800cf64:	40014000 	.word	0x40014000
 800cf68:	40014400 	.word	0x40014400
 800cf6c:	40014800 	.word	0x40014800

0800cf70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b087      	sub	sp, #28
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cfb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	041b      	lsls	r3, r3, #16
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a19      	ldr	r2, [pc, #100]	; (800d02c <TIM_OC5_SetConfig+0xbc>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d013      	beq.n	800cff2 <TIM_OC5_SetConfig+0x82>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a18      	ldr	r2, [pc, #96]	; (800d030 <TIM_OC5_SetConfig+0xc0>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d00f      	beq.n	800cff2 <TIM_OC5_SetConfig+0x82>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a17      	ldr	r2, [pc, #92]	; (800d034 <TIM_OC5_SetConfig+0xc4>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d00b      	beq.n	800cff2 <TIM_OC5_SetConfig+0x82>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a16      	ldr	r2, [pc, #88]	; (800d038 <TIM_OC5_SetConfig+0xc8>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d007      	beq.n	800cff2 <TIM_OC5_SetConfig+0x82>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a15      	ldr	r2, [pc, #84]	; (800d03c <TIM_OC5_SetConfig+0xcc>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d003      	beq.n	800cff2 <TIM_OC5_SetConfig+0x82>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a14      	ldr	r2, [pc, #80]	; (800d040 <TIM_OC5_SetConfig+0xd0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d109      	bne.n	800d006 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	4313      	orrs	r3, r2
 800d004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	697a      	ldr	r2, [r7, #20]
 800d00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	621a      	str	r2, [r3, #32]
}
 800d020:	bf00      	nop
 800d022:	371c      	adds	r7, #28
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	40012c00 	.word	0x40012c00
 800d030:	40013400 	.word	0x40013400
 800d034:	40014000 	.word	0x40014000
 800d038:	40014400 	.word	0x40014400
 800d03c:	40014800 	.word	0x40014800
 800d040:	40015000 	.word	0x40015000

0800d044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d08a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	051b      	lsls	r3, r3, #20
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <TIM_OC6_SetConfig+0xc0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d013      	beq.n	800d0c8 <TIM_OC6_SetConfig+0x84>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a19      	ldr	r2, [pc, #100]	; (800d108 <TIM_OC6_SetConfig+0xc4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00f      	beq.n	800d0c8 <TIM_OC6_SetConfig+0x84>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a18      	ldr	r2, [pc, #96]	; (800d10c <TIM_OC6_SetConfig+0xc8>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d00b      	beq.n	800d0c8 <TIM_OC6_SetConfig+0x84>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a17      	ldr	r2, [pc, #92]	; (800d110 <TIM_OC6_SetConfig+0xcc>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d007      	beq.n	800d0c8 <TIM_OC6_SetConfig+0x84>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a16      	ldr	r2, [pc, #88]	; (800d114 <TIM_OC6_SetConfig+0xd0>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d003      	beq.n	800d0c8 <TIM_OC6_SetConfig+0x84>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a15      	ldr	r2, [pc, #84]	; (800d118 <TIM_OC6_SetConfig+0xd4>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d109      	bne.n	800d0dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	695b      	ldr	r3, [r3, #20]
 800d0d4:	029b      	lsls	r3, r3, #10
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	621a      	str	r2, [r3, #32]
}
 800d0f6:	bf00      	nop
 800d0f8:	371c      	adds	r7, #28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	40012c00 	.word	0x40012c00
 800d108:	40013400 	.word	0x40013400
 800d10c:	40014000 	.word	0x40014000
 800d110:	40014400 	.word	0x40014400
 800d114:	40014800 	.word	0x40014800
 800d118:	40015000 	.word	0x40015000

0800d11c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d138:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	4313      	orrs	r3, r2
 800d142:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d14a:	f023 0307 	bic.w	r3, r3, #7
 800d14e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	4313      	orrs	r3, r2
 800d158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2b70      	cmp	r3, #112	; 0x70
 800d168:	d034      	beq.n	800d1d4 <TIM_SlaveTimer_SetConfig+0xb8>
 800d16a:	2b70      	cmp	r3, #112	; 0x70
 800d16c:	d811      	bhi.n	800d192 <TIM_SlaveTimer_SetConfig+0x76>
 800d16e:	2b30      	cmp	r3, #48	; 0x30
 800d170:	d07d      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d172:	2b30      	cmp	r3, #48	; 0x30
 800d174:	d806      	bhi.n	800d184 <TIM_SlaveTimer_SetConfig+0x68>
 800d176:	2b10      	cmp	r3, #16
 800d178:	d079      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d17a:	2b20      	cmp	r3, #32
 800d17c:	d077      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d075      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800d182:	e075      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d184:	2b50      	cmp	r3, #80	; 0x50
 800d186:	d05e      	beq.n	800d246 <TIM_SlaveTimer_SetConfig+0x12a>
 800d188:	2b60      	cmp	r3, #96	; 0x60
 800d18a:	d066      	beq.n	800d25a <TIM_SlaveTimer_SetConfig+0x13e>
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	d02c      	beq.n	800d1ea <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800d190:	e06e      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d192:	4a3a      	ldr	r2, [pc, #232]	; (800d27c <TIM_SlaveTimer_SetConfig+0x160>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d06a      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d198:	4a38      	ldr	r2, [pc, #224]	; (800d27c <TIM_SlaveTimer_SetConfig+0x160>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d809      	bhi.n	800d1b2 <TIM_SlaveTimer_SetConfig+0x96>
 800d19e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d1a2:	d064      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d1a4:	4a36      	ldr	r2, [pc, #216]	; (800d280 <TIM_SlaveTimer_SetConfig+0x164>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d061      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d1aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1ae:	d05e      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d1b0:	e05e      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d1b2:	4a34      	ldr	r2, [pc, #208]	; (800d284 <TIM_SlaveTimer_SetConfig+0x168>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d05a      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d1b8:	4a32      	ldr	r2, [pc, #200]	; (800d284 <TIM_SlaveTimer_SetConfig+0x168>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d803      	bhi.n	800d1c6 <TIM_SlaveTimer_SetConfig+0xaa>
 800d1be:	4a32      	ldr	r2, [pc, #200]	; (800d288 <TIM_SlaveTimer_SetConfig+0x16c>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d054      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d1c4:	e054      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d1c6:	4a31      	ldr	r2, [pc, #196]	; (800d28c <TIM_SlaveTimer_SetConfig+0x170>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d050      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
 800d1cc:	4a30      	ldr	r2, [pc, #192]	; (800d290 <TIM_SlaveTimer_SetConfig+0x174>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d04d      	beq.n	800d26e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d1d2:	e04d      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	68d9      	ldr	r1, [r3, #12]
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	f000 f8d2 	bl	800d38c <TIM_ETR_SetConfig>
      break;
 800d1e8:	e042      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b05      	cmp	r3, #5
 800d1f0:	d004      	beq.n	800d1fc <TIM_SlaveTimer_SetConfig+0xe0>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800d1fa:	d101      	bne.n	800d200 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e038      	b.n	800d272 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a1a      	ldr	r2, [r3, #32]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f022 0201 	bic.w	r2, r2, #1
 800d216:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d226:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	4313      	orrs	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	621a      	str	r2, [r3, #32]
      break;
 800d244:	e014      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6818      	ldr	r0, [r3, #0]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	6899      	ldr	r1, [r3, #8]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	461a      	mov	r2, r3
 800d254:	f000 f81e 	bl	800d294 <TIM_TI1_ConfigInputStage>
      break;
 800d258:	e00a      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6818      	ldr	r0, [r3, #0]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	6899      	ldr	r1, [r3, #8]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	461a      	mov	r2, r3
 800d268:	f000 f843 	bl	800d2f2 <TIM_TI2_ConfigInputStage>
      break;
 800d26c:	e000      	b.n	800d270 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800d26e:	bf00      	nop
  }
  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	00100030 	.word	0x00100030
 800d280:	00100020 	.word	0x00100020
 800d284:	00100050 	.word	0x00100050
 800d288:	00100040 	.word	0x00100040
 800d28c:	00100060 	.word	0x00100060
 800d290:	00100070 	.word	0x00100070

0800d294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	f023 0201 	bic.w	r2, r3, #1
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	f023 030a 	bic.w	r3, r3, #10
 800d2d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	621a      	str	r2, [r3, #32]
}
 800d2e6:	bf00      	nop
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b087      	sub	sp, #28
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a1b      	ldr	r3, [r3, #32]
 800d302:	f023 0210 	bic.w	r2, r3, #16
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6a1b      	ldr	r3, [r3, #32]
 800d314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d31c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	031b      	lsls	r3, r3, #12
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	4313      	orrs	r3, r2
 800d326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d32e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	011b      	lsls	r3, r3, #4
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	4313      	orrs	r3, r2
 800d338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	621a      	str	r2, [r3, #32]
}
 800d346:	bf00      	nop
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d352:	b480      	push	{r7}
 800d354:	b085      	sub	sp, #20
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d36c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4313      	orrs	r3, r2
 800d374:	f043 0307 	orr.w	r3, r3, #7
 800d378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	609a      	str	r2, [r3, #8]
}
 800d380:	bf00      	nop
 800d382:	3714      	adds	r7, #20
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	021a      	lsls	r2, r3, #8
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	697a      	ldr	r2, [r7, #20]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	609a      	str	r2, [r3, #8]
}
 800d3c0:	bf00      	nop
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b087      	sub	sp, #28
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f003 031f 	and.w	r3, r3, #31
 800d3de:	2201      	movs	r2, #1
 800d3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1a      	ldr	r2, [r3, #32]
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	43db      	mvns	r3, r3
 800d3ee:	401a      	ands	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6a1a      	ldr	r2, [r3, #32]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	f003 031f 	and.w	r3, r3, #31
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	fa01 f303 	lsl.w	r3, r1, r3
 800d404:	431a      	orrs	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	621a      	str	r2, [r3, #32]
}
 800d40a:	bf00      	nop
 800d40c:	371c      	adds	r7, #28
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
	...

0800d418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d101      	bne.n	800d430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d42c:	2302      	movs	r3, #2
 800d42e:	e074      	b.n	800d51a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2202      	movs	r2, #2
 800d43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a34      	ldr	r2, [pc, #208]	; (800d528 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d009      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a33      	ldr	r2, [pc, #204]	; (800d52c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d004      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a31      	ldr	r2, [pc, #196]	; (800d530 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d108      	bne.n	800d480 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d474:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d48a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	4313      	orrs	r3, r2
 800d494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a21      	ldr	r2, [pc, #132]	; (800d528 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d022      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b0:	d01d      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a1f      	ldr	r2, [pc, #124]	; (800d534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d018      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a1d      	ldr	r2, [pc, #116]	; (800d538 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d013      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a1c      	ldr	r2, [pc, #112]	; (800d53c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00e      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a15      	ldr	r2, [pc, #84]	; (800d52c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d009      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a18      	ldr	r2, [pc, #96]	; (800d540 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d004      	beq.n	800d4ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a11      	ldr	r2, [pc, #68]	; (800d530 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d10c      	bne.n	800d508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	40012c00 	.word	0x40012c00
 800d52c:	40013400 	.word	0x40013400
 800d530:	40015000 	.word	0x40015000
 800d534:	40000400 	.word	0x40000400
 800d538:	40000800 	.word	0x40000800
 800d53c:	40000c00 	.word	0x40000c00
 800d540:	40014000 	.word	0x40014000

0800d544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d101      	bne.n	800d560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d55c:	2302      	movs	r3, #2
 800d55e:	e096      	b.n	800d68e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	4313      	orrs	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	4313      	orrs	r3, r2
 800d590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	041b      	lsls	r3, r3, #16
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a2f      	ldr	r2, [pc, #188]	; (800d69c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d009      	beq.n	800d5f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a2d      	ldr	r2, [pc, #180]	; (800d6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d004      	beq.n	800d5f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a2c      	ldr	r2, [pc, #176]	; (800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d106      	bne.n	800d606 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a24      	ldr	r2, [pc, #144]	; (800d69c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d009      	beq.n	800d624 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a22      	ldr	r2, [pc, #136]	; (800d6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d004      	beq.n	800d624 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a21      	ldr	r2, [pc, #132]	; (800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d12b      	bne.n	800d67c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	051b      	lsls	r3, r3, #20
 800d630:	4313      	orrs	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	4313      	orrs	r3, r2
 800d640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	4313      	orrs	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a11      	ldr	r2, [pc, #68]	; (800d69c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d009      	beq.n	800d66e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a10      	ldr	r2, [pc, #64]	; (800d6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d004      	beq.n	800d66e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a0e      	ldr	r2, [pc, #56]	; (800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d106      	bne.n	800d67c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	4313      	orrs	r3, r2
 800d67a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3714      	adds	r7, #20
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	40012c00 	.word	0x40012c00
 800d6a0:	40013400 	.word	0x40013400
 800d6a4:	40015000 	.word	0x40015000

0800d6a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <LL_EXTI_EnableIT_0_31>:
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d73c:	4b05      	ldr	r3, [pc, #20]	; (800d754 <LL_EXTI_EnableIT_0_31+0x20>)
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	4904      	ldr	r1, [pc, #16]	; (800d754 <LL_EXTI_EnableIT_0_31+0x20>)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4313      	orrs	r3, r2
 800d746:	600b      	str	r3, [r1, #0]
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	40010400 	.word	0x40010400

0800d758 <LL_EXTI_EnableIT_32_63>:
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d760:	4b05      	ldr	r3, [pc, #20]	; (800d778 <LL_EXTI_EnableIT_32_63+0x20>)
 800d762:	6a1a      	ldr	r2, [r3, #32]
 800d764:	4904      	ldr	r1, [pc, #16]	; (800d778 <LL_EXTI_EnableIT_32_63+0x20>)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4313      	orrs	r3, r2
 800d76a:	620b      	str	r3, [r1, #32]
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	40010400 	.word	0x40010400

0800d77c <LL_EXTI_DisableIT_0_31>:
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d784:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	43db      	mvns	r3, r3
 800d78c:	4904      	ldr	r1, [pc, #16]	; (800d7a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800d78e:	4013      	ands	r3, r2
 800d790:	600b      	str	r3, [r1, #0]
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	40010400 	.word	0x40010400

0800d7a4 <LL_EXTI_DisableIT_32_63>:
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d7ac:	4b06      	ldr	r3, [pc, #24]	; (800d7c8 <LL_EXTI_DisableIT_32_63+0x24>)
 800d7ae:	6a1a      	ldr	r2, [r3, #32]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	43db      	mvns	r3, r3
 800d7b4:	4904      	ldr	r1, [pc, #16]	; (800d7c8 <LL_EXTI_DisableIT_32_63+0x24>)
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	620b      	str	r3, [r1, #32]
}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	40010400 	.word	0x40010400

0800d7cc <LL_EXTI_EnableEvent_0_31>:
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <LL_EXTI_EnableEvent_0_31+0x20>)
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	4904      	ldr	r1, [pc, #16]	; (800d7ec <LL_EXTI_EnableEvent_0_31+0x20>)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	604b      	str	r3, [r1, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	40010400 	.word	0x40010400

0800d7f0 <LL_EXTI_EnableEvent_32_63>:
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d7f8:	4b05      	ldr	r3, [pc, #20]	; (800d810 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d7fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7fc:	4904      	ldr	r1, [pc, #16]	; (800d810 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4313      	orrs	r3, r2
 800d802:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr
 800d810:	40010400 	.word	0x40010400

0800d814 <LL_EXTI_DisableEvent_0_31>:
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d81c:	4b06      	ldr	r3, [pc, #24]	; (800d838 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	43db      	mvns	r3, r3
 800d824:	4904      	ldr	r1, [pc, #16]	; (800d838 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d826:	4013      	ands	r3, r2
 800d828:	604b      	str	r3, [r1, #4]
}
 800d82a:	bf00      	nop
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	40010400 	.word	0x40010400

0800d83c <LL_EXTI_DisableEvent_32_63>:
{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d844:	4b06      	ldr	r3, [pc, #24]	; (800d860 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	43db      	mvns	r3, r3
 800d84c:	4904      	ldr	r1, [pc, #16]	; (800d860 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d84e:	4013      	ands	r3, r2
 800d850:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d852:	bf00      	nop
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	40010400 	.word	0x40010400

0800d864 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d86c:	4b05      	ldr	r3, [pc, #20]	; (800d884 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d86e:	689a      	ldr	r2, [r3, #8]
 800d870:	4904      	ldr	r1, [pc, #16]	; (800d884 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4313      	orrs	r3, r2
 800d876:	608b      	str	r3, [r1, #8]
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	40010400 	.word	0x40010400

0800d888 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d890:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d894:	4904      	ldr	r1, [pc, #16]	; (800d8a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4313      	orrs	r3, r2
 800d89a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	40010400 	.word	0x40010400

0800d8ac <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d8b4:	4b06      	ldr	r3, [pc, #24]	; (800d8d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d8b6:	689a      	ldr	r2, [r3, #8]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	43db      	mvns	r3, r3
 800d8bc:	4904      	ldr	r1, [pc, #16]	; (800d8d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d8be:	4013      	ands	r3, r2
 800d8c0:	608b      	str	r3, [r1, #8]
}
 800d8c2:	bf00      	nop
 800d8c4:	370c      	adds	r7, #12
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	40010400 	.word	0x40010400

0800d8d4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d8dc:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d8de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	43db      	mvns	r3, r3
 800d8e4:	4904      	ldr	r1, [pc, #16]	; (800d8f8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d8ea:	bf00      	nop
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	40010400 	.word	0x40010400

0800d8fc <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d904:	4b05      	ldr	r3, [pc, #20]	; (800d91c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	4904      	ldr	r1, [pc, #16]	; (800d91c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	60cb      	str	r3, [r1, #12]
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	40010400 	.word	0x40010400

0800d920 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d928:	4b05      	ldr	r3, [pc, #20]	; (800d940 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92c:	4904      	ldr	r1, [pc, #16]	; (800d940 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4313      	orrs	r3, r2
 800d932:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	40010400 	.word	0x40010400

0800d944 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d94c:	4b06      	ldr	r3, [pc, #24]	; (800d968 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d94e:	68da      	ldr	r2, [r3, #12]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	43db      	mvns	r3, r3
 800d954:	4904      	ldr	r1, [pc, #16]	; (800d968 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d956:	4013      	ands	r3, r2
 800d958:	60cb      	str	r3, [r1, #12]
}
 800d95a:	bf00      	nop
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	40010400 	.word	0x40010400

0800d96c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d974:	4b06      	ldr	r3, [pc, #24]	; (800d990 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	43db      	mvns	r3, r3
 800d97c:	4904      	ldr	r1, [pc, #16]	; (800d990 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d97e:	4013      	ands	r3, r2
 800d980:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d982:	bf00      	nop
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	40010400 	.word	0x40010400

0800d994 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d99c:	2300      	movs	r3, #0
 800d99e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	7a1b      	ldrb	r3, [r3, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 80c8 	beq.w	800db3a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d05d      	beq.n	800da6e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	7a5b      	ldrb	r3, [r3, #9]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d00e      	beq.n	800d9d8 <LL_EXTI_Init+0x44>
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d017      	beq.n	800d9ee <LL_EXTI_Init+0x5a>
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d120      	bne.n	800da04 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff ff24 	bl	800d814 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff feaf 	bl	800d734 <LL_EXTI_EnableIT_0_31>
          break;
 800d9d6:	e018      	b.n	800da0a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fecd 	bl	800d77c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff fef0 	bl	800d7cc <LL_EXTI_EnableEvent_0_31>
          break;
 800d9ec:	e00d      	b.n	800da0a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff fe9e 	bl	800d734 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7ff fee5 	bl	800d7cc <LL_EXTI_EnableEvent_0_31>
          break;
 800da02:	e002      	b.n	800da0a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800da04:	2301      	movs	r3, #1
 800da06:	60fb      	str	r3, [r7, #12]
          break;
 800da08:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7a9b      	ldrb	r3, [r3, #10]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d02d      	beq.n	800da6e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	7a9b      	ldrb	r3, [r3, #10]
 800da16:	2b02      	cmp	r3, #2
 800da18:	d00e      	beq.n	800da38 <LL_EXTI_Init+0xa4>
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d017      	beq.n	800da4e <LL_EXTI_Init+0xba>
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d120      	bne.n	800da64 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff ff8c 	bl	800d944 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ff17 	bl	800d864 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800da36:	e01b      	b.n	800da70 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7ff ff35 	bl	800d8ac <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff ff58 	bl	800d8fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800da4c:	e010      	b.n	800da70 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff ff06 	bl	800d864 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff ff4d 	bl	800d8fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800da62:	e005      	b.n	800da70 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f043 0302 	orr.w	r3, r3, #2
 800da6a:	60fb      	str	r3, [r7, #12]
            break;
 800da6c:	e000      	b.n	800da70 <LL_EXTI_Init+0xdc>
        }
      }
 800da6e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d075      	beq.n	800db64 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7a5b      	ldrb	r3, [r3, #9]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d00e      	beq.n	800da9e <LL_EXTI_Init+0x10a>
 800da80:	2b02      	cmp	r3, #2
 800da82:	d017      	beq.n	800dab4 <LL_EXTI_Init+0x120>
 800da84:	2b00      	cmp	r3, #0
 800da86:	d120      	bne.n	800daca <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7ff fed5 	bl	800d83c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff fe5e 	bl	800d758 <LL_EXTI_EnableIT_32_63>
          break;
 800da9c:	e01a      	b.n	800dad4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff fe7e 	bl	800d7a4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff fe9f 	bl	800d7f0 <LL_EXTI_EnableEvent_32_63>
          break;
 800dab2:	e00f      	b.n	800dad4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff fe4d 	bl	800d758 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff fe94 	bl	800d7f0 <LL_EXTI_EnableEvent_32_63>
          break;
 800dac8:	e004      	b.n	800dad4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f043 0304 	orr.w	r3, r3, #4
 800dad0:	60fb      	str	r3, [r7, #12]
          break;
 800dad2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	7a9b      	ldrb	r3, [r3, #10]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d043      	beq.n	800db64 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7a9b      	ldrb	r3, [r3, #10]
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d00e      	beq.n	800db02 <LL_EXTI_Init+0x16e>
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d017      	beq.n	800db18 <LL_EXTI_Init+0x184>
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d120      	bne.n	800db2e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff ff3b 	bl	800d96c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fec4 	bl	800d888 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800db00:	e031      	b.n	800db66 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fee4 	bl	800d8d4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff ff05 	bl	800d920 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800db16:	e026      	b.n	800db66 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff feb3 	bl	800d888 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fefa 	bl	800d920 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800db2c:	e01b      	b.n	800db66 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f043 0305 	orr.w	r3, r3, #5
 800db34:	60fb      	str	r3, [r7, #12]
            break;
 800db36:	bf00      	nop
 800db38:	e015      	b.n	800db66 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff fe1c 	bl	800d77c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7ff fe63 	bl	800d814 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff fe26 	bl	800d7a4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff fe6d 	bl	800d83c <LL_EXTI_DisableEvent_32_63>
 800db62:	e000      	b.n	800db66 <LL_EXTI_Init+0x1d2>
      }
 800db64:	bf00      	nop
  }

  return status;
 800db66:	68fb      	ldr	r3, [r7, #12]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <LL_GPIO_SetPinMode>:
{
 800db70:	b480      	push	{r7}
 800db72:	b089      	sub	sp, #36	; 0x24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	fa93 f3a3 	rbit	r3, r3
 800db8a:	613b      	str	r3, [r7, #16]
  return result;
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	fab3 f383 	clz	r3, r3
 800db92:	b2db      	uxtb	r3, r3
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	2103      	movs	r1, #3
 800db98:	fa01 f303 	lsl.w	r3, r1, r3
 800db9c:	43db      	mvns	r3, r3
 800db9e:	401a      	ands	r2, r3
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	fa93 f3a3 	rbit	r3, r3
 800dbaa:	61bb      	str	r3, [r7, #24]
  return result;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	fab3 f383 	clz	r3, r3
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800dbbc:	431a      	orrs	r2, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	601a      	str	r2, [r3, #0]
}
 800dbc2:	bf00      	nop
 800dbc4:	3724      	adds	r7, #36	; 0x24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <LL_GPIO_SetPinOutputType>:
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b085      	sub	sp, #20
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	60b9      	str	r1, [r7, #8]
 800dbd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	43db      	mvns	r3, r3
 800dbe2:	401a      	ands	r2, r3
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	fb01 f303 	mul.w	r3, r1, r3
 800dbec:	431a      	orrs	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	605a      	str	r2, [r3, #4]
}
 800dbf2:	bf00      	nop
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <LL_GPIO_SetPinSpeed>:
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b089      	sub	sp, #36	; 0x24
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	689a      	ldr	r2, [r3, #8]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	fa93 f3a3 	rbit	r3, r3
 800dc18:	613b      	str	r3, [r7, #16]
  return result;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	fab3 f383 	clz	r3, r3
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	2103      	movs	r1, #3
 800dc26:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2a:	43db      	mvns	r3, r3
 800dc2c:	401a      	ands	r2, r3
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	fa93 f3a3 	rbit	r3, r3
 800dc38:	61bb      	str	r3, [r7, #24]
  return result;
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	fab3 f383 	clz	r3, r3
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	fa01 f303 	lsl.w	r3, r1, r3
 800dc4a:	431a      	orrs	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	609a      	str	r2, [r3, #8]
}
 800dc50:	bf00      	nop
 800dc52:	3724      	adds	r7, #36	; 0x24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <LL_GPIO_SetPinPull>:
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b089      	sub	sp, #36	; 0x24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	fa93 f3a3 	rbit	r3, r3
 800dc76:	613b      	str	r3, [r7, #16]
  return result;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	fab3 f383 	clz	r3, r3
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	005b      	lsls	r3, r3, #1
 800dc82:	2103      	movs	r1, #3
 800dc84:	fa01 f303 	lsl.w	r3, r1, r3
 800dc88:	43db      	mvns	r3, r3
 800dc8a:	401a      	ands	r2, r3
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	fa93 f3a3 	rbit	r3, r3
 800dc96:	61bb      	str	r3, [r7, #24]
  return result;
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	fab3 f383 	clz	r3, r3
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	fa01 f303 	lsl.w	r3, r1, r3
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	60da      	str	r2, [r3, #12]
}
 800dcae:	bf00      	nop
 800dcb0:	3724      	adds	r7, #36	; 0x24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <LL_GPIO_SetAFPin_0_7>:
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b089      	sub	sp, #36	; 0x24
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	60f8      	str	r0, [r7, #12]
 800dcc2:	60b9      	str	r1, [r7, #8]
 800dcc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6a1a      	ldr	r2, [r3, #32]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	fa93 f3a3 	rbit	r3, r3
 800dcd4:	613b      	str	r3, [r7, #16]
  return result;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	fab3 f383 	clz	r3, r3
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	210f      	movs	r1, #15
 800dce2:	fa01 f303 	lsl.w	r3, r1, r3
 800dce6:	43db      	mvns	r3, r3
 800dce8:	401a      	ands	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	fa93 f3a3 	rbit	r3, r3
 800dcf4:	61bb      	str	r3, [r7, #24]
  return result;
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	fab3 f383 	clz	r3, r3
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	fa01 f303 	lsl.w	r3, r1, r3
 800dd06:	431a      	orrs	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	621a      	str	r2, [r3, #32]
}
 800dd0c:	bf00      	nop
 800dd0e:	3724      	adds	r7, #36	; 0x24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <LL_GPIO_SetAFPin_8_15>:
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b089      	sub	sp, #36	; 0x24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	0a1b      	lsrs	r3, r3, #8
 800dd2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	fa93 f3a3 	rbit	r3, r3
 800dd34:	613b      	str	r3, [r7, #16]
  return result;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	fab3 f383 	clz	r3, r3
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	210f      	movs	r1, #15
 800dd42:	fa01 f303 	lsl.w	r3, r1, r3
 800dd46:	43db      	mvns	r3, r3
 800dd48:	401a      	ands	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	0a1b      	lsrs	r3, r3, #8
 800dd4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	fa93 f3a3 	rbit	r3, r3
 800dd56:	61bb      	str	r3, [r7, #24]
  return result;
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	fab3 f383 	clz	r3, r3
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	fa01 f303 	lsl.w	r3, r1, r3
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd6e:	bf00      	nop
 800dd70:	3724      	adds	r7, #36	; 0x24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b086      	sub	sp, #24
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	fa93 f3a3 	rbit	r3, r3
 800dd90:	60bb      	str	r3, [r7, #8]
  return result;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	fab3 f383 	clz	r3, r3
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800dd9c:	e040      	b.n	800de20 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	2101      	movs	r1, #1
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddaa:	4013      	ands	r3, r2
 800ddac:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d032      	beq.n	800de1a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6939      	ldr	r1, [r7, #16]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fed7 	bl	800db70 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d003      	beq.n	800ddd2 <LL_GPIO_Init+0x58>
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d106      	bne.n	800dde0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	6939      	ldr	r1, [r7, #16]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff ff0f 	bl	800dbfe <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	461a      	mov	r2, r3
 800dde6:	6939      	ldr	r1, [r7, #16]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f7ff ff37 	bl	800dc5c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d111      	bne.n	800de1a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	2bff      	cmp	r3, #255	; 0xff
 800ddfa:	d807      	bhi.n	800de0c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	461a      	mov	r2, r3
 800de02:	6939      	ldr	r1, [r7, #16]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ff58 	bl	800dcba <LL_GPIO_SetAFPin_0_7>
 800de0a:	e006      	b.n	800de1a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	461a      	mov	r2, r3
 800de12:	6939      	ldr	r1, [r7, #16]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7ff ff7f 	bl	800dd18 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	3301      	adds	r3, #1
 800de1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	fa22 f303 	lsr.w	r3, r2, r3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1b7      	bne.n	800dd9e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d003      	beq.n	800de3e <LL_GPIO_Init+0xc4>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d107      	bne.n	800de4e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	6819      	ldr	r1, [r3, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	461a      	mov	r2, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff fec0 	bl	800dbce <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3718      	adds	r7, #24
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800de58:	b590      	push	{r4, r7, lr}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	4611      	mov	r1, r2
 800de64:	461a      	mov	r2, r3
 800de66:	4623      	mov	r3, r4
 800de68:	80fb      	strh	r3, [r7, #6]
 800de6a:	4603      	mov	r3, r0
 800de6c:	80bb      	strh	r3, [r7, #4]
 800de6e:	460b      	mov	r3, r1
 800de70:	70fb      	strb	r3, [r7, #3]
 800de72:	4613      	mov	r3, r2
 800de74:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800de76:	2300      	movs	r3, #0
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	e026      	b.n	800deca <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800de7c:	2300      	movs	r3, #0
 800de7e:	60bb      	str	r3, [r7, #8]
 800de80:	e01c      	b.n	800debc <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	b29a      	uxth	r2, r3
 800de86:	88fb      	ldrh	r3, [r7, #6]
 800de88:	4413      	add	r3, r2
 800de8a:	b298      	uxth	r0, r3
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de92:	4413      	add	r3, r2
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	88bb      	ldrh	r3, [r7, #4]
 800dea2:	4413      	add	r3, r2
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	4413      	add	r3, r2
 800deac:	b29b      	uxth	r3, r3
 800deae:	883a      	ldrh	r2, [r7, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	f000 fc1f 	bl	800e6f4 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	3301      	adds	r3, #1
 800deba:	60bb      	str	r3, [r7, #8]
 800debc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	dbde      	blt.n	800de82 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	78fb      	ldrb	r3, [r7, #3]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	429a      	cmp	r2, r3
 800ded0:	dbd4      	blt.n	800de7c <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800ded2:	bf00      	nop
 800ded4:	3714      	adds	r7, #20
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd90      	pop	{r4, r7, pc}

0800deda <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800deda:	b590      	push	{r4, r7, lr}
 800dedc:	b087      	sub	sp, #28
 800dede:	af02      	add	r7, sp, #8
 800dee0:	4604      	mov	r4, r0
 800dee2:	4608      	mov	r0, r1
 800dee4:	4611      	mov	r1, r2
 800dee6:	461a      	mov	r2, r3
 800dee8:	4623      	mov	r3, r4
 800deea:	80fb      	strh	r3, [r7, #6]
 800deec:	4603      	mov	r3, r0
 800deee:	80bb      	strh	r3, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	807b      	strh	r3, [r7, #2]
 800def4:	4613      	mov	r3, r2
 800def6:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800defc:	7bfa      	ldrb	r2, [r7, #15]
 800defe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df02:	429a      	cmp	r2, r3
 800df04:	d939      	bls.n	800df7a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800df06:	88ba      	ldrh	r2, [r7, #4]
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	441a      	add	r2, r3
 800df0c:	88b9      	ldrh	r1, [r7, #4]
 800df0e:	883b      	ldrh	r3, [r7, #0]
 800df10:	4419      	add	r1, r3
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	1acb      	subs	r3, r1, r3
 800df16:	429a      	cmp	r2, r3
 800df18:	f000 8089 	beq.w	800e02e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800df1c:	88fa      	ldrh	r2, [r7, #6]
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	441a      	add	r2, r3
 800df22:	88f9      	ldrh	r1, [r7, #6]
 800df24:	887b      	ldrh	r3, [r7, #2]
 800df26:	4419      	add	r1, r3
 800df28:	7bfb      	ldrb	r3, [r7, #15]
 800df2a:	1acb      	subs	r3, r1, r3
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d07e      	beq.n	800e02e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	b29a      	uxth	r2, r3
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	4413      	add	r3, r2
 800df38:	b298      	uxth	r0, r3
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	88bb      	ldrh	r3, [r7, #4]
 800df40:	4413      	add	r3, r2
 800df42:	b299      	uxth	r1, r3
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	b29b      	uxth	r3, r3
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	887a      	ldrh	r2, [r7, #2]
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	b29b      	uxth	r3, r3
 800df52:	3301      	adds	r3, #1
 800df54:	b29c      	uxth	r4, r3
 800df56:	7bfb      	ldrb	r3, [r7, #15]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	883a      	ldrh	r2, [r7, #0]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	b29b      	uxth	r3, r3
 800df64:	3301      	adds	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	2304      	movs	r3, #4
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	8c3b      	ldrh	r3, [r7, #32]
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4613      	mov	r3, r2
 800df72:	4622      	mov	r2, r4
 800df74:	f000 fd18 	bl	800e9a8 <ILI9341_Draw_Rectangle>
				goto finish;
 800df78:	e05a      	b.n	800e030 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	4413      	add	r3, r2
 800df82:	b298      	uxth	r0, r3
 800df84:	7bfb      	ldrb	r3, [r7, #15]
 800df86:	b29a      	uxth	r2, r3
 800df88:	88bb      	ldrh	r3, [r7, #4]
 800df8a:	4413      	add	r3, r2
 800df8c:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	b29b      	uxth	r3, r3
 800df92:	887a      	ldrh	r2, [r7, #2]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df98:	3301      	adds	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df9e:	f000 fa6b 	bl	800e478 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	88fb      	ldrh	r3, [r7, #6]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	b298      	uxth	r0, r3
										(y + h) - b,
 800dfac:	88ba      	ldrh	r2, [r7, #4]
 800dfae:	883b      	ldrh	r3, [r7, #0]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	b299      	uxth	r1, r3
										(w - b)+1,
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	887a      	ldrh	r2, [r7, #2]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfcc:	f000 fa54 	bl	800e478 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	88fb      	ldrh	r3, [r7, #6]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	b298      	uxth	r0, r3
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	88bb      	ldrh	r3, [r7, #4]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	b299      	uxth	r1, r3
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	883a      	ldrh	r2, [r7, #0]
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dff4:	f000 faa4 	bl	800e540 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800dff8:	88fa      	ldrh	r2, [r7, #6]
 800dffa:	887b      	ldrh	r3, [r7, #2]
 800dffc:	4413      	add	r3, r2
 800dffe:	b29a      	uxth	r2, r3
 800e000:	7bfb      	ldrb	r3, [r7, #15]
 800e002:	b29b      	uxth	r3, r3
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	b298      	uxth	r0, r3
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	88bb      	ldrh	r3, [r7, #4]
 800e00e:	4413      	add	r3, r2
 800e010:	b299      	uxth	r1, r3
 800e012:	7bfb      	ldrb	r3, [r7, #15]
 800e014:	b29b      	uxth	r3, r3
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	b29b      	uxth	r3, r3
 800e01a:	883a      	ldrh	r2, [r7, #0]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	b29a      	uxth	r2, r3
 800e020:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e022:	f000 fa8d 	bl	800e540 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	3301      	adds	r3, #1
 800e02a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e02c:	e766      	b.n	800defc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e02e:	bf00      	nop
	// done
	return;
 800e030:	bf00      	nop
}
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	bd90      	pop	{r4, r7, pc}

0800e038 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	b089      	sub	sp, #36	; 0x24
 800e03c:	af02      	add	r7, sp, #8
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	4611      	mov	r1, r2
 800e044:	461a      	mov	r2, r3
 800e046:	4623      	mov	r3, r4
 800e048:	71fb      	strb	r3, [r7, #7]
 800e04a:	4603      	mov	r3, r0
 800e04c:	80bb      	strh	r3, [r7, #4]
 800e04e:	460b      	mov	r3, r1
 800e050:	807b      	strh	r3, [r7, #2]
 800e052:	4613      	mov	r3, r2
 800e054:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	2b1f      	cmp	r3, #31
 800e05e:	d802      	bhi.n	800e066 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	71fb      	strb	r3, [r7, #7]
 800e064:	e002      	b.n	800e06c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	3b20      	subs	r3, #32
 800e06a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e06c:	2300      	movs	r3, #0
 800e06e:	753b      	strb	r3, [r7, #20]
 800e070:	e012      	b.n	800e098 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e072:	7dfa      	ldrb	r2, [r7, #23]
 800e074:	7d38      	ldrb	r0, [r7, #20]
 800e076:	7d39      	ldrb	r1, [r7, #20]
 800e078:	4c48      	ldr	r4, [pc, #288]	; (800e19c <ILI9341_Draw_Char+0x164>)
 800e07a:	4613      	mov	r3, r2
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	4413      	add	r3, r2
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	4423      	add	r3, r4
 800e084:	4403      	add	r3, r0
 800e086:	781a      	ldrb	r2, [r3, #0]
 800e088:	f107 0318 	add.w	r3, r7, #24
 800e08c:	440b      	add	r3, r1
 800e08e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e092:	7d3b      	ldrb	r3, [r7, #20]
 800e094:	3301      	adds	r3, #1
 800e096:	753b      	strb	r3, [r7, #20]
 800e098:	7d3b      	ldrb	r3, [r7, #20]
 800e09a:	2b05      	cmp	r3, #5
 800e09c:	d9e9      	bls.n	800e072 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e09e:	2300      	movs	r3, #0
 800e0a0:	757b      	strb	r3, [r7, #21]
 800e0a2:	e074      	b.n	800e18e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	75bb      	strb	r3, [r7, #22]
 800e0a8:	e06b      	b.n	800e182 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e0aa:	7d7b      	ldrb	r3, [r7, #21]
 800e0ac:	f107 0218 	add.w	r2, r7, #24
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	7dbb      	ldrb	r3, [r7, #22]
 800e0ba:	fa42 f303 	asr.w	r3, r2, r3
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d02d      	beq.n	800e122 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e0c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d10e      	bne.n	800e0ea <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e0cc:	7d7b      	ldrb	r3, [r7, #21]
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	88bb      	ldrh	r3, [r7, #4]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	b298      	uxth	r0, r3
 800e0d6:	7dbb      	ldrb	r3, [r7, #22]
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	887b      	ldrh	r3, [r7, #2]
 800e0dc:	4413      	add	r3, r2
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	883a      	ldrh	r2, [r7, #0]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	f000 fb06 	bl	800e6f4 <ILI9341_Draw_Pixel>
 800e0e8:	e048      	b.n	800e17c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e0ea:	7d7b      	ldrb	r3, [r7, #21]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0f0:	fb12 f303 	smulbb	r3, r2, r3
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	88bb      	ldrh	r3, [r7, #4]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	b298      	uxth	r0, r3
 800e0fc:	7dbb      	ldrb	r3, [r7, #22]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e102:	fb12 f303 	smulbb	r3, r2, r3
 800e106:	b29a      	uxth	r2, r3
 800e108:	887b      	ldrh	r3, [r7, #2]
 800e10a:	4413      	add	r3, r2
 800e10c:	b299      	uxth	r1, r3
 800e10e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e110:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e112:	2301      	movs	r3, #1
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	883b      	ldrh	r3, [r7, #0]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4623      	mov	r3, r4
 800e11c:	f000 fc44 	bl	800e9a8 <ILI9341_Draw_Rectangle>
 800e120:	e02c      	b.n	800e17c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e124:	2b01      	cmp	r3, #1
 800e126:	d10e      	bne.n	800e146 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e128:	7d7b      	ldrb	r3, [r7, #21]
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	88bb      	ldrh	r3, [r7, #4]
 800e12e:	4413      	add	r3, r2
 800e130:	b298      	uxth	r0, r3
 800e132:	7dbb      	ldrb	r3, [r7, #22]
 800e134:	b29a      	uxth	r2, r3
 800e136:	887b      	ldrh	r3, [r7, #2]
 800e138:	4413      	add	r3, r2
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e13e:	4619      	mov	r1, r3
 800e140:	f000 fad8 	bl	800e6f4 <ILI9341_Draw_Pixel>
 800e144:	e01a      	b.n	800e17c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e146:	7d7b      	ldrb	r3, [r7, #21]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e14c:	fb12 f303 	smulbb	r3, r2, r3
 800e150:	b29a      	uxth	r2, r3
 800e152:	88bb      	ldrh	r3, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	b298      	uxth	r0, r3
 800e158:	7dbb      	ldrb	r3, [r7, #22]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e15e:	fb12 f303 	smulbb	r3, r2, r3
 800e162:	b29a      	uxth	r2, r3
 800e164:	887b      	ldrh	r3, [r7, #2]
 800e166:	4413      	add	r3, r2
 800e168:	b299      	uxth	r1, r3
 800e16a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e16c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e16e:	2301      	movs	r3, #1
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	4623      	mov	r3, r4
 800e178:	f000 fc16 	bl	800e9a8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e17c:	7dbb      	ldrb	r3, [r7, #22]
 800e17e:	3301      	adds	r3, #1
 800e180:	75bb      	strb	r3, [r7, #22]
 800e182:	7dbb      	ldrb	r3, [r7, #22]
 800e184:	2b07      	cmp	r3, #7
 800e186:	d990      	bls.n	800e0aa <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e188:	7d7b      	ldrb	r3, [r7, #21]
 800e18a:	3301      	adds	r3, #1
 800e18c:	757b      	strb	r3, [r7, #21]
 800e18e:	7d7b      	ldrb	r3, [r7, #21]
 800e190:	2b05      	cmp	r3, #5
 800e192:	d987      	bls.n	800e0a4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e194:	bf00      	nop
 800e196:	371c      	adds	r7, #28
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd90      	pop	{r4, r7, pc}
 800e19c:	08013d2c 	.word	0x08013d2c

0800e1a0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b087      	sub	sp, #28
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	817b      	strh	r3, [r7, #10]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	813b      	strh	r3, [r7, #8]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e1ba:	897b      	ldrh	r3, [r7, #10]
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	b298      	uxth	r0, r3
 800e1c0:	8c3b      	ldrh	r3, [r7, #32]
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c8:	8939      	ldrh	r1, [r7, #8]
 800e1ca:	f000 f9b9 	bl	800e540 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e1ce:	897b      	ldrh	r3, [r7, #10]
 800e1d0:	3b02      	subs	r3, #2
 800e1d2:	b298      	uxth	r0, r3
 800e1d4:	8c3b      	ldrh	r3, [r7, #32]
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1dc:	8939      	ldrh	r1, [r7, #8]
 800e1de:	f000 f9af 	bl	800e540 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e1e2:	e016      	b.n	800e212 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	60fa      	str	r2, [r7, #12]
 800e1ea:	7818      	ldrb	r0, [r3, #0]
 800e1ec:	88fc      	ldrh	r4, [r7, #6]
 800e1ee:	893a      	ldrh	r2, [r7, #8]
 800e1f0:	8979      	ldrh	r1, [r7, #10]
 800e1f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	8c3b      	ldrh	r3, [r7, #32]
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	4623      	mov	r3, r4
 800e1fc:	f7ff ff1c 	bl	800e038 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e200:	8c3b      	ldrh	r3, [r7, #32]
 800e202:	461a      	mov	r2, r3
 800e204:	0052      	lsls	r2, r2, #1
 800e206:	4413      	add	r3, r2
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	897b      	ldrh	r3, [r7, #10]
 800e20e:	4413      	add	r3, r2
 800e210:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e4      	bne.n	800e1e4 <ILI9341_Draw_Text+0x44>
    }


}
 800e21a:	bf00      	nop
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd90      	pop	{r4, r7, pc}

0800e222 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e226:	f000 fca3 	bl	800eb70 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e22a:	f000 f907 	bl	800e43c <ILI9341_SPI_Init>
	_LCD_Reset();
 800e22e:	f000 fcaf 	bl	800eb90 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e232:	2001      	movs	r0, #1
 800e234:	f000 fd7a 	bl	800ed2c <_LCD_SendCommand>
	HAL_Delay(2000);
 800e238:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e23c:	f7f9 fe4a 	bl	8007ed4 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e240:	20cb      	movs	r0, #203	; 0xcb
 800e242:	f000 fd73 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e246:	2039      	movs	r0, #57	; 0x39
 800e248:	f000 fda2 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e24c:	202c      	movs	r0, #44	; 0x2c
 800e24e:	f000 fd9f 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e252:	2000      	movs	r0, #0
 800e254:	f000 fd9c 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e258:	2034      	movs	r0, #52	; 0x34
 800e25a:	f000 fd99 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e25e:	2002      	movs	r0, #2
 800e260:	f000 fd96 	bl	800ed90 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e264:	20cf      	movs	r0, #207	; 0xcf
 800e266:	f000 fd61 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e26a:	2000      	movs	r0, #0
 800e26c:	f000 fd90 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e270:	20c1      	movs	r0, #193	; 0xc1
 800e272:	f000 fd8d 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e276:	2030      	movs	r0, #48	; 0x30
 800e278:	f000 fd8a 	bl	800ed90 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e27c:	20e8      	movs	r0, #232	; 0xe8
 800e27e:	f000 fd55 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e282:	2085      	movs	r0, #133	; 0x85
 800e284:	f000 fd84 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e288:	2000      	movs	r0, #0
 800e28a:	f000 fd81 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e28e:	2078      	movs	r0, #120	; 0x78
 800e290:	f000 fd7e 	bl	800ed90 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e294:	20ea      	movs	r0, #234	; 0xea
 800e296:	f000 fd49 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e29a:	2000      	movs	r0, #0
 800e29c:	f000 fd78 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	f000 fd75 	bl	800ed90 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e2a6:	20ed      	movs	r0, #237	; 0xed
 800e2a8:	f000 fd40 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e2ac:	2064      	movs	r0, #100	; 0x64
 800e2ae:	f000 fd6f 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e2b2:	2003      	movs	r0, #3
 800e2b4:	f000 fd6c 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e2b8:	2012      	movs	r0, #18
 800e2ba:	f000 fd69 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e2be:	2081      	movs	r0, #129	; 0x81
 800e2c0:	f000 fd66 	bl	800ed90 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e2c4:	20f7      	movs	r0, #247	; 0xf7
 800e2c6:	f000 fd31 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e2ca:	2020      	movs	r0, #32
 800e2cc:	f000 fd60 	bl	800ed90 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e2d0:	20c0      	movs	r0, #192	; 0xc0
 800e2d2:	f000 fd2b 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e2d6:	2023      	movs	r0, #35	; 0x23
 800e2d8:	f000 fd5a 	bl	800ed90 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e2dc:	20c1      	movs	r0, #193	; 0xc1
 800e2de:	f000 fd25 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e2e2:	2010      	movs	r0, #16
 800e2e4:	f000 fd54 	bl	800ed90 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e2e8:	20c5      	movs	r0, #197	; 0xc5
 800e2ea:	f000 fd1f 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e2ee:	203e      	movs	r0, #62	; 0x3e
 800e2f0:	f000 fd4e 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e2f4:	2028      	movs	r0, #40	; 0x28
 800e2f6:	f000 fd4b 	bl	800ed90 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e2fa:	20c7      	movs	r0, #199	; 0xc7
 800e2fc:	f000 fd16 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e300:	2086      	movs	r0, #134	; 0x86
 800e302:	f000 fd45 	bl	800ed90 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e306:	2036      	movs	r0, #54	; 0x36
 800e308:	f000 fd10 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e30c:	2048      	movs	r0, #72	; 0x48
 800e30e:	f000 fd3f 	bl	800ed90 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e312:	203a      	movs	r0, #58	; 0x3a
 800e314:	f000 fd0a 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e318:	2055      	movs	r0, #85	; 0x55
 800e31a:	f000 fd39 	bl	800ed90 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e31e:	20b1      	movs	r0, #177	; 0xb1
 800e320:	f000 fd04 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e324:	2000      	movs	r0, #0
 800e326:	f000 fd33 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e32a:	2018      	movs	r0, #24
 800e32c:	f000 fd30 	bl	800ed90 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e330:	20b6      	movs	r0, #182	; 0xb6
 800e332:	f000 fcfb 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e336:	2008      	movs	r0, #8
 800e338:	f000 fd2a 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e33c:	2082      	movs	r0, #130	; 0x82
 800e33e:	f000 fd27 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e342:	2027      	movs	r0, #39	; 0x27
 800e344:	f000 fd24 	bl	800ed90 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e348:	20f2      	movs	r0, #242	; 0xf2
 800e34a:	f000 fcef 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e34e:	2000      	movs	r0, #0
 800e350:	f000 fd1e 	bl	800ed90 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e354:	2026      	movs	r0, #38	; 0x26
 800e356:	f000 fce9 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e35a:	2001      	movs	r0, #1
 800e35c:	f000 fd18 	bl	800ed90 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e360:	20e0      	movs	r0, #224	; 0xe0
 800e362:	f000 fce3 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e366:	200f      	movs	r0, #15
 800e368:	f000 fd12 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e36c:	2031      	movs	r0, #49	; 0x31
 800e36e:	f000 fd0f 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e372:	202b      	movs	r0, #43	; 0x2b
 800e374:	f000 fd0c 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e378:	200c      	movs	r0, #12
 800e37a:	f000 fd09 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e37e:	200e      	movs	r0, #14
 800e380:	f000 fd06 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e384:	2008      	movs	r0, #8
 800e386:	f000 fd03 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e38a:	204e      	movs	r0, #78	; 0x4e
 800e38c:	f000 fd00 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e390:	20f1      	movs	r0, #241	; 0xf1
 800e392:	f000 fcfd 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e396:	2037      	movs	r0, #55	; 0x37
 800e398:	f000 fcfa 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e39c:	2007      	movs	r0, #7
 800e39e:	f000 fcf7 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e3a2:	2010      	movs	r0, #16
 800e3a4:	f000 fcf4 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e3a8:	2003      	movs	r0, #3
 800e3aa:	f000 fcf1 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e3ae:	200e      	movs	r0, #14
 800e3b0:	f000 fcee 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e3b4:	2009      	movs	r0, #9
 800e3b6:	f000 fceb 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	f000 fce8 	bl	800ed90 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e3c0:	20e1      	movs	r0, #225	; 0xe1
 800e3c2:	f000 fcb3 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	f000 fce2 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e3cc:	200e      	movs	r0, #14
 800e3ce:	f000 fcdf 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e3d2:	2014      	movs	r0, #20
 800e3d4:	f000 fcdc 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e3d8:	2003      	movs	r0, #3
 800e3da:	f000 fcd9 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e3de:	2011      	movs	r0, #17
 800e3e0:	f000 fcd6 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e3e4:	2007      	movs	r0, #7
 800e3e6:	f000 fcd3 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e3ea:	2031      	movs	r0, #49	; 0x31
 800e3ec:	f000 fcd0 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e3f0:	20c1      	movs	r0, #193	; 0xc1
 800e3f2:	f000 fccd 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e3f6:	2048      	movs	r0, #72	; 0x48
 800e3f8:	f000 fcca 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e3fc:	2008      	movs	r0, #8
 800e3fe:	f000 fcc7 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e402:	200f      	movs	r0, #15
 800e404:	f000 fcc4 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e408:	200c      	movs	r0, #12
 800e40a:	f000 fcc1 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e40e:	2031      	movs	r0, #49	; 0x31
 800e410:	f000 fcbe 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e414:	2036      	movs	r0, #54	; 0x36
 800e416:	f000 fcbb 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e41a:	200f      	movs	r0, #15
 800e41c:	f000 fcb8 	bl	800ed90 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e420:	2011      	movs	r0, #17
 800e422:	f000 fc83 	bl	800ed2c <_LCD_SendCommand>
	HAL_Delay(240);
 800e426:	20f0      	movs	r0, #240	; 0xf0
 800e428:	f7f9 fd54 	bl	8007ed4 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e42c:	2029      	movs	r0, #41	; 0x29
 800e42e:	f000 fc7d 	bl	800ed2c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e432:	2000      	movs	r0, #0
 800e434:	f000 fb4e 	bl	800ead4 <ILI9341_Set_Rotation>
}
 800e438:	bf00      	nop
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e43c:	b480      	push	{r7}
 800e43e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e440:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <ILI9341_SPI_Init+0x34>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e448:	2b40      	cmp	r3, #64	; 0x40
 800e44a:	d005      	beq.n	800e458 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e44c:	4b08      	ldr	r3, [pc, #32]	; (800e470 <ILI9341_SPI_Init+0x34>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a07      	ldr	r2, [pc, #28]	; (800e470 <ILI9341_SPI_Init+0x34>)
 800e452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e456:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e458:	4b06      	ldr	r3, [pc, #24]	; (800e474 <ILI9341_SPI_Init+0x38>)
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	4a05      	ldr	r2, [pc, #20]	; (800e474 <ILI9341_SPI_Init+0x38>)
 800e45e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e462:	6153      	str	r3, [r2, #20]
}
 800e464:	bf00      	nop
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	40003c00 	.word	0x40003c00
 800e474:	48000400 	.word	0x48000400

0800e478 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e478:	b590      	push	{r4, r7, lr}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	461a      	mov	r2, r3
 800e486:	4623      	mov	r3, r4
 800e488:	80fb      	strh	r3, [r7, #6]
 800e48a:	4603      	mov	r3, r0
 800e48c:	80bb      	strh	r3, [r7, #4]
 800e48e:	460b      	mov	r3, r1
 800e490:	807b      	strh	r3, [r7, #2]
 800e492:	4613      	mov	r3, r2
 800e494:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e496:	4b28      	ldr	r3, [pc, #160]	; (800e538 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	88fa      	ldrh	r2, [r7, #6]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d246      	bcs.n	800e530 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e4a2:	4b26      	ldr	r3, [pc, #152]	; (800e53c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	88ba      	ldrh	r2, [r7, #4]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d240      	bcs.n	800e530 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e4ae:	88fa      	ldrh	r2, [r7, #6]
 800e4b0:	887b      	ldrh	r3, [r7, #2]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	4a20      	ldr	r2, [pc, #128]	; (800e538 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e4b8:	8812      	ldrh	r2, [r2, #0]
 800e4ba:	b292      	uxth	r2, r2
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	db05      	blt.n	800e4cc <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e4c0:	4b1d      	ldr	r3, [pc, #116]	; (800e538 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	88fb      	ldrh	r3, [r7, #6]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e4cc:	88fa      	ldrh	r2, [r7, #6]
 800e4ce:	887b      	ldrh	r3, [r7, #2]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	88bb      	ldrh	r3, [r7, #4]
 800e4da:	88b9      	ldrh	r1, [r7, #4]
 800e4dc:	88f8      	ldrh	r0, [r7, #6]
 800e4de:	f000 f893 	bl	800e608 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e4e6:	887b      	ldrh	r3, [r7, #2]
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d009      	beq.n	800e504 <ILI9341_Draw_Horizontal_Line+0x8c>
 800e4f0:	887b      	ldrh	r3, [r7, #2]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d906      	bls.n	800e504 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e4fa:	887b      	ldrh	r3, [r7, #2]
 800e4fc:	085b      	lsrs	r3, r3, #1
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	005b      	lsls	r3, r3, #1
 800e502:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e504:	887c      	ldrh	r4, [r7, #2]
 800e506:	883a      	ldrh	r2, [r7, #0]
 800e508:	88b9      	ldrh	r1, [r7, #4]
 800e50a:	88f8      	ldrh	r0, [r7, #6]
 800e50c:	2303      	movs	r3, #3
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	4623      	mov	r3, r4
 800e512:	f000 fb5b 	bl	800ebcc <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e516:	7bfb      	ldrb	r3, [r7, #15]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e51c:	88fa      	ldrh	r2, [r7, #6]
 800e51e:	887b      	ldrh	r3, [r7, #2]
 800e520:	4413      	add	r3, r2
 800e522:	b29b      	uxth	r3, r3
 800e524:	883a      	ldrh	r2, [r7, #0]
 800e526:	88b9      	ldrh	r1, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 f8e3 	bl	800e6f4 <ILI9341_Draw_Pixel>
 800e52e:	e000      	b.n	800e532 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e530:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	bd90      	pop	{r4, r7, pc}
 800e538:	20000c42 	.word	0x20000c42
 800e53c:	20000c40 	.word	0x20000c40

0800e540 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b087      	sub	sp, #28
 800e544:	af02      	add	r7, sp, #8
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4623      	mov	r3, r4
 800e550:	80fb      	strh	r3, [r7, #6]
 800e552:	4603      	mov	r3, r0
 800e554:	80bb      	strh	r3, [r7, #4]
 800e556:	460b      	mov	r3, r1
 800e558:	807b      	strh	r3, [r7, #2]
 800e55a:	4613      	mov	r3, r2
 800e55c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e55e:	4b28      	ldr	r3, [pc, #160]	; (800e600 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e560:	881b      	ldrh	r3, [r3, #0]
 800e562:	b29b      	uxth	r3, r3
 800e564:	88fa      	ldrh	r2, [r7, #6]
 800e566:	429a      	cmp	r2, r3
 800e568:	d246      	bcs.n	800e5f8 <ILI9341_Draw_Vertical_Line+0xb8>
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	88ba      	ldrh	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d240      	bcs.n	800e5f8 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e576:	88ba      	ldrh	r2, [r7, #4]
 800e578:	887b      	ldrh	r3, [r7, #2]
 800e57a:	4413      	add	r3, r2
 800e57c:	3b01      	subs	r3, #1
 800e57e:	4a21      	ldr	r2, [pc, #132]	; (800e604 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e580:	8812      	ldrh	r2, [r2, #0]
 800e582:	b292      	uxth	r2, r2
 800e584:	4293      	cmp	r3, r2
 800e586:	db05      	blt.n	800e594 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e588:	4b1e      	ldr	r3, [pc, #120]	; (800e604 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e58a:	881b      	ldrh	r3, [r3, #0]
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	88bb      	ldrh	r3, [r7, #4]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e594:	88ba      	ldrh	r2, [r7, #4]
 800e596:	887b      	ldrh	r3, [r7, #2]
 800e598:	4413      	add	r3, r2
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	3b01      	subs	r3, #1
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	88fa      	ldrh	r2, [r7, #6]
 800e5a2:	88b9      	ldrh	r1, [r7, #4]
 800e5a4:	88f8      	ldrh	r0, [r7, #6]
 800e5a6:	f000 f82f 	bl	800e608 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e5ae:	887b      	ldrh	r3, [r7, #2]
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d009      	beq.n	800e5cc <ILI9341_Draw_Vertical_Line+0x8c>
 800e5b8:	887b      	ldrh	r3, [r7, #2]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d906      	bls.n	800e5cc <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e5c2:	887b      	ldrh	r3, [r7, #2]
 800e5c4:	085b      	lsrs	r3, r3, #1
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	005b      	lsls	r3, r3, #1
 800e5ca:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e5d2:	88ba      	ldrh	r2, [r7, #4]
 800e5d4:	887b      	ldrh	r3, [r7, #2]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	b299      	uxth	r1, r3
 800e5da:	883a      	ldrh	r2, [r7, #0]
 800e5dc:	88fb      	ldrh	r3, [r7, #6]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 f888 	bl	800e6f4 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e5e4:	887c      	ldrh	r4, [r7, #2]
 800e5e6:	883a      	ldrh	r2, [r7, #0]
 800e5e8:	88b9      	ldrh	r1, [r7, #4]
 800e5ea:	88f8      	ldrh	r0, [r7, #6]
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	f000 faeb 	bl	800ebcc <_LCD_Write_Frame>
 800e5f6:	e000      	b.n	800e5fa <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e5f8:	bf00      	nop
}
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd90      	pop	{r4, r7, pc}
 800e600:	20000c42 	.word	0x20000c42
 800e604:	20000c40 	.word	0x20000c40

0800e608 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4604      	mov	r4, r0
 800e610:	4608      	mov	r0, r1
 800e612:	4611      	mov	r1, r2
 800e614:	461a      	mov	r2, r3
 800e616:	4623      	mov	r3, r4
 800e618:	80fb      	strh	r3, [r7, #6]
 800e61a:	4603      	mov	r3, r0
 800e61c:	80bb      	strh	r3, [r7, #4]
 800e61e:	460b      	mov	r3, r1
 800e620:	807b      	strh	r3, [r7, #2]
 800e622:	4613      	mov	r3, r2
 800e624:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e626:	202a      	movs	r0, #42	; 0x2a
 800e628:	f000 fb80 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	0a1b      	lsrs	r3, r3, #8
 800e630:	b29b      	uxth	r3, r3
 800e632:	b2db      	uxtb	r3, r3
 800e634:	4618      	mov	r0, r3
 800e636:	f000 fbab 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(sc);
 800e63a:	88fb      	ldrh	r3, [r7, #6]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	4618      	mov	r0, r3
 800e640:	f000 fba6 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e644:	887b      	ldrh	r3, [r7, #2]
 800e646:	0a1b      	lsrs	r3, r3, #8
 800e648:	b29b      	uxth	r3, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 fb9f 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(ec);
 800e652:	887b      	ldrh	r3, [r7, #2]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	4618      	mov	r0, r3
 800e658:	f000 fb9a 	bl	800ed90 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e65c:	202b      	movs	r0, #43	; 0x2b
 800e65e:	f000 fb65 	bl	800ed2c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e662:	88bb      	ldrh	r3, [r7, #4]
 800e664:	0a1b      	lsrs	r3, r3, #8
 800e666:	b29b      	uxth	r3, r3
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fb90 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(sp);
 800e670:	88bb      	ldrh	r3, [r7, #4]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	4618      	mov	r0, r3
 800e676:	f000 fb8b 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e67a:	883b      	ldrh	r3, [r7, #0]
 800e67c:	0a1b      	lsrs	r3, r3, #8
 800e67e:	b29b      	uxth	r3, r3
 800e680:	b2db      	uxtb	r3, r3
 800e682:	4618      	mov	r0, r3
 800e684:	f000 fb84 	bl	800ed90 <_LCD_SendData>
	_LCD_SendData(ep);
 800e688:	883b      	ldrh	r3, [r7, #0]
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 fb7f 	bl	800ed90 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e692:	202c      	movs	r0, #44	; 0x2c
 800e694:	f000 fb4a 	bl	800ed2c <_LCD_SendCommand>
}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd90      	pop	{r4, r7, pc}

0800e6a0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e6aa:	4b10      	ldr	r3, [pc, #64]	; (800e6ec <ILI9341_Fill_Screen+0x4c>)
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	4b0f      	ldr	r3, [pc, #60]	; (800e6f0 <ILI9341_Fill_Screen+0x50>)
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	f7ff ffa5 	bl	800e608 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e6be:	4b0b      	ldr	r3, [pc, #44]	; (800e6ec <ILI9341_Fill_Screen+0x4c>)
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <ILI9341_Fill_Screen+0x50>)
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	fb03 f302 	mul.w	r3, r3, r2
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	88fa      	ldrh	r2, [r7, #6]
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	2100      	movs	r1, #0
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f000 fa75 	bl	800ebcc <_LCD_Write_Frame>
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20000c42 	.word	0x20000c42
 800e6f0:	20000c40 	.word	0x20000c40

0800e6f4 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08e      	sub	sp, #56	; 0x38
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	80fb      	strh	r3, [r7, #6]
 800e6fe:	460b      	mov	r3, r1
 800e700:	80bb      	strh	r3, [r7, #4]
 800e702:	4613      	mov	r3, r2
 800e704:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e706:	4b98      	ldr	r3, [pc, #608]	; (800e968 <ILI9341_Draw_Pixel+0x274>)
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	429a      	cmp	r2, r3
 800e710:	f080 8143 	bcs.w	800e99a <ILI9341_Draw_Pixel+0x2a6>
 800e714:	4b95      	ldr	r3, [pc, #596]	; (800e96c <ILI9341_Draw_Pixel+0x278>)
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	88ba      	ldrh	r2, [r7, #4]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	f080 813c 	bcs.w	800e99a <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e722:	4b93      	ldr	r3, [pc, #588]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e724:	695b      	ldr	r3, [r3, #20]
 800e726:	4a92      	ldr	r2, [pc, #584]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e72c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e72e:	4b90      	ldr	r3, [pc, #576]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	4a8f      	ldr	r2, [pc, #572]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e738:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e73a:	220a      	movs	r2, #10
 800e73c:	2100      	movs	r1, #0
 800e73e:	202a      	movs	r0, #42	; 0x2a
 800e740:	f000 fb58 	bl	800edf4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e744:	2300      	movs	r3, #0
 800e746:	637b      	str	r3, [r7, #52]	; 0x34
 800e748:	e008      	b.n	800e75c <ILI9341_Draw_Pixel+0x68>
 800e74a:	4b89      	ldr	r3, [pc, #548]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	4a88      	ldr	r2, [pc, #544]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e754:	6153      	str	r3, [r2, #20]
 800e756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e758:	3301      	adds	r3, #1
 800e75a:	637b      	str	r3, [r7, #52]	; 0x34
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	2b02      	cmp	r3, #2
 800e760:	ddf3      	ble.n	800e74a <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e762:	4b83      	ldr	r3, [pc, #524]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e764:	695b      	ldr	r3, [r3, #20]
 800e766:	4a82      	ldr	r2, [pc, #520]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e76c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e76e:	4b80      	ldr	r3, [pc, #512]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	4a7f      	ldr	r2, [pc, #508]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e778:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e77a:	4b7d      	ldr	r3, [pc, #500]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	4a7c      	ldr	r2, [pc, #496]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e784:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e786:	88fb      	ldrh	r3, [r7, #6]
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	753b      	strb	r3, [r7, #20]
 800e790:	88fb      	ldrh	r3, [r7, #6]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	757b      	strb	r3, [r7, #21]
 800e796:	88fb      	ldrh	r3, [r7, #6]
 800e798:	3301      	adds	r3, #1
 800e79a:	121b      	asrs	r3, r3, #8
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	75bb      	strb	r3, [r7, #22]
 800e7a0:	88fb      	ldrh	r3, [r7, #6]
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e7aa:	f107 0014 	add.w	r0, r7, #20
 800e7ae:	230a      	movs	r3, #10
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2104      	movs	r1, #4
 800e7b4:	f000 fb50 	bl	800ee58 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800e7bc:	e008      	b.n	800e7d0 <ILI9341_Draw_Pixel+0xdc>
 800e7be:	4b6c      	ldr	r3, [pc, #432]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	4a6b      	ldr	r2, [pc, #428]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7c8:	6153      	str	r3, [r2, #20]
 800e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	ddf3      	ble.n	800e7be <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e7d6:	4b66      	ldr	r3, [pc, #408]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	4a65      	ldr	r2, [pc, #404]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7e0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e7e2:	4b63      	ldr	r3, [pc, #396]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	4a62      	ldr	r2, [pc, #392]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7ec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7ee:	4b60      	ldr	r3, [pc, #384]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	4a5f      	ldr	r2, [pc, #380]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e7f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7f8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e7fa:	220a      	movs	r2, #10
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	202b      	movs	r0, #43	; 0x2b
 800e800:	f000 faf8 	bl	800edf4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e804:	2300      	movs	r3, #0
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e808:	e008      	b.n	800e81c <ILI9341_Draw_Pixel+0x128>
 800e80a:	4b59      	ldr	r3, [pc, #356]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e80c:	695b      	ldr	r3, [r3, #20]
 800e80e:	4a58      	ldr	r2, [pc, #352]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e814:	6153      	str	r3, [r2, #20]
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	3301      	adds	r3, #1
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	2b02      	cmp	r3, #2
 800e820:	ddf3      	ble.n	800e80a <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e822:	4b53      	ldr	r3, [pc, #332]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	4a52      	ldr	r2, [pc, #328]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e82c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e82e:	4b50      	ldr	r3, [pc, #320]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	4a4f      	ldr	r2, [pc, #316]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e838:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e83a:	4b4d      	ldr	r3, [pc, #308]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e83c:	695b      	ldr	r3, [r3, #20]
 800e83e:	4a4c      	ldr	r2, [pc, #304]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e844:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e846:	88bb      	ldrh	r3, [r7, #4]
 800e848:	0a1b      	lsrs	r3, r3, #8
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	743b      	strb	r3, [r7, #16]
 800e850:	88bb      	ldrh	r3, [r7, #4]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	747b      	strb	r3, [r7, #17]
 800e856:	88bb      	ldrh	r3, [r7, #4]
 800e858:	3301      	adds	r3, #1
 800e85a:	121b      	asrs	r3, r3, #8
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	74bb      	strb	r3, [r7, #18]
 800e860:	88bb      	ldrh	r3, [r7, #4]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	3301      	adds	r3, #1
 800e866:	b2db      	uxtb	r3, r3
 800e868:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e86a:	f107 0010 	add.w	r0, r7, #16
 800e86e:	230a      	movs	r3, #10
 800e870:	2200      	movs	r2, #0
 800e872:	2104      	movs	r1, #4
 800e874:	f000 faf0 	bl	800ee58 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e878:	2300      	movs	r3, #0
 800e87a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e87c:	e008      	b.n	800e890 <ILI9341_Draw_Pixel+0x19c>
 800e87e:	4b3c      	ldr	r3, [pc, #240]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	4a3b      	ldr	r2, [pc, #236]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e888:	6153      	str	r3, [r2, #20]
 800e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88c:	3301      	adds	r3, #1
 800e88e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	2b02      	cmp	r3, #2
 800e894:	ddf3      	ble.n	800e87e <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e896:	4b36      	ldr	r3, [pc, #216]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	4a35      	ldr	r2, [pc, #212]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e8a2:	4b33      	ldr	r3, [pc, #204]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8a4:	695b      	ldr	r3, [r3, #20]
 800e8a6:	4a32      	ldr	r2, [pc, #200]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8ac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8ae:	4b30      	ldr	r3, [pc, #192]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8b0:	695b      	ldr	r3, [r3, #20]
 800e8b2:	4a2f      	ldr	r2, [pc, #188]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8b8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e8ba:	220a      	movs	r2, #10
 800e8bc:	2100      	movs	r1, #0
 800e8be:	202c      	movs	r0, #44	; 0x2c
 800e8c0:	f000 fa98 	bl	800edf4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8c8:	e008      	b.n	800e8dc <ILI9341_Draw_Pixel+0x1e8>
 800e8ca:	4b29      	ldr	r3, [pc, #164]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	4a28      	ldr	r2, [pc, #160]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8d4:	6153      	str	r3, [r2, #20]
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	3301      	adds	r3, #1
 800e8da:	627b      	str	r3, [r7, #36]	; 0x24
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	ddf3      	ble.n	800e8ca <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e8e2:	4b23      	ldr	r3, [pc, #140]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	4a22      	ldr	r2, [pc, #136]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e8ee:	4b20      	ldr	r3, [pc, #128]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8f8:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8fa:	4b1d      	ldr	r3, [pc, #116]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	4a1c      	ldr	r2, [pc, #112]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e904:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e906:	887b      	ldrh	r3, [r7, #2]
 800e908:	0a1b      	lsrs	r3, r3, #8
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	733b      	strb	r3, [r7, #12]
 800e910:	887b      	ldrh	r3, [r7, #2]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e916:	f107 000c 	add.w	r0, r7, #12
 800e91a:	2301      	movs	r3, #1
 800e91c:	2200      	movs	r2, #0
 800e91e:	2102      	movs	r1, #2
 800e920:	f000 fa9a 	bl	800ee58 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e924:	2300      	movs	r3, #0
 800e926:	623b      	str	r3, [r7, #32]
 800e928:	e008      	b.n	800e93c <ILI9341_Draw_Pixel+0x248>
 800e92a:	4b11      	ldr	r3, [pc, #68]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	4a10      	ldr	r2, [pc, #64]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e934:	6153      	str	r3, [r2, #20]
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	3301      	adds	r3, #1
 800e93a:	623b      	str	r3, [r7, #32]
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	2b02      	cmp	r3, #2
 800e940:	ddf3      	ble.n	800e92a <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e942:	2300      	movs	r3, #0
 800e944:	61fb      	str	r3, [r7, #28]
 800e946:	e008      	b.n	800e95a <ILI9341_Draw_Pixel+0x266>
 800e948:	4b09      	ldr	r3, [pc, #36]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e94a:	695b      	ldr	r3, [r3, #20]
 800e94c:	4a08      	ldr	r2, [pc, #32]	; (800e970 <ILI9341_Draw_Pixel+0x27c>)
 800e94e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e952:	6153      	str	r3, [r2, #20]
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	3301      	adds	r3, #1
 800e958:	61fb      	str	r3, [r7, #28]
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	ddf3      	ble.n	800e948 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e960:	2300      	movs	r3, #0
 800e962:	61bb      	str	r3, [r7, #24]
 800e964:	e00f      	b.n	800e986 <ILI9341_Draw_Pixel+0x292>
 800e966:	bf00      	nop
 800e968:	20000c42 	.word	0x20000c42
 800e96c:	20000c40 	.word	0x20000c40
 800e970:	48000400 	.word	0x48000400
 800e974:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <ILI9341_Draw_Pixel+0x2b0>)
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	4a0a      	ldr	r2, [pc, #40]	; (800e9a4 <ILI9341_Draw_Pixel+0x2b0>)
 800e97a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e97e:	6153      	str	r3, [r2, #20]
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	3301      	adds	r3, #1
 800e984:	61bb      	str	r3, [r7, #24]
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	2b02      	cmp	r3, #2
 800e98a:	ddf3      	ble.n	800e974 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <ILI9341_Draw_Pixel+0x2b0>)
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <ILI9341_Draw_Pixel+0x2b0>)
 800e992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e996:	6153      	str	r3, [r2, #20]
 800e998:	e000      	b.n	800e99c <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e99a:	bf00      	nop


}
 800e99c:	3738      	adds	r7, #56	; 0x38
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	48000400 	.word	0x48000400

0800e9a8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4623      	mov	r3, r4
 800e9b8:	80fb      	strh	r3, [r7, #6]
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	80bb      	strh	r3, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	807b      	strh	r3, [r7, #2]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e9c6:	4b41      	ldr	r3, [pc, #260]	; (800eacc <ILI9341_Draw_Rectangle+0x124>)
 800e9c8:	881b      	ldrh	r3, [r3, #0]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	88fa      	ldrh	r2, [r7, #6]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d278      	bcs.n	800eac4 <ILI9341_Draw_Rectangle+0x11c>
 800e9d2:	4b3f      	ldr	r3, [pc, #252]	; (800ead0 <ILI9341_Draw_Rectangle+0x128>)
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	88ba      	ldrh	r2, [r7, #4]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d272      	bcs.n	800eac4 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e9de:	88fa      	ldrh	r2, [r7, #6]
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4a39      	ldr	r2, [pc, #228]	; (800eacc <ILI9341_Draw_Rectangle+0x124>)
 800e9e8:	8812      	ldrh	r2, [r2, #0]
 800e9ea:	b292      	uxth	r2, r2
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	db05      	blt.n	800e9fc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e9f0:	4b36      	ldr	r3, [pc, #216]	; (800eacc <ILI9341_Draw_Rectangle+0x124>)
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	88fb      	ldrh	r3, [r7, #6]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e9fc:	88ba      	ldrh	r2, [r7, #4]
 800e9fe:	883b      	ldrh	r3, [r7, #0]
 800ea00:	4413      	add	r3, r2
 800ea02:	3b01      	subs	r3, #1
 800ea04:	4a32      	ldr	r2, [pc, #200]	; (800ead0 <ILI9341_Draw_Rectangle+0x128>)
 800ea06:	8812      	ldrh	r2, [r2, #0]
 800ea08:	b292      	uxth	r2, r2
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	db05      	blt.n	800ea1a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ea0e:	4b30      	ldr	r3, [pc, #192]	; (800ead0 <ILI9341_Draw_Rectangle+0x128>)
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	88bb      	ldrh	r3, [r7, #4]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ea1a:	88fa      	ldrh	r2, [r7, #6]
 800ea1c:	887b      	ldrh	r3, [r7, #2]
 800ea1e:	4413      	add	r3, r2
 800ea20:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ea22:	3b01      	subs	r3, #1
 800ea24:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ea26:	88ba      	ldrh	r2, [r7, #4]
 800ea28:	883b      	ldrh	r3, [r7, #0]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	88b9      	ldrh	r1, [r7, #4]
 800ea34:	88f8      	ldrh	r0, [r7, #6]
 800ea36:	4622      	mov	r2, r4
 800ea38:	f7ff fde6 	bl	800e608 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ea3c:	883a      	ldrh	r2, [r7, #0]
 800ea3e:	887b      	ldrh	r3, [r7, #2]
 800ea40:	fb12 f303 	smulbb	r3, r2, r3
 800ea44:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ea4a:	89fb      	ldrh	r3, [r7, #14]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d009      	beq.n	800ea68 <ILI9341_Draw_Rectangle+0xc0>
 800ea54:	89fb      	ldrh	r3, [r7, #14]
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d906      	bls.n	800ea68 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ea5e:	89fb      	ldrh	r3, [r7, #14]
 800ea60:	085b      	lsrs	r3, r3, #1
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ea68:	89fc      	ldrh	r4, [r7, #14]
 800ea6a:	8c3a      	ldrh	r2, [r7, #32]
 800ea6c:	88b9      	ldrh	r1, [r7, #4]
 800ea6e:	88f8      	ldrh	r0, [r7, #6]
 800ea70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	4623      	mov	r3, r4
 800ea78:	f000 f8a8 	bl	800ebcc <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ea7c:	7b7b      	ldrb	r3, [r7, #13]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d021      	beq.n	800eac6 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ea82:	88fa      	ldrh	r2, [r7, #6]
 800ea84:	887b      	ldrh	r3, [r7, #2]
 800ea86:	4413      	add	r3, r2
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	3b02      	subs	r3, #2
 800ea8c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ea8e:	88ba      	ldrh	r2, [r7, #4]
 800ea90:	883b      	ldrh	r3, [r7, #0]
 800ea92:	4413      	add	r3, r2
 800ea94:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ea96:	3b01      	subs	r3, #1
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	8c3a      	ldrh	r2, [r7, #32]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	f7ff fe29 	bl	800e6f4 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eaa2:	88fa      	ldrh	r2, [r7, #6]
 800eaa4:	887b      	ldrh	r3, [r7, #2]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800eaae:	88ba      	ldrh	r2, [r7, #4]
 800eab0:	883b      	ldrh	r3, [r7, #0]
 800eab2:	4413      	add	r3, r2
 800eab4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eab6:	3b01      	subs	r3, #1
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	8c3a      	ldrh	r2, [r7, #32]
 800eabc:	4619      	mov	r1, r3
 800eabe:	f7ff fe19 	bl	800e6f4 <ILI9341_Draw_Pixel>
 800eac2:	e000      	b.n	800eac6 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eac4:	bf00      	nop
							colour);
	}
}
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd90      	pop	{r4, r7, pc}
 800eacc:	20000c42 	.word	0x20000c42
 800ead0:	20000c40 	.word	0x20000c40

0800ead4 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800eade:	79fb      	ldrb	r3, [r7, #7]
 800eae0:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800eae2:	2036      	movs	r0, #54	; 0x36
 800eae4:	f000 f922 	bl	800ed2c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
 800eaea:	2b03      	cmp	r3, #3
 800eaec:	d836      	bhi.n	800eb5c <ILI9341_Set_Rotation+0x88>
 800eaee:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <ILI9341_Set_Rotation+0x20>)
 800eaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf4:	0800eb05 	.word	0x0800eb05
 800eaf8:	0800eb1b 	.word	0x0800eb1b
 800eafc:	0800eb31 	.word	0x0800eb31
 800eb00:	0800eb47 	.word	0x0800eb47
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800eb04:	2048      	movs	r0, #72	; 0x48
 800eb06:	f000 f943 	bl	800ed90 <_LCD_SendData>
			LCD_WIDTH = 240;
 800eb0a:	4b17      	ldr	r3, [pc, #92]	; (800eb68 <ILI9341_Set_Rotation+0x94>)
 800eb0c:	22f0      	movs	r2, #240	; 0xf0
 800eb0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800eb10:	4b16      	ldr	r3, [pc, #88]	; (800eb6c <ILI9341_Set_Rotation+0x98>)
 800eb12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eb16:	801a      	strh	r2, [r3, #0]
			break;
 800eb18:	e021      	b.n	800eb5e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800eb1a:	2028      	movs	r0, #40	; 0x28
 800eb1c:	f000 f938 	bl	800ed90 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800eb20:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <ILI9341_Set_Rotation+0x94>)
 800eb22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eb26:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800eb28:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <ILI9341_Set_Rotation+0x98>)
 800eb2a:	22f0      	movs	r2, #240	; 0xf0
 800eb2c:	801a      	strh	r2, [r3, #0]
			break;
 800eb2e:	e016      	b.n	800eb5e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800eb30:	2088      	movs	r0, #136	; 0x88
 800eb32:	f000 f92d 	bl	800ed90 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800eb36:	4b0c      	ldr	r3, [pc, #48]	; (800eb68 <ILI9341_Set_Rotation+0x94>)
 800eb38:	22f0      	movs	r2, #240	; 0xf0
 800eb3a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800eb3c:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <ILI9341_Set_Rotation+0x98>)
 800eb3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eb42:	801a      	strh	r2, [r3, #0]
			break;
 800eb44:	e00b      	b.n	800eb5e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800eb46:	20e8      	movs	r0, #232	; 0xe8
 800eb48:	f000 f922 	bl	800ed90 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800eb4c:	4b06      	ldr	r3, [pc, #24]	; (800eb68 <ILI9341_Set_Rotation+0x94>)
 800eb4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eb52:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <ILI9341_Set_Rotation+0x98>)
 800eb56:	22f0      	movs	r2, #240	; 0xf0
 800eb58:	801a      	strh	r2, [r3, #0]
			break;
 800eb5a:	e000      	b.n	800eb5e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800eb5c:	bf00      	nop
	}
}
 800eb5e:	bf00      	nop
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20000c42 	.word	0x20000c42
 800eb6c:	20000c40 	.word	0x20000c40

0800eb70 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800eb70:	b480      	push	{r7}
 800eb72:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800eb74:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <_LCD_Enable+0x1c>)
 800eb76:	695b      	ldr	r3, [r3, #20]
 800eb78:	4a04      	ldr	r2, [pc, #16]	; (800eb8c <_LCD_Enable+0x1c>)
 800eb7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb7e:	6153      	str	r3, [r2, #20]
}
 800eb80:	bf00      	nop
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	48000400 	.word	0x48000400

0800eb90 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800eb94:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <_LCD_Reset+0x38>)
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	4a0b      	ldr	r2, [pc, #44]	; (800ebc8 <_LCD_Reset+0x38>)
 800eb9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb9e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800eba0:	20c8      	movs	r0, #200	; 0xc8
 800eba2:	f7f9 f997 	bl	8007ed4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eba6:	4b08      	ldr	r3, [pc, #32]	; (800ebc8 <_LCD_Reset+0x38>)
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	4a07      	ldr	r2, [pc, #28]	; (800ebc8 <_LCD_Reset+0x38>)
 800ebac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebb0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ebb2:	20c8      	movs	r0, #200	; 0xc8
 800ebb4:	f7f9 f98e 	bl	8007ed4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ebb8:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <_LCD_Reset+0x38>)
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	4a02      	ldr	r2, [pc, #8]	; (800ebc8 <_LCD_Reset+0x38>)
 800ebbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ebc2:	6153      	str	r3, [r2, #20]
}
 800ebc4:	bf00      	nop
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	48000400 	.word	0x48000400

0800ebcc <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800ebcc:	b5b0      	push	{r4, r5, r7, lr}
 800ebce:	b08e      	sub	sp, #56	; 0x38
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	607b      	str	r3, [r7, #4]
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	81fb      	strh	r3, [r7, #14]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	81bb      	strh	r3, [r7, #12]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	817b      	strh	r3, [r7, #10]
 800ebe0:	466b      	mov	r3, sp
 800ebe2:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	005b      	lsls	r3, r3, #1
 800ebec:	4a4d      	ldr	r2, [pc, #308]	; (800ed24 <_LCD_Write_Frame+0x158>)
 800ebee:	8812      	ldrh	r2, [r2, #0]
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d202      	bcs.n	800ebfa <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebf8:	e002      	b.n	800ec00 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800ebfa:	4b4a      	ldr	r3, [pc, #296]	; (800ed24 <_LCD_Write_Frame+0x158>)
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800ec00:	897b      	ldrh	r3, [r7, #10]
 800ec02:	0a1b      	lsrs	r3, r3, #8
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800ec08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	61bb      	str	r3, [r7, #24]
 800ec10:	4601      	mov	r1, r0
 800ec12:	f04f 0200 	mov.w	r2, #0
 800ec16:	f04f 0300 	mov.w	r3, #0
 800ec1a:	f04f 0400 	mov.w	r4, #0
 800ec1e:	00d4      	lsls	r4, r2, #3
 800ec20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ec24:	00cb      	lsls	r3, r1, #3
 800ec26:	4601      	mov	r1, r0
 800ec28:	f04f 0200 	mov.w	r2, #0
 800ec2c:	f04f 0300 	mov.w	r3, #0
 800ec30:	f04f 0400 	mov.w	r4, #0
 800ec34:	00d4      	lsls	r4, r2, #3
 800ec36:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ec3a:	00cb      	lsls	r3, r1, #3
 800ec3c:	1dc3      	adds	r3, r0, #7
 800ec3e:	08db      	lsrs	r3, r3, #3
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	ebad 0d03 	sub.w	sp, sp, r3
 800ec46:	466b      	mov	r3, sp
 800ec48:	3300      	adds	r3, #0
 800ec4a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec50:	e00d      	b.n	800ec6e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec56:	4413      	add	r3, r2
 800ec58:	7ffa      	ldrb	r2, [r7, #31]
 800ec5a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	3301      	adds	r3, #1
 800ec60:	897a      	ldrh	r2, [r7, #10]
 800ec62:	b2d1      	uxtb	r1, r2
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	3302      	adds	r3, #2
 800ec6c:	633b      	str	r3, [r7, #48]	; 0x30
 800ec6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d3ed      	bcc.n	800ec52 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800ec80:	2300      	movs	r3, #0
 800ec82:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00d      	beq.n	800eca6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800ec8a:	693a      	ldr	r2, [r7, #16]
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec92:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec98:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec9e:	fb01 f202 	mul.w	r2, r1, r2
 800eca2:	1a9b      	subs	r3, r3, r2
 800eca4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800eca6:	4b20      	ldr	r3, [pc, #128]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	4a1f      	ldr	r2, [pc, #124]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ecac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecb2:	4b1d      	ldr	r3, [pc, #116]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ecb4:	695b      	ldr	r3, [r3, #20]
 800ecb6:	4a1c      	ldr	r2, [pc, #112]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ecb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecbc:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800ecbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00f      	beq.n	800ece4 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc8:	e008      	b.n	800ecdc <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800ecca:	6978      	ldr	r0, [r7, #20]
 800eccc:	230a      	movs	r3, #10
 800ecce:	2200      	movs	r2, #0
 800ecd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecd2:	f000 f8c1 	bl	800ee58 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	3301      	adds	r3, #1
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
 800ecdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d3f2      	bcc.n	800ecca <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800ece4:	6978      	ldr	r0, [r7, #20]
 800ece6:	230a      	movs	r3, #10
 800ece8:	2200      	movs	r2, #0
 800ecea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecec:	f000 f8b4 	bl	800ee58 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	623b      	str	r3, [r7, #32]
 800ecf4:	e008      	b.n	800ed08 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	4a0b      	ldr	r2, [pc, #44]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ecfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed00:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	3301      	adds	r3, #1
 800ed06:	623b      	str	r3, [r7, #32]
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	ddf3      	ble.n	800ecf6 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed0e:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	4a05      	ldr	r2, [pc, #20]	; (800ed28 <_LCD_Write_Frame+0x15c>)
 800ed14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed18:	6153      	str	r3, [r2, #20]
 800ed1a:	46ad      	mov	sp, r5

}
 800ed1c:	bf00      	nop
 800ed1e:	3738      	adds	r7, #56	; 0x38
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bdb0      	pop	{r4, r5, r7, pc}
 800ed24:	20000c44 	.word	0x20000c44
 800ed28:	48000400 	.word	0x48000400

0800ed2c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed36:	4b15      	ldr	r3, [pc, #84]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed38:	695b      	ldr	r3, [r3, #20]
 800ed3a:	4a14      	ldr	r2, [pc, #80]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed40:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ed42:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed44:	695b      	ldr	r3, [r3, #20]
 800ed46:	4a11      	ldr	r2, [pc, #68]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed4c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	2200      	movs	r2, #0
 800ed52:	2100      	movs	r1, #0
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 f84d 	bl	800edf4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e008      	b.n	800ed72 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed60:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	4a09      	ldr	r2, [pc, #36]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed6a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	ddf3      	ble.n	800ed60 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed78:	4b04      	ldr	r3, [pc, #16]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed7a:	695b      	ldr	r3, [r3, #20]
 800ed7c:	4a03      	ldr	r2, [pc, #12]	; (800ed8c <_LCD_SendCommand+0x60>)
 800ed7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed82:	6153      	str	r3, [r2, #20]
}
 800ed84:	bf00      	nop
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	48000400 	.word	0x48000400

0800ed90 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	4603      	mov	r3, r0
 800ed98:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed9a:	4b15      	ldr	r3, [pc, #84]	; (800edf0 <_LCD_SendData+0x60>)
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	4a14      	ldr	r2, [pc, #80]	; (800edf0 <_LCD_SendData+0x60>)
 800eda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eda4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eda6:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <_LCD_SendData+0x60>)
 800eda8:	695b      	ldr	r3, [r3, #20]
 800edaa:	4a11      	ldr	r2, [pc, #68]	; (800edf0 <_LCD_SendData+0x60>)
 800edac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edb0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800edb2:	79fb      	ldrb	r3, [r7, #7]
 800edb4:	2200      	movs	r2, #0
 800edb6:	2100      	movs	r1, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 f81b 	bl	800edf4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	e008      	b.n	800edd6 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800edc4:	4b0a      	ldr	r3, [pc, #40]	; (800edf0 <_LCD_SendData+0x60>)
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	4a09      	ldr	r2, [pc, #36]	; (800edf0 <_LCD_SendData+0x60>)
 800edca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edce:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2b02      	cmp	r3, #2
 800edda:	ddf3      	ble.n	800edc4 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eddc:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <_LCD_SendData+0x60>)
 800edde:	695b      	ldr	r3, [r3, #20]
 800ede0:	4a03      	ldr	r2, [pc, #12]	; (800edf0 <_LCD_SendData+0x60>)
 800ede2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ede6:	6153      	str	r3, [r2, #20]
}
 800ede8:	bf00      	nop
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	48000400 	.word	0x48000400

0800edf4 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	4603      	mov	r3, r0
 800edfc:	71fb      	strb	r3, [r7, #7]
 800edfe:	460b      	mov	r3, r1
 800ee00:	71bb      	strb	r3, [r7, #6]
 800ee02:	4613      	mov	r3, r2
 800ee04:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	60fb      	str	r3, [r7, #12]
 800ee0a:	e003      	b.n	800ee14 <_SPI_SendByte+0x20>
   		asm("nop");
 800ee0c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	3301      	adds	r3, #1
 800ee12:	60fb      	str	r3, [r7, #12]
 800ee14:	79bb      	ldrb	r3, [r7, #6]
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	dbf7      	blt.n	800ee0c <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ee1c:	4b0c      	ldr	r3, [pc, #48]	; (800ee50 <_SPI_SendByte+0x5c>)
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f003 0302 	and.w	r3, r3, #2
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d102      	bne.n	800ee2e <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800ee28:	4a0a      	ldr	r2, [pc, #40]	; (800ee54 <_SPI_SendByte+0x60>)
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ee2e:	2300      	movs	r3, #0
 800ee30:	60bb      	str	r3, [r7, #8]
 800ee32:	e003      	b.n	800ee3c <_SPI_SendByte+0x48>
   		asm("nop");
 800ee34:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	60bb      	str	r3, [r7, #8]
 800ee3c:	797b      	ldrb	r3, [r7, #5]
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	dbf7      	blt.n	800ee34 <_SPI_SendByte+0x40>

#endif

}
 800ee44:	bf00      	nop
 800ee46:	3714      	adds	r7, #20
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	40003c00 	.word	0x40003c00
 800ee54:	40003c0c 	.word	0x40003c0c

0800ee58 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b089      	sub	sp, #36	; 0x24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	4611      	mov	r1, r2
 800ee64:	461a      	mov	r2, r3
 800ee66:	460b      	mov	r3, r1
 800ee68:	71fb      	strb	r3, [r7, #7]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61fb      	str	r3, [r7, #28]
 800ee72:	e003      	b.n	800ee7c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ee74:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	61fb      	str	r3, [r7, #28]
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	dbf7      	blt.n	800ee74 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ee88:	e01d      	b.n	800eec6 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ee8a:	4b1c      	ldr	r3, [pc, #112]	; (800eefc <_SPI_SendByteMultiByte+0xa4>)
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b02      	cmp	r3, #2
 800ee94:	d117      	bne.n	800eec6 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d90a      	bls.n	800eeb2 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	881a      	ldrh	r2, [r3, #0]
 800eea0:	4b16      	ldr	r3, [pc, #88]	; (800eefc <_SPI_SendByteMultiByte+0xa4>)
 800eea2:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	3302      	adds	r3, #2
 800eea8:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	3b02      	subs	r3, #2
 800eeae:	60bb      	str	r3, [r7, #8]
 800eeb0:	e009      	b.n	800eec6 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800eeb2:	4a13      	ldr	r2, [pc, #76]	; (800ef00 <_SPI_SendByteMultiByte+0xa8>)
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	3301      	adds	r3, #1
 800eebe:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3b01      	subs	r3, #1
 800eec4:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1de      	bne.n	800ee8a <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800eecc:	4b0b      	ldr	r3, [pc, #44]	; (800eefc <_SPI_SendByteMultiByte+0xa4>)
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	4a0a      	ldr	r2, [pc, #40]	; (800eefc <_SPI_SendByteMultiByte+0xa4>)
 800eed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eed6:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800eed8:	2300      	movs	r3, #0
 800eeda:	617b      	str	r3, [r7, #20]
 800eedc:	e003      	b.n	800eee6 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800eede:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	3301      	adds	r3, #1
 800eee4:	617b      	str	r3, [r7, #20]
 800eee6:	79bb      	ldrb	r3, [r7, #6]
 800eee8:	697a      	ldr	r2, [r7, #20]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	dbf7      	blt.n	800eede <_SPI_SendByteMultiByte+0x86>

#endif

}
 800eeee:	bf00      	nop
 800eef0:	3724      	adds	r7, #36	; 0x24
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	40003c00 	.word	0x40003c00
 800ef00:	40003c0c 	.word	0x40003c0c

0800ef04 <__errno>:
 800ef04:	4b01      	ldr	r3, [pc, #4]	; (800ef0c <__errno+0x8>)
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	20001c38 	.word	0x20001c38

0800ef10 <__libc_init_array>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	4e0d      	ldr	r6, [pc, #52]	; (800ef48 <__libc_init_array+0x38>)
 800ef14:	4c0d      	ldr	r4, [pc, #52]	; (800ef4c <__libc_init_array+0x3c>)
 800ef16:	1ba4      	subs	r4, r4, r6
 800ef18:	10a4      	asrs	r4, r4, #2
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	42a5      	cmp	r5, r4
 800ef1e:	d109      	bne.n	800ef34 <__libc_init_array+0x24>
 800ef20:	4e0b      	ldr	r6, [pc, #44]	; (800ef50 <__libc_init_array+0x40>)
 800ef22:	4c0c      	ldr	r4, [pc, #48]	; (800ef54 <__libc_init_array+0x44>)
 800ef24:	f003 ff46 	bl	8012db4 <_init>
 800ef28:	1ba4      	subs	r4, r4, r6
 800ef2a:	10a4      	asrs	r4, r4, #2
 800ef2c:	2500      	movs	r5, #0
 800ef2e:	42a5      	cmp	r5, r4
 800ef30:	d105      	bne.n	800ef3e <__libc_init_array+0x2e>
 800ef32:	bd70      	pop	{r4, r5, r6, pc}
 800ef34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef38:	4798      	blx	r3
 800ef3a:	3501      	adds	r5, #1
 800ef3c:	e7ee      	b.n	800ef1c <__libc_init_array+0xc>
 800ef3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef42:	4798      	blx	r3
 800ef44:	3501      	adds	r5, #1
 800ef46:	e7f2      	b.n	800ef2e <__libc_init_array+0x1e>
 800ef48:	08014278 	.word	0x08014278
 800ef4c:	08014278 	.word	0x08014278
 800ef50:	08014278 	.word	0x08014278
 800ef54:	0801427c 	.word	0x0801427c

0800ef58 <memset>:
 800ef58:	4402      	add	r2, r0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d100      	bne.n	800ef62 <memset+0xa>
 800ef60:	4770      	bx	lr
 800ef62:	f803 1b01 	strb.w	r1, [r3], #1
 800ef66:	e7f9      	b.n	800ef5c <memset+0x4>

0800ef68 <__cvt>:
 800ef68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef6c:	ec55 4b10 	vmov	r4, r5, d0
 800ef70:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ef72:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	460e      	mov	r6, r1
 800ef7a:	4691      	mov	r9, r2
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	bfb8      	it	lt
 800ef80:	4622      	movlt	r2, r4
 800ef82:	462b      	mov	r3, r5
 800ef84:	f027 0720 	bic.w	r7, r7, #32
 800ef88:	bfbb      	ittet	lt
 800ef8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef8e:	461d      	movlt	r5, r3
 800ef90:	2300      	movge	r3, #0
 800ef92:	232d      	movlt	r3, #45	; 0x2d
 800ef94:	bfb8      	it	lt
 800ef96:	4614      	movlt	r4, r2
 800ef98:	2f46      	cmp	r7, #70	; 0x46
 800ef9a:	700b      	strb	r3, [r1, #0]
 800ef9c:	d004      	beq.n	800efa8 <__cvt+0x40>
 800ef9e:	2f45      	cmp	r7, #69	; 0x45
 800efa0:	d100      	bne.n	800efa4 <__cvt+0x3c>
 800efa2:	3601      	adds	r6, #1
 800efa4:	2102      	movs	r1, #2
 800efa6:	e000      	b.n	800efaa <__cvt+0x42>
 800efa8:	2103      	movs	r1, #3
 800efaa:	ab03      	add	r3, sp, #12
 800efac:	9301      	str	r3, [sp, #4]
 800efae:	ab02      	add	r3, sp, #8
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	4632      	mov	r2, r6
 800efb4:	4653      	mov	r3, sl
 800efb6:	ec45 4b10 	vmov	d0, r4, r5
 800efba:	f000 fe25 	bl	800fc08 <_dtoa_r>
 800efbe:	2f47      	cmp	r7, #71	; 0x47
 800efc0:	4680      	mov	r8, r0
 800efc2:	d102      	bne.n	800efca <__cvt+0x62>
 800efc4:	f019 0f01 	tst.w	r9, #1
 800efc8:	d026      	beq.n	800f018 <__cvt+0xb0>
 800efca:	2f46      	cmp	r7, #70	; 0x46
 800efcc:	eb08 0906 	add.w	r9, r8, r6
 800efd0:	d111      	bne.n	800eff6 <__cvt+0x8e>
 800efd2:	f898 3000 	ldrb.w	r3, [r8]
 800efd6:	2b30      	cmp	r3, #48	; 0x30
 800efd8:	d10a      	bne.n	800eff0 <__cvt+0x88>
 800efda:	2200      	movs	r2, #0
 800efdc:	2300      	movs	r3, #0
 800efde:	4620      	mov	r0, r4
 800efe0:	4629      	mov	r1, r5
 800efe2:	f7f1 fd99 	bl	8000b18 <__aeabi_dcmpeq>
 800efe6:	b918      	cbnz	r0, 800eff0 <__cvt+0x88>
 800efe8:	f1c6 0601 	rsb	r6, r6, #1
 800efec:	f8ca 6000 	str.w	r6, [sl]
 800eff0:	f8da 3000 	ldr.w	r3, [sl]
 800eff4:	4499      	add	r9, r3
 800eff6:	2200      	movs	r2, #0
 800eff8:	2300      	movs	r3, #0
 800effa:	4620      	mov	r0, r4
 800effc:	4629      	mov	r1, r5
 800effe:	f7f1 fd8b 	bl	8000b18 <__aeabi_dcmpeq>
 800f002:	b938      	cbnz	r0, 800f014 <__cvt+0xac>
 800f004:	2230      	movs	r2, #48	; 0x30
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	454b      	cmp	r3, r9
 800f00a:	d205      	bcs.n	800f018 <__cvt+0xb0>
 800f00c:	1c59      	adds	r1, r3, #1
 800f00e:	9103      	str	r1, [sp, #12]
 800f010:	701a      	strb	r2, [r3, #0]
 800f012:	e7f8      	b.n	800f006 <__cvt+0x9e>
 800f014:	f8cd 900c 	str.w	r9, [sp, #12]
 800f018:	9b03      	ldr	r3, [sp, #12]
 800f01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f01c:	eba3 0308 	sub.w	r3, r3, r8
 800f020:	4640      	mov	r0, r8
 800f022:	6013      	str	r3, [r2, #0]
 800f024:	b004      	add	sp, #16
 800f026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f02a <__exponent>:
 800f02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f02c:	2900      	cmp	r1, #0
 800f02e:	4604      	mov	r4, r0
 800f030:	bfba      	itte	lt
 800f032:	4249      	neglt	r1, r1
 800f034:	232d      	movlt	r3, #45	; 0x2d
 800f036:	232b      	movge	r3, #43	; 0x2b
 800f038:	2909      	cmp	r1, #9
 800f03a:	f804 2b02 	strb.w	r2, [r4], #2
 800f03e:	7043      	strb	r3, [r0, #1]
 800f040:	dd20      	ble.n	800f084 <__exponent+0x5a>
 800f042:	f10d 0307 	add.w	r3, sp, #7
 800f046:	461f      	mov	r7, r3
 800f048:	260a      	movs	r6, #10
 800f04a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f04e:	fb06 1115 	mls	r1, r6, r5, r1
 800f052:	3130      	adds	r1, #48	; 0x30
 800f054:	2d09      	cmp	r5, #9
 800f056:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f05a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f05e:	4629      	mov	r1, r5
 800f060:	dc09      	bgt.n	800f076 <__exponent+0x4c>
 800f062:	3130      	adds	r1, #48	; 0x30
 800f064:	3b02      	subs	r3, #2
 800f066:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f06a:	42bb      	cmp	r3, r7
 800f06c:	4622      	mov	r2, r4
 800f06e:	d304      	bcc.n	800f07a <__exponent+0x50>
 800f070:	1a10      	subs	r0, r2, r0
 800f072:	b003      	add	sp, #12
 800f074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f076:	4613      	mov	r3, r2
 800f078:	e7e7      	b.n	800f04a <__exponent+0x20>
 800f07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f07e:	f804 2b01 	strb.w	r2, [r4], #1
 800f082:	e7f2      	b.n	800f06a <__exponent+0x40>
 800f084:	2330      	movs	r3, #48	; 0x30
 800f086:	4419      	add	r1, r3
 800f088:	7083      	strb	r3, [r0, #2]
 800f08a:	1d02      	adds	r2, r0, #4
 800f08c:	70c1      	strb	r1, [r0, #3]
 800f08e:	e7ef      	b.n	800f070 <__exponent+0x46>

0800f090 <_printf_float>:
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	b08d      	sub	sp, #52	; 0x34
 800f096:	460c      	mov	r4, r1
 800f098:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f09c:	4616      	mov	r6, r2
 800f09e:	461f      	mov	r7, r3
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	f001 fce3 	bl	8010a6c <_localeconv_r>
 800f0a6:	6803      	ldr	r3, [r0, #0]
 800f0a8:	9304      	str	r3, [sp, #16]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f1 f8b8 	bl	8000220 <strlen>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f0b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f0b8:	9005      	str	r0, [sp, #20]
 800f0ba:	3307      	adds	r3, #7
 800f0bc:	f023 0307 	bic.w	r3, r3, #7
 800f0c0:	f103 0208 	add.w	r2, r3, #8
 800f0c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f0c8:	f8d4 b000 	ldr.w	fp, [r4]
 800f0cc:	f8c8 2000 	str.w	r2, [r8]
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f0d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f0dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f0e0:	9307      	str	r3, [sp, #28]
 800f0e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ea:	4ba7      	ldr	r3, [pc, #668]	; (800f388 <_printf_float+0x2f8>)
 800f0ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0f0:	f7f1 fd44 	bl	8000b7c <__aeabi_dcmpun>
 800f0f4:	bb70      	cbnz	r0, 800f154 <_printf_float+0xc4>
 800f0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0fa:	4ba3      	ldr	r3, [pc, #652]	; (800f388 <_printf_float+0x2f8>)
 800f0fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f100:	f7f1 fd1e 	bl	8000b40 <__aeabi_dcmple>
 800f104:	bb30      	cbnz	r0, 800f154 <_printf_float+0xc4>
 800f106:	2200      	movs	r2, #0
 800f108:	2300      	movs	r3, #0
 800f10a:	4640      	mov	r0, r8
 800f10c:	4649      	mov	r1, r9
 800f10e:	f7f1 fd0d 	bl	8000b2c <__aeabi_dcmplt>
 800f112:	b110      	cbz	r0, 800f11a <_printf_float+0x8a>
 800f114:	232d      	movs	r3, #45	; 0x2d
 800f116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f11a:	4a9c      	ldr	r2, [pc, #624]	; (800f38c <_printf_float+0x2fc>)
 800f11c:	4b9c      	ldr	r3, [pc, #624]	; (800f390 <_printf_float+0x300>)
 800f11e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f122:	bf8c      	ite	hi
 800f124:	4690      	movhi	r8, r2
 800f126:	4698      	movls	r8, r3
 800f128:	2303      	movs	r3, #3
 800f12a:	f02b 0204 	bic.w	r2, fp, #4
 800f12e:	6123      	str	r3, [r4, #16]
 800f130:	6022      	str	r2, [r4, #0]
 800f132:	f04f 0900 	mov.w	r9, #0
 800f136:	9700      	str	r7, [sp, #0]
 800f138:	4633      	mov	r3, r6
 800f13a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 f9e6 	bl	800f510 <_printf_common>
 800f144:	3001      	adds	r0, #1
 800f146:	f040 808d 	bne.w	800f264 <_printf_float+0x1d4>
 800f14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f14e:	b00d      	add	sp, #52	; 0x34
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f154:	4642      	mov	r2, r8
 800f156:	464b      	mov	r3, r9
 800f158:	4640      	mov	r0, r8
 800f15a:	4649      	mov	r1, r9
 800f15c:	f7f1 fd0e 	bl	8000b7c <__aeabi_dcmpun>
 800f160:	b110      	cbz	r0, 800f168 <_printf_float+0xd8>
 800f162:	4a8c      	ldr	r2, [pc, #560]	; (800f394 <_printf_float+0x304>)
 800f164:	4b8c      	ldr	r3, [pc, #560]	; (800f398 <_printf_float+0x308>)
 800f166:	e7da      	b.n	800f11e <_printf_float+0x8e>
 800f168:	6861      	ldr	r1, [r4, #4]
 800f16a:	1c4b      	adds	r3, r1, #1
 800f16c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f170:	a80a      	add	r0, sp, #40	; 0x28
 800f172:	d13e      	bne.n	800f1f2 <_printf_float+0x162>
 800f174:	2306      	movs	r3, #6
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	2300      	movs	r3, #0
 800f17a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f17e:	ab09      	add	r3, sp, #36	; 0x24
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	ec49 8b10 	vmov	d0, r8, r9
 800f186:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f18a:	6022      	str	r2, [r4, #0]
 800f18c:	f8cd a004 	str.w	sl, [sp, #4]
 800f190:	6861      	ldr	r1, [r4, #4]
 800f192:	4628      	mov	r0, r5
 800f194:	f7ff fee8 	bl	800ef68 <__cvt>
 800f198:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f19c:	2b47      	cmp	r3, #71	; 0x47
 800f19e:	4680      	mov	r8, r0
 800f1a0:	d109      	bne.n	800f1b6 <_printf_float+0x126>
 800f1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1a4:	1cd8      	adds	r0, r3, #3
 800f1a6:	db02      	blt.n	800f1ae <_printf_float+0x11e>
 800f1a8:	6862      	ldr	r2, [r4, #4]
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	dd47      	ble.n	800f23e <_printf_float+0x1ae>
 800f1ae:	f1aa 0a02 	sub.w	sl, sl, #2
 800f1b2:	fa5f fa8a 	uxtb.w	sl, sl
 800f1b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f1ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1bc:	d824      	bhi.n	800f208 <_printf_float+0x178>
 800f1be:	3901      	subs	r1, #1
 800f1c0:	4652      	mov	r2, sl
 800f1c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f1c6:	9109      	str	r1, [sp, #36]	; 0x24
 800f1c8:	f7ff ff2f 	bl	800f02a <__exponent>
 800f1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1ce:	1813      	adds	r3, r2, r0
 800f1d0:	2a01      	cmp	r2, #1
 800f1d2:	4681      	mov	r9, r0
 800f1d4:	6123      	str	r3, [r4, #16]
 800f1d6:	dc02      	bgt.n	800f1de <_printf_float+0x14e>
 800f1d8:	6822      	ldr	r2, [r4, #0]
 800f1da:	07d1      	lsls	r1, r2, #31
 800f1dc:	d501      	bpl.n	800f1e2 <_printf_float+0x152>
 800f1de:	3301      	adds	r3, #1
 800f1e0:	6123      	str	r3, [r4, #16]
 800f1e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d0a5      	beq.n	800f136 <_printf_float+0xa6>
 800f1ea:	232d      	movs	r3, #45	; 0x2d
 800f1ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f0:	e7a1      	b.n	800f136 <_printf_float+0xa6>
 800f1f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f1f6:	f000 8177 	beq.w	800f4e8 <_printf_float+0x458>
 800f1fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f1fe:	d1bb      	bne.n	800f178 <_printf_float+0xe8>
 800f200:	2900      	cmp	r1, #0
 800f202:	d1b9      	bne.n	800f178 <_printf_float+0xe8>
 800f204:	2301      	movs	r3, #1
 800f206:	e7b6      	b.n	800f176 <_printf_float+0xe6>
 800f208:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f20c:	d119      	bne.n	800f242 <_printf_float+0x1b2>
 800f20e:	2900      	cmp	r1, #0
 800f210:	6863      	ldr	r3, [r4, #4]
 800f212:	dd0c      	ble.n	800f22e <_printf_float+0x19e>
 800f214:	6121      	str	r1, [r4, #16]
 800f216:	b913      	cbnz	r3, 800f21e <_printf_float+0x18e>
 800f218:	6822      	ldr	r2, [r4, #0]
 800f21a:	07d2      	lsls	r2, r2, #31
 800f21c:	d502      	bpl.n	800f224 <_printf_float+0x194>
 800f21e:	3301      	adds	r3, #1
 800f220:	440b      	add	r3, r1
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f226:	65a3      	str	r3, [r4, #88]	; 0x58
 800f228:	f04f 0900 	mov.w	r9, #0
 800f22c:	e7d9      	b.n	800f1e2 <_printf_float+0x152>
 800f22e:	b913      	cbnz	r3, 800f236 <_printf_float+0x1a6>
 800f230:	6822      	ldr	r2, [r4, #0]
 800f232:	07d0      	lsls	r0, r2, #31
 800f234:	d501      	bpl.n	800f23a <_printf_float+0x1aa>
 800f236:	3302      	adds	r3, #2
 800f238:	e7f3      	b.n	800f222 <_printf_float+0x192>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e7f1      	b.n	800f222 <_printf_float+0x192>
 800f23e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f242:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f246:	4293      	cmp	r3, r2
 800f248:	db05      	blt.n	800f256 <_printf_float+0x1c6>
 800f24a:	6822      	ldr	r2, [r4, #0]
 800f24c:	6123      	str	r3, [r4, #16]
 800f24e:	07d1      	lsls	r1, r2, #31
 800f250:	d5e8      	bpl.n	800f224 <_printf_float+0x194>
 800f252:	3301      	adds	r3, #1
 800f254:	e7e5      	b.n	800f222 <_printf_float+0x192>
 800f256:	2b00      	cmp	r3, #0
 800f258:	bfd4      	ite	le
 800f25a:	f1c3 0302 	rsble	r3, r3, #2
 800f25e:	2301      	movgt	r3, #1
 800f260:	4413      	add	r3, r2
 800f262:	e7de      	b.n	800f222 <_printf_float+0x192>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	055a      	lsls	r2, r3, #21
 800f268:	d407      	bmi.n	800f27a <_printf_float+0x1ea>
 800f26a:	6923      	ldr	r3, [r4, #16]
 800f26c:	4642      	mov	r2, r8
 800f26e:	4631      	mov	r1, r6
 800f270:	4628      	mov	r0, r5
 800f272:	47b8      	blx	r7
 800f274:	3001      	adds	r0, #1
 800f276:	d12b      	bne.n	800f2d0 <_printf_float+0x240>
 800f278:	e767      	b.n	800f14a <_printf_float+0xba>
 800f27a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f27e:	f240 80dc 	bls.w	800f43a <_printf_float+0x3aa>
 800f282:	2200      	movs	r2, #0
 800f284:	2300      	movs	r3, #0
 800f286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f28a:	f7f1 fc45 	bl	8000b18 <__aeabi_dcmpeq>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d033      	beq.n	800f2fa <_printf_float+0x26a>
 800f292:	2301      	movs	r3, #1
 800f294:	4a41      	ldr	r2, [pc, #260]	; (800f39c <_printf_float+0x30c>)
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	47b8      	blx	r7
 800f29c:	3001      	adds	r0, #1
 800f29e:	f43f af54 	beq.w	800f14a <_printf_float+0xba>
 800f2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	db02      	blt.n	800f2b0 <_printf_float+0x220>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	07d8      	lsls	r0, r3, #31
 800f2ae:	d50f      	bpl.n	800f2d0 <_printf_float+0x240>
 800f2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	47b8      	blx	r7
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	f43f af45 	beq.w	800f14a <_printf_float+0xba>
 800f2c0:	f04f 0800 	mov.w	r8, #0
 800f2c4:	f104 091a 	add.w	r9, r4, #26
 800f2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	4543      	cmp	r3, r8
 800f2ce:	dc09      	bgt.n	800f2e4 <_printf_float+0x254>
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	079b      	lsls	r3, r3, #30
 800f2d4:	f100 8103 	bmi.w	800f4de <_printf_float+0x44e>
 800f2d8:	68e0      	ldr	r0, [r4, #12]
 800f2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2dc:	4298      	cmp	r0, r3
 800f2de:	bfb8      	it	lt
 800f2e0:	4618      	movlt	r0, r3
 800f2e2:	e734      	b.n	800f14e <_printf_float+0xbe>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	464a      	mov	r2, r9
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f af2b 	beq.w	800f14a <_printf_float+0xba>
 800f2f4:	f108 0801 	add.w	r8, r8, #1
 800f2f8:	e7e6      	b.n	800f2c8 <_printf_float+0x238>
 800f2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	dc2b      	bgt.n	800f358 <_printf_float+0x2c8>
 800f300:	2301      	movs	r3, #1
 800f302:	4a26      	ldr	r2, [pc, #152]	; (800f39c <_printf_float+0x30c>)
 800f304:	4631      	mov	r1, r6
 800f306:	4628      	mov	r0, r5
 800f308:	47b8      	blx	r7
 800f30a:	3001      	adds	r0, #1
 800f30c:	f43f af1d 	beq.w	800f14a <_printf_float+0xba>
 800f310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f312:	b923      	cbnz	r3, 800f31e <_printf_float+0x28e>
 800f314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f316:	b913      	cbnz	r3, 800f31e <_printf_float+0x28e>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	07d9      	lsls	r1, r3, #31
 800f31c:	d5d8      	bpl.n	800f2d0 <_printf_float+0x240>
 800f31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f322:	4631      	mov	r1, r6
 800f324:	4628      	mov	r0, r5
 800f326:	47b8      	blx	r7
 800f328:	3001      	adds	r0, #1
 800f32a:	f43f af0e 	beq.w	800f14a <_printf_float+0xba>
 800f32e:	f04f 0900 	mov.w	r9, #0
 800f332:	f104 0a1a 	add.w	sl, r4, #26
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	425b      	negs	r3, r3
 800f33a:	454b      	cmp	r3, r9
 800f33c:	dc01      	bgt.n	800f342 <_printf_float+0x2b2>
 800f33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f340:	e794      	b.n	800f26c <_printf_float+0x1dc>
 800f342:	2301      	movs	r3, #1
 800f344:	4652      	mov	r2, sl
 800f346:	4631      	mov	r1, r6
 800f348:	4628      	mov	r0, r5
 800f34a:	47b8      	blx	r7
 800f34c:	3001      	adds	r0, #1
 800f34e:	f43f aefc 	beq.w	800f14a <_printf_float+0xba>
 800f352:	f109 0901 	add.w	r9, r9, #1
 800f356:	e7ee      	b.n	800f336 <_printf_float+0x2a6>
 800f358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f35a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f35c:	429a      	cmp	r2, r3
 800f35e:	bfa8      	it	ge
 800f360:	461a      	movge	r2, r3
 800f362:	2a00      	cmp	r2, #0
 800f364:	4691      	mov	r9, r2
 800f366:	dd07      	ble.n	800f378 <_printf_float+0x2e8>
 800f368:	4613      	mov	r3, r2
 800f36a:	4631      	mov	r1, r6
 800f36c:	4642      	mov	r2, r8
 800f36e:	4628      	mov	r0, r5
 800f370:	47b8      	blx	r7
 800f372:	3001      	adds	r0, #1
 800f374:	f43f aee9 	beq.w	800f14a <_printf_float+0xba>
 800f378:	f104 031a 	add.w	r3, r4, #26
 800f37c:	f04f 0b00 	mov.w	fp, #0
 800f380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f384:	9306      	str	r3, [sp, #24]
 800f386:	e015      	b.n	800f3b4 <_printf_float+0x324>
 800f388:	7fefffff 	.word	0x7fefffff
 800f38c:	08013f74 	.word	0x08013f74
 800f390:	08013f70 	.word	0x08013f70
 800f394:	08013f7c 	.word	0x08013f7c
 800f398:	08013f78 	.word	0x08013f78
 800f39c:	0801422c 	.word	0x0801422c
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	9a06      	ldr	r2, [sp, #24]
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b8      	blx	r7
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	f43f aecd 	beq.w	800f14a <_printf_float+0xba>
 800f3b0:	f10b 0b01 	add.w	fp, fp, #1
 800f3b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f3b8:	ebaa 0309 	sub.w	r3, sl, r9
 800f3bc:	455b      	cmp	r3, fp
 800f3be:	dcef      	bgt.n	800f3a0 <_printf_float+0x310>
 800f3c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	44d0      	add	r8, sl
 800f3c8:	db15      	blt.n	800f3f6 <_printf_float+0x366>
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	07da      	lsls	r2, r3, #31
 800f3ce:	d412      	bmi.n	800f3f6 <_printf_float+0x366>
 800f3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3d4:	eba3 020a 	sub.w	r2, r3, sl
 800f3d8:	eba3 0a01 	sub.w	sl, r3, r1
 800f3dc:	4592      	cmp	sl, r2
 800f3de:	bfa8      	it	ge
 800f3e0:	4692      	movge	sl, r2
 800f3e2:	f1ba 0f00 	cmp.w	sl, #0
 800f3e6:	dc0e      	bgt.n	800f406 <_printf_float+0x376>
 800f3e8:	f04f 0800 	mov.w	r8, #0
 800f3ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f3f0:	f104 091a 	add.w	r9, r4, #26
 800f3f4:	e019      	b.n	800f42a <_printf_float+0x39a>
 800f3f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	47b8      	blx	r7
 800f400:	3001      	adds	r0, #1
 800f402:	d1e5      	bne.n	800f3d0 <_printf_float+0x340>
 800f404:	e6a1      	b.n	800f14a <_printf_float+0xba>
 800f406:	4653      	mov	r3, sl
 800f408:	4642      	mov	r2, r8
 800f40a:	4631      	mov	r1, r6
 800f40c:	4628      	mov	r0, r5
 800f40e:	47b8      	blx	r7
 800f410:	3001      	adds	r0, #1
 800f412:	d1e9      	bne.n	800f3e8 <_printf_float+0x358>
 800f414:	e699      	b.n	800f14a <_printf_float+0xba>
 800f416:	2301      	movs	r3, #1
 800f418:	464a      	mov	r2, r9
 800f41a:	4631      	mov	r1, r6
 800f41c:	4628      	mov	r0, r5
 800f41e:	47b8      	blx	r7
 800f420:	3001      	adds	r0, #1
 800f422:	f43f ae92 	beq.w	800f14a <_printf_float+0xba>
 800f426:	f108 0801 	add.w	r8, r8, #1
 800f42a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f42e:	1a9b      	subs	r3, r3, r2
 800f430:	eba3 030a 	sub.w	r3, r3, sl
 800f434:	4543      	cmp	r3, r8
 800f436:	dcee      	bgt.n	800f416 <_printf_float+0x386>
 800f438:	e74a      	b.n	800f2d0 <_printf_float+0x240>
 800f43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f43c:	2a01      	cmp	r2, #1
 800f43e:	dc01      	bgt.n	800f444 <_printf_float+0x3b4>
 800f440:	07db      	lsls	r3, r3, #31
 800f442:	d53a      	bpl.n	800f4ba <_printf_float+0x42a>
 800f444:	2301      	movs	r3, #1
 800f446:	4642      	mov	r2, r8
 800f448:	4631      	mov	r1, r6
 800f44a:	4628      	mov	r0, r5
 800f44c:	47b8      	blx	r7
 800f44e:	3001      	adds	r0, #1
 800f450:	f43f ae7b 	beq.w	800f14a <_printf_float+0xba>
 800f454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f458:	4631      	mov	r1, r6
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	f108 0801 	add.w	r8, r8, #1
 800f464:	f43f ae71 	beq.w	800f14a <_printf_float+0xba>
 800f468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f46a:	2200      	movs	r2, #0
 800f46c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f474:	2300      	movs	r3, #0
 800f476:	f7f1 fb4f 	bl	8000b18 <__aeabi_dcmpeq>
 800f47a:	b9c8      	cbnz	r0, 800f4b0 <_printf_float+0x420>
 800f47c:	4653      	mov	r3, sl
 800f47e:	4642      	mov	r2, r8
 800f480:	4631      	mov	r1, r6
 800f482:	4628      	mov	r0, r5
 800f484:	47b8      	blx	r7
 800f486:	3001      	adds	r0, #1
 800f488:	d10e      	bne.n	800f4a8 <_printf_float+0x418>
 800f48a:	e65e      	b.n	800f14a <_printf_float+0xba>
 800f48c:	2301      	movs	r3, #1
 800f48e:	4652      	mov	r2, sl
 800f490:	4631      	mov	r1, r6
 800f492:	4628      	mov	r0, r5
 800f494:	47b8      	blx	r7
 800f496:	3001      	adds	r0, #1
 800f498:	f43f ae57 	beq.w	800f14a <_printf_float+0xba>
 800f49c:	f108 0801 	add.w	r8, r8, #1
 800f4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	4543      	cmp	r3, r8
 800f4a6:	dcf1      	bgt.n	800f48c <_printf_float+0x3fc>
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f4ae:	e6de      	b.n	800f26e <_printf_float+0x1de>
 800f4b0:	f04f 0800 	mov.w	r8, #0
 800f4b4:	f104 0a1a 	add.w	sl, r4, #26
 800f4b8:	e7f2      	b.n	800f4a0 <_printf_float+0x410>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e7df      	b.n	800f47e <_printf_float+0x3ee>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	464a      	mov	r2, r9
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	47b8      	blx	r7
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	f43f ae3e 	beq.w	800f14a <_printf_float+0xba>
 800f4ce:	f108 0801 	add.w	r8, r8, #1
 800f4d2:	68e3      	ldr	r3, [r4, #12]
 800f4d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	4543      	cmp	r3, r8
 800f4da:	dcf0      	bgt.n	800f4be <_printf_float+0x42e>
 800f4dc:	e6fc      	b.n	800f2d8 <_printf_float+0x248>
 800f4de:	f04f 0800 	mov.w	r8, #0
 800f4e2:	f104 0919 	add.w	r9, r4, #25
 800f4e6:	e7f4      	b.n	800f4d2 <_printf_float+0x442>
 800f4e8:	2900      	cmp	r1, #0
 800f4ea:	f43f ae8b 	beq.w	800f204 <_printf_float+0x174>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f4f4:	ab09      	add	r3, sp, #36	; 0x24
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	ec49 8b10 	vmov	d0, r8, r9
 800f4fc:	6022      	str	r2, [r4, #0]
 800f4fe:	f8cd a004 	str.w	sl, [sp, #4]
 800f502:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f506:	4628      	mov	r0, r5
 800f508:	f7ff fd2e 	bl	800ef68 <__cvt>
 800f50c:	4680      	mov	r8, r0
 800f50e:	e648      	b.n	800f1a2 <_printf_float+0x112>

0800f510 <_printf_common>:
 800f510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f514:	4691      	mov	r9, r2
 800f516:	461f      	mov	r7, r3
 800f518:	688a      	ldr	r2, [r1, #8]
 800f51a:	690b      	ldr	r3, [r1, #16]
 800f51c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f520:	4293      	cmp	r3, r2
 800f522:	bfb8      	it	lt
 800f524:	4613      	movlt	r3, r2
 800f526:	f8c9 3000 	str.w	r3, [r9]
 800f52a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f52e:	4606      	mov	r6, r0
 800f530:	460c      	mov	r4, r1
 800f532:	b112      	cbz	r2, 800f53a <_printf_common+0x2a>
 800f534:	3301      	adds	r3, #1
 800f536:	f8c9 3000 	str.w	r3, [r9]
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	0699      	lsls	r1, r3, #26
 800f53e:	bf42      	ittt	mi
 800f540:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f544:	3302      	addmi	r3, #2
 800f546:	f8c9 3000 	strmi.w	r3, [r9]
 800f54a:	6825      	ldr	r5, [r4, #0]
 800f54c:	f015 0506 	ands.w	r5, r5, #6
 800f550:	d107      	bne.n	800f562 <_printf_common+0x52>
 800f552:	f104 0a19 	add.w	sl, r4, #25
 800f556:	68e3      	ldr	r3, [r4, #12]
 800f558:	f8d9 2000 	ldr.w	r2, [r9]
 800f55c:	1a9b      	subs	r3, r3, r2
 800f55e:	42ab      	cmp	r3, r5
 800f560:	dc28      	bgt.n	800f5b4 <_printf_common+0xa4>
 800f562:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f566:	6822      	ldr	r2, [r4, #0]
 800f568:	3300      	adds	r3, #0
 800f56a:	bf18      	it	ne
 800f56c:	2301      	movne	r3, #1
 800f56e:	0692      	lsls	r2, r2, #26
 800f570:	d42d      	bmi.n	800f5ce <_printf_common+0xbe>
 800f572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f576:	4639      	mov	r1, r7
 800f578:	4630      	mov	r0, r6
 800f57a:	47c0      	blx	r8
 800f57c:	3001      	adds	r0, #1
 800f57e:	d020      	beq.n	800f5c2 <_printf_common+0xb2>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	68e5      	ldr	r5, [r4, #12]
 800f584:	f8d9 2000 	ldr.w	r2, [r9]
 800f588:	f003 0306 	and.w	r3, r3, #6
 800f58c:	2b04      	cmp	r3, #4
 800f58e:	bf08      	it	eq
 800f590:	1aad      	subeq	r5, r5, r2
 800f592:	68a3      	ldr	r3, [r4, #8]
 800f594:	6922      	ldr	r2, [r4, #16]
 800f596:	bf0c      	ite	eq
 800f598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f59c:	2500      	movne	r5, #0
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	bfc4      	itt	gt
 800f5a2:	1a9b      	subgt	r3, r3, r2
 800f5a4:	18ed      	addgt	r5, r5, r3
 800f5a6:	f04f 0900 	mov.w	r9, #0
 800f5aa:	341a      	adds	r4, #26
 800f5ac:	454d      	cmp	r5, r9
 800f5ae:	d11a      	bne.n	800f5e6 <_printf_common+0xd6>
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	e008      	b.n	800f5c6 <_printf_common+0xb6>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	4652      	mov	r2, sl
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	47c0      	blx	r8
 800f5be:	3001      	adds	r0, #1
 800f5c0:	d103      	bne.n	800f5ca <_printf_common+0xba>
 800f5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ca:	3501      	adds	r5, #1
 800f5cc:	e7c3      	b.n	800f556 <_printf_common+0x46>
 800f5ce:	18e1      	adds	r1, r4, r3
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	2030      	movs	r0, #48	; 0x30
 800f5d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5d8:	4422      	add	r2, r4
 800f5da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5e2:	3302      	adds	r3, #2
 800f5e4:	e7c5      	b.n	800f572 <_printf_common+0x62>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	4622      	mov	r2, r4
 800f5ea:	4639      	mov	r1, r7
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	47c0      	blx	r8
 800f5f0:	3001      	adds	r0, #1
 800f5f2:	d0e6      	beq.n	800f5c2 <_printf_common+0xb2>
 800f5f4:	f109 0901 	add.w	r9, r9, #1
 800f5f8:	e7d8      	b.n	800f5ac <_printf_common+0x9c>
	...

0800f5fc <_printf_i>:
 800f5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f600:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f604:	460c      	mov	r4, r1
 800f606:	7e09      	ldrb	r1, [r1, #24]
 800f608:	b085      	sub	sp, #20
 800f60a:	296e      	cmp	r1, #110	; 0x6e
 800f60c:	4617      	mov	r7, r2
 800f60e:	4606      	mov	r6, r0
 800f610:	4698      	mov	r8, r3
 800f612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f614:	f000 80b3 	beq.w	800f77e <_printf_i+0x182>
 800f618:	d822      	bhi.n	800f660 <_printf_i+0x64>
 800f61a:	2963      	cmp	r1, #99	; 0x63
 800f61c:	d036      	beq.n	800f68c <_printf_i+0x90>
 800f61e:	d80a      	bhi.n	800f636 <_printf_i+0x3a>
 800f620:	2900      	cmp	r1, #0
 800f622:	f000 80b9 	beq.w	800f798 <_printf_i+0x19c>
 800f626:	2958      	cmp	r1, #88	; 0x58
 800f628:	f000 8083 	beq.w	800f732 <_printf_i+0x136>
 800f62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f630:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f634:	e032      	b.n	800f69c <_printf_i+0xa0>
 800f636:	2964      	cmp	r1, #100	; 0x64
 800f638:	d001      	beq.n	800f63e <_printf_i+0x42>
 800f63a:	2969      	cmp	r1, #105	; 0x69
 800f63c:	d1f6      	bne.n	800f62c <_printf_i+0x30>
 800f63e:	6820      	ldr	r0, [r4, #0]
 800f640:	6813      	ldr	r3, [r2, #0]
 800f642:	0605      	lsls	r5, r0, #24
 800f644:	f103 0104 	add.w	r1, r3, #4
 800f648:	d52a      	bpl.n	800f6a0 <_printf_i+0xa4>
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	6011      	str	r1, [r2, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	da03      	bge.n	800f65a <_printf_i+0x5e>
 800f652:	222d      	movs	r2, #45	; 0x2d
 800f654:	425b      	negs	r3, r3
 800f656:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f65a:	486f      	ldr	r0, [pc, #444]	; (800f818 <_printf_i+0x21c>)
 800f65c:	220a      	movs	r2, #10
 800f65e:	e039      	b.n	800f6d4 <_printf_i+0xd8>
 800f660:	2973      	cmp	r1, #115	; 0x73
 800f662:	f000 809d 	beq.w	800f7a0 <_printf_i+0x1a4>
 800f666:	d808      	bhi.n	800f67a <_printf_i+0x7e>
 800f668:	296f      	cmp	r1, #111	; 0x6f
 800f66a:	d020      	beq.n	800f6ae <_printf_i+0xb2>
 800f66c:	2970      	cmp	r1, #112	; 0x70
 800f66e:	d1dd      	bne.n	800f62c <_printf_i+0x30>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	f043 0320 	orr.w	r3, r3, #32
 800f676:	6023      	str	r3, [r4, #0]
 800f678:	e003      	b.n	800f682 <_printf_i+0x86>
 800f67a:	2975      	cmp	r1, #117	; 0x75
 800f67c:	d017      	beq.n	800f6ae <_printf_i+0xb2>
 800f67e:	2978      	cmp	r1, #120	; 0x78
 800f680:	d1d4      	bne.n	800f62c <_printf_i+0x30>
 800f682:	2378      	movs	r3, #120	; 0x78
 800f684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f688:	4864      	ldr	r0, [pc, #400]	; (800f81c <_printf_i+0x220>)
 800f68a:	e055      	b.n	800f738 <_printf_i+0x13c>
 800f68c:	6813      	ldr	r3, [r2, #0]
 800f68e:	1d19      	adds	r1, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	6011      	str	r1, [r2, #0]
 800f694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f69c:	2301      	movs	r3, #1
 800f69e:	e08c      	b.n	800f7ba <_printf_i+0x1be>
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	6011      	str	r1, [r2, #0]
 800f6a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6a8:	bf18      	it	ne
 800f6aa:	b21b      	sxthne	r3, r3
 800f6ac:	e7cf      	b.n	800f64e <_printf_i+0x52>
 800f6ae:	6813      	ldr	r3, [r2, #0]
 800f6b0:	6825      	ldr	r5, [r4, #0]
 800f6b2:	1d18      	adds	r0, r3, #4
 800f6b4:	6010      	str	r0, [r2, #0]
 800f6b6:	0628      	lsls	r0, r5, #24
 800f6b8:	d501      	bpl.n	800f6be <_printf_i+0xc2>
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	e002      	b.n	800f6c4 <_printf_i+0xc8>
 800f6be:	0668      	lsls	r0, r5, #25
 800f6c0:	d5fb      	bpl.n	800f6ba <_printf_i+0xbe>
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	4854      	ldr	r0, [pc, #336]	; (800f818 <_printf_i+0x21c>)
 800f6c6:	296f      	cmp	r1, #111	; 0x6f
 800f6c8:	bf14      	ite	ne
 800f6ca:	220a      	movne	r2, #10
 800f6cc:	2208      	moveq	r2, #8
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6d4:	6865      	ldr	r5, [r4, #4]
 800f6d6:	60a5      	str	r5, [r4, #8]
 800f6d8:	2d00      	cmp	r5, #0
 800f6da:	f2c0 8095 	blt.w	800f808 <_printf_i+0x20c>
 800f6de:	6821      	ldr	r1, [r4, #0]
 800f6e0:	f021 0104 	bic.w	r1, r1, #4
 800f6e4:	6021      	str	r1, [r4, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d13d      	bne.n	800f766 <_printf_i+0x16a>
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	f040 808e 	bne.w	800f80c <_printf_i+0x210>
 800f6f0:	4665      	mov	r5, ip
 800f6f2:	2a08      	cmp	r2, #8
 800f6f4:	d10b      	bne.n	800f70e <_printf_i+0x112>
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	07db      	lsls	r3, r3, #31
 800f6fa:	d508      	bpl.n	800f70e <_printf_i+0x112>
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	6862      	ldr	r2, [r4, #4]
 800f700:	429a      	cmp	r2, r3
 800f702:	bfde      	ittt	le
 800f704:	2330      	movle	r3, #48	; 0x30
 800f706:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f70a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f70e:	ebac 0305 	sub.w	r3, ip, r5
 800f712:	6123      	str	r3, [r4, #16]
 800f714:	f8cd 8000 	str.w	r8, [sp]
 800f718:	463b      	mov	r3, r7
 800f71a:	aa03      	add	r2, sp, #12
 800f71c:	4621      	mov	r1, r4
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff fef6 	bl	800f510 <_printf_common>
 800f724:	3001      	adds	r0, #1
 800f726:	d14d      	bne.n	800f7c4 <_printf_i+0x1c8>
 800f728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f72c:	b005      	add	sp, #20
 800f72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f732:	4839      	ldr	r0, [pc, #228]	; (800f818 <_printf_i+0x21c>)
 800f734:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f738:	6813      	ldr	r3, [r2, #0]
 800f73a:	6821      	ldr	r1, [r4, #0]
 800f73c:	1d1d      	adds	r5, r3, #4
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6015      	str	r5, [r2, #0]
 800f742:	060a      	lsls	r2, r1, #24
 800f744:	d50b      	bpl.n	800f75e <_printf_i+0x162>
 800f746:	07ca      	lsls	r2, r1, #31
 800f748:	bf44      	itt	mi
 800f74a:	f041 0120 	orrmi.w	r1, r1, #32
 800f74e:	6021      	strmi	r1, [r4, #0]
 800f750:	b91b      	cbnz	r3, 800f75a <_printf_i+0x15e>
 800f752:	6822      	ldr	r2, [r4, #0]
 800f754:	f022 0220 	bic.w	r2, r2, #32
 800f758:	6022      	str	r2, [r4, #0]
 800f75a:	2210      	movs	r2, #16
 800f75c:	e7b7      	b.n	800f6ce <_printf_i+0xd2>
 800f75e:	064d      	lsls	r5, r1, #25
 800f760:	bf48      	it	mi
 800f762:	b29b      	uxthmi	r3, r3
 800f764:	e7ef      	b.n	800f746 <_printf_i+0x14a>
 800f766:	4665      	mov	r5, ip
 800f768:	fbb3 f1f2 	udiv	r1, r3, r2
 800f76c:	fb02 3311 	mls	r3, r2, r1, r3
 800f770:	5cc3      	ldrb	r3, [r0, r3]
 800f772:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f776:	460b      	mov	r3, r1
 800f778:	2900      	cmp	r1, #0
 800f77a:	d1f5      	bne.n	800f768 <_printf_i+0x16c>
 800f77c:	e7b9      	b.n	800f6f2 <_printf_i+0xf6>
 800f77e:	6813      	ldr	r3, [r2, #0]
 800f780:	6825      	ldr	r5, [r4, #0]
 800f782:	6961      	ldr	r1, [r4, #20]
 800f784:	1d18      	adds	r0, r3, #4
 800f786:	6010      	str	r0, [r2, #0]
 800f788:	0628      	lsls	r0, r5, #24
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	d501      	bpl.n	800f792 <_printf_i+0x196>
 800f78e:	6019      	str	r1, [r3, #0]
 800f790:	e002      	b.n	800f798 <_printf_i+0x19c>
 800f792:	066a      	lsls	r2, r5, #25
 800f794:	d5fb      	bpl.n	800f78e <_printf_i+0x192>
 800f796:	8019      	strh	r1, [r3, #0]
 800f798:	2300      	movs	r3, #0
 800f79a:	6123      	str	r3, [r4, #16]
 800f79c:	4665      	mov	r5, ip
 800f79e:	e7b9      	b.n	800f714 <_printf_i+0x118>
 800f7a0:	6813      	ldr	r3, [r2, #0]
 800f7a2:	1d19      	adds	r1, r3, #4
 800f7a4:	6011      	str	r1, [r2, #0]
 800f7a6:	681d      	ldr	r5, [r3, #0]
 800f7a8:	6862      	ldr	r2, [r4, #4]
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f7f0 fd3f 	bl	8000230 <memchr>
 800f7b2:	b108      	cbz	r0, 800f7b8 <_printf_i+0x1bc>
 800f7b4:	1b40      	subs	r0, r0, r5
 800f7b6:	6060      	str	r0, [r4, #4]
 800f7b8:	6863      	ldr	r3, [r4, #4]
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7c2:	e7a7      	b.n	800f714 <_printf_i+0x118>
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	462a      	mov	r2, r5
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	47c0      	blx	r8
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	d0aa      	beq.n	800f728 <_printf_i+0x12c>
 800f7d2:	6823      	ldr	r3, [r4, #0]
 800f7d4:	079b      	lsls	r3, r3, #30
 800f7d6:	d413      	bmi.n	800f800 <_printf_i+0x204>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e7a3      	b.n	800f72c <_printf_i+0x130>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	4639      	mov	r1, r7
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	47c0      	blx	r8
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	d09a      	beq.n	800f728 <_printf_i+0x12c>
 800f7f2:	3501      	adds	r5, #1
 800f7f4:	68e3      	ldr	r3, [r4, #12]
 800f7f6:	9a03      	ldr	r2, [sp, #12]
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	42ab      	cmp	r3, r5
 800f7fc:	dcf2      	bgt.n	800f7e4 <_printf_i+0x1e8>
 800f7fe:	e7eb      	b.n	800f7d8 <_printf_i+0x1dc>
 800f800:	2500      	movs	r5, #0
 800f802:	f104 0919 	add.w	r9, r4, #25
 800f806:	e7f5      	b.n	800f7f4 <_printf_i+0x1f8>
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1ac      	bne.n	800f766 <_printf_i+0x16a>
 800f80c:	7803      	ldrb	r3, [r0, #0]
 800f80e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f812:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f816:	e76c      	b.n	800f6f2 <_printf_i+0xf6>
 800f818:	08013f80 	.word	0x08013f80
 800f81c:	08013f91 	.word	0x08013f91

0800f820 <_puts_r>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	460e      	mov	r6, r1
 800f824:	4605      	mov	r5, r0
 800f826:	b118      	cbz	r0, 800f830 <_puts_r+0x10>
 800f828:	6983      	ldr	r3, [r0, #24]
 800f82a:	b90b      	cbnz	r3, 800f830 <_puts_r+0x10>
 800f82c:	f001 f894 	bl	8010958 <__sinit>
 800f830:	69ab      	ldr	r3, [r5, #24]
 800f832:	68ac      	ldr	r4, [r5, #8]
 800f834:	b913      	cbnz	r3, 800f83c <_puts_r+0x1c>
 800f836:	4628      	mov	r0, r5
 800f838:	f001 f88e 	bl	8010958 <__sinit>
 800f83c:	4b23      	ldr	r3, [pc, #140]	; (800f8cc <_puts_r+0xac>)
 800f83e:	429c      	cmp	r4, r3
 800f840:	d117      	bne.n	800f872 <_puts_r+0x52>
 800f842:	686c      	ldr	r4, [r5, #4]
 800f844:	89a3      	ldrh	r3, [r4, #12]
 800f846:	071b      	lsls	r3, r3, #28
 800f848:	d51d      	bpl.n	800f886 <_puts_r+0x66>
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	b1db      	cbz	r3, 800f886 <_puts_r+0x66>
 800f84e:	3e01      	subs	r6, #1
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f856:	3b01      	subs	r3, #1
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	b9e9      	cbnz	r1, 800f898 <_puts_r+0x78>
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	da2e      	bge.n	800f8be <_puts_r+0x9e>
 800f860:	4622      	mov	r2, r4
 800f862:	210a      	movs	r1, #10
 800f864:	4628      	mov	r0, r5
 800f866:	f000 f883 	bl	800f970 <__swbuf_r>
 800f86a:	3001      	adds	r0, #1
 800f86c:	d011      	beq.n	800f892 <_puts_r+0x72>
 800f86e:	200a      	movs	r0, #10
 800f870:	e011      	b.n	800f896 <_puts_r+0x76>
 800f872:	4b17      	ldr	r3, [pc, #92]	; (800f8d0 <_puts_r+0xb0>)
 800f874:	429c      	cmp	r4, r3
 800f876:	d101      	bne.n	800f87c <_puts_r+0x5c>
 800f878:	68ac      	ldr	r4, [r5, #8]
 800f87a:	e7e3      	b.n	800f844 <_puts_r+0x24>
 800f87c:	4b15      	ldr	r3, [pc, #84]	; (800f8d4 <_puts_r+0xb4>)
 800f87e:	429c      	cmp	r4, r3
 800f880:	bf08      	it	eq
 800f882:	68ec      	ldreq	r4, [r5, #12]
 800f884:	e7de      	b.n	800f844 <_puts_r+0x24>
 800f886:	4621      	mov	r1, r4
 800f888:	4628      	mov	r0, r5
 800f88a:	f000 f8c3 	bl	800fa14 <__swsetup_r>
 800f88e:	2800      	cmp	r0, #0
 800f890:	d0dd      	beq.n	800f84e <_puts_r+0x2e>
 800f892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da04      	bge.n	800f8a6 <_puts_r+0x86>
 800f89c:	69a2      	ldr	r2, [r4, #24]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	dc06      	bgt.n	800f8b0 <_puts_r+0x90>
 800f8a2:	290a      	cmp	r1, #10
 800f8a4:	d004      	beq.n	800f8b0 <_puts_r+0x90>
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	1c5a      	adds	r2, r3, #1
 800f8aa:	6022      	str	r2, [r4, #0]
 800f8ac:	7019      	strb	r1, [r3, #0]
 800f8ae:	e7cf      	b.n	800f850 <_puts_r+0x30>
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f000 f85c 	bl	800f970 <__swbuf_r>
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	d1c9      	bne.n	800f850 <_puts_r+0x30>
 800f8bc:	e7e9      	b.n	800f892 <_puts_r+0x72>
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	200a      	movs	r0, #10
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	6022      	str	r2, [r4, #0]
 800f8c6:	7018      	strb	r0, [r3, #0]
 800f8c8:	e7e5      	b.n	800f896 <_puts_r+0x76>
 800f8ca:	bf00      	nop
 800f8cc:	08013fd0 	.word	0x08013fd0
 800f8d0:	08013ff0 	.word	0x08013ff0
 800f8d4:	08013fb0 	.word	0x08013fb0

0800f8d8 <puts>:
 800f8d8:	4b02      	ldr	r3, [pc, #8]	; (800f8e4 <puts+0xc>)
 800f8da:	4601      	mov	r1, r0
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	f7ff bf9f 	b.w	800f820 <_puts_r>
 800f8e2:	bf00      	nop
 800f8e4:	20001c38 	.word	0x20001c38

0800f8e8 <sniprintf>:
 800f8e8:	b40c      	push	{r2, r3}
 800f8ea:	b530      	push	{r4, r5, lr}
 800f8ec:	4b17      	ldr	r3, [pc, #92]	; (800f94c <sniprintf+0x64>)
 800f8ee:	1e0c      	subs	r4, r1, #0
 800f8f0:	b09d      	sub	sp, #116	; 0x74
 800f8f2:	681d      	ldr	r5, [r3, #0]
 800f8f4:	da08      	bge.n	800f908 <sniprintf+0x20>
 800f8f6:	238b      	movs	r3, #139	; 0x8b
 800f8f8:	602b      	str	r3, [r5, #0]
 800f8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8fe:	b01d      	add	sp, #116	; 0x74
 800f900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f904:	b002      	add	sp, #8
 800f906:	4770      	bx	lr
 800f908:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f90c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f910:	bf14      	ite	ne
 800f912:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f916:	4623      	moveq	r3, r4
 800f918:	9304      	str	r3, [sp, #16]
 800f91a:	9307      	str	r3, [sp, #28]
 800f91c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f920:	9002      	str	r0, [sp, #8]
 800f922:	9006      	str	r0, [sp, #24]
 800f924:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f92a:	ab21      	add	r3, sp, #132	; 0x84
 800f92c:	a902      	add	r1, sp, #8
 800f92e:	4628      	mov	r0, r5
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	f001 fd0b 	bl	801134c <_svfiprintf_r>
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	bfbc      	itt	lt
 800f93a:	238b      	movlt	r3, #139	; 0x8b
 800f93c:	602b      	strlt	r3, [r5, #0]
 800f93e:	2c00      	cmp	r4, #0
 800f940:	d0dd      	beq.n	800f8fe <sniprintf+0x16>
 800f942:	9b02      	ldr	r3, [sp, #8]
 800f944:	2200      	movs	r2, #0
 800f946:	701a      	strb	r2, [r3, #0]
 800f948:	e7d9      	b.n	800f8fe <sniprintf+0x16>
 800f94a:	bf00      	nop
 800f94c:	20001c38 	.word	0x20001c38

0800f950 <strcat>:
 800f950:	b510      	push	{r4, lr}
 800f952:	4603      	mov	r3, r0
 800f954:	781a      	ldrb	r2, [r3, #0]
 800f956:	1c5c      	adds	r4, r3, #1
 800f958:	b93a      	cbnz	r2, 800f96a <strcat+0x1a>
 800f95a:	3b01      	subs	r3, #1
 800f95c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f960:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f964:	2a00      	cmp	r2, #0
 800f966:	d1f9      	bne.n	800f95c <strcat+0xc>
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	4623      	mov	r3, r4
 800f96c:	e7f2      	b.n	800f954 <strcat+0x4>
	...

0800f970 <__swbuf_r>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	460e      	mov	r6, r1
 800f974:	4614      	mov	r4, r2
 800f976:	4605      	mov	r5, r0
 800f978:	b118      	cbz	r0, 800f982 <__swbuf_r+0x12>
 800f97a:	6983      	ldr	r3, [r0, #24]
 800f97c:	b90b      	cbnz	r3, 800f982 <__swbuf_r+0x12>
 800f97e:	f000 ffeb 	bl	8010958 <__sinit>
 800f982:	4b21      	ldr	r3, [pc, #132]	; (800fa08 <__swbuf_r+0x98>)
 800f984:	429c      	cmp	r4, r3
 800f986:	d12a      	bne.n	800f9de <__swbuf_r+0x6e>
 800f988:	686c      	ldr	r4, [r5, #4]
 800f98a:	69a3      	ldr	r3, [r4, #24]
 800f98c:	60a3      	str	r3, [r4, #8]
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	071a      	lsls	r2, r3, #28
 800f992:	d52e      	bpl.n	800f9f2 <__swbuf_r+0x82>
 800f994:	6923      	ldr	r3, [r4, #16]
 800f996:	b363      	cbz	r3, 800f9f2 <__swbuf_r+0x82>
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	6820      	ldr	r0, [r4, #0]
 800f99c:	1ac0      	subs	r0, r0, r3
 800f99e:	6963      	ldr	r3, [r4, #20]
 800f9a0:	b2f6      	uxtb	r6, r6
 800f9a2:	4283      	cmp	r3, r0
 800f9a4:	4637      	mov	r7, r6
 800f9a6:	dc04      	bgt.n	800f9b2 <__swbuf_r+0x42>
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 ff6a 	bl	8010884 <_fflush_r>
 800f9b0:	bb28      	cbnz	r0, 800f9fe <__swbuf_r+0x8e>
 800f9b2:	68a3      	ldr	r3, [r4, #8]
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	60a3      	str	r3, [r4, #8]
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	6022      	str	r2, [r4, #0]
 800f9be:	701e      	strb	r6, [r3, #0]
 800f9c0:	6963      	ldr	r3, [r4, #20]
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	4283      	cmp	r3, r0
 800f9c6:	d004      	beq.n	800f9d2 <__swbuf_r+0x62>
 800f9c8:	89a3      	ldrh	r3, [r4, #12]
 800f9ca:	07db      	lsls	r3, r3, #31
 800f9cc:	d519      	bpl.n	800fa02 <__swbuf_r+0x92>
 800f9ce:	2e0a      	cmp	r6, #10
 800f9d0:	d117      	bne.n	800fa02 <__swbuf_r+0x92>
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f000 ff55 	bl	8010884 <_fflush_r>
 800f9da:	b190      	cbz	r0, 800fa02 <__swbuf_r+0x92>
 800f9dc:	e00f      	b.n	800f9fe <__swbuf_r+0x8e>
 800f9de:	4b0b      	ldr	r3, [pc, #44]	; (800fa0c <__swbuf_r+0x9c>)
 800f9e0:	429c      	cmp	r4, r3
 800f9e2:	d101      	bne.n	800f9e8 <__swbuf_r+0x78>
 800f9e4:	68ac      	ldr	r4, [r5, #8]
 800f9e6:	e7d0      	b.n	800f98a <__swbuf_r+0x1a>
 800f9e8:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <__swbuf_r+0xa0>)
 800f9ea:	429c      	cmp	r4, r3
 800f9ec:	bf08      	it	eq
 800f9ee:	68ec      	ldreq	r4, [r5, #12]
 800f9f0:	e7cb      	b.n	800f98a <__swbuf_r+0x1a>
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f000 f80d 	bl	800fa14 <__swsetup_r>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d0cc      	beq.n	800f998 <__swbuf_r+0x28>
 800f9fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa02:	4638      	mov	r0, r7
 800fa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa06:	bf00      	nop
 800fa08:	08013fd0 	.word	0x08013fd0
 800fa0c:	08013ff0 	.word	0x08013ff0
 800fa10:	08013fb0 	.word	0x08013fb0

0800fa14 <__swsetup_r>:
 800fa14:	4b32      	ldr	r3, [pc, #200]	; (800fae0 <__swsetup_r+0xcc>)
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	681d      	ldr	r5, [r3, #0]
 800fa1a:	4606      	mov	r6, r0
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	b125      	cbz	r5, 800fa2a <__swsetup_r+0x16>
 800fa20:	69ab      	ldr	r3, [r5, #24]
 800fa22:	b913      	cbnz	r3, 800fa2a <__swsetup_r+0x16>
 800fa24:	4628      	mov	r0, r5
 800fa26:	f000 ff97 	bl	8010958 <__sinit>
 800fa2a:	4b2e      	ldr	r3, [pc, #184]	; (800fae4 <__swsetup_r+0xd0>)
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	d10f      	bne.n	800fa50 <__swsetup_r+0x3c>
 800fa30:	686c      	ldr	r4, [r5, #4]
 800fa32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	0715      	lsls	r5, r2, #28
 800fa3a:	d42c      	bmi.n	800fa96 <__swsetup_r+0x82>
 800fa3c:	06d0      	lsls	r0, r2, #27
 800fa3e:	d411      	bmi.n	800fa64 <__swsetup_r+0x50>
 800fa40:	2209      	movs	r2, #9
 800fa42:	6032      	str	r2, [r6, #0]
 800fa44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa48:	81a3      	strh	r3, [r4, #12]
 800fa4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa4e:	e03e      	b.n	800face <__swsetup_r+0xba>
 800fa50:	4b25      	ldr	r3, [pc, #148]	; (800fae8 <__swsetup_r+0xd4>)
 800fa52:	429c      	cmp	r4, r3
 800fa54:	d101      	bne.n	800fa5a <__swsetup_r+0x46>
 800fa56:	68ac      	ldr	r4, [r5, #8]
 800fa58:	e7eb      	b.n	800fa32 <__swsetup_r+0x1e>
 800fa5a:	4b24      	ldr	r3, [pc, #144]	; (800faec <__swsetup_r+0xd8>)
 800fa5c:	429c      	cmp	r4, r3
 800fa5e:	bf08      	it	eq
 800fa60:	68ec      	ldreq	r4, [r5, #12]
 800fa62:	e7e6      	b.n	800fa32 <__swsetup_r+0x1e>
 800fa64:	0751      	lsls	r1, r2, #29
 800fa66:	d512      	bpl.n	800fa8e <__swsetup_r+0x7a>
 800fa68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa6a:	b141      	cbz	r1, 800fa7e <__swsetup_r+0x6a>
 800fa6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <__swsetup_r+0x66>
 800fa74:	4630      	mov	r0, r6
 800fa76:	f001 fb67 	bl	8011148 <_free_r>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	2300      	movs	r3, #0
 800fa88:	6063      	str	r3, [r4, #4]
 800fa8a:	6923      	ldr	r3, [r4, #16]
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	f043 0308 	orr.w	r3, r3, #8
 800fa94:	81a3      	strh	r3, [r4, #12]
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	b94b      	cbnz	r3, 800faae <__swsetup_r+0x9a>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800faa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faa4:	d003      	beq.n	800faae <__swsetup_r+0x9a>
 800faa6:	4621      	mov	r1, r4
 800faa8:	4630      	mov	r0, r6
 800faaa:	f001 f811 	bl	8010ad0 <__smakebuf_r>
 800faae:	89a2      	ldrh	r2, [r4, #12]
 800fab0:	f012 0301 	ands.w	r3, r2, #1
 800fab4:	d00c      	beq.n	800fad0 <__swsetup_r+0xbc>
 800fab6:	2300      	movs	r3, #0
 800fab8:	60a3      	str	r3, [r4, #8]
 800faba:	6963      	ldr	r3, [r4, #20]
 800fabc:	425b      	negs	r3, r3
 800fabe:	61a3      	str	r3, [r4, #24]
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	b953      	cbnz	r3, 800fada <__swsetup_r+0xc6>
 800fac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fac8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800facc:	d1ba      	bne.n	800fa44 <__swsetup_r+0x30>
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	0792      	lsls	r2, r2, #30
 800fad2:	bf58      	it	pl
 800fad4:	6963      	ldrpl	r3, [r4, #20]
 800fad6:	60a3      	str	r3, [r4, #8]
 800fad8:	e7f2      	b.n	800fac0 <__swsetup_r+0xac>
 800fada:	2000      	movs	r0, #0
 800fadc:	e7f7      	b.n	800face <__swsetup_r+0xba>
 800fade:	bf00      	nop
 800fae0:	20001c38 	.word	0x20001c38
 800fae4:	08013fd0 	.word	0x08013fd0
 800fae8:	08013ff0 	.word	0x08013ff0
 800faec:	08013fb0 	.word	0x08013fb0

0800faf0 <quorem>:
 800faf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	6903      	ldr	r3, [r0, #16]
 800faf6:	690c      	ldr	r4, [r1, #16]
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	4680      	mov	r8, r0
 800fafc:	f2c0 8082 	blt.w	800fc04 <quorem+0x114>
 800fb00:	3c01      	subs	r4, #1
 800fb02:	f101 0714 	add.w	r7, r1, #20
 800fb06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fb0a:	f100 0614 	add.w	r6, r0, #20
 800fb0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fb12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fb16:	eb06 030c 	add.w	r3, r6, ip
 800fb1a:	3501      	adds	r5, #1
 800fb1c:	eb07 090c 	add.w	r9, r7, ip
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	fbb0 f5f5 	udiv	r5, r0, r5
 800fb26:	b395      	cbz	r5, 800fb8e <quorem+0x9e>
 800fb28:	f04f 0a00 	mov.w	sl, #0
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	46b6      	mov	lr, r6
 800fb30:	46d3      	mov	fp, sl
 800fb32:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb36:	b293      	uxth	r3, r2
 800fb38:	fb05 a303 	mla	r3, r5, r3, sl
 800fb3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	ebab 0303 	sub.w	r3, fp, r3
 800fb46:	0c12      	lsrs	r2, r2, #16
 800fb48:	f8de b000 	ldr.w	fp, [lr]
 800fb4c:	fb05 a202 	mla	r2, r5, r2, sl
 800fb50:	fa13 f38b 	uxtah	r3, r3, fp
 800fb54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fb58:	fa1f fb82 	uxth.w	fp, r2
 800fb5c:	f8de 2000 	ldr.w	r2, [lr]
 800fb60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fb64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb6e:	4581      	cmp	r9, r0
 800fb70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fb74:	f84e 3b04 	str.w	r3, [lr], #4
 800fb78:	d2db      	bcs.n	800fb32 <quorem+0x42>
 800fb7a:	f856 300c 	ldr.w	r3, [r6, ip]
 800fb7e:	b933      	cbnz	r3, 800fb8e <quorem+0x9e>
 800fb80:	9b01      	ldr	r3, [sp, #4]
 800fb82:	3b04      	subs	r3, #4
 800fb84:	429e      	cmp	r6, r3
 800fb86:	461a      	mov	r2, r3
 800fb88:	d330      	bcc.n	800fbec <quorem+0xfc>
 800fb8a:	f8c8 4010 	str.w	r4, [r8, #16]
 800fb8e:	4640      	mov	r0, r8
 800fb90:	f001 fa06 	bl	8010fa0 <__mcmp>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	db25      	blt.n	800fbe4 <quorem+0xf4>
 800fb98:	3501      	adds	r5, #1
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f04f 0c00 	mov.w	ip, #0
 800fba0:	f857 2b04 	ldr.w	r2, [r7], #4
 800fba4:	f8d0 e000 	ldr.w	lr, [r0]
 800fba8:	b293      	uxth	r3, r2
 800fbaa:	ebac 0303 	sub.w	r3, ip, r3
 800fbae:	0c12      	lsrs	r2, r2, #16
 800fbb0:	fa13 f38e 	uxtah	r3, r3, lr
 800fbb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbc2:	45b9      	cmp	r9, r7
 800fbc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbc8:	f840 3b04 	str.w	r3, [r0], #4
 800fbcc:	d2e8      	bcs.n	800fba0 <quorem+0xb0>
 800fbce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fbd2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fbd6:	b92a      	cbnz	r2, 800fbe4 <quorem+0xf4>
 800fbd8:	3b04      	subs	r3, #4
 800fbda:	429e      	cmp	r6, r3
 800fbdc:	461a      	mov	r2, r3
 800fbde:	d30b      	bcc.n	800fbf8 <quorem+0x108>
 800fbe0:	f8c8 4010 	str.w	r4, [r8, #16]
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	b003      	add	sp, #12
 800fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbec:	6812      	ldr	r2, [r2, #0]
 800fbee:	3b04      	subs	r3, #4
 800fbf0:	2a00      	cmp	r2, #0
 800fbf2:	d1ca      	bne.n	800fb8a <quorem+0x9a>
 800fbf4:	3c01      	subs	r4, #1
 800fbf6:	e7c5      	b.n	800fb84 <quorem+0x94>
 800fbf8:	6812      	ldr	r2, [r2, #0]
 800fbfa:	3b04      	subs	r3, #4
 800fbfc:	2a00      	cmp	r2, #0
 800fbfe:	d1ef      	bne.n	800fbe0 <quorem+0xf0>
 800fc00:	3c01      	subs	r4, #1
 800fc02:	e7ea      	b.n	800fbda <quorem+0xea>
 800fc04:	2000      	movs	r0, #0
 800fc06:	e7ee      	b.n	800fbe6 <quorem+0xf6>

0800fc08 <_dtoa_r>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	ec57 6b10 	vmov	r6, r7, d0
 800fc10:	b097      	sub	sp, #92	; 0x5c
 800fc12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc14:	9106      	str	r1, [sp, #24]
 800fc16:	4604      	mov	r4, r0
 800fc18:	920b      	str	r2, [sp, #44]	; 0x2c
 800fc1a:	9312      	str	r3, [sp, #72]	; 0x48
 800fc1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc20:	e9cd 6700 	strd	r6, r7, [sp]
 800fc24:	b93d      	cbnz	r5, 800fc36 <_dtoa_r+0x2e>
 800fc26:	2010      	movs	r0, #16
 800fc28:	f000 ff92 	bl	8010b50 <malloc>
 800fc2c:	6260      	str	r0, [r4, #36]	; 0x24
 800fc2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc32:	6005      	str	r5, [r0, #0]
 800fc34:	60c5      	str	r5, [r0, #12]
 800fc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc38:	6819      	ldr	r1, [r3, #0]
 800fc3a:	b151      	cbz	r1, 800fc52 <_dtoa_r+0x4a>
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	604a      	str	r2, [r1, #4]
 800fc40:	2301      	movs	r3, #1
 800fc42:	4093      	lsls	r3, r2
 800fc44:	608b      	str	r3, [r1, #8]
 800fc46:	4620      	mov	r0, r4
 800fc48:	f000 ffc9 	bl	8010bde <_Bfree>
 800fc4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc4e:	2200      	movs	r2, #0
 800fc50:	601a      	str	r2, [r3, #0]
 800fc52:	1e3b      	subs	r3, r7, #0
 800fc54:	bfbb      	ittet	lt
 800fc56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fc5a:	9301      	strlt	r3, [sp, #4]
 800fc5c:	2300      	movge	r3, #0
 800fc5e:	2201      	movlt	r2, #1
 800fc60:	bfac      	ite	ge
 800fc62:	f8c8 3000 	strge.w	r3, [r8]
 800fc66:	f8c8 2000 	strlt.w	r2, [r8]
 800fc6a:	4baf      	ldr	r3, [pc, #700]	; (800ff28 <_dtoa_r+0x320>)
 800fc6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc70:	ea33 0308 	bics.w	r3, r3, r8
 800fc74:	d114      	bne.n	800fca0 <_dtoa_r+0x98>
 800fc76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc78:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc7c:	6013      	str	r3, [r2, #0]
 800fc7e:	9b00      	ldr	r3, [sp, #0]
 800fc80:	b923      	cbnz	r3, 800fc8c <_dtoa_r+0x84>
 800fc82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f000 8542 	beq.w	8010710 <_dtoa_r+0xb08>
 800fc8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ff3c <_dtoa_r+0x334>
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f000 8544 	beq.w	8010720 <_dtoa_r+0xb18>
 800fc98:	f10b 0303 	add.w	r3, fp, #3
 800fc9c:	f000 bd3e 	b.w	801071c <_dtoa_r+0xb14>
 800fca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fca4:	2200      	movs	r2, #0
 800fca6:	2300      	movs	r3, #0
 800fca8:	4630      	mov	r0, r6
 800fcaa:	4639      	mov	r1, r7
 800fcac:	f7f0 ff34 	bl	8000b18 <__aeabi_dcmpeq>
 800fcb0:	4681      	mov	r9, r0
 800fcb2:	b168      	cbz	r0, 800fcd0 <_dtoa_r+0xc8>
 800fcb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 8524 	beq.w	801070a <_dtoa_r+0xb02>
 800fcc2:	4b9a      	ldr	r3, [pc, #616]	; (800ff2c <_dtoa_r+0x324>)
 800fcc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcc6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fcca:	6013      	str	r3, [r2, #0]
 800fccc:	f000 bd28 	b.w	8010720 <_dtoa_r+0xb18>
 800fcd0:	aa14      	add	r2, sp, #80	; 0x50
 800fcd2:	a915      	add	r1, sp, #84	; 0x54
 800fcd4:	ec47 6b10 	vmov	d0, r6, r7
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f001 f9d8 	bl	801108e <__d2b>
 800fcde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fce2:	9004      	str	r0, [sp, #16]
 800fce4:	2d00      	cmp	r5, #0
 800fce6:	d07c      	beq.n	800fde2 <_dtoa_r+0x1da>
 800fce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fcec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fcf0:	46b2      	mov	sl, r6
 800fcf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fcfe:	2200      	movs	r2, #0
 800fd00:	4b8b      	ldr	r3, [pc, #556]	; (800ff30 <_dtoa_r+0x328>)
 800fd02:	4650      	mov	r0, sl
 800fd04:	4659      	mov	r1, fp
 800fd06:	f7f0 fae7 	bl	80002d8 <__aeabi_dsub>
 800fd0a:	a381      	add	r3, pc, #516	; (adr r3, 800ff10 <_dtoa_r+0x308>)
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	f7f0 fc9a 	bl	8000648 <__aeabi_dmul>
 800fd14:	a380      	add	r3, pc, #512	; (adr r3, 800ff18 <_dtoa_r+0x310>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	f7f0 fadf 	bl	80002dc <__adddf3>
 800fd1e:	4606      	mov	r6, r0
 800fd20:	4628      	mov	r0, r5
 800fd22:	460f      	mov	r7, r1
 800fd24:	f7f0 fc26 	bl	8000574 <__aeabi_i2d>
 800fd28:	a37d      	add	r3, pc, #500	; (adr r3, 800ff20 <_dtoa_r+0x318>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 fc8b 	bl	8000648 <__aeabi_dmul>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4630      	mov	r0, r6
 800fd38:	4639      	mov	r1, r7
 800fd3a:	f7f0 facf 	bl	80002dc <__adddf3>
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460f      	mov	r7, r1
 800fd42:	f7f0 ff31 	bl	8000ba8 <__aeabi_d2iz>
 800fd46:	2200      	movs	r2, #0
 800fd48:	4682      	mov	sl, r0
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	4639      	mov	r1, r7
 800fd50:	f7f0 feec 	bl	8000b2c <__aeabi_dcmplt>
 800fd54:	b148      	cbz	r0, 800fd6a <_dtoa_r+0x162>
 800fd56:	4650      	mov	r0, sl
 800fd58:	f7f0 fc0c 	bl	8000574 <__aeabi_i2d>
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	463b      	mov	r3, r7
 800fd60:	f7f0 feda 	bl	8000b18 <__aeabi_dcmpeq>
 800fd64:	b908      	cbnz	r0, 800fd6a <_dtoa_r+0x162>
 800fd66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd6a:	f1ba 0f16 	cmp.w	sl, #22
 800fd6e:	d859      	bhi.n	800fe24 <_dtoa_r+0x21c>
 800fd70:	4970      	ldr	r1, [pc, #448]	; (800ff34 <_dtoa_r+0x32c>)
 800fd72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd7e:	f7f0 fef3 	bl	8000b68 <__aeabi_dcmpgt>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d050      	beq.n	800fe28 <_dtoa_r+0x220>
 800fd86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd90:	1b5d      	subs	r5, r3, r5
 800fd92:	f1b5 0801 	subs.w	r8, r5, #1
 800fd96:	bf49      	itett	mi
 800fd98:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd9c:	2300      	movpl	r3, #0
 800fd9e:	9305      	strmi	r3, [sp, #20]
 800fda0:	f04f 0800 	movmi.w	r8, #0
 800fda4:	bf58      	it	pl
 800fda6:	9305      	strpl	r3, [sp, #20]
 800fda8:	f1ba 0f00 	cmp.w	sl, #0
 800fdac:	db3e      	blt.n	800fe2c <_dtoa_r+0x224>
 800fdae:	2300      	movs	r3, #0
 800fdb0:	44d0      	add	r8, sl
 800fdb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fdb6:	9307      	str	r3, [sp, #28]
 800fdb8:	9b06      	ldr	r3, [sp, #24]
 800fdba:	2b09      	cmp	r3, #9
 800fdbc:	f200 8090 	bhi.w	800fee0 <_dtoa_r+0x2d8>
 800fdc0:	2b05      	cmp	r3, #5
 800fdc2:	bfc4      	itt	gt
 800fdc4:	3b04      	subgt	r3, #4
 800fdc6:	9306      	strgt	r3, [sp, #24]
 800fdc8:	9b06      	ldr	r3, [sp, #24]
 800fdca:	f1a3 0302 	sub.w	r3, r3, #2
 800fdce:	bfcc      	ite	gt
 800fdd0:	2500      	movgt	r5, #0
 800fdd2:	2501      	movle	r5, #1
 800fdd4:	2b03      	cmp	r3, #3
 800fdd6:	f200 808f 	bhi.w	800fef8 <_dtoa_r+0x2f0>
 800fdda:	e8df f003 	tbb	[pc, r3]
 800fdde:	7f7d      	.short	0x7f7d
 800fde0:	7131      	.short	0x7131
 800fde2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fde6:	441d      	add	r5, r3
 800fde8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fdec:	2820      	cmp	r0, #32
 800fdee:	dd13      	ble.n	800fe18 <_dtoa_r+0x210>
 800fdf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fdf4:	9b00      	ldr	r3, [sp, #0]
 800fdf6:	fa08 f800 	lsl.w	r8, r8, r0
 800fdfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fdfe:	fa23 f000 	lsr.w	r0, r3, r0
 800fe02:	ea48 0000 	orr.w	r0, r8, r0
 800fe06:	f7f0 fba5 	bl	8000554 <__aeabi_ui2d>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4682      	mov	sl, r0
 800fe0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fe12:	3d01      	subs	r5, #1
 800fe14:	9313      	str	r3, [sp, #76]	; 0x4c
 800fe16:	e772      	b.n	800fcfe <_dtoa_r+0xf6>
 800fe18:	9b00      	ldr	r3, [sp, #0]
 800fe1a:	f1c0 0020 	rsb	r0, r0, #32
 800fe1e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe22:	e7f0      	b.n	800fe06 <_dtoa_r+0x1fe>
 800fe24:	2301      	movs	r3, #1
 800fe26:	e7b1      	b.n	800fd8c <_dtoa_r+0x184>
 800fe28:	900f      	str	r0, [sp, #60]	; 0x3c
 800fe2a:	e7b0      	b.n	800fd8e <_dtoa_r+0x186>
 800fe2c:	9b05      	ldr	r3, [sp, #20]
 800fe2e:	eba3 030a 	sub.w	r3, r3, sl
 800fe32:	9305      	str	r3, [sp, #20]
 800fe34:	f1ca 0300 	rsb	r3, sl, #0
 800fe38:	9307      	str	r3, [sp, #28]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	930e      	str	r3, [sp, #56]	; 0x38
 800fe3e:	e7bb      	b.n	800fdb8 <_dtoa_r+0x1b0>
 800fe40:	2301      	movs	r3, #1
 800fe42:	930a      	str	r3, [sp, #40]	; 0x28
 800fe44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	dd59      	ble.n	800fefe <_dtoa_r+0x2f6>
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	4699      	mov	r9, r3
 800fe4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fe50:	2200      	movs	r2, #0
 800fe52:	6072      	str	r2, [r6, #4]
 800fe54:	2204      	movs	r2, #4
 800fe56:	f102 0014 	add.w	r0, r2, #20
 800fe5a:	4298      	cmp	r0, r3
 800fe5c:	6871      	ldr	r1, [r6, #4]
 800fe5e:	d953      	bls.n	800ff08 <_dtoa_r+0x300>
 800fe60:	4620      	mov	r0, r4
 800fe62:	f000 fe88 	bl	8010b76 <_Balloc>
 800fe66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe68:	6030      	str	r0, [r6, #0]
 800fe6a:	f1b9 0f0e 	cmp.w	r9, #14
 800fe6e:	f8d3 b000 	ldr.w	fp, [r3]
 800fe72:	f200 80e6 	bhi.w	8010042 <_dtoa_r+0x43a>
 800fe76:	2d00      	cmp	r5, #0
 800fe78:	f000 80e3 	beq.w	8010042 <_dtoa_r+0x43a>
 800fe7c:	ed9d 7b00 	vldr	d7, [sp]
 800fe80:	f1ba 0f00 	cmp.w	sl, #0
 800fe84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fe88:	dd74      	ble.n	800ff74 <_dtoa_r+0x36c>
 800fe8a:	4a2a      	ldr	r2, [pc, #168]	; (800ff34 <_dtoa_r+0x32c>)
 800fe8c:	f00a 030f 	and.w	r3, sl, #15
 800fe90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe94:	ed93 7b00 	vldr	d7, [r3]
 800fe98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fe9c:	06f0      	lsls	r0, r6, #27
 800fe9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fea2:	d565      	bpl.n	800ff70 <_dtoa_r+0x368>
 800fea4:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <_dtoa_r+0x330>)
 800fea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800feaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800feae:	f7f0 fcf5 	bl	800089c <__aeabi_ddiv>
 800feb2:	e9cd 0100 	strd	r0, r1, [sp]
 800feb6:	f006 060f 	and.w	r6, r6, #15
 800feba:	2503      	movs	r5, #3
 800febc:	4f1e      	ldr	r7, [pc, #120]	; (800ff38 <_dtoa_r+0x330>)
 800febe:	e04c      	b.n	800ff5a <_dtoa_r+0x352>
 800fec0:	2301      	movs	r3, #1
 800fec2:	930a      	str	r3, [sp, #40]	; 0x28
 800fec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fec6:	4453      	add	r3, sl
 800fec8:	f103 0901 	add.w	r9, r3, #1
 800fecc:	9302      	str	r3, [sp, #8]
 800fece:	464b      	mov	r3, r9
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	bfb8      	it	lt
 800fed4:	2301      	movlt	r3, #1
 800fed6:	e7ba      	b.n	800fe4e <_dtoa_r+0x246>
 800fed8:	2300      	movs	r3, #0
 800feda:	e7b2      	b.n	800fe42 <_dtoa_r+0x23a>
 800fedc:	2300      	movs	r3, #0
 800fede:	e7f0      	b.n	800fec2 <_dtoa_r+0x2ba>
 800fee0:	2501      	movs	r5, #1
 800fee2:	2300      	movs	r3, #0
 800fee4:	9306      	str	r3, [sp, #24]
 800fee6:	950a      	str	r5, [sp, #40]	; 0x28
 800fee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800feec:	9302      	str	r3, [sp, #8]
 800feee:	4699      	mov	r9, r3
 800fef0:	2200      	movs	r2, #0
 800fef2:	2312      	movs	r3, #18
 800fef4:	920b      	str	r2, [sp, #44]	; 0x2c
 800fef6:	e7aa      	b.n	800fe4e <_dtoa_r+0x246>
 800fef8:	2301      	movs	r3, #1
 800fefa:	930a      	str	r3, [sp, #40]	; 0x28
 800fefc:	e7f4      	b.n	800fee8 <_dtoa_r+0x2e0>
 800fefe:	2301      	movs	r3, #1
 800ff00:	9302      	str	r3, [sp, #8]
 800ff02:	4699      	mov	r9, r3
 800ff04:	461a      	mov	r2, r3
 800ff06:	e7f5      	b.n	800fef4 <_dtoa_r+0x2ec>
 800ff08:	3101      	adds	r1, #1
 800ff0a:	6071      	str	r1, [r6, #4]
 800ff0c:	0052      	lsls	r2, r2, #1
 800ff0e:	e7a2      	b.n	800fe56 <_dtoa_r+0x24e>
 800ff10:	636f4361 	.word	0x636f4361
 800ff14:	3fd287a7 	.word	0x3fd287a7
 800ff18:	8b60c8b3 	.word	0x8b60c8b3
 800ff1c:	3fc68a28 	.word	0x3fc68a28
 800ff20:	509f79fb 	.word	0x509f79fb
 800ff24:	3fd34413 	.word	0x3fd34413
 800ff28:	7ff00000 	.word	0x7ff00000
 800ff2c:	0801422d 	.word	0x0801422d
 800ff30:	3ff80000 	.word	0x3ff80000
 800ff34:	08014038 	.word	0x08014038
 800ff38:	08014010 	.word	0x08014010
 800ff3c:	08013fab 	.word	0x08013fab
 800ff40:	07f1      	lsls	r1, r6, #31
 800ff42:	d508      	bpl.n	800ff56 <_dtoa_r+0x34e>
 800ff44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff4c:	f7f0 fb7c 	bl	8000648 <__aeabi_dmul>
 800ff50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff54:	3501      	adds	r5, #1
 800ff56:	1076      	asrs	r6, r6, #1
 800ff58:	3708      	adds	r7, #8
 800ff5a:	2e00      	cmp	r6, #0
 800ff5c:	d1f0      	bne.n	800ff40 <_dtoa_r+0x338>
 800ff5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff66:	f7f0 fc99 	bl	800089c <__aeabi_ddiv>
 800ff6a:	e9cd 0100 	strd	r0, r1, [sp]
 800ff6e:	e01a      	b.n	800ffa6 <_dtoa_r+0x39e>
 800ff70:	2502      	movs	r5, #2
 800ff72:	e7a3      	b.n	800febc <_dtoa_r+0x2b4>
 800ff74:	f000 80a0 	beq.w	80100b8 <_dtoa_r+0x4b0>
 800ff78:	f1ca 0600 	rsb	r6, sl, #0
 800ff7c:	4b9f      	ldr	r3, [pc, #636]	; (80101fc <_dtoa_r+0x5f4>)
 800ff7e:	4fa0      	ldr	r7, [pc, #640]	; (8010200 <_dtoa_r+0x5f8>)
 800ff80:	f006 020f 	and.w	r2, r6, #15
 800ff84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ff90:	f7f0 fb5a 	bl	8000648 <__aeabi_dmul>
 800ff94:	e9cd 0100 	strd	r0, r1, [sp]
 800ff98:	1136      	asrs	r6, r6, #4
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	2502      	movs	r5, #2
 800ff9e:	2e00      	cmp	r6, #0
 800ffa0:	d17f      	bne.n	80100a2 <_dtoa_r+0x49a>
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1e1      	bne.n	800ff6a <_dtoa_r+0x362>
 800ffa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 8087 	beq.w	80100bc <_dtoa_r+0x4b4>
 800ffae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	4b93      	ldr	r3, [pc, #588]	; (8010204 <_dtoa_r+0x5fc>)
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	4639      	mov	r1, r7
 800ffba:	f7f0 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d07c      	beq.n	80100bc <_dtoa_r+0x4b4>
 800ffc2:	f1b9 0f00 	cmp.w	r9, #0
 800ffc6:	d079      	beq.n	80100bc <_dtoa_r+0x4b4>
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	dd35      	ble.n	801003a <_dtoa_r+0x432>
 800ffce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ffd2:	9308      	str	r3, [sp, #32]
 800ffd4:	4639      	mov	r1, r7
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4b8b      	ldr	r3, [pc, #556]	; (8010208 <_dtoa_r+0x600>)
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7f0 fb34 	bl	8000648 <__aeabi_dmul>
 800ffe0:	e9cd 0100 	strd	r0, r1, [sp]
 800ffe4:	9f02      	ldr	r7, [sp, #8]
 800ffe6:	3501      	adds	r5, #1
 800ffe8:	4628      	mov	r0, r5
 800ffea:	f7f0 fac3 	bl	8000574 <__aeabi_i2d>
 800ffee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fff2:	f7f0 fb29 	bl	8000648 <__aeabi_dmul>
 800fff6:	2200      	movs	r2, #0
 800fff8:	4b84      	ldr	r3, [pc, #528]	; (801020c <_dtoa_r+0x604>)
 800fffa:	f7f0 f96f 	bl	80002dc <__adddf3>
 800fffe:	4605      	mov	r5, r0
 8010000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010004:	2f00      	cmp	r7, #0
 8010006:	d15d      	bne.n	80100c4 <_dtoa_r+0x4bc>
 8010008:	2200      	movs	r2, #0
 801000a:	4b81      	ldr	r3, [pc, #516]	; (8010210 <_dtoa_r+0x608>)
 801000c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010010:	f7f0 f962 	bl	80002d8 <__aeabi_dsub>
 8010014:	462a      	mov	r2, r5
 8010016:	4633      	mov	r3, r6
 8010018:	e9cd 0100 	strd	r0, r1, [sp]
 801001c:	f7f0 fda4 	bl	8000b68 <__aeabi_dcmpgt>
 8010020:	2800      	cmp	r0, #0
 8010022:	f040 8288 	bne.w	8010536 <_dtoa_r+0x92e>
 8010026:	462a      	mov	r2, r5
 8010028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801002c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010030:	f7f0 fd7c 	bl	8000b2c <__aeabi_dcmplt>
 8010034:	2800      	cmp	r0, #0
 8010036:	f040 827c 	bne.w	8010532 <_dtoa_r+0x92a>
 801003a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801003e:	e9cd 2300 	strd	r2, r3, [sp]
 8010042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010044:	2b00      	cmp	r3, #0
 8010046:	f2c0 8150 	blt.w	80102ea <_dtoa_r+0x6e2>
 801004a:	f1ba 0f0e 	cmp.w	sl, #14
 801004e:	f300 814c 	bgt.w	80102ea <_dtoa_r+0x6e2>
 8010052:	4b6a      	ldr	r3, [pc, #424]	; (80101fc <_dtoa_r+0x5f4>)
 8010054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010058:	ed93 7b00 	vldr	d7, [r3]
 801005c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801005e:	2b00      	cmp	r3, #0
 8010060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010064:	f280 80d8 	bge.w	8010218 <_dtoa_r+0x610>
 8010068:	f1b9 0f00 	cmp.w	r9, #0
 801006c:	f300 80d4 	bgt.w	8010218 <_dtoa_r+0x610>
 8010070:	f040 825e 	bne.w	8010530 <_dtoa_r+0x928>
 8010074:	2200      	movs	r2, #0
 8010076:	4b66      	ldr	r3, [pc, #408]	; (8010210 <_dtoa_r+0x608>)
 8010078:	ec51 0b17 	vmov	r0, r1, d7
 801007c:	f7f0 fae4 	bl	8000648 <__aeabi_dmul>
 8010080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010084:	f7f0 fd66 	bl	8000b54 <__aeabi_dcmpge>
 8010088:	464f      	mov	r7, r9
 801008a:	464e      	mov	r6, r9
 801008c:	2800      	cmp	r0, #0
 801008e:	f040 8234 	bne.w	80104fa <_dtoa_r+0x8f2>
 8010092:	2331      	movs	r3, #49	; 0x31
 8010094:	f10b 0501 	add.w	r5, fp, #1
 8010098:	f88b 3000 	strb.w	r3, [fp]
 801009c:	f10a 0a01 	add.w	sl, sl, #1
 80100a0:	e22f      	b.n	8010502 <_dtoa_r+0x8fa>
 80100a2:	07f2      	lsls	r2, r6, #31
 80100a4:	d505      	bpl.n	80100b2 <_dtoa_r+0x4aa>
 80100a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100aa:	f7f0 facd 	bl	8000648 <__aeabi_dmul>
 80100ae:	3501      	adds	r5, #1
 80100b0:	2301      	movs	r3, #1
 80100b2:	1076      	asrs	r6, r6, #1
 80100b4:	3708      	adds	r7, #8
 80100b6:	e772      	b.n	800ff9e <_dtoa_r+0x396>
 80100b8:	2502      	movs	r5, #2
 80100ba:	e774      	b.n	800ffa6 <_dtoa_r+0x39e>
 80100bc:	f8cd a020 	str.w	sl, [sp, #32]
 80100c0:	464f      	mov	r7, r9
 80100c2:	e791      	b.n	800ffe8 <_dtoa_r+0x3e0>
 80100c4:	4b4d      	ldr	r3, [pc, #308]	; (80101fc <_dtoa_r+0x5f4>)
 80100c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80100ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d047      	beq.n	8010164 <_dtoa_r+0x55c>
 80100d4:	4602      	mov	r2, r0
 80100d6:	460b      	mov	r3, r1
 80100d8:	2000      	movs	r0, #0
 80100da:	494e      	ldr	r1, [pc, #312]	; (8010214 <_dtoa_r+0x60c>)
 80100dc:	f7f0 fbde 	bl	800089c <__aeabi_ddiv>
 80100e0:	462a      	mov	r2, r5
 80100e2:	4633      	mov	r3, r6
 80100e4:	f7f0 f8f8 	bl	80002d8 <__aeabi_dsub>
 80100e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80100ec:	465d      	mov	r5, fp
 80100ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100f2:	f7f0 fd59 	bl	8000ba8 <__aeabi_d2iz>
 80100f6:	4606      	mov	r6, r0
 80100f8:	f7f0 fa3c 	bl	8000574 <__aeabi_i2d>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010104:	f7f0 f8e8 	bl	80002d8 <__aeabi_dsub>
 8010108:	3630      	adds	r6, #48	; 0x30
 801010a:	f805 6b01 	strb.w	r6, [r5], #1
 801010e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010112:	e9cd 0100 	strd	r0, r1, [sp]
 8010116:	f7f0 fd09 	bl	8000b2c <__aeabi_dcmplt>
 801011a:	2800      	cmp	r0, #0
 801011c:	d163      	bne.n	80101e6 <_dtoa_r+0x5de>
 801011e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010122:	2000      	movs	r0, #0
 8010124:	4937      	ldr	r1, [pc, #220]	; (8010204 <_dtoa_r+0x5fc>)
 8010126:	f7f0 f8d7 	bl	80002d8 <__aeabi_dsub>
 801012a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801012e:	f7f0 fcfd 	bl	8000b2c <__aeabi_dcmplt>
 8010132:	2800      	cmp	r0, #0
 8010134:	f040 80b7 	bne.w	80102a6 <_dtoa_r+0x69e>
 8010138:	eba5 030b 	sub.w	r3, r5, fp
 801013c:	429f      	cmp	r7, r3
 801013e:	f77f af7c 	ble.w	801003a <_dtoa_r+0x432>
 8010142:	2200      	movs	r2, #0
 8010144:	4b30      	ldr	r3, [pc, #192]	; (8010208 <_dtoa_r+0x600>)
 8010146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801014a:	f7f0 fa7d 	bl	8000648 <__aeabi_dmul>
 801014e:	2200      	movs	r2, #0
 8010150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010154:	4b2c      	ldr	r3, [pc, #176]	; (8010208 <_dtoa_r+0x600>)
 8010156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801015a:	f7f0 fa75 	bl	8000648 <__aeabi_dmul>
 801015e:	e9cd 0100 	strd	r0, r1, [sp]
 8010162:	e7c4      	b.n	80100ee <_dtoa_r+0x4e6>
 8010164:	462a      	mov	r2, r5
 8010166:	4633      	mov	r3, r6
 8010168:	f7f0 fa6e 	bl	8000648 <__aeabi_dmul>
 801016c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010170:	eb0b 0507 	add.w	r5, fp, r7
 8010174:	465e      	mov	r6, fp
 8010176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801017a:	f7f0 fd15 	bl	8000ba8 <__aeabi_d2iz>
 801017e:	4607      	mov	r7, r0
 8010180:	f7f0 f9f8 	bl	8000574 <__aeabi_i2d>
 8010184:	3730      	adds	r7, #48	; 0x30
 8010186:	4602      	mov	r2, r0
 8010188:	460b      	mov	r3, r1
 801018a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801018e:	f7f0 f8a3 	bl	80002d8 <__aeabi_dsub>
 8010192:	f806 7b01 	strb.w	r7, [r6], #1
 8010196:	42ae      	cmp	r6, r5
 8010198:	e9cd 0100 	strd	r0, r1, [sp]
 801019c:	f04f 0200 	mov.w	r2, #0
 80101a0:	d126      	bne.n	80101f0 <_dtoa_r+0x5e8>
 80101a2:	4b1c      	ldr	r3, [pc, #112]	; (8010214 <_dtoa_r+0x60c>)
 80101a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101a8:	f7f0 f898 	bl	80002dc <__adddf3>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101b4:	f7f0 fcd8 	bl	8000b68 <__aeabi_dcmpgt>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d174      	bne.n	80102a6 <_dtoa_r+0x69e>
 80101bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80101c0:	2000      	movs	r0, #0
 80101c2:	4914      	ldr	r1, [pc, #80]	; (8010214 <_dtoa_r+0x60c>)
 80101c4:	f7f0 f888 	bl	80002d8 <__aeabi_dsub>
 80101c8:	4602      	mov	r2, r0
 80101ca:	460b      	mov	r3, r1
 80101cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101d0:	f7f0 fcac 	bl	8000b2c <__aeabi_dcmplt>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	f43f af30 	beq.w	801003a <_dtoa_r+0x432>
 80101da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101de:	2b30      	cmp	r3, #48	; 0x30
 80101e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80101e4:	d002      	beq.n	80101ec <_dtoa_r+0x5e4>
 80101e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80101ea:	e04a      	b.n	8010282 <_dtoa_r+0x67a>
 80101ec:	4615      	mov	r5, r2
 80101ee:	e7f4      	b.n	80101da <_dtoa_r+0x5d2>
 80101f0:	4b05      	ldr	r3, [pc, #20]	; (8010208 <_dtoa_r+0x600>)
 80101f2:	f7f0 fa29 	bl	8000648 <__aeabi_dmul>
 80101f6:	e9cd 0100 	strd	r0, r1, [sp]
 80101fa:	e7bc      	b.n	8010176 <_dtoa_r+0x56e>
 80101fc:	08014038 	.word	0x08014038
 8010200:	08014010 	.word	0x08014010
 8010204:	3ff00000 	.word	0x3ff00000
 8010208:	40240000 	.word	0x40240000
 801020c:	401c0000 	.word	0x401c0000
 8010210:	40140000 	.word	0x40140000
 8010214:	3fe00000 	.word	0x3fe00000
 8010218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801021c:	465d      	mov	r5, fp
 801021e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010222:	4630      	mov	r0, r6
 8010224:	4639      	mov	r1, r7
 8010226:	f7f0 fb39 	bl	800089c <__aeabi_ddiv>
 801022a:	f7f0 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 801022e:	4680      	mov	r8, r0
 8010230:	f7f0 f9a0 	bl	8000574 <__aeabi_i2d>
 8010234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010238:	f7f0 fa06 	bl	8000648 <__aeabi_dmul>
 801023c:	4602      	mov	r2, r0
 801023e:	460b      	mov	r3, r1
 8010240:	4630      	mov	r0, r6
 8010242:	4639      	mov	r1, r7
 8010244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010248:	f7f0 f846 	bl	80002d8 <__aeabi_dsub>
 801024c:	f805 6b01 	strb.w	r6, [r5], #1
 8010250:	eba5 060b 	sub.w	r6, r5, fp
 8010254:	45b1      	cmp	r9, r6
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	d139      	bne.n	80102d0 <_dtoa_r+0x6c8>
 801025c:	f7f0 f83e 	bl	80002dc <__adddf3>
 8010260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010264:	4606      	mov	r6, r0
 8010266:	460f      	mov	r7, r1
 8010268:	f7f0 fc7e 	bl	8000b68 <__aeabi_dcmpgt>
 801026c:	b9c8      	cbnz	r0, 80102a2 <_dtoa_r+0x69a>
 801026e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010272:	4630      	mov	r0, r6
 8010274:	4639      	mov	r1, r7
 8010276:	f7f0 fc4f 	bl	8000b18 <__aeabi_dcmpeq>
 801027a:	b110      	cbz	r0, 8010282 <_dtoa_r+0x67a>
 801027c:	f018 0f01 	tst.w	r8, #1
 8010280:	d10f      	bne.n	80102a2 <_dtoa_r+0x69a>
 8010282:	9904      	ldr	r1, [sp, #16]
 8010284:	4620      	mov	r0, r4
 8010286:	f000 fcaa 	bl	8010bde <_Bfree>
 801028a:	2300      	movs	r3, #0
 801028c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801028e:	702b      	strb	r3, [r5, #0]
 8010290:	f10a 0301 	add.w	r3, sl, #1
 8010294:	6013      	str	r3, [r2, #0]
 8010296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 8241 	beq.w	8010720 <_dtoa_r+0xb18>
 801029e:	601d      	str	r5, [r3, #0]
 80102a0:	e23e      	b.n	8010720 <_dtoa_r+0xb18>
 80102a2:	f8cd a020 	str.w	sl, [sp, #32]
 80102a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102aa:	2a39      	cmp	r2, #57	; 0x39
 80102ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80102b0:	d108      	bne.n	80102c4 <_dtoa_r+0x6bc>
 80102b2:	459b      	cmp	fp, r3
 80102b4:	d10a      	bne.n	80102cc <_dtoa_r+0x6c4>
 80102b6:	9b08      	ldr	r3, [sp, #32]
 80102b8:	3301      	adds	r3, #1
 80102ba:	9308      	str	r3, [sp, #32]
 80102bc:	2330      	movs	r3, #48	; 0x30
 80102be:	f88b 3000 	strb.w	r3, [fp]
 80102c2:	465b      	mov	r3, fp
 80102c4:	781a      	ldrb	r2, [r3, #0]
 80102c6:	3201      	adds	r2, #1
 80102c8:	701a      	strb	r2, [r3, #0]
 80102ca:	e78c      	b.n	80101e6 <_dtoa_r+0x5de>
 80102cc:	461d      	mov	r5, r3
 80102ce:	e7ea      	b.n	80102a6 <_dtoa_r+0x69e>
 80102d0:	2200      	movs	r2, #0
 80102d2:	4b9b      	ldr	r3, [pc, #620]	; (8010540 <_dtoa_r+0x938>)
 80102d4:	f7f0 f9b8 	bl	8000648 <__aeabi_dmul>
 80102d8:	2200      	movs	r2, #0
 80102da:	2300      	movs	r3, #0
 80102dc:	4606      	mov	r6, r0
 80102de:	460f      	mov	r7, r1
 80102e0:	f7f0 fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d09a      	beq.n	801021e <_dtoa_r+0x616>
 80102e8:	e7cb      	b.n	8010282 <_dtoa_r+0x67a>
 80102ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102ec:	2a00      	cmp	r2, #0
 80102ee:	f000 808b 	beq.w	8010408 <_dtoa_r+0x800>
 80102f2:	9a06      	ldr	r2, [sp, #24]
 80102f4:	2a01      	cmp	r2, #1
 80102f6:	dc6e      	bgt.n	80103d6 <_dtoa_r+0x7ce>
 80102f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80102fa:	2a00      	cmp	r2, #0
 80102fc:	d067      	beq.n	80103ce <_dtoa_r+0x7c6>
 80102fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010302:	9f07      	ldr	r7, [sp, #28]
 8010304:	9d05      	ldr	r5, [sp, #20]
 8010306:	9a05      	ldr	r2, [sp, #20]
 8010308:	2101      	movs	r1, #1
 801030a:	441a      	add	r2, r3
 801030c:	4620      	mov	r0, r4
 801030e:	9205      	str	r2, [sp, #20]
 8010310:	4498      	add	r8, r3
 8010312:	f000 fd04 	bl	8010d1e <__i2b>
 8010316:	4606      	mov	r6, r0
 8010318:	2d00      	cmp	r5, #0
 801031a:	dd0c      	ble.n	8010336 <_dtoa_r+0x72e>
 801031c:	f1b8 0f00 	cmp.w	r8, #0
 8010320:	dd09      	ble.n	8010336 <_dtoa_r+0x72e>
 8010322:	4545      	cmp	r5, r8
 8010324:	9a05      	ldr	r2, [sp, #20]
 8010326:	462b      	mov	r3, r5
 8010328:	bfa8      	it	ge
 801032a:	4643      	movge	r3, r8
 801032c:	1ad2      	subs	r2, r2, r3
 801032e:	9205      	str	r2, [sp, #20]
 8010330:	1aed      	subs	r5, r5, r3
 8010332:	eba8 0803 	sub.w	r8, r8, r3
 8010336:	9b07      	ldr	r3, [sp, #28]
 8010338:	b1eb      	cbz	r3, 8010376 <_dtoa_r+0x76e>
 801033a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801033c:	2b00      	cmp	r3, #0
 801033e:	d067      	beq.n	8010410 <_dtoa_r+0x808>
 8010340:	b18f      	cbz	r7, 8010366 <_dtoa_r+0x75e>
 8010342:	4631      	mov	r1, r6
 8010344:	463a      	mov	r2, r7
 8010346:	4620      	mov	r0, r4
 8010348:	f000 fd88 	bl	8010e5c <__pow5mult>
 801034c:	9a04      	ldr	r2, [sp, #16]
 801034e:	4601      	mov	r1, r0
 8010350:	4606      	mov	r6, r0
 8010352:	4620      	mov	r0, r4
 8010354:	f000 fcec 	bl	8010d30 <__multiply>
 8010358:	9904      	ldr	r1, [sp, #16]
 801035a:	9008      	str	r0, [sp, #32]
 801035c:	4620      	mov	r0, r4
 801035e:	f000 fc3e 	bl	8010bde <_Bfree>
 8010362:	9b08      	ldr	r3, [sp, #32]
 8010364:	9304      	str	r3, [sp, #16]
 8010366:	9b07      	ldr	r3, [sp, #28]
 8010368:	1bda      	subs	r2, r3, r7
 801036a:	d004      	beq.n	8010376 <_dtoa_r+0x76e>
 801036c:	9904      	ldr	r1, [sp, #16]
 801036e:	4620      	mov	r0, r4
 8010370:	f000 fd74 	bl	8010e5c <__pow5mult>
 8010374:	9004      	str	r0, [sp, #16]
 8010376:	2101      	movs	r1, #1
 8010378:	4620      	mov	r0, r4
 801037a:	f000 fcd0 	bl	8010d1e <__i2b>
 801037e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010380:	4607      	mov	r7, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 81d0 	beq.w	8010728 <_dtoa_r+0xb20>
 8010388:	461a      	mov	r2, r3
 801038a:	4601      	mov	r1, r0
 801038c:	4620      	mov	r0, r4
 801038e:	f000 fd65 	bl	8010e5c <__pow5mult>
 8010392:	9b06      	ldr	r3, [sp, #24]
 8010394:	2b01      	cmp	r3, #1
 8010396:	4607      	mov	r7, r0
 8010398:	dc40      	bgt.n	801041c <_dtoa_r+0x814>
 801039a:	9b00      	ldr	r3, [sp, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d139      	bne.n	8010414 <_dtoa_r+0x80c>
 80103a0:	9b01      	ldr	r3, [sp, #4]
 80103a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d136      	bne.n	8010418 <_dtoa_r+0x810>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103b0:	0d1b      	lsrs	r3, r3, #20
 80103b2:	051b      	lsls	r3, r3, #20
 80103b4:	b12b      	cbz	r3, 80103c2 <_dtoa_r+0x7ba>
 80103b6:	9b05      	ldr	r3, [sp, #20]
 80103b8:	3301      	adds	r3, #1
 80103ba:	9305      	str	r3, [sp, #20]
 80103bc:	f108 0801 	add.w	r8, r8, #1
 80103c0:	2301      	movs	r3, #1
 80103c2:	9307      	str	r3, [sp, #28]
 80103c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d12a      	bne.n	8010420 <_dtoa_r+0x818>
 80103ca:	2001      	movs	r0, #1
 80103cc:	e030      	b.n	8010430 <_dtoa_r+0x828>
 80103ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103d4:	e795      	b.n	8010302 <_dtoa_r+0x6fa>
 80103d6:	9b07      	ldr	r3, [sp, #28]
 80103d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80103dc:	42bb      	cmp	r3, r7
 80103de:	bfbf      	itttt	lt
 80103e0:	9b07      	ldrlt	r3, [sp, #28]
 80103e2:	9707      	strlt	r7, [sp, #28]
 80103e4:	1afa      	sublt	r2, r7, r3
 80103e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80103e8:	bfbb      	ittet	lt
 80103ea:	189b      	addlt	r3, r3, r2
 80103ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80103ee:	1bdf      	subge	r7, r3, r7
 80103f0:	2700      	movlt	r7, #0
 80103f2:	f1b9 0f00 	cmp.w	r9, #0
 80103f6:	bfb5      	itete	lt
 80103f8:	9b05      	ldrlt	r3, [sp, #20]
 80103fa:	9d05      	ldrge	r5, [sp, #20]
 80103fc:	eba3 0509 	sublt.w	r5, r3, r9
 8010400:	464b      	movge	r3, r9
 8010402:	bfb8      	it	lt
 8010404:	2300      	movlt	r3, #0
 8010406:	e77e      	b.n	8010306 <_dtoa_r+0x6fe>
 8010408:	9f07      	ldr	r7, [sp, #28]
 801040a:	9d05      	ldr	r5, [sp, #20]
 801040c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801040e:	e783      	b.n	8010318 <_dtoa_r+0x710>
 8010410:	9a07      	ldr	r2, [sp, #28]
 8010412:	e7ab      	b.n	801036c <_dtoa_r+0x764>
 8010414:	2300      	movs	r3, #0
 8010416:	e7d4      	b.n	80103c2 <_dtoa_r+0x7ba>
 8010418:	9b00      	ldr	r3, [sp, #0]
 801041a:	e7d2      	b.n	80103c2 <_dtoa_r+0x7ba>
 801041c:	2300      	movs	r3, #0
 801041e:	9307      	str	r3, [sp, #28]
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010426:	6918      	ldr	r0, [r3, #16]
 8010428:	f000 fc2b 	bl	8010c82 <__hi0bits>
 801042c:	f1c0 0020 	rsb	r0, r0, #32
 8010430:	4440      	add	r0, r8
 8010432:	f010 001f 	ands.w	r0, r0, #31
 8010436:	d047      	beq.n	80104c8 <_dtoa_r+0x8c0>
 8010438:	f1c0 0320 	rsb	r3, r0, #32
 801043c:	2b04      	cmp	r3, #4
 801043e:	dd3b      	ble.n	80104b8 <_dtoa_r+0x8b0>
 8010440:	9b05      	ldr	r3, [sp, #20]
 8010442:	f1c0 001c 	rsb	r0, r0, #28
 8010446:	4403      	add	r3, r0
 8010448:	9305      	str	r3, [sp, #20]
 801044a:	4405      	add	r5, r0
 801044c:	4480      	add	r8, r0
 801044e:	9b05      	ldr	r3, [sp, #20]
 8010450:	2b00      	cmp	r3, #0
 8010452:	dd05      	ble.n	8010460 <_dtoa_r+0x858>
 8010454:	461a      	mov	r2, r3
 8010456:	9904      	ldr	r1, [sp, #16]
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fd4d 	bl	8010ef8 <__lshift>
 801045e:	9004      	str	r0, [sp, #16]
 8010460:	f1b8 0f00 	cmp.w	r8, #0
 8010464:	dd05      	ble.n	8010472 <_dtoa_r+0x86a>
 8010466:	4639      	mov	r1, r7
 8010468:	4642      	mov	r2, r8
 801046a:	4620      	mov	r0, r4
 801046c:	f000 fd44 	bl	8010ef8 <__lshift>
 8010470:	4607      	mov	r7, r0
 8010472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010474:	b353      	cbz	r3, 80104cc <_dtoa_r+0x8c4>
 8010476:	4639      	mov	r1, r7
 8010478:	9804      	ldr	r0, [sp, #16]
 801047a:	f000 fd91 	bl	8010fa0 <__mcmp>
 801047e:	2800      	cmp	r0, #0
 8010480:	da24      	bge.n	80104cc <_dtoa_r+0x8c4>
 8010482:	2300      	movs	r3, #0
 8010484:	220a      	movs	r2, #10
 8010486:	9904      	ldr	r1, [sp, #16]
 8010488:	4620      	mov	r0, r4
 801048a:	f000 fbbf 	bl	8010c0c <__multadd>
 801048e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010490:	9004      	str	r0, [sp, #16]
 8010492:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010496:	2b00      	cmp	r3, #0
 8010498:	f000 814d 	beq.w	8010736 <_dtoa_r+0xb2e>
 801049c:	2300      	movs	r3, #0
 801049e:	4631      	mov	r1, r6
 80104a0:	220a      	movs	r2, #10
 80104a2:	4620      	mov	r0, r4
 80104a4:	f000 fbb2 	bl	8010c0c <__multadd>
 80104a8:	9b02      	ldr	r3, [sp, #8]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	4606      	mov	r6, r0
 80104ae:	dc4f      	bgt.n	8010550 <_dtoa_r+0x948>
 80104b0:	9b06      	ldr	r3, [sp, #24]
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	dd4c      	ble.n	8010550 <_dtoa_r+0x948>
 80104b6:	e011      	b.n	80104dc <_dtoa_r+0x8d4>
 80104b8:	d0c9      	beq.n	801044e <_dtoa_r+0x846>
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	331c      	adds	r3, #28
 80104be:	441a      	add	r2, r3
 80104c0:	9205      	str	r2, [sp, #20]
 80104c2:	441d      	add	r5, r3
 80104c4:	4498      	add	r8, r3
 80104c6:	e7c2      	b.n	801044e <_dtoa_r+0x846>
 80104c8:	4603      	mov	r3, r0
 80104ca:	e7f6      	b.n	80104ba <_dtoa_r+0x8b2>
 80104cc:	f1b9 0f00 	cmp.w	r9, #0
 80104d0:	dc38      	bgt.n	8010544 <_dtoa_r+0x93c>
 80104d2:	9b06      	ldr	r3, [sp, #24]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	dd35      	ble.n	8010544 <_dtoa_r+0x93c>
 80104d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80104dc:	9b02      	ldr	r3, [sp, #8]
 80104de:	b963      	cbnz	r3, 80104fa <_dtoa_r+0x8f2>
 80104e0:	4639      	mov	r1, r7
 80104e2:	2205      	movs	r2, #5
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 fb91 	bl	8010c0c <__multadd>
 80104ea:	4601      	mov	r1, r0
 80104ec:	4607      	mov	r7, r0
 80104ee:	9804      	ldr	r0, [sp, #16]
 80104f0:	f000 fd56 	bl	8010fa0 <__mcmp>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	f73f adcc 	bgt.w	8010092 <_dtoa_r+0x48a>
 80104fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104fc:	465d      	mov	r5, fp
 80104fe:	ea6f 0a03 	mvn.w	sl, r3
 8010502:	f04f 0900 	mov.w	r9, #0
 8010506:	4639      	mov	r1, r7
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fb68 	bl	8010bde <_Bfree>
 801050e:	2e00      	cmp	r6, #0
 8010510:	f43f aeb7 	beq.w	8010282 <_dtoa_r+0x67a>
 8010514:	f1b9 0f00 	cmp.w	r9, #0
 8010518:	d005      	beq.n	8010526 <_dtoa_r+0x91e>
 801051a:	45b1      	cmp	r9, r6
 801051c:	d003      	beq.n	8010526 <_dtoa_r+0x91e>
 801051e:	4649      	mov	r1, r9
 8010520:	4620      	mov	r0, r4
 8010522:	f000 fb5c 	bl	8010bde <_Bfree>
 8010526:	4631      	mov	r1, r6
 8010528:	4620      	mov	r0, r4
 801052a:	f000 fb58 	bl	8010bde <_Bfree>
 801052e:	e6a8      	b.n	8010282 <_dtoa_r+0x67a>
 8010530:	2700      	movs	r7, #0
 8010532:	463e      	mov	r6, r7
 8010534:	e7e1      	b.n	80104fa <_dtoa_r+0x8f2>
 8010536:	f8dd a020 	ldr.w	sl, [sp, #32]
 801053a:	463e      	mov	r6, r7
 801053c:	e5a9      	b.n	8010092 <_dtoa_r+0x48a>
 801053e:	bf00      	nop
 8010540:	40240000 	.word	0x40240000
 8010544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010546:	f8cd 9008 	str.w	r9, [sp, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 80fa 	beq.w	8010744 <_dtoa_r+0xb3c>
 8010550:	2d00      	cmp	r5, #0
 8010552:	dd05      	ble.n	8010560 <_dtoa_r+0x958>
 8010554:	4631      	mov	r1, r6
 8010556:	462a      	mov	r2, r5
 8010558:	4620      	mov	r0, r4
 801055a:	f000 fccd 	bl	8010ef8 <__lshift>
 801055e:	4606      	mov	r6, r0
 8010560:	9b07      	ldr	r3, [sp, #28]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d04c      	beq.n	8010600 <_dtoa_r+0x9f8>
 8010566:	6871      	ldr	r1, [r6, #4]
 8010568:	4620      	mov	r0, r4
 801056a:	f000 fb04 	bl	8010b76 <_Balloc>
 801056e:	6932      	ldr	r2, [r6, #16]
 8010570:	3202      	adds	r2, #2
 8010572:	4605      	mov	r5, r0
 8010574:	0092      	lsls	r2, r2, #2
 8010576:	f106 010c 	add.w	r1, r6, #12
 801057a:	300c      	adds	r0, #12
 801057c:	f000 faf0 	bl	8010b60 <memcpy>
 8010580:	2201      	movs	r2, #1
 8010582:	4629      	mov	r1, r5
 8010584:	4620      	mov	r0, r4
 8010586:	f000 fcb7 	bl	8010ef8 <__lshift>
 801058a:	9b00      	ldr	r3, [sp, #0]
 801058c:	f8cd b014 	str.w	fp, [sp, #20]
 8010590:	f003 0301 	and.w	r3, r3, #1
 8010594:	46b1      	mov	r9, r6
 8010596:	9307      	str	r3, [sp, #28]
 8010598:	4606      	mov	r6, r0
 801059a:	4639      	mov	r1, r7
 801059c:	9804      	ldr	r0, [sp, #16]
 801059e:	f7ff faa7 	bl	800faf0 <quorem>
 80105a2:	4649      	mov	r1, r9
 80105a4:	4605      	mov	r5, r0
 80105a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80105aa:	9804      	ldr	r0, [sp, #16]
 80105ac:	f000 fcf8 	bl	8010fa0 <__mcmp>
 80105b0:	4632      	mov	r2, r6
 80105b2:	9000      	str	r0, [sp, #0]
 80105b4:	4639      	mov	r1, r7
 80105b6:	4620      	mov	r0, r4
 80105b8:	f000 fd0c 	bl	8010fd4 <__mdiff>
 80105bc:	68c3      	ldr	r3, [r0, #12]
 80105be:	4602      	mov	r2, r0
 80105c0:	bb03      	cbnz	r3, 8010604 <_dtoa_r+0x9fc>
 80105c2:	4601      	mov	r1, r0
 80105c4:	9008      	str	r0, [sp, #32]
 80105c6:	9804      	ldr	r0, [sp, #16]
 80105c8:	f000 fcea 	bl	8010fa0 <__mcmp>
 80105cc:	9a08      	ldr	r2, [sp, #32]
 80105ce:	4603      	mov	r3, r0
 80105d0:	4611      	mov	r1, r2
 80105d2:	4620      	mov	r0, r4
 80105d4:	9308      	str	r3, [sp, #32]
 80105d6:	f000 fb02 	bl	8010bde <_Bfree>
 80105da:	9b08      	ldr	r3, [sp, #32]
 80105dc:	b9a3      	cbnz	r3, 8010608 <_dtoa_r+0xa00>
 80105de:	9a06      	ldr	r2, [sp, #24]
 80105e0:	b992      	cbnz	r2, 8010608 <_dtoa_r+0xa00>
 80105e2:	9a07      	ldr	r2, [sp, #28]
 80105e4:	b982      	cbnz	r2, 8010608 <_dtoa_r+0xa00>
 80105e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80105ea:	d029      	beq.n	8010640 <_dtoa_r+0xa38>
 80105ec:	9b00      	ldr	r3, [sp, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dd01      	ble.n	80105f6 <_dtoa_r+0x9ee>
 80105f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80105f6:	9b05      	ldr	r3, [sp, #20]
 80105f8:	1c5d      	adds	r5, r3, #1
 80105fa:	f883 8000 	strb.w	r8, [r3]
 80105fe:	e782      	b.n	8010506 <_dtoa_r+0x8fe>
 8010600:	4630      	mov	r0, r6
 8010602:	e7c2      	b.n	801058a <_dtoa_r+0x982>
 8010604:	2301      	movs	r3, #1
 8010606:	e7e3      	b.n	80105d0 <_dtoa_r+0x9c8>
 8010608:	9a00      	ldr	r2, [sp, #0]
 801060a:	2a00      	cmp	r2, #0
 801060c:	db04      	blt.n	8010618 <_dtoa_r+0xa10>
 801060e:	d125      	bne.n	801065c <_dtoa_r+0xa54>
 8010610:	9a06      	ldr	r2, [sp, #24]
 8010612:	bb1a      	cbnz	r2, 801065c <_dtoa_r+0xa54>
 8010614:	9a07      	ldr	r2, [sp, #28]
 8010616:	bb0a      	cbnz	r2, 801065c <_dtoa_r+0xa54>
 8010618:	2b00      	cmp	r3, #0
 801061a:	ddec      	ble.n	80105f6 <_dtoa_r+0x9ee>
 801061c:	2201      	movs	r2, #1
 801061e:	9904      	ldr	r1, [sp, #16]
 8010620:	4620      	mov	r0, r4
 8010622:	f000 fc69 	bl	8010ef8 <__lshift>
 8010626:	4639      	mov	r1, r7
 8010628:	9004      	str	r0, [sp, #16]
 801062a:	f000 fcb9 	bl	8010fa0 <__mcmp>
 801062e:	2800      	cmp	r0, #0
 8010630:	dc03      	bgt.n	801063a <_dtoa_r+0xa32>
 8010632:	d1e0      	bne.n	80105f6 <_dtoa_r+0x9ee>
 8010634:	f018 0f01 	tst.w	r8, #1
 8010638:	d0dd      	beq.n	80105f6 <_dtoa_r+0x9ee>
 801063a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801063e:	d1d8      	bne.n	80105f2 <_dtoa_r+0x9ea>
 8010640:	9b05      	ldr	r3, [sp, #20]
 8010642:	9a05      	ldr	r2, [sp, #20]
 8010644:	1c5d      	adds	r5, r3, #1
 8010646:	2339      	movs	r3, #57	; 0x39
 8010648:	7013      	strb	r3, [r2, #0]
 801064a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801064e:	2b39      	cmp	r3, #57	; 0x39
 8010650:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010654:	d04f      	beq.n	80106f6 <_dtoa_r+0xaee>
 8010656:	3301      	adds	r3, #1
 8010658:	7013      	strb	r3, [r2, #0]
 801065a:	e754      	b.n	8010506 <_dtoa_r+0x8fe>
 801065c:	9a05      	ldr	r2, [sp, #20]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f102 0501 	add.w	r5, r2, #1
 8010664:	dd06      	ble.n	8010674 <_dtoa_r+0xa6c>
 8010666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801066a:	d0e9      	beq.n	8010640 <_dtoa_r+0xa38>
 801066c:	f108 0801 	add.w	r8, r8, #1
 8010670:	9b05      	ldr	r3, [sp, #20]
 8010672:	e7c2      	b.n	80105fa <_dtoa_r+0x9f2>
 8010674:	9a02      	ldr	r2, [sp, #8]
 8010676:	f805 8c01 	strb.w	r8, [r5, #-1]
 801067a:	eba5 030b 	sub.w	r3, r5, fp
 801067e:	4293      	cmp	r3, r2
 8010680:	d021      	beq.n	80106c6 <_dtoa_r+0xabe>
 8010682:	2300      	movs	r3, #0
 8010684:	220a      	movs	r2, #10
 8010686:	9904      	ldr	r1, [sp, #16]
 8010688:	4620      	mov	r0, r4
 801068a:	f000 fabf 	bl	8010c0c <__multadd>
 801068e:	45b1      	cmp	r9, r6
 8010690:	9004      	str	r0, [sp, #16]
 8010692:	f04f 0300 	mov.w	r3, #0
 8010696:	f04f 020a 	mov.w	r2, #10
 801069a:	4649      	mov	r1, r9
 801069c:	4620      	mov	r0, r4
 801069e:	d105      	bne.n	80106ac <_dtoa_r+0xaa4>
 80106a0:	f000 fab4 	bl	8010c0c <__multadd>
 80106a4:	4681      	mov	r9, r0
 80106a6:	4606      	mov	r6, r0
 80106a8:	9505      	str	r5, [sp, #20]
 80106aa:	e776      	b.n	801059a <_dtoa_r+0x992>
 80106ac:	f000 faae 	bl	8010c0c <__multadd>
 80106b0:	4631      	mov	r1, r6
 80106b2:	4681      	mov	r9, r0
 80106b4:	2300      	movs	r3, #0
 80106b6:	220a      	movs	r2, #10
 80106b8:	4620      	mov	r0, r4
 80106ba:	f000 faa7 	bl	8010c0c <__multadd>
 80106be:	4606      	mov	r6, r0
 80106c0:	e7f2      	b.n	80106a8 <_dtoa_r+0xaa0>
 80106c2:	f04f 0900 	mov.w	r9, #0
 80106c6:	2201      	movs	r2, #1
 80106c8:	9904      	ldr	r1, [sp, #16]
 80106ca:	4620      	mov	r0, r4
 80106cc:	f000 fc14 	bl	8010ef8 <__lshift>
 80106d0:	4639      	mov	r1, r7
 80106d2:	9004      	str	r0, [sp, #16]
 80106d4:	f000 fc64 	bl	8010fa0 <__mcmp>
 80106d8:	2800      	cmp	r0, #0
 80106da:	dcb6      	bgt.n	801064a <_dtoa_r+0xa42>
 80106dc:	d102      	bne.n	80106e4 <_dtoa_r+0xadc>
 80106de:	f018 0f01 	tst.w	r8, #1
 80106e2:	d1b2      	bne.n	801064a <_dtoa_r+0xa42>
 80106e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80106e8:	2b30      	cmp	r3, #48	; 0x30
 80106ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80106ee:	f47f af0a 	bne.w	8010506 <_dtoa_r+0x8fe>
 80106f2:	4615      	mov	r5, r2
 80106f4:	e7f6      	b.n	80106e4 <_dtoa_r+0xadc>
 80106f6:	4593      	cmp	fp, r2
 80106f8:	d105      	bne.n	8010706 <_dtoa_r+0xafe>
 80106fa:	2331      	movs	r3, #49	; 0x31
 80106fc:	f10a 0a01 	add.w	sl, sl, #1
 8010700:	f88b 3000 	strb.w	r3, [fp]
 8010704:	e6ff      	b.n	8010506 <_dtoa_r+0x8fe>
 8010706:	4615      	mov	r5, r2
 8010708:	e79f      	b.n	801064a <_dtoa_r+0xa42>
 801070a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010770 <_dtoa_r+0xb68>
 801070e:	e007      	b.n	8010720 <_dtoa_r+0xb18>
 8010710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010774 <_dtoa_r+0xb6c>
 8010716:	b11b      	cbz	r3, 8010720 <_dtoa_r+0xb18>
 8010718:	f10b 0308 	add.w	r3, fp, #8
 801071c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801071e:	6013      	str	r3, [r2, #0]
 8010720:	4658      	mov	r0, fp
 8010722:	b017      	add	sp, #92	; 0x5c
 8010724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010728:	9b06      	ldr	r3, [sp, #24]
 801072a:	2b01      	cmp	r3, #1
 801072c:	f77f ae35 	ble.w	801039a <_dtoa_r+0x792>
 8010730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010732:	9307      	str	r3, [sp, #28]
 8010734:	e649      	b.n	80103ca <_dtoa_r+0x7c2>
 8010736:	9b02      	ldr	r3, [sp, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	dc03      	bgt.n	8010744 <_dtoa_r+0xb3c>
 801073c:	9b06      	ldr	r3, [sp, #24]
 801073e:	2b02      	cmp	r3, #2
 8010740:	f73f aecc 	bgt.w	80104dc <_dtoa_r+0x8d4>
 8010744:	465d      	mov	r5, fp
 8010746:	4639      	mov	r1, r7
 8010748:	9804      	ldr	r0, [sp, #16]
 801074a:	f7ff f9d1 	bl	800faf0 <quorem>
 801074e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010752:	f805 8b01 	strb.w	r8, [r5], #1
 8010756:	9a02      	ldr	r2, [sp, #8]
 8010758:	eba5 030b 	sub.w	r3, r5, fp
 801075c:	429a      	cmp	r2, r3
 801075e:	ddb0      	ble.n	80106c2 <_dtoa_r+0xaba>
 8010760:	2300      	movs	r3, #0
 8010762:	220a      	movs	r2, #10
 8010764:	9904      	ldr	r1, [sp, #16]
 8010766:	4620      	mov	r0, r4
 8010768:	f000 fa50 	bl	8010c0c <__multadd>
 801076c:	9004      	str	r0, [sp, #16]
 801076e:	e7ea      	b.n	8010746 <_dtoa_r+0xb3e>
 8010770:	0801422c 	.word	0x0801422c
 8010774:	08013fa2 	.word	0x08013fa2

08010778 <__sflush_r>:
 8010778:	898a      	ldrh	r2, [r1, #12]
 801077a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077e:	4605      	mov	r5, r0
 8010780:	0710      	lsls	r0, r2, #28
 8010782:	460c      	mov	r4, r1
 8010784:	d458      	bmi.n	8010838 <__sflush_r+0xc0>
 8010786:	684b      	ldr	r3, [r1, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	dc05      	bgt.n	8010798 <__sflush_r+0x20>
 801078c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801078e:	2b00      	cmp	r3, #0
 8010790:	dc02      	bgt.n	8010798 <__sflush_r+0x20>
 8010792:	2000      	movs	r0, #0
 8010794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801079a:	2e00      	cmp	r6, #0
 801079c:	d0f9      	beq.n	8010792 <__sflush_r+0x1a>
 801079e:	2300      	movs	r3, #0
 80107a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107a4:	682f      	ldr	r7, [r5, #0]
 80107a6:	6a21      	ldr	r1, [r4, #32]
 80107a8:	602b      	str	r3, [r5, #0]
 80107aa:	d032      	beq.n	8010812 <__sflush_r+0x9a>
 80107ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	075a      	lsls	r2, r3, #29
 80107b2:	d505      	bpl.n	80107c0 <__sflush_r+0x48>
 80107b4:	6863      	ldr	r3, [r4, #4]
 80107b6:	1ac0      	subs	r0, r0, r3
 80107b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107ba:	b10b      	cbz	r3, 80107c0 <__sflush_r+0x48>
 80107bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107be:	1ac0      	subs	r0, r0, r3
 80107c0:	2300      	movs	r3, #0
 80107c2:	4602      	mov	r2, r0
 80107c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107c6:	6a21      	ldr	r1, [r4, #32]
 80107c8:	4628      	mov	r0, r5
 80107ca:	47b0      	blx	r6
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	89a3      	ldrh	r3, [r4, #12]
 80107d0:	d106      	bne.n	80107e0 <__sflush_r+0x68>
 80107d2:	6829      	ldr	r1, [r5, #0]
 80107d4:	291d      	cmp	r1, #29
 80107d6:	d848      	bhi.n	801086a <__sflush_r+0xf2>
 80107d8:	4a29      	ldr	r2, [pc, #164]	; (8010880 <__sflush_r+0x108>)
 80107da:	40ca      	lsrs	r2, r1
 80107dc:	07d6      	lsls	r6, r2, #31
 80107de:	d544      	bpl.n	801086a <__sflush_r+0xf2>
 80107e0:	2200      	movs	r2, #0
 80107e2:	6062      	str	r2, [r4, #4]
 80107e4:	04d9      	lsls	r1, r3, #19
 80107e6:	6922      	ldr	r2, [r4, #16]
 80107e8:	6022      	str	r2, [r4, #0]
 80107ea:	d504      	bpl.n	80107f6 <__sflush_r+0x7e>
 80107ec:	1c42      	adds	r2, r0, #1
 80107ee:	d101      	bne.n	80107f4 <__sflush_r+0x7c>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	b903      	cbnz	r3, 80107f6 <__sflush_r+0x7e>
 80107f4:	6560      	str	r0, [r4, #84]	; 0x54
 80107f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107f8:	602f      	str	r7, [r5, #0]
 80107fa:	2900      	cmp	r1, #0
 80107fc:	d0c9      	beq.n	8010792 <__sflush_r+0x1a>
 80107fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010802:	4299      	cmp	r1, r3
 8010804:	d002      	beq.n	801080c <__sflush_r+0x94>
 8010806:	4628      	mov	r0, r5
 8010808:	f000 fc9e 	bl	8011148 <_free_r>
 801080c:	2000      	movs	r0, #0
 801080e:	6360      	str	r0, [r4, #52]	; 0x34
 8010810:	e7c0      	b.n	8010794 <__sflush_r+0x1c>
 8010812:	2301      	movs	r3, #1
 8010814:	4628      	mov	r0, r5
 8010816:	47b0      	blx	r6
 8010818:	1c41      	adds	r1, r0, #1
 801081a:	d1c8      	bne.n	80107ae <__sflush_r+0x36>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0c5      	beq.n	80107ae <__sflush_r+0x36>
 8010822:	2b1d      	cmp	r3, #29
 8010824:	d001      	beq.n	801082a <__sflush_r+0xb2>
 8010826:	2b16      	cmp	r3, #22
 8010828:	d101      	bne.n	801082e <__sflush_r+0xb6>
 801082a:	602f      	str	r7, [r5, #0]
 801082c:	e7b1      	b.n	8010792 <__sflush_r+0x1a>
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010834:	81a3      	strh	r3, [r4, #12]
 8010836:	e7ad      	b.n	8010794 <__sflush_r+0x1c>
 8010838:	690f      	ldr	r7, [r1, #16]
 801083a:	2f00      	cmp	r7, #0
 801083c:	d0a9      	beq.n	8010792 <__sflush_r+0x1a>
 801083e:	0793      	lsls	r3, r2, #30
 8010840:	680e      	ldr	r6, [r1, #0]
 8010842:	bf08      	it	eq
 8010844:	694b      	ldreq	r3, [r1, #20]
 8010846:	600f      	str	r7, [r1, #0]
 8010848:	bf18      	it	ne
 801084a:	2300      	movne	r3, #0
 801084c:	eba6 0807 	sub.w	r8, r6, r7
 8010850:	608b      	str	r3, [r1, #8]
 8010852:	f1b8 0f00 	cmp.w	r8, #0
 8010856:	dd9c      	ble.n	8010792 <__sflush_r+0x1a>
 8010858:	4643      	mov	r3, r8
 801085a:	463a      	mov	r2, r7
 801085c:	6a21      	ldr	r1, [r4, #32]
 801085e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010860:	4628      	mov	r0, r5
 8010862:	47b0      	blx	r6
 8010864:	2800      	cmp	r0, #0
 8010866:	dc06      	bgt.n	8010876 <__sflush_r+0xfe>
 8010868:	89a3      	ldrh	r3, [r4, #12]
 801086a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801086e:	81a3      	strh	r3, [r4, #12]
 8010870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010874:	e78e      	b.n	8010794 <__sflush_r+0x1c>
 8010876:	4407      	add	r7, r0
 8010878:	eba8 0800 	sub.w	r8, r8, r0
 801087c:	e7e9      	b.n	8010852 <__sflush_r+0xda>
 801087e:	bf00      	nop
 8010880:	20400001 	.word	0x20400001

08010884 <_fflush_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	690b      	ldr	r3, [r1, #16]
 8010888:	4605      	mov	r5, r0
 801088a:	460c      	mov	r4, r1
 801088c:	b1db      	cbz	r3, 80108c6 <_fflush_r+0x42>
 801088e:	b118      	cbz	r0, 8010898 <_fflush_r+0x14>
 8010890:	6983      	ldr	r3, [r0, #24]
 8010892:	b90b      	cbnz	r3, 8010898 <_fflush_r+0x14>
 8010894:	f000 f860 	bl	8010958 <__sinit>
 8010898:	4b0c      	ldr	r3, [pc, #48]	; (80108cc <_fflush_r+0x48>)
 801089a:	429c      	cmp	r4, r3
 801089c:	d109      	bne.n	80108b2 <_fflush_r+0x2e>
 801089e:	686c      	ldr	r4, [r5, #4]
 80108a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108a4:	b17b      	cbz	r3, 80108c6 <_fflush_r+0x42>
 80108a6:	4621      	mov	r1, r4
 80108a8:	4628      	mov	r0, r5
 80108aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ae:	f7ff bf63 	b.w	8010778 <__sflush_r>
 80108b2:	4b07      	ldr	r3, [pc, #28]	; (80108d0 <_fflush_r+0x4c>)
 80108b4:	429c      	cmp	r4, r3
 80108b6:	d101      	bne.n	80108bc <_fflush_r+0x38>
 80108b8:	68ac      	ldr	r4, [r5, #8]
 80108ba:	e7f1      	b.n	80108a0 <_fflush_r+0x1c>
 80108bc:	4b05      	ldr	r3, [pc, #20]	; (80108d4 <_fflush_r+0x50>)
 80108be:	429c      	cmp	r4, r3
 80108c0:	bf08      	it	eq
 80108c2:	68ec      	ldreq	r4, [r5, #12]
 80108c4:	e7ec      	b.n	80108a0 <_fflush_r+0x1c>
 80108c6:	2000      	movs	r0, #0
 80108c8:	bd38      	pop	{r3, r4, r5, pc}
 80108ca:	bf00      	nop
 80108cc:	08013fd0 	.word	0x08013fd0
 80108d0:	08013ff0 	.word	0x08013ff0
 80108d4:	08013fb0 	.word	0x08013fb0

080108d8 <std>:
 80108d8:	2300      	movs	r3, #0
 80108da:	b510      	push	{r4, lr}
 80108dc:	4604      	mov	r4, r0
 80108de:	e9c0 3300 	strd	r3, r3, [r0]
 80108e2:	6083      	str	r3, [r0, #8]
 80108e4:	8181      	strh	r1, [r0, #12]
 80108e6:	6643      	str	r3, [r0, #100]	; 0x64
 80108e8:	81c2      	strh	r2, [r0, #14]
 80108ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108ee:	6183      	str	r3, [r0, #24]
 80108f0:	4619      	mov	r1, r3
 80108f2:	2208      	movs	r2, #8
 80108f4:	305c      	adds	r0, #92	; 0x5c
 80108f6:	f7fe fb2f 	bl	800ef58 <memset>
 80108fa:	4b05      	ldr	r3, [pc, #20]	; (8010910 <std+0x38>)
 80108fc:	6263      	str	r3, [r4, #36]	; 0x24
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <std+0x3c>)
 8010900:	62a3      	str	r3, [r4, #40]	; 0x28
 8010902:	4b05      	ldr	r3, [pc, #20]	; (8010918 <std+0x40>)
 8010904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <std+0x44>)
 8010908:	6224      	str	r4, [r4, #32]
 801090a:	6323      	str	r3, [r4, #48]	; 0x30
 801090c:	bd10      	pop	{r4, pc}
 801090e:	bf00      	nop
 8010910:	0801155d 	.word	0x0801155d
 8010914:	0801157f 	.word	0x0801157f
 8010918:	080115b7 	.word	0x080115b7
 801091c:	080115db 	.word	0x080115db

08010920 <_cleanup_r>:
 8010920:	4901      	ldr	r1, [pc, #4]	; (8010928 <_cleanup_r+0x8>)
 8010922:	f000 b885 	b.w	8010a30 <_fwalk_reent>
 8010926:	bf00      	nop
 8010928:	08010885 	.word	0x08010885

0801092c <__sfmoreglue>:
 801092c:	b570      	push	{r4, r5, r6, lr}
 801092e:	1e4a      	subs	r2, r1, #1
 8010930:	2568      	movs	r5, #104	; 0x68
 8010932:	4355      	muls	r5, r2
 8010934:	460e      	mov	r6, r1
 8010936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801093a:	f000 fc53 	bl	80111e4 <_malloc_r>
 801093e:	4604      	mov	r4, r0
 8010940:	b140      	cbz	r0, 8010954 <__sfmoreglue+0x28>
 8010942:	2100      	movs	r1, #0
 8010944:	e9c0 1600 	strd	r1, r6, [r0]
 8010948:	300c      	adds	r0, #12
 801094a:	60a0      	str	r0, [r4, #8]
 801094c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010950:	f7fe fb02 	bl	800ef58 <memset>
 8010954:	4620      	mov	r0, r4
 8010956:	bd70      	pop	{r4, r5, r6, pc}

08010958 <__sinit>:
 8010958:	6983      	ldr	r3, [r0, #24]
 801095a:	b510      	push	{r4, lr}
 801095c:	4604      	mov	r4, r0
 801095e:	bb33      	cbnz	r3, 80109ae <__sinit+0x56>
 8010960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010964:	6503      	str	r3, [r0, #80]	; 0x50
 8010966:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <__sinit+0x58>)
 8010968:	4a12      	ldr	r2, [pc, #72]	; (80109b4 <__sinit+0x5c>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	6282      	str	r2, [r0, #40]	; 0x28
 801096e:	4298      	cmp	r0, r3
 8010970:	bf04      	itt	eq
 8010972:	2301      	moveq	r3, #1
 8010974:	6183      	streq	r3, [r0, #24]
 8010976:	f000 f81f 	bl	80109b8 <__sfp>
 801097a:	6060      	str	r0, [r4, #4]
 801097c:	4620      	mov	r0, r4
 801097e:	f000 f81b 	bl	80109b8 <__sfp>
 8010982:	60a0      	str	r0, [r4, #8]
 8010984:	4620      	mov	r0, r4
 8010986:	f000 f817 	bl	80109b8 <__sfp>
 801098a:	2200      	movs	r2, #0
 801098c:	60e0      	str	r0, [r4, #12]
 801098e:	2104      	movs	r1, #4
 8010990:	6860      	ldr	r0, [r4, #4]
 8010992:	f7ff ffa1 	bl	80108d8 <std>
 8010996:	2201      	movs	r2, #1
 8010998:	2109      	movs	r1, #9
 801099a:	68a0      	ldr	r0, [r4, #8]
 801099c:	f7ff ff9c 	bl	80108d8 <std>
 80109a0:	2202      	movs	r2, #2
 80109a2:	2112      	movs	r1, #18
 80109a4:	68e0      	ldr	r0, [r4, #12]
 80109a6:	f7ff ff97 	bl	80108d8 <std>
 80109aa:	2301      	movs	r3, #1
 80109ac:	61a3      	str	r3, [r4, #24]
 80109ae:	bd10      	pop	{r4, pc}
 80109b0:	08013f6c 	.word	0x08013f6c
 80109b4:	08010921 	.word	0x08010921

080109b8 <__sfp>:
 80109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ba:	4b1b      	ldr	r3, [pc, #108]	; (8010a28 <__sfp+0x70>)
 80109bc:	681e      	ldr	r6, [r3, #0]
 80109be:	69b3      	ldr	r3, [r6, #24]
 80109c0:	4607      	mov	r7, r0
 80109c2:	b913      	cbnz	r3, 80109ca <__sfp+0x12>
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff ffc7 	bl	8010958 <__sinit>
 80109ca:	3648      	adds	r6, #72	; 0x48
 80109cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109d0:	3b01      	subs	r3, #1
 80109d2:	d503      	bpl.n	80109dc <__sfp+0x24>
 80109d4:	6833      	ldr	r3, [r6, #0]
 80109d6:	b133      	cbz	r3, 80109e6 <__sfp+0x2e>
 80109d8:	6836      	ldr	r6, [r6, #0]
 80109da:	e7f7      	b.n	80109cc <__sfp+0x14>
 80109dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80109e0:	b16d      	cbz	r5, 80109fe <__sfp+0x46>
 80109e2:	3468      	adds	r4, #104	; 0x68
 80109e4:	e7f4      	b.n	80109d0 <__sfp+0x18>
 80109e6:	2104      	movs	r1, #4
 80109e8:	4638      	mov	r0, r7
 80109ea:	f7ff ff9f 	bl	801092c <__sfmoreglue>
 80109ee:	6030      	str	r0, [r6, #0]
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d1f1      	bne.n	80109d8 <__sfp+0x20>
 80109f4:	230c      	movs	r3, #12
 80109f6:	603b      	str	r3, [r7, #0]
 80109f8:	4604      	mov	r4, r0
 80109fa:	4620      	mov	r0, r4
 80109fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109fe:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <__sfp+0x74>)
 8010a00:	6665      	str	r5, [r4, #100]	; 0x64
 8010a02:	e9c4 5500 	strd	r5, r5, [r4]
 8010a06:	60a5      	str	r5, [r4, #8]
 8010a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010a10:	2208      	movs	r2, #8
 8010a12:	4629      	mov	r1, r5
 8010a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a18:	f7fe fa9e 	bl	800ef58 <memset>
 8010a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a24:	e7e9      	b.n	80109fa <__sfp+0x42>
 8010a26:	bf00      	nop
 8010a28:	08013f6c 	.word	0x08013f6c
 8010a2c:	ffff0001 	.word	0xffff0001

08010a30 <_fwalk_reent>:
 8010a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a34:	4680      	mov	r8, r0
 8010a36:	4689      	mov	r9, r1
 8010a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a3c:	2600      	movs	r6, #0
 8010a3e:	b914      	cbnz	r4, 8010a46 <_fwalk_reent+0x16>
 8010a40:	4630      	mov	r0, r6
 8010a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010a4a:	3f01      	subs	r7, #1
 8010a4c:	d501      	bpl.n	8010a52 <_fwalk_reent+0x22>
 8010a4e:	6824      	ldr	r4, [r4, #0]
 8010a50:	e7f5      	b.n	8010a3e <_fwalk_reent+0xe>
 8010a52:	89ab      	ldrh	r3, [r5, #12]
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d907      	bls.n	8010a68 <_fwalk_reent+0x38>
 8010a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	d003      	beq.n	8010a68 <_fwalk_reent+0x38>
 8010a60:	4629      	mov	r1, r5
 8010a62:	4640      	mov	r0, r8
 8010a64:	47c8      	blx	r9
 8010a66:	4306      	orrs	r6, r0
 8010a68:	3568      	adds	r5, #104	; 0x68
 8010a6a:	e7ee      	b.n	8010a4a <_fwalk_reent+0x1a>

08010a6c <_localeconv_r>:
 8010a6c:	4b04      	ldr	r3, [pc, #16]	; (8010a80 <_localeconv_r+0x14>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6a18      	ldr	r0, [r3, #32]
 8010a72:	4b04      	ldr	r3, [pc, #16]	; (8010a84 <_localeconv_r+0x18>)
 8010a74:	2800      	cmp	r0, #0
 8010a76:	bf08      	it	eq
 8010a78:	4618      	moveq	r0, r3
 8010a7a:	30f0      	adds	r0, #240	; 0xf0
 8010a7c:	4770      	bx	lr
 8010a7e:	bf00      	nop
 8010a80:	20001c38 	.word	0x20001c38
 8010a84:	20001c9c 	.word	0x20001c9c

08010a88 <__swhatbuf_r>:
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	460e      	mov	r6, r1
 8010a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a90:	2900      	cmp	r1, #0
 8010a92:	b096      	sub	sp, #88	; 0x58
 8010a94:	4614      	mov	r4, r2
 8010a96:	461d      	mov	r5, r3
 8010a98:	da07      	bge.n	8010aaa <__swhatbuf_r+0x22>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	602b      	str	r3, [r5, #0]
 8010a9e:	89b3      	ldrh	r3, [r6, #12]
 8010aa0:	061a      	lsls	r2, r3, #24
 8010aa2:	d410      	bmi.n	8010ac6 <__swhatbuf_r+0x3e>
 8010aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa8:	e00e      	b.n	8010ac8 <__swhatbuf_r+0x40>
 8010aaa:	466a      	mov	r2, sp
 8010aac:	f000 fdbc 	bl	8011628 <_fstat_r>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	dbf2      	blt.n	8010a9a <__swhatbuf_r+0x12>
 8010ab4:	9a01      	ldr	r2, [sp, #4]
 8010ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010abe:	425a      	negs	r2, r3
 8010ac0:	415a      	adcs	r2, r3
 8010ac2:	602a      	str	r2, [r5, #0]
 8010ac4:	e7ee      	b.n	8010aa4 <__swhatbuf_r+0x1c>
 8010ac6:	2340      	movs	r3, #64	; 0x40
 8010ac8:	2000      	movs	r0, #0
 8010aca:	6023      	str	r3, [r4, #0]
 8010acc:	b016      	add	sp, #88	; 0x58
 8010ace:	bd70      	pop	{r4, r5, r6, pc}

08010ad0 <__smakebuf_r>:
 8010ad0:	898b      	ldrh	r3, [r1, #12]
 8010ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ad4:	079d      	lsls	r5, r3, #30
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	460c      	mov	r4, r1
 8010ada:	d507      	bpl.n	8010aec <__smakebuf_r+0x1c>
 8010adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ae0:	6023      	str	r3, [r4, #0]
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	6163      	str	r3, [r4, #20]
 8010ae8:	b002      	add	sp, #8
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	ab01      	add	r3, sp, #4
 8010aee:	466a      	mov	r2, sp
 8010af0:	f7ff ffca 	bl	8010a88 <__swhatbuf_r>
 8010af4:	9900      	ldr	r1, [sp, #0]
 8010af6:	4605      	mov	r5, r0
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fb73 	bl	80111e4 <_malloc_r>
 8010afe:	b948      	cbnz	r0, 8010b14 <__smakebuf_r+0x44>
 8010b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b04:	059a      	lsls	r2, r3, #22
 8010b06:	d4ef      	bmi.n	8010ae8 <__smakebuf_r+0x18>
 8010b08:	f023 0303 	bic.w	r3, r3, #3
 8010b0c:	f043 0302 	orr.w	r3, r3, #2
 8010b10:	81a3      	strh	r3, [r4, #12]
 8010b12:	e7e3      	b.n	8010adc <__smakebuf_r+0xc>
 8010b14:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <__smakebuf_r+0x7c>)
 8010b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b18:	89a3      	ldrh	r3, [r4, #12]
 8010b1a:	6020      	str	r0, [r4, #0]
 8010b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b20:	81a3      	strh	r3, [r4, #12]
 8010b22:	9b00      	ldr	r3, [sp, #0]
 8010b24:	6163      	str	r3, [r4, #20]
 8010b26:	9b01      	ldr	r3, [sp, #4]
 8010b28:	6120      	str	r0, [r4, #16]
 8010b2a:	b15b      	cbz	r3, 8010b44 <__smakebuf_r+0x74>
 8010b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b30:	4630      	mov	r0, r6
 8010b32:	f000 fd8b 	bl	801164c <_isatty_r>
 8010b36:	b128      	cbz	r0, 8010b44 <__smakebuf_r+0x74>
 8010b38:	89a3      	ldrh	r3, [r4, #12]
 8010b3a:	f023 0303 	bic.w	r3, r3, #3
 8010b3e:	f043 0301 	orr.w	r3, r3, #1
 8010b42:	81a3      	strh	r3, [r4, #12]
 8010b44:	89a3      	ldrh	r3, [r4, #12]
 8010b46:	431d      	orrs	r5, r3
 8010b48:	81a5      	strh	r5, [r4, #12]
 8010b4a:	e7cd      	b.n	8010ae8 <__smakebuf_r+0x18>
 8010b4c:	08010921 	.word	0x08010921

08010b50 <malloc>:
 8010b50:	4b02      	ldr	r3, [pc, #8]	; (8010b5c <malloc+0xc>)
 8010b52:	4601      	mov	r1, r0
 8010b54:	6818      	ldr	r0, [r3, #0]
 8010b56:	f000 bb45 	b.w	80111e4 <_malloc_r>
 8010b5a:	bf00      	nop
 8010b5c:	20001c38 	.word	0x20001c38

08010b60 <memcpy>:
 8010b60:	b510      	push	{r4, lr}
 8010b62:	1e43      	subs	r3, r0, #1
 8010b64:	440a      	add	r2, r1
 8010b66:	4291      	cmp	r1, r2
 8010b68:	d100      	bne.n	8010b6c <memcpy+0xc>
 8010b6a:	bd10      	pop	{r4, pc}
 8010b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b74:	e7f7      	b.n	8010b66 <memcpy+0x6>

08010b76 <_Balloc>:
 8010b76:	b570      	push	{r4, r5, r6, lr}
 8010b78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	460e      	mov	r6, r1
 8010b7e:	b93d      	cbnz	r5, 8010b90 <_Balloc+0x1a>
 8010b80:	2010      	movs	r0, #16
 8010b82:	f7ff ffe5 	bl	8010b50 <malloc>
 8010b86:	6260      	str	r0, [r4, #36]	; 0x24
 8010b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b8c:	6005      	str	r5, [r0, #0]
 8010b8e:	60c5      	str	r5, [r0, #12]
 8010b90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010b92:	68eb      	ldr	r3, [r5, #12]
 8010b94:	b183      	cbz	r3, 8010bb8 <_Balloc+0x42>
 8010b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010b9e:	b9b8      	cbnz	r0, 8010bd0 <_Balloc+0x5a>
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	fa01 f506 	lsl.w	r5, r1, r6
 8010ba6:	1d6a      	adds	r2, r5, #5
 8010ba8:	0092      	lsls	r2, r2, #2
 8010baa:	4620      	mov	r0, r4
 8010bac:	f000 fabe 	bl	801112c <_calloc_r>
 8010bb0:	b160      	cbz	r0, 8010bcc <_Balloc+0x56>
 8010bb2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010bb6:	e00e      	b.n	8010bd6 <_Balloc+0x60>
 8010bb8:	2221      	movs	r2, #33	; 0x21
 8010bba:	2104      	movs	r1, #4
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f000 fab5 	bl	801112c <_calloc_r>
 8010bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bc4:	60e8      	str	r0, [r5, #12]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d1e4      	bne.n	8010b96 <_Balloc+0x20>
 8010bcc:	2000      	movs	r0, #0
 8010bce:	bd70      	pop	{r4, r5, r6, pc}
 8010bd0:	6802      	ldr	r2, [r0, #0]
 8010bd2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bdc:	e7f7      	b.n	8010bce <_Balloc+0x58>

08010bde <_Bfree>:
 8010bde:	b570      	push	{r4, r5, r6, lr}
 8010be0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010be2:	4606      	mov	r6, r0
 8010be4:	460d      	mov	r5, r1
 8010be6:	b93c      	cbnz	r4, 8010bf8 <_Bfree+0x1a>
 8010be8:	2010      	movs	r0, #16
 8010bea:	f7ff ffb1 	bl	8010b50 <malloc>
 8010bee:	6270      	str	r0, [r6, #36]	; 0x24
 8010bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bf4:	6004      	str	r4, [r0, #0]
 8010bf6:	60c4      	str	r4, [r0, #12]
 8010bf8:	b13d      	cbz	r5, 8010c0a <_Bfree+0x2c>
 8010bfa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010bfc:	686a      	ldr	r2, [r5, #4]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c04:	6029      	str	r1, [r5, #0]
 8010c06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010c0a:	bd70      	pop	{r4, r5, r6, pc}

08010c0c <__multadd>:
 8010c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c10:	690d      	ldr	r5, [r1, #16]
 8010c12:	461f      	mov	r7, r3
 8010c14:	4606      	mov	r6, r0
 8010c16:	460c      	mov	r4, r1
 8010c18:	f101 0c14 	add.w	ip, r1, #20
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f8dc 0000 	ldr.w	r0, [ip]
 8010c22:	b281      	uxth	r1, r0
 8010c24:	fb02 7101 	mla	r1, r2, r1, r7
 8010c28:	0c0f      	lsrs	r7, r1, #16
 8010c2a:	0c00      	lsrs	r0, r0, #16
 8010c2c:	fb02 7000 	mla	r0, r2, r0, r7
 8010c30:	b289      	uxth	r1, r1
 8010c32:	3301      	adds	r3, #1
 8010c34:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010c38:	429d      	cmp	r5, r3
 8010c3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8010c42:	dcec      	bgt.n	8010c1e <__multadd+0x12>
 8010c44:	b1d7      	cbz	r7, 8010c7c <__multadd+0x70>
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	dc12      	bgt.n	8010c72 <__multadd+0x66>
 8010c4c:	6861      	ldr	r1, [r4, #4]
 8010c4e:	4630      	mov	r0, r6
 8010c50:	3101      	adds	r1, #1
 8010c52:	f7ff ff90 	bl	8010b76 <_Balloc>
 8010c56:	6922      	ldr	r2, [r4, #16]
 8010c58:	3202      	adds	r2, #2
 8010c5a:	f104 010c 	add.w	r1, r4, #12
 8010c5e:	4680      	mov	r8, r0
 8010c60:	0092      	lsls	r2, r2, #2
 8010c62:	300c      	adds	r0, #12
 8010c64:	f7ff ff7c 	bl	8010b60 <memcpy>
 8010c68:	4621      	mov	r1, r4
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ff ffb7 	bl	8010bde <_Bfree>
 8010c70:	4644      	mov	r4, r8
 8010c72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c76:	3501      	adds	r5, #1
 8010c78:	615f      	str	r7, [r3, #20]
 8010c7a:	6125      	str	r5, [r4, #16]
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c82 <__hi0bits>:
 8010c82:	0c02      	lsrs	r2, r0, #16
 8010c84:	0412      	lsls	r2, r2, #16
 8010c86:	4603      	mov	r3, r0
 8010c88:	b9b2      	cbnz	r2, 8010cb8 <__hi0bits+0x36>
 8010c8a:	0403      	lsls	r3, r0, #16
 8010c8c:	2010      	movs	r0, #16
 8010c8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010c92:	bf04      	itt	eq
 8010c94:	021b      	lsleq	r3, r3, #8
 8010c96:	3008      	addeq	r0, #8
 8010c98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010c9c:	bf04      	itt	eq
 8010c9e:	011b      	lsleq	r3, r3, #4
 8010ca0:	3004      	addeq	r0, #4
 8010ca2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010ca6:	bf04      	itt	eq
 8010ca8:	009b      	lsleq	r3, r3, #2
 8010caa:	3002      	addeq	r0, #2
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	db06      	blt.n	8010cbe <__hi0bits+0x3c>
 8010cb0:	005b      	lsls	r3, r3, #1
 8010cb2:	d503      	bpl.n	8010cbc <__hi0bits+0x3a>
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	4770      	bx	lr
 8010cb8:	2000      	movs	r0, #0
 8010cba:	e7e8      	b.n	8010c8e <__hi0bits+0xc>
 8010cbc:	2020      	movs	r0, #32
 8010cbe:	4770      	bx	lr

08010cc0 <__lo0bits>:
 8010cc0:	6803      	ldr	r3, [r0, #0]
 8010cc2:	f013 0207 	ands.w	r2, r3, #7
 8010cc6:	4601      	mov	r1, r0
 8010cc8:	d00b      	beq.n	8010ce2 <__lo0bits+0x22>
 8010cca:	07da      	lsls	r2, r3, #31
 8010ccc:	d423      	bmi.n	8010d16 <__lo0bits+0x56>
 8010cce:	0798      	lsls	r0, r3, #30
 8010cd0:	bf49      	itett	mi
 8010cd2:	085b      	lsrmi	r3, r3, #1
 8010cd4:	089b      	lsrpl	r3, r3, #2
 8010cd6:	2001      	movmi	r0, #1
 8010cd8:	600b      	strmi	r3, [r1, #0]
 8010cda:	bf5c      	itt	pl
 8010cdc:	600b      	strpl	r3, [r1, #0]
 8010cde:	2002      	movpl	r0, #2
 8010ce0:	4770      	bx	lr
 8010ce2:	b298      	uxth	r0, r3
 8010ce4:	b9a8      	cbnz	r0, 8010d12 <__lo0bits+0x52>
 8010ce6:	0c1b      	lsrs	r3, r3, #16
 8010ce8:	2010      	movs	r0, #16
 8010cea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010cee:	bf04      	itt	eq
 8010cf0:	0a1b      	lsreq	r3, r3, #8
 8010cf2:	3008      	addeq	r0, #8
 8010cf4:	071a      	lsls	r2, r3, #28
 8010cf6:	bf04      	itt	eq
 8010cf8:	091b      	lsreq	r3, r3, #4
 8010cfa:	3004      	addeq	r0, #4
 8010cfc:	079a      	lsls	r2, r3, #30
 8010cfe:	bf04      	itt	eq
 8010d00:	089b      	lsreq	r3, r3, #2
 8010d02:	3002      	addeq	r0, #2
 8010d04:	07da      	lsls	r2, r3, #31
 8010d06:	d402      	bmi.n	8010d0e <__lo0bits+0x4e>
 8010d08:	085b      	lsrs	r3, r3, #1
 8010d0a:	d006      	beq.n	8010d1a <__lo0bits+0x5a>
 8010d0c:	3001      	adds	r0, #1
 8010d0e:	600b      	str	r3, [r1, #0]
 8010d10:	4770      	bx	lr
 8010d12:	4610      	mov	r0, r2
 8010d14:	e7e9      	b.n	8010cea <__lo0bits+0x2a>
 8010d16:	2000      	movs	r0, #0
 8010d18:	4770      	bx	lr
 8010d1a:	2020      	movs	r0, #32
 8010d1c:	4770      	bx	lr

08010d1e <__i2b>:
 8010d1e:	b510      	push	{r4, lr}
 8010d20:	460c      	mov	r4, r1
 8010d22:	2101      	movs	r1, #1
 8010d24:	f7ff ff27 	bl	8010b76 <_Balloc>
 8010d28:	2201      	movs	r2, #1
 8010d2a:	6144      	str	r4, [r0, #20]
 8010d2c:	6102      	str	r2, [r0, #16]
 8010d2e:	bd10      	pop	{r4, pc}

08010d30 <__multiply>:
 8010d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	4614      	mov	r4, r2
 8010d36:	690a      	ldr	r2, [r1, #16]
 8010d38:	6923      	ldr	r3, [r4, #16]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	bfb8      	it	lt
 8010d3e:	460b      	movlt	r3, r1
 8010d40:	4688      	mov	r8, r1
 8010d42:	bfbc      	itt	lt
 8010d44:	46a0      	movlt	r8, r4
 8010d46:	461c      	movlt	r4, r3
 8010d48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010d4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010d50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010d58:	eb07 0609 	add.w	r6, r7, r9
 8010d5c:	42b3      	cmp	r3, r6
 8010d5e:	bfb8      	it	lt
 8010d60:	3101      	addlt	r1, #1
 8010d62:	f7ff ff08 	bl	8010b76 <_Balloc>
 8010d66:	f100 0514 	add.w	r5, r0, #20
 8010d6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010d6e:	462b      	mov	r3, r5
 8010d70:	2200      	movs	r2, #0
 8010d72:	4573      	cmp	r3, lr
 8010d74:	d316      	bcc.n	8010da4 <__multiply+0x74>
 8010d76:	f104 0214 	add.w	r2, r4, #20
 8010d7a:	f108 0114 	add.w	r1, r8, #20
 8010d7e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010d82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	9b00      	ldr	r3, [sp, #0]
 8010d8a:	9201      	str	r2, [sp, #4]
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d80c      	bhi.n	8010daa <__multiply+0x7a>
 8010d90:	2e00      	cmp	r6, #0
 8010d92:	dd03      	ble.n	8010d9c <__multiply+0x6c>
 8010d94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d05d      	beq.n	8010e58 <__multiply+0x128>
 8010d9c:	6106      	str	r6, [r0, #16]
 8010d9e:	b003      	add	sp, #12
 8010da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da4:	f843 2b04 	str.w	r2, [r3], #4
 8010da8:	e7e3      	b.n	8010d72 <__multiply+0x42>
 8010daa:	f8b2 b000 	ldrh.w	fp, [r2]
 8010dae:	f1bb 0f00 	cmp.w	fp, #0
 8010db2:	d023      	beq.n	8010dfc <__multiply+0xcc>
 8010db4:	4689      	mov	r9, r1
 8010db6:	46ac      	mov	ip, r5
 8010db8:	f04f 0800 	mov.w	r8, #0
 8010dbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8010dc0:	f8dc a000 	ldr.w	sl, [ip]
 8010dc4:	b2a3      	uxth	r3, r4
 8010dc6:	fa1f fa8a 	uxth.w	sl, sl
 8010dca:	fb0b a303 	mla	r3, fp, r3, sl
 8010dce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010dd2:	f8dc 4000 	ldr.w	r4, [ip]
 8010dd6:	4443      	add	r3, r8
 8010dd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010ddc:	fb0b 840a 	mla	r4, fp, sl, r8
 8010de0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010de4:	46e2      	mov	sl, ip
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010dec:	454f      	cmp	r7, r9
 8010dee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010df2:	f84a 3b04 	str.w	r3, [sl], #4
 8010df6:	d82b      	bhi.n	8010e50 <__multiply+0x120>
 8010df8:	f8cc 8004 	str.w	r8, [ip, #4]
 8010dfc:	9b01      	ldr	r3, [sp, #4]
 8010dfe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010e02:	3204      	adds	r2, #4
 8010e04:	f1ba 0f00 	cmp.w	sl, #0
 8010e08:	d020      	beq.n	8010e4c <__multiply+0x11c>
 8010e0a:	682b      	ldr	r3, [r5, #0]
 8010e0c:	4689      	mov	r9, r1
 8010e0e:	46a8      	mov	r8, r5
 8010e10:	f04f 0b00 	mov.w	fp, #0
 8010e14:	f8b9 c000 	ldrh.w	ip, [r9]
 8010e18:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010e1c:	fb0a 440c 	mla	r4, sl, ip, r4
 8010e20:	445c      	add	r4, fp
 8010e22:	46c4      	mov	ip, r8
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010e2a:	f84c 3b04 	str.w	r3, [ip], #4
 8010e2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e32:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010e36:	0c1b      	lsrs	r3, r3, #16
 8010e38:	fb0a b303 	mla	r3, sl, r3, fp
 8010e3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010e40:	454f      	cmp	r7, r9
 8010e42:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010e46:	d805      	bhi.n	8010e54 <__multiply+0x124>
 8010e48:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e4c:	3504      	adds	r5, #4
 8010e4e:	e79b      	b.n	8010d88 <__multiply+0x58>
 8010e50:	46d4      	mov	ip, sl
 8010e52:	e7b3      	b.n	8010dbc <__multiply+0x8c>
 8010e54:	46e0      	mov	r8, ip
 8010e56:	e7dd      	b.n	8010e14 <__multiply+0xe4>
 8010e58:	3e01      	subs	r6, #1
 8010e5a:	e799      	b.n	8010d90 <__multiply+0x60>

08010e5c <__pow5mult>:
 8010e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e60:	4615      	mov	r5, r2
 8010e62:	f012 0203 	ands.w	r2, r2, #3
 8010e66:	4606      	mov	r6, r0
 8010e68:	460f      	mov	r7, r1
 8010e6a:	d007      	beq.n	8010e7c <__pow5mult+0x20>
 8010e6c:	3a01      	subs	r2, #1
 8010e6e:	4c21      	ldr	r4, [pc, #132]	; (8010ef4 <__pow5mult+0x98>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e76:	f7ff fec9 	bl	8010c0c <__multadd>
 8010e7a:	4607      	mov	r7, r0
 8010e7c:	10ad      	asrs	r5, r5, #2
 8010e7e:	d035      	beq.n	8010eec <__pow5mult+0x90>
 8010e80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e82:	b93c      	cbnz	r4, 8010e94 <__pow5mult+0x38>
 8010e84:	2010      	movs	r0, #16
 8010e86:	f7ff fe63 	bl	8010b50 <malloc>
 8010e8a:	6270      	str	r0, [r6, #36]	; 0x24
 8010e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e90:	6004      	str	r4, [r0, #0]
 8010e92:	60c4      	str	r4, [r0, #12]
 8010e94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e9c:	b94c      	cbnz	r4, 8010eb2 <__pow5mult+0x56>
 8010e9e:	f240 2171 	movw	r1, #625	; 0x271
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	f7ff ff3b 	bl	8010d1e <__i2b>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010eae:	4604      	mov	r4, r0
 8010eb0:	6003      	str	r3, [r0, #0]
 8010eb2:	f04f 0800 	mov.w	r8, #0
 8010eb6:	07eb      	lsls	r3, r5, #31
 8010eb8:	d50a      	bpl.n	8010ed0 <__pow5mult+0x74>
 8010eba:	4639      	mov	r1, r7
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f7ff ff36 	bl	8010d30 <__multiply>
 8010ec4:	4639      	mov	r1, r7
 8010ec6:	4681      	mov	r9, r0
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f7ff fe88 	bl	8010bde <_Bfree>
 8010ece:	464f      	mov	r7, r9
 8010ed0:	106d      	asrs	r5, r5, #1
 8010ed2:	d00b      	beq.n	8010eec <__pow5mult+0x90>
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	b938      	cbnz	r0, 8010ee8 <__pow5mult+0x8c>
 8010ed8:	4622      	mov	r2, r4
 8010eda:	4621      	mov	r1, r4
 8010edc:	4630      	mov	r0, r6
 8010ede:	f7ff ff27 	bl	8010d30 <__multiply>
 8010ee2:	6020      	str	r0, [r4, #0]
 8010ee4:	f8c0 8000 	str.w	r8, [r0]
 8010ee8:	4604      	mov	r4, r0
 8010eea:	e7e4      	b.n	8010eb6 <__pow5mult+0x5a>
 8010eec:	4638      	mov	r0, r7
 8010eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08014100 	.word	0x08014100

08010ef8 <__lshift>:
 8010ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efc:	460c      	mov	r4, r1
 8010efe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	6849      	ldr	r1, [r1, #4]
 8010f06:	eb0a 0903 	add.w	r9, sl, r3
 8010f0a:	68a3      	ldr	r3, [r4, #8]
 8010f0c:	4607      	mov	r7, r0
 8010f0e:	4616      	mov	r6, r2
 8010f10:	f109 0501 	add.w	r5, r9, #1
 8010f14:	42ab      	cmp	r3, r5
 8010f16:	db32      	blt.n	8010f7e <__lshift+0x86>
 8010f18:	4638      	mov	r0, r7
 8010f1a:	f7ff fe2c 	bl	8010b76 <_Balloc>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	4680      	mov	r8, r0
 8010f22:	f100 0114 	add.w	r1, r0, #20
 8010f26:	461a      	mov	r2, r3
 8010f28:	4553      	cmp	r3, sl
 8010f2a:	db2b      	blt.n	8010f84 <__lshift+0x8c>
 8010f2c:	6920      	ldr	r0, [r4, #16]
 8010f2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f32:	f104 0314 	add.w	r3, r4, #20
 8010f36:	f016 021f 	ands.w	r2, r6, #31
 8010f3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f42:	d025      	beq.n	8010f90 <__lshift+0x98>
 8010f44:	f1c2 0e20 	rsb	lr, r2, #32
 8010f48:	2000      	movs	r0, #0
 8010f4a:	681e      	ldr	r6, [r3, #0]
 8010f4c:	468a      	mov	sl, r1
 8010f4e:	4096      	lsls	r6, r2
 8010f50:	4330      	orrs	r0, r6
 8010f52:	f84a 0b04 	str.w	r0, [sl], #4
 8010f56:	f853 0b04 	ldr.w	r0, [r3], #4
 8010f5a:	459c      	cmp	ip, r3
 8010f5c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010f60:	d814      	bhi.n	8010f8c <__lshift+0x94>
 8010f62:	6048      	str	r0, [r1, #4]
 8010f64:	b108      	cbz	r0, 8010f6a <__lshift+0x72>
 8010f66:	f109 0502 	add.w	r5, r9, #2
 8010f6a:	3d01      	subs	r5, #1
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010f72:	4621      	mov	r1, r4
 8010f74:	f7ff fe33 	bl	8010bde <_Bfree>
 8010f78:	4640      	mov	r0, r8
 8010f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f7e:	3101      	adds	r1, #1
 8010f80:	005b      	lsls	r3, r3, #1
 8010f82:	e7c7      	b.n	8010f14 <__lshift+0x1c>
 8010f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	e7cd      	b.n	8010f28 <__lshift+0x30>
 8010f8c:	4651      	mov	r1, sl
 8010f8e:	e7dc      	b.n	8010f4a <__lshift+0x52>
 8010f90:	3904      	subs	r1, #4
 8010f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f9a:	459c      	cmp	ip, r3
 8010f9c:	d8f9      	bhi.n	8010f92 <__lshift+0x9a>
 8010f9e:	e7e4      	b.n	8010f6a <__lshift+0x72>

08010fa0 <__mcmp>:
 8010fa0:	6903      	ldr	r3, [r0, #16]
 8010fa2:	690a      	ldr	r2, [r1, #16]
 8010fa4:	1a9b      	subs	r3, r3, r2
 8010fa6:	b530      	push	{r4, r5, lr}
 8010fa8:	d10c      	bne.n	8010fc4 <__mcmp+0x24>
 8010faa:	0092      	lsls	r2, r2, #2
 8010fac:	3014      	adds	r0, #20
 8010fae:	3114      	adds	r1, #20
 8010fb0:	1884      	adds	r4, r0, r2
 8010fb2:	4411      	add	r1, r2
 8010fb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010fb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fbc:	4295      	cmp	r5, r2
 8010fbe:	d003      	beq.n	8010fc8 <__mcmp+0x28>
 8010fc0:	d305      	bcc.n	8010fce <__mcmp+0x2e>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	bd30      	pop	{r4, r5, pc}
 8010fc8:	42a0      	cmp	r0, r4
 8010fca:	d3f3      	bcc.n	8010fb4 <__mcmp+0x14>
 8010fcc:	e7fa      	b.n	8010fc4 <__mcmp+0x24>
 8010fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fd2:	e7f7      	b.n	8010fc4 <__mcmp+0x24>

08010fd4 <__mdiff>:
 8010fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	460d      	mov	r5, r1
 8010fda:	4607      	mov	r7, r0
 8010fdc:	4611      	mov	r1, r2
 8010fde:	4628      	mov	r0, r5
 8010fe0:	4614      	mov	r4, r2
 8010fe2:	f7ff ffdd 	bl	8010fa0 <__mcmp>
 8010fe6:	1e06      	subs	r6, r0, #0
 8010fe8:	d108      	bne.n	8010ffc <__mdiff+0x28>
 8010fea:	4631      	mov	r1, r6
 8010fec:	4638      	mov	r0, r7
 8010fee:	f7ff fdc2 	bl	8010b76 <_Balloc>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffc:	bfa4      	itt	ge
 8010ffe:	4623      	movge	r3, r4
 8011000:	462c      	movge	r4, r5
 8011002:	4638      	mov	r0, r7
 8011004:	6861      	ldr	r1, [r4, #4]
 8011006:	bfa6      	itte	ge
 8011008:	461d      	movge	r5, r3
 801100a:	2600      	movge	r6, #0
 801100c:	2601      	movlt	r6, #1
 801100e:	f7ff fdb2 	bl	8010b76 <_Balloc>
 8011012:	692b      	ldr	r3, [r5, #16]
 8011014:	60c6      	str	r6, [r0, #12]
 8011016:	6926      	ldr	r6, [r4, #16]
 8011018:	f105 0914 	add.w	r9, r5, #20
 801101c:	f104 0214 	add.w	r2, r4, #20
 8011020:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011024:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011028:	f100 0514 	add.w	r5, r0, #20
 801102c:	f04f 0e00 	mov.w	lr, #0
 8011030:	f852 ab04 	ldr.w	sl, [r2], #4
 8011034:	f859 4b04 	ldr.w	r4, [r9], #4
 8011038:	fa1e f18a 	uxtah	r1, lr, sl
 801103c:	b2a3      	uxth	r3, r4
 801103e:	1ac9      	subs	r1, r1, r3
 8011040:	0c23      	lsrs	r3, r4, #16
 8011042:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011046:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801104a:	b289      	uxth	r1, r1
 801104c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011050:	45c8      	cmp	r8, r9
 8011052:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011056:	4694      	mov	ip, r2
 8011058:	f845 3b04 	str.w	r3, [r5], #4
 801105c:	d8e8      	bhi.n	8011030 <__mdiff+0x5c>
 801105e:	45bc      	cmp	ip, r7
 8011060:	d304      	bcc.n	801106c <__mdiff+0x98>
 8011062:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011066:	b183      	cbz	r3, 801108a <__mdiff+0xb6>
 8011068:	6106      	str	r6, [r0, #16]
 801106a:	e7c5      	b.n	8010ff8 <__mdiff+0x24>
 801106c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011070:	fa1e f381 	uxtah	r3, lr, r1
 8011074:	141a      	asrs	r2, r3, #16
 8011076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801107a:	b29b      	uxth	r3, r3
 801107c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011080:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011084:	f845 3b04 	str.w	r3, [r5], #4
 8011088:	e7e9      	b.n	801105e <__mdiff+0x8a>
 801108a:	3e01      	subs	r6, #1
 801108c:	e7e9      	b.n	8011062 <__mdiff+0x8e>

0801108e <__d2b>:
 801108e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011092:	460e      	mov	r6, r1
 8011094:	2101      	movs	r1, #1
 8011096:	ec59 8b10 	vmov	r8, r9, d0
 801109a:	4615      	mov	r5, r2
 801109c:	f7ff fd6b 	bl	8010b76 <_Balloc>
 80110a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80110a4:	4607      	mov	r7, r0
 80110a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110aa:	bb34      	cbnz	r4, 80110fa <__d2b+0x6c>
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	f1b8 0300 	subs.w	r3, r8, #0
 80110b2:	d027      	beq.n	8011104 <__d2b+0x76>
 80110b4:	a802      	add	r0, sp, #8
 80110b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80110ba:	f7ff fe01 	bl	8010cc0 <__lo0bits>
 80110be:	9900      	ldr	r1, [sp, #0]
 80110c0:	b1f0      	cbz	r0, 8011100 <__d2b+0x72>
 80110c2:	9a01      	ldr	r2, [sp, #4]
 80110c4:	f1c0 0320 	rsb	r3, r0, #32
 80110c8:	fa02 f303 	lsl.w	r3, r2, r3
 80110cc:	430b      	orrs	r3, r1
 80110ce:	40c2      	lsrs	r2, r0
 80110d0:	617b      	str	r3, [r7, #20]
 80110d2:	9201      	str	r2, [sp, #4]
 80110d4:	9b01      	ldr	r3, [sp, #4]
 80110d6:	61bb      	str	r3, [r7, #24]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	bf14      	ite	ne
 80110dc:	2102      	movne	r1, #2
 80110de:	2101      	moveq	r1, #1
 80110e0:	6139      	str	r1, [r7, #16]
 80110e2:	b1c4      	cbz	r4, 8011116 <__d2b+0x88>
 80110e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80110e8:	4404      	add	r4, r0
 80110ea:	6034      	str	r4, [r6, #0]
 80110ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110f0:	6028      	str	r0, [r5, #0]
 80110f2:	4638      	mov	r0, r7
 80110f4:	b003      	add	sp, #12
 80110f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110fe:	e7d5      	b.n	80110ac <__d2b+0x1e>
 8011100:	6179      	str	r1, [r7, #20]
 8011102:	e7e7      	b.n	80110d4 <__d2b+0x46>
 8011104:	a801      	add	r0, sp, #4
 8011106:	f7ff fddb 	bl	8010cc0 <__lo0bits>
 801110a:	9b01      	ldr	r3, [sp, #4]
 801110c:	617b      	str	r3, [r7, #20]
 801110e:	2101      	movs	r1, #1
 8011110:	6139      	str	r1, [r7, #16]
 8011112:	3020      	adds	r0, #32
 8011114:	e7e5      	b.n	80110e2 <__d2b+0x54>
 8011116:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801111a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801111e:	6030      	str	r0, [r6, #0]
 8011120:	6918      	ldr	r0, [r3, #16]
 8011122:	f7ff fdae 	bl	8010c82 <__hi0bits>
 8011126:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801112a:	e7e1      	b.n	80110f0 <__d2b+0x62>

0801112c <_calloc_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	fb02 f401 	mul.w	r4, r2, r1
 8011132:	4621      	mov	r1, r4
 8011134:	f000 f856 	bl	80111e4 <_malloc_r>
 8011138:	4605      	mov	r5, r0
 801113a:	b118      	cbz	r0, 8011144 <_calloc_r+0x18>
 801113c:	4622      	mov	r2, r4
 801113e:	2100      	movs	r1, #0
 8011140:	f7fd ff0a 	bl	800ef58 <memset>
 8011144:	4628      	mov	r0, r5
 8011146:	bd38      	pop	{r3, r4, r5, pc}

08011148 <_free_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4605      	mov	r5, r0
 801114c:	2900      	cmp	r1, #0
 801114e:	d045      	beq.n	80111dc <_free_r+0x94>
 8011150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011154:	1f0c      	subs	r4, r1, #4
 8011156:	2b00      	cmp	r3, #0
 8011158:	bfb8      	it	lt
 801115a:	18e4      	addlt	r4, r4, r3
 801115c:	f000 fac3 	bl	80116e6 <__malloc_lock>
 8011160:	4a1f      	ldr	r2, [pc, #124]	; (80111e0 <_free_r+0x98>)
 8011162:	6813      	ldr	r3, [r2, #0]
 8011164:	4610      	mov	r0, r2
 8011166:	b933      	cbnz	r3, 8011176 <_free_r+0x2e>
 8011168:	6063      	str	r3, [r4, #4]
 801116a:	6014      	str	r4, [r2, #0]
 801116c:	4628      	mov	r0, r5
 801116e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011172:	f000 bab9 	b.w	80116e8 <__malloc_unlock>
 8011176:	42a3      	cmp	r3, r4
 8011178:	d90c      	bls.n	8011194 <_free_r+0x4c>
 801117a:	6821      	ldr	r1, [r4, #0]
 801117c:	1862      	adds	r2, r4, r1
 801117e:	4293      	cmp	r3, r2
 8011180:	bf04      	itt	eq
 8011182:	681a      	ldreq	r2, [r3, #0]
 8011184:	685b      	ldreq	r3, [r3, #4]
 8011186:	6063      	str	r3, [r4, #4]
 8011188:	bf04      	itt	eq
 801118a:	1852      	addeq	r2, r2, r1
 801118c:	6022      	streq	r2, [r4, #0]
 801118e:	6004      	str	r4, [r0, #0]
 8011190:	e7ec      	b.n	801116c <_free_r+0x24>
 8011192:	4613      	mov	r3, r2
 8011194:	685a      	ldr	r2, [r3, #4]
 8011196:	b10a      	cbz	r2, 801119c <_free_r+0x54>
 8011198:	42a2      	cmp	r2, r4
 801119a:	d9fa      	bls.n	8011192 <_free_r+0x4a>
 801119c:	6819      	ldr	r1, [r3, #0]
 801119e:	1858      	adds	r0, r3, r1
 80111a0:	42a0      	cmp	r0, r4
 80111a2:	d10b      	bne.n	80111bc <_free_r+0x74>
 80111a4:	6820      	ldr	r0, [r4, #0]
 80111a6:	4401      	add	r1, r0
 80111a8:	1858      	adds	r0, r3, r1
 80111aa:	4282      	cmp	r2, r0
 80111ac:	6019      	str	r1, [r3, #0]
 80111ae:	d1dd      	bne.n	801116c <_free_r+0x24>
 80111b0:	6810      	ldr	r0, [r2, #0]
 80111b2:	6852      	ldr	r2, [r2, #4]
 80111b4:	605a      	str	r2, [r3, #4]
 80111b6:	4401      	add	r1, r0
 80111b8:	6019      	str	r1, [r3, #0]
 80111ba:	e7d7      	b.n	801116c <_free_r+0x24>
 80111bc:	d902      	bls.n	80111c4 <_free_r+0x7c>
 80111be:	230c      	movs	r3, #12
 80111c0:	602b      	str	r3, [r5, #0]
 80111c2:	e7d3      	b.n	801116c <_free_r+0x24>
 80111c4:	6820      	ldr	r0, [r4, #0]
 80111c6:	1821      	adds	r1, r4, r0
 80111c8:	428a      	cmp	r2, r1
 80111ca:	bf04      	itt	eq
 80111cc:	6811      	ldreq	r1, [r2, #0]
 80111ce:	6852      	ldreq	r2, [r2, #4]
 80111d0:	6062      	str	r2, [r4, #4]
 80111d2:	bf04      	itt	eq
 80111d4:	1809      	addeq	r1, r1, r0
 80111d6:	6021      	streq	r1, [r4, #0]
 80111d8:	605c      	str	r4, [r3, #4]
 80111da:	e7c7      	b.n	801116c <_free_r+0x24>
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	bf00      	nop
 80111e0:	20001ea4 	.word	0x20001ea4

080111e4 <_malloc_r>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	1ccd      	adds	r5, r1, #3
 80111e8:	f025 0503 	bic.w	r5, r5, #3
 80111ec:	3508      	adds	r5, #8
 80111ee:	2d0c      	cmp	r5, #12
 80111f0:	bf38      	it	cc
 80111f2:	250c      	movcc	r5, #12
 80111f4:	2d00      	cmp	r5, #0
 80111f6:	4606      	mov	r6, r0
 80111f8:	db01      	blt.n	80111fe <_malloc_r+0x1a>
 80111fa:	42a9      	cmp	r1, r5
 80111fc:	d903      	bls.n	8011206 <_malloc_r+0x22>
 80111fe:	230c      	movs	r3, #12
 8011200:	6033      	str	r3, [r6, #0]
 8011202:	2000      	movs	r0, #0
 8011204:	bd70      	pop	{r4, r5, r6, pc}
 8011206:	f000 fa6e 	bl	80116e6 <__malloc_lock>
 801120a:	4a21      	ldr	r2, [pc, #132]	; (8011290 <_malloc_r+0xac>)
 801120c:	6814      	ldr	r4, [r2, #0]
 801120e:	4621      	mov	r1, r4
 8011210:	b991      	cbnz	r1, 8011238 <_malloc_r+0x54>
 8011212:	4c20      	ldr	r4, [pc, #128]	; (8011294 <_malloc_r+0xb0>)
 8011214:	6823      	ldr	r3, [r4, #0]
 8011216:	b91b      	cbnz	r3, 8011220 <_malloc_r+0x3c>
 8011218:	4630      	mov	r0, r6
 801121a:	f000 f98f 	bl	801153c <_sbrk_r>
 801121e:	6020      	str	r0, [r4, #0]
 8011220:	4629      	mov	r1, r5
 8011222:	4630      	mov	r0, r6
 8011224:	f000 f98a 	bl	801153c <_sbrk_r>
 8011228:	1c43      	adds	r3, r0, #1
 801122a:	d124      	bne.n	8011276 <_malloc_r+0x92>
 801122c:	230c      	movs	r3, #12
 801122e:	6033      	str	r3, [r6, #0]
 8011230:	4630      	mov	r0, r6
 8011232:	f000 fa59 	bl	80116e8 <__malloc_unlock>
 8011236:	e7e4      	b.n	8011202 <_malloc_r+0x1e>
 8011238:	680b      	ldr	r3, [r1, #0]
 801123a:	1b5b      	subs	r3, r3, r5
 801123c:	d418      	bmi.n	8011270 <_malloc_r+0x8c>
 801123e:	2b0b      	cmp	r3, #11
 8011240:	d90f      	bls.n	8011262 <_malloc_r+0x7e>
 8011242:	600b      	str	r3, [r1, #0]
 8011244:	50cd      	str	r5, [r1, r3]
 8011246:	18cc      	adds	r4, r1, r3
 8011248:	4630      	mov	r0, r6
 801124a:	f000 fa4d 	bl	80116e8 <__malloc_unlock>
 801124e:	f104 000b 	add.w	r0, r4, #11
 8011252:	1d23      	adds	r3, r4, #4
 8011254:	f020 0007 	bic.w	r0, r0, #7
 8011258:	1ac3      	subs	r3, r0, r3
 801125a:	d0d3      	beq.n	8011204 <_malloc_r+0x20>
 801125c:	425a      	negs	r2, r3
 801125e:	50e2      	str	r2, [r4, r3]
 8011260:	e7d0      	b.n	8011204 <_malloc_r+0x20>
 8011262:	428c      	cmp	r4, r1
 8011264:	684b      	ldr	r3, [r1, #4]
 8011266:	bf16      	itet	ne
 8011268:	6063      	strne	r3, [r4, #4]
 801126a:	6013      	streq	r3, [r2, #0]
 801126c:	460c      	movne	r4, r1
 801126e:	e7eb      	b.n	8011248 <_malloc_r+0x64>
 8011270:	460c      	mov	r4, r1
 8011272:	6849      	ldr	r1, [r1, #4]
 8011274:	e7cc      	b.n	8011210 <_malloc_r+0x2c>
 8011276:	1cc4      	adds	r4, r0, #3
 8011278:	f024 0403 	bic.w	r4, r4, #3
 801127c:	42a0      	cmp	r0, r4
 801127e:	d005      	beq.n	801128c <_malloc_r+0xa8>
 8011280:	1a21      	subs	r1, r4, r0
 8011282:	4630      	mov	r0, r6
 8011284:	f000 f95a 	bl	801153c <_sbrk_r>
 8011288:	3001      	adds	r0, #1
 801128a:	d0cf      	beq.n	801122c <_malloc_r+0x48>
 801128c:	6025      	str	r5, [r4, #0]
 801128e:	e7db      	b.n	8011248 <_malloc_r+0x64>
 8011290:	20001ea4 	.word	0x20001ea4
 8011294:	20001ea8 	.word	0x20001ea8

08011298 <__ssputs_r>:
 8011298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801129c:	688e      	ldr	r6, [r1, #8]
 801129e:	429e      	cmp	r6, r3
 80112a0:	4682      	mov	sl, r0
 80112a2:	460c      	mov	r4, r1
 80112a4:	4690      	mov	r8, r2
 80112a6:	4699      	mov	r9, r3
 80112a8:	d837      	bhi.n	801131a <__ssputs_r+0x82>
 80112aa:	898a      	ldrh	r2, [r1, #12]
 80112ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112b0:	d031      	beq.n	8011316 <__ssputs_r+0x7e>
 80112b2:	6825      	ldr	r5, [r4, #0]
 80112b4:	6909      	ldr	r1, [r1, #16]
 80112b6:	1a6f      	subs	r7, r5, r1
 80112b8:	6965      	ldr	r5, [r4, #20]
 80112ba:	2302      	movs	r3, #2
 80112bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80112c4:	f109 0301 	add.w	r3, r9, #1
 80112c8:	443b      	add	r3, r7
 80112ca:	429d      	cmp	r5, r3
 80112cc:	bf38      	it	cc
 80112ce:	461d      	movcc	r5, r3
 80112d0:	0553      	lsls	r3, r2, #21
 80112d2:	d530      	bpl.n	8011336 <__ssputs_r+0x9e>
 80112d4:	4629      	mov	r1, r5
 80112d6:	f7ff ff85 	bl	80111e4 <_malloc_r>
 80112da:	4606      	mov	r6, r0
 80112dc:	b950      	cbnz	r0, 80112f4 <__ssputs_r+0x5c>
 80112de:	230c      	movs	r3, #12
 80112e0:	f8ca 3000 	str.w	r3, [sl]
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ea:	81a3      	strh	r3, [r4, #12]
 80112ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112f4:	463a      	mov	r2, r7
 80112f6:	6921      	ldr	r1, [r4, #16]
 80112f8:	f7ff fc32 	bl	8010b60 <memcpy>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	6126      	str	r6, [r4, #16]
 801130a:	6165      	str	r5, [r4, #20]
 801130c:	443e      	add	r6, r7
 801130e:	1bed      	subs	r5, r5, r7
 8011310:	6026      	str	r6, [r4, #0]
 8011312:	60a5      	str	r5, [r4, #8]
 8011314:	464e      	mov	r6, r9
 8011316:	454e      	cmp	r6, r9
 8011318:	d900      	bls.n	801131c <__ssputs_r+0x84>
 801131a:	464e      	mov	r6, r9
 801131c:	4632      	mov	r2, r6
 801131e:	4641      	mov	r1, r8
 8011320:	6820      	ldr	r0, [r4, #0]
 8011322:	f000 f9c7 	bl	80116b4 <memmove>
 8011326:	68a3      	ldr	r3, [r4, #8]
 8011328:	1b9b      	subs	r3, r3, r6
 801132a:	60a3      	str	r3, [r4, #8]
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	441e      	add	r6, r3
 8011330:	6026      	str	r6, [r4, #0]
 8011332:	2000      	movs	r0, #0
 8011334:	e7dc      	b.n	80112f0 <__ssputs_r+0x58>
 8011336:	462a      	mov	r2, r5
 8011338:	f000 f9d7 	bl	80116ea <_realloc_r>
 801133c:	4606      	mov	r6, r0
 801133e:	2800      	cmp	r0, #0
 8011340:	d1e2      	bne.n	8011308 <__ssputs_r+0x70>
 8011342:	6921      	ldr	r1, [r4, #16]
 8011344:	4650      	mov	r0, sl
 8011346:	f7ff feff 	bl	8011148 <_free_r>
 801134a:	e7c8      	b.n	80112de <__ssputs_r+0x46>

0801134c <_svfiprintf_r>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	461d      	mov	r5, r3
 8011352:	898b      	ldrh	r3, [r1, #12]
 8011354:	061f      	lsls	r7, r3, #24
 8011356:	b09d      	sub	sp, #116	; 0x74
 8011358:	4680      	mov	r8, r0
 801135a:	460c      	mov	r4, r1
 801135c:	4616      	mov	r6, r2
 801135e:	d50f      	bpl.n	8011380 <_svfiprintf_r+0x34>
 8011360:	690b      	ldr	r3, [r1, #16]
 8011362:	b96b      	cbnz	r3, 8011380 <_svfiprintf_r+0x34>
 8011364:	2140      	movs	r1, #64	; 0x40
 8011366:	f7ff ff3d 	bl	80111e4 <_malloc_r>
 801136a:	6020      	str	r0, [r4, #0]
 801136c:	6120      	str	r0, [r4, #16]
 801136e:	b928      	cbnz	r0, 801137c <_svfiprintf_r+0x30>
 8011370:	230c      	movs	r3, #12
 8011372:	f8c8 3000 	str.w	r3, [r8]
 8011376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801137a:	e0c8      	b.n	801150e <_svfiprintf_r+0x1c2>
 801137c:	2340      	movs	r3, #64	; 0x40
 801137e:	6163      	str	r3, [r4, #20]
 8011380:	2300      	movs	r3, #0
 8011382:	9309      	str	r3, [sp, #36]	; 0x24
 8011384:	2320      	movs	r3, #32
 8011386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801138a:	2330      	movs	r3, #48	; 0x30
 801138c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011390:	9503      	str	r5, [sp, #12]
 8011392:	f04f 0b01 	mov.w	fp, #1
 8011396:	4637      	mov	r7, r6
 8011398:	463d      	mov	r5, r7
 801139a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801139e:	b10b      	cbz	r3, 80113a4 <_svfiprintf_r+0x58>
 80113a0:	2b25      	cmp	r3, #37	; 0x25
 80113a2:	d13e      	bne.n	8011422 <_svfiprintf_r+0xd6>
 80113a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80113a8:	d00b      	beq.n	80113c2 <_svfiprintf_r+0x76>
 80113aa:	4653      	mov	r3, sl
 80113ac:	4632      	mov	r2, r6
 80113ae:	4621      	mov	r1, r4
 80113b0:	4640      	mov	r0, r8
 80113b2:	f7ff ff71 	bl	8011298 <__ssputs_r>
 80113b6:	3001      	adds	r0, #1
 80113b8:	f000 80a4 	beq.w	8011504 <_svfiprintf_r+0x1b8>
 80113bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113be:	4453      	add	r3, sl
 80113c0:	9309      	str	r3, [sp, #36]	; 0x24
 80113c2:	783b      	ldrb	r3, [r7, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f000 809d 	beq.w	8011504 <_svfiprintf_r+0x1b8>
 80113ca:	2300      	movs	r3, #0
 80113cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113d4:	9304      	str	r3, [sp, #16]
 80113d6:	9307      	str	r3, [sp, #28]
 80113d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113dc:	931a      	str	r3, [sp, #104]	; 0x68
 80113de:	462f      	mov	r7, r5
 80113e0:	2205      	movs	r2, #5
 80113e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80113e6:	4850      	ldr	r0, [pc, #320]	; (8011528 <_svfiprintf_r+0x1dc>)
 80113e8:	f7ee ff22 	bl	8000230 <memchr>
 80113ec:	9b04      	ldr	r3, [sp, #16]
 80113ee:	b9d0      	cbnz	r0, 8011426 <_svfiprintf_r+0xda>
 80113f0:	06d9      	lsls	r1, r3, #27
 80113f2:	bf44      	itt	mi
 80113f4:	2220      	movmi	r2, #32
 80113f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80113fa:	071a      	lsls	r2, r3, #28
 80113fc:	bf44      	itt	mi
 80113fe:	222b      	movmi	r2, #43	; 0x2b
 8011400:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011404:	782a      	ldrb	r2, [r5, #0]
 8011406:	2a2a      	cmp	r2, #42	; 0x2a
 8011408:	d015      	beq.n	8011436 <_svfiprintf_r+0xea>
 801140a:	9a07      	ldr	r2, [sp, #28]
 801140c:	462f      	mov	r7, r5
 801140e:	2000      	movs	r0, #0
 8011410:	250a      	movs	r5, #10
 8011412:	4639      	mov	r1, r7
 8011414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011418:	3b30      	subs	r3, #48	; 0x30
 801141a:	2b09      	cmp	r3, #9
 801141c:	d94d      	bls.n	80114ba <_svfiprintf_r+0x16e>
 801141e:	b1b8      	cbz	r0, 8011450 <_svfiprintf_r+0x104>
 8011420:	e00f      	b.n	8011442 <_svfiprintf_r+0xf6>
 8011422:	462f      	mov	r7, r5
 8011424:	e7b8      	b.n	8011398 <_svfiprintf_r+0x4c>
 8011426:	4a40      	ldr	r2, [pc, #256]	; (8011528 <_svfiprintf_r+0x1dc>)
 8011428:	1a80      	subs	r0, r0, r2
 801142a:	fa0b f000 	lsl.w	r0, fp, r0
 801142e:	4318      	orrs	r0, r3
 8011430:	9004      	str	r0, [sp, #16]
 8011432:	463d      	mov	r5, r7
 8011434:	e7d3      	b.n	80113de <_svfiprintf_r+0x92>
 8011436:	9a03      	ldr	r2, [sp, #12]
 8011438:	1d11      	adds	r1, r2, #4
 801143a:	6812      	ldr	r2, [r2, #0]
 801143c:	9103      	str	r1, [sp, #12]
 801143e:	2a00      	cmp	r2, #0
 8011440:	db01      	blt.n	8011446 <_svfiprintf_r+0xfa>
 8011442:	9207      	str	r2, [sp, #28]
 8011444:	e004      	b.n	8011450 <_svfiprintf_r+0x104>
 8011446:	4252      	negs	r2, r2
 8011448:	f043 0302 	orr.w	r3, r3, #2
 801144c:	9207      	str	r2, [sp, #28]
 801144e:	9304      	str	r3, [sp, #16]
 8011450:	783b      	ldrb	r3, [r7, #0]
 8011452:	2b2e      	cmp	r3, #46	; 0x2e
 8011454:	d10c      	bne.n	8011470 <_svfiprintf_r+0x124>
 8011456:	787b      	ldrb	r3, [r7, #1]
 8011458:	2b2a      	cmp	r3, #42	; 0x2a
 801145a:	d133      	bne.n	80114c4 <_svfiprintf_r+0x178>
 801145c:	9b03      	ldr	r3, [sp, #12]
 801145e:	1d1a      	adds	r2, r3, #4
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	9203      	str	r2, [sp, #12]
 8011464:	2b00      	cmp	r3, #0
 8011466:	bfb8      	it	lt
 8011468:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801146c:	3702      	adds	r7, #2
 801146e:	9305      	str	r3, [sp, #20]
 8011470:	4d2e      	ldr	r5, [pc, #184]	; (801152c <_svfiprintf_r+0x1e0>)
 8011472:	7839      	ldrb	r1, [r7, #0]
 8011474:	2203      	movs	r2, #3
 8011476:	4628      	mov	r0, r5
 8011478:	f7ee feda 	bl	8000230 <memchr>
 801147c:	b138      	cbz	r0, 801148e <_svfiprintf_r+0x142>
 801147e:	2340      	movs	r3, #64	; 0x40
 8011480:	1b40      	subs	r0, r0, r5
 8011482:	fa03 f000 	lsl.w	r0, r3, r0
 8011486:	9b04      	ldr	r3, [sp, #16]
 8011488:	4303      	orrs	r3, r0
 801148a:	3701      	adds	r7, #1
 801148c:	9304      	str	r3, [sp, #16]
 801148e:	7839      	ldrb	r1, [r7, #0]
 8011490:	4827      	ldr	r0, [pc, #156]	; (8011530 <_svfiprintf_r+0x1e4>)
 8011492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011496:	2206      	movs	r2, #6
 8011498:	1c7e      	adds	r6, r7, #1
 801149a:	f7ee fec9 	bl	8000230 <memchr>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d038      	beq.n	8011514 <_svfiprintf_r+0x1c8>
 80114a2:	4b24      	ldr	r3, [pc, #144]	; (8011534 <_svfiprintf_r+0x1e8>)
 80114a4:	bb13      	cbnz	r3, 80114ec <_svfiprintf_r+0x1a0>
 80114a6:	9b03      	ldr	r3, [sp, #12]
 80114a8:	3307      	adds	r3, #7
 80114aa:	f023 0307 	bic.w	r3, r3, #7
 80114ae:	3308      	adds	r3, #8
 80114b0:	9303      	str	r3, [sp, #12]
 80114b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114b4:	444b      	add	r3, r9
 80114b6:	9309      	str	r3, [sp, #36]	; 0x24
 80114b8:	e76d      	b.n	8011396 <_svfiprintf_r+0x4a>
 80114ba:	fb05 3202 	mla	r2, r5, r2, r3
 80114be:	2001      	movs	r0, #1
 80114c0:	460f      	mov	r7, r1
 80114c2:	e7a6      	b.n	8011412 <_svfiprintf_r+0xc6>
 80114c4:	2300      	movs	r3, #0
 80114c6:	3701      	adds	r7, #1
 80114c8:	9305      	str	r3, [sp, #20]
 80114ca:	4619      	mov	r1, r3
 80114cc:	250a      	movs	r5, #10
 80114ce:	4638      	mov	r0, r7
 80114d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114d4:	3a30      	subs	r2, #48	; 0x30
 80114d6:	2a09      	cmp	r2, #9
 80114d8:	d903      	bls.n	80114e2 <_svfiprintf_r+0x196>
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d0c8      	beq.n	8011470 <_svfiprintf_r+0x124>
 80114de:	9105      	str	r1, [sp, #20]
 80114e0:	e7c6      	b.n	8011470 <_svfiprintf_r+0x124>
 80114e2:	fb05 2101 	mla	r1, r5, r1, r2
 80114e6:	2301      	movs	r3, #1
 80114e8:	4607      	mov	r7, r0
 80114ea:	e7f0      	b.n	80114ce <_svfiprintf_r+0x182>
 80114ec:	ab03      	add	r3, sp, #12
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	4622      	mov	r2, r4
 80114f2:	4b11      	ldr	r3, [pc, #68]	; (8011538 <_svfiprintf_r+0x1ec>)
 80114f4:	a904      	add	r1, sp, #16
 80114f6:	4640      	mov	r0, r8
 80114f8:	f7fd fdca 	bl	800f090 <_printf_float>
 80114fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011500:	4681      	mov	r9, r0
 8011502:	d1d6      	bne.n	80114b2 <_svfiprintf_r+0x166>
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	065b      	lsls	r3, r3, #25
 8011508:	f53f af35 	bmi.w	8011376 <_svfiprintf_r+0x2a>
 801150c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801150e:	b01d      	add	sp, #116	; 0x74
 8011510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011514:	ab03      	add	r3, sp, #12
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	4622      	mov	r2, r4
 801151a:	4b07      	ldr	r3, [pc, #28]	; (8011538 <_svfiprintf_r+0x1ec>)
 801151c:	a904      	add	r1, sp, #16
 801151e:	4640      	mov	r0, r8
 8011520:	f7fe f86c 	bl	800f5fc <_printf_i>
 8011524:	e7ea      	b.n	80114fc <_svfiprintf_r+0x1b0>
 8011526:	bf00      	nop
 8011528:	0801410c 	.word	0x0801410c
 801152c:	08014112 	.word	0x08014112
 8011530:	08014116 	.word	0x08014116
 8011534:	0800f091 	.word	0x0800f091
 8011538:	08011299 	.word	0x08011299

0801153c <_sbrk_r>:
 801153c:	b538      	push	{r3, r4, r5, lr}
 801153e:	4c06      	ldr	r4, [pc, #24]	; (8011558 <_sbrk_r+0x1c>)
 8011540:	2300      	movs	r3, #0
 8011542:	4605      	mov	r5, r0
 8011544:	4608      	mov	r0, r1
 8011546:	6023      	str	r3, [r4, #0]
 8011548:	f7f6 f88a 	bl	8007660 <_sbrk>
 801154c:	1c43      	adds	r3, r0, #1
 801154e:	d102      	bne.n	8011556 <_sbrk_r+0x1a>
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	b103      	cbz	r3, 8011556 <_sbrk_r+0x1a>
 8011554:	602b      	str	r3, [r5, #0]
 8011556:	bd38      	pop	{r3, r4, r5, pc}
 8011558:	200028e0 	.word	0x200028e0

0801155c <__sread>:
 801155c:	b510      	push	{r4, lr}
 801155e:	460c      	mov	r4, r1
 8011560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011564:	f000 f8e8 	bl	8011738 <_read_r>
 8011568:	2800      	cmp	r0, #0
 801156a:	bfab      	itete	ge
 801156c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801156e:	89a3      	ldrhlt	r3, [r4, #12]
 8011570:	181b      	addge	r3, r3, r0
 8011572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011576:	bfac      	ite	ge
 8011578:	6563      	strge	r3, [r4, #84]	; 0x54
 801157a:	81a3      	strhlt	r3, [r4, #12]
 801157c:	bd10      	pop	{r4, pc}

0801157e <__swrite>:
 801157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011582:	461f      	mov	r7, r3
 8011584:	898b      	ldrh	r3, [r1, #12]
 8011586:	05db      	lsls	r3, r3, #23
 8011588:	4605      	mov	r5, r0
 801158a:	460c      	mov	r4, r1
 801158c:	4616      	mov	r6, r2
 801158e:	d505      	bpl.n	801159c <__swrite+0x1e>
 8011590:	2302      	movs	r3, #2
 8011592:	2200      	movs	r2, #0
 8011594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011598:	f000 f868 	bl	801166c <_lseek_r>
 801159c:	89a3      	ldrh	r3, [r4, #12]
 801159e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115a6:	81a3      	strh	r3, [r4, #12]
 80115a8:	4632      	mov	r2, r6
 80115aa:	463b      	mov	r3, r7
 80115ac:	4628      	mov	r0, r5
 80115ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b2:	f000 b817 	b.w	80115e4 <_write_r>

080115b6 <__sseek>:
 80115b6:	b510      	push	{r4, lr}
 80115b8:	460c      	mov	r4, r1
 80115ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115be:	f000 f855 	bl	801166c <_lseek_r>
 80115c2:	1c43      	adds	r3, r0, #1
 80115c4:	89a3      	ldrh	r3, [r4, #12]
 80115c6:	bf15      	itete	ne
 80115c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115d2:	81a3      	strheq	r3, [r4, #12]
 80115d4:	bf18      	it	ne
 80115d6:	81a3      	strhne	r3, [r4, #12]
 80115d8:	bd10      	pop	{r4, pc}

080115da <__sclose>:
 80115da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115de:	f000 b813 	b.w	8011608 <_close_r>
	...

080115e4 <_write_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4c07      	ldr	r4, [pc, #28]	; (8011604 <_write_r+0x20>)
 80115e8:	4605      	mov	r5, r0
 80115ea:	4608      	mov	r0, r1
 80115ec:	4611      	mov	r1, r2
 80115ee:	2200      	movs	r2, #0
 80115f0:	6022      	str	r2, [r4, #0]
 80115f2:	461a      	mov	r2, r3
 80115f4:	f7f5 fd2f 	bl	8007056 <_write>
 80115f8:	1c43      	adds	r3, r0, #1
 80115fa:	d102      	bne.n	8011602 <_write_r+0x1e>
 80115fc:	6823      	ldr	r3, [r4, #0]
 80115fe:	b103      	cbz	r3, 8011602 <_write_r+0x1e>
 8011600:	602b      	str	r3, [r5, #0]
 8011602:	bd38      	pop	{r3, r4, r5, pc}
 8011604:	200028e0 	.word	0x200028e0

08011608 <_close_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4c06      	ldr	r4, [pc, #24]	; (8011624 <_close_r+0x1c>)
 801160c:	2300      	movs	r3, #0
 801160e:	4605      	mov	r5, r0
 8011610:	4608      	mov	r0, r1
 8011612:	6023      	str	r3, [r4, #0]
 8011614:	f7f5 ffef 	bl	80075f6 <_close>
 8011618:	1c43      	adds	r3, r0, #1
 801161a:	d102      	bne.n	8011622 <_close_r+0x1a>
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	b103      	cbz	r3, 8011622 <_close_r+0x1a>
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	bd38      	pop	{r3, r4, r5, pc}
 8011624:	200028e0 	.word	0x200028e0

08011628 <_fstat_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4c07      	ldr	r4, [pc, #28]	; (8011648 <_fstat_r+0x20>)
 801162c:	2300      	movs	r3, #0
 801162e:	4605      	mov	r5, r0
 8011630:	4608      	mov	r0, r1
 8011632:	4611      	mov	r1, r2
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	f7f5 ffea 	bl	800760e <_fstat>
 801163a:	1c43      	adds	r3, r0, #1
 801163c:	d102      	bne.n	8011644 <_fstat_r+0x1c>
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	b103      	cbz	r3, 8011644 <_fstat_r+0x1c>
 8011642:	602b      	str	r3, [r5, #0]
 8011644:	bd38      	pop	{r3, r4, r5, pc}
 8011646:	bf00      	nop
 8011648:	200028e0 	.word	0x200028e0

0801164c <_isatty_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4c06      	ldr	r4, [pc, #24]	; (8011668 <_isatty_r+0x1c>)
 8011650:	2300      	movs	r3, #0
 8011652:	4605      	mov	r5, r0
 8011654:	4608      	mov	r0, r1
 8011656:	6023      	str	r3, [r4, #0]
 8011658:	f7f5 ffe9 	bl	800762e <_isatty>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d102      	bne.n	8011666 <_isatty_r+0x1a>
 8011660:	6823      	ldr	r3, [r4, #0]
 8011662:	b103      	cbz	r3, 8011666 <_isatty_r+0x1a>
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	bd38      	pop	{r3, r4, r5, pc}
 8011668:	200028e0 	.word	0x200028e0

0801166c <_lseek_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4c07      	ldr	r4, [pc, #28]	; (801168c <_lseek_r+0x20>)
 8011670:	4605      	mov	r5, r0
 8011672:	4608      	mov	r0, r1
 8011674:	4611      	mov	r1, r2
 8011676:	2200      	movs	r2, #0
 8011678:	6022      	str	r2, [r4, #0]
 801167a:	461a      	mov	r2, r3
 801167c:	f7f5 ffe2 	bl	8007644 <_lseek>
 8011680:	1c43      	adds	r3, r0, #1
 8011682:	d102      	bne.n	801168a <_lseek_r+0x1e>
 8011684:	6823      	ldr	r3, [r4, #0]
 8011686:	b103      	cbz	r3, 801168a <_lseek_r+0x1e>
 8011688:	602b      	str	r3, [r5, #0]
 801168a:	bd38      	pop	{r3, r4, r5, pc}
 801168c:	200028e0 	.word	0x200028e0

08011690 <__ascii_mbtowc>:
 8011690:	b082      	sub	sp, #8
 8011692:	b901      	cbnz	r1, 8011696 <__ascii_mbtowc+0x6>
 8011694:	a901      	add	r1, sp, #4
 8011696:	b142      	cbz	r2, 80116aa <__ascii_mbtowc+0x1a>
 8011698:	b14b      	cbz	r3, 80116ae <__ascii_mbtowc+0x1e>
 801169a:	7813      	ldrb	r3, [r2, #0]
 801169c:	600b      	str	r3, [r1, #0]
 801169e:	7812      	ldrb	r2, [r2, #0]
 80116a0:	1c10      	adds	r0, r2, #0
 80116a2:	bf18      	it	ne
 80116a4:	2001      	movne	r0, #1
 80116a6:	b002      	add	sp, #8
 80116a8:	4770      	bx	lr
 80116aa:	4610      	mov	r0, r2
 80116ac:	e7fb      	b.n	80116a6 <__ascii_mbtowc+0x16>
 80116ae:	f06f 0001 	mvn.w	r0, #1
 80116b2:	e7f8      	b.n	80116a6 <__ascii_mbtowc+0x16>

080116b4 <memmove>:
 80116b4:	4288      	cmp	r0, r1
 80116b6:	b510      	push	{r4, lr}
 80116b8:	eb01 0302 	add.w	r3, r1, r2
 80116bc:	d807      	bhi.n	80116ce <memmove+0x1a>
 80116be:	1e42      	subs	r2, r0, #1
 80116c0:	4299      	cmp	r1, r3
 80116c2:	d00a      	beq.n	80116da <memmove+0x26>
 80116c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80116cc:	e7f8      	b.n	80116c0 <memmove+0xc>
 80116ce:	4283      	cmp	r3, r0
 80116d0:	d9f5      	bls.n	80116be <memmove+0xa>
 80116d2:	1881      	adds	r1, r0, r2
 80116d4:	1ad2      	subs	r2, r2, r3
 80116d6:	42d3      	cmn	r3, r2
 80116d8:	d100      	bne.n	80116dc <memmove+0x28>
 80116da:	bd10      	pop	{r4, pc}
 80116dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80116e4:	e7f7      	b.n	80116d6 <memmove+0x22>

080116e6 <__malloc_lock>:
 80116e6:	4770      	bx	lr

080116e8 <__malloc_unlock>:
 80116e8:	4770      	bx	lr

080116ea <_realloc_r>:
 80116ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ec:	4607      	mov	r7, r0
 80116ee:	4614      	mov	r4, r2
 80116f0:	460e      	mov	r6, r1
 80116f2:	b921      	cbnz	r1, 80116fe <_realloc_r+0x14>
 80116f4:	4611      	mov	r1, r2
 80116f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80116fa:	f7ff bd73 	b.w	80111e4 <_malloc_r>
 80116fe:	b922      	cbnz	r2, 801170a <_realloc_r+0x20>
 8011700:	f7ff fd22 	bl	8011148 <_free_r>
 8011704:	4625      	mov	r5, r4
 8011706:	4628      	mov	r0, r5
 8011708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801170a:	f000 f834 	bl	8011776 <_malloc_usable_size_r>
 801170e:	42a0      	cmp	r0, r4
 8011710:	d20f      	bcs.n	8011732 <_realloc_r+0x48>
 8011712:	4621      	mov	r1, r4
 8011714:	4638      	mov	r0, r7
 8011716:	f7ff fd65 	bl	80111e4 <_malloc_r>
 801171a:	4605      	mov	r5, r0
 801171c:	2800      	cmp	r0, #0
 801171e:	d0f2      	beq.n	8011706 <_realloc_r+0x1c>
 8011720:	4631      	mov	r1, r6
 8011722:	4622      	mov	r2, r4
 8011724:	f7ff fa1c 	bl	8010b60 <memcpy>
 8011728:	4631      	mov	r1, r6
 801172a:	4638      	mov	r0, r7
 801172c:	f7ff fd0c 	bl	8011148 <_free_r>
 8011730:	e7e9      	b.n	8011706 <_realloc_r+0x1c>
 8011732:	4635      	mov	r5, r6
 8011734:	e7e7      	b.n	8011706 <_realloc_r+0x1c>
	...

08011738 <_read_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4c07      	ldr	r4, [pc, #28]	; (8011758 <_read_r+0x20>)
 801173c:	4605      	mov	r5, r0
 801173e:	4608      	mov	r0, r1
 8011740:	4611      	mov	r1, r2
 8011742:	2200      	movs	r2, #0
 8011744:	6022      	str	r2, [r4, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	f7f5 ff38 	bl	80075bc <_read>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d102      	bne.n	8011756 <_read_r+0x1e>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	b103      	cbz	r3, 8011756 <_read_r+0x1e>
 8011754:	602b      	str	r3, [r5, #0]
 8011756:	bd38      	pop	{r3, r4, r5, pc}
 8011758:	200028e0 	.word	0x200028e0

0801175c <__ascii_wctomb>:
 801175c:	b149      	cbz	r1, 8011772 <__ascii_wctomb+0x16>
 801175e:	2aff      	cmp	r2, #255	; 0xff
 8011760:	bf85      	ittet	hi
 8011762:	238a      	movhi	r3, #138	; 0x8a
 8011764:	6003      	strhi	r3, [r0, #0]
 8011766:	700a      	strbls	r2, [r1, #0]
 8011768:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801176c:	bf98      	it	ls
 801176e:	2001      	movls	r0, #1
 8011770:	4770      	bx	lr
 8011772:	4608      	mov	r0, r1
 8011774:	4770      	bx	lr

08011776 <_malloc_usable_size_r>:
 8011776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801177a:	1f18      	subs	r0, r3, #4
 801177c:	2b00      	cmp	r3, #0
 801177e:	bfbc      	itt	lt
 8011780:	580b      	ldrlt	r3, [r1, r0]
 8011782:	18c0      	addlt	r0, r0, r3
 8011784:	4770      	bx	lr
	...

08011788 <log10>:
 8011788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178a:	ed2d 8b02 	vpush	{d8}
 801178e:	b08b      	sub	sp, #44	; 0x2c
 8011790:	ec55 4b10 	vmov	r4, r5, d0
 8011794:	f000 f9e8 	bl	8011b68 <__ieee754_log10>
 8011798:	4b36      	ldr	r3, [pc, #216]	; (8011874 <log10+0xec>)
 801179a:	eeb0 8a40 	vmov.f32	s16, s0
 801179e:	eef0 8a60 	vmov.f32	s17, s1
 80117a2:	f993 6000 	ldrsb.w	r6, [r3]
 80117a6:	1c73      	adds	r3, r6, #1
 80117a8:	d05c      	beq.n	8011864 <log10+0xdc>
 80117aa:	4622      	mov	r2, r4
 80117ac:	462b      	mov	r3, r5
 80117ae:	4620      	mov	r0, r4
 80117b0:	4629      	mov	r1, r5
 80117b2:	f7ef f9e3 	bl	8000b7c <__aeabi_dcmpun>
 80117b6:	4607      	mov	r7, r0
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d153      	bne.n	8011864 <log10+0xdc>
 80117bc:	2200      	movs	r2, #0
 80117be:	2300      	movs	r3, #0
 80117c0:	4620      	mov	r0, r4
 80117c2:	4629      	mov	r1, r5
 80117c4:	f7ef f9bc 	bl	8000b40 <__aeabi_dcmple>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d04b      	beq.n	8011864 <log10+0xdc>
 80117cc:	4b2a      	ldr	r3, [pc, #168]	; (8011878 <log10+0xf0>)
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	9708      	str	r7, [sp, #32]
 80117d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80117d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80117da:	b9a6      	cbnz	r6, 8011806 <log10+0x7e>
 80117dc:	4b27      	ldr	r3, [pc, #156]	; (801187c <log10+0xf4>)
 80117de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80117e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80117e6:	4620      	mov	r0, r4
 80117e8:	2200      	movs	r2, #0
 80117ea:	2300      	movs	r3, #0
 80117ec:	4629      	mov	r1, r5
 80117ee:	f7ef f993 	bl	8000b18 <__aeabi_dcmpeq>
 80117f2:	bb40      	cbnz	r0, 8011846 <log10+0xbe>
 80117f4:	2301      	movs	r3, #1
 80117f6:	2e02      	cmp	r6, #2
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	d119      	bne.n	8011830 <log10+0xa8>
 80117fc:	f7fd fb82 	bl	800ef04 <__errno>
 8011800:	2321      	movs	r3, #33	; 0x21
 8011802:	6003      	str	r3, [r0, #0]
 8011804:	e019      	b.n	801183a <log10+0xb2>
 8011806:	4b1e      	ldr	r3, [pc, #120]	; (8011880 <log10+0xf8>)
 8011808:	2200      	movs	r2, #0
 801180a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801180e:	4620      	mov	r0, r4
 8011810:	2200      	movs	r2, #0
 8011812:	2300      	movs	r3, #0
 8011814:	4629      	mov	r1, r5
 8011816:	f7ef f97f 	bl	8000b18 <__aeabi_dcmpeq>
 801181a:	2800      	cmp	r0, #0
 801181c:	d0ea      	beq.n	80117f4 <log10+0x6c>
 801181e:	2302      	movs	r3, #2
 8011820:	429e      	cmp	r6, r3
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	d111      	bne.n	801184a <log10+0xc2>
 8011826:	f7fd fb6d 	bl	800ef04 <__errno>
 801182a:	2322      	movs	r3, #34	; 0x22
 801182c:	6003      	str	r3, [r0, #0]
 801182e:	e011      	b.n	8011854 <log10+0xcc>
 8011830:	4668      	mov	r0, sp
 8011832:	f000 fff4 	bl	801281e <matherr>
 8011836:	2800      	cmp	r0, #0
 8011838:	d0e0      	beq.n	80117fc <log10+0x74>
 801183a:	4812      	ldr	r0, [pc, #72]	; (8011884 <log10+0xfc>)
 801183c:	f000 fff4 	bl	8012828 <nan>
 8011840:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011844:	e006      	b.n	8011854 <log10+0xcc>
 8011846:	2302      	movs	r3, #2
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	4668      	mov	r0, sp
 801184c:	f000 ffe7 	bl	801281e <matherr>
 8011850:	2800      	cmp	r0, #0
 8011852:	d0e8      	beq.n	8011826 <log10+0x9e>
 8011854:	9b08      	ldr	r3, [sp, #32]
 8011856:	b11b      	cbz	r3, 8011860 <log10+0xd8>
 8011858:	f7fd fb54 	bl	800ef04 <__errno>
 801185c:	9b08      	ldr	r3, [sp, #32]
 801185e:	6003      	str	r3, [r0, #0]
 8011860:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011864:	eeb0 0a48 	vmov.f32	s0, s16
 8011868:	eef0 0a68 	vmov.f32	s1, s17
 801186c:	b00b      	add	sp, #44	; 0x2c
 801186e:	ecbd 8b02 	vpop	{d8}
 8011872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011874:	20001e08 	.word	0x20001e08
 8011878:	08014228 	.word	0x08014228
 801187c:	c7efffff 	.word	0xc7efffff
 8011880:	fff00000 	.word	0xfff00000
 8011884:	08014111 	.word	0x08014111

08011888 <pow>:
 8011888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188c:	ed2d 8b04 	vpush	{d8-d9}
 8011890:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011b64 <pow+0x2dc>
 8011894:	b08d      	sub	sp, #52	; 0x34
 8011896:	ec57 6b10 	vmov	r6, r7, d0
 801189a:	ec55 4b11 	vmov	r4, r5, d1
 801189e:	f000 f9ef 	bl	8011c80 <__ieee754_pow>
 80118a2:	f999 3000 	ldrsb.w	r3, [r9]
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	3301      	adds	r3, #1
 80118aa:	eeb0 8a40 	vmov.f32	s16, s0
 80118ae:	eef0 8a60 	vmov.f32	s17, s1
 80118b2:	46c8      	mov	r8, r9
 80118b4:	d05f      	beq.n	8011976 <pow+0xee>
 80118b6:	4622      	mov	r2, r4
 80118b8:	462b      	mov	r3, r5
 80118ba:	4620      	mov	r0, r4
 80118bc:	4629      	mov	r1, r5
 80118be:	f7ef f95d 	bl	8000b7c <__aeabi_dcmpun>
 80118c2:	4683      	mov	fp, r0
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d156      	bne.n	8011976 <pow+0xee>
 80118c8:	4632      	mov	r2, r6
 80118ca:	463b      	mov	r3, r7
 80118cc:	4630      	mov	r0, r6
 80118ce:	4639      	mov	r1, r7
 80118d0:	f7ef f954 	bl	8000b7c <__aeabi_dcmpun>
 80118d4:	9001      	str	r0, [sp, #4]
 80118d6:	b1e8      	cbz	r0, 8011914 <pow+0x8c>
 80118d8:	2200      	movs	r2, #0
 80118da:	2300      	movs	r3, #0
 80118dc:	4620      	mov	r0, r4
 80118de:	4629      	mov	r1, r5
 80118e0:	f7ef f91a 	bl	8000b18 <__aeabi_dcmpeq>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d046      	beq.n	8011976 <pow+0xee>
 80118e8:	2301      	movs	r3, #1
 80118ea:	9302      	str	r3, [sp, #8]
 80118ec:	4b96      	ldr	r3, [pc, #600]	; (8011b48 <pow+0x2c0>)
 80118ee:	9303      	str	r3, [sp, #12]
 80118f0:	4b96      	ldr	r3, [pc, #600]	; (8011b4c <pow+0x2c4>)
 80118f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80118f6:	2200      	movs	r2, #0
 80118f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118fc:	9b00      	ldr	r3, [sp, #0]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011904:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011908:	d033      	beq.n	8011972 <pow+0xea>
 801190a:	a802      	add	r0, sp, #8
 801190c:	f000 ff87 	bl	801281e <matherr>
 8011910:	bb48      	cbnz	r0, 8011966 <pow+0xde>
 8011912:	e05d      	b.n	80119d0 <pow+0x148>
 8011914:	f04f 0a00 	mov.w	sl, #0
 8011918:	f04f 0b00 	mov.w	fp, #0
 801191c:	4652      	mov	r2, sl
 801191e:	465b      	mov	r3, fp
 8011920:	4630      	mov	r0, r6
 8011922:	4639      	mov	r1, r7
 8011924:	f7ef f8f8 	bl	8000b18 <__aeabi_dcmpeq>
 8011928:	ec4b ab19 	vmov	d9, sl, fp
 801192c:	2800      	cmp	r0, #0
 801192e:	d054      	beq.n	80119da <pow+0x152>
 8011930:	4652      	mov	r2, sl
 8011932:	465b      	mov	r3, fp
 8011934:	4620      	mov	r0, r4
 8011936:	4629      	mov	r1, r5
 8011938:	f7ef f8ee 	bl	8000b18 <__aeabi_dcmpeq>
 801193c:	4680      	mov	r8, r0
 801193e:	b318      	cbz	r0, 8011988 <pow+0x100>
 8011940:	2301      	movs	r3, #1
 8011942:	9302      	str	r3, [sp, #8]
 8011944:	4b80      	ldr	r3, [pc, #512]	; (8011b48 <pow+0x2c0>)
 8011946:	9303      	str	r3, [sp, #12]
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	930a      	str	r3, [sp, #40]	; 0x28
 801194c:	9b00      	ldr	r3, [sp, #0]
 801194e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011952:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011956:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d0d5      	beq.n	801190a <pow+0x82>
 801195e:	4b7b      	ldr	r3, [pc, #492]	; (8011b4c <pow+0x2c4>)
 8011960:	2200      	movs	r2, #0
 8011962:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011968:	b11b      	cbz	r3, 8011972 <pow+0xea>
 801196a:	f7fd facb 	bl	800ef04 <__errno>
 801196e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011970:	6003      	str	r3, [r0, #0]
 8011972:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011976:	eeb0 0a48 	vmov.f32	s0, s16
 801197a:	eef0 0a68 	vmov.f32	s1, s17
 801197e:	b00d      	add	sp, #52	; 0x34
 8011980:	ecbd 8b04 	vpop	{d8-d9}
 8011984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011988:	ec45 4b10 	vmov	d0, r4, r5
 801198c:	f000 ff3f 	bl	801280e <finite>
 8011990:	2800      	cmp	r0, #0
 8011992:	d0f0      	beq.n	8011976 <pow+0xee>
 8011994:	4652      	mov	r2, sl
 8011996:	465b      	mov	r3, fp
 8011998:	4620      	mov	r0, r4
 801199a:	4629      	mov	r1, r5
 801199c:	f7ef f8c6 	bl	8000b2c <__aeabi_dcmplt>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d0e8      	beq.n	8011976 <pow+0xee>
 80119a4:	2301      	movs	r3, #1
 80119a6:	9302      	str	r3, [sp, #8]
 80119a8:	4b67      	ldr	r3, [pc, #412]	; (8011b48 <pow+0x2c0>)
 80119aa:	9303      	str	r3, [sp, #12]
 80119ac:	f999 3000 	ldrsb.w	r3, [r9]
 80119b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80119b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80119b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80119bc:	b913      	cbnz	r3, 80119c4 <pow+0x13c>
 80119be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80119c2:	e7a2      	b.n	801190a <pow+0x82>
 80119c4:	4962      	ldr	r1, [pc, #392]	; (8011b50 <pow+0x2c8>)
 80119c6:	2000      	movs	r0, #0
 80119c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d19c      	bne.n	801190a <pow+0x82>
 80119d0:	f7fd fa98 	bl	800ef04 <__errno>
 80119d4:	2321      	movs	r3, #33	; 0x21
 80119d6:	6003      	str	r3, [r0, #0]
 80119d8:	e7c5      	b.n	8011966 <pow+0xde>
 80119da:	eeb0 0a48 	vmov.f32	s0, s16
 80119de:	eef0 0a68 	vmov.f32	s1, s17
 80119e2:	f000 ff14 	bl	801280e <finite>
 80119e6:	9000      	str	r0, [sp, #0]
 80119e8:	2800      	cmp	r0, #0
 80119ea:	f040 8081 	bne.w	8011af0 <pow+0x268>
 80119ee:	ec47 6b10 	vmov	d0, r6, r7
 80119f2:	f000 ff0c 	bl	801280e <finite>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	d07a      	beq.n	8011af0 <pow+0x268>
 80119fa:	ec45 4b10 	vmov	d0, r4, r5
 80119fe:	f000 ff06 	bl	801280e <finite>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d074      	beq.n	8011af0 <pow+0x268>
 8011a06:	ec53 2b18 	vmov	r2, r3, d8
 8011a0a:	ee18 0a10 	vmov	r0, s16
 8011a0e:	4619      	mov	r1, r3
 8011a10:	f7ef f8b4 	bl	8000b7c <__aeabi_dcmpun>
 8011a14:	f999 9000 	ldrsb.w	r9, [r9]
 8011a18:	4b4b      	ldr	r3, [pc, #300]	; (8011b48 <pow+0x2c0>)
 8011a1a:	b1b0      	cbz	r0, 8011a4a <pow+0x1c2>
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a22:	9b00      	ldr	r3, [sp, #0]
 8011a24:	930a      	str	r3, [sp, #40]	; 0x28
 8011a26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011a2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011a2e:	f1b9 0f00 	cmp.w	r9, #0
 8011a32:	d0c4      	beq.n	80119be <pow+0x136>
 8011a34:	4652      	mov	r2, sl
 8011a36:	465b      	mov	r3, fp
 8011a38:	4650      	mov	r0, sl
 8011a3a:	4659      	mov	r1, fp
 8011a3c:	f7ee ff2e 	bl	800089c <__aeabi_ddiv>
 8011a40:	f1b9 0f02 	cmp.w	r9, #2
 8011a44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011a48:	e7c1      	b.n	80119ce <pow+0x146>
 8011a4a:	2203      	movs	r2, #3
 8011a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a50:	900a      	str	r0, [sp, #40]	; 0x28
 8011a52:	4629      	mov	r1, r5
 8011a54:	4620      	mov	r0, r4
 8011a56:	2200      	movs	r2, #0
 8011a58:	4b3e      	ldr	r3, [pc, #248]	; (8011b54 <pow+0x2cc>)
 8011a5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011a5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011a62:	f7ee fdf1 	bl	8000648 <__aeabi_dmul>
 8011a66:	4604      	mov	r4, r0
 8011a68:	460d      	mov	r5, r1
 8011a6a:	f1b9 0f00 	cmp.w	r9, #0
 8011a6e:	d124      	bne.n	8011aba <pow+0x232>
 8011a70:	4b39      	ldr	r3, [pc, #228]	; (8011b58 <pow+0x2d0>)
 8011a72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011a76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	4652      	mov	r2, sl
 8011a7e:	465b      	mov	r3, fp
 8011a80:	4639      	mov	r1, r7
 8011a82:	f7ef f853 	bl	8000b2c <__aeabi_dcmplt>
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d056      	beq.n	8011b38 <pow+0x2b0>
 8011a8a:	ec45 4b10 	vmov	d0, r4, r5
 8011a8e:	f000 fed3 	bl	8012838 <rint>
 8011a92:	4622      	mov	r2, r4
 8011a94:	462b      	mov	r3, r5
 8011a96:	ec51 0b10 	vmov	r0, r1, d0
 8011a9a:	f7ef f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8011a9e:	b920      	cbnz	r0, 8011aaa <pow+0x222>
 8011aa0:	4b2e      	ldr	r3, [pc, #184]	; (8011b5c <pow+0x2d4>)
 8011aa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011aa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011aaa:	f998 3000 	ldrsb.w	r3, [r8]
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d142      	bne.n	8011b38 <pow+0x2b0>
 8011ab2:	f7fd fa27 	bl	800ef04 <__errno>
 8011ab6:	2322      	movs	r3, #34	; 0x22
 8011ab8:	e78d      	b.n	80119d6 <pow+0x14e>
 8011aba:	4b29      	ldr	r3, [pc, #164]	; (8011b60 <pow+0x2d8>)
 8011abc:	2200      	movs	r2, #0
 8011abe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	4652      	mov	r2, sl
 8011ac6:	465b      	mov	r3, fp
 8011ac8:	4639      	mov	r1, r7
 8011aca:	f7ef f82f 	bl	8000b2c <__aeabi_dcmplt>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d0eb      	beq.n	8011aaa <pow+0x222>
 8011ad2:	ec45 4b10 	vmov	d0, r4, r5
 8011ad6:	f000 feaf 	bl	8012838 <rint>
 8011ada:	4622      	mov	r2, r4
 8011adc:	462b      	mov	r3, r5
 8011ade:	ec51 0b10 	vmov	r0, r1, d0
 8011ae2:	f7ef f819 	bl	8000b18 <__aeabi_dcmpeq>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d1df      	bne.n	8011aaa <pow+0x222>
 8011aea:	2200      	movs	r2, #0
 8011aec:	4b18      	ldr	r3, [pc, #96]	; (8011b50 <pow+0x2c8>)
 8011aee:	e7da      	b.n	8011aa6 <pow+0x21e>
 8011af0:	2200      	movs	r2, #0
 8011af2:	2300      	movs	r3, #0
 8011af4:	ec51 0b18 	vmov	r0, r1, d8
 8011af8:	f7ef f80e 	bl	8000b18 <__aeabi_dcmpeq>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f43f af3a 	beq.w	8011976 <pow+0xee>
 8011b02:	ec47 6b10 	vmov	d0, r6, r7
 8011b06:	f000 fe82 	bl	801280e <finite>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	f43f af33 	beq.w	8011976 <pow+0xee>
 8011b10:	ec45 4b10 	vmov	d0, r4, r5
 8011b14:	f000 fe7b 	bl	801280e <finite>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	f43f af2c 	beq.w	8011976 <pow+0xee>
 8011b1e:	2304      	movs	r3, #4
 8011b20:	9302      	str	r3, [sp, #8]
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <pow+0x2c0>)
 8011b24:	9303      	str	r3, [sp, #12]
 8011b26:	2300      	movs	r3, #0
 8011b28:	930a      	str	r3, [sp, #40]	; 0x28
 8011b2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011b32:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011b36:	e7b8      	b.n	8011aaa <pow+0x222>
 8011b38:	a802      	add	r0, sp, #8
 8011b3a:	f000 fe70 	bl	801281e <matherr>
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f47f af11 	bne.w	8011966 <pow+0xde>
 8011b44:	e7b5      	b.n	8011ab2 <pow+0x22a>
 8011b46:	bf00      	nop
 8011b48:	0801422e 	.word	0x0801422e
 8011b4c:	3ff00000 	.word	0x3ff00000
 8011b50:	fff00000 	.word	0xfff00000
 8011b54:	3fe00000 	.word	0x3fe00000
 8011b58:	47efffff 	.word	0x47efffff
 8011b5c:	c7efffff 	.word	0xc7efffff
 8011b60:	7ff00000 	.word	0x7ff00000
 8011b64:	20001e08 	.word	0x20001e08

08011b68 <__ieee754_log10>:
 8011b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b6c:	ec55 4b10 	vmov	r4, r5, d0
 8011b70:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011b74:	462b      	mov	r3, r5
 8011b76:	da2f      	bge.n	8011bd8 <__ieee754_log10+0x70>
 8011b78:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011b7c:	4322      	orrs	r2, r4
 8011b7e:	d10a      	bne.n	8011b96 <__ieee754_log10+0x2e>
 8011b80:	493b      	ldr	r1, [pc, #236]	; (8011c70 <__ieee754_log10+0x108>)
 8011b82:	2200      	movs	r2, #0
 8011b84:	2300      	movs	r3, #0
 8011b86:	2000      	movs	r0, #0
 8011b88:	f7ee fe88 	bl	800089c <__aeabi_ddiv>
 8011b8c:	ec41 0b10 	vmov	d0, r0, r1
 8011b90:	b003      	add	sp, #12
 8011b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b96:	2d00      	cmp	r5, #0
 8011b98:	da08      	bge.n	8011bac <__ieee754_log10+0x44>
 8011b9a:	ee10 2a10 	vmov	r2, s0
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	f7ee fb99 	bl	80002d8 <__aeabi_dsub>
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	2300      	movs	r3, #0
 8011baa:	e7ed      	b.n	8011b88 <__ieee754_log10+0x20>
 8011bac:	2200      	movs	r2, #0
 8011bae:	4b31      	ldr	r3, [pc, #196]	; (8011c74 <__ieee754_log10+0x10c>)
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	ee10 0a10 	vmov	r0, s0
 8011bb6:	f7ee fd47 	bl	8000648 <__aeabi_dmul>
 8011bba:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	492c      	ldr	r1, [pc, #176]	; (8011c78 <__ieee754_log10+0x110>)
 8011bc6:	428b      	cmp	r3, r1
 8011bc8:	dd08      	ble.n	8011bdc <__ieee754_log10+0x74>
 8011bca:	4622      	mov	r2, r4
 8011bcc:	462b      	mov	r3, r5
 8011bce:	4620      	mov	r0, r4
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	f7ee fb83 	bl	80002dc <__adddf3>
 8011bd6:	e7d9      	b.n	8011b8c <__ieee754_log10+0x24>
 8011bd8:	2200      	movs	r2, #0
 8011bda:	e7f3      	b.n	8011bc4 <__ieee754_log10+0x5c>
 8011bdc:	1518      	asrs	r0, r3, #20
 8011bde:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011be2:	4410      	add	r0, r2
 8011be4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011be8:	4448      	add	r0, r9
 8011bea:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011bee:	f7ee fcc1 	bl	8000574 <__aeabi_i2d>
 8011bf2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8011bf6:	3303      	adds	r3, #3
 8011bf8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011bfc:	ec45 4b10 	vmov	d0, r4, r5
 8011c00:	4606      	mov	r6, r0
 8011c02:	460f      	mov	r7, r1
 8011c04:	f000 ff14 	bl	8012a30 <__ieee754_log>
 8011c08:	a313      	add	r3, pc, #76	; (adr r3, 8011c58 <__ieee754_log10+0xf0>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	4630      	mov	r0, r6
 8011c10:	4639      	mov	r1, r7
 8011c12:	ed8d 0b00 	vstr	d0, [sp]
 8011c16:	f7ee fd17 	bl	8000648 <__aeabi_dmul>
 8011c1a:	ed9d 0b00 	vldr	d0, [sp]
 8011c1e:	4604      	mov	r4, r0
 8011c20:	460d      	mov	r5, r1
 8011c22:	a30f      	add	r3, pc, #60	; (adr r3, 8011c60 <__ieee754_log10+0xf8>)
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	ec51 0b10 	vmov	r0, r1, d0
 8011c2c:	f7ee fd0c 	bl	8000648 <__aeabi_dmul>
 8011c30:	4602      	mov	r2, r0
 8011c32:	460b      	mov	r3, r1
 8011c34:	4620      	mov	r0, r4
 8011c36:	4629      	mov	r1, r5
 8011c38:	f7ee fb50 	bl	80002dc <__adddf3>
 8011c3c:	a30a      	add	r3, pc, #40	; (adr r3, 8011c68 <__ieee754_log10+0x100>)
 8011c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c42:	4604      	mov	r4, r0
 8011c44:	460d      	mov	r5, r1
 8011c46:	4630      	mov	r0, r6
 8011c48:	4639      	mov	r1, r7
 8011c4a:	f7ee fcfd 	bl	8000648 <__aeabi_dmul>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	4620      	mov	r0, r4
 8011c54:	4629      	mov	r1, r5
 8011c56:	e7bc      	b.n	8011bd2 <__ieee754_log10+0x6a>
 8011c58:	11f12b36 	.word	0x11f12b36
 8011c5c:	3d59fef3 	.word	0x3d59fef3
 8011c60:	1526e50e 	.word	0x1526e50e
 8011c64:	3fdbcb7b 	.word	0x3fdbcb7b
 8011c68:	509f6000 	.word	0x509f6000
 8011c6c:	3fd34413 	.word	0x3fd34413
 8011c70:	c3500000 	.word	0xc3500000
 8011c74:	43500000 	.word	0x43500000
 8011c78:	7fefffff 	.word	0x7fefffff
 8011c7c:	00000000 	.word	0x00000000

08011c80 <__ieee754_pow>:
 8011c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c84:	b091      	sub	sp, #68	; 0x44
 8011c86:	ed8d 1b00 	vstr	d1, [sp]
 8011c8a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011c8e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011c92:	ea58 0302 	orrs.w	r3, r8, r2
 8011c96:	ec57 6b10 	vmov	r6, r7, d0
 8011c9a:	f000 84be 	beq.w	801261a <__ieee754_pow+0x99a>
 8011c9e:	4b7a      	ldr	r3, [pc, #488]	; (8011e88 <__ieee754_pow+0x208>)
 8011ca0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	463d      	mov	r5, r7
 8011ca8:	ee10 aa10 	vmov	sl, s0
 8011cac:	dc09      	bgt.n	8011cc2 <__ieee754_pow+0x42>
 8011cae:	d103      	bne.n	8011cb8 <__ieee754_pow+0x38>
 8011cb0:	b93e      	cbnz	r6, 8011cc2 <__ieee754_pow+0x42>
 8011cb2:	45a0      	cmp	r8, r4
 8011cb4:	dc0d      	bgt.n	8011cd2 <__ieee754_pow+0x52>
 8011cb6:	e001      	b.n	8011cbc <__ieee754_pow+0x3c>
 8011cb8:	4598      	cmp	r8, r3
 8011cba:	dc02      	bgt.n	8011cc2 <__ieee754_pow+0x42>
 8011cbc:	4598      	cmp	r8, r3
 8011cbe:	d10e      	bne.n	8011cde <__ieee754_pow+0x5e>
 8011cc0:	b16a      	cbz	r2, 8011cde <__ieee754_pow+0x5e>
 8011cc2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011cc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011cca:	ea54 030a 	orrs.w	r3, r4, sl
 8011cce:	f000 84a4 	beq.w	801261a <__ieee754_pow+0x99a>
 8011cd2:	486e      	ldr	r0, [pc, #440]	; (8011e8c <__ieee754_pow+0x20c>)
 8011cd4:	b011      	add	sp, #68	; 0x44
 8011cd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cda:	f000 bda5 	b.w	8012828 <nan>
 8011cde:	2d00      	cmp	r5, #0
 8011ce0:	da53      	bge.n	8011d8a <__ieee754_pow+0x10a>
 8011ce2:	4b6b      	ldr	r3, [pc, #428]	; (8011e90 <__ieee754_pow+0x210>)
 8011ce4:	4598      	cmp	r8, r3
 8011ce6:	dc4d      	bgt.n	8011d84 <__ieee754_pow+0x104>
 8011ce8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011cec:	4598      	cmp	r8, r3
 8011cee:	dd4c      	ble.n	8011d8a <__ieee754_pow+0x10a>
 8011cf0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011cf4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011cf8:	2b14      	cmp	r3, #20
 8011cfa:	dd26      	ble.n	8011d4a <__ieee754_pow+0xca>
 8011cfc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011d00:	fa22 f103 	lsr.w	r1, r2, r3
 8011d04:	fa01 f303 	lsl.w	r3, r1, r3
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d13e      	bne.n	8011d8a <__ieee754_pow+0x10a>
 8011d0c:	f001 0101 	and.w	r1, r1, #1
 8011d10:	f1c1 0b02 	rsb	fp, r1, #2
 8011d14:	2a00      	cmp	r2, #0
 8011d16:	d15b      	bne.n	8011dd0 <__ieee754_pow+0x150>
 8011d18:	4b5b      	ldr	r3, [pc, #364]	; (8011e88 <__ieee754_pow+0x208>)
 8011d1a:	4598      	cmp	r8, r3
 8011d1c:	d124      	bne.n	8011d68 <__ieee754_pow+0xe8>
 8011d1e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011d22:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011d26:	ea53 030a 	orrs.w	r3, r3, sl
 8011d2a:	f000 8476 	beq.w	801261a <__ieee754_pow+0x99a>
 8011d2e:	4b59      	ldr	r3, [pc, #356]	; (8011e94 <__ieee754_pow+0x214>)
 8011d30:	429c      	cmp	r4, r3
 8011d32:	dd2d      	ble.n	8011d90 <__ieee754_pow+0x110>
 8011d34:	f1b9 0f00 	cmp.w	r9, #0
 8011d38:	f280 8473 	bge.w	8012622 <__ieee754_pow+0x9a2>
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	2100      	movs	r1, #0
 8011d40:	ec41 0b10 	vmov	d0, r0, r1
 8011d44:	b011      	add	sp, #68	; 0x44
 8011d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4a:	2a00      	cmp	r2, #0
 8011d4c:	d13e      	bne.n	8011dcc <__ieee754_pow+0x14c>
 8011d4e:	f1c3 0314 	rsb	r3, r3, #20
 8011d52:	fa48 f103 	asr.w	r1, r8, r3
 8011d56:	fa01 f303 	lsl.w	r3, r1, r3
 8011d5a:	4543      	cmp	r3, r8
 8011d5c:	f040 8469 	bne.w	8012632 <__ieee754_pow+0x9b2>
 8011d60:	f001 0101 	and.w	r1, r1, #1
 8011d64:	f1c1 0b02 	rsb	fp, r1, #2
 8011d68:	4b4b      	ldr	r3, [pc, #300]	; (8011e98 <__ieee754_pow+0x218>)
 8011d6a:	4598      	cmp	r8, r3
 8011d6c:	d118      	bne.n	8011da0 <__ieee754_pow+0x120>
 8011d6e:	f1b9 0f00 	cmp.w	r9, #0
 8011d72:	f280 845a 	bge.w	801262a <__ieee754_pow+0x9aa>
 8011d76:	4948      	ldr	r1, [pc, #288]	; (8011e98 <__ieee754_pow+0x218>)
 8011d78:	4632      	mov	r2, r6
 8011d7a:	463b      	mov	r3, r7
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	f7ee fd8d 	bl	800089c <__aeabi_ddiv>
 8011d82:	e7dd      	b.n	8011d40 <__ieee754_pow+0xc0>
 8011d84:	f04f 0b02 	mov.w	fp, #2
 8011d88:	e7c4      	b.n	8011d14 <__ieee754_pow+0x94>
 8011d8a:	f04f 0b00 	mov.w	fp, #0
 8011d8e:	e7c1      	b.n	8011d14 <__ieee754_pow+0x94>
 8011d90:	f1b9 0f00 	cmp.w	r9, #0
 8011d94:	dad2      	bge.n	8011d3c <__ieee754_pow+0xbc>
 8011d96:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011d9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011d9e:	e7cf      	b.n	8011d40 <__ieee754_pow+0xc0>
 8011da0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011da4:	d106      	bne.n	8011db4 <__ieee754_pow+0x134>
 8011da6:	4632      	mov	r2, r6
 8011da8:	463b      	mov	r3, r7
 8011daa:	4610      	mov	r0, r2
 8011dac:	4619      	mov	r1, r3
 8011dae:	f7ee fc4b 	bl	8000648 <__aeabi_dmul>
 8011db2:	e7c5      	b.n	8011d40 <__ieee754_pow+0xc0>
 8011db4:	4b39      	ldr	r3, [pc, #228]	; (8011e9c <__ieee754_pow+0x21c>)
 8011db6:	4599      	cmp	r9, r3
 8011db8:	d10a      	bne.n	8011dd0 <__ieee754_pow+0x150>
 8011dba:	2d00      	cmp	r5, #0
 8011dbc:	db08      	blt.n	8011dd0 <__ieee754_pow+0x150>
 8011dbe:	ec47 6b10 	vmov	d0, r6, r7
 8011dc2:	b011      	add	sp, #68	; 0x44
 8011dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc8:	f000 bc68 	b.w	801269c <__ieee754_sqrt>
 8011dcc:	f04f 0b00 	mov.w	fp, #0
 8011dd0:	ec47 6b10 	vmov	d0, r6, r7
 8011dd4:	f000 fd12 	bl	80127fc <fabs>
 8011dd8:	ec51 0b10 	vmov	r0, r1, d0
 8011ddc:	f1ba 0f00 	cmp.w	sl, #0
 8011de0:	d127      	bne.n	8011e32 <__ieee754_pow+0x1b2>
 8011de2:	b124      	cbz	r4, 8011dee <__ieee754_pow+0x16e>
 8011de4:	4b2c      	ldr	r3, [pc, #176]	; (8011e98 <__ieee754_pow+0x218>)
 8011de6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d121      	bne.n	8011e32 <__ieee754_pow+0x1b2>
 8011dee:	f1b9 0f00 	cmp.w	r9, #0
 8011df2:	da05      	bge.n	8011e00 <__ieee754_pow+0x180>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	2000      	movs	r0, #0
 8011dfa:	4927      	ldr	r1, [pc, #156]	; (8011e98 <__ieee754_pow+0x218>)
 8011dfc:	f7ee fd4e 	bl	800089c <__aeabi_ddiv>
 8011e00:	2d00      	cmp	r5, #0
 8011e02:	da9d      	bge.n	8011d40 <__ieee754_pow+0xc0>
 8011e04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e0c:	ea54 030b 	orrs.w	r3, r4, fp
 8011e10:	d108      	bne.n	8011e24 <__ieee754_pow+0x1a4>
 8011e12:	4602      	mov	r2, r0
 8011e14:	460b      	mov	r3, r1
 8011e16:	4610      	mov	r0, r2
 8011e18:	4619      	mov	r1, r3
 8011e1a:	f7ee fa5d 	bl	80002d8 <__aeabi_dsub>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	e7ac      	b.n	8011d7e <__ieee754_pow+0xfe>
 8011e24:	f1bb 0f01 	cmp.w	fp, #1
 8011e28:	d18a      	bne.n	8011d40 <__ieee754_pow+0xc0>
 8011e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e2e:	4619      	mov	r1, r3
 8011e30:	e786      	b.n	8011d40 <__ieee754_pow+0xc0>
 8011e32:	0fed      	lsrs	r5, r5, #31
 8011e34:	1e6b      	subs	r3, r5, #1
 8011e36:	930d      	str	r3, [sp, #52]	; 0x34
 8011e38:	ea5b 0303 	orrs.w	r3, fp, r3
 8011e3c:	d102      	bne.n	8011e44 <__ieee754_pow+0x1c4>
 8011e3e:	4632      	mov	r2, r6
 8011e40:	463b      	mov	r3, r7
 8011e42:	e7e8      	b.n	8011e16 <__ieee754_pow+0x196>
 8011e44:	4b16      	ldr	r3, [pc, #88]	; (8011ea0 <__ieee754_pow+0x220>)
 8011e46:	4598      	cmp	r8, r3
 8011e48:	f340 80fe 	ble.w	8012048 <__ieee754_pow+0x3c8>
 8011e4c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011e50:	4598      	cmp	r8, r3
 8011e52:	dd0a      	ble.n	8011e6a <__ieee754_pow+0x1ea>
 8011e54:	4b0f      	ldr	r3, [pc, #60]	; (8011e94 <__ieee754_pow+0x214>)
 8011e56:	429c      	cmp	r4, r3
 8011e58:	dc0d      	bgt.n	8011e76 <__ieee754_pow+0x1f6>
 8011e5a:	f1b9 0f00 	cmp.w	r9, #0
 8011e5e:	f6bf af6d 	bge.w	8011d3c <__ieee754_pow+0xbc>
 8011e62:	a307      	add	r3, pc, #28	; (adr r3, 8011e80 <__ieee754_pow+0x200>)
 8011e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e68:	e79f      	b.n	8011daa <__ieee754_pow+0x12a>
 8011e6a:	4b0e      	ldr	r3, [pc, #56]	; (8011ea4 <__ieee754_pow+0x224>)
 8011e6c:	429c      	cmp	r4, r3
 8011e6e:	ddf4      	ble.n	8011e5a <__ieee754_pow+0x1da>
 8011e70:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <__ieee754_pow+0x218>)
 8011e72:	429c      	cmp	r4, r3
 8011e74:	dd18      	ble.n	8011ea8 <__ieee754_pow+0x228>
 8011e76:	f1b9 0f00 	cmp.w	r9, #0
 8011e7a:	dcf2      	bgt.n	8011e62 <__ieee754_pow+0x1e2>
 8011e7c:	e75e      	b.n	8011d3c <__ieee754_pow+0xbc>
 8011e7e:	bf00      	nop
 8011e80:	8800759c 	.word	0x8800759c
 8011e84:	7e37e43c 	.word	0x7e37e43c
 8011e88:	7ff00000 	.word	0x7ff00000
 8011e8c:	08014111 	.word	0x08014111
 8011e90:	433fffff 	.word	0x433fffff
 8011e94:	3fefffff 	.word	0x3fefffff
 8011e98:	3ff00000 	.word	0x3ff00000
 8011e9c:	3fe00000 	.word	0x3fe00000
 8011ea0:	41e00000 	.word	0x41e00000
 8011ea4:	3feffffe 	.word	0x3feffffe
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	4b63      	ldr	r3, [pc, #396]	; (8012038 <__ieee754_pow+0x3b8>)
 8011eac:	f7ee fa14 	bl	80002d8 <__aeabi_dsub>
 8011eb0:	a355      	add	r3, pc, #340	; (adr r3, 8012008 <__ieee754_pow+0x388>)
 8011eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	460d      	mov	r5, r1
 8011eba:	f7ee fbc5 	bl	8000648 <__aeabi_dmul>
 8011ebe:	a354      	add	r3, pc, #336	; (adr r3, 8012010 <__ieee754_pow+0x390>)
 8011ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	4620      	mov	r0, r4
 8011eca:	4629      	mov	r1, r5
 8011ecc:	f7ee fbbc 	bl	8000648 <__aeabi_dmul>
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ed6:	4b59      	ldr	r3, [pc, #356]	; (801203c <__ieee754_pow+0x3bc>)
 8011ed8:	4620      	mov	r0, r4
 8011eda:	4629      	mov	r1, r5
 8011edc:	f7ee fbb4 	bl	8000648 <__aeabi_dmul>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	a14c      	add	r1, pc, #304	; (adr r1, 8012018 <__ieee754_pow+0x398>)
 8011ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011eea:	f7ee f9f5 	bl	80002d8 <__aeabi_dsub>
 8011eee:	4622      	mov	r2, r4
 8011ef0:	462b      	mov	r3, r5
 8011ef2:	f7ee fba9 	bl	8000648 <__aeabi_dmul>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	2000      	movs	r0, #0
 8011efc:	4950      	ldr	r1, [pc, #320]	; (8012040 <__ieee754_pow+0x3c0>)
 8011efe:	f7ee f9eb 	bl	80002d8 <__aeabi_dsub>
 8011f02:	4622      	mov	r2, r4
 8011f04:	462b      	mov	r3, r5
 8011f06:	4680      	mov	r8, r0
 8011f08:	4689      	mov	r9, r1
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	f7ee fb9b 	bl	8000648 <__aeabi_dmul>
 8011f12:	4602      	mov	r2, r0
 8011f14:	460b      	mov	r3, r1
 8011f16:	4640      	mov	r0, r8
 8011f18:	4649      	mov	r1, r9
 8011f1a:	f7ee fb95 	bl	8000648 <__aeabi_dmul>
 8011f1e:	a340      	add	r3, pc, #256	; (adr r3, 8012020 <__ieee754_pow+0x3a0>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	f7ee fb90 	bl	8000648 <__aeabi_dmul>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f30:	f7ee f9d2 	bl	80002d8 <__aeabi_dsub>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	4604      	mov	r4, r0
 8011f3a:	460d      	mov	r5, r1
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	4639      	mov	r1, r7
 8011f40:	f7ee f9cc 	bl	80002dc <__adddf3>
 8011f44:	2000      	movs	r0, #0
 8011f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f4a:	4632      	mov	r2, r6
 8011f4c:	463b      	mov	r3, r7
 8011f4e:	f7ee f9c3 	bl	80002d8 <__aeabi_dsub>
 8011f52:	4602      	mov	r2, r0
 8011f54:	460b      	mov	r3, r1
 8011f56:	4620      	mov	r0, r4
 8011f58:	4629      	mov	r1, r5
 8011f5a:	f7ee f9bd 	bl	80002d8 <__aeabi_dsub>
 8011f5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f60:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011f64:	4313      	orrs	r3, r2
 8011f66:	4606      	mov	r6, r0
 8011f68:	460f      	mov	r7, r1
 8011f6a:	f040 81eb 	bne.w	8012344 <__ieee754_pow+0x6c4>
 8011f6e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012028 <__ieee754_pow+0x3a8>
 8011f72:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011f76:	2400      	movs	r4, #0
 8011f78:	4622      	mov	r2, r4
 8011f7a:	462b      	mov	r3, r5
 8011f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f84:	f7ee f9a8 	bl	80002d8 <__aeabi_dsub>
 8011f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f8c:	f7ee fb5c 	bl	8000648 <__aeabi_dmul>
 8011f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f94:	4680      	mov	r8, r0
 8011f96:	4689      	mov	r9, r1
 8011f98:	4630      	mov	r0, r6
 8011f9a:	4639      	mov	r1, r7
 8011f9c:	f7ee fb54 	bl	8000648 <__aeabi_dmul>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	4640      	mov	r0, r8
 8011fa6:	4649      	mov	r1, r9
 8011fa8:	f7ee f998 	bl	80002dc <__adddf3>
 8011fac:	4622      	mov	r2, r4
 8011fae:	462b      	mov	r3, r5
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	4689      	mov	r9, r1
 8011fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fb8:	f7ee fb46 	bl	8000648 <__aeabi_dmul>
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	460d      	mov	r5, r1
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	4640      	mov	r0, r8
 8011fc8:	e9cd 4500 	strd	r4, r5, [sp]
 8011fcc:	f7ee f986 	bl	80002dc <__adddf3>
 8011fd0:	4b1c      	ldr	r3, [pc, #112]	; (8012044 <__ieee754_pow+0x3c4>)
 8011fd2:	4299      	cmp	r1, r3
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	460f      	mov	r7, r1
 8011fd8:	468b      	mov	fp, r1
 8011fda:	f340 82f7 	ble.w	80125cc <__ieee754_pow+0x94c>
 8011fde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011fe2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011fe6:	4303      	orrs	r3, r0
 8011fe8:	f000 81ea 	beq.w	80123c0 <__ieee754_pow+0x740>
 8011fec:	a310      	add	r3, pc, #64	; (adr r3, 8012030 <__ieee754_pow+0x3b0>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ff6:	f7ee fb27 	bl	8000648 <__aeabi_dmul>
 8011ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8012030 <__ieee754_pow+0x3b0>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	e6d5      	b.n	8011dae <__ieee754_pow+0x12e>
 8012002:	bf00      	nop
 8012004:	f3af 8000 	nop.w
 8012008:	60000000 	.word	0x60000000
 801200c:	3ff71547 	.word	0x3ff71547
 8012010:	f85ddf44 	.word	0xf85ddf44
 8012014:	3e54ae0b 	.word	0x3e54ae0b
 8012018:	55555555 	.word	0x55555555
 801201c:	3fd55555 	.word	0x3fd55555
 8012020:	652b82fe 	.word	0x652b82fe
 8012024:	3ff71547 	.word	0x3ff71547
 8012028:	00000000 	.word	0x00000000
 801202c:	bff00000 	.word	0xbff00000
 8012030:	8800759c 	.word	0x8800759c
 8012034:	7e37e43c 	.word	0x7e37e43c
 8012038:	3ff00000 	.word	0x3ff00000
 801203c:	3fd00000 	.word	0x3fd00000
 8012040:	3fe00000 	.word	0x3fe00000
 8012044:	408fffff 	.word	0x408fffff
 8012048:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801204c:	f04f 0200 	mov.w	r2, #0
 8012050:	da05      	bge.n	801205e <__ieee754_pow+0x3de>
 8012052:	4bd3      	ldr	r3, [pc, #844]	; (80123a0 <__ieee754_pow+0x720>)
 8012054:	f7ee faf8 	bl	8000648 <__aeabi_dmul>
 8012058:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801205c:	460c      	mov	r4, r1
 801205e:	1523      	asrs	r3, r4, #20
 8012060:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012064:	4413      	add	r3, r2
 8012066:	9309      	str	r3, [sp, #36]	; 0x24
 8012068:	4bce      	ldr	r3, [pc, #824]	; (80123a4 <__ieee754_pow+0x724>)
 801206a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801206e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012072:	429c      	cmp	r4, r3
 8012074:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012078:	dd08      	ble.n	801208c <__ieee754_pow+0x40c>
 801207a:	4bcb      	ldr	r3, [pc, #812]	; (80123a8 <__ieee754_pow+0x728>)
 801207c:	429c      	cmp	r4, r3
 801207e:	f340 815e 	ble.w	801233e <__ieee754_pow+0x6be>
 8012082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012084:	3301      	adds	r3, #1
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801208c:	f04f 0a00 	mov.w	sl, #0
 8012090:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012094:	930c      	str	r3, [sp, #48]	; 0x30
 8012096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012098:	4bc4      	ldr	r3, [pc, #784]	; (80123ac <__ieee754_pow+0x72c>)
 801209a:	4413      	add	r3, r2
 801209c:	ed93 7b00 	vldr	d7, [r3]
 80120a0:	4629      	mov	r1, r5
 80120a2:	ec53 2b17 	vmov	r2, r3, d7
 80120a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80120ae:	f7ee f913 	bl	80002d8 <__aeabi_dsub>
 80120b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80120b6:	4606      	mov	r6, r0
 80120b8:	460f      	mov	r7, r1
 80120ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120be:	f7ee f90d 	bl	80002dc <__adddf3>
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	2000      	movs	r0, #0
 80120c8:	49b9      	ldr	r1, [pc, #740]	; (80123b0 <__ieee754_pow+0x730>)
 80120ca:	f7ee fbe7 	bl	800089c <__aeabi_ddiv>
 80120ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80120d2:	4602      	mov	r2, r0
 80120d4:	460b      	mov	r3, r1
 80120d6:	4630      	mov	r0, r6
 80120d8:	4639      	mov	r1, r7
 80120da:	f7ee fab5 	bl	8000648 <__aeabi_dmul>
 80120de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80120e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80120ea:	2300      	movs	r3, #0
 80120ec:	9302      	str	r3, [sp, #8]
 80120ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80120f2:	106d      	asrs	r5, r5, #1
 80120f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80120f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80120fc:	2200      	movs	r2, #0
 80120fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012102:	4640      	mov	r0, r8
 8012104:	4649      	mov	r1, r9
 8012106:	4614      	mov	r4, r2
 8012108:	461d      	mov	r5, r3
 801210a:	f7ee fa9d 	bl	8000648 <__aeabi_dmul>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4630      	mov	r0, r6
 8012114:	4639      	mov	r1, r7
 8012116:	f7ee f8df 	bl	80002d8 <__aeabi_dsub>
 801211a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801211e:	4606      	mov	r6, r0
 8012120:	460f      	mov	r7, r1
 8012122:	4620      	mov	r0, r4
 8012124:	4629      	mov	r1, r5
 8012126:	f7ee f8d7 	bl	80002d8 <__aeabi_dsub>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012132:	f7ee f8d1 	bl	80002d8 <__aeabi_dsub>
 8012136:	4642      	mov	r2, r8
 8012138:	464b      	mov	r3, r9
 801213a:	f7ee fa85 	bl	8000648 <__aeabi_dmul>
 801213e:	4602      	mov	r2, r0
 8012140:	460b      	mov	r3, r1
 8012142:	4630      	mov	r0, r6
 8012144:	4639      	mov	r1, r7
 8012146:	f7ee f8c7 	bl	80002d8 <__aeabi_dsub>
 801214a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801214e:	f7ee fa7b 	bl	8000648 <__aeabi_dmul>
 8012152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801215a:	4610      	mov	r0, r2
 801215c:	4619      	mov	r1, r3
 801215e:	f7ee fa73 	bl	8000648 <__aeabi_dmul>
 8012162:	a37b      	add	r3, pc, #492	; (adr r3, 8012350 <__ieee754_pow+0x6d0>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	4604      	mov	r4, r0
 801216a:	460d      	mov	r5, r1
 801216c:	f7ee fa6c 	bl	8000648 <__aeabi_dmul>
 8012170:	a379      	add	r3, pc, #484	; (adr r3, 8012358 <__ieee754_pow+0x6d8>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f7ee f8b1 	bl	80002dc <__adddf3>
 801217a:	4622      	mov	r2, r4
 801217c:	462b      	mov	r3, r5
 801217e:	f7ee fa63 	bl	8000648 <__aeabi_dmul>
 8012182:	a377      	add	r3, pc, #476	; (adr r3, 8012360 <__ieee754_pow+0x6e0>)
 8012184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012188:	f7ee f8a8 	bl	80002dc <__adddf3>
 801218c:	4622      	mov	r2, r4
 801218e:	462b      	mov	r3, r5
 8012190:	f7ee fa5a 	bl	8000648 <__aeabi_dmul>
 8012194:	a374      	add	r3, pc, #464	; (adr r3, 8012368 <__ieee754_pow+0x6e8>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	f7ee f89f 	bl	80002dc <__adddf3>
 801219e:	4622      	mov	r2, r4
 80121a0:	462b      	mov	r3, r5
 80121a2:	f7ee fa51 	bl	8000648 <__aeabi_dmul>
 80121a6:	a372      	add	r3, pc, #456	; (adr r3, 8012370 <__ieee754_pow+0x6f0>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f7ee f896 	bl	80002dc <__adddf3>
 80121b0:	4622      	mov	r2, r4
 80121b2:	462b      	mov	r3, r5
 80121b4:	f7ee fa48 	bl	8000648 <__aeabi_dmul>
 80121b8:	a36f      	add	r3, pc, #444	; (adr r3, 8012378 <__ieee754_pow+0x6f8>)
 80121ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121be:	f7ee f88d 	bl	80002dc <__adddf3>
 80121c2:	4622      	mov	r2, r4
 80121c4:	4606      	mov	r6, r0
 80121c6:	460f      	mov	r7, r1
 80121c8:	462b      	mov	r3, r5
 80121ca:	4620      	mov	r0, r4
 80121cc:	4629      	mov	r1, r5
 80121ce:	f7ee fa3b 	bl	8000648 <__aeabi_dmul>
 80121d2:	4602      	mov	r2, r0
 80121d4:	460b      	mov	r3, r1
 80121d6:	4630      	mov	r0, r6
 80121d8:	4639      	mov	r1, r7
 80121da:	f7ee fa35 	bl	8000648 <__aeabi_dmul>
 80121de:	4642      	mov	r2, r8
 80121e0:	4604      	mov	r4, r0
 80121e2:	460d      	mov	r5, r1
 80121e4:	464b      	mov	r3, r9
 80121e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121ea:	f7ee f877 	bl	80002dc <__adddf3>
 80121ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121f2:	f7ee fa29 	bl	8000648 <__aeabi_dmul>
 80121f6:	4622      	mov	r2, r4
 80121f8:	462b      	mov	r3, r5
 80121fa:	f7ee f86f 	bl	80002dc <__adddf3>
 80121fe:	4642      	mov	r2, r8
 8012200:	4606      	mov	r6, r0
 8012202:	460f      	mov	r7, r1
 8012204:	464b      	mov	r3, r9
 8012206:	4640      	mov	r0, r8
 8012208:	4649      	mov	r1, r9
 801220a:	f7ee fa1d 	bl	8000648 <__aeabi_dmul>
 801220e:	2200      	movs	r2, #0
 8012210:	4b68      	ldr	r3, [pc, #416]	; (80123b4 <__ieee754_pow+0x734>)
 8012212:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012216:	f7ee f861 	bl	80002dc <__adddf3>
 801221a:	4632      	mov	r2, r6
 801221c:	463b      	mov	r3, r7
 801221e:	f7ee f85d 	bl	80002dc <__adddf3>
 8012222:	9802      	ldr	r0, [sp, #8]
 8012224:	460d      	mov	r5, r1
 8012226:	4604      	mov	r4, r0
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4640      	mov	r0, r8
 801222e:	4649      	mov	r1, r9
 8012230:	f7ee fa0a 	bl	8000648 <__aeabi_dmul>
 8012234:	2200      	movs	r2, #0
 8012236:	4680      	mov	r8, r0
 8012238:	4689      	mov	r9, r1
 801223a:	4b5e      	ldr	r3, [pc, #376]	; (80123b4 <__ieee754_pow+0x734>)
 801223c:	4620      	mov	r0, r4
 801223e:	4629      	mov	r1, r5
 8012240:	f7ee f84a 	bl	80002d8 <__aeabi_dsub>
 8012244:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012248:	f7ee f846 	bl	80002d8 <__aeabi_dsub>
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	4630      	mov	r0, r6
 8012252:	4639      	mov	r1, r7
 8012254:	f7ee f840 	bl	80002d8 <__aeabi_dsub>
 8012258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801225c:	f7ee f9f4 	bl	8000648 <__aeabi_dmul>
 8012260:	4622      	mov	r2, r4
 8012262:	4606      	mov	r6, r0
 8012264:	460f      	mov	r7, r1
 8012266:	462b      	mov	r3, r5
 8012268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801226c:	f7ee f9ec 	bl	8000648 <__aeabi_dmul>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4630      	mov	r0, r6
 8012276:	4639      	mov	r1, r7
 8012278:	f7ee f830 	bl	80002dc <__adddf3>
 801227c:	4606      	mov	r6, r0
 801227e:	460f      	mov	r7, r1
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	4640      	mov	r0, r8
 8012286:	4649      	mov	r1, r9
 8012288:	f7ee f828 	bl	80002dc <__adddf3>
 801228c:	9802      	ldr	r0, [sp, #8]
 801228e:	a33c      	add	r3, pc, #240	; (adr r3, 8012380 <__ieee754_pow+0x700>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	4604      	mov	r4, r0
 8012296:	460d      	mov	r5, r1
 8012298:	f7ee f9d6 	bl	8000648 <__aeabi_dmul>
 801229c:	4642      	mov	r2, r8
 801229e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80122a2:	464b      	mov	r3, r9
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f7ee f816 	bl	80002d8 <__aeabi_dsub>
 80122ac:	4602      	mov	r2, r0
 80122ae:	460b      	mov	r3, r1
 80122b0:	4630      	mov	r0, r6
 80122b2:	4639      	mov	r1, r7
 80122b4:	f7ee f810 	bl	80002d8 <__aeabi_dsub>
 80122b8:	a333      	add	r3, pc, #204	; (adr r3, 8012388 <__ieee754_pow+0x708>)
 80122ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122be:	f7ee f9c3 	bl	8000648 <__aeabi_dmul>
 80122c2:	a333      	add	r3, pc, #204	; (adr r3, 8012390 <__ieee754_pow+0x710>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	4606      	mov	r6, r0
 80122ca:	460f      	mov	r7, r1
 80122cc:	4620      	mov	r0, r4
 80122ce:	4629      	mov	r1, r5
 80122d0:	f7ee f9ba 	bl	8000648 <__aeabi_dmul>
 80122d4:	4602      	mov	r2, r0
 80122d6:	460b      	mov	r3, r1
 80122d8:	4630      	mov	r0, r6
 80122da:	4639      	mov	r1, r7
 80122dc:	f7ed fffe 	bl	80002dc <__adddf3>
 80122e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122e2:	4b35      	ldr	r3, [pc, #212]	; (80123b8 <__ieee754_pow+0x738>)
 80122e4:	4413      	add	r3, r2
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	f7ed fff7 	bl	80002dc <__adddf3>
 80122ee:	4604      	mov	r4, r0
 80122f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122f2:	460d      	mov	r5, r1
 80122f4:	f7ee f93e 	bl	8000574 <__aeabi_i2d>
 80122f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122fa:	4b30      	ldr	r3, [pc, #192]	; (80123bc <__ieee754_pow+0x73c>)
 80122fc:	4413      	add	r3, r2
 80122fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	4622      	mov	r2, r4
 8012308:	462b      	mov	r3, r5
 801230a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801230e:	f7ed ffe5 	bl	80002dc <__adddf3>
 8012312:	4642      	mov	r2, r8
 8012314:	464b      	mov	r3, r9
 8012316:	f7ed ffe1 	bl	80002dc <__adddf3>
 801231a:	4632      	mov	r2, r6
 801231c:	463b      	mov	r3, r7
 801231e:	f7ed ffdd 	bl	80002dc <__adddf3>
 8012322:	9802      	ldr	r0, [sp, #8]
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801232c:	f7ed ffd4 	bl	80002d8 <__aeabi_dsub>
 8012330:	4642      	mov	r2, r8
 8012332:	464b      	mov	r3, r9
 8012334:	f7ed ffd0 	bl	80002d8 <__aeabi_dsub>
 8012338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801233c:	e607      	b.n	8011f4e <__ieee754_pow+0x2ce>
 801233e:	f04f 0a01 	mov.w	sl, #1
 8012342:	e6a5      	b.n	8012090 <__ieee754_pow+0x410>
 8012344:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012398 <__ieee754_pow+0x718>
 8012348:	e613      	b.n	8011f72 <__ieee754_pow+0x2f2>
 801234a:	bf00      	nop
 801234c:	f3af 8000 	nop.w
 8012350:	4a454eef 	.word	0x4a454eef
 8012354:	3fca7e28 	.word	0x3fca7e28
 8012358:	93c9db65 	.word	0x93c9db65
 801235c:	3fcd864a 	.word	0x3fcd864a
 8012360:	a91d4101 	.word	0xa91d4101
 8012364:	3fd17460 	.word	0x3fd17460
 8012368:	518f264d 	.word	0x518f264d
 801236c:	3fd55555 	.word	0x3fd55555
 8012370:	db6fabff 	.word	0xdb6fabff
 8012374:	3fdb6db6 	.word	0x3fdb6db6
 8012378:	33333303 	.word	0x33333303
 801237c:	3fe33333 	.word	0x3fe33333
 8012380:	e0000000 	.word	0xe0000000
 8012384:	3feec709 	.word	0x3feec709
 8012388:	dc3a03fd 	.word	0xdc3a03fd
 801238c:	3feec709 	.word	0x3feec709
 8012390:	145b01f5 	.word	0x145b01f5
 8012394:	be3e2fe0 	.word	0xbe3e2fe0
 8012398:	00000000 	.word	0x00000000
 801239c:	3ff00000 	.word	0x3ff00000
 80123a0:	43400000 	.word	0x43400000
 80123a4:	0003988e 	.word	0x0003988e
 80123a8:	000bb679 	.word	0x000bb679
 80123ac:	08014238 	.word	0x08014238
 80123b0:	3ff00000 	.word	0x3ff00000
 80123b4:	40080000 	.word	0x40080000
 80123b8:	08014258 	.word	0x08014258
 80123bc:	08014248 	.word	0x08014248
 80123c0:	a3b4      	add	r3, pc, #720	; (adr r3, 8012694 <__ieee754_pow+0xa14>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	4640      	mov	r0, r8
 80123c8:	4649      	mov	r1, r9
 80123ca:	f7ed ff87 	bl	80002dc <__adddf3>
 80123ce:	4622      	mov	r2, r4
 80123d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123d4:	462b      	mov	r3, r5
 80123d6:	4630      	mov	r0, r6
 80123d8:	4639      	mov	r1, r7
 80123da:	f7ed ff7d 	bl	80002d8 <__aeabi_dsub>
 80123de:	4602      	mov	r2, r0
 80123e0:	460b      	mov	r3, r1
 80123e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123e6:	f7ee fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	f47f adfe 	bne.w	8011fec <__ieee754_pow+0x36c>
 80123f0:	4aa3      	ldr	r2, [pc, #652]	; (8012680 <__ieee754_pow+0xa00>)
 80123f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123f6:	4293      	cmp	r3, r2
 80123f8:	f340 810a 	ble.w	8012610 <__ieee754_pow+0x990>
 80123fc:	151b      	asrs	r3, r3, #20
 80123fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012402:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012406:	fa4a f303 	asr.w	r3, sl, r3
 801240a:	445b      	add	r3, fp
 801240c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012410:	4e9c      	ldr	r6, [pc, #624]	; (8012684 <__ieee754_pow+0xa04>)
 8012412:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012416:	4116      	asrs	r6, r2
 8012418:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801241c:	2000      	movs	r0, #0
 801241e:	ea23 0106 	bic.w	r1, r3, r6
 8012422:	f1c2 0214 	rsb	r2, r2, #20
 8012426:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801242a:	fa4a fa02 	asr.w	sl, sl, r2
 801242e:	f1bb 0f00 	cmp.w	fp, #0
 8012432:	4602      	mov	r2, r0
 8012434:	460b      	mov	r3, r1
 8012436:	4620      	mov	r0, r4
 8012438:	4629      	mov	r1, r5
 801243a:	bfb8      	it	lt
 801243c:	f1ca 0a00 	rsblt	sl, sl, #0
 8012440:	f7ed ff4a 	bl	80002d8 <__aeabi_dsub>
 8012444:	e9cd 0100 	strd	r0, r1, [sp]
 8012448:	4642      	mov	r2, r8
 801244a:	464b      	mov	r3, r9
 801244c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012450:	f7ed ff44 	bl	80002dc <__adddf3>
 8012454:	2000      	movs	r0, #0
 8012456:	a378      	add	r3, pc, #480	; (adr r3, 8012638 <__ieee754_pow+0x9b8>)
 8012458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245c:	4604      	mov	r4, r0
 801245e:	460d      	mov	r5, r1
 8012460:	f7ee f8f2 	bl	8000648 <__aeabi_dmul>
 8012464:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012468:	4606      	mov	r6, r0
 801246a:	460f      	mov	r7, r1
 801246c:	4620      	mov	r0, r4
 801246e:	4629      	mov	r1, r5
 8012470:	f7ed ff32 	bl	80002d8 <__aeabi_dsub>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	4640      	mov	r0, r8
 801247a:	4649      	mov	r1, r9
 801247c:	f7ed ff2c 	bl	80002d8 <__aeabi_dsub>
 8012480:	a36f      	add	r3, pc, #444	; (adr r3, 8012640 <__ieee754_pow+0x9c0>)
 8012482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012486:	f7ee f8df 	bl	8000648 <__aeabi_dmul>
 801248a:	a36f      	add	r3, pc, #444	; (adr r3, 8012648 <__ieee754_pow+0x9c8>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	4680      	mov	r8, r0
 8012492:	4689      	mov	r9, r1
 8012494:	4620      	mov	r0, r4
 8012496:	4629      	mov	r1, r5
 8012498:	f7ee f8d6 	bl	8000648 <__aeabi_dmul>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	4640      	mov	r0, r8
 80124a2:	4649      	mov	r1, r9
 80124a4:	f7ed ff1a 	bl	80002dc <__adddf3>
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	4602      	mov	r2, r0
 80124ae:	460b      	mov	r3, r1
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	f7ed ff12 	bl	80002dc <__adddf3>
 80124b8:	4632      	mov	r2, r6
 80124ba:	463b      	mov	r3, r7
 80124bc:	4680      	mov	r8, r0
 80124be:	4689      	mov	r9, r1
 80124c0:	f7ed ff0a 	bl	80002d8 <__aeabi_dsub>
 80124c4:	4602      	mov	r2, r0
 80124c6:	460b      	mov	r3, r1
 80124c8:	4620      	mov	r0, r4
 80124ca:	4629      	mov	r1, r5
 80124cc:	f7ed ff04 	bl	80002d8 <__aeabi_dsub>
 80124d0:	4642      	mov	r2, r8
 80124d2:	4606      	mov	r6, r0
 80124d4:	460f      	mov	r7, r1
 80124d6:	464b      	mov	r3, r9
 80124d8:	4640      	mov	r0, r8
 80124da:	4649      	mov	r1, r9
 80124dc:	f7ee f8b4 	bl	8000648 <__aeabi_dmul>
 80124e0:	a35b      	add	r3, pc, #364	; (adr r3, 8012650 <__ieee754_pow+0x9d0>)
 80124e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e6:	4604      	mov	r4, r0
 80124e8:	460d      	mov	r5, r1
 80124ea:	f7ee f8ad 	bl	8000648 <__aeabi_dmul>
 80124ee:	a35a      	add	r3, pc, #360	; (adr r3, 8012658 <__ieee754_pow+0x9d8>)
 80124f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f4:	f7ed fef0 	bl	80002d8 <__aeabi_dsub>
 80124f8:	4622      	mov	r2, r4
 80124fa:	462b      	mov	r3, r5
 80124fc:	f7ee f8a4 	bl	8000648 <__aeabi_dmul>
 8012500:	a357      	add	r3, pc, #348	; (adr r3, 8012660 <__ieee754_pow+0x9e0>)
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f7ed fee9 	bl	80002dc <__adddf3>
 801250a:	4622      	mov	r2, r4
 801250c:	462b      	mov	r3, r5
 801250e:	f7ee f89b 	bl	8000648 <__aeabi_dmul>
 8012512:	a355      	add	r3, pc, #340	; (adr r3, 8012668 <__ieee754_pow+0x9e8>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	f7ed fede 	bl	80002d8 <__aeabi_dsub>
 801251c:	4622      	mov	r2, r4
 801251e:	462b      	mov	r3, r5
 8012520:	f7ee f892 	bl	8000648 <__aeabi_dmul>
 8012524:	a352      	add	r3, pc, #328	; (adr r3, 8012670 <__ieee754_pow+0x9f0>)
 8012526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252a:	f7ed fed7 	bl	80002dc <__adddf3>
 801252e:	4622      	mov	r2, r4
 8012530:	462b      	mov	r3, r5
 8012532:	f7ee f889 	bl	8000648 <__aeabi_dmul>
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	4640      	mov	r0, r8
 801253c:	4649      	mov	r1, r9
 801253e:	f7ed fecb 	bl	80002d8 <__aeabi_dsub>
 8012542:	4604      	mov	r4, r0
 8012544:	460d      	mov	r5, r1
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	4640      	mov	r0, r8
 801254c:	4649      	mov	r1, r9
 801254e:	f7ee f87b 	bl	8000648 <__aeabi_dmul>
 8012552:	2200      	movs	r2, #0
 8012554:	e9cd 0100 	strd	r0, r1, [sp]
 8012558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801255c:	4620      	mov	r0, r4
 801255e:	4629      	mov	r1, r5
 8012560:	f7ed feba 	bl	80002d8 <__aeabi_dsub>
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	e9dd 0100 	ldrd	r0, r1, [sp]
 801256c:	f7ee f996 	bl	800089c <__aeabi_ddiv>
 8012570:	4632      	mov	r2, r6
 8012572:	4604      	mov	r4, r0
 8012574:	460d      	mov	r5, r1
 8012576:	463b      	mov	r3, r7
 8012578:	4640      	mov	r0, r8
 801257a:	4649      	mov	r1, r9
 801257c:	f7ee f864 	bl	8000648 <__aeabi_dmul>
 8012580:	4632      	mov	r2, r6
 8012582:	463b      	mov	r3, r7
 8012584:	f7ed feaa 	bl	80002dc <__adddf3>
 8012588:	4602      	mov	r2, r0
 801258a:	460b      	mov	r3, r1
 801258c:	4620      	mov	r0, r4
 801258e:	4629      	mov	r1, r5
 8012590:	f7ed fea2 	bl	80002d8 <__aeabi_dsub>
 8012594:	4642      	mov	r2, r8
 8012596:	464b      	mov	r3, r9
 8012598:	f7ed fe9e 	bl	80002d8 <__aeabi_dsub>
 801259c:	4602      	mov	r2, r0
 801259e:	460b      	mov	r3, r1
 80125a0:	2000      	movs	r0, #0
 80125a2:	4939      	ldr	r1, [pc, #228]	; (8012688 <__ieee754_pow+0xa08>)
 80125a4:	f7ed fe98 	bl	80002d8 <__aeabi_dsub>
 80125a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80125ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	da2f      	bge.n	8012616 <__ieee754_pow+0x996>
 80125b6:	4650      	mov	r0, sl
 80125b8:	ec43 2b10 	vmov	d0, r2, r3
 80125bc:	f000 f9c0 	bl	8012940 <scalbn>
 80125c0:	ec51 0b10 	vmov	r0, r1, d0
 80125c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125c8:	f7ff bbf1 	b.w	8011dae <__ieee754_pow+0x12e>
 80125cc:	4b2f      	ldr	r3, [pc, #188]	; (801268c <__ieee754_pow+0xa0c>)
 80125ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80125d2:	429e      	cmp	r6, r3
 80125d4:	f77f af0c 	ble.w	80123f0 <__ieee754_pow+0x770>
 80125d8:	4b2d      	ldr	r3, [pc, #180]	; (8012690 <__ieee754_pow+0xa10>)
 80125da:	440b      	add	r3, r1
 80125dc:	4303      	orrs	r3, r0
 80125de:	d00b      	beq.n	80125f8 <__ieee754_pow+0x978>
 80125e0:	a325      	add	r3, pc, #148	; (adr r3, 8012678 <__ieee754_pow+0x9f8>)
 80125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ea:	f7ee f82d 	bl	8000648 <__aeabi_dmul>
 80125ee:	a322      	add	r3, pc, #136	; (adr r3, 8012678 <__ieee754_pow+0x9f8>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	f7ff bbdb 	b.w	8011dae <__ieee754_pow+0x12e>
 80125f8:	4622      	mov	r2, r4
 80125fa:	462b      	mov	r3, r5
 80125fc:	f7ed fe6c 	bl	80002d8 <__aeabi_dsub>
 8012600:	4642      	mov	r2, r8
 8012602:	464b      	mov	r3, r9
 8012604:	f7ee faa6 	bl	8000b54 <__aeabi_dcmpge>
 8012608:	2800      	cmp	r0, #0
 801260a:	f43f aef1 	beq.w	80123f0 <__ieee754_pow+0x770>
 801260e:	e7e7      	b.n	80125e0 <__ieee754_pow+0x960>
 8012610:	f04f 0a00 	mov.w	sl, #0
 8012614:	e718      	b.n	8012448 <__ieee754_pow+0x7c8>
 8012616:	4621      	mov	r1, r4
 8012618:	e7d4      	b.n	80125c4 <__ieee754_pow+0x944>
 801261a:	2000      	movs	r0, #0
 801261c:	491a      	ldr	r1, [pc, #104]	; (8012688 <__ieee754_pow+0xa08>)
 801261e:	f7ff bb8f 	b.w	8011d40 <__ieee754_pow+0xc0>
 8012622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012626:	f7ff bb8b 	b.w	8011d40 <__ieee754_pow+0xc0>
 801262a:	4630      	mov	r0, r6
 801262c:	4639      	mov	r1, r7
 801262e:	f7ff bb87 	b.w	8011d40 <__ieee754_pow+0xc0>
 8012632:	4693      	mov	fp, r2
 8012634:	f7ff bb98 	b.w	8011d68 <__ieee754_pow+0xe8>
 8012638:	00000000 	.word	0x00000000
 801263c:	3fe62e43 	.word	0x3fe62e43
 8012640:	fefa39ef 	.word	0xfefa39ef
 8012644:	3fe62e42 	.word	0x3fe62e42
 8012648:	0ca86c39 	.word	0x0ca86c39
 801264c:	be205c61 	.word	0xbe205c61
 8012650:	72bea4d0 	.word	0x72bea4d0
 8012654:	3e663769 	.word	0x3e663769
 8012658:	c5d26bf1 	.word	0xc5d26bf1
 801265c:	3ebbbd41 	.word	0x3ebbbd41
 8012660:	af25de2c 	.word	0xaf25de2c
 8012664:	3f11566a 	.word	0x3f11566a
 8012668:	16bebd93 	.word	0x16bebd93
 801266c:	3f66c16c 	.word	0x3f66c16c
 8012670:	5555553e 	.word	0x5555553e
 8012674:	3fc55555 	.word	0x3fc55555
 8012678:	c2f8f359 	.word	0xc2f8f359
 801267c:	01a56e1f 	.word	0x01a56e1f
 8012680:	3fe00000 	.word	0x3fe00000
 8012684:	000fffff 	.word	0x000fffff
 8012688:	3ff00000 	.word	0x3ff00000
 801268c:	4090cbff 	.word	0x4090cbff
 8012690:	3f6f3400 	.word	0x3f6f3400
 8012694:	652b82fe 	.word	0x652b82fe
 8012698:	3c971547 	.word	0x3c971547

0801269c <__ieee754_sqrt>:
 801269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a0:	4955      	ldr	r1, [pc, #340]	; (80127f8 <__ieee754_sqrt+0x15c>)
 80126a2:	ec55 4b10 	vmov	r4, r5, d0
 80126a6:	43a9      	bics	r1, r5
 80126a8:	462b      	mov	r3, r5
 80126aa:	462a      	mov	r2, r5
 80126ac:	d112      	bne.n	80126d4 <__ieee754_sqrt+0x38>
 80126ae:	ee10 2a10 	vmov	r2, s0
 80126b2:	ee10 0a10 	vmov	r0, s0
 80126b6:	4629      	mov	r1, r5
 80126b8:	f7ed ffc6 	bl	8000648 <__aeabi_dmul>
 80126bc:	4602      	mov	r2, r0
 80126be:	460b      	mov	r3, r1
 80126c0:	4620      	mov	r0, r4
 80126c2:	4629      	mov	r1, r5
 80126c4:	f7ed fe0a 	bl	80002dc <__adddf3>
 80126c8:	4604      	mov	r4, r0
 80126ca:	460d      	mov	r5, r1
 80126cc:	ec45 4b10 	vmov	d0, r4, r5
 80126d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d4:	2d00      	cmp	r5, #0
 80126d6:	ee10 0a10 	vmov	r0, s0
 80126da:	4621      	mov	r1, r4
 80126dc:	dc0f      	bgt.n	80126fe <__ieee754_sqrt+0x62>
 80126de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80126e2:	4330      	orrs	r0, r6
 80126e4:	d0f2      	beq.n	80126cc <__ieee754_sqrt+0x30>
 80126e6:	b155      	cbz	r5, 80126fe <__ieee754_sqrt+0x62>
 80126e8:	ee10 2a10 	vmov	r2, s0
 80126ec:	4620      	mov	r0, r4
 80126ee:	4629      	mov	r1, r5
 80126f0:	f7ed fdf2 	bl	80002d8 <__aeabi_dsub>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	f7ee f8d0 	bl	800089c <__aeabi_ddiv>
 80126fc:	e7e4      	b.n	80126c8 <__ieee754_sqrt+0x2c>
 80126fe:	151b      	asrs	r3, r3, #20
 8012700:	d073      	beq.n	80127ea <__ieee754_sqrt+0x14e>
 8012702:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012706:	07dd      	lsls	r5, r3, #31
 8012708:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801270c:	bf48      	it	mi
 801270e:	0fc8      	lsrmi	r0, r1, #31
 8012710:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012714:	bf44      	itt	mi
 8012716:	0049      	lslmi	r1, r1, #1
 8012718:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801271c:	2500      	movs	r5, #0
 801271e:	1058      	asrs	r0, r3, #1
 8012720:	0fcb      	lsrs	r3, r1, #31
 8012722:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012726:	0049      	lsls	r1, r1, #1
 8012728:	2316      	movs	r3, #22
 801272a:	462c      	mov	r4, r5
 801272c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012730:	19a7      	adds	r7, r4, r6
 8012732:	4297      	cmp	r7, r2
 8012734:	bfde      	ittt	le
 8012736:	19bc      	addle	r4, r7, r6
 8012738:	1bd2      	suble	r2, r2, r7
 801273a:	19ad      	addle	r5, r5, r6
 801273c:	0fcf      	lsrs	r7, r1, #31
 801273e:	3b01      	subs	r3, #1
 8012740:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012744:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012748:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801274c:	d1f0      	bne.n	8012730 <__ieee754_sqrt+0x94>
 801274e:	f04f 0c20 	mov.w	ip, #32
 8012752:	469e      	mov	lr, r3
 8012754:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012758:	42a2      	cmp	r2, r4
 801275a:	eb06 070e 	add.w	r7, r6, lr
 801275e:	dc02      	bgt.n	8012766 <__ieee754_sqrt+0xca>
 8012760:	d112      	bne.n	8012788 <__ieee754_sqrt+0xec>
 8012762:	428f      	cmp	r7, r1
 8012764:	d810      	bhi.n	8012788 <__ieee754_sqrt+0xec>
 8012766:	2f00      	cmp	r7, #0
 8012768:	eb07 0e06 	add.w	lr, r7, r6
 801276c:	da42      	bge.n	80127f4 <__ieee754_sqrt+0x158>
 801276e:	f1be 0f00 	cmp.w	lr, #0
 8012772:	db3f      	blt.n	80127f4 <__ieee754_sqrt+0x158>
 8012774:	f104 0801 	add.w	r8, r4, #1
 8012778:	1b12      	subs	r2, r2, r4
 801277a:	428f      	cmp	r7, r1
 801277c:	bf88      	it	hi
 801277e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012782:	1bc9      	subs	r1, r1, r7
 8012784:	4433      	add	r3, r6
 8012786:	4644      	mov	r4, r8
 8012788:	0052      	lsls	r2, r2, #1
 801278a:	f1bc 0c01 	subs.w	ip, ip, #1
 801278e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012792:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012796:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801279a:	d1dd      	bne.n	8012758 <__ieee754_sqrt+0xbc>
 801279c:	430a      	orrs	r2, r1
 801279e:	d006      	beq.n	80127ae <__ieee754_sqrt+0x112>
 80127a0:	1c5c      	adds	r4, r3, #1
 80127a2:	bf13      	iteet	ne
 80127a4:	3301      	addne	r3, #1
 80127a6:	3501      	addeq	r5, #1
 80127a8:	4663      	moveq	r3, ip
 80127aa:	f023 0301 	bicne.w	r3, r3, #1
 80127ae:	106a      	asrs	r2, r5, #1
 80127b0:	085b      	lsrs	r3, r3, #1
 80127b2:	07e9      	lsls	r1, r5, #31
 80127b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80127b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80127bc:	bf48      	it	mi
 80127be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80127c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80127c6:	461c      	mov	r4, r3
 80127c8:	e780      	b.n	80126cc <__ieee754_sqrt+0x30>
 80127ca:	0aca      	lsrs	r2, r1, #11
 80127cc:	3815      	subs	r0, #21
 80127ce:	0549      	lsls	r1, r1, #21
 80127d0:	2a00      	cmp	r2, #0
 80127d2:	d0fa      	beq.n	80127ca <__ieee754_sqrt+0x12e>
 80127d4:	02d6      	lsls	r6, r2, #11
 80127d6:	d50a      	bpl.n	80127ee <__ieee754_sqrt+0x152>
 80127d8:	f1c3 0420 	rsb	r4, r3, #32
 80127dc:	fa21 f404 	lsr.w	r4, r1, r4
 80127e0:	1e5d      	subs	r5, r3, #1
 80127e2:	4099      	lsls	r1, r3
 80127e4:	4322      	orrs	r2, r4
 80127e6:	1b43      	subs	r3, r0, r5
 80127e8:	e78b      	b.n	8012702 <__ieee754_sqrt+0x66>
 80127ea:	4618      	mov	r0, r3
 80127ec:	e7f0      	b.n	80127d0 <__ieee754_sqrt+0x134>
 80127ee:	0052      	lsls	r2, r2, #1
 80127f0:	3301      	adds	r3, #1
 80127f2:	e7ef      	b.n	80127d4 <__ieee754_sqrt+0x138>
 80127f4:	46a0      	mov	r8, r4
 80127f6:	e7bf      	b.n	8012778 <__ieee754_sqrt+0xdc>
 80127f8:	7ff00000 	.word	0x7ff00000

080127fc <fabs>:
 80127fc:	ec51 0b10 	vmov	r0, r1, d0
 8012800:	ee10 2a10 	vmov	r2, s0
 8012804:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012808:	ec43 2b10 	vmov	d0, r2, r3
 801280c:	4770      	bx	lr

0801280e <finite>:
 801280e:	ee10 3a90 	vmov	r3, s1
 8012812:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012816:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801281a:	0fc0      	lsrs	r0, r0, #31
 801281c:	4770      	bx	lr

0801281e <matherr>:
 801281e:	2000      	movs	r0, #0
 8012820:	4770      	bx	lr
 8012822:	0000      	movs	r0, r0
 8012824:	0000      	movs	r0, r0
	...

08012828 <nan>:
 8012828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012830 <nan+0x8>
 801282c:	4770      	bx	lr
 801282e:	bf00      	nop
 8012830:	00000000 	.word	0x00000000
 8012834:	7ff80000 	.word	0x7ff80000

08012838 <rint>:
 8012838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801283a:	ec51 0b10 	vmov	r0, r1, d0
 801283e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012842:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012846:	2e13      	cmp	r6, #19
 8012848:	460b      	mov	r3, r1
 801284a:	ee10 4a10 	vmov	r4, s0
 801284e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012852:	dc56      	bgt.n	8012902 <rint+0xca>
 8012854:	2e00      	cmp	r6, #0
 8012856:	da2b      	bge.n	80128b0 <rint+0x78>
 8012858:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801285c:	4302      	orrs	r2, r0
 801285e:	d023      	beq.n	80128a8 <rint+0x70>
 8012860:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012864:	4302      	orrs	r2, r0
 8012866:	4254      	negs	r4, r2
 8012868:	4314      	orrs	r4, r2
 801286a:	0c4b      	lsrs	r3, r1, #17
 801286c:	0b24      	lsrs	r4, r4, #12
 801286e:	045b      	lsls	r3, r3, #17
 8012870:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012874:	ea44 0103 	orr.w	r1, r4, r3
 8012878:	460b      	mov	r3, r1
 801287a:	492f      	ldr	r1, [pc, #188]	; (8012938 <rint+0x100>)
 801287c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012880:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012884:	4602      	mov	r2, r0
 8012886:	4639      	mov	r1, r7
 8012888:	4630      	mov	r0, r6
 801288a:	f7ed fd27 	bl	80002dc <__adddf3>
 801288e:	e9cd 0100 	strd	r0, r1, [sp]
 8012892:	463b      	mov	r3, r7
 8012894:	4632      	mov	r2, r6
 8012896:	e9dd 0100 	ldrd	r0, r1, [sp]
 801289a:	f7ed fd1d 	bl	80002d8 <__aeabi_dsub>
 801289e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80128a6:	4639      	mov	r1, r7
 80128a8:	ec41 0b10 	vmov	d0, r0, r1
 80128ac:	b003      	add	sp, #12
 80128ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b0:	4a22      	ldr	r2, [pc, #136]	; (801293c <rint+0x104>)
 80128b2:	4132      	asrs	r2, r6
 80128b4:	ea01 0702 	and.w	r7, r1, r2
 80128b8:	4307      	orrs	r7, r0
 80128ba:	d0f5      	beq.n	80128a8 <rint+0x70>
 80128bc:	0852      	lsrs	r2, r2, #1
 80128be:	4011      	ands	r1, r2
 80128c0:	430c      	orrs	r4, r1
 80128c2:	d00b      	beq.n	80128dc <rint+0xa4>
 80128c4:	ea23 0202 	bic.w	r2, r3, r2
 80128c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80128cc:	2e13      	cmp	r6, #19
 80128ce:	fa43 f306 	asr.w	r3, r3, r6
 80128d2:	bf0c      	ite	eq
 80128d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80128d8:	2400      	movne	r4, #0
 80128da:	4313      	orrs	r3, r2
 80128dc:	4916      	ldr	r1, [pc, #88]	; (8012938 <rint+0x100>)
 80128de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80128e2:	4622      	mov	r2, r4
 80128e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80128e8:	4620      	mov	r0, r4
 80128ea:	4629      	mov	r1, r5
 80128ec:	f7ed fcf6 	bl	80002dc <__adddf3>
 80128f0:	e9cd 0100 	strd	r0, r1, [sp]
 80128f4:	4622      	mov	r2, r4
 80128f6:	462b      	mov	r3, r5
 80128f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128fc:	f7ed fcec 	bl	80002d8 <__aeabi_dsub>
 8012900:	e7d2      	b.n	80128a8 <rint+0x70>
 8012902:	2e33      	cmp	r6, #51	; 0x33
 8012904:	dd07      	ble.n	8012916 <rint+0xde>
 8012906:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801290a:	d1cd      	bne.n	80128a8 <rint+0x70>
 801290c:	ee10 2a10 	vmov	r2, s0
 8012910:	f7ed fce4 	bl	80002dc <__adddf3>
 8012914:	e7c8      	b.n	80128a8 <rint+0x70>
 8012916:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801291a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801291e:	40f2      	lsrs	r2, r6
 8012920:	4210      	tst	r0, r2
 8012922:	d0c1      	beq.n	80128a8 <rint+0x70>
 8012924:	0852      	lsrs	r2, r2, #1
 8012926:	4210      	tst	r0, r2
 8012928:	bf1f      	itttt	ne
 801292a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801292e:	ea20 0202 	bicne.w	r2, r0, r2
 8012932:	4134      	asrne	r4, r6
 8012934:	4314      	orrne	r4, r2
 8012936:	e7d1      	b.n	80128dc <rint+0xa4>
 8012938:	08014268 	.word	0x08014268
 801293c:	000fffff 	.word	0x000fffff

08012940 <scalbn>:
 8012940:	b570      	push	{r4, r5, r6, lr}
 8012942:	ec55 4b10 	vmov	r4, r5, d0
 8012946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801294a:	4606      	mov	r6, r0
 801294c:	462b      	mov	r3, r5
 801294e:	b9aa      	cbnz	r2, 801297c <scalbn+0x3c>
 8012950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012954:	4323      	orrs	r3, r4
 8012956:	d03b      	beq.n	80129d0 <scalbn+0x90>
 8012958:	4b31      	ldr	r3, [pc, #196]	; (8012a20 <scalbn+0xe0>)
 801295a:	4629      	mov	r1, r5
 801295c:	2200      	movs	r2, #0
 801295e:	ee10 0a10 	vmov	r0, s0
 8012962:	f7ed fe71 	bl	8000648 <__aeabi_dmul>
 8012966:	4b2f      	ldr	r3, [pc, #188]	; (8012a24 <scalbn+0xe4>)
 8012968:	429e      	cmp	r6, r3
 801296a:	4604      	mov	r4, r0
 801296c:	460d      	mov	r5, r1
 801296e:	da12      	bge.n	8012996 <scalbn+0x56>
 8012970:	a327      	add	r3, pc, #156	; (adr r3, 8012a10 <scalbn+0xd0>)
 8012972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012976:	f7ed fe67 	bl	8000648 <__aeabi_dmul>
 801297a:	e009      	b.n	8012990 <scalbn+0x50>
 801297c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012980:	428a      	cmp	r2, r1
 8012982:	d10c      	bne.n	801299e <scalbn+0x5e>
 8012984:	ee10 2a10 	vmov	r2, s0
 8012988:	4620      	mov	r0, r4
 801298a:	4629      	mov	r1, r5
 801298c:	f7ed fca6 	bl	80002dc <__adddf3>
 8012990:	4604      	mov	r4, r0
 8012992:	460d      	mov	r5, r1
 8012994:	e01c      	b.n	80129d0 <scalbn+0x90>
 8012996:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801299a:	460b      	mov	r3, r1
 801299c:	3a36      	subs	r2, #54	; 0x36
 801299e:	4432      	add	r2, r6
 80129a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80129a4:	428a      	cmp	r2, r1
 80129a6:	dd0b      	ble.n	80129c0 <scalbn+0x80>
 80129a8:	ec45 4b11 	vmov	d1, r4, r5
 80129ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012a18 <scalbn+0xd8>
 80129b0:	f000 f9f0 	bl	8012d94 <copysign>
 80129b4:	a318      	add	r3, pc, #96	; (adr r3, 8012a18 <scalbn+0xd8>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ba:	ec51 0b10 	vmov	r0, r1, d0
 80129be:	e7da      	b.n	8012976 <scalbn+0x36>
 80129c0:	2a00      	cmp	r2, #0
 80129c2:	dd08      	ble.n	80129d6 <scalbn+0x96>
 80129c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80129c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80129cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80129d0:	ec45 4b10 	vmov	d0, r4, r5
 80129d4:	bd70      	pop	{r4, r5, r6, pc}
 80129d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80129da:	da0d      	bge.n	80129f8 <scalbn+0xb8>
 80129dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80129e0:	429e      	cmp	r6, r3
 80129e2:	ec45 4b11 	vmov	d1, r4, r5
 80129e6:	dce1      	bgt.n	80129ac <scalbn+0x6c>
 80129e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012a10 <scalbn+0xd0>
 80129ec:	f000 f9d2 	bl	8012d94 <copysign>
 80129f0:	a307      	add	r3, pc, #28	; (adr r3, 8012a10 <scalbn+0xd0>)
 80129f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f6:	e7e0      	b.n	80129ba <scalbn+0x7a>
 80129f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80129fc:	3236      	adds	r2, #54	; 0x36
 80129fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012a06:	4620      	mov	r0, r4
 8012a08:	4629      	mov	r1, r5
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	4b06      	ldr	r3, [pc, #24]	; (8012a28 <scalbn+0xe8>)
 8012a0e:	e7b2      	b.n	8012976 <scalbn+0x36>
 8012a10:	c2f8f359 	.word	0xc2f8f359
 8012a14:	01a56e1f 	.word	0x01a56e1f
 8012a18:	8800759c 	.word	0x8800759c
 8012a1c:	7e37e43c 	.word	0x7e37e43c
 8012a20:	43500000 	.word	0x43500000
 8012a24:	ffff3cb0 	.word	0xffff3cb0
 8012a28:	3c900000 	.word	0x3c900000
 8012a2c:	00000000 	.word	0x00000000

08012a30 <__ieee754_log>:
 8012a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a34:	ec51 0b10 	vmov	r0, r1, d0
 8012a38:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012a3c:	b087      	sub	sp, #28
 8012a3e:	460d      	mov	r5, r1
 8012a40:	da27      	bge.n	8012a92 <__ieee754_log+0x62>
 8012a42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a46:	4303      	orrs	r3, r0
 8012a48:	ee10 2a10 	vmov	r2, s0
 8012a4c:	d10a      	bne.n	8012a64 <__ieee754_log+0x34>
 8012a4e:	49cc      	ldr	r1, [pc, #816]	; (8012d80 <__ieee754_log+0x350>)
 8012a50:	2200      	movs	r2, #0
 8012a52:	2300      	movs	r3, #0
 8012a54:	2000      	movs	r0, #0
 8012a56:	f7ed ff21 	bl	800089c <__aeabi_ddiv>
 8012a5a:	ec41 0b10 	vmov	d0, r0, r1
 8012a5e:	b007      	add	sp, #28
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a64:	2900      	cmp	r1, #0
 8012a66:	da05      	bge.n	8012a74 <__ieee754_log+0x44>
 8012a68:	460b      	mov	r3, r1
 8012a6a:	f7ed fc35 	bl	80002d8 <__aeabi_dsub>
 8012a6e:	2200      	movs	r2, #0
 8012a70:	2300      	movs	r3, #0
 8012a72:	e7f0      	b.n	8012a56 <__ieee754_log+0x26>
 8012a74:	4bc3      	ldr	r3, [pc, #780]	; (8012d84 <__ieee754_log+0x354>)
 8012a76:	2200      	movs	r2, #0
 8012a78:	f7ed fde6 	bl	8000648 <__aeabi_dmul>
 8012a7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012a80:	460d      	mov	r5, r1
 8012a82:	4ac1      	ldr	r2, [pc, #772]	; (8012d88 <__ieee754_log+0x358>)
 8012a84:	4295      	cmp	r5, r2
 8012a86:	dd06      	ble.n	8012a96 <__ieee754_log+0x66>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	f7ed fc26 	bl	80002dc <__adddf3>
 8012a90:	e7e3      	b.n	8012a5a <__ieee754_log+0x2a>
 8012a92:	2300      	movs	r3, #0
 8012a94:	e7f5      	b.n	8012a82 <__ieee754_log+0x52>
 8012a96:	152c      	asrs	r4, r5, #20
 8012a98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012a9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012aa0:	441c      	add	r4, r3
 8012aa2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012aa6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012aae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012ab2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012ab6:	ea42 0105 	orr.w	r1, r2, r5
 8012aba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012abe:	2200      	movs	r2, #0
 8012ac0:	4bb2      	ldr	r3, [pc, #712]	; (8012d8c <__ieee754_log+0x35c>)
 8012ac2:	f7ed fc09 	bl	80002d8 <__aeabi_dsub>
 8012ac6:	1cab      	adds	r3, r5, #2
 8012ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	4682      	mov	sl, r0
 8012ad0:	468b      	mov	fp, r1
 8012ad2:	f04f 0200 	mov.w	r2, #0
 8012ad6:	dc53      	bgt.n	8012b80 <__ieee754_log+0x150>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f7ee f81d 	bl	8000b18 <__aeabi_dcmpeq>
 8012ade:	b1d0      	cbz	r0, 8012b16 <__ieee754_log+0xe6>
 8012ae0:	2c00      	cmp	r4, #0
 8012ae2:	f000 8120 	beq.w	8012d26 <__ieee754_log+0x2f6>
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7ed fd44 	bl	8000574 <__aeabi_i2d>
 8012aec:	a390      	add	r3, pc, #576	; (adr r3, 8012d30 <__ieee754_log+0x300>)
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	4606      	mov	r6, r0
 8012af4:	460f      	mov	r7, r1
 8012af6:	f7ed fda7 	bl	8000648 <__aeabi_dmul>
 8012afa:	a38f      	add	r3, pc, #572	; (adr r3, 8012d38 <__ieee754_log+0x308>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	4604      	mov	r4, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	4630      	mov	r0, r6
 8012b06:	4639      	mov	r1, r7
 8012b08:	f7ed fd9e 	bl	8000648 <__aeabi_dmul>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	460b      	mov	r3, r1
 8012b10:	4620      	mov	r0, r4
 8012b12:	4629      	mov	r1, r5
 8012b14:	e7ba      	b.n	8012a8c <__ieee754_log+0x5c>
 8012b16:	a38a      	add	r3, pc, #552	; (adr r3, 8012d40 <__ieee754_log+0x310>)
 8012b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1c:	4650      	mov	r0, sl
 8012b1e:	4659      	mov	r1, fp
 8012b20:	f7ed fd92 	bl	8000648 <__aeabi_dmul>
 8012b24:	4602      	mov	r2, r0
 8012b26:	460b      	mov	r3, r1
 8012b28:	2000      	movs	r0, #0
 8012b2a:	4999      	ldr	r1, [pc, #612]	; (8012d90 <__ieee754_log+0x360>)
 8012b2c:	f7ed fbd4 	bl	80002d8 <__aeabi_dsub>
 8012b30:	4652      	mov	r2, sl
 8012b32:	4606      	mov	r6, r0
 8012b34:	460f      	mov	r7, r1
 8012b36:	465b      	mov	r3, fp
 8012b38:	4650      	mov	r0, sl
 8012b3a:	4659      	mov	r1, fp
 8012b3c:	f7ed fd84 	bl	8000648 <__aeabi_dmul>
 8012b40:	4602      	mov	r2, r0
 8012b42:	460b      	mov	r3, r1
 8012b44:	4630      	mov	r0, r6
 8012b46:	4639      	mov	r1, r7
 8012b48:	f7ed fd7e 	bl	8000648 <__aeabi_dmul>
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	460f      	mov	r7, r1
 8012b50:	b914      	cbnz	r4, 8012b58 <__ieee754_log+0x128>
 8012b52:	4632      	mov	r2, r6
 8012b54:	463b      	mov	r3, r7
 8012b56:	e0a0      	b.n	8012c9a <__ieee754_log+0x26a>
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ed fd0b 	bl	8000574 <__aeabi_i2d>
 8012b5e:	a374      	add	r3, pc, #464	; (adr r3, 8012d30 <__ieee754_log+0x300>)
 8012b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b64:	4680      	mov	r8, r0
 8012b66:	4689      	mov	r9, r1
 8012b68:	f7ed fd6e 	bl	8000648 <__aeabi_dmul>
 8012b6c:	a372      	add	r3, pc, #456	; (adr r3, 8012d38 <__ieee754_log+0x308>)
 8012b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b72:	4604      	mov	r4, r0
 8012b74:	460d      	mov	r5, r1
 8012b76:	4640      	mov	r0, r8
 8012b78:	4649      	mov	r1, r9
 8012b7a:	f7ed fd65 	bl	8000648 <__aeabi_dmul>
 8012b7e:	e0a5      	b.n	8012ccc <__ieee754_log+0x29c>
 8012b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b84:	f7ed fbaa 	bl	80002dc <__adddf3>
 8012b88:	4602      	mov	r2, r0
 8012b8a:	460b      	mov	r3, r1
 8012b8c:	4650      	mov	r0, sl
 8012b8e:	4659      	mov	r1, fp
 8012b90:	f7ed fe84 	bl	800089c <__aeabi_ddiv>
 8012b94:	e9cd 0100 	strd	r0, r1, [sp]
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f7ed fceb 	bl	8000574 <__aeabi_i2d>
 8012b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f7ed fd4d 	bl	8000648 <__aeabi_dmul>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bb6:	f7ed fd47 	bl	8000648 <__aeabi_dmul>
 8012bba:	a363      	add	r3, pc, #396	; (adr r3, 8012d48 <__ieee754_log+0x318>)
 8012bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc0:	4680      	mov	r8, r0
 8012bc2:	4689      	mov	r9, r1
 8012bc4:	f7ed fd40 	bl	8000648 <__aeabi_dmul>
 8012bc8:	a361      	add	r3, pc, #388	; (adr r3, 8012d50 <__ieee754_log+0x320>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	f7ed fb85 	bl	80002dc <__adddf3>
 8012bd2:	4642      	mov	r2, r8
 8012bd4:	464b      	mov	r3, r9
 8012bd6:	f7ed fd37 	bl	8000648 <__aeabi_dmul>
 8012bda:	a35f      	add	r3, pc, #380	; (adr r3, 8012d58 <__ieee754_log+0x328>)
 8012bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be0:	f7ed fb7c 	bl	80002dc <__adddf3>
 8012be4:	4642      	mov	r2, r8
 8012be6:	464b      	mov	r3, r9
 8012be8:	f7ed fd2e 	bl	8000648 <__aeabi_dmul>
 8012bec:	a35c      	add	r3, pc, #368	; (adr r3, 8012d60 <__ieee754_log+0x330>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	f7ed fb73 	bl	80002dc <__adddf3>
 8012bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bfa:	f7ed fd25 	bl	8000648 <__aeabi_dmul>
 8012bfe:	a35a      	add	r3, pc, #360	; (adr r3, 8012d68 <__ieee754_log+0x338>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c08:	4640      	mov	r0, r8
 8012c0a:	4649      	mov	r1, r9
 8012c0c:	f7ed fd1c 	bl	8000648 <__aeabi_dmul>
 8012c10:	a357      	add	r3, pc, #348	; (adr r3, 8012d70 <__ieee754_log+0x340>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	f7ed fb61 	bl	80002dc <__adddf3>
 8012c1a:	4642      	mov	r2, r8
 8012c1c:	464b      	mov	r3, r9
 8012c1e:	f7ed fd13 	bl	8000648 <__aeabi_dmul>
 8012c22:	a355      	add	r3, pc, #340	; (adr r3, 8012d78 <__ieee754_log+0x348>)
 8012c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c28:	f7ed fb58 	bl	80002dc <__adddf3>
 8012c2c:	4642      	mov	r2, r8
 8012c2e:	464b      	mov	r3, r9
 8012c30:	f7ed fd0a 	bl	8000648 <__aeabi_dmul>
 8012c34:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c44:	f7ed fb4a 	bl	80002dc <__adddf3>
 8012c48:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8012c4c:	3551      	adds	r5, #81	; 0x51
 8012c4e:	4335      	orrs	r5, r6
 8012c50:	2d00      	cmp	r5, #0
 8012c52:	4680      	mov	r8, r0
 8012c54:	4689      	mov	r9, r1
 8012c56:	dd48      	ble.n	8012cea <__ieee754_log+0x2ba>
 8012c58:	2200      	movs	r2, #0
 8012c5a:	4b4d      	ldr	r3, [pc, #308]	; (8012d90 <__ieee754_log+0x360>)
 8012c5c:	4650      	mov	r0, sl
 8012c5e:	4659      	mov	r1, fp
 8012c60:	f7ed fcf2 	bl	8000648 <__aeabi_dmul>
 8012c64:	4652      	mov	r2, sl
 8012c66:	465b      	mov	r3, fp
 8012c68:	f7ed fcee 	bl	8000648 <__aeabi_dmul>
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	460b      	mov	r3, r1
 8012c70:	4606      	mov	r6, r0
 8012c72:	460f      	mov	r7, r1
 8012c74:	4640      	mov	r0, r8
 8012c76:	4649      	mov	r1, r9
 8012c78:	f7ed fb30 	bl	80002dc <__adddf3>
 8012c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c80:	f7ed fce2 	bl	8000648 <__aeabi_dmul>
 8012c84:	4680      	mov	r8, r0
 8012c86:	4689      	mov	r9, r1
 8012c88:	b964      	cbnz	r4, 8012ca4 <__ieee754_log+0x274>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	4630      	mov	r0, r6
 8012c90:	4639      	mov	r1, r7
 8012c92:	f7ed fb21 	bl	80002d8 <__aeabi_dsub>
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4650      	mov	r0, sl
 8012c9c:	4659      	mov	r1, fp
 8012c9e:	f7ed fb1b 	bl	80002d8 <__aeabi_dsub>
 8012ca2:	e6da      	b.n	8012a5a <__ieee754_log+0x2a>
 8012ca4:	a322      	add	r3, pc, #136	; (adr r3, 8012d30 <__ieee754_log+0x300>)
 8012ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cae:	f7ed fccb 	bl	8000648 <__aeabi_dmul>
 8012cb2:	a321      	add	r3, pc, #132	; (adr r3, 8012d38 <__ieee754_log+0x308>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	4604      	mov	r4, r0
 8012cba:	460d      	mov	r5, r1
 8012cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc0:	f7ed fcc2 	bl	8000648 <__aeabi_dmul>
 8012cc4:	4642      	mov	r2, r8
 8012cc6:	464b      	mov	r3, r9
 8012cc8:	f7ed fb08 	bl	80002dc <__adddf3>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	460b      	mov	r3, r1
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	4639      	mov	r1, r7
 8012cd4:	f7ed fb00 	bl	80002d8 <__aeabi_dsub>
 8012cd8:	4652      	mov	r2, sl
 8012cda:	465b      	mov	r3, fp
 8012cdc:	f7ed fafc 	bl	80002d8 <__aeabi_dsub>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	e7d9      	b.n	8012c9e <__ieee754_log+0x26e>
 8012cea:	4602      	mov	r2, r0
 8012cec:	460b      	mov	r3, r1
 8012cee:	4650      	mov	r0, sl
 8012cf0:	4659      	mov	r1, fp
 8012cf2:	f7ed faf1 	bl	80002d8 <__aeabi_dsub>
 8012cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cfa:	f7ed fca5 	bl	8000648 <__aeabi_dmul>
 8012cfe:	4606      	mov	r6, r0
 8012d00:	460f      	mov	r7, r1
 8012d02:	2c00      	cmp	r4, #0
 8012d04:	f43f af25 	beq.w	8012b52 <__ieee754_log+0x122>
 8012d08:	a309      	add	r3, pc, #36	; (adr r3, 8012d30 <__ieee754_log+0x300>)
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d12:	f7ed fc99 	bl	8000648 <__aeabi_dmul>
 8012d16:	a308      	add	r3, pc, #32	; (adr r3, 8012d38 <__ieee754_log+0x308>)
 8012d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	460d      	mov	r5, r1
 8012d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d24:	e729      	b.n	8012b7a <__ieee754_log+0x14a>
 8012d26:	2000      	movs	r0, #0
 8012d28:	2100      	movs	r1, #0
 8012d2a:	e696      	b.n	8012a5a <__ieee754_log+0x2a>
 8012d2c:	f3af 8000 	nop.w
 8012d30:	fee00000 	.word	0xfee00000
 8012d34:	3fe62e42 	.word	0x3fe62e42
 8012d38:	35793c76 	.word	0x35793c76
 8012d3c:	3dea39ef 	.word	0x3dea39ef
 8012d40:	55555555 	.word	0x55555555
 8012d44:	3fd55555 	.word	0x3fd55555
 8012d48:	df3e5244 	.word	0xdf3e5244
 8012d4c:	3fc2f112 	.word	0x3fc2f112
 8012d50:	96cb03de 	.word	0x96cb03de
 8012d54:	3fc74664 	.word	0x3fc74664
 8012d58:	94229359 	.word	0x94229359
 8012d5c:	3fd24924 	.word	0x3fd24924
 8012d60:	55555593 	.word	0x55555593
 8012d64:	3fe55555 	.word	0x3fe55555
 8012d68:	d078c69f 	.word	0xd078c69f
 8012d6c:	3fc39a09 	.word	0x3fc39a09
 8012d70:	1d8e78af 	.word	0x1d8e78af
 8012d74:	3fcc71c5 	.word	0x3fcc71c5
 8012d78:	9997fa04 	.word	0x9997fa04
 8012d7c:	3fd99999 	.word	0x3fd99999
 8012d80:	c3500000 	.word	0xc3500000
 8012d84:	43500000 	.word	0x43500000
 8012d88:	7fefffff 	.word	0x7fefffff
 8012d8c:	3ff00000 	.word	0x3ff00000
 8012d90:	3fe00000 	.word	0x3fe00000

08012d94 <copysign>:
 8012d94:	ec51 0b10 	vmov	r0, r1, d0
 8012d98:	ee11 0a90 	vmov	r0, s3
 8012d9c:	ee10 2a10 	vmov	r2, s0
 8012da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012da4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012da8:	ea41 0300 	orr.w	r3, r1, r0
 8012dac:	ec43 2b10 	vmov	d0, r2, r3
 8012db0:	4770      	bx	lr
	...

08012db4 <_init>:
 8012db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db6:	bf00      	nop
 8012db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dba:	bc08      	pop	{r3}
 8012dbc:	469e      	mov	lr, r3
 8012dbe:	4770      	bx	lr

08012dc0 <_fini>:
 8012dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc2:	bf00      	nop
 8012dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc6:	bc08      	pop	{r3}
 8012dc8:	469e      	mov	lr, r3
 8012dca:	4770      	bx	lr
