
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a064  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a798  0800a798  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a798  0800a798  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a798  0800a798  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000bc8  0800b368  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000106c  0800b368  0002106c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000246a6  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b92  00000000  00000000  0004529e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  00049e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  0004bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f2c5  00000000  00000000  0004d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cb96  00000000  00000000  0007c77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123f13  00000000  00000000  00099313  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bd226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  001bd2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a22c 	.word	0x0800a22c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a22c 	.word	0x0800a22c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fbe8 	bl	8008a98 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fb87 	bl	80089dc <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fd97 	bl	8008e04 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fa72 	bl	80087dc <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fd60 	bl	8002dc0 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb16 	bl	8000930 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f825 	bl	8009354 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a244 	.word	0x0800a244
 8000314:	0800a254 	.word	0x0800a254

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	482e      	ldr	r0, [pc, #184]	; (80003e8 <DM_UpdateDisplay+0xd0>)
 8000330:	f008 fa54 	bl	80087dc <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <DM_UpdateDisplay+0xd4>)
 8000346:	f008 fa49 	bl	80087dc <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4825      	ldr	r0, [pc, #148]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 800035c:	f008 fa3e 	bl	80087dc <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	4820      	ldr	r0, [pc, #128]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 8000374:	f008 fa32 	bl	80087dc <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f856 	bl	8000430 <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <DM_UpdateDisplay+0xe4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 fa1a 	bl	80007c4 <_DrawGainSelectMenu>

	if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <DM_UpdateDisplay+0xe8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <DM_UpdateDisplay+0x84>
		_DrawFreqSelectMenu();
 8000398:	f000 fa56 	bl	8000848 <_DrawFreqSelectMenu>

	if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <DM_UpdateDisplay+0xec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <DM_UpdateDisplay+0x90>
		_DrawBiasSelectMenu();
 80003a4:	f000 fa92 	bl	80008cc <_DrawBiasSelectMenu>

#ifdef ENCODER_DEBUG
	char tim1tmp[11] = "";
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(tim1tmp, sizeof(tim1tmp), "%lu", TIM1->CNT);
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <DM_UpdateDisplay+0xf0>)
 80003ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003bc:	1d38      	adds	r0, r7, #4
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <DM_UpdateDisplay+0xf4>)
 80003c0:	210b      	movs	r1, #11
 80003c2:	f008 ffcf 	bl	8009364 <sniprintf>
	ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003c6:	1d38      	adds	r0, r7, #4
 80003c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2302      	movs	r3, #2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2232      	movs	r2, #50	; 0x32
 80003d6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003da:	f008 f9ff 	bl	80087dc <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800a264 	.word	0x0800a264
 80003ec:	0800a26c 	.word	0x0800a26c
 80003f0:	0800a274 	.word	0x0800a274
 80003f4:	0800a27c 	.word	0x0800a27c
 80003f8:	20000be4 	.word	0x20000be4
 80003fc:	20000be5 	.word	0x20000be5
 8000400:	20000be6 	.word	0x20000be6
 8000404:	20000be7 	.word	0x20000be7
 8000408:	40012c00 	.word	0x40012c00
 800040c:	0800a284 	.word	0x0800a284

08000410 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <DM_ShowFuncSelectMenu+0x1c>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	7013      	strb	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000be4 	.word	0x20000be4

08000430 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af02      	add	r7, sp, #8

	switch(EM_GetOutputMode())
 8000436:	f000 fe59 	bl	80010ec <EM_GetOutputMode>
 800043a:	4603      	mov	r3, r0
 800043c:	2b05      	cmp	r3, #5
 800043e:	f200 81a1 	bhi.w	8000784 <_DrawFuncSelectMenu+0x354>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <_DrawFuncSelectMenu+0x18>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000461 	.word	0x08000461
 800044c:	080004e7 	.word	0x080004e7
 8000450:	0800056d 	.word	0x0800056d
 8000454:	080005f3 	.word	0x080005f3
 8000458:	08000679 	.word	0x08000679
 800045c:	080006ff 	.word	0x080006ff
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000460:	2300      	movs	r3, #0
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2302      	movs	r3, #2
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046c:	221e      	movs	r2, #30
 800046e:	210a      	movs	r1, #10
 8000470:	48c6      	ldr	r0, [pc, #792]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000472:	f008 f9b3 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	2302      	movs	r3, #2
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	2232      	movs	r2, #50	; 0x32
 8000484:	210a      	movs	r1, #10
 8000486:	48c2      	ldr	r0, [pc, #776]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000488:	f008 f9a8 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800048c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2246      	movs	r2, #70	; 0x46
 800049a:	210a      	movs	r1, #10
 800049c:	48bd      	ldr	r0, [pc, #756]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800049e:	f008 f99d 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	2302      	movs	r3, #2
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2300      	movs	r3, #0
 80004ae:	225a      	movs	r2, #90	; 0x5a
 80004b0:	210a      	movs	r1, #10
 80004b2:	48b9      	ldr	r0, [pc, #740]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80004b4:	f008 f992 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2302      	movs	r3, #2
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	226e      	movs	r2, #110	; 0x6e
 80004c6:	210a      	movs	r1, #10
 80004c8:	48b4      	ldr	r0, [pc, #720]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80004ca:	f008 f987 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2302      	movs	r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2300      	movs	r3, #0
 80004da:	2282      	movs	r2, #130	; 0x82
 80004dc:	210a      	movs	r1, #10
 80004de:	48b0      	ldr	r0, [pc, #704]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80004e0:	f008 f97c 	bl	80087dc <ILI9341_Draw_Text>
			break;
 80004e4:	e14e      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2300      	movs	r3, #0
 80004f2:	221e      	movs	r2, #30
 80004f4:	210a      	movs	r1, #10
 80004f6:	48a5      	ldr	r0, [pc, #660]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 80004f8:	f008 f970 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2302      	movs	r3, #2
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000508:	2232      	movs	r2, #50	; 0x32
 800050a:	210a      	movs	r1, #10
 800050c:	48a0      	ldr	r0, [pc, #640]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800050e:	f008 f965 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2246      	movs	r2, #70	; 0x46
 8000520:	210a      	movs	r1, #10
 8000522:	489c      	ldr	r0, [pc, #624]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000524:	f008 f95a 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2302      	movs	r3, #2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	225a      	movs	r2, #90	; 0x5a
 8000536:	210a      	movs	r1, #10
 8000538:	4897      	ldr	r0, [pc, #604]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 800053a:	f008 f94f 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800053e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2302      	movs	r3, #2
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	226e      	movs	r2, #110	; 0x6e
 800054c:	210a      	movs	r1, #10
 800054e:	4893      	ldr	r0, [pc, #588]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000550:	f008 f944 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2302      	movs	r3, #2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2282      	movs	r2, #130	; 0x82
 8000562:	210a      	movs	r1, #10
 8000564:	488e      	ldr	r0, [pc, #568]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000566:	f008 f939 	bl	80087dc <ILI9341_Draw_Text>
			break;
 800056a:	e10b      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800056c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2302      	movs	r3, #2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	221e      	movs	r2, #30
 800057a:	210a      	movs	r1, #10
 800057c:	4883      	ldr	r0, [pc, #524]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800057e:	f008 f92d 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	210a      	movs	r1, #10
 8000592:	487f      	ldr	r0, [pc, #508]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000594:	f008 f922 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a4:	2246      	movs	r2, #70	; 0x46
 80005a6:	210a      	movs	r1, #10
 80005a8:	487a      	ldr	r0, [pc, #488]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80005aa:	f008 f917 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	225a      	movs	r2, #90	; 0x5a
 80005bc:	210a      	movs	r1, #10
 80005be:	4876      	ldr	r0, [pc, #472]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80005c0:	f008 f90c 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	226e      	movs	r2, #110	; 0x6e
 80005d2:	210a      	movs	r1, #10
 80005d4:	4871      	ldr	r0, [pc, #452]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80005d6:	f008 f901 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2302      	movs	r3, #2
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2282      	movs	r2, #130	; 0x82
 80005e8:	210a      	movs	r1, #10
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80005ec:	f008 f8f6 	bl	80087dc <ILI9341_Draw_Text>
			break;
 80005f0:	e0c8      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	221e      	movs	r2, #30
 8000600:	210a      	movs	r1, #10
 8000602:	4862      	ldr	r0, [pc, #392]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000604:	f008 f8ea 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2232      	movs	r2, #50	; 0x32
 8000616:	210a      	movs	r1, #10
 8000618:	485d      	ldr	r0, [pc, #372]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800061a:	f008 f8df 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2302      	movs	r3, #2
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2246      	movs	r2, #70	; 0x46
 800062c:	210a      	movs	r1, #10
 800062e:	4859      	ldr	r0, [pc, #356]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000630:	f008 f8d4 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000640:	225a      	movs	r2, #90	; 0x5a
 8000642:	210a      	movs	r1, #10
 8000644:	4854      	ldr	r0, [pc, #336]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000646:	f008 f8c9 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800064a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2302      	movs	r3, #2
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	226e      	movs	r2, #110	; 0x6e
 8000658:	210a      	movs	r1, #10
 800065a:	4850      	ldr	r0, [pc, #320]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 800065c:	f008 f8be 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	210a      	movs	r1, #10
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000672:	f008 f8b3 	bl	80087dc <ILI9341_Draw_Text>
			break;
 8000676:	e085      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	221e      	movs	r2, #30
 8000686:	210a      	movs	r1, #10
 8000688:	4840      	ldr	r0, [pc, #256]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800068a:	f008 f8a7 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2302      	movs	r3, #2
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	210a      	movs	r1, #10
 800069e:	483c      	ldr	r0, [pc, #240]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 80006a0:	f008 f89c 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2246      	movs	r2, #70	; 0x46
 80006b2:	210a      	movs	r1, #10
 80006b4:	4837      	ldr	r0, [pc, #220]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80006b6:	f008 f891 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	225a      	movs	r2, #90	; 0x5a
 80006c8:	210a      	movs	r1, #10
 80006ca:	4833      	ldr	r0, [pc, #204]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80006cc:	f008 f886 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006dc:	226e      	movs	r2, #110	; 0x6e
 80006de:	210a      	movs	r1, #10
 80006e0:	482e      	ldr	r0, [pc, #184]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80006e2:	f008 f87b 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2302      	movs	r3, #2
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	2282      	movs	r2, #130	; 0x82
 80006f4:	210a      	movs	r1, #10
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80006f8:	f008 f870 	bl	80087dc <ILI9341_Draw_Text>
			break;
 80006fc:	e042      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2302      	movs	r3, #2
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	221e      	movs	r2, #30
 800070c:	210a      	movs	r1, #10
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000710:	f008 f864 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	210a      	movs	r1, #10
 8000724:	481a      	ldr	r0, [pc, #104]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000726:	f008 f859 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2302      	movs	r3, #2
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	2246      	movs	r2, #70	; 0x46
 8000738:	210a      	movs	r1, #10
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800073c:	f008 f84e 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2302      	movs	r3, #2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	225a      	movs	r2, #90	; 0x5a
 800074e:	210a      	movs	r1, #10
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000752:	f008 f843 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2302      	movs	r3, #2
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	226e      	movs	r2, #110	; 0x6e
 8000764:	210a      	movs	r1, #10
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000768:	f008 f838 	bl	80087dc <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 800076c:	2300      	movs	r3, #0
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000778:	2282      	movs	r2, #130	; 0x82
 800077a:	210a      	movs	r1, #10
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 800077e:	f008 f82d 	bl	80087dc <ILI9341_Draw_Text>
			break;
 8000782:	bf00      	nop

	}

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800a288 	.word	0x0800a288
 8000790:	0800a290 	.word	0x0800a290
 8000794:	0800a29c 	.word	0x0800a29c
 8000798:	0800a2a4 	.word	0x0800a2a4
 800079c:	0800a2b0 	.word	0x0800a2b0
 80007a0:	0800a2bc 	.word	0x0800a2bc

080007a4 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <DM_ShowGainSelectMenu+0x1c>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	20000be5 	.word	0x20000be5

080007c4 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2302      	movs	r3, #2
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2278      	movs	r2, #120	; 0x78
 80007d8:	210a      	movs	r1, #10
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <_DrawGainSelectMenu+0x5c>)
 80007dc:	f007 fffe 	bl	80087dc <ILI9341_Draw_Text>

	char gain[11] = "";
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(gain, sizeof(gain), "%u", (uint8_t)EM_GetOutputGain());
 80007f0:	f000 fc88 	bl	8001104 <EM_GetOutputGain>
 80007f4:	4603      	mov	r3, r0
 80007f6:	1d38      	adds	r0, r7, #4
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <_DrawGainSelectMenu+0x60>)
 80007fa:	210b      	movs	r1, #11
 80007fc:	f008 fdb2 	bl	8009364 <sniprintf>
	ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000800:	1d38      	adds	r0, r7, #4
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	2278      	movs	r2, #120	; 0x78
 8000810:	21fa      	movs	r1, #250	; 0xfa
 8000812:	f007 ffe3 	bl	80087dc <ILI9341_Draw_Text>

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	0800a2c4 	.word	0x0800a2c4
 8000824:	0800a2dc 	.word	0x0800a2dc

08000828 <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <DM_ShowFreqSelectMenu+0x1c>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	7013      	strb	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000be6 	.word	0x20000be6

08000848 <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	2278      	movs	r2, #120	; 0x78
 800085c:	210a      	movs	r1, #10
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <_DrawFreqSelectMenu+0x5c>)
 8000860:	f007 ffbc 	bl	80087dc <ILI9341_Draw_Text>

	char freq[11] = "";
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(freq, sizeof(freq), "%u", (uint8_t)EM_GetOutputFreq());
 8000874:	f000 fc52 	bl	800111c <EM_GetOutputFreq>
 8000878:	4603      	mov	r3, r0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	1d38      	adds	r0, r7, #4
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <_DrawFreqSelectMenu+0x60>)
 8000880:	210b      	movs	r1, #11
 8000882:	f008 fd6f 	bl	8009364 <sniprintf>
	ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	2300      	movs	r3, #0
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2302      	movs	r3, #2
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000894:	2278      	movs	r2, #120	; 0x78
 8000896:	21fa      	movs	r1, #250	; 0xfa
 8000898:	f007 ffa0 	bl	80087dc <ILI9341_Draw_Text>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800a2e0 	.word	0x0800a2e0
 80008a8:	0800a2dc 	.word	0x0800a2dc

080008ac <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <DM_ShowBiasSelectMenu+0x1c>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	7013      	strb	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000be7 	.word	0x20000be7

080008cc <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2302      	movs	r3, #2
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2278      	movs	r2, #120	; 0x78
 80008e0:	210a      	movs	r1, #10
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <_DrawBiasSelectMenu+0x5c>)
 80008e4:	f007 ff7a 	bl	80087dc <ILI9341_Draw_Text>

	char bias[11] = "";
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(bias, sizeof(bias), "%u", (uint8_t)EM_GetOutputBias());
 80008f8:	f000 fc1c 	bl	8001134 <EM_GetOutputBias>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	1d38      	adds	r0, r7, #4
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <_DrawBiasSelectMenu+0x60>)
 8000904:	210b      	movs	r1, #11
 8000906:	f008 fd2d 	bl	8009364 <sniprintf>
	ILI9341_Draw_Text(bias, 250, 120, WHITE, 2, BLACK);
 800090a:	1d38      	adds	r0, r7, #4
 800090c:	2300      	movs	r3, #0
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	2302      	movs	r3, #2
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	2278      	movs	r2, #120	; 0x78
 800091a:	21fa      	movs	r1, #250	; 0xfa
 800091c:	f007 ff5e 	bl	80087dc <ILI9341_Draw_Text>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	0800a2f8 	.word	0x0800a2f8
 800092c:	0800a2dc 	.word	0x0800a2dc

08000930 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000936:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800093a:	f008 fa63 	bl	8008e04 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000940:	8818      	ldrh	r0, [r3, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2302      	movs	r3, #2
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	2250      	movs	r2, #80	; 0x50
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f007 fdd7 	bl	8008508 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 800095c:	8858      	ldrh	r0, [r3, #2]
 800095e:	2300      	movs	r3, #0
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2302      	movs	r3, #2
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2332      	movs	r3, #50	; 0x32
 800096e:	2250      	movs	r2, #80	; 0x50
 8000970:	21c8      	movs	r1, #200	; 0xc8
 8000972:	f007 fdc9 	bl	8008508 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000978:	8898      	ldrh	r0, [r3, #4]
 800097a:	2300      	movs	r3, #0
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2302      	movs	r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	2250      	movs	r2, #80	; 0x50
 800098c:	21c8      	movs	r1, #200	; 0xc8
 800098e:	f007 fdbb 	bl	8008508 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000994:	88d8      	ldrh	r0, [r3, #6]
 8000996:	2300      	movs	r3, #0
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2302      	movs	r3, #2
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2332      	movs	r3, #50	; 0x32
 80009a6:	2250      	movs	r2, #80	; 0x50
 80009a8:	21c8      	movs	r1, #200	; 0xc8
 80009aa:	f007 fdad 	bl	8008508 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

	switch(eNextState)
 80009bc:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	f200 808a 	bhi.w	8000ada <EM_ProcessEvent+0x122>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <EM_ProcessEvent+0x14>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009e1 	.word	0x080009e1
 80009d0:	08000a33 	.word	0x08000a33
 80009d4:	08000a5d 	.word	0x08000a5d
 80009d8:	08000a87 	.word	0x08000a87
 80009dc:	08000ab1 	.word	0x08000ab1
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 80009e0:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 80009e8:	f000 f888 	bl	8000afc <_FuncMenuHandler>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009f2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d105      	bne.n	8000a08 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 80009fc:	f000 fb18 	bl	8001030 <_FreqMenuHandler>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d105      	bne.n	8000a1c <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000a10:	f000 f964 	bl	8000cdc <_GainMenuHandler>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d15c      	bne.n	8000ade <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000a24:	f000 fa86 	bl	8000f34 <_BiasMenuHandler>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a30:	e055      	b.n	8000ade <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	d105      	bne.n	8000a46 <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000a3a:	f000 f871 	bl	8000b20 <_FuncSetHandler>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d149      	bne.n	8000ae2 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000a4e:	f000 f923 	bl	8000c98 <_ExitFuncMenuHandler>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a5a:	e042      	b.n	8000ae2 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d105      	bne.n	8000a70 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000a64:	f000 f94c 	bl	8000d00 <_GainSetHandler>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a6e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d136      	bne.n	8000ae6 <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000a78:	f000 fa3a 	bl	8000ef0 <_ExitGainMenuHandler>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a82:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a84:	e02f      	b.n	8000ae6 <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	d105      	bne.n	8000a9a <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000a8e:	f000 fae3 	bl	8001058 <_FreqSetHandler>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d123      	bne.n	8000aea <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000aa2:	f000 faf1 	bl	8001088 <_ExitFreqMenuHandler>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000aac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000aae:	e01c      	b.n	8000aea <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b05      	cmp	r3, #5
 8000ab6:	d105      	bne.n	8000ac4 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000ab8:	f000 fa54 	bl	8000f64 <_BiasSetHandler>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ac2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d110      	bne.n	8000aee <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000acc:	f000 fa8e 	bl	8000fec <_ExitBiasMenuHandler>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ad6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ad8:	e009      	b.n	8000aee <EM_ProcessEvent+0x136>

		default:
			break;
 8000ada:	bf00      	nop
 8000adc:	e008      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e006      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e004      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae6:	bf00      	nop
 8000ae8:	e002      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aee:	bf00      	nop
	}

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000be8 	.word	0x20000be8
 8000af8:	20000be9 	.word	0x20000be9

08000afc <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <_FuncMenuHandler+0x1c>)
 8000b02:	f008 fc27 	bl	8009354 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fc82 	bl	8000410 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 20;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <_FuncMenuHandler+0x20>)
 8000b0e:	2214      	movs	r2, #20
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	0800a370 	.word	0x0800a370
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af02      	add	r7, sp, #8
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <_FuncSetHandler+0x14c>)
 8000b28:	f008 fc14 	bl	8009354 <puts>
#endif

	switch(TIM1->CNT)
 8000b2c:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <_FuncSetHandler+0x150>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	2b17      	cmp	r3, #23
 8000b32:	f200 8093 	bhi.w	8000c5c <_FuncSetHandler+0x13c>
 8000b36:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <_FuncSetHandler+0x1c>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000b9d 	.word	0x08000b9d
 8000b40:	08000b9d 	.word	0x08000b9d
 8000b44:	08000b9d 	.word	0x08000b9d
 8000b48:	08000bbd 	.word	0x08000bbd
 8000b4c:	08000bbd 	.word	0x08000bbd
 8000b50:	08000bbd 	.word	0x08000bbd
 8000b54:	08000bbd 	.word	0x08000bbd
 8000b58:	08000bdd 	.word	0x08000bdd
 8000b5c:	08000bdd 	.word	0x08000bdd
 8000b60:	08000bdd 	.word	0x08000bdd
 8000b64:	08000bdd 	.word	0x08000bdd
 8000b68:	08000bfd 	.word	0x08000bfd
 8000b6c:	08000bfd 	.word	0x08000bfd
 8000b70:	08000bfd 	.word	0x08000bfd
 8000b74:	08000bfd 	.word	0x08000bfd
 8000b78:	08000c1d 	.word	0x08000c1d
 8000b7c:	08000c1d 	.word	0x08000c1d
 8000b80:	08000c1d 	.word	0x08000c1d
 8000b84:	08000c1d 	.word	0x08000c1d
 8000b88:	08000c3d 	.word	0x08000c3d
 8000b8c:	08000c3d 	.word	0x08000c3d
 8000b90:	08000c3d 	.word	0x08000c3d
 8000b94:	08000c3d 	.word	0x08000c3d
 8000b98:	08000c3d 	.word	0x08000c3d
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <_FuncSetHandler+0x154>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4834      	ldr	r0, [pc, #208]	; (8000c78 <_FuncSetHandler+0x158>)
 8000ba6:	f003 feb3 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000baa:	2300      	movs	r3, #0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2378      	movs	r3, #120	; 0x78
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <_FuncSetHandler+0x15c>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4830      	ldr	r0, [pc, #192]	; (8000c78 <_FuncSetHandler+0x158>)
 8000bb6:	f003 fde9 	bl	800478c <HAL_DAC_Start_DMA>
			break;
 8000bba:	e04f      	b.n	8000c5c <_FuncSetHandler+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <_FuncSetHandler+0x154>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	482c      	ldr	r0, [pc, #176]	; (8000c78 <_FuncSetHandler+0x158>)
 8000bc6:	f003 fea3 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2378      	movs	r3, #120	; 0x78
 8000bd0:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <_FuncSetHandler+0x160>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4828      	ldr	r0, [pc, #160]	; (8000c78 <_FuncSetHandler+0x158>)
 8000bd6:	f003 fdd9 	bl	800478c <HAL_DAC_Start_DMA>

			break;
 8000bda:	e03f      	b.n	8000c5c <_FuncSetHandler+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <_FuncSetHandler+0x154>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000be2:	2100      	movs	r1, #0
 8000be4:	4824      	ldr	r0, [pc, #144]	; (8000c78 <_FuncSetHandler+0x158>)
 8000be6:	f003 fe93 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2378      	movs	r3, #120	; 0x78
 8000bf0:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <_FuncSetHandler+0x164>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4820      	ldr	r0, [pc, #128]	; (8000c78 <_FuncSetHandler+0x158>)
 8000bf6:	f003 fdc9 	bl	800478c <HAL_DAC_Start_DMA>
			break;
 8000bfa:	e02f      	b.n	8000c5c <_FuncSetHandler+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <_FuncSetHandler+0x154>)
 8000bfe:	2203      	movs	r2, #3
 8000c00:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c06:	f003 fe83 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2378      	movs	r3, #120	; 0x78
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <_FuncSetHandler+0x168>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4818      	ldr	r0, [pc, #96]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c16:	f003 fdb9 	bl	800478c <HAL_DAC_Start_DMA>
			break;
 8000c1a:	e01f      	b.n	8000c5c <_FuncSetHandler+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_FuncSetHandler+0x154>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4814      	ldr	r0, [pc, #80]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c26:	f003 fe73 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2378      	movs	r3, #120	; 0x78
 8000c30:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <_FuncSetHandler+0x16c>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c36:	f003 fda9 	bl	800478c <HAL_DAC_Start_DMA>
			break;
 8000c3a:	e00f      	b.n	8000c5c <_FuncSetHandler+0x13c>
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
			eNewOutMode = Impulse_Out_Mode;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <_FuncSetHandler+0x154>)
 8000c3e:	2205      	movs	r2, #5
 8000c40:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000c42:	2100      	movs	r1, #0
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c46:	f003 fe63 	bl	8004910 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2378      	movs	r3, #120	; 0x78
 8000c50:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <_FuncSetHandler+0x170>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <_FuncSetHandler+0x158>)
 8000c56:	f003 fd99 	bl	800478c <HAL_DAC_Start_DMA>
			break;
 8000c5a:	bf00      	nop
	}
	eNewEvent = evFuncMenu;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <_FuncSetHandler+0x174>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	0800a38c 	.word	0x0800a38c
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	20000bea 	.word	0x20000bea
 8000c78:	20000d18 	.word	0x20000d18
 8000c7c:	200003e4 	.word	0x200003e4
 8000c80:	200005c4 	.word	0x200005c4
 8000c84:	20000024 	.word	0x20000024
 8000c88:	20000204 	.word	0x20000204
 8000c8c:	200007a4 	.word	0x200007a4
 8000c90:	20000984 	.word	0x20000984
 8000c94:	20000be9 	.word	0x20000be9

08000c98 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <_ExitFuncMenuHandler+0x34>)
 8000c9e:	f008 fb59 	bl	8009354 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fbb4 	bl	8000410 <DM_ShowFuncSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <_ExitFuncMenuHandler+0x38>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <_ExitFuncMenuHandler+0x3c>)
 8000cb2:	f006 f951 	bl	8006f58 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000cb6:	f7ff fe3b 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <_ExitFuncMenuHandler+0x3c>)
 8000cbc:	f006 f916 	bl	8006eec <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <_ExitFuncMenuHandler+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800a3ac 	.word	0x0800a3ac
 8000cd0:	40012c00 	.word	0x40012c00
 8000cd4:	20000e9c 	.word	0x20000e9c
 8000cd8:	20000be9 	.word	0x20000be9

08000cdc <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <_GainMenuHandler+0x1c>)
 8000ce2:	f008 fb37 	bl	8009354 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd5c 	bl	80007a4 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 32;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <_GainMenuHandler+0x20>)
 8000cee:	2220      	movs	r2, #32
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000cf2:	2302      	movs	r3, #2
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800a3c8 	.word	0x0800a3c8
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000d04:	4874      	ldr	r0, [pc, #464]	; (8000ed8 <_GainSetHandler+0x1d8>)
 8000d06:	f008 fb25 	bl	8009354 <puts>
#endif
	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(TIM1->CNT)
 8000d0a:	4b74      	ldr	r3, [pc, #464]	; (8000edc <_GainSetHandler+0x1dc>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	2b1f      	cmp	r3, #31
 8000d10:	f200 80dc 	bhi.w	8000ecc <_GainSetHandler+0x1cc>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <_GainSetHandler+0x1c>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d9d 	.word	0x08000d9d
 8000d20:	08000d9d 	.word	0x08000d9d
 8000d24:	08000d9d 	.word	0x08000d9d
 8000d28:	08000d9d 	.word	0x08000d9d
 8000d2c:	08000dc3 	.word	0x08000dc3
 8000d30:	08000dc3 	.word	0x08000dc3
 8000d34:	08000dc3 	.word	0x08000dc3
 8000d38:	08000dc3 	.word	0x08000dc3
 8000d3c:	08000de9 	.word	0x08000de9
 8000d40:	08000de9 	.word	0x08000de9
 8000d44:	08000de9 	.word	0x08000de9
 8000d48:	08000de9 	.word	0x08000de9
 8000d4c:	08000e0f 	.word	0x08000e0f
 8000d50:	08000e0f 	.word	0x08000e0f
 8000d54:	08000e0f 	.word	0x08000e0f
 8000d58:	08000e0f 	.word	0x08000e0f
 8000d5c:	08000e35 	.word	0x08000e35
 8000d60:	08000e35 	.word	0x08000e35
 8000d64:	08000e35 	.word	0x08000e35
 8000d68:	08000e35 	.word	0x08000e35
 8000d6c:	08000e5b 	.word	0x08000e5b
 8000d70:	08000e5b 	.word	0x08000e5b
 8000d74:	08000e5b 	.word	0x08000e5b
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000e81 	.word	0x08000e81
 8000d80:	08000e81 	.word	0x08000e81
 8000d84:	08000e81 	.word	0x08000e81
 8000d88:	08000e81 	.word	0x08000e81
 8000d8c:	08000ea7 	.word	0x08000ea7
 8000d90:	08000ea7 	.word	0x08000ea7
 8000d94:	08000ea7 	.word	0x08000ea7
 8000d98:	08000ea7 	.word	0x08000ea7
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2101      	movs	r1, #1
 8000da0:	484f      	ldr	r0, [pc, #316]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000da2:	f004 fcf9 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	484e      	ldr	r0, [pc, #312]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000dac:	f004 fcf4 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000db6:	f004 fcef 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
			break;
 8000dc0:	e084      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000dc8:	f004 fce6 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000dd2:	f004 fce1 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4842      	ldr	r0, [pc, #264]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000ddc:	f004 fcdc 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8000de0:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
			break;
 8000de6:	e071      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	483c      	ldr	r0, [pc, #240]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000dee:	f004 fcd3 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2120      	movs	r1, #32
 8000df6:	483b      	ldr	r0, [pc, #236]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000df8:	f004 fcce 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e02:	f004 fcc9 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	701a      	strb	r2, [r3, #0]
			break;
 8000e0c:	e05e      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2101      	movs	r1, #1
 8000e12:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000e14:	f004 fcc0 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e1e:	f004 fcbb 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2110      	movs	r1, #16
 8000e26:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e28:	f004 fcb6 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000e2e:	2203      	movs	r2, #3
 8000e30:	701a      	strb	r2, [r3, #0]
			break;
 8000e32:	e04b      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000e3a:	f004 fcad 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2120      	movs	r1, #32
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e44:	f004 fca8 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4825      	ldr	r0, [pc, #148]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e4e:	f004 fca3 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	701a      	strb	r2, [r3, #0]
			break;
 8000e58:	e038      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000e60:	f004 fc9a 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2120      	movs	r1, #32
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e6a:	f004 fc95 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2110      	movs	r1, #16
 8000e72:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e74:	f004 fc90 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	701a      	strb	r2, [r3, #0]
			break;
 8000e7e:	e025      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000e86:	f004 fc87 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e90:	f004 fc82 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2110      	movs	r1, #16
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000e9a:	f004 fc7d 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	701a      	strb	r2, [r3, #0]
			break;
 8000ea4:	e012      	b.n	8000ecc <_GainSetHandler+0x1cc>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <_GainSetHandler+0x1e0>)
 8000eac:	f004 fc74 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000eb6:	f004 fc6f 	bl	8005798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <_GainSetHandler+0x1e4>)
 8000ec0:	f004 fc6a 	bl	8005798 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_GainSetHandler+0x1e8>)
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
			break;
 8000eca:	bf00      	nop
	}
	eNewEvent = evGainMenu;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_GainSetHandler+0x1ec>)
 8000ece:	2203      	movs	r2, #3
 8000ed0:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000ed2:	2302      	movs	r3, #2
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	0800a3e0 	.word	0x0800a3e0
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000be9 	.word	0x20000be9

08000ef0 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <_ExitGainMenuHandler+0x34>)
 8000ef6:	f008 fa2d 	bl	8009354 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fc52 	bl	80007a4 <DM_ShowGainSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <_ExitGainMenuHandler+0x38>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <_ExitGainMenuHandler+0x3c>)
 8000f0a:	f006 f825 	bl	8006f58 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f0e:	f7ff fd0f 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <_ExitGainMenuHandler+0x3c>)
 8000f14:	f005 ffea 	bl	8006eec <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <_ExitGainMenuHandler+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800a3f8 	.word	0x0800a3f8
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	20000e9c 	.word	0x20000e9c
 8000f30:	20000be9 	.word	0x20000be9

08000f34 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <_BiasMenuHandler+0x28>)
 8000f3a:	f008 fa0b 	bl	8009354 <puts>
#endif
	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fcb4 	bl	80008ac <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	TIM1->ARR = BIAS_MAX;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <_BiasMenuHandler+0x2c>)
 8000f46:	f240 3229 	movw	r2, #809	; 0x329
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CNT = BIAS_CENTER;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <_BiasMenuHandler+0x2c>)
 8000f4e:	f240 1299 	movw	r2, #409	; 0x199
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000f54:	2304      	movs	r3, #4
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800a414 	.word	0x0800a414
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <_BiasSetHandler+0x78>)
 8000f6a:	f008 f9f3 	bl	8009354 <puts>
#endif

	// apply negative dc bias
	if(TIM1->CNT < 400) {
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <_BiasSetHandler+0x7c>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f76:	d212      	bcs.n	8000f9e <_BiasSetHandler+0x3a>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (BIAS_CENTER-TIM1->CNT)*BIAS_MAG);
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <_BiasSetHandler+0x7c>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f06f 0209 	mvn.w	r2, #9
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	f603 73fa 	addw	r3, r3, #4090	; 0xffa
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <_BiasSetHandler+0x80>)
 8000f8e:	f003 fd15 	bl	80049bc <HAL_DAC_SetValue>
	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f004 fbfd 	bl	8005798 <HAL_GPIO_WritePin>
	}
	// apply positive dc bias
	if(TIM1->CNT >= 400) {
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_BiasSetHandler+0x7c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fa6:	d312      	bcc.n	8000fce <_BiasSetHandler+0x6a>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (TIM1->CNT-BIAS_CENTER)*BIAS_MAG);
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <_BiasSetHandler+0x7c>)
 8000faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	f6a3 73fa 	subw	r3, r3, #4090	; 0xffa
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <_BiasSetHandler+0x80>)
 8000fbe:	f003 fcfd 	bl	80049bc <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f004 fbe5 	bl	8005798 <HAL_GPIO_WritePin>
	}

	eNewEvent = evBiasMenu;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <_BiasSetHandler+0x84>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000fd4:	2304      	movs	r3, #4
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800a42c 	.word	0x0800a42c
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	20000d18 	.word	0x20000d18
 8000fe8:	20000be9 	.word	0x20000be9

08000fec <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <_ExitBiasMenuHandler+0x34>)
 8000ff2:	f008 f9af 	bl	8009354 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fc58 	bl	80008ac <DM_ShowBiasSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <_ExitBiasMenuHandler+0x38>)
 8000ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <_ExitBiasMenuHandler+0x3c>)
 8001006:	f005 ffa7 	bl	8006f58 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 800100a:	f7ff fc91 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <_ExitBiasMenuHandler+0x3c>)
 8001010:	f005 ff6c 	bl	8006eec <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <_ExitBiasMenuHandler+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800a444 	.word	0x0800a444
 8001024:	40012c00 	.word	0x40012c00
 8001028:	20000e9c 	.word	0x20000e9c
 800102c:	20000be9 	.word	0x20000be9

08001030 <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <_FreqMenuHandler+0x20>)
 8001036:	f008 f98d 	bl	8009354 <puts>
#endif
	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fbf4 	bl	8000828 <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 1024;
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <_FreqMenuHandler+0x24>)
 8001042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8001048:	2303      	movs	r3, #3
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800a460 	.word	0x0800a460
 8001054:	40012c00 	.word	0x40012c00

08001058 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <_FreqSetHandler+0x20>)
 800105e:	f008 f979 	bl	8009354 <puts>
#endif

	TIM8->ARR = TIM1->CNT;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <_FreqSetHandler+0x24>)
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <_FreqSetHandler+0x28>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	62d3      	str	r3, [r2, #44]	; 0x2c
	eNewEvent = evFreqMenu;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <_FreqSetHandler+0x2c>)
 800106c:	2202      	movs	r2, #2
 800106e:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8001070:	2303      	movs	r3, #3
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	0800a478 	.word	0x0800a478
 800107c:	40012c00 	.word	0x40012c00
 8001080:	40013400 	.word	0x40013400
 8001084:	20000be9 	.word	0x20000be9

08001088 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <_ExitFreqMenuHandler+0x34>)
 800108e:	f008 f961 	bl	8009354 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fbc8 	bl	8000828 <DM_ShowFreqSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <_ExitFreqMenuHandler+0x38>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <_ExitFreqMenuHandler+0x3c>)
 80010a2:	f005 ff59 	bl	8006f58 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80010a6:	f7ff fc43 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <_ExitFreqMenuHandler+0x3c>)
 80010ac:	f005 ff1e 	bl	8006eec <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <_ExitFreqMenuHandler+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800a490 	.word	0x0800a490
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	20000e9c 	.word	0x20000e9c
 80010c8:	20000be9 	.word	0x20000be9

080010cc <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <EM_SetNewEvent+0x1c>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	7013      	strb	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000be9 	.word	0x20000be9

080010ec <EM_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode EM_GetOutputMode()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <EM_GetOutputMode+0x14>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000bea 	.word	0x20000bea

08001104 <EM_GetOutputGain>:
 *
 *
 *
 */
eOutput_gain EM_GetOutputGain()
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	return eNewOutGain;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <EM_GetOutputGain+0x14>)
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <EM_GetOutputFreq>:
 *
 *
 *
 */
uint32_t EM_GetOutputFreq()
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <EM_GetOutputFreq+0x14>)
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40013400 	.word	0x40013400

08001134 <EM_GetOutputBias>:
 *
 *
 *
 */
uint32_t EM_GetOutputBias()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8001138:	2110      	movs	r1, #16
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <EM_GetOutputBias+0x14>)
 800113c:	f003 fc7a 	bl	8004a34 <HAL_DAC_GetValue>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000d18 	.word	0x20000d18

0800114c <EM_SetEncoderValue>:
 *
 *
 *
 */
void EM_SetEncoderValue(uint32_t pValue)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	newRotEncoderValue = pValue;
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <EM_SetEncoderValue+0x1c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]


}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000bec 	.word	0x20000bec

0800116c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f008 f881 	bl	800928c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_ADC1_Init+0xe8>)
 800118c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001190:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <MX_ADC1_Init+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_ADC1_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <MX_ADC1_Init+0xe8>)
 80011f6:	f001 ffc7 	bl	8003188 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001200:	f000 ff3a 	bl	8002078 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_ADC1_Init+0xe8>)
 8001210:	f002 fd50 	bl	8003cb4 <HAL_ADCEx_MultiModeConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800121a:	f000 ff2d 	bl	8002078 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_ADC1_Init+0xec>)
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001222:	2306      	movs	r3, #6
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122a:	237f      	movs	r3, #127	; 0x7f
 800122c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122e:	2304      	movs	r3, #4
 8001230:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_ADC1_Init+0xe8>)
 800123c:	f002 f964 	bl	8003508 <HAL_ADC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001246:	f000 ff17 	bl	8002078 <Error_Handler>
  }

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000c14 	.word	0x20000c14
 8001258:	0c900008 	.word	0x0c900008

0800125c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127c:	d14f      	bne.n	800131e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 8001284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_ADC_MspInit+0xcc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f004 f8ce 	bl	8005464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_ADC_MspInit+0xd4>)
 80012cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012f8:	2220      	movs	r2, #32
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_ADC_MspInit+0xd0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001302:	480a      	ldr	r0, [pc, #40]	; (800132c <HAL_ADC_MspInit+0xd0>)
 8001304:	f003 fde2 	bl	8004ecc <HAL_DMA_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800130e:	f000 feb3 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_ADC_MspInit+0xd0>)
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_ADC_MspInit+0xd0>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	20000c80 	.word	0x20000c80
 8001330:	40020008 	.word	0x40020008

08001334 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_COMP1_Init+0x44>)
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <MX_COMP1_Init+0x48>)
 800133c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_COMP1_Init+0x44>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_COMP1_Init+0x44>)
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <MX_COMP1_Init+0x4c>)
 8001348:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_COMP1_Init+0x44>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_COMP1_Init+0x44>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_COMP1_Init+0x44>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_COMP1_Init+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_COMP1_Init+0x44>)
 8001364:	f002 fefa 	bl	800415c <HAL_COMP_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800136e:	f000 fe83 	bl	8002078 <Error_Handler>
  }

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000ce0 	.word	0x20000ce0
 800137c:	40010200 	.word	0x40010200
 8001380:	00800030 	.word	0x00800030

08001384 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_COMP_MspInit+0x5c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d118      	bne.n	80013d8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_COMP_MspInit+0x60>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_COMP_MspInit+0x60>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_COMP_MspInit+0x60>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013be:	2302      	movs	r3, #2
 80013c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f004 f846 	bl	8005464 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010200 	.word	0x40010200
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 ff49 	bl	800928c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_DAC1_Init+0x8c>)
 80013fc:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <MX_DAC1_Init+0x90>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	481c      	ldr	r0, [pc, #112]	; (8001474 <MX_DAC1_Init+0x8c>)
 8001402:	f003 f94e 	bl	80046a2 <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f000 fe34 	bl	8002078 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001410:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8001422:	2306      	movs	r3, #6
 8001424:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_DAC1_Init+0x8c>)
 800143e:	f003 fb0f 	bl	8004a60 <HAL_DAC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8001448:	f000 fe16 	bl	8002078 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001450:	2301      	movs	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	2210      	movs	r2, #16
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_DAC1_Init+0x8c>)
 800145c:	f003 fb00 	bl	8004a60 <HAL_DAC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8001466:	f000 fe07 	bl	8002078 <Error_Handler>
  }

}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000d18 	.word	0x20000d18
 8001478:	50000800 	.word	0x50000800

0800147c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001482:	463b      	mov	r3, r7
 8001484:	2230      	movs	r2, #48	; 0x30
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f007 feff 	bl	800928c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_DAC2_Init+0x6c>)
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <MX_DAC2_Init+0x70>)
 8001492:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_DAC2_Init+0x6c>)
 8001496:	f003 f904 	bl	80046a2 <HAL_DAC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80014a0:	f000 fdea 	bl	8002078 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80014a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80014b6:	2306      	movs	r3, #6
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_DAC2_Init+0x6c>)
 80014d2:	f003 fac5 	bl	8004a60 <HAL_DAC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80014dc:	f000 fdcc 	bl	8002078 <Error_Handler>
  }

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000d04 	.word	0x20000d04
 80014ec:	50000c00 	.word	0x50000c00

080014f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a56      	ldr	r2, [pc, #344]	; (8001668 <HAL_DAC_MspInit+0x178>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d150      	bne.n	80015b4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a55      	ldr	r2, [pc, #340]	; (800166c <HAL_DAC_MspInit+0x17c>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_DAC_MspInit+0x17c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_DAC_MspInit+0x17c>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001542:	2330      	movs	r3, #48	; 0x30
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f003 ff84 	bl	8005464 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_DAC_MspInit+0x180>)
 800155e:	4a45      	ldr	r2, [pc, #276]	; (8001674 <HAL_DAC_MspInit+0x184>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001564:	2206      	movs	r2, #6
 8001566:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_DAC_MspInit+0x180>)
 800156a:	2210      	movs	r2, #16
 800156c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b40      	ldr	r3, [pc, #256]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <HAL_DAC_MspInit+0x180>)
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001588:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_DAC_MspInit+0x180>)
 800158c:	2220      	movs	r2, #32
 800158e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001596:	4836      	ldr	r0, [pc, #216]	; (8001670 <HAL_DAC_MspInit+0x180>)
 8001598:	f003 fc98 	bl	8004ecc <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80015a2:	f000 fd69 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x180>)
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	4a30      	ldr	r2, [pc, #192]	; (8001670 <HAL_DAC_MspInit+0x180>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015b2:	e054      	b.n	800165e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <HAL_DAC_MspInit+0x188>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d14f      	bne.n	800165e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x17c>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f003 ff2e 	bl	8005464 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_DAC_MspInit+0x18c>)
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_DAC_MspInit+0x190>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001610:	2229      	movs	r2, #41	; 0x29
 8001612:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001616:	2210      	movs	r2, #16
 8001618:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_DAC_MspInit+0x18c>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001634:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_DAC_MspInit+0x18c>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001644:	f003 fc42 	bl	8004ecc <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800164e:	f000 fd13 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_DAC_MspInit+0x18c>)
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_DAC_MspInit+0x18c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	50000800 	.word	0x50000800
 800166c:	40021000 	.word	0x40021000
 8001670:	20000d2c 	.word	0x20000d2c
 8001674:	4002001c 	.word	0x4002001c
 8001678:	50000c00 	.word	0x50000c00
 800167c:	20000d8c 	.word	0x20000d8c
 8001680:	40020030 	.word	0x40020030

08001684 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_DMA_Init+0x70>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_DMA_Init+0x70>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6493      	str	r3, [r2, #72]	; 0x48
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_DMA_Init+0x70>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_DMA_Init+0x70>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <MX_DMA_Init+0x70>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6493      	str	r3, [r2, #72]	; 0x48
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_DMA_Init+0x70>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	200b      	movs	r0, #11
 80016c0:	f002 ffbb 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016c4:	200b      	movs	r0, #11
 80016c6:	f002 ffd2 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	200c      	movs	r0, #12
 80016d0:	f002 ffb3 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016d4:	200c      	movs	r0, #12
 80016d6:	f002 ffca 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	200d      	movs	r0, #13
 80016e0:	f002 ffab 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016e4:	200d      	movs	r0, #13
 80016e6:	f002 ffc2 	bl	800466e <HAL_NVIC_EnableIRQ>

}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <update_dc_bias_sweep+0x88>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <update_dc_bias_sweep+0x1a>
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <update_dc_bias_sweep+0x8c>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <update_dc_bias_sweep+0x8c>)
 800170e:	801a      	strh	r2, [r3, #0]
 8001710:	e005      	b.n	800171e <update_dc_bias_sweep+0x26>
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <update_dc_bias_sweep+0x8c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <update_dc_bias_sweep+0x8c>)
 800171c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <update_dc_bias_sweep+0x8c>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10a      	bne.n	800173c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <update_dc_bias_sweep+0x90>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <update_dc_bias_sweep+0x3e>
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <update_dc_bias_sweep+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e002      	b.n	800173c <update_dc_bias_sweep+0x44>
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <update_dc_bias_sweep+0x90>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <update_dc_bias_sweep+0x8c>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <update_dc_bias_sweep+0x52>
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <update_dc_bias_sweep+0x88>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <update_dc_bias_sweep+0x8c>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001752:	d302      	bcc.n	800175a <update_dc_bias_sweep+0x62>
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <update_dc_bias_sweep+0x88>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <update_dc_bias_sweep+0x90>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	2108      	movs	r1, #8
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f004 f816 	bl	8005798 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <update_dc_bias_sweep+0x8c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	2110      	movs	r1, #16
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <update_dc_bias_sweep+0x94>)
 8001776:	f003 f921 	bl	80049bc <HAL_DAC_SetValue>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000000c 	.word	0x2000000c
 8001784:	20000bf0 	.word	0x20000bf0
 8001788:	20000bf4 	.word	0x20000bf4
 800178c:	20000d18 	.word	0x20000d18

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <LL_SYSCFG_SetEXTISource+0x5c>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	43db      	mvns	r3, r3
 80018c2:	ea02 0103 	and.w	r1, r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	409a      	lsls	r2, r3
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <LL_SYSCFG_SetEXTISource+0x5c>)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	430a      	orrs	r2, r1
 80018ee:	3302      	adds	r3, #2
 80018f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40010000 	.word	0x40010000

08001904 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	613b      	str	r3, [r7, #16]
  return result;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2103      	movs	r1, #3
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	61bb      	str	r3, [r7, #24]
  return result;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001962:	b480      	push	{r7}
 8001964:	b089      	sub	sp, #36	; 0x24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	613b      	str	r3, [r7, #16]
  return result;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2103      	movs	r1, #3
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	61bb      	str	r3, [r7, #24]
  return result;
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	60da      	str	r2, [r3, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3724      	adds	r7, #36	; 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff ffd4 	bl	80019dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001a34:	2020      	movs	r0, #32
 8001a36:	f7ff ffd1 	bl	80019dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff ffce 	bl	80019dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f7ff ffcb 	bl	80019dc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001a46:	2108      	movs	r1, #8
 8001a48:	48d3      	ldr	r0, [pc, #844]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001a4a:	f7ff ffb9 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001a4e:	2108      	movs	r1, #8
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f7ff ffb4 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001a58:	2110      	movs	r1, #16
 8001a5a:	48cf      	ldr	r0, [pc, #828]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001a5c:	f7ff ffb0 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001a60:	2120      	movs	r1, #32
 8001a62:	48cd      	ldr	r0, [pc, #820]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001a64:	f7ff ffac 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	48cc      	ldr	r0, [pc, #816]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001a6c:	f7ff ffa8 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a74:	48c8      	ldr	r0, [pc, #800]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001a76:	f7ff ffa3 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7e:	48c6      	ldr	r0, [pc, #792]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001a80:	f7ff ff9e 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	48c5      	ldr	r0, [pc, #788]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001a88:	f7ff ff9a 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	48c3      	ldr	r0, [pc, #780]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001a90:	f7ff ff96 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a98:	48c0      	ldr	r0, [pc, #768]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001a9a:	f7ff ff91 	bl	80019c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001a9e:	49c0      	ldr	r1, [pc, #768]	; (8001da0 <MX_GPIO_Init+0x394>)
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff feff 	bl	80018a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001aa6:	49bf      	ldr	r1, [pc, #764]	; (8001da4 <MX_GPIO_Init+0x398>)
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7ff fefb 	bl	80018a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001aae:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f7ff fef6 	bl	80018a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001ab8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001abc:	2005      	movs	r0, #5
 8001abe:	f7ff fef1 	bl	80018a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001ac2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	f7ff feec 	bl	80018a4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 faab 	bl	8008044 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f006 fa9a 	bl	8008044 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f006 fa8a 	bl	8008044 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 fa7a 	bl	8008044 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001b50:	2304      	movs	r3, #4
 8001b52:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f006 fa6a 	bl	8008044 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b76:	4888      	ldr	r0, [pc, #544]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001b78:	f7ff fef3 	bl	8001962 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b82:	4885      	ldr	r0, [pc, #532]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001b84:	f7ff feed 	bl	8001962 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4886      	ldr	r0, [pc, #536]	; (8001da8 <MX_GPIO_Init+0x39c>)
 8001b8e:	f7ff fee8 	bl	8001962 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2102      	movs	r1, #2
 8001b96:	4884      	ldr	r0, [pc, #528]	; (8001da8 <MX_GPIO_Init+0x39c>)
 8001b98:	f7ff fee3 	bl	8001962 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	487d      	ldr	r0, [pc, #500]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001ba2:	f7ff fede 	bl	8001962 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bac:	487a      	ldr	r0, [pc, #488]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001bae:	f7ff fea9 	bl	8001904 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb8:	4877      	ldr	r0, [pc, #476]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001bba:	f7ff fea3 	bl	8001904 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4879      	ldr	r0, [pc, #484]	; (8001da8 <MX_GPIO_Init+0x39c>)
 8001bc4:	f7ff fe9e 	bl	8001904 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2102      	movs	r1, #2
 8001bcc:	4876      	ldr	r0, [pc, #472]	; (8001da8 <MX_GPIO_Init+0x39c>)
 8001bce:	f7ff fe99 	bl	8001904 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4870      	ldr	r0, [pc, #448]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001bd8:	f7ff fe94 	bl	8001904 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4868      	ldr	r0, [pc, #416]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001bf6:	f006 fc18 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c16:	f006 fc08 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4859      	ldr	r0, [pc, #356]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001c34:	f006 fbf9 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4851      	ldr	r0, [pc, #324]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001c52:	f006 fbea 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001c56:	2301      	movs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	484b      	ldr	r0, [pc, #300]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001c70:	f006 fbdb 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4842      	ldr	r0, [pc, #264]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001c90:	f006 fbcb 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	483a      	ldr	r0, [pc, #232]	; (8001d98 <MX_GPIO_Init+0x38c>)
 8001cb0:	f006 fbbb 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4833      	ldr	r0, [pc, #204]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001cce:	f006 fbac 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	482c      	ldr	r0, [pc, #176]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001cec:	f006 fb9d 	bl	800842a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4824      	ldr	r0, [pc, #144]	; (8001d9c <MX_GPIO_Init+0x390>)
 8001d0c:	f006 fb8d 	bl	800842a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d10:	f7ff fd3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fd8e 	bl	800183c <NVIC_EncodePriority>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	2006      	movs	r0, #6
 8001d26:	f7ff fd5f 	bl	80017e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001d2a:	2006      	movs	r0, #6
 8001d2c:	f7ff fd3e 	bl	80017ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d30:	f7ff fd2e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fd7e 	bl	800183c <NVIC_EncodePriority>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	2007      	movs	r0, #7
 8001d46:	f7ff fd4f 	bl	80017e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f7ff fd2e 	bl	80017ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d50:	f7ff fd1e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fd6e 	bl	800183c <NVIC_EncodePriority>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	2008      	movs	r0, #8
 8001d66:	f7ff fd3f 	bl	80017e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001d6a:	2008      	movs	r0, #8
 8001d6c:	f7ff fd1e 	bl	80017ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d70:	f7ff fd0e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fd5e 	bl	800183c <NVIC_EncodePriority>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4619      	mov	r1, r3
 8001d84:	2028      	movs	r0, #40	; 0x28
 8001d86:	f7ff fd2f 	bl	80017e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d8a:	2028      	movs	r0, #40	; 0x28
 8001d8c:	f7ff fd0e 	bl	80017ac <__NVIC_EnableIRQ>

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	e009      	b.n	8001dac <MX_GPIO_Init+0x3a0>
 8001d98:	48000800 	.word	0x48000800
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	0f000003 	.word	0x0f000003
 8001da4:	f0000003 	.word	0xf0000003
 8001da8:	48001400 	.word	0x48001400
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop

08001db0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001db8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dbc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dcc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001dd0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dd8:	e000      	b.n	8001ddc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ddc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f9      	beq.n	8001dda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001de6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e009      	b.n	8001e28 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ffc7 	bl	8001db0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf1      	blt.n	8001e14 <_write+0x16>
  return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	// do something
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e56:	f000 ff42 	bl	8002cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5a:	f000 f89f 	bl	8001f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5e:	f7ff fdd5 	bl	8001a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e62:	f7ff fc0f 	bl	8001684 <MX_DMA_Init>
  MX_DAC1_Init();
 8001e66:	f7ff fabf 	bl	80013e8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001e6a:	f7ff fb07 	bl	800147c <MX_DAC2_Init>
  MX_ADC1_Init();
 8001e6e:	f7ff f97d 	bl	800116c <MX_ADC1_Init>
  MX_COMP1_Init();
 8001e72:	f7ff fa5f 	bl	8001334 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001e76:	f000 fc29 	bl	80026cc <MX_TIM2_Init>
  MX_TIM17_Init();
 8001e7a:	f000 fdc1 	bl	8002a00 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001e7e:	f000 f939 	bl	80020f4 <MX_SPI3_Init>
  MX_RNG_Init();
 8001e82:	f000 f929 	bl	80020d8 <MX_RNG_Init>
  MX_TIM1_Init();
 8001e86:	f000 fbb1 	bl	80025ec <MX_TIM1_Init>
  MX_TIM8_Init();
 8001e8a:	f000 fcd9 	bl	8002840 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001e8e:	f000 fd91 	bl	80029b4 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001e92:	f000 fd3d 	bl	8002910 <MX_TIM15_Init>
  MX_TIM5_Init();
 8001e96:	f000 fc83 	bl	80027a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2378      	movs	r3, #120	; 0x78
 8001ea0:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <main+0x11c>)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4832      	ldr	r0, [pc, #200]	; (8001f70 <main+0x120>)
 8001ea6:	f002 fc71 	bl	800478c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4830      	ldr	r0, [pc, #192]	; (8001f70 <main+0x120>)
 8001eae:	f002 fc1a 	bl	80046e6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2378      	movs	r3, #120	; 0x78
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <main+0x124>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	482e      	ldr	r0, [pc, #184]	; (8001f78 <main+0x128>)
 8001ebe:	f002 fc65 	bl	800478c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <main+0x12c>)
 8001ec4:	f004 ffe4 	bl	8006e90 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2108      	movs	r1, #8
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed0:	f003 fc62 	bl	8005798 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4829      	ldr	r0, [pc, #164]	; (8001f80 <main+0x130>)
 8001eda:	f003 fc5d 	bl	8005798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	4828      	ldr	r0, [pc, #160]	; (8001f84 <main+0x134>)
 8001ee4:	f003 fc58 	bl	8005798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2110      	movs	r1, #16
 8001eec:	4825      	ldr	r0, [pc, #148]	; (8001f84 <main+0x134>)
 8001eee:	f003 fc53 	bl	8005798 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef8:	4822      	ldr	r0, [pc, #136]	; (8001f84 <main+0x134>)
 8001efa:	f003 fc4d 	bl	8005798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <main+0x134>)
 8001f06:	f003 fc47 	bl	8005798 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2108      	movs	r1, #8
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <main+0x134>)
 8001f10:	f003 fc42 	bl	8005798 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1e:	f023 0307 	bic.w	r3, r3, #7
 8001f22:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2e:	f043 0305 	orr.w	r3, r3, #5
 8001f32:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001f34:	4814      	ldr	r0, [pc, #80]	; (8001f88 <main+0x138>)
 8001f36:	f004 ffd9 	bl	8006eec <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8001f3a:	4814      	ldr	r0, [pc, #80]	; (8001f8c <main+0x13c>)
 8001f3c:	f004 ffa8 	bl	8006e90 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <main+0x140>)
 8001f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <main+0x140>)
 8001f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001f50:	f7fe f9b6 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8001f54:	f7fe f9c2 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8001f58:	480e      	ldr	r0, [pc, #56]	; (8001f94 <main+0x144>)
 8001f5a:	f004 ffc7 	bl	8006eec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001f5e:	480e      	ldr	r0, [pc, #56]	; (8001f98 <main+0x148>)
 8001f60:	f004 ff96 	bl	8006e90 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8001f64:	f7fe fd28 	bl	80009b8 <EM_ProcessEvent>
 8001f68:	e7fc      	b.n	8001f64 <main+0x114>
 8001f6a:	bf00      	nop
 8001f6c:	200003e4 	.word	0x200003e4
 8001f70:	20000d18 	.word	0x20000d18
 8001f74:	200007a4 	.word	0x200007a4
 8001f78:	20000d04 	.word	0x20000d04
 8001f7c:	20000e50 	.word	0x20000e50
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	20000fcc 	.word	0x20000fcc
 8001f8c:	20000f80 	.word	0x20000f80
 8001f90:	40001000 	.word	0x40001000
 8001f94:	20000e9c 	.word	0x20000e9c
 8001f98:	20000f34 	.word	0x20000f34

08001f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0a8      	sub	sp, #160	; 0xa0
 8001fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fa6:	2238      	movs	r2, #56	; 0x38
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f007 f96e 	bl	800928c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2254      	movs	r2, #84	; 0x54
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 f960 	bl	800928c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f003 fbfb 	bl	80057c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001fd2:	2322      	movs	r3, #34	; 0x22
 8001fd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fda:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001ff8:	232a      	movs	r3, #42	; 0x2a
 8001ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8002004:	2304      	movs	r3, #4
 8002006:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002010:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fc7b 	bl	8005910 <HAL_RCC_OscConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002020:	f000 f82a 	bl	8002078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002024:	230f      	movs	r3, #15
 8002026:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002028:	2303      	movs	r3, #3
 800202a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8002038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203c:	2108      	movs	r1, #8
 800203e:	4618      	mov	r0, r3
 8002040:	f003 ff7e 	bl	8005f40 <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800204a:	f000 f815 	bl	8002078 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800204e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002052:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002054:	2300      	movs	r3, #0
 8002056:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002058:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	4618      	mov	r0, r3
 8002062:	f004 f95d 	bl	8006320 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800206c:	f000 f804 	bl	8002078 <Error_Handler>
  }
}
 8002070:	bf00      	nop
 8002072:	37a0      	adds	r7, #160	; 0xa0
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <LL_AHB2_GRP1_EnableClock>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80020dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020e0:	f7ff ffe2 	bl	80020a8 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <MX_RNG_Init+0x18>)
 80020e6:	f7ff ffce 	bl	8002086 <LL_RNG_Enable>

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	50060800 	.word	0x50060800

080020f4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_SPI3_Init+0x74>)
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <MX_SPI3_Init+0x78>)
 80020fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <MX_SPI3_Init+0x74>)
 8002100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002104:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_SPI3_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_SPI3_Init+0x74>)
 800210e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002112:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_SPI3_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <MX_SPI3_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_SPI3_Init+0x74>)
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_SPI3_Init+0x74>)
 800212a:	2210      	movs	r2, #16
 800212c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_SPI3_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_SPI3_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_SPI3_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_SPI3_Init+0x74>)
 8002142:	2207      	movs	r2, #7
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_SPI3_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_SPI3_Init+0x74>)
 800214e:	2208      	movs	r2, #8
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_SPI3_Init+0x74>)
 8002154:	f004 fb30 	bl	80067b8 <HAL_SPI_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800215e:	f7ff ff8b 	bl	8002078 <Error_Handler>
  }

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000dec 	.word	0x20000dec
 800216c:	40003c00 	.word	0x40003c00

08002170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_SPI_MspInit+0x7c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d128      	bne.n	80021e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_SPI_MspInit+0x80>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d4:	2306      	movs	r3, #6
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_SPI_MspInit+0x84>)
 80021e0:	f003 f940 	bl	8005464 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40003c00 	.word	0x40003c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000800 	.word	0x48000800

080021f8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002206:	6093      	str	r3, [r2, #8]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x44>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_MspInit+0x44>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6613      	str	r3, [r2, #96]	; 0x60
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_MspInit+0x44>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_MspInit+0x44>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_MspInit+0x44>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_MspInit+0x44>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800224e:	f7ff ffd3 	bl	80021f8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4013      	ands	r3, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d101      	bne.n	800227a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6153      	str	r3, [r2, #20]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010400 	.word	0x40010400

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f000 fd40 	bl	8002d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 800230c:	2004      	movs	r0, #4
 800230e:	f7fe fedd 	bl	80010cc <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff ffa4 	bl	8002260 <LL_EXTI_IsActiveFlag_0_31>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff ffb4 	bl	800228c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 800232c:	2002      	movs	r0, #2
 800232e:	f7fe fecd 	bl	80010cc <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8002332:	2002      	movs	r0, #2
 8002334:	f7ff ff94 	bl	8002260 <LL_EXTI_IsActiveFlag_0_31>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800233e:	2002      	movs	r0, #2
 8002340:	f7ff ffa4 	bl	800228c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 800234c:	2006      	movs	r0, #6
 800234e:	f7fe febd 	bl	80010cc <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002352:	2004      	movs	r0, #4
 8002354:	f7ff ff84 	bl	8002260 <LL_EXTI_IsActiveFlag_0_31>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800235e:	2004      	movs	r0, #4
 8002360:	f7ff ff94 	bl	800228c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Channel1_IRQHandler+0x10>)
 800236e:	f002 ff29 	bl	80051c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000c80 	.word	0x20000c80

0800237c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel2_IRQHandler+0x10>)
 8002382:	f002 ff1f 	bl	80051c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000d2c 	.word	0x20000d2c

08002390 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002396:	f002 ff15 	bl	80051c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000d8c 	.word	0x20000d8c

080023a4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 80023a8:	f7fd ffb6 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d305      	bcc.n	80023c4 <TIM1_BRK_TIM15_IRQHandler+0x20>
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d907      	bls.n	80023d4 <TIM1_BRK_TIM15_IRQHandler+0x30>
	{
		EM_SetEncoderValue(TIM1->CNT);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe febf 	bl	800114c <EM_SetEncoderValue>
		EM_SetNewEvent(evEncoderSet);
 80023ce:	2005      	movs	r0, #5
 80023d0:	f7fe fe7c 	bl	80010cc <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b29a      	uxth	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023dc:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 80023e0:	f004 fe8f 	bl	8007102 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <TIM1_BRK_TIM15_IRQHandler+0x58>)
 80023e6:	f004 fe8c 	bl	8007102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	20000bf8 	.word	0x20000bf8
 80023f8:	20000f80 	.word	0x20000f80
 80023fc:	20000e9c 	.word	0x20000e9c

08002400 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800240e:	f004 fe78 	bl	8007102 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002414:	f004 fe75 	bl	8007102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000c08 	.word	0x20000c08
 8002420:	0800a4ac 	.word	0x0800a4ac
 8002424:	20000f80 	.word	0x20000f80
 8002428:	20001018 	.word	0x20001018

0800242c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8002430:	f7ff f962 	bl	80016f8 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002436:	f004 fe64 	bl	8007102 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800243c:	f004 fe61 	bl	8007102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000f80 	.word	0x20000f80
 8002448:	20000ee8 	.word	0x20000ee8

0800244c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM2_IRQHandler+0x10>)
 8002452:	f004 fe56 	bl	8007102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000fcc 	.word	0x20000fcc

08002460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002468:	4815      	ldr	r0, [pc, #84]	; (80024c0 <EXTI15_10_IRQHandler+0x60>)
 800246a:	f003 f97d 	bl	8005768 <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002474:	2003      	movs	r0, #3
 8002476:	f7fe fe29 	bl	80010cc <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800247a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247e:	4810      	ldr	r0, [pc, #64]	; (80024c0 <EXTI15_10_IRQHandler+0x60>)
 8002480:	f003 f972 	bl	8005768 <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fe1e 	bl	80010cc <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002494:	f7ff fee4 	bl	8002260 <LL_EXTI_IsActiveFlag_0_31>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800249e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a2:	f7ff fef3 	bl	800228c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80024a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024aa:	f7ff fed9 	bl	8002260 <LL_EXTI_IsActiveFlag_0_31>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80024b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024b8:	f7ff fee8 	bl	800228c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	48000800 	.word	0x48000800

080024c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e00a      	b.n	80024ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024d6:	f3af 8000 	nop.w
 80024da:	4601      	mov	r1, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60ba      	str	r2, [r7, #8]
 80024e2:	b2ca      	uxtb	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbf0      	blt.n	80024d6 <_read+0x12>
	}

return len;
 80024f4:	687b      	ldr	r3, [r7, #4]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	return -1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002526:	605a      	str	r2, [r3, #4]
	return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <_isatty>:

int _isatty(int file)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
	return 1;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x50>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <_sbrk+0x16>
		heap_end = &end;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <_sbrk+0x50>)
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <_sbrk+0x54>)
 800257c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <_sbrk+0x50>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <_sbrk+0x50>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	466a      	mov	r2, sp
 800258e:	4293      	cmp	r3, r2
 8002590:	d907      	bls.n	80025a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002592:	f006 fe51 	bl	8009238 <__errno>
 8002596:	4602      	mov	r2, r0
 8002598:	230c      	movs	r3, #12
 800259a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a0:	e006      	b.n	80025b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <_sbrk+0x50>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <_sbrk+0x50>)
 80025ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000bfc 	.word	0x20000bfc
 80025bc:	20001070 	.word	0x20001070

080025c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <SystemInit+0x28>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <SystemInit+0x28>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SystemInit+0x28>)
 80025d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025da:	609a      	str	r2, [r3, #8]
#endif
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b09a      	sub	sp, #104	; 0x68
 80025f0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f006 fe46 	bl	800928c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2234      	movs	r2, #52	; 0x34
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f006 fe3a 	bl	800928c <memset>

  htim1.Instance = TIM1;
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <MX_TIM1_Init+0xd8>)
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <MX_TIM1_Init+0xdc>)
 800261c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <MX_TIM1_Init+0xd8>)
 800262c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <MX_TIM1_Init+0xd8>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002644:	2303      	movs	r3, #3
 8002646:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002648:	2300      	movs	r3, #0
 800264a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800264c:	2301      	movs	r3, #1
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002658:	2300      	movs	r3, #0
 800265a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800265c:	2301      	movs	r3, #1
 800265e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002660:	2300      	movs	r3, #0
 8002662:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002668:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800266c:	4619      	mov	r1, r3
 800266e:	4815      	ldr	r0, [pc, #84]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002670:	f004 fca1 	bl	8006fb6 <HAL_TIM_Encoder_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800267a:	f7ff fcfd 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800268e:	4619      	mov	r1, r3
 8002690:	480c      	ldr	r0, [pc, #48]	; (80026c4 <MX_TIM1_Init+0xd8>)
 8002692:	f005 fa19 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800269c:	f7ff fcec 	bl	8002078 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_TIM1_Init+0xd8>)
 80026ae:	f005 faa1 	bl	8007bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80026b8:	f7ff fcde 	bl	8002078 <Error_Handler>
  }

}
 80026bc:	bf00      	nop
 80026be:	3768      	adds	r7, #104	; 0x68
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000f80 	.word	0x20000f80
 80026c8:	40012c00 	.word	0x40012c00

080026cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f0:	463b      	mov	r3, r7
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <MX_TIM2_Init+0xd0>)
 80026fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <MX_TIM2_Init+0xd0>)
 8002704:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <MX_TIM2_Init+0xd0>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <MX_TIM2_Init+0xd0>)
 8002712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <MX_TIM2_Init+0xd0>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <MX_TIM2_Init+0xd0>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002724:	481d      	ldr	r0, [pc, #116]	; (800279c <MX_TIM2_Init+0xd0>)
 8002726:	f004 fb5c 	bl	8006de2 <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002730:	f7ff fca2 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	4619      	mov	r1, r3
 8002740:	4816      	ldr	r0, [pc, #88]	; (800279c <MX_TIM2_Init+0xd0>)
 8002742:	f004 fe5d 	bl	8007400 <HAL_TIM_ConfigClockSource>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800274c:	f7ff fc94 	bl	8002078 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002750:	2305      	movs	r3, #5
 8002752:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002754:	2350      	movs	r3, #80	; 0x50
 8002756:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_TIM2_Init+0xd0>)
 8002768:	f004 ff3a 	bl	80075e0 <HAL_TIM_SlaveConfigSynchro>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002772:	f7ff fc81 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277e:	463b      	mov	r3, r7
 8002780:	4619      	mov	r1, r3
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <MX_TIM2_Init+0xd0>)
 8002784:	f005 f9a0 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800278e:	f7ff fc73 	bl	8002078 <Error_Handler>
  }

}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	; 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000fcc 	.word	0x20000fcc

080027a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <MX_TIM5_Init+0x98>)
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <MX_TIM5_Init+0x9c>)
 80027c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <MX_TIM5_Init+0x98>)
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_TIM5_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_TIM5_Init+0x98>)
 80027d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <MX_TIM5_Init+0x98>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <MX_TIM5_Init+0x98>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027e8:	4813      	ldr	r0, [pc, #76]	; (8002838 <MX_TIM5_Init+0x98>)
 80027ea:	f004 fafa 	bl	8006de2 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80027f4:	f7ff fc40 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4619      	mov	r1, r3
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <MX_TIM5_Init+0x98>)
 8002806:	f004 fdfb 	bl	8007400 <HAL_TIM_ConfigClockSource>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002810:	f7ff fc32 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_TIM5_Init+0x98>)
 8002822:	f005 f951 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800282c:	f7ff fc24 	bl	8002078 <Error_Handler>
  }

}
 8002830:	bf00      	nop
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000f34 	.word	0x20000f34
 800283c:	40000c00 	.word	0x40000c00

08002840 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b094      	sub	sp, #80	; 0x50
 8002844:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002860:	463b      	mov	r3, r7
 8002862:	2234      	movs	r2, #52	; 0x34
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f006 fd10 	bl	800928c <memset>

  htim8.Instance = TIM8;
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <MX_TIM8_Init+0xc8>)
 800286e:	4a27      	ldr	r2, [pc, #156]	; (800290c <MX_TIM8_Init+0xcc>)
 8002870:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <MX_TIM8_Init+0xc8>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <MX_TIM8_Init+0xc8>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_TIM8_Init+0xc8>)
 8002880:	2201      	movs	r2, #1
 8002882:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_TIM8_Init+0xc8>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_TIM8_Init+0xc8>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_TIM8_Init+0xc8>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002896:	481c      	ldr	r0, [pc, #112]	; (8002908 <MX_TIM8_Init+0xc8>)
 8002898:	f004 faa3 	bl	8006de2 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80028a2:	f7ff fbe9 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80028ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028b0:	4619      	mov	r1, r3
 80028b2:	4815      	ldr	r0, [pc, #84]	; (8002908 <MX_TIM8_Init+0xc8>)
 80028b4:	f004 fda4 	bl	8007400 <HAL_TIM_ConfigClockSource>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80028be:	f7ff fbdb 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028c2:	2320      	movs	r3, #32
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <MX_TIM8_Init+0xc8>)
 80028d6:	f005 f8f7 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80028e0:	f7ff fbca 	bl	8002078 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_TIM8_Init+0xc8>)
 80028f2:	f005 f97f 	bl	8007bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80028fc:	f7ff fbbc 	bl	8002078 <Error_Handler>
  }

}
 8002900:	bf00      	nop
 8002902:	3750      	adds	r7, #80	; 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000e50 	.word	0x20000e50
 800290c:	40013400 	.word	0x40013400

08002910 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <MX_TIM15_Init+0xa0>)
 8002932:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_TIM15_Init+0x9c>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002948:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_TIM15_Init+0x9c>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800295c:	4813      	ldr	r0, [pc, #76]	; (80029ac <MX_TIM15_Init+0x9c>)
 800295e:	f004 fa40 	bl	8006de2 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002968:	f7ff fb86 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <MX_TIM15_Init+0x9c>)
 800297a:	f004 fd41 	bl	8007400 <HAL_TIM_ConfigClockSource>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002984:	f7ff fb78 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_TIM15_Init+0x9c>)
 8002996:	f005 f897 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80029a0:	f7ff fb6a 	bl	8002078 <Error_Handler>
  }

}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000e9c 	.word	0x20000e9c
 80029b0:	40014000 	.word	0x40014000

080029b4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <MX_TIM16_Init+0x48>)
 80029bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029cc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80029d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_TIM16_Init+0x44>)
 80029e6:	f004 f9fc 	bl	8006de2 <HAL_TIM_Base_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80029f0:	f7ff fb42 	bl	8002078 <Error_Handler>
  }

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20001018 	.word	0x20001018
 80029fc:	40014400 	.word	0x40014400

08002a00 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <MX_TIM17_Init+0x48>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002a10:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <MX_TIM17_Init+0x44>)
 8002a32:	f004 f9d6 	bl	8006de2 <HAL_TIM_Base_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002a3c:	f7ff fb1c 	bl	8002078 <Error_Handler>
  }

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000ee8 	.word	0x20000ee8
 8002a48:	40014800 	.word	0x40014800

08002a4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_TIM_Encoder_MspInit+0xac>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d13f      	bne.n	8002aee <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a78:	6613      	str	r3, [r2, #96]	; 0x60
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4811      	ldr	r0, [pc, #68]	; (8002b00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002aba:	f002 fcd3 	bl	8005464 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2018      	movs	r0, #24
 8002ac4:	f001 fdb9 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ac8:	2018      	movs	r0, #24
 8002aca:	f001 fdd0 	bl	800466e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	2019      	movs	r0, #25
 8002ad4:	f001 fdb1 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ad8:	2019      	movs	r0, #25
 8002ada:	f001 fdc8 	bl	800466e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	201a      	movs	r0, #26
 8002ae4:	f001 fda9 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002ae8:	201a      	movs	r0, #26
 8002aea:	f001 fdc0 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000800 	.word	0x48000800

08002b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	; 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d131      	bne.n	8002b8a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b66:	2301      	movs	r3, #1
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b74:	f002 fc76 	bl	8005464 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	201c      	movs	r0, #28
 8002b7e:	f001 fd5c 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b82:	201c      	movs	r0, #28
 8002b84:	f001 fd73 	bl	800466e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002b88:	e070      	b.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_TIM_Base_MspInit+0x174>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10c      	bne.n	8002bae <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	69bb      	ldr	r3, [r7, #24]
}
 8002bac:	e05e      	b.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <HAL_TIM_Base_MspInit+0x178>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002bbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
}
 8002bd0:	e04c      	b.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_TIM_Base_MspInit+0x17c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d114      	bne.n	8002c06 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6613      	str	r3, [r2, #96]	; 0x60
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2018      	movs	r0, #24
 8002bfa:	f001 fd1e 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002bfe:	2018      	movs	r0, #24
 8002c00:	f001 fd35 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8002c04:	e032      	b.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_TIM_Base_MspInit+0x180>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d114      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f001 fd04 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c32:	2019      	movs	r0, #25
 8002c34:	f001 fd1b 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8002c38:	e018      	b.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <HAL_TIM_Base_MspInit+0x184>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d113      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_TIM_Base_MspInit+0x170>)
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2101      	movs	r1, #1
 8002c60:	201a      	movs	r0, #26
 8002c62:	f001 fcea 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c66:	201a      	movs	r0, #26
 8002c68:	f001 fd01 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8002c6c:	bf00      	nop
 8002c6e:	3738      	adds	r7, #56	; 0x38
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40013400 	.word	0x40013400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800

08002c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c8c:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c92:	490e      	ldr	r1, [pc, #56]	; (8002ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <LoopForever+0xe>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c98:	e002      	b.n	8002ca0 <LoopCopyDataInit>

08002c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9e:	3304      	adds	r3, #4

08002ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca4:	d3f9      	bcc.n	8002c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca8:	4c0b      	ldr	r4, [pc, #44]	; (8002cd8 <LoopForever+0x16>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cac:	e001      	b.n	8002cb2 <LoopFillZerobss>

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb0:	3204      	adds	r2, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cb6:	f7ff fc83 	bl	80025c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cba:	f006 fac3 	bl	8009244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cbe:	f7ff f8c7 	bl	8001e50 <main>

08002cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cc2:	e7fe      	b.n	8002cc2 <LoopForever>
  ldr   r0, =_estack
 8002cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ccc:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002cd0:	0800a7a0 	.word	0x0800a7a0
  ldr r2, =_sbss
 8002cd4:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002cd8:	2000106c 	.word	0x2000106c

08002cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC1_2_IRQHandler>

08002cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f001 fc9b 	bl	8004624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f000 f80e 	bl	8002d10 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	e001      	b.n	8002d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d00:	f7ff fa8a 	bl	8002218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d04:	79fb      	ldrb	r3, [r7, #7]

}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_InitTick+0x68>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d022      	beq.n	8002d6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_InitTick+0x6c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_InitTick+0x68>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fca6 	bl	800468a <HAL_SYSTICK_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	d809      	bhi.n	8002d5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d52:	f001 fc72 	bl	800463a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_InitTick+0x70>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e004      	b.n	8002d6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e001      	b.n	8002d6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	20000014 	.word	0x20000014

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d94:	6013      	str	r3, [r2, #0]
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20001064 	.word	0x20001064
 8002da4:	20000018 	.word	0x20000018

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20001064 	.word	0x20001064

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d004      	beq.n	8002de4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_Delay+0x40>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de4:	bf00      	nop
 8002de6:	f7ff ffdf 	bl	8002da8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d8f7      	bhi.n	8002de6 <HAL_Delay+0x26>
  {
  }
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000018 	.word	0x20000018

08002e04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e6c:	b490      	push	{r4, r7}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3360      	adds	r3, #96	; 0x60
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <LL_ADC_SetOffset+0x40>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e9e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc90      	pop	{r4, r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	03fff000 	.word	0x03fff000

08002eb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002eb0:	b490      	push	{r4, r7}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3360      	adds	r3, #96	; 0x60
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc90      	pop	{r4, r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ed8:	b490      	push	{r4, r7}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3360      	adds	r3, #96	; 0x60
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc90      	pop	{r4, r7}
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f08:	b490      	push	{r4, r7}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3360      	adds	r3, #96	; 0x60
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc90      	pop	{r4, r7}
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f38:	b490      	push	{r4, r7}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3360      	adds	r3, #96	; 0x60
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc90      	pop	{r4, r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f8e:	b490      	push	{r4, r7}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3330      	adds	r3, #48	; 0x30
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	4413      	add	r3, r2
 8002fac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	211f      	movs	r1, #31
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 011f 	and.w	r1, r3, #31
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc90      	pop	{r4, r7}
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fe0:	b490      	push	{r4, r7}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0e5b      	lsrs	r3, r3, #25
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003000:	6822      	ldr	r2, [r4, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0d1b      	lsrs	r3, r3, #20
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2107      	movs	r1, #7
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0d1b      	lsrs	r3, r3, #20
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	4313      	orrs	r3, r2
 8003024:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bc90      	pop	{r4, r7}
 800302e:	4770      	bx	lr

08003030 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0318 	and.w	r3, r3, #24
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003054:	40d9      	lsrs	r1, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	400b      	ands	r3, r1
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	0007ffff 	.word	0x0007ffff

08003078 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6093      	str	r3, [r2, #8]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b0:	d101      	bne.n	80030b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003100:	d101      	bne.n	8003106 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <LL_ADC_IsEnabled+0x18>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <LL_ADC_IsEnabled+0x1a>
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d101      	bne.n	8003152 <LL_ADC_REG_IsConversionOngoing+0x18>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d101      	bne.n	8003178 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1ad      	b.n	80034fe <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe f853 	bl	800125c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff67 	bl	800309c <LL_ADC_IsDeepPowerDownEnabled>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff4d 	bl	8003078 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff82 	bl	80030ec <LL_ADC_IsInternalRegulatorEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d113      	bne.n	8003216 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff66 	bl	80030c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031f8:	4b9e      	ldr	r3, [pc, #632]	; (8003474 <HAL_ADC_Init+0x2ec>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	4a9e      	ldr	r2, [pc, #632]	; (8003478 <HAL_ADC_Init+0x2f0>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003208:	e002      	b.n	8003210 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3b01      	subs	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f9      	bne.n	800320a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff66 	bl	80030ec <LL_ADC_IsInternalRegulatorEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff77 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 800324c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 8148 	bne.w	80034ec <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 8144 	bne.w	80034ec <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800326c:	f043 0202 	orr.w	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff4b 	bl	8003114 <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d141      	bne.n	8003308 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328c:	d004      	beq.n	8003298 <HAL_ADC_Init+0x110>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_ADC_Init+0x2f4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d10f      	bne.n	80032b8 <HAL_ADC_Init+0x130>
 8003298:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800329c:	f7ff ff3a 	bl	8003114 <LL_ADC_IsEnabled>
 80032a0:	4604      	mov	r4, r0
 80032a2:	4876      	ldr	r0, [pc, #472]	; (800347c <HAL_ADC_Init+0x2f4>)
 80032a4:	f7ff ff36 	bl	8003114 <LL_ADC_IsEnabled>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4323      	orrs	r3, r4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e012      	b.n	80032de <HAL_ADC_Init+0x156>
 80032b8:	4871      	ldr	r0, [pc, #452]	; (8003480 <HAL_ADC_Init+0x2f8>)
 80032ba:	f7ff ff2b 	bl	8003114 <LL_ADC_IsEnabled>
 80032be:	4604      	mov	r4, r0
 80032c0:	4870      	ldr	r0, [pc, #448]	; (8003484 <HAL_ADC_Init+0x2fc>)
 80032c2:	f7ff ff27 	bl	8003114 <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	431c      	orrs	r4, r3
 80032ca:	486f      	ldr	r0, [pc, #444]	; (8003488 <HAL_ADC_Init+0x300>)
 80032cc:	f7ff ff22 	bl	8003114 <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4323      	orrs	r3, r4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ea:	d004      	beq.n	80032f6 <HAL_ADC_Init+0x16e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a62      	ldr	r2, [pc, #392]	; (800347c <HAL_ADC_Init+0x2f4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Init+0x172>
 80032f6:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_ADC_Init+0x304>)
 80032f8:	e000      	b.n	80032fc <HAL_ADC_Init+0x174>
 80032fa:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_ADC_Init+0x308>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7ff fd7e 	bl	8002e04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7f5b      	ldrb	r3, [r3, #29]
 800330c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003312:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003318:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800331e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003326:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	045b      	lsls	r3, r3, #17
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_ADC_Init+0x30c>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	430b      	orrs	r3, r1
 8003372:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fed3 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 8003394:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fee0 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 80033a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d17f      	bne.n	80034a8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d17c      	bne.n	80034a8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ca:	f023 0302 	bic.w	r3, r3, #2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6911      	ldr	r1, [r2, #16]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	430b      	orrs	r3, r1
 800340a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800340e:	e013      	b.n	8003438 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800341e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003434:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343e:	2b01      	cmp	r3, #1
 8003440:	d12a      	bne.n	8003498 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003464:	430a      	orrs	r2, r1
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	611a      	str	r2, [r3, #16]
 8003472:	e019      	b.n	80034a8 <HAL_ADC_Init+0x320>
 8003474:	20000010 	.word	0x20000010
 8003478:	053e2d63 	.word	0x053e2d63
 800347c:	50000100 	.word	0x50000100
 8003480:	50000400 	.word	0x50000400
 8003484:	50000500 	.word	0x50000500
 8003488:	50000600 	.word	0x50000600
 800348c:	50000300 	.word	0x50000300
 8003490:	50000700 	.word	0x50000700
 8003494:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f023 010f 	bic.w	r1, r3, #15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1e5a      	subs	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
 80034c8:	e007      	b.n	80034da <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020f 	bic.w	r2, r2, #15
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ea:	e007      	b.n	80034fc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f043 0210 	orr.w	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop

08003508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b0a6      	sub	sp, #152	; 0x98
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x22>
 8003526:	2302      	movs	r3, #2
 8003528:	e38e      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x740>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fdff 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 836f 	bne.w	8003c22 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	f7ff fd1c 	bl	8002f8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fded 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 8003560:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fdf9 	bl	8003160 <LL_ADC_INJ_IsConversionOngoing>
 800356e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 817b 	bne.w	8003872 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800357c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8176 	bne.w	8003872 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	4619      	mov	r1, r3
 800359c:	f7ff fd20 	bl	8002fe0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fcdd 	bl	8002f68 <LL_ADC_SetSamplingTimeCommonConfig>
 80035ae:	e00e      	b.n	80035ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	461a      	mov	r2, r3
 80035be:	f7ff fd0f 	bl	8002fe0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fccd 	bl	8002f68 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d022      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6919      	ldr	r1, [r3, #16]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003600:	f7ff fc34 	bl	8002e6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6919      	ldr	r1, [r3, #16]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	461a      	mov	r2, r3
 8003612:	f7ff fc79 	bl	8002f08 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	7f1b      	ldrb	r3, [r3, #28]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_ADC_ConfigChannel+0x124>
 8003626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362a:	e000      	b.n	800362e <HAL_ADC_ConfigChannel+0x126>
 800362c:	2300      	movs	r3, #0
 800362e:	461a      	mov	r2, r3
 8003630:	f7ff fc82 	bl	8002f38 <LL_ADC_SetOffsetSaturation>
 8003634:	e11d      	b.n	8003872 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fc37 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x15a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fc2c 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	e012      	b.n	8003688 <HAL_ADC_ConfigChannel+0x180>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fc21 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800367e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x198>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	e00a      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x1ae>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80036ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d106      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fc08 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fbee 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x1ec>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fbe3 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	f003 021f 	and.w	r2, r3, #31
 80036f2:	e010      	b.n	8003716 <HAL_ADC_ConfigChannel+0x20e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fbd8 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_ADC_ConfigChannel+0x226>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	e00a      	b.n	8003744 <HAL_ADC_ConfigChannel+0x23c>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800373c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fbc1 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fba7 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003762:	4603      	mov	r3, r0
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x27a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2102      	movs	r1, #2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fb9c 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	e010      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x29c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fb91 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x2b4>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	e00a      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x2ca>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d106      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fb7a 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2103      	movs	r1, #3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fb60 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x308>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2103      	movs	r1, #3
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fb55 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	f003 021f 	and.w	r2, r3, #31
 800380e:	e010      	b.n	8003832 <HAL_ADC_ConfigChannel+0x32a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2103      	movs	r1, #3
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fb4a 	bl	8002eb0 <LL_ADC_GetOffsetChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_ConfigChannel+0x342>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	e00a      	b.n	8003860 <HAL_ADC_ConfigChannel+0x358>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	429a      	cmp	r2, r3
 8003862:	d106      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	2103      	movs	r1, #3
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fb33 	bl	8002ed8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fc4c 	bl	8003114 <LL_ADC_IsEnabled>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 810c 	bne.w	8003a9c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	461a      	mov	r2, r3
 8003892:	f7ff fbcd 	bl	8003030 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4aaf      	ldr	r2, [pc, #700]	; (8003b58 <HAL_ADC_ConfigChannel+0x650>)
 800389c:	4293      	cmp	r3, r2
 800389e:	f040 80fd 	bne.w	8003a9c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x3c2>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2b09      	cmp	r3, #9
 80038c0:	bf94      	ite	ls
 80038c2:	2301      	movls	r3, #1
 80038c4:	2300      	movhi	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e012      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x3e8>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	bf94      	ite	ls
 80038ea:	2301      	movls	r3, #1
 80038ec:	2300      	movhi	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d064      	beq.n	80039be <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x408>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	069b      	lsls	r3, r3, #26
 800390a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390e:	e00e      	b.n	800392e <HAL_ADC_ConfigChannel+0x426>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3301      	adds	r3, #1
 8003928:	069b      	lsls	r3, r3, #26
 800392a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_ADC_ConfigChannel+0x446>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	3301      	adds	r3, #1
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	e010      	b.n	8003970 <HAL_ADC_ConfigChannel+0x468>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	ea42 0103 	orr.w	r1, r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x48e>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	3301      	adds	r3, #1
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	e011      	b.n	80039ba <HAL_ADC_ConfigChannel+0x4b2>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f003 021f 	and.w	r2, r3, #31
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ba:	430b      	orrs	r3, r1
 80039bc:	e069      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d107      	bne.n	80039da <HAL_ADC_ConfigChannel+0x4d2>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	3301      	adds	r3, #1
 80039d2:	069b      	lsls	r3, r3, #26
 80039d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d8:	e00e      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x4f0>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
  return result;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x510>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	e010      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x532>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	617b      	str	r3, [r7, #20]
  return result;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	ea42 0103 	orr.w	r1, r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x55e>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	3301      	adds	r3, #1
 8003a52:	f003 021f 	and.w	r2, r3, #31
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3b1e      	subs	r3, #30
 8003a5e:	051b      	lsls	r3, r3, #20
 8003a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a64:	e014      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x588>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	60fb      	str	r3, [r7, #12]
  return result;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 021f 	and.w	r2, r3, #31
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	3b1e      	subs	r3, #30
 8003a8a:	051b      	lsls	r3, r3, #20
 8003a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a90:	430b      	orrs	r3, r1
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	4619      	mov	r1, r3
 8003a98:	f7ff faa2 	bl	8002fe0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <HAL_ADC_ConfigChannel+0x654>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80c9 	beq.w	8003c3c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x5b6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_ADC_ConfigChannel+0x658>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x5ba>
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_ADC_ConfigChannel+0x65c>)
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x5bc>
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_ADC_ConfigChannel+0x660>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f9c3 	bl	8002e50 <LL_ADC_GetCommonPathInternalCh>
 8003aca:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_ADC_ConfigChannel+0x664>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x5da>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_ADC_ConfigChannel+0x668>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d14e      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d148      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af6:	d005      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x5fc>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_ADC_ConfigChannel+0x66c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f040 8099 	bne.w	8003c36 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x610>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <HAL_ADC_ConfigChannel+0x658>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x614>
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <HAL_ADC_ConfigChannel+0x65c>)
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x616>
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_ADC_ConfigChannel+0x660>)
 8003b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f7ff f97e 	bl	8002e2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_ADC_ConfigChannel+0x670>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_ADC_ConfigChannel+0x674>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	099a      	lsrs	r2, r3, #6
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b46:	e002      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f9      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b54:	e06f      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x72e>
 8003b56:	bf00      	nop
 8003b58:	407f0000 	.word	0x407f0000
 8003b5c:	80080000 	.word	0x80080000
 8003b60:	50000100 	.word	0x50000100
 8003b64:	50000300 	.word	0x50000300
 8003b68:	50000700 	.word	0x50000700
 8003b6c:	c3210000 	.word	0xc3210000
 8003b70:	90c00010 	.word	0x90c00010
 8003b74:	50000600 	.word	0x50000600
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <HAL_ADC_ConfigChannel+0x748>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d125      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x6ce>
 8003b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <HAL_ADC_ConfigChannel+0x74c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d104      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x6a2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <HAL_ADC_ConfigChannel+0x750>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d047      	beq.n	8003c3a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb2:	d004      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x6b6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_ADC_ConfigChannel+0x74c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x6ba>
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <HAL_ADC_ConfigChannel+0x754>)
 8003bc0:	e000      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x6bc>
 8003bc2:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <HAL_ADC_ConfigChannel+0x758>)
 8003bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7ff f92b 	bl	8002e2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd4:	e031      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_ADC_ConfigChannel+0x75c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d12d      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d127      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_ADC_ConfigChannel+0x74c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d022      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bfe:	d004      	beq.n	8003c0a <HAL_ADC_ConfigChannel+0x702>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <HAL_ADC_ConfigChannel+0x74c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x706>
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_ADC_ConfigChannel+0x754>)
 8003c0c:	e000      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x708>
 8003c0e:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <HAL_ADC_ConfigChannel+0x758>)
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7ff f905 	bl	8002e2a <LL_ADC_SetCommonPathInternalCh>
 8003c20:	e00c      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003c34:	e002      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3798      	adds	r7, #152	; 0x98
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	c7520000 	.word	0xc7520000
 8003c54:	50000100 	.word	0x50000100
 8003c58:	50000500 	.word	0x50000500
 8003c5c:	50000300 	.word	0x50000300
 8003c60:	50000700 	.word	0x50000700
 8003c64:	cb840000 	.word	0xcb840000

08003c68 <LL_ADC_IsEnabled>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <LL_ADC_IsEnabled+0x18>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <LL_ADC_IsEnabled+0x1a>
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d101      	bne.n	8003ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b0a1      	sub	sp, #132	; 0x84
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0e3      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce2:	d102      	bne.n	8003cea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	e009      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003cf4:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	e001      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0be      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ffb5 	bl	8003c8e <LL_ADC_REG_IsConversionOngoing>
 8003d24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ffaf 	bl	8003c8e <LL_ADC_REG_IsConversionOngoing>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80a0 	bne.w	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 809c 	bne.w	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d48:	d004      	beq.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a55      	ldr	r2, [pc, #340]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003d54:	4b56      	ldr	r3, [pc, #344]	; (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d56:	e000      	b.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d58:	4b56      	ldr	r3, [pc, #344]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d5a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04b      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d76:	035b      	lsls	r3, r3, #13
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d88:	d004      	beq.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a45      	ldr	r2, [pc, #276]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10f      	bne.n	8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003d94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d98:	f7ff ff66 	bl	8003c68 <LL_ADC_IsEnabled>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	4841      	ldr	r0, [pc, #260]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003da0:	f7ff ff62 	bl	8003c68 <LL_ADC_IsEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4323      	orrs	r3, r4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e012      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003db4:	483c      	ldr	r0, [pc, #240]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003db6:	f7ff ff57 	bl	8003c68 <LL_ADC_IsEnabled>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	483b      	ldr	r0, [pc, #236]	; (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dbe:	f7ff ff53 	bl	8003c68 <LL_ADC_IsEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	431c      	orrs	r4, r3
 8003dc6:	483c      	ldr	r0, [pc, #240]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dc8:	f7ff ff4e 	bl	8003c68 <LL_ADC_IsEnabled>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4323      	orrs	r3, r4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d056      	beq.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003de6:	f023 030f 	bic.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6811      	ldr	r1, [r2, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfa:	e047      	b.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10f      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003e1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e20:	f7ff ff22 	bl	8003c68 <LL_ADC_IsEnabled>
 8003e24:	4604      	mov	r4, r0
 8003e26:	481f      	ldr	r0, [pc, #124]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e28:	f7ff ff1e 	bl	8003c68 <LL_ADC_IsEnabled>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4323      	orrs	r3, r4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e012      	b.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003e3c:	481a      	ldr	r0, [pc, #104]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003e3e:	f7ff ff13 	bl	8003c68 <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	4819      	ldr	r0, [pc, #100]	; (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e46:	f7ff ff0f 	bl	8003c68 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	431c      	orrs	r4, r3
 8003e4e:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e50:	f7ff ff0a 	bl	8003c68 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e74:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e76:	e009      	b.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e8a:	e000      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3784      	adds	r7, #132	; 0x84
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	50000100 	.word	0x50000100
 8003ea8:	50000400 	.word	0x50000400
 8003eac:	50000500 	.word	0x50000500
 8003eb0:	50000300 	.word	0x50000300
 8003eb4:	50000700 	.word	0x50000700
 8003eb8:	50000600 	.word	0x50000600

08003ebc <LL_EXTI_EnableIT_0_31>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <LL_EXTI_EnableIT_0_31+0x20>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4904      	ldr	r1, [pc, #16]	; (8003edc <LL_EXTI_EnableIT_0_31+0x20>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010400 	.word	0x40010400

08003ee0 <LL_EXTI_EnableIT_32_63>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <LL_EXTI_EnableIT_32_63+0x20>)
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <LL_EXTI_EnableIT_32_63+0x20>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	620b      	str	r3, [r1, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40010400 	.word	0x40010400

08003f04 <LL_EXTI_DisableIT_0_31>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	4904      	ldr	r1, [pc, #16]	; (8003f28 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010400 	.word	0x40010400

08003f2c <LL_EXTI_DisableIT_32_63>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <LL_EXTI_DisableIT_32_63+0x24>)
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4904      	ldr	r1, [pc, #16]	; (8003f50 <LL_EXTI_DisableIT_32_63+0x24>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	620b      	str	r3, [r1, #32]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010400 	.word	0x40010400

08003f54 <LL_EXTI_EnableEvent_0_31>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40010400 	.word	0x40010400

08003f78 <LL_EXTI_EnableEvent_32_63>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40010400 	.word	0x40010400

08003f9c <LL_EXTI_DisableEvent_0_31>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	4904      	ldr	r1, [pc, #16]	; (8003fc0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <LL_EXTI_DisableEvent_32_63>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010400 	.word	0x40010400

08003fec <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40010400 	.word	0x40010400

08004010 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800401a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800401c:	4904      	ldr	r1, [pc, #16]	; (8004030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4313      	orrs	r3, r2
 8004022:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40010400 	.word	0x40010400

08004034 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	43db      	mvns	r3, r3
 8004044:	4904      	ldr	r1, [pc, #16]	; (8004058 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004046:	4013      	ands	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40010400 	.word	0x40010400

0800405c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	43db      	mvns	r3, r3
 800406c:	4904      	ldr	r1, [pc, #16]	; (8004080 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800406e:	4013      	ands	r3, r2
 8004070:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010400 	.word	0x40010400

08004084 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4904      	ldr	r1, [pc, #16]	; (80040a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010400 	.word	0x40010400

080040a8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4904      	ldr	r1, [pc, #16]	; (80040c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40010400 	.word	0x40010400

080040cc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	43db      	mvns	r3, r3
 80040dc:	4904      	ldr	r1, [pc, #16]	; (80040f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60cb      	str	r3, [r1, #12]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010400 	.word	0x40010400

080040f4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	43db      	mvns	r3, r3
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004106:	4013      	ands	r3, r2
 8004108:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010400 	.word	0x40010400

0800411c <LL_EXTI_ClearFlag_0_31>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004124:	4a04      	ldr	r2, [pc, #16]	; (8004138 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6153      	str	r3, [r2, #20]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010400 	.word	0x40010400

0800413c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6353      	str	r3, [r2, #52]	; 0x34
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e180      	b.n	800447a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004186:	d102      	bne.n	800418e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e175      	b.n	800447a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7f5b      	ldrb	r3, [r3, #29]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fd f8ed 	bl	8001384 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b98      	ldr	r3, [pc, #608]	; (800443c <HAL_COMP_Init+0x2e0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	6979      	ldr	r1, [r7, #20]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <HAL_COMP_Init+0xc6>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d112      	bne.n	8004222 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041fc:	4b90      	ldr	r3, [pc, #576]	; (8004440 <HAL_COMP_Init+0x2e4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	4a90      	ldr	r2, [pc, #576]	; (8004444 <HAL_COMP_Init+0x2e8>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	099a      	lsrs	r2, r3, #6
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004214:	e002      	b.n	800421c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a88      	ldr	r2, [pc, #544]	; (8004448 <HAL_COMP_Init+0x2ec>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d028      	beq.n	800427e <HAL_COMP_Init+0x122>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a86      	ldr	r2, [pc, #536]	; (800444c <HAL_COMP_Init+0x2f0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d020      	beq.n	8004278 <HAL_COMP_Init+0x11c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a85      	ldr	r2, [pc, #532]	; (8004450 <HAL_COMP_Init+0x2f4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_COMP_Init+0x116>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_COMP_Init+0x2f8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d010      	beq.n	800426c <HAL_COMP_Init+0x110>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a82      	ldr	r2, [pc, #520]	; (8004458 <HAL_COMP_Init+0x2fc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d008      	beq.n	8004266 <HAL_COMP_Init+0x10a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_COMP_Init+0x300>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_COMP_Init+0x106>
 800425e:	2301      	movs	r3, #1
 8004260:	e00f      	b.n	8004282 <HAL_COMP_Init+0x126>
 8004262:	2302      	movs	r3, #2
 8004264:	e00d      	b.n	8004282 <HAL_COMP_Init+0x126>
 8004266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800426a:	e00a      	b.n	8004282 <HAL_COMP_Init+0x126>
 800426c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004270:	e007      	b.n	8004282 <HAL_COMP_Init+0x126>
 8004272:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004276:	e004      	b.n	8004282 <HAL_COMP_Init+0x126>
 8004278:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800427c:	e001      	b.n	8004282 <HAL_COMP_Init+0x126>
 800427e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004282:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80b6 	beq.w	80043fe <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6e      	ldr	r2, [pc, #440]	; (800445c <HAL_COMP_Init+0x300>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_COMP_Init+0x156>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6c      	ldr	r2, [pc, #432]	; (8004460 <HAL_COMP_Init+0x304>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d103      	bne.n	80042ba <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80042b2:	6938      	ldr	r0, [r7, #16]
 80042b4:	f7ff feac 	bl	8004010 <LL_EXTI_EnableRisingTrig_32_63>
 80042b8:	e014      	b.n	80042e4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80042ba:	6938      	ldr	r0, [r7, #16]
 80042bc:	f7ff fe96 	bl	8003fec <LL_EXTI_EnableRisingTrig_0_31>
 80042c0:	e010      	b.n	80042e4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a65      	ldr	r2, [pc, #404]	; (800445c <HAL_COMP_Init+0x300>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_COMP_Init+0x17a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a63      	ldr	r2, [pc, #396]	; (8004460 <HAL_COMP_Init+0x304>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d103      	bne.n	80042de <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80042d6:	6938      	ldr	r0, [r7, #16]
 80042d8:	f7ff fec0 	bl	800405c <LL_EXTI_DisableRisingTrig_32_63>
 80042dc:	e002      	b.n	80042e4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80042de:	6938      	ldr	r0, [r7, #16]
 80042e0:	f7ff fea8 	bl	8004034 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a59      	ldr	r2, [pc, #356]	; (800445c <HAL_COMP_Init+0x300>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_COMP_Init+0x1a8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_COMP_Init+0x304>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d103      	bne.n	800430c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004304:	6938      	ldr	r0, [r7, #16]
 8004306:	f7ff fecf 	bl	80040a8 <LL_EXTI_EnableFallingTrig_32_63>
 800430a:	e014      	b.n	8004336 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800430c:	6938      	ldr	r0, [r7, #16]
 800430e:	f7ff feb9 	bl	8004084 <LL_EXTI_EnableFallingTrig_0_31>
 8004312:	e010      	b.n	8004336 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_COMP_Init+0x300>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_COMP_Init+0x1cc>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <HAL_COMP_Init+0x304>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004328:	6938      	ldr	r0, [r7, #16]
 800432a:	f7ff fee3 	bl	80040f4 <LL_EXTI_DisableFallingTrig_32_63>
 800432e:	e002      	b.n	8004336 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004330:	6938      	ldr	r0, [r7, #16]
 8004332:	f7ff fecb 	bl	80040cc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a48      	ldr	r2, [pc, #288]	; (800445c <HAL_COMP_Init+0x300>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_COMP_Init+0x1ee>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a46      	ldr	r2, [pc, #280]	; (8004460 <HAL_COMP_Init+0x304>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d103      	bne.n	8004352 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800434a:	6938      	ldr	r0, [r7, #16]
 800434c:	f7ff fef6 	bl	800413c <LL_EXTI_ClearFlag_32_63>
 8004350:	e002      	b.n	8004358 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004352:	6938      	ldr	r0, [r7, #16]
 8004354:	f7ff fee2 	bl	800411c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d011      	beq.n	8004388 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3c      	ldr	r2, [pc, #240]	; (800445c <HAL_COMP_Init+0x300>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_COMP_Init+0x21c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_COMP_Init+0x304>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004378:	6938      	ldr	r0, [r7, #16]
 800437a:	f7ff fdfd 	bl	8003f78 <LL_EXTI_EnableEvent_32_63>
 800437e:	e014      	b.n	80043aa <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004380:	6938      	ldr	r0, [r7, #16]
 8004382:	f7ff fde7 	bl	8003f54 <LL_EXTI_EnableEvent_0_31>
 8004386:	e010      	b.n	80043aa <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_COMP_Init+0x300>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_COMP_Init+0x240>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a32      	ldr	r2, [pc, #200]	; (8004460 <HAL_COMP_Init+0x304>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800439c:	6938      	ldr	r0, [r7, #16]
 800439e:	f7ff fe11 	bl	8003fc4 <LL_EXTI_DisableEvent_32_63>
 80043a2:	e002      	b.n	80043aa <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80043a4:	6938      	ldr	r0, [r7, #16]
 80043a6:	f7ff fdf9 	bl	8003f9c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d011      	beq.n	80043da <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a28      	ldr	r2, [pc, #160]	; (800445c <HAL_COMP_Init+0x300>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_COMP_Init+0x26e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <HAL_COMP_Init+0x304>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d103      	bne.n	80043d2 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80043ca:	6938      	ldr	r0, [r7, #16]
 80043cc:	f7ff fd88 	bl	8003ee0 <LL_EXTI_EnableIT_32_63>
 80043d0:	e04b      	b.n	800446a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80043d2:	6938      	ldr	r0, [r7, #16]
 80043d4:	f7ff fd72 	bl	8003ebc <LL_EXTI_EnableIT_0_31>
 80043d8:	e047      	b.n	800446a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_COMP_Init+0x300>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_COMP_Init+0x292>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_COMP_Init+0x304>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d103      	bne.n	80043f6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f7ff fd9c 	bl	8003f2c <LL_EXTI_DisableIT_32_63>
 80043f4:	e039      	b.n	800446a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80043f6:	6938      	ldr	r0, [r7, #16]
 80043f8:	f7ff fd84 	bl	8003f04 <LL_EXTI_DisableIT_0_31>
 80043fc:	e035      	b.n	800446a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_COMP_Init+0x300>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_COMP_Init+0x2b6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_COMP_Init+0x304>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d103      	bne.n	800441a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004412:	6938      	ldr	r0, [r7, #16]
 8004414:	f7ff fdd6 	bl	8003fc4 <LL_EXTI_DisableEvent_32_63>
 8004418:	e002      	b.n	8004420 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800441a:	6938      	ldr	r0, [r7, #16]
 800441c:	f7ff fdbe 	bl	8003f9c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <HAL_COMP_Init+0x300>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_COMP_Init+0x2d8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HAL_COMP_Init+0x304>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d117      	bne.n	8004464 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004434:	6938      	ldr	r0, [r7, #16]
 8004436:	f7ff fd79 	bl	8003f2c <LL_EXTI_DisableIT_32_63>
 800443a:	e016      	b.n	800446a <HAL_COMP_Init+0x30e>
 800443c:	ff007e0f 	.word	0xff007e0f
 8004440:	20000010 	.word	0x20000010
 8004444:	053e2d63 	.word	0x053e2d63
 8004448:	40010200 	.word	0x40010200
 800444c:	40010204 	.word	0x40010204
 8004450:	40010208 	.word	0x40010208
 8004454:	4001020c 	.word	0x4001020c
 8004458:	40010210 	.word	0x40010210
 800445c:	40010214 	.word	0x40010214
 8004460:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004464:	6938      	ldr	r0, [r7, #16]
 8004466:	f7ff fd4d 	bl	8003f04 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	7f5b      	ldrb	r3, [r3, #29]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <__NVIC_SetPriorityGrouping>:
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <SysTick_Config>:
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f0:	d301      	bcc.n	80045f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00f      	b.n	8004616 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <SysTick_Config+0x40>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fe:	210f      	movs	r1, #15
 8004600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004604:	f7ff ff8e 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SysTick_Config+0x40>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <SysTick_Config+0x40>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010

08004624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff29 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004648:	f7ff ff40 	bl	80044cc <__NVIC_GetPriorityGrouping>
 800464c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff90 	bl	8004578 <NVIC_EncodePriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff5f 	bl	8004524 <__NVIC_SetPriority>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff33 	bl	80044e8 <__NVIC_EnableIRQ>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ffa4 	bl	80045e0 <SysTick_Config>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e014      	b.n	80046de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc ff13 	bl	80014f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	795b      	ldrb	r3, [r3, #5]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_DAC_Start+0x16>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e043      	b.n	8004784 <HAL_DAC_Start+0x9e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004720:	2001      	movs	r0, #1
 8004722:	f7fe fb4d 	bl	8002dc0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004736:	2b02      	cmp	r3, #2
 8004738:	d11d      	bne.n	8004776 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	e014      	b.n	8004776 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2102      	movs	r1, #2
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	429a      	cmp	r2, r3
 8004764:	d107      	bne.n	8004776 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0202 	orr.w	r2, r2, #2
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	795b      	ldrb	r3, [r3, #5]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_DAC_Start_DMA+0x1e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0a1      	b.n	80048ee <HAL_DAC_Start_DMA+0x162>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2202      	movs	r2, #2
 80047b4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d12a      	bne.n	8004812 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a4d      	ldr	r2, [pc, #308]	; (80048f8 <HAL_DAC_Start_DMA+0x16c>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <HAL_DAC_Start_DMA+0x170>)
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_DAC_Start_DMA+0x174>)
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d009      	beq.n	80047fe <HAL_DAC_Start_DMA+0x72>
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d00c      	beq.n	8004808 <HAL_DAC_Start_DMA+0x7c>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d000      	beq.n	80047f4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80047f2:	e039      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	613b      	str	r3, [r7, #16]
        break;
 80047fc:	e034      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	613b      	str	r3, [r7, #16]
        break;
 8004806:	e02f      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3310      	adds	r3, #16
 800480e:	613b      	str	r3, [r7, #16]
        break;
 8004810:	e02a      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4a3b      	ldr	r2, [pc, #236]	; (8004904 <HAL_DAC_Start_DMA+0x178>)
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_DAC_Start_DMA+0x17c>)
 8004820:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a39      	ldr	r2, [pc, #228]	; (800490c <HAL_DAC_Start_DMA+0x180>)
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004838:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d009      	beq.n	8004854 <HAL_DAC_Start_DMA+0xc8>
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00c      	beq.n	800485e <HAL_DAC_Start_DMA+0xd2>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d000      	beq.n	800484a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004848:	e00e      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	613b      	str	r3, [r7, #16]
        break;
 8004852:	e009      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3318      	adds	r3, #24
 800485a:	613b      	str	r3, [r7, #16]
        break;
 800485c:	e004      	b.n	8004868 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	331c      	adds	r3, #28
 8004864:	613b      	str	r3, [r7, #16]
        break;
 8004866:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d111      	bne.n	8004892 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6898      	ldr	r0, [r3, #8]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	f000 fbc8 	bl	800501c <HAL_DMA_Start_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]
 8004890:	e010      	b.n	80048b4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68d8      	ldr	r0, [r3, #12]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	f000 fbb6 	bl	800501c <HAL_DMA_Start_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80048d8:	2001      	movs	r0, #1
 80048da:	f7fe fa71 	bl	8002dc0 <HAL_Delay>
 80048de:	e005      	b.n	80048ec <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	08004db9 	.word	0x08004db9
 80048fc:	08004ddb 	.word	0x08004ddb
 8004900:	08004df7 	.word	0x08004df7
 8004904:	08004e61 	.word	0x08004e61
 8004908:	08004e83 	.word	0x08004e83
 800490c:	08004e9f 	.word	0x08004e9f

08004910 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	400a      	ands	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2201      	movs	r2, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	400a      	ands	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004954:	2001      	movs	r0, #1
 8004956:	f7fe fa33 	bl	8002dc0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fbd4 	bl	8005112 <HAL_DMA_Abort>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e00e      	b.n	800499e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fbc4 	bl	8005112 <HAL_DMA_Abort>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800499c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2204      	movs	r2, #4
 80049a8:	711a      	strb	r2, [r3, #4]
 80049aa:	e002      	b.n	80049b2 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	3308      	adds	r3, #8
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e004      	b.n	80049f6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3314      	adds	r3, #20
 80049f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	e002      	b.n	8004a52 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	795b      	ldrb	r3, [r3, #5]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_DAC_ConfigChannel+0x1c>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e194      	b.n	8004da6 <HAL_DAC_ConfigChannel+0x346>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2202      	movs	r2, #2
 8004a86:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d174      	bne.n	8004b7a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d137      	bne.n	8004b06 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004a96:	f7fe f987 	bl	8002da8 <HAL_GetTick>
 8004a9a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a9c:	e011      	b.n	8004ac2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a9e:	f7fe f983 	bl	8002da8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d90a      	bls.n	8004ac2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f043 0208 	orr.w	r2, r3, #8
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2203      	movs	r2, #3
 8004abc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e171      	b.n	8004da6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fe f975 	bl	8002dc0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae0:	e01e      	b.n	8004b20 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ae2:	f7fe f961 	bl	8002da8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d90a      	bls.n	8004b06 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f043 0208 	orr.w	r2, r3, #8
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2203      	movs	r2, #3
 8004b00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e14f      	b.n	8004da6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dbe8      	blt.n	8004ae2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004b10:	2001      	movs	r0, #1
 8004b12:	f7fe f955 	bl	8002dc0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	ea02 0103 	and.w	r1, r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	409a      	lsls	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	21ff      	movs	r1, #255	; 0xff
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	ea02 0103 	and.w	r1, r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11d      	bne.n	8004bbe <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	221f      	movs	r2, #31
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2207      	movs	r2, #7
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	e011      	b.n	8004c10 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	e008      	b.n	8004c10 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c06:	2301      	movs	r3, #1
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	e001      	b.n	8004c10 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	4013      	ands	r3, r2
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	791b      	ldrb	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d102      	bne.n	8004c44 <HAL_DAC_ConfigChannel+0x1e4>
 8004c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c42:	e000      	b.n	8004c46 <HAL_DAC_ConfigChannel+0x1e6>
 8004c44:	2300      	movs	r3, #0
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5e:	4013      	ands	r3, r2
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	795b      	ldrb	r3, [r3, #5]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d102      	bne.n	8004c70 <HAL_DAC_ConfigChannel+0x210>
 8004c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6e:	e000      	b.n	8004c72 <HAL_DAC_ConfigChannel+0x212>
 8004c70:	2300      	movs	r3, #0
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d114      	bne.n	8004cb2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004c88:	f001 faf8 	bl	800627c <HAL_RCC_GetHCLKFreq>
 8004c8c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4a47      	ldr	r2, [pc, #284]	; (8004db0 <HAL_DAC_ConfigChannel+0x350>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d904      	bls.n	8004ca0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	e00d      	b.n	8004cbc <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4a44      	ldr	r2, [pc, #272]	; (8004db4 <HAL_DAC_ConfigChannel+0x354>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d909      	bls.n	8004cbc <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb0:	e004      	b.n	8004cbc <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	4013      	ands	r3, r2
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	4313      	orrs	r3, r2
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	22c0      	movs	r2, #192	; 0xc0
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	ea02 0103 	and.w	r1, r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	09896800 	.word	0x09896800
 8004db4:	04c4b400 	.word	0x04c4b400

08004db8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fe20 	bl	8004a0c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	711a      	strb	r2, [r3, #4]
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff fe19 	bl	8004a20 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f043 0204 	orr.w	r2, r3, #4
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7fd f812 	bl	8001e3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	711a      	strb	r2, [r3, #4]
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ffd8 	bl	8004e24 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	711a      	strb	r2, [r3, #4]
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff ffd1 	bl	8004e38 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff ffc7 	bl	8004e4c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	711a      	strb	r2, [r3, #4]
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e08d      	b.n	8004ffa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b47      	ldr	r3, [pc, #284]	; (8005004 <HAL_DMA_Init+0x138>)
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d80f      	bhi.n	8004f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b45      	ldr	r3, [pc, #276]	; (8005008 <HAL_DMA_Init+0x13c>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a45      	ldr	r2, [pc, #276]	; (800500c <HAL_DMA_Init+0x140>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	009a      	lsls	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a42      	ldr	r2, [pc, #264]	; (8005010 <HAL_DMA_Init+0x144>)
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
 8004f08:	e00e      	b.n	8004f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_DMA_Init+0x148>)
 8004f12:	4413      	add	r3, r2
 8004f14:	4a3d      	ldr	r2, [pc, #244]	; (800500c <HAL_DMA_Init+0x140>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	009a      	lsls	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <HAL_DMA_Init+0x14c>)
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa10 	bl	80053a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f88:	d102      	bne.n	8004f90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_DMA_Init+0x104>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d80c      	bhi.n	8004fd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa30 	bl	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e008      	b.n	8004fe2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40020407 	.word	0x40020407
 8005008:	bffdfff8 	.word	0xbffdfff8
 800500c:	cccccccd 	.word	0xcccccccd
 8005010:	40020000 	.word	0x40020000
 8005014:	bffdfbf8 	.word	0xbffdfbf8
 8005018:	40020400 	.word	0x40020400

0800501c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_DMA_Start_IT+0x20>
 8005038:	2302      	movs	r3, #2
 800503a:	e066      	b.n	800510a <HAL_DMA_Start_IT+0xee>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d155      	bne.n	80050fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f954 	bl	8005322 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 020e 	orr.w	r2, r2, #14
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e00f      	b.n	80050b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 020a 	orr.w	r2, r2, #10
 80050b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e005      	b.n	8005108 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005104:	2302      	movs	r3, #2
 8005106:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d005      	beq.n	8005136 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2204      	movs	r2, #4
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e037      	b.n	80051a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 020e 	bic.w	r2, r2, #14
 8005144:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005154:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f202 	lsl.w	r2, r1, r2
 8005178:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005182:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800519a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2204      	movs	r2, #4
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d026      	beq.n	800523e <HAL_DMA_IRQHandler+0x7a>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d021      	beq.n	800523e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	f003 021f 	and.w	r2, r3, #31
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2104      	movs	r1, #4
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d071      	beq.n	8005318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800523c:	e06c      	b.n	8005318 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2202      	movs	r2, #2
 8005248:	409a      	lsls	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02e      	beq.n	80052b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d029      	beq.n	80052b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 020a 	bic.w	r2, r2, #10
 8005278:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f003 021f 	and.w	r2, r3, #31
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2102      	movs	r1, #2
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d038      	beq.n	8005318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052ae:	e033      	b.n	8005318 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2208      	movs	r2, #8
 80052ba:	409a      	lsls	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02a      	beq.n	800531a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d025      	beq.n	800531a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 020e 	bic.w	r2, r2, #14
 80052dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f003 021f 	and.w	r2, r3, #31
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005318:	bf00      	nop
 800531a:	bf00      	nop
}
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005338:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800534a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d108      	bne.n	8005382 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005380:	e007      	b.n	8005392 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	60da      	str	r2, [r3, #12]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d802      	bhi.n	80053ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e001      	b.n	80053be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3b08      	subs	r3, #8
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	009a      	lsls	r2, r3, #2
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2201      	movs	r2, #1
 80053f4:	409a      	lsls	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40020407 	.word	0x40020407
 800540c:	40020800 	.word	0x40020800
 8005410:	40020820 	.word	0x40020820
 8005414:	cccccccd 	.word	0xcccccccd
 8005418:	40020880 	.word	0x40020880

0800541c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a08      	ldr	r2, [pc, #32]	; (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800543e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2201      	movs	r2, #1
 800544a:	409a      	lsls	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	1000823f 	.word	0x1000823f
 8005460:	40020940 	.word	0x40020940

08005464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005472:	e15a      	b.n	800572a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 814c 	beq.w	8005724 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d00b      	beq.n	80054ac <HAL_GPIO_Init+0x48>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d007      	beq.n	80054ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054a0:	2b11      	cmp	r3, #17
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b12      	cmp	r3, #18
 80054aa:	d130      	bne.n	800550e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2203      	movs	r2, #3
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054e2:	2201      	movs	r2, #1
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4013      	ands	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0201 	and.w	r2, r3, #1
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	2203      	movs	r2, #3
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d003      	beq.n	800554e <HAL_GPIO_Init+0xea>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b12      	cmp	r3, #18
 800554c:	d123      	bne.n	8005596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	08da      	lsrs	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3208      	adds	r2, #8
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	08da      	lsrs	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3208      	adds	r2, #8
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0203 	and.w	r2, r3, #3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a6 	beq.w	8005724 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	4a5a      	ldr	r2, [pc, #360]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6613      	str	r3, [r2, #96]	; 0x60
 80055e4:	4b58      	ldr	r3, [pc, #352]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f0:	4a56      	ldr	r2, [pc, #344]	; (800574c <HAL_GPIO_Init+0x2e8>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	3302      	adds	r3, #2
 80055f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	220f      	movs	r2, #15
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800561a:	d01f      	beq.n	800565c <HAL_GPIO_Init+0x1f8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a4c      	ldr	r2, [pc, #304]	; (8005750 <HAL_GPIO_Init+0x2ec>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d019      	beq.n	8005658 <HAL_GPIO_Init+0x1f4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a4b      	ldr	r2, [pc, #300]	; (8005754 <HAL_GPIO_Init+0x2f0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_GPIO_Init+0x1f0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <HAL_GPIO_Init+0x2f4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00d      	beq.n	8005650 <HAL_GPIO_Init+0x1ec>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a49      	ldr	r2, [pc, #292]	; (800575c <HAL_GPIO_Init+0x2f8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <HAL_GPIO_Init+0x1e8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a48      	ldr	r2, [pc, #288]	; (8005760 <HAL_GPIO_Init+0x2fc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <HAL_GPIO_Init+0x1e4>
 8005644:	2305      	movs	r3, #5
 8005646:	e00a      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005648:	2306      	movs	r3, #6
 800564a:	e008      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 800564c:	2304      	movs	r3, #4
 800564e:	e006      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005650:	2303      	movs	r3, #3
 8005652:	e004      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005654:	2302      	movs	r3, #2
 8005656:	e002      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 800565c:	2300      	movs	r3, #0
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f002 0203 	and.w	r2, r2, #3
 8005664:	0092      	lsls	r2, r2, #2
 8005666:	4093      	lsls	r3, r2
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800566e:	4937      	ldr	r1, [pc, #220]	; (800574c <HAL_GPIO_Init+0x2e8>)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3302      	adds	r3, #2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800567c:	4b39      	ldr	r3, [pc, #228]	; (8005764 <HAL_GPIO_Init+0x300>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	43db      	mvns	r3, r3
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056a0:	4a30      	ldr	r2, [pc, #192]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80056a6:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4013      	ands	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056fa:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	43db      	mvns	r3, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <HAL_GPIO_Init+0x300>)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	3301      	adds	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f ae9d 	bne.w	8005474 <HAL_GPIO_Init+0x10>
  }
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
 800574c:	40010000 	.word	0x40010000
 8005750:	48000400 	.word	0x48000400
 8005754:	48000800 	.word	0x48000800
 8005758:	48000c00 	.word	0x48000c00
 800575c:	48001000 	.word	0x48001000
 8005760:	48001400 	.word	0x48001400
 8005764:	40010400 	.word	0x40010400

08005768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	e001      	b.n	800578a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	807b      	strh	r3, [r7, #2]
 80057a4:	4613      	mov	r3, r2
 80057a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057a8:	787b      	ldrb	r3, [r7, #1]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057b4:	e002      	b.n	80057bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d141      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d6:	4b4b      	ldr	r3, [pc, #300]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d131      	bne.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e4:	4b47      	ldr	r3, [pc, #284]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ea:	4a46      	ldr	r2, [pc, #280]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f4:	4b43      	ldr	r3, [pc, #268]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057fc:	4a41      	ldr	r2, [pc, #260]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005804:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2232      	movs	r2, #50	; 0x32
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	4a3f      	ldr	r2, [pc, #252]	; (800590c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0c9b      	lsrs	r3, r3, #18
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800581a:	e002      	b.n	8005822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005822:	4b38      	ldr	r3, [pc, #224]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d102      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f2      	bne.n	800581c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005836:	4b33      	ldr	r3, [pc, #204]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d158      	bne.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e057      	b.n	80058f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005848:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005858:	e04d      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005860:	d141      	bne.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005862:	4b28      	ldr	r3, [pc, #160]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d131      	bne.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005870:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005876:	4a23      	ldr	r2, [pc, #140]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005880:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005888:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800588e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2232      	movs	r2, #50	; 0x32
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	4a1c      	ldr	r2, [pc, #112]	; (800590c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	0c9b      	lsrs	r3, r3, #18
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a6:	e002      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ba:	d102      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f2      	bne.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d112      	bne.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e011      	b.n	80058f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058e4:	e007      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058e6:	4b07      	ldr	r3, [pc, #28]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058ee:	4a05      	ldr	r2, [pc, #20]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40007000 	.word	0x40007000
 8005908:	20000010 	.word	0x20000010
 800590c:	431bde83 	.word	0x431bde83

08005910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e308      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d075      	beq.n	8005a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592e:	4ba3      	ldr	r3, [pc, #652]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005938:	4ba0      	ldr	r3, [pc, #640]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d102      	bne.n	800594e <HAL_RCC_OscConfig+0x3e>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d002      	beq.n	8005954 <HAL_RCC_OscConfig+0x44>
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	4b99      	ldr	r3, [pc, #612]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d05b      	beq.n	8005a18 <HAL_RCC_OscConfig+0x108>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d157      	bne.n	8005a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e2e3      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005974:	d106      	bne.n	8005984 <HAL_RCC_OscConfig+0x74>
 8005976:	4b91      	ldr	r3, [pc, #580]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a90      	ldr	r2, [pc, #576]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e01d      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x98>
 800598e:	4b8b      	ldr	r3, [pc, #556]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a8a      	ldr	r2, [pc, #552]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b88      	ldr	r3, [pc, #544]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a87      	ldr	r2, [pc, #540]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 80059a8:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a83      	ldr	r2, [pc, #524]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b81      	ldr	r3, [pc, #516]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a80      	ldr	r2, [pc, #512]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fd f9ee 	bl	8002da8 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fd f9ea 	bl	8002da8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e2a8      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e2:	4b76      	ldr	r3, [pc, #472]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0xc0>
 80059ee:	e014      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fd f9da 	bl	8002da8 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fd f9d6 	bl	8002da8 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e294      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a0a:	4b6c      	ldr	r3, [pc, #432]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0xe8>
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d075      	beq.n	8005b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a26:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a30:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b0c      	cmp	r3, #12
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCC_OscConfig+0x136>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_OscConfig+0x13c>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d11f      	bne.n	8005a8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4c:	4b5b      	ldr	r3, [pc, #364]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_OscConfig+0x154>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e267      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a64:	4b55      	ldr	r3, [pc, #340]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	4952      	ldr	r1, [pc, #328]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a78:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <HAL_RCC_OscConfig+0x2b0>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fd f947 	bl	8002d10 <HAL_InitTick>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d043      	beq.n	8005b10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e253      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d023      	beq.n	8005adc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a94:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a48      	ldr	r2, [pc, #288]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fd f982 	bl	8002da8 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fd f97e 	bl	8002da8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e23c      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aba:	4b40      	ldr	r3, [pc, #256]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	4939      	ldr	r1, [pc, #228]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
 8005ada:	e01a      	b.n	8005b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a36      	ldr	r2, [pc, #216]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fd f95e 	bl	8002da8 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af0:	f7fd f95a 	bl	8002da8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e218      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b02:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1e0>
 8005b0e:	e000      	b.n	8005b12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03c      	beq.n	8005b98 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b26:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2c:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b36:	f7fd f937 	bl	8002da8 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fd f933 	bl	8002da8 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e1f1      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCC_OscConfig+0x22e>
 8005b5e:	e01b      	b.n	8005b98 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b66:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fd f91a 	bl	8002da8 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd f916 	bl	8002da8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e1d4      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ef      	bne.n	8005b78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80ab 	beq.w	8005cfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x2b4>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCC_OscConfig+0x2b6>
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	20000014 	.word	0x20000014
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bca:	4baf      	ldr	r3, [pc, #700]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	4aae      	ldr	r2, [pc, #696]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bd6:	4bac      	ldr	r3, [pc, #688]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005be2:	2301      	movs	r3, #1
 8005be4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be6:	4ba9      	ldr	r3, [pc, #676]	; (8005e8c <HAL_RCC_OscConfig+0x57c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d118      	bne.n	8005c24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf2:	4ba6      	ldr	r3, [pc, #664]	; (8005e8c <HAL_RCC_OscConfig+0x57c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4aa5      	ldr	r2, [pc, #660]	; (8005e8c <HAL_RCC_OscConfig+0x57c>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfe:	f7fd f8d3 	bl	8002da8 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fd f8cf 	bl	8002da8 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e18d      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c18:	4b9c      	ldr	r3, [pc, #624]	; (8005e8c <HAL_RCC_OscConfig+0x57c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d108      	bne.n	8005c3e <HAL_RCC_OscConfig+0x32e>
 8005c2c:	4b96      	ldr	r3, [pc, #600]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a95      	ldr	r2, [pc, #596]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3c:	e024      	b.n	8005c88 <HAL_RCC_OscConfig+0x378>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	d110      	bne.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c46:	4b90      	ldr	r3, [pc, #576]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	4a8e      	ldr	r2, [pc, #568]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c56:	4b8c      	ldr	r3, [pc, #560]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	4a8a      	ldr	r2, [pc, #552]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_OscConfig+0x378>
 8005c68:	4b87      	ldr	r3, [pc, #540]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	4a86      	ldr	r2, [pc, #536]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c78:	4b83      	ldr	r3, [pc, #524]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a82      	ldr	r2, [pc, #520]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fd f88a 	bl	8002da8 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fd f886 	bl	8002da8 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e142      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cae:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ed      	beq.n	8005c98 <HAL_RCC_OscConfig+0x388>
 8005cbc:	e015      	b.n	8005cea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbe:	f7fd f873 	bl	8002da8 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc4:	e00a      	b.n	8005cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fd f86f 	bl	8002da8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e12b      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cdc:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ed      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf0:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	4a64      	ldr	r2, [pc, #400]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d03c      	beq.n	8005d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d10:	4b5d      	ldr	r3, [pc, #372]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d16:	4a5c      	ldr	r2, [pc, #368]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fd f842 	bl	8002da8 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d28:	f7fd f83e 	bl	8002da8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0fc      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d3a:	4b53      	ldr	r3, [pc, #332]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ef      	beq.n	8005d28 <HAL_RCC_OscConfig+0x418>
 8005d48:	e01b      	b.n	8005d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d50:	4a4d      	ldr	r2, [pc, #308]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5a:	f7fd f825 	bl	8002da8 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d62:	f7fd f821 	bl	8002da8 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e0df      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d74:	4b44      	ldr	r3, [pc, #272]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ef      	bne.n	8005d62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80d3 	beq.w	8005f32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	f000 808d 	beq.w	8005eb4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d15a      	bne.n	8005e58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da2:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a38      	ldr	r2, [pc, #224]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fc fffb 	bl	8002da8 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fc fff7 	bl	8002da8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0b5      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <HAL_RCC_OscConfig+0x580>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6a11      	ldr	r1, [r2, #32]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005de4:	3a01      	subs	r2, #1
 8005de6:	0112      	lsls	r2, r2, #4
 8005de8:	4311      	orrs	r1, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005dee:	0212      	lsls	r2, r2, #8
 8005df0:	4311      	orrs	r1, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005df6:	0852      	lsrs	r2, r2, #1
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	0552      	lsls	r2, r2, #21
 8005dfc:	4311      	orrs	r1, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e02:	0852      	lsrs	r2, r2, #1
 8005e04:	3a01      	subs	r2, #1
 8005e06:	0652      	lsls	r2, r2, #25
 8005e08:	4311      	orrs	r1, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e0e:	06d2      	lsls	r2, r2, #27
 8005e10:	430a      	orrs	r2, r1
 8005e12:	491d      	ldr	r1, [pc, #116]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fc ffba 	bl	8002da8 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e38:	f7fc ffb6 	bl	8002da8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e074      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005e56:	e06c      	b.n	8005f32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <HAL_RCC_OscConfig+0x578>)
 8005e76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fc ff92 	bl	8002da8 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e86:	e00e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x596>
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40007000 	.word	0x40007000
 8005e90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fc ff88 	bl	8002da8 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e046      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea6:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_RCC_OscConfig+0x62c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x584>
 8005eb2:	e03e      	b.n	8005f32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e039      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ec0:	4b1e      	ldr	r3, [pc, #120]	; (8005f3c <HAL_RCC_OscConfig+0x62c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 0203 	and.w	r2, r3, #3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d12c      	bne.n	8005f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d123      	bne.n	8005f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d11b      	bne.n	8005f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d113      	bne.n	8005f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	3b01      	subs	r3, #1
 8005f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	3b01      	subs	r3, #1
 8005f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000

08005f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e11e      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d910      	bls.n	8005f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b8e      	ldr	r3, [pc, #568]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 020f 	bic.w	r2, r3, #15
 8005f6e:	498c      	ldr	r1, [pc, #560]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b8a      	ldr	r3, [pc, #552]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e106      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d073      	beq.n	800607c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d129      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9c:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0f4      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fac:	f000 f972 	bl	8006294 <RCC_GetSysClockFreqFromPLLSource>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4a7c      	ldr	r2, [pc, #496]	; (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d93f      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fba:	4b7a      	ldr	r3, [pc, #488]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d033      	beq.n	800603a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12f      	bne.n	800603a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe2:	4a70      	ldr	r2, [pc, #448]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e024      	b.n	800603a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0c6      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006008:	4b66      	ldr	r3, [pc, #408]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0be      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006018:	f000 f8ce 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800601c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4a61      	ldr	r2, [pc, #388]	; (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d909      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006026:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800603a:	4b5a      	ldr	r3, [pc, #360]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 0203 	bic.w	r2, r3, #3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4957      	ldr	r1, [pc, #348]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006048:	4313      	orrs	r3, r2
 800604a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604c:	f7fc feac 	bl	8002da8 <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	e00a      	b.n	800606a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006054:	f7fc fea8 	bl	8002da8 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e095      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606a:	4b4e      	ldr	r3, [pc, #312]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 020c 	and.w	r2, r3, #12
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	429a      	cmp	r2, r3
 800607a:	d1eb      	bne.n	8006054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d023      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006094:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800609a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800609e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060b4:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4936      	ldr	r1, [pc, #216]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d105      	bne.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d21d      	bcs.n	800612c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f0:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 020f 	bic.w	r2, r3, #15
 80060f8:	4929      	ldr	r1, [pc, #164]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006100:	f7fc fe52 	bl	8002da8 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	e00a      	b.n	800611e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006108:	f7fc fe4e 	bl	8002da8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	; 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e03b      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d1ed      	bne.n	8006108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4917      	ldr	r1, [pc, #92]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	490f      	ldr	r1, [pc, #60]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006166:	4313      	orrs	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800616a:	f000 f825 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800616e:	4601      	mov	r1, r0
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <HAL_RCC_ClockConfig+0x26c>)
 800617c:	5cd3      	ldrb	r3, [r2, r3]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	fa21 f303 	lsr.w	r3, r1, r3
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x270>)
 8006188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x274>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fc fdbe 	bl	8002d10 <HAL_InitTick>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	04c4b400 	.word	0x04c4b400
 80061ac:	0800a4b0 	.word	0x0800a4b0
 80061b0:	20000010 	.word	0x20000010
 80061b4:	20000014 	.word	0x20000014

080061b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061be:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d102      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e047      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 030c 	and.w	r3, r3, #12
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e03e      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d136      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3301      	adds	r3, #1
 8006204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006216:	68d2      	ldr	r2, [r2, #12]
 8006218:	0a12      	lsrs	r2, r2, #8
 800621a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	617b      	str	r3, [r7, #20]
      break;
 8006224:	e00c      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	0a12      	lsrs	r2, r2, #8
 8006234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	0e5b      	lsrs	r3, r3, #25
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	3301      	adds	r3, #1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e001      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006260:	693b      	ldr	r3, [r7, #16]
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	00f42400 	.word	0x00f42400
 8006278:	007a1200 	.word	0x007a1200

0800627c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <HAL_RCC_GetHCLKFreq+0x14>)
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010

08006294 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800629a:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062a4:	4b1b      	ldr	r3, [pc, #108]	; (8006314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d10c      	bne.n	80062d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062b8:	4a17      	ldr	r2, [pc, #92]	; (8006318 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	4a14      	ldr	r2, [pc, #80]	; (8006314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c2:	68d2      	ldr	r2, [r2, #12]
 80062c4:	0a12      	lsrs	r2, r2, #8
 80062c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	617b      	str	r3, [r7, #20]
    break;
 80062d0:	e00c      	b.n	80062ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062dc:	68d2      	ldr	r2, [r2, #12]
 80062de:	0a12      	lsrs	r2, r2, #8
 80062e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]
    break;
 80062ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	0e5b      	lsrs	r3, r3, #25
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	3301      	adds	r3, #1
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006306:	687b      	ldr	r3, [r7, #4]
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40021000 	.word	0x40021000
 8006318:	007a1200 	.word	0x007a1200
 800631c:	00f42400 	.word	0x00f42400

08006320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006328:	2300      	movs	r3, #0
 800632a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800632c:	2300      	movs	r3, #0
 800632e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8098 	beq.w	800646e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006342:	4b43      	ldr	r3, [pc, #268]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10d      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	4b40      	ldr	r3, [pc, #256]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	4a3f      	ldr	r2, [pc, #252]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	6593      	str	r3, [r2, #88]	; 0x58
 800635a:	4b3d      	ldr	r3, [pc, #244]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006366:	2301      	movs	r3, #1
 8006368:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800636a:	4b3a      	ldr	r3, [pc, #232]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a39      	ldr	r2, [pc, #228]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006376:	f7fc fd17 	bl	8002da8 <HAL_GetTick>
 800637a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637c:	e009      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637e:	f7fc fd13 	bl	8002da8 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d902      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	74fb      	strb	r3, [r7, #19]
        break;
 8006390:	e005      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006392:	4b30      	ldr	r3, [pc, #192]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ef      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d159      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063a4:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01e      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d019      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063c0:	4b23      	ldr	r3, [pc, #140]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063cc:	4b20      	ldr	r3, [pc, #128]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063dc:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7fc fcd3 	bl	8002da8 <HAL_GetTick>
 8006402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006404:	e00b      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fc fccf 	bl	8002da8 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	; 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d902      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	74fb      	strb	r3, [r7, #19]
            break;
 800641c:	e006      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0ec      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	4903      	ldr	r1, [pc, #12]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006448:	e008      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800644a:	7cfb      	ldrb	r3, [r7, #19]
 800644c:	74bb      	strb	r3, [r7, #18]
 800644e:	e005      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800645c:	7c7b      	ldrb	r3, [r7, #17]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4baf      	ldr	r3, [pc, #700]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	4aae      	ldr	r2, [pc, #696]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800647a:	4ba9      	ldr	r3, [pc, #676]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f023 0203 	bic.w	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	49a5      	ldr	r1, [pc, #660]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800649c:	4ba0      	ldr	r3, [pc, #640]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f023 020c 	bic.w	r2, r3, #12
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	499d      	ldr	r1, [pc, #628]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064be:	4b98      	ldr	r3, [pc, #608]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	4994      	ldr	r1, [pc, #592]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064e0:	4b8f      	ldr	r3, [pc, #572]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	498c      	ldr	r1, [pc, #560]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006502:	4b87      	ldr	r3, [pc, #540]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	4983      	ldr	r1, [pc, #524]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006524:	4b7e      	ldr	r3, [pc, #504]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	497b      	ldr	r1, [pc, #492]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006546:	4b76      	ldr	r3, [pc, #472]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	4972      	ldr	r1, [pc, #456]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006568:	4b6d      	ldr	r3, [pc, #436]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	496a      	ldr	r1, [pc, #424]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800658a:	4b65      	ldr	r3, [pc, #404]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	4961      	ldr	r1, [pc, #388]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065ac:	4b5c      	ldr	r3, [pc, #368]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	4959      	ldr	r1, [pc, #356]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065ce:	4b54      	ldr	r3, [pc, #336]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	4950      	ldr	r1, [pc, #320]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065f0:	4b4b      	ldr	r3, [pc, #300]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	4948      	ldr	r1, [pc, #288]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b43      	ldr	r3, [pc, #268]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a42      	ldr	r2, [pc, #264]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006628:	4b3d      	ldr	r3, [pc, #244]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	493a      	ldr	r1, [pc, #232]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a34      	ldr	r2, [pc, #208]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006660:	4b2f      	ldr	r3, [pc, #188]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	492c      	ldr	r1, [pc, #176]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a26      	ldr	r2, [pc, #152]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800668a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006698:	4b21      	ldr	r3, [pc, #132]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	491e      	ldr	r1, [pc, #120]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	4910      	ldr	r1, [pc, #64]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d105      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d018      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	4902      	ldr	r1, [pc, #8]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800671e:	e001      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006720:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672c:	d105      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006738:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d015      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006746:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006754:	4917      	ldr	r1, [pc, #92]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d105      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800676c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006770:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678c:	4909      	ldr	r1, [pc, #36]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	d105      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e084      	b.n	80068d4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d106      	bne.n	80067ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fb fcc3 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006800:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800680a:	d902      	bls.n	8006812 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e002      	b.n	8006818 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006816:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006820:	d007      	beq.n	8006832 <HAL_SPI_Init+0x7a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800682a:	d002      	beq.n	8006832 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006842:	d903      	bls.n	800684c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
 800684a:	e002      	b.n	8006852 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	ea42 0103 	orr.w	r1, r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	f003 0204 	and.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	ea42 0103 	orr.w	r1, r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_SPI_Transmit+0x22>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e150      	b.n	8006ba0 <HAL_SPI_Transmit+0x2c4>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006906:	f7fc fa4f 	bl	8002da8 <HAL_GetTick>
 800690a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006920:	e135      	b.n	8006b8e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_SPI_Transmit+0x52>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006932:	e12c      	b.n	8006b8e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2203      	movs	r2, #3
 8006938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697e:	d107      	bne.n	8006990 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800698e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d007      	beq.n	80069ae <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069b6:	d94b      	bls.n	8006a50 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_Transmit+0xea>
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d13e      	bne.n	8006a44 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069ea:	e02b      	b.n	8006a44 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d112      	bne.n	8006a20 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a1e:	e011      	b.n	8006a44 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a20:	f7fc f9c2 	bl	8002da8 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d803      	bhi.n	8006a38 <HAL_SPI_Transmit+0x15c>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a36:	d102      	bne.n	8006a3e <HAL_SPI_Transmit+0x162>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d102      	bne.n	8006a44 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a42:	e0a4      	b.n	8006b8e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ce      	bne.n	80069ec <HAL_SPI_Transmit+0x110>
 8006a4e:	e07c      	b.n	8006b4a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_Transmit+0x182>
 8006a58:	8afb      	ldrh	r3, [r7, #22]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d170      	bne.n	8006b40 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d912      	bls.n	8006a8e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b02      	subs	r3, #2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a8c:	e058      	b.n	8006b40 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ab4:	e044      	b.n	8006b40 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d12b      	bne.n	8006b1c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d912      	bls.n	8006af4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b02      	subs	r3, #2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af2:	e025      	b.n	8006b40 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b1a:	e011      	b.n	8006b40 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1c:	f7fc f944 	bl	8002da8 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d803      	bhi.n	8006b34 <HAL_SPI_Transmit+0x258>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b32:	d102      	bne.n	8006b3a <HAL_SPI_Transmit+0x25e>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b3e:	e026      	b.n	8006b8e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1b5      	bne.n	8006ab6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f901 	bl	8006d56 <SPI_EndRxTxTransaction>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e000      	b.n	8006b8e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb8:	e04c      	b.n	8006c54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d048      	beq.n	8006c54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006bc2:	f7fc f8f1 	bl	8002da8 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d902      	bls.n	8006bd8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d13d      	bne.n	8006c54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf0:	d111      	bne.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfa:	d004      	beq.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c04:	d107      	bne.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1e:	d10f      	bne.n	8006c40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e00f      	b.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d1a3      	bne.n	8006bba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c8a:	e057      	b.n	8006d3c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c92:	d106      	bne.n	8006ca2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca8:	d048      	beq.n	8006d3c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006caa:	f7fc f87d 	bl	8002da8 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d902      	bls.n	8006cc0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d13d      	bne.n	8006d3c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd8:	d111      	bne.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x82>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d004      	beq.n	8006cee <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cec:	d107      	bne.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d06:	d10f      	bne.n	8006d28 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e008      	b.n	8006d4e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d19f      	bne.n	8006c8c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af02      	add	r7, sp, #8
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ff84 	bl	8006c7c <SPI_WaitFifoStateUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e027      	b.n	8006dda <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff ff07 	bl	8006ba8 <SPI_WaitFlagStateUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	f043 0220 	orr.w	r2, r3, #32
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e014      	b.n	8006dda <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff ff5d 	bl	8006c7c <SPI_WaitFifoStateUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	f043 0220 	orr.w	r2, r3, #32
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e000      	b.n	8006dda <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e049      	b.n	8006e88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fb fe7b 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fc51 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d001      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e019      	b.n	8006edc <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <HAL_TIM_Base_Start+0x58>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d00b      	beq.n	8006eda <HAL_TIM_Base_Start+0x4a>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d007      	beq.n	8006eda <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	00010007 	.word	0x00010007

08006eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e021      	b.n	8006f48 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <HAL_TIM_Base_Start_IT+0x68>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d00b      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0x5a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f34:	d007      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00010007 	.word	0x00010007

08006f58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6a1a      	ldr	r2, [r3, #32]
 8006f76:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f244 4344 	movw	r3, #17476	; 0x4444
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d107      	bne.n	8006fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e097      	b.n	80070fa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb fd34 	bl	8002a4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f000 fb5c 	bl	80076c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007038:	f023 0303 	bic.w	r3, r3, #3
 800703c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4313      	orrs	r3, r2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007056:	f023 030c 	bic.w	r3, r3, #12
 800705a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	4313      	orrs	r3, r2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	011a      	lsls	r2, r3, #4
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	4313      	orrs	r3, r2
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007094:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800709c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	4313      	orrs	r3, r2
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b02      	cmp	r3, #2
 8007116:	d122      	bne.n	800715e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d11b      	bne.n	800715e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f06f 0202 	mvn.w	r2, #2
 800712e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 faa1 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 800714a:	e005      	b.n	8007158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fa93 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 faa4 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b04      	cmp	r3, #4
 800716a:	d122      	bne.n	80071b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d11b      	bne.n	80071b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f06f 0204 	mvn.w	r2, #4
 8007182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa77 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 800719e:	e005      	b.n	80071ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fa69 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa7a 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d122      	bne.n	8007206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d11b      	bne.n	8007206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f06f 0208 	mvn.w	r2, #8
 80071d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa4d 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80071f2:	e005      	b.n	8007200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa3f 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa50 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b10      	cmp	r3, #16
 8007212:	d122      	bne.n	800725a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b10      	cmp	r3, #16
 8007220:	d11b      	bne.n	800725a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f06f 0210 	mvn.w	r2, #16
 800722a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2208      	movs	r2, #8
 8007230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa23 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007246:	e005      	b.n	8007254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa15 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa26 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10e      	bne.n	8007286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d107      	bne.n	8007286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0201 	mvn.w	r2, #1
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9ef 	bl	8007664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d10e      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d107      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fd5d 	bl	8007d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c0:	d10e      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d107      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fd50 	bl	8007d80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d10e      	bne.n	800730c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	d107      	bne.n	800730c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9d4 	bl	80076b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b20      	cmp	r3, #32
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b20      	cmp	r3, #32
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0220 	mvn.w	r2, #32
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fd10 	bl	8007d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007346:	d10f      	bne.n	8007368 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d107      	bne.n	8007368 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd16 	bl	8007d94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007376:	d10f      	bne.n	8007398 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007386:	d107      	bne.n	8007398 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fd08 	bl	8007da8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a6:	d10f      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b6:	d107      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80073c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcfa 	bl	8007dbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073d6:	d10f      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fcec 	bl	8007dd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_TIM_ConfigClockSource+0x18>
 8007414:	2302      	movs	r3, #2
 8007416:	e0d2      	b.n	80075be <HAL_TIM_ConfigClockSource+0x1be>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800743a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007442:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007454:	f000 80a9 	beq.w	80075aa <HAL_TIM_ConfigClockSource+0x1aa>
 8007458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745c:	d81a      	bhi.n	8007494 <HAL_TIM_ConfigClockSource+0x94>
 800745e:	2b30      	cmp	r3, #48	; 0x30
 8007460:	f000 809a 	beq.w	8007598 <HAL_TIM_ConfigClockSource+0x198>
 8007464:	2b30      	cmp	r3, #48	; 0x30
 8007466:	d809      	bhi.n	800747c <HAL_TIM_ConfigClockSource+0x7c>
 8007468:	2b10      	cmp	r3, #16
 800746a:	f000 8095 	beq.w	8007598 <HAL_TIM_ConfigClockSource+0x198>
 800746e:	2b20      	cmp	r3, #32
 8007470:	f000 8092 	beq.w	8007598 <HAL_TIM_ConfigClockSource+0x198>
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 808f 	beq.w	8007598 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800747a:	e097      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800747c:	2b50      	cmp	r3, #80	; 0x50
 800747e:	d05b      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0x138>
 8007480:	2b50      	cmp	r3, #80	; 0x50
 8007482:	d802      	bhi.n	800748a <HAL_TIM_ConfigClockSource+0x8a>
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d077      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007488:	e090      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800748a:	2b60      	cmp	r3, #96	; 0x60
 800748c:	d064      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0x158>
 800748e:	2b70      	cmp	r3, #112	; 0x70
 8007490:	d028      	beq.n	80074e4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007492:	e08b      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007494:	4a4c      	ldr	r2, [pc, #304]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d07e      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
 800749a:	4a4b      	ldr	r2, [pc, #300]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d810      	bhi.n	80074c2 <HAL_TIM_ConfigClockSource+0xc2>
 80074a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a4:	d078      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
 80074a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074aa:	d803      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0xb4>
 80074ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b0:	d02f      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x112>
      break;
 80074b2:	e07b      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074b8:	d06e      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
 80074ba:	4a44      	ldr	r2, [pc, #272]	; (80075cc <HAL_TIM_ConfigClockSource+0x1cc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d06b      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074c0:	e074      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074c2:	4a43      	ldr	r2, [pc, #268]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d067      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
 80074c8:	4a41      	ldr	r2, [pc, #260]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d803      	bhi.n	80074d6 <HAL_TIM_ConfigClockSource+0xd6>
 80074ce:	4a41      	ldr	r2, [pc, #260]	; (80075d4 <HAL_TIM_ConfigClockSource+0x1d4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d061      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074d4:	e06a      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074d6:	4a40      	ldr	r2, [pc, #256]	; (80075d8 <HAL_TIM_ConfigClockSource+0x1d8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d05d      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
 80074dc:	4a3f      	ldr	r2, [pc, #252]	; (80075dc <HAL_TIM_ConfigClockSource+0x1dc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d05a      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074e2:	e063      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f000 fac8 	bl	8007a88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007506:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	609a      	str	r2, [r3, #8]
      break;
 8007510:	e04c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f000 fab1 	bl	8007a88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e039      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	461a      	mov	r2, r3
 8007546:	f000 fa23 	bl	8007990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2150      	movs	r1, #80	; 0x50
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fa7c 	bl	8007a4e <TIM_ITRx_SetConfig>
      break;
 8007556:	e029      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	461a      	mov	r2, r3
 8007566:	f000 fa42 	bl	80079ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2160      	movs	r1, #96	; 0x60
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fa6c 	bl	8007a4e <TIM_ITRx_SetConfig>
      break;
 8007576:	e019      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	f000 fa03 	bl	8007990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2140      	movs	r1, #64	; 0x40
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fa5c 	bl	8007a4e <TIM_ITRx_SetConfig>
      break;
 8007596:	e009      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f000 fa53 	bl	8007a4e <TIM_ITRx_SetConfig>
      break;
 80075a8:	e000      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80075aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	00100030 	.word	0x00100030
 80075cc:	00100020 	.word	0x00100020
 80075d0:	00100050 	.word	0x00100050
 80075d4:	00100040 	.word	0x00100040
 80075d8:	00100060 	.word	0x00100060
 80075dc:	00100070 	.word	0x00100070

080075e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e031      	b.n	800765c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f904 	bl	8007818 <TIM_SlaveTimer_SetConfig>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e018      	b.n	800765c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007638:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007648:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d017      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e6:	d013      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a43      	ldr	r2, [pc, #268]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00f      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a42      	ldr	r2, [pc, #264]	; (80077fc <TIM_Base_SetConfig+0x134>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00b      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a41      	ldr	r2, [pc, #260]	; (8007800 <TIM_Base_SetConfig+0x138>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_Base_SetConfig+0x48>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3f      	ldr	r2, [pc, #252]	; (8007808 <TIM_Base_SetConfig+0x140>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a33      	ldr	r2, [pc, #204]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d023      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d01f      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a30      	ldr	r2, [pc, #192]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01b      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2f      	ldr	r2, [pc, #188]	; (80077fc <TIM_Base_SetConfig+0x134>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d017      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2e      	ldr	r2, [pc, #184]	; (8007800 <TIM_Base_SetConfig+0x138>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00f      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2d      	ldr	r2, [pc, #180]	; (800780c <TIM_Base_SetConfig+0x144>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <TIM_Base_SetConfig+0x148>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d007      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <TIM_Base_SetConfig+0x14c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_Base_SetConfig+0xaa>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <TIM_Base_SetConfig+0x140>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d108      	bne.n	8007784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a12      	ldr	r2, [pc, #72]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <TIM_Base_SetConfig+0x110>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a14      	ldr	r2, [pc, #80]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00f      	beq.n	80077d8 <TIM_Base_SetConfig+0x110>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <TIM_Base_SetConfig+0x144>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00b      	beq.n	80077d8 <TIM_Base_SetConfig+0x110>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a13      	ldr	r2, [pc, #76]	; (8007810 <TIM_Base_SetConfig+0x148>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d007      	beq.n	80077d8 <TIM_Base_SetConfig+0x110>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <TIM_Base_SetConfig+0x14c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0x110>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0d      	ldr	r2, [pc, #52]	; (8007808 <TIM_Base_SetConfig+0x140>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	615a      	str	r2, [r3, #20]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40015000 	.word	0x40015000
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800

08007818 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b70      	cmp	r3, #112	; 0x70
 8007864:	d034      	beq.n	80078d0 <TIM_SlaveTimer_SetConfig+0xb8>
 8007866:	2b70      	cmp	r3, #112	; 0x70
 8007868:	d811      	bhi.n	800788e <TIM_SlaveTimer_SetConfig+0x76>
 800786a:	2b30      	cmp	r3, #48	; 0x30
 800786c:	d07d      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 800786e:	2b30      	cmp	r3, #48	; 0x30
 8007870:	d806      	bhi.n	8007880 <TIM_SlaveTimer_SetConfig+0x68>
 8007872:	2b10      	cmp	r3, #16
 8007874:	d079      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d077      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d075      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800787e:	e075      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007880:	2b50      	cmp	r3, #80	; 0x50
 8007882:	d05e      	beq.n	8007942 <TIM_SlaveTimer_SetConfig+0x12a>
 8007884:	2b60      	cmp	r3, #96	; 0x60
 8007886:	d066      	beq.n	8007956 <TIM_SlaveTimer_SetConfig+0x13e>
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d02c      	beq.n	80078e6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800788c:	e06e      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800788e:	4a3a      	ldr	r2, [pc, #232]	; (8007978 <TIM_SlaveTimer_SetConfig+0x160>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d06a      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 8007894:	4a38      	ldr	r2, [pc, #224]	; (8007978 <TIM_SlaveTimer_SetConfig+0x160>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d809      	bhi.n	80078ae <TIM_SlaveTimer_SetConfig+0x96>
 800789a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800789e:	d064      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 80078a0:	4a36      	ldr	r2, [pc, #216]	; (800797c <TIM_SlaveTimer_SetConfig+0x164>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d061      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078aa:	d05e      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078ac:	e05e      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078ae:	4a34      	ldr	r2, [pc, #208]	; (8007980 <TIM_SlaveTimer_SetConfig+0x168>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d05a      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 80078b4:	4a32      	ldr	r2, [pc, #200]	; (8007980 <TIM_SlaveTimer_SetConfig+0x168>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d803      	bhi.n	80078c2 <TIM_SlaveTimer_SetConfig+0xaa>
 80078ba:	4a32      	ldr	r2, [pc, #200]	; (8007984 <TIM_SlaveTimer_SetConfig+0x16c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d054      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078c0:	e054      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078c2:	4a31      	ldr	r2, [pc, #196]	; (8007988 <TIM_SlaveTimer_SetConfig+0x170>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d050      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
 80078c8:	4a30      	ldr	r2, [pc, #192]	; (800798c <TIM_SlaveTimer_SetConfig+0x174>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d04d      	beq.n	800796a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078ce:	e04d      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68d9      	ldr	r1, [r3, #12]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f000 f8d2 	bl	8007a88 <TIM_ETR_SetConfig>
      break;
 80078e4:	e042      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d004      	beq.n	80078f8 <TIM_SlaveTimer_SetConfig+0xe0>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80078f6:	d101      	bne.n	80078fc <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e038      	b.n	800796e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007922:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	621a      	str	r2, [r3, #32]
      break;
 8007940:	e014      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6899      	ldr	r1, [r3, #8]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	461a      	mov	r2, r3
 8007950:	f000 f81e 	bl	8007990 <TIM_TI1_ConfigInputStage>
      break;
 8007954:	e00a      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6899      	ldr	r1, [r3, #8]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	461a      	mov	r2, r3
 8007964:	f000 f843 	bl	80079ee <TIM_TI2_ConfigInputStage>
      break;
 8007968:	e000      	b.n	800796c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800796a:	bf00      	nop
  }
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	00100030 	.word	0x00100030
 800797c:	00100020 	.word	0x00100020
 8007980:	00100050 	.word	0x00100050
 8007984:	00100040 	.word	0x00100040
 8007988:	00100060 	.word	0x00100060
 800798c:	00100070 	.word	0x00100070

08007990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f023 0201 	bic.w	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f023 030a 	bic.w	r3, r3, #10
 80079cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b087      	sub	sp, #28
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f023 0210 	bic.w	r2, r3, #16
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	031b      	lsls	r3, r3, #12
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	621a      	str	r2, [r3, #32]
}
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f043 0307 	orr.w	r3, r3, #7
 8007a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	021a      	lsls	r2, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	609a      	str	r2, [r3, #8]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e074      	b.n	8007bca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a34      	ldr	r2, [pc, #208]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a33      	ldr	r2, [pc, #204]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a31      	ldr	r2, [pc, #196]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a21      	ldr	r2, [pc, #132]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d022      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b60:	d01d      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d018      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d013      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00e      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d009      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d004      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40013400 	.word	0x40013400
 8007be0:	40015000 	.word	0x40015000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40014000 	.word	0x40014000

08007bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e096      	b.n	8007d3e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2f      	ldr	r2, [pc, #188]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a2d      	ldr	r2, [pc, #180]	; (8007d50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d106      	bne.n	8007cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d009      	beq.n	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d004      	beq.n	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a21      	ldr	r2, [pc, #132]	; (8007d54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d12b      	bne.n	8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	051b      	lsls	r3, r3, #20
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a0e      	ldr	r2, [pc, #56]	; (8007d54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d106      	bne.n	8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40015000 	.word	0x40015000

08007d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <LL_EXTI_EnableIT_0_31>:
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <LL_EXTI_EnableIT_0_31+0x20>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4904      	ldr	r1, [pc, #16]	; (8007e04 <LL_EXTI_EnableIT_0_31+0x20>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	600b      	str	r3, [r1, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40010400 	.word	0x40010400

08007e08 <LL_EXTI_EnableIT_32_63>:
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e12:	6a1a      	ldr	r2, [r3, #32]
 8007e14:	4904      	ldr	r1, [pc, #16]	; (8007e28 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	620b      	str	r3, [r1, #32]
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	40010400 	.word	0x40010400

08007e2c <LL_EXTI_DisableIT_0_31>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <LL_EXTI_DisableIT_0_31+0x24>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	4904      	ldr	r1, [pc, #16]	; (8007e50 <LL_EXTI_DisableIT_0_31+0x24>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	600b      	str	r3, [r1, #0]
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	40010400 	.word	0x40010400

08007e54 <LL_EXTI_DisableIT_32_63>:
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e5e:	6a1a      	ldr	r2, [r3, #32]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	43db      	mvns	r3, r3
 8007e64:	4904      	ldr	r1, [pc, #16]	; (8007e78 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	620b      	str	r3, [r1, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40010400 	.word	0x40010400

08007e7c <LL_EXTI_EnableEvent_0_31>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4904      	ldr	r1, [pc, #16]	; (8007e9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	604b      	str	r3, [r1, #4]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40010400 	.word	0x40010400

08007ea0 <LL_EXTI_EnableEvent_32_63>:
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eac:	4904      	ldr	r1, [pc, #16]	; (8007ec0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40010400 	.word	0x40010400

08007ec4 <LL_EXTI_DisableEvent_0_31>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	43db      	mvns	r3, r3
 8007ed4:	4904      	ldr	r1, [pc, #16]	; (8007ee8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	604b      	str	r3, [r1, #4]
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40010400 	.word	0x40010400

08007eec <LL_EXTI_DisableEvent_32_63>:
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	43db      	mvns	r3, r3
 8007efc:	4904      	ldr	r1, [pc, #16]	; (8007f10 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010400 	.word	0x40010400

08007f14 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	4904      	ldr	r1, [pc, #16]	; (8007f34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	608b      	str	r3, [r1, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	40010400 	.word	0x40010400

08007f38 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f44:	4904      	ldr	r1, [pc, #16]	; (8007f58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	40010400 	.word	0x40010400

08007f5c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	4904      	ldr	r1, [pc, #16]	; (8007f80 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40010400 	.word	0x40010400

08007f84 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	43db      	mvns	r3, r3
 8007f94:	4904      	ldr	r1, [pc, #16]	; (8007fa8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010400 	.word	0x40010400

08007fac <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	4904      	ldr	r1, [pc, #16]	; (8007fcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60cb      	str	r3, [r1, #12]
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40010400 	.word	0x40010400

08007fd0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	40010400 	.word	0x40010400

08007ff4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	43db      	mvns	r3, r3
 8008004:	4904      	ldr	r1, [pc, #16]	; (8008018 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008006:	4013      	ands	r3, r2
 8008008:	60cb      	str	r3, [r1, #12]
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40010400 	.word	0x40010400

0800801c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	43db      	mvns	r3, r3
 800802c:	4904      	ldr	r1, [pc, #16]	; (8008040 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800802e:	4013      	ands	r3, r2
 8008030:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40010400 	.word	0x40010400

08008044 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7a1b      	ldrb	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80c8 	beq.w	80081ea <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d05d      	beq.n	800811e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7a5b      	ldrb	r3, [r3, #9]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d00e      	beq.n	8008088 <LL_EXTI_Init+0x44>
 800806a:	2b02      	cmp	r3, #2
 800806c:	d017      	beq.n	800809e <LL_EXTI_Init+0x5a>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d120      	bne.n	80080b4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff ff24 	bl	8007ec4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff feaf 	bl	8007de4 <LL_EXTI_EnableIT_0_31>
          break;
 8008086:	e018      	b.n	80080ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fecd 	bl	8007e2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fef0 	bl	8007e7c <LL_EXTI_EnableEvent_0_31>
          break;
 800809c:	e00d      	b.n	80080ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fe9e 	bl	8007de4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff fee5 	bl	8007e7c <LL_EXTI_EnableEvent_0_31>
          break;
 80080b2:	e002      	b.n	80080ba <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80080b4:	2301      	movs	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
          break;
 80080b8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7a9b      	ldrb	r3, [r3, #10]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02d      	beq.n	800811e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7a9b      	ldrb	r3, [r3, #10]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d00e      	beq.n	80080e8 <LL_EXTI_Init+0xa4>
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d017      	beq.n	80080fe <LL_EXTI_Init+0xba>
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d120      	bne.n	8008114 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff ff8c 	bl	8007ff4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff ff17 	bl	8007f14 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80080e6:	e01b      	b.n	8008120 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff35 	bl	8007f5c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff58 	bl	8007fac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80080fc:	e010      	b.n	8008120 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff ff06 	bl	8007f14 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff4d 	bl	8007fac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008112:	e005      	b.n	8008120 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f043 0302 	orr.w	r3, r3, #2
 800811a:	60fb      	str	r3, [r7, #12]
            break;
 800811c:	e000      	b.n	8008120 <LL_EXTI_Init+0xdc>
        }
      }
 800811e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d075      	beq.n	8008214 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	7a5b      	ldrb	r3, [r3, #9]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d00e      	beq.n	800814e <LL_EXTI_Init+0x10a>
 8008130:	2b02      	cmp	r3, #2
 8008132:	d017      	beq.n	8008164 <LL_EXTI_Init+0x120>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d120      	bne.n	800817a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fed5 	bl	8007eec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fe5e 	bl	8007e08 <LL_EXTI_EnableIT_32_63>
          break;
 800814c:	e01a      	b.n	8008184 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fe7e 	bl	8007e54 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fe9f 	bl	8007ea0 <LL_EXTI_EnableEvent_32_63>
          break;
 8008162:	e00f      	b.n	8008184 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fe4d 	bl	8007e08 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe94 	bl	8007ea0 <LL_EXTI_EnableEvent_32_63>
          break;
 8008178:	e004      	b.n	8008184 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f043 0304 	orr.w	r3, r3, #4
 8008180:	60fb      	str	r3, [r7, #12]
          break;
 8008182:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	7a9b      	ldrb	r3, [r3, #10]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d043      	beq.n	8008214 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7a9b      	ldrb	r3, [r3, #10]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d00e      	beq.n	80081b2 <LL_EXTI_Init+0x16e>
 8008194:	2b03      	cmp	r3, #3
 8008196:	d017      	beq.n	80081c8 <LL_EXTI_Init+0x184>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d120      	bne.n	80081de <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ff3b 	bl	800801c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fec4 	bl	8007f38 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80081b0:	e031      	b.n	8008216 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fee4 	bl	8007f84 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff ff05 	bl	8007fd0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081c6:	e026      	b.n	8008216 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff feb3 	bl	8007f38 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fefa 	bl	8007fd0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081dc:	e01b      	b.n	8008216 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f043 0305 	orr.w	r3, r3, #5
 80081e4:	60fb      	str	r3, [r7, #12]
            break;
 80081e6:	bf00      	nop
 80081e8:	e015      	b.n	8008216 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fe1c 	bl	8007e2c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff fe63 	bl	8007ec4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff fe26 	bl	8007e54 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff fe6d 	bl	8007eec <LL_EXTI_DisableEvent_32_63>
 8008212:	e000      	b.n	8008216 <LL_EXTI_Init+0x1d2>
      }
 8008214:	bf00      	nop
  }

  return status;
 8008216:	68fb      	ldr	r3, [r7, #12]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <LL_GPIO_SetPinMode>:
{
 8008220:	b480      	push	{r7}
 8008222:	b089      	sub	sp, #36	; 0x24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	fa93 f3a3 	rbit	r3, r3
 800823a:	613b      	str	r3, [r7, #16]
  return result;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	fab3 f383 	clz	r3, r3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	2103      	movs	r1, #3
 8008248:	fa01 f303 	lsl.w	r3, r1, r3
 800824c:	43db      	mvns	r3, r3
 800824e:	401a      	ands	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	fa93 f3a3 	rbit	r3, r3
 800825a:	61bb      	str	r3, [r7, #24]
  return result;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	fab3 f383 	clz	r3, r3
 8008262:	b2db      	uxtb	r3, r3
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	fa01 f303 	lsl.w	r3, r1, r3
 800826c:	431a      	orrs	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	601a      	str	r2, [r3, #0]
}
 8008272:	bf00      	nop
 8008274:	3724      	adds	r7, #36	; 0x24
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <LL_GPIO_SetPinOutputType>:
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	43db      	mvns	r3, r3
 8008292:	401a      	ands	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	431a      	orrs	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	605a      	str	r2, [r3, #4]
}
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <LL_GPIO_SetPinSpeed>:
{
 80082ae:	b480      	push	{r7}
 80082b0:	b089      	sub	sp, #36	; 0x24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	fa93 f3a3 	rbit	r3, r3
 80082c8:	613b      	str	r3, [r7, #16]
  return result;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	fab3 f383 	clz	r3, r3
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	2103      	movs	r1, #3
 80082d6:	fa01 f303 	lsl.w	r3, r1, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	401a      	ands	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	fa93 f3a3 	rbit	r3, r3
 80082e8:	61bb      	str	r3, [r7, #24]
  return result;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	fab3 f383 	clz	r3, r3
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	fa01 f303 	lsl.w	r3, r1, r3
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	609a      	str	r2, [r3, #8]
}
 8008300:	bf00      	nop
 8008302:	3724      	adds	r7, #36	; 0x24
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <LL_GPIO_SetPinPull>:
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	; 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	fa93 f3a3 	rbit	r3, r3
 8008326:	613b      	str	r3, [r7, #16]
  return result;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	fab3 f383 	clz	r3, r3
 800832e:	b2db      	uxtb	r3, r3
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	2103      	movs	r1, #3
 8008334:	fa01 f303 	lsl.w	r3, r1, r3
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	fa93 f3a3 	rbit	r3, r3
 8008346:	61bb      	str	r3, [r7, #24]
  return result;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	fab3 f383 	clz	r3, r3
 800834e:	b2db      	uxtb	r3, r3
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	fa01 f303 	lsl.w	r3, r1, r3
 8008358:	431a      	orrs	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	60da      	str	r2, [r3, #12]
}
 800835e:	bf00      	nop
 8008360:	3724      	adds	r7, #36	; 0x24
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <LL_GPIO_SetAFPin_0_7>:
{
 800836a:	b480      	push	{r7}
 800836c:	b089      	sub	sp, #36	; 0x24
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	fa93 f3a3 	rbit	r3, r3
 8008384:	613b      	str	r3, [r7, #16]
  return result;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	fab3 f383 	clz	r3, r3
 800838c:	b2db      	uxtb	r3, r3
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	210f      	movs	r1, #15
 8008392:	fa01 f303 	lsl.w	r3, r1, r3
 8008396:	43db      	mvns	r3, r3
 8008398:	401a      	ands	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	fa93 f3a3 	rbit	r3, r3
 80083a4:	61bb      	str	r3, [r7, #24]
  return result;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	fab3 f383 	clz	r3, r3
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	fa01 f303 	lsl.w	r3, r1, r3
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	3724      	adds	r7, #36	; 0x24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <LL_GPIO_SetAFPin_8_15>:
{
 80083c8:	b480      	push	{r7}
 80083ca:	b089      	sub	sp, #36	; 0x24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	0a1b      	lsrs	r3, r3, #8
 80083dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	fa93 f3a3 	rbit	r3, r3
 80083e4:	613b      	str	r3, [r7, #16]
  return result;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	fab3 f383 	clz	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	210f      	movs	r1, #15
 80083f2:	fa01 f303 	lsl.w	r3, r1, r3
 80083f6:	43db      	mvns	r3, r3
 80083f8:	401a      	ands	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	0a1b      	lsrs	r3, r3, #8
 80083fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	fa93 f3a3 	rbit	r3, r3
 8008406:	61bb      	str	r3, [r7, #24]
  return result;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	fab3 f383 	clz	r3, r3
 800840e:	b2db      	uxtb	r3, r3
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800841e:	bf00      	nop
 8008420:	3724      	adds	r7, #36	; 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	fa93 f3a3 	rbit	r3, r3
 8008440:	60bb      	str	r3, [r7, #8]
  return result;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	fab3 f383 	clz	r3, r3
 8008448:	b2db      	uxtb	r3, r3
 800844a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800844c:	e040      	b.n	80084d0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	2101      	movs	r1, #1
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	4013      	ands	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d032      	beq.n	80084ca <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	461a      	mov	r2, r3
 800846a:	6939      	ldr	r1, [r7, #16]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fed7 	bl	8008220 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d003      	beq.n	8008482 <LL_GPIO_Init+0x58>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d106      	bne.n	8008490 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	461a      	mov	r2, r3
 8008488:	6939      	ldr	r1, [r7, #16]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ff0f 	bl	80082ae <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	461a      	mov	r2, r3
 8008496:	6939      	ldr	r1, [r7, #16]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff37 	bl	800830c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d111      	bne.n	80084ca <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2bff      	cmp	r3, #255	; 0xff
 80084aa:	d807      	bhi.n	80084bc <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6939      	ldr	r1, [r7, #16]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff58 	bl	800836a <LL_GPIO_SetAFPin_0_7>
 80084ba:	e006      	b.n	80084ca <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6939      	ldr	r1, [r7, #16]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff ff7f 	bl	80083c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	3301      	adds	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1b7      	bne.n	800844e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d003      	beq.n	80084ee <LL_GPIO_Init+0xc4>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d107      	bne.n	80084fe <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff fec0 	bl	800827e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b087      	sub	sp, #28
 800850c:	af02      	add	r7, sp, #8
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4623      	mov	r3, r4
 8008518:	80fb      	strh	r3, [r7, #6]
 800851a:	4603      	mov	r3, r0
 800851c:	80bb      	strh	r3, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	807b      	strh	r3, [r7, #2]
 8008522:	4613      	mov	r3, r2
 8008524:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800852a:	7bfa      	ldrb	r2, [r7, #15]
 800852c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008530:	429a      	cmp	r2, r3
 8008532:	d93a      	bls.n	80085aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8008534:	88ba      	ldrh	r2, [r7, #4]
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	441a      	add	r2, r3
 800853a:	88b9      	ldrh	r1, [r7, #4]
 800853c:	883b      	ldrh	r3, [r7, #0]
 800853e:	4419      	add	r1, r3
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	1acb      	subs	r3, r1, r3
 8008544:	429a      	cmp	r2, r3
 8008546:	f000 8090 	beq.w	800866a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800854a:	88fa      	ldrh	r2, [r7, #6]
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	441a      	add	r2, r3
 8008550:	88f9      	ldrh	r1, [r7, #6]
 8008552:	887b      	ldrh	r3, [r7, #2]
 8008554:	4419      	add	r1, r3
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	1acb      	subs	r3, r1, r3
 800855a:	429a      	cmp	r2, r3
 800855c:	f000 8085 	beq.w	800866a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	b29a      	uxth	r2, r3
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	4413      	add	r3, r2
 8008568:	b298      	uxth	r0, r3
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	b29a      	uxth	r2, r3
 800856e:	88bb      	ldrh	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	b299      	uxth	r1, r3
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	b29b      	uxth	r3, r3
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	b29b      	uxth	r3, r3
 800857c:	887a      	ldrh	r2, [r7, #2]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	3301      	adds	r3, #1
 8008584:	b29c      	uxth	r4, r3
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	b29b      	uxth	r3, r3
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	b29b      	uxth	r3, r3
 800858e:	883a      	ldrh	r2, [r7, #0]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	3301      	adds	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	2304      	movs	r3, #4
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	8c3b      	ldrh	r3, [r7, #32]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	4613      	mov	r3, r2
 80085a2:	4622      	mov	r2, r4
 80085a4:	f000 fd32 	bl	800900c <ILI9341_Draw_Rectangle>
				goto finish;
 80085a8:	e060      	b.n	800866c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	4413      	add	r3, r2
 80085b2:	b298      	uxth	r0, r3
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	88bb      	ldrh	r3, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	b299      	uxth	r1, r3
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f000 fda1 	bl	8009118 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	4413      	add	r3, r2
 80085de:	b298      	uxth	r0, r3
										(y + h) - b,
 80085e0:	88ba      	ldrh	r2, [r7, #4]
 80085e2:	883b      	ldrh	r3, [r7, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	b299      	uxth	r1, r3
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	887a      	ldrh	r2, [r7, #2]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f000 fd8a 	bl	8009118 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	b29a      	uxth	r2, r3
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	4413      	add	r3, r2
 800860c:	b298      	uxth	r0, r3
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	b29a      	uxth	r2, r3
 8008612:	88bb      	ldrh	r3, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	b299      	uxth	r1, r3
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	b29b      	uxth	r3, r3
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	b29b      	uxth	r3, r3
 8008620:	883a      	ldrh	r2, [r7, #0]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	b29a      	uxth	r2, r3
 8008626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800862a:	b29b      	uxth	r3, r3
 800862c:	f000 fdbc 	bl	80091a8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	887b      	ldrh	r3, [r7, #2]
 8008634:	4413      	add	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	b29b      	uxth	r3, r3
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	b298      	uxth	r0, r3
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	b29a      	uxth	r2, r3
 8008644:	88bb      	ldrh	r3, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	b299      	uxth	r1, r3
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	b29b      	uxth	r3, r3
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	b29b      	uxth	r3, r3
 8008652:	883a      	ldrh	r2, [r7, #0]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	b29a      	uxth	r2, r3
 8008658:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800865c:	b29b      	uxth	r3, r3
 800865e:	f000 fda3 	bl	80091a8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	3301      	adds	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8008668:	e75f      	b.n	800852a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800866a:	bf00      	nop
	// done
	return;
 800866c:	bf00      	nop
}
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}

08008674 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b089      	sub	sp, #36	; 0x24
 8008678:	af02      	add	r7, sp, #8
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4623      	mov	r3, r4
 8008684:	71fb      	strb	r3, [r7, #7]
 8008686:	4603      	mov	r3, r0
 8008688:	80bb      	strh	r3, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	807b      	strh	r3, [r7, #2]
 800868e:	4613      	mov	r3, r2
 8008690:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	2b1f      	cmp	r3, #31
 800869a:	d802      	bhi.n	80086a2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	e002      	b.n	80086a8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3b20      	subs	r3, #32
 80086a6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	753b      	strb	r3, [r7, #20]
 80086ac:	e012      	b.n	80086d4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80086ae:	7dfa      	ldrb	r2, [r7, #23]
 80086b0:	7d38      	ldrb	r0, [r7, #20]
 80086b2:	7d39      	ldrb	r1, [r7, #20]
 80086b4:	4c48      	ldr	r4, [pc, #288]	; (80087d8 <ILI9341_Draw_Char+0x164>)
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	4423      	add	r3, r4
 80086c0:	4403      	add	r3, r0
 80086c2:	781a      	ldrb	r2, [r3, #0]
 80086c4:	f107 0318 	add.w	r3, r7, #24
 80086c8:	440b      	add	r3, r1
 80086ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086ce:	7d3b      	ldrb	r3, [r7, #20]
 80086d0:	3301      	adds	r3, #1
 80086d2:	753b      	strb	r3, [r7, #20]
 80086d4:	7d3b      	ldrb	r3, [r7, #20]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d9e9      	bls.n	80086ae <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80086da:	2300      	movs	r3, #0
 80086dc:	757b      	strb	r3, [r7, #21]
 80086de:	e074      	b.n	80087ca <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80086e0:	2300      	movs	r3, #0
 80086e2:	75bb      	strb	r3, [r7, #22]
 80086e4:	e06b      	b.n	80087be <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80086e6:	7d7b      	ldrb	r3, [r7, #21]
 80086e8:	f107 0218 	add.w	r2, r7, #24
 80086ec:	4413      	add	r3, r2
 80086ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80086f2:	461a      	mov	r2, r3
 80086f4:	7dbb      	ldrb	r3, [r7, #22]
 80086f6:	fa42 f303 	asr.w	r3, r2, r3
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d02d      	beq.n	800875e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008702:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008704:	2b01      	cmp	r3, #1
 8008706:	d10e      	bne.n	8008726 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008708:	7d7b      	ldrb	r3, [r7, #21]
 800870a:	b29a      	uxth	r2, r3
 800870c:	88bb      	ldrh	r3, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	b298      	uxth	r0, r3
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	b29a      	uxth	r2, r3
 8008716:	887b      	ldrh	r3, [r7, #2]
 8008718:	4413      	add	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	883a      	ldrh	r2, [r7, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	f000 fb9a 	bl	8008e58 <ILI9341_Draw_Pixel>
 8008724:	e048      	b.n	80087b8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008726:	7d7b      	ldrb	r3, [r7, #21]
 8008728:	b29b      	uxth	r3, r3
 800872a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800872c:	fb12 f303 	smulbb	r3, r2, r3
 8008730:	b29a      	uxth	r2, r3
 8008732:	88bb      	ldrh	r3, [r7, #4]
 8008734:	4413      	add	r3, r2
 8008736:	b298      	uxth	r0, r3
 8008738:	7dbb      	ldrb	r3, [r7, #22]
 800873a:	b29b      	uxth	r3, r3
 800873c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800873e:	fb12 f303 	smulbb	r3, r2, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	887b      	ldrh	r3, [r7, #2]
 8008746:	4413      	add	r3, r2
 8008748:	b299      	uxth	r1, r3
 800874a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800874c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800874e:	2301      	movs	r3, #1
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	883b      	ldrh	r3, [r7, #0]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4623      	mov	r3, r4
 8008758:	f000 fc58 	bl	800900c <ILI9341_Draw_Rectangle>
 800875c:	e02c      	b.n	80087b8 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800875e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008760:	2b01      	cmp	r3, #1
 8008762:	d10e      	bne.n	8008782 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008764:	7d7b      	ldrb	r3, [r7, #21]
 8008766:	b29a      	uxth	r2, r3
 8008768:	88bb      	ldrh	r3, [r7, #4]
 800876a:	4413      	add	r3, r2
 800876c:	b298      	uxth	r0, r3
 800876e:	7dbb      	ldrb	r3, [r7, #22]
 8008770:	b29a      	uxth	r2, r3
 8008772:	887b      	ldrh	r3, [r7, #2]
 8008774:	4413      	add	r3, r2
 8008776:	b29b      	uxth	r3, r3
 8008778:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800877a:	4619      	mov	r1, r3
 800877c:	f000 fb6c 	bl	8008e58 <ILI9341_Draw_Pixel>
 8008780:	e01a      	b.n	80087b8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008782:	7d7b      	ldrb	r3, [r7, #21]
 8008784:	b29b      	uxth	r3, r3
 8008786:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008788:	fb12 f303 	smulbb	r3, r2, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	88bb      	ldrh	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	b298      	uxth	r0, r3
 8008794:	7dbb      	ldrb	r3, [r7, #22]
 8008796:	b29b      	uxth	r3, r3
 8008798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800879a:	fb12 f303 	smulbb	r3, r2, r3
 800879e:	b29a      	uxth	r2, r3
 80087a0:	887b      	ldrh	r3, [r7, #2]
 80087a2:	4413      	add	r3, r2
 80087a4:	b299      	uxth	r1, r3
 80087a6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80087a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087aa:	2301      	movs	r3, #1
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4623      	mov	r3, r4
 80087b4:	f000 fc2a 	bl	800900c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
 80087ba:	3301      	adds	r3, #1
 80087bc:	75bb      	strb	r3, [r7, #22]
 80087be:	7dbb      	ldrb	r3, [r7, #22]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d990      	bls.n	80086e6 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80087c4:	7d7b      	ldrb	r3, [r7, #21]
 80087c6:	3301      	adds	r3, #1
 80087c8:	757b      	strb	r3, [r7, #21]
 80087ca:	7d7b      	ldrb	r3, [r7, #21]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	d987      	bls.n	80086e0 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd90      	pop	{r4, r7, pc}
 80087d8:	0800a4c0 	.word	0x0800a4c0

080087dc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b087      	sub	sp, #28
 80087e0:	af02      	add	r7, sp, #8
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	4608      	mov	r0, r1
 80087e6:	4611      	mov	r1, r2
 80087e8:	461a      	mov	r2, r3
 80087ea:	4603      	mov	r3, r0
 80087ec:	817b      	strh	r3, [r7, #10]
 80087ee:	460b      	mov	r3, r1
 80087f0:	813b      	strh	r3, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 80087f6:	e016      	b.n	8008826 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	60fa      	str	r2, [r7, #12]
 80087fe:	7818      	ldrb	r0, [r3, #0]
 8008800:	88fc      	ldrh	r4, [r7, #6]
 8008802:	893a      	ldrh	r2, [r7, #8]
 8008804:	8979      	ldrh	r1, [r7, #10]
 8008806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	8c3b      	ldrh	r3, [r7, #32]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4623      	mov	r3, r4
 8008810:	f7ff ff30 	bl	8008674 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008814:	8c3b      	ldrh	r3, [r7, #32]
 8008816:	461a      	mov	r2, r3
 8008818:	0052      	lsls	r2, r2, #1
 800881a:	4413      	add	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	897b      	ldrh	r3, [r7, #10]
 8008822:	4413      	add	r3, r2
 8008824:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e4      	bne.n	80087f8 <ILI9341_Draw_Text+0x1c>
    }


}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bd90      	pop	{r4, r7, pc}
	...

08008838 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <ILI9341_SPI_Init+0x1c>)
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	4a04      	ldr	r2, [pc, #16]	; (8008854 <ILI9341_SPI_Init+0x1c>)
 8008842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008846:	6153      	str	r3, [r2, #20]
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	48000400 	.word	0x48000400

08008858 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8008862:	1df9      	adds	r1, r7, #7
 8008864:	2301      	movs	r3, #1
 8008866:	2201      	movs	r2, #1
 8008868:	4804      	ldr	r0, [pc, #16]	; (800887c <ILI9341_SPI_Send+0x24>)
 800886a:	f7fe f837 	bl	80068dc <HAL_SPI_Transmit>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000dec 	.word	0x20000dec

08008880 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800888a:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <ILI9341_Write_Command+0x40>)
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	4a0c      	ldr	r2, [pc, #48]	; (80088c0 <ILI9341_Write_Command+0x40>)
 8008890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008894:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <ILI9341_Write_Command+0x40>)
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <ILI9341_Write_Command+0x40>)
 800889c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff ffd7 	bl	8008858 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <ILI9341_Write_Command+0x40>)
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <ILI9341_Write_Command+0x40>)
 80088b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b4:	6153      	str	r3, [r2, #20]
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	48000400 	.word	0x48000400

080088c4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e4:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff ffb5 	bl	8008858 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <ILI9341_Write_Data+0x40>)
 80088f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f8:	6153      	str	r3, [r2, #20]
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	48000400 	.word	0x48000400

08008908 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008908:	b590      	push	{r4, r7, lr}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4623      	mov	r3, r4
 8008918:	80fb      	strh	r3, [r7, #6]
 800891a:	4603      	mov	r3, r0
 800891c:	80bb      	strh	r3, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	807b      	strh	r3, [r7, #2]
 8008922:	4613      	mov	r3, r2
 8008924:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008926:	202a      	movs	r0, #42	; 0x2a
 8008928:	f7ff ffaa 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	b2db      	uxtb	r3, r3
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff ffc5 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff ffc0 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008944:	887b      	ldrh	r3, [r7, #2]
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	b29b      	uxth	r3, r3
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff ffb9 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8008952:	887b      	ldrh	r3, [r7, #2]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff ffb4 	bl	80088c4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 800895c:	202b      	movs	r0, #43	; 0x2b
 800895e:	f7ff ff8f 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8008962:	88bb      	ldrh	r3, [r7, #4]
 8008964:	0a1b      	lsrs	r3, r3, #8
 8008966:	b29b      	uxth	r3, r3
 8008968:	b2db      	uxtb	r3, r3
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff ffaa 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008970:	88bb      	ldrh	r3, [r7, #4]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff ffa5 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 800897a:	883b      	ldrh	r3, [r7, #0]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	b29b      	uxth	r3, r3
 8008980:	b2db      	uxtb	r3, r3
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff ff9e 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008988:	883b      	ldrh	r3, [r7, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff ff99 	bl	80088c4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8008992:	202c      	movs	r0, #44	; 0x2c
 8008994:	f7ff ff74 	bl	8008880 <ILI9341_Write_Command>
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bd90      	pop	{r4, r7, pc}

080089a0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <ILI9341_Reset+0x38>)
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	4a0b      	ldr	r2, [pc, #44]	; (80089d8 <ILI9341_Reset+0x38>)
 80089aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ae:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089b0:	20c8      	movs	r0, #200	; 0xc8
 80089b2:	f7fa fa05 	bl	8002dc0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089b6:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <ILI9341_Reset+0x38>)
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	4a07      	ldr	r2, [pc, #28]	; (80089d8 <ILI9341_Reset+0x38>)
 80089bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089c0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089c2:	20c8      	movs	r0, #200	; 0xc8
 80089c4:	f7fa f9fc 	bl	8002dc0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80089c8:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <ILI9341_Reset+0x38>)
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	4a02      	ldr	r2, [pc, #8]	; (80089d8 <ILI9341_Reset+0x38>)
 80089ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089d2:	6153      	str	r3, [r2, #20]
}
 80089d4:	bf00      	nop
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	48000400 	.word	0x48000400

080089dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 80089ea:	2036      	movs	r0, #54	; 0x36
 80089ec:	f7ff ff48 	bl	8008880 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d836      	bhi.n	8008a64 <ILI9341_Set_Rotation+0x88>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <ILI9341_Set_Rotation+0x20>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a23 	.word	0x08008a23
 8008a04:	08008a39 	.word	0x08008a39
 8008a08:	08008a4f 	.word	0x08008a4f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008a0c:	2048      	movs	r0, #72	; 0x48
 8008a0e:	f7ff ff59 	bl	80088c4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <ILI9341_Set_Rotation+0x94>)
 8008a14:	22f0      	movs	r2, #240	; 0xf0
 8008a16:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a18:	4b16      	ldr	r3, [pc, #88]	; (8008a74 <ILI9341_Set_Rotation+0x98>)
 8008a1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a1e:	801a      	strh	r2, [r3, #0]
			break;
 8008a20:	e021      	b.n	8008a66 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008a22:	2028      	movs	r0, #40	; 0x28
 8008a24:	f7ff ff4e 	bl	80088c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a28:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <ILI9341_Set_Rotation+0x94>)
 8008a2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a30:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <ILI9341_Set_Rotation+0x98>)
 8008a32:	22f0      	movs	r2, #240	; 0xf0
 8008a34:	801a      	strh	r2, [r3, #0]
			break;
 8008a36:	e016      	b.n	8008a66 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008a38:	2088      	movs	r0, #136	; 0x88
 8008a3a:	f7ff ff43 	bl	80088c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <ILI9341_Set_Rotation+0x94>)
 8008a40:	22f0      	movs	r2, #240	; 0xf0
 8008a42:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <ILI9341_Set_Rotation+0x98>)
 8008a46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a4a:	801a      	strh	r2, [r3, #0]
			break;
 8008a4c:	e00b      	b.n	8008a66 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008a4e:	20e8      	movs	r0, #232	; 0xe8
 8008a50:	f7ff ff38 	bl	80088c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <ILI9341_Set_Rotation+0x94>)
 8008a56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <ILI9341_Set_Rotation+0x98>)
 8008a5e:	22f0      	movs	r2, #240	; 0xf0
 8008a60:	801a      	strh	r2, [r3, #0]
			break;
 8008a62:	e000      	b.n	8008a66 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008a64:	bf00      	nop
	}
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	2000001e 	.word	0x2000001e
 8008a74:	2000001c 	.word	0x2000001c

08008a78 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <ILI9341_Enable+0x1c>)
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	4a04      	ldr	r2, [pc, #16]	; (8008a94 <ILI9341_Enable+0x1c>)
 8008a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a86:	6153      	str	r3, [r2, #20]
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	48000400 	.word	0x48000400

08008a98 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008a9c:	f7ff ffec 	bl	8008a78 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008aa0:	f7ff feca 	bl	8008838 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008aa4:	f7ff ff7c 	bl	80089a0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	f7ff fee9 	bl	8008880 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ab2:	f7fa f985 	bl	8002dc0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008ab6:	20cb      	movs	r0, #203	; 0xcb
 8008ab8:	f7ff fee2 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008abc:	2039      	movs	r0, #57	; 0x39
 8008abe:	f7ff ff01 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008ac2:	202c      	movs	r0, #44	; 0x2c
 8008ac4:	f7ff fefe 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008ac8:	2000      	movs	r0, #0
 8008aca:	f7ff fefb 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008ace:	2034      	movs	r0, #52	; 0x34
 8008ad0:	f7ff fef8 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008ad4:	2002      	movs	r0, #2
 8008ad6:	f7ff fef5 	bl	80088c4 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008ada:	20cf      	movs	r0, #207	; 0xcf
 8008adc:	f7ff fed0 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	f7ff feef 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008ae6:	20c1      	movs	r0, #193	; 0xc1
 8008ae8:	f7ff feec 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008aec:	2030      	movs	r0, #48	; 0x30
 8008aee:	f7ff fee9 	bl	80088c4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008af2:	20e8      	movs	r0, #232	; 0xe8
 8008af4:	f7ff fec4 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008af8:	2085      	movs	r0, #133	; 0x85
 8008afa:	f7ff fee3 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008afe:	2000      	movs	r0, #0
 8008b00:	f7ff fee0 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008b04:	2078      	movs	r0, #120	; 0x78
 8008b06:	f7ff fedd 	bl	80088c4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008b0a:	20ea      	movs	r0, #234	; 0xea
 8008b0c:	f7ff feb8 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008b10:	2000      	movs	r0, #0
 8008b12:	f7ff fed7 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008b16:	2000      	movs	r0, #0
 8008b18:	f7ff fed4 	bl	80088c4 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008b1c:	20ed      	movs	r0, #237	; 0xed
 8008b1e:	f7ff feaf 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008b22:	2064      	movs	r0, #100	; 0x64
 8008b24:	f7ff fece 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008b28:	2003      	movs	r0, #3
 8008b2a:	f7ff fecb 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008b2e:	2012      	movs	r0, #18
 8008b30:	f7ff fec8 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008b34:	2081      	movs	r0, #129	; 0x81
 8008b36:	f7ff fec5 	bl	80088c4 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008b3a:	20f7      	movs	r0, #247	; 0xf7
 8008b3c:	f7ff fea0 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008b40:	2020      	movs	r0, #32
 8008b42:	f7ff febf 	bl	80088c4 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008b46:	20c0      	movs	r0, #192	; 0xc0
 8008b48:	f7ff fe9a 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008b4c:	2023      	movs	r0, #35	; 0x23
 8008b4e:	f7ff feb9 	bl	80088c4 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008b52:	20c1      	movs	r0, #193	; 0xc1
 8008b54:	f7ff fe94 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff feb3 	bl	80088c4 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008b5e:	20c5      	movs	r0, #197	; 0xc5
 8008b60:	f7ff fe8e 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008b64:	203e      	movs	r0, #62	; 0x3e
 8008b66:	f7ff fead 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008b6a:	2028      	movs	r0, #40	; 0x28
 8008b6c:	f7ff feaa 	bl	80088c4 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008b70:	20c7      	movs	r0, #199	; 0xc7
 8008b72:	f7ff fe85 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008b76:	2086      	movs	r0, #134	; 0x86
 8008b78:	f7ff fea4 	bl	80088c4 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008b7c:	2036      	movs	r0, #54	; 0x36
 8008b7e:	f7ff fe7f 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008b82:	2048      	movs	r0, #72	; 0x48
 8008b84:	f7ff fe9e 	bl	80088c4 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008b88:	203a      	movs	r0, #58	; 0x3a
 8008b8a:	f7ff fe79 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008b8e:	2055      	movs	r0, #85	; 0x55
 8008b90:	f7ff fe98 	bl	80088c4 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008b94:	20b1      	movs	r0, #177	; 0xb1
 8008b96:	f7ff fe73 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f7ff fe92 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008ba0:	2018      	movs	r0, #24
 8008ba2:	f7ff fe8f 	bl	80088c4 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008ba6:	20b6      	movs	r0, #182	; 0xb6
 8008ba8:	f7ff fe6a 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008bac:	2008      	movs	r0, #8
 8008bae:	f7ff fe89 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008bb2:	2082      	movs	r0, #130	; 0x82
 8008bb4:	f7ff fe86 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008bb8:	2027      	movs	r0, #39	; 0x27
 8008bba:	f7ff fe83 	bl	80088c4 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008bbe:	20f2      	movs	r0, #242	; 0xf2
 8008bc0:	f7ff fe5e 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f7ff fe7d 	bl	80088c4 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008bca:	2026      	movs	r0, #38	; 0x26
 8008bcc:	f7ff fe58 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7ff fe77 	bl	80088c4 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008bd6:	20e0      	movs	r0, #224	; 0xe0
 8008bd8:	f7ff fe52 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008bdc:	200f      	movs	r0, #15
 8008bde:	f7ff fe71 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008be2:	2031      	movs	r0, #49	; 0x31
 8008be4:	f7ff fe6e 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008be8:	202b      	movs	r0, #43	; 0x2b
 8008bea:	f7ff fe6b 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008bee:	200c      	movs	r0, #12
 8008bf0:	f7ff fe68 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008bf4:	200e      	movs	r0, #14
 8008bf6:	f7ff fe65 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008bfa:	2008      	movs	r0, #8
 8008bfc:	f7ff fe62 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008c00:	204e      	movs	r0, #78	; 0x4e
 8008c02:	f7ff fe5f 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008c06:	20f1      	movs	r0, #241	; 0xf1
 8008c08:	f7ff fe5c 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008c0c:	2037      	movs	r0, #55	; 0x37
 8008c0e:	f7ff fe59 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c12:	2007      	movs	r0, #7
 8008c14:	f7ff fe56 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008c18:	2010      	movs	r0, #16
 8008c1a:	f7ff fe53 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c1e:	2003      	movs	r0, #3
 8008c20:	f7ff fe50 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c24:	200e      	movs	r0, #14
 8008c26:	f7ff fe4d 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008c2a:	2009      	movs	r0, #9
 8008c2c:	f7ff fe4a 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c30:	2000      	movs	r0, #0
 8008c32:	f7ff fe47 	bl	80088c4 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008c36:	20e1      	movs	r0, #225	; 0xe1
 8008c38:	f7ff fe22 	bl	8008880 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	f7ff fe41 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c42:	200e      	movs	r0, #14
 8008c44:	f7ff fe3e 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008c48:	2014      	movs	r0, #20
 8008c4a:	f7ff fe3b 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c4e:	2003      	movs	r0, #3
 8008c50:	f7ff fe38 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008c54:	2011      	movs	r0, #17
 8008c56:	f7ff fe35 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c5a:	2007      	movs	r0, #7
 8008c5c:	f7ff fe32 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008c60:	2031      	movs	r0, #49	; 0x31
 8008c62:	f7ff fe2f 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008c66:	20c1      	movs	r0, #193	; 0xc1
 8008c68:	f7ff fe2c 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008c6c:	2048      	movs	r0, #72	; 0x48
 8008c6e:	f7ff fe29 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008c72:	2008      	movs	r0, #8
 8008c74:	f7ff fe26 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008c78:	200f      	movs	r0, #15
 8008c7a:	f7ff fe23 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008c7e:	200c      	movs	r0, #12
 8008c80:	f7ff fe20 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008c84:	2031      	movs	r0, #49	; 0x31
 8008c86:	f7ff fe1d 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008c8a:	2036      	movs	r0, #54	; 0x36
 8008c8c:	f7ff fe1a 	bl	80088c4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008c90:	200f      	movs	r0, #15
 8008c92:	f7ff fe17 	bl	80088c4 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008c96:	2011      	movs	r0, #17
 8008c98:	f7ff fdf2 	bl	8008880 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008c9c:	20f0      	movs	r0, #240	; 0xf0
 8008c9e:	f7fa f88f 	bl	8002dc0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008ca2:	2029      	movs	r0, #41	; 0x29
 8008ca4:	f7ff fdec 	bl	8008880 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7ff fe97 	bl	80089dc <ILI9341_Set_Rotation>
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008cb4:	b5b0      	push	{r4, r5, r7, lr}
 8008cb6:	b08e      	sub	sp, #56	; 0x38
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	607b      	str	r3, [r7, #4]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	81fb      	strh	r3, [r7, #14]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	81bb      	strh	r3, [r7, #12]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	817b      	strh	r3, [r7, #10]
 8008cc8:	466b      	mov	r3, sp
 8008cca:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	4a48      	ldr	r2, [pc, #288]	; (8008df8 <ILI9341_Draw_colour_Burst+0x144>)
 8008cd6:	8812      	ldrh	r2, [r2, #0]
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d202      	bcs.n	8008ce2 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce0:	e002      	b.n	8008ce8 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008ce2:	4b45      	ldr	r3, [pc, #276]	; (8008df8 <ILI9341_Draw_colour_Burst+0x144>)
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008ce8:	897b      	ldrh	r3, [r7, #10]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	00d4      	lsls	r4, r2, #3
 8008d0a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d0e:	00cb      	lsls	r3, r1, #3
 8008d10:	4601      	mov	r1, r0
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	f04f 0400 	mov.w	r4, #0
 8008d1e:	00d4      	lsls	r4, r2, #3
 8008d20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d24:	00cb      	lsls	r3, r1, #3
 8008d26:	1dc3      	adds	r3, r0, #7
 8008d28:	08db      	lsrs	r3, r3, #3
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8008d30:	466b      	mov	r3, sp
 8008d32:	3300      	adds	r3, #0
 8008d34:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d36:	2300      	movs	r3, #0
 8008d38:	633b      	str	r3, [r7, #48]	; 0x30
 8008d3a:	e00e      	b.n	8008d5a <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	4413      	add	r3, r2
 8008d42:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008d46:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	897a      	ldrh	r2, [r7, #10]
 8008d4e:	b2d1      	uxtb	r1, r2
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	3302      	adds	r3, #2
 8008d58:	633b      	str	r3, [r7, #48]	; 0x30
 8008d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d3ec      	bcc.n	8008d3c <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00d      	beq.n	8008d92 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d84:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d8a:	fb01 f202 	mul.w	r2, r1, r2
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008d92:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008d9e:	4b17      	ldr	r3, [pc, #92]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da8:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
 8008db4:	e009      	b.n	8008dca <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008db6:	69b9      	ldr	r1, [r7, #24]
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	4810      	ldr	r0, [pc, #64]	; (8008e00 <ILI9341_Draw_colour_Burst+0x14c>)
 8008dc0:	f7fd fd8c 	bl	80068dc <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d3f1      	bcc.n	8008db6 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008dd2:	69b9      	ldr	r1, [r7, #24]
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	2302      	movs	r3, #2
 8008dda:	4809      	ldr	r0, [pc, #36]	; (8008e00 <ILI9341_Draw_colour_Burst+0x14c>)
 8008ddc:	f7fd fd7e 	bl	80068dc <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	4a05      	ldr	r2, [pc, #20]	; (8008dfc <ILI9341_Draw_colour_Burst+0x148>)
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	6153      	str	r3, [r2, #20]
 8008dec:	46ad      	mov	sp, r5


}
 8008dee:	bf00      	nop
 8008df0:	3738      	adds	r7, #56	; 0x38
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bdb0      	pop	{r4, r5, r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000020 	.word	0x20000020
 8008dfc:	48000400 	.word	0x48000400
 8008e00:	20000dec 	.word	0x20000dec

08008e04 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008e0e:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <ILI9341_Fill_Screen+0x4c>)
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <ILI9341_Fill_Screen+0x50>)
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7ff fd73 	bl	8008908 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <ILI9341_Fill_Screen+0x4c>)
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <ILI9341_Fill_Screen+0x50>)
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	fb03 f302 	mul.w	r3, r3, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	2304      	movs	r3, #4
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	2100      	movs	r1, #0
 8008e40:	2000      	movs	r0, #0
 8008e42:	f7ff ff37 	bl	8008cb4 <ILI9341_Draw_colour_Burst>
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	2000001e 	.word	0x2000001e
 8008e54:	2000001c 	.word	0x2000001c

08008e58 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	80fb      	strh	r3, [r7, #6]
 8008e62:	460b      	mov	r3, r1
 8008e64:	80bb      	strh	r3, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008e6a:	4b64      	ldr	r3, [pc, #400]	; (8008ffc <ILI9341_Draw_Pixel+0x1a4>)
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	88fa      	ldrh	r2, [r7, #6]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	f080 80be 	bcs.w	8008ff4 <ILI9341_Draw_Pixel+0x19c>
 8008e78:	4b61      	ldr	r3, [pc, #388]	; (8009000 <ILI9341_Draw_Pixel+0x1a8>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	88ba      	ldrh	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	f080 80b7 	bcs.w	8008ff4 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008e86:	4b5f      	ldr	r3, [pc, #380]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	4a5e      	ldr	r2, [pc, #376]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e90:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008e92:	4b5c      	ldr	r3, [pc, #368]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	4a5b      	ldr	r2, [pc, #364]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e9c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008e9e:	202a      	movs	r0, #42	; 0x2a
 8008ea0:	f7ff fcda 	bl	8008858 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008ea4:	4b57      	ldr	r3, [pc, #348]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	4a56      	ldr	r2, [pc, #344]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eae:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008eb0:	4b54      	ldr	r3, [pc, #336]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	4a53      	ldr	r2, [pc, #332]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eba:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008ebc:	4b51      	ldr	r3, [pc, #324]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	4a50      	ldr	r2, [pc, #320]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	753b      	strb	r3, [r7, #20]
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	757b      	strb	r3, [r7, #21]
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	3301      	adds	r3, #1
 8008edc:	121b      	asrs	r3, r3, #8
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	75bb      	strb	r3, [r7, #22]
 8008ee2:	88fb      	ldrh	r3, [r7, #6]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008eec:	f107 0114 	add.w	r1, r7, #20
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	4844      	ldr	r0, [pc, #272]	; (8009008 <ILI9341_Draw_Pixel+0x1b0>)
 8008ef6:	f7fd fcf1 	bl	80068dc <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008efa:	4b42      	ldr	r3, [pc, #264]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	4a41      	ldr	r2, [pc, #260]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f04:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008f06:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	4a3e      	ldr	r2, [pc, #248]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f10:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f12:	4b3c      	ldr	r3, [pc, #240]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	4a3b      	ldr	r2, [pc, #236]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f1c:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008f1e:	202b      	movs	r0, #43	; 0x2b
 8008f20:	f7ff fc9a 	bl	8008858 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008f24:	4b37      	ldr	r3, [pc, #220]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	4a36      	ldr	r2, [pc, #216]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f30:	4b34      	ldr	r3, [pc, #208]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3a:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f3c:	4b31      	ldr	r3, [pc, #196]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	4a30      	ldr	r2, [pc, #192]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f46:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	743b      	strb	r3, [r7, #16]
 8008f52:	88bb      	ldrh	r3, [r7, #4]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	747b      	strb	r3, [r7, #17]
 8008f58:	88bb      	ldrh	r3, [r7, #4]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	121b      	asrs	r3, r3, #8
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	74bb      	strb	r3, [r7, #18]
 8008f62:	88bb      	ldrh	r3, [r7, #4]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	3301      	adds	r3, #1
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008f6c:	f107 0110 	add.w	r1, r7, #16
 8008f70:	2301      	movs	r3, #1
 8008f72:	2204      	movs	r2, #4
 8008f74:	4824      	ldr	r0, [pc, #144]	; (8009008 <ILI9341_Draw_Pixel+0x1b0>)
 8008f76:	f7fd fcb1 	bl	80068dc <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f7a:	4b22      	ldr	r3, [pc, #136]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f84:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f90:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f92:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	4a1b      	ldr	r2, [pc, #108]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008f9e:	202c      	movs	r0, #44	; 0x2c
 8008fa0:	f7ff fc5a 	bl	8008858 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008fa4:	4b17      	ldr	r3, [pc, #92]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	4a16      	ldr	r2, [pc, #88]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fae:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008fb0:	4b14      	ldr	r3, [pc, #80]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	4a13      	ldr	r2, [pc, #76]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fba:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	4a10      	ldr	r2, [pc, #64]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fc6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008fc8:	887b      	ldrh	r3, [r7, #2]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	733b      	strb	r3, [r7, #12]
 8008fd2:	887b      	ldrh	r3, [r7, #2]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008fd8:	f107 010c 	add.w	r1, r7, #12
 8008fdc:	2301      	movs	r3, #1
 8008fde:	2202      	movs	r2, #2
 8008fe0:	4809      	ldr	r0, [pc, #36]	; (8009008 <ILI9341_Draw_Pixel+0x1b0>)
 8008fe2:	f7fd fc7b 	bl	80068dc <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	4a06      	ldr	r2, [pc, #24]	; (8009004 <ILI9341_Draw_Pixel+0x1ac>)
 8008fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff0:	6153      	str	r3, [r2, #20]
 8008ff2:	e000      	b.n	8008ff6 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008ff4:	bf00      	nop

	
}
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	2000001e 	.word	0x2000001e
 8009000:	2000001c 	.word	0x2000001c
 8009004:	48000400 	.word	0x48000400
 8009008:	20000dec 	.word	0x20000dec

0800900c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800900c:	b590      	push	{r4, r7, lr}
 800900e:	b087      	sub	sp, #28
 8009010:	af02      	add	r7, sp, #8
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	461a      	mov	r2, r3
 800901a:	4623      	mov	r3, r4
 800901c:	80fb      	strh	r3, [r7, #6]
 800901e:	4603      	mov	r3, r0
 8009020:	80bb      	strh	r3, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	807b      	strh	r3, [r7, #2]
 8009026:	4613      	mov	r3, r2
 8009028:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800902a:	4b39      	ldr	r3, [pc, #228]	; (8009110 <ILI9341_Draw_Rectangle+0x104>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	88fa      	ldrh	r2, [r7, #6]
 8009032:	429a      	cmp	r2, r3
 8009034:	d268      	bcs.n	8009108 <ILI9341_Draw_Rectangle+0xfc>
 8009036:	4b37      	ldr	r3, [pc, #220]	; (8009114 <ILI9341_Draw_Rectangle+0x108>)
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	b29b      	uxth	r3, r3
 800903c:	88ba      	ldrh	r2, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d262      	bcs.n	8009108 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8009042:	88fa      	ldrh	r2, [r7, #6]
 8009044:	887b      	ldrh	r3, [r7, #2]
 8009046:	4413      	add	r3, r2
 8009048:	3b01      	subs	r3, #1
 800904a:	4a31      	ldr	r2, [pc, #196]	; (8009110 <ILI9341_Draw_Rectangle+0x104>)
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	b292      	uxth	r2, r2
 8009050:	4293      	cmp	r3, r2
 8009052:	db05      	blt.n	8009060 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009054:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <ILI9341_Draw_Rectangle+0x104>)
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29a      	uxth	r2, r3
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8009060:	88ba      	ldrh	r2, [r7, #4]
 8009062:	883b      	ldrh	r3, [r7, #0]
 8009064:	4413      	add	r3, r2
 8009066:	3b01      	subs	r3, #1
 8009068:	4a2a      	ldr	r2, [pc, #168]	; (8009114 <ILI9341_Draw_Rectangle+0x108>)
 800906a:	8812      	ldrh	r2, [r2, #0]
 800906c:	b292      	uxth	r2, r2
 800906e:	4293      	cmp	r3, r2
 8009070:	db05      	blt.n	800907e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8009072:	4b28      	ldr	r3, [pc, #160]	; (8009114 <ILI9341_Draw_Rectangle+0x108>)
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	b29a      	uxth	r2, r3
 8009078:	88bb      	ldrh	r3, [r7, #4]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	887b      	ldrh	r3, [r7, #2]
 8009082:	4413      	add	r3, r2
 8009084:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009086:	3b01      	subs	r3, #1
 8009088:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800908a:	88ba      	ldrh	r2, [r7, #4]
 800908c:	883b      	ldrh	r3, [r7, #0]
 800908e:	4413      	add	r3, r2
 8009090:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009092:	3b01      	subs	r3, #1
 8009094:	b29b      	uxth	r3, r3
 8009096:	88b9      	ldrh	r1, [r7, #4]
 8009098:	88f8      	ldrh	r0, [r7, #6]
 800909a:	4622      	mov	r2, r4
 800909c:	f7ff fc34 	bl	8008908 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80090a0:	883a      	ldrh	r2, [r7, #0]
 80090a2:	887b      	ldrh	r3, [r7, #2]
 80090a4:	fb12 f303 	smulbb	r3, r2, r3
 80090a8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80090ae:	89fb      	ldrh	r3, [r7, #14]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <ILI9341_Draw_Rectangle+0xc0>
 80090b8:	89fb      	ldrh	r3, [r7, #14]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d906      	bls.n	80090cc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80090be:	2301      	movs	r3, #1
 80090c0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80090cc:	89fc      	ldrh	r4, [r7, #14]
 80090ce:	8c3a      	ldrh	r2, [r7, #32]
 80090d0:	88b9      	ldrh	r1, [r7, #4]
 80090d2:	88f8      	ldrh	r0, [r7, #6]
 80090d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4623      	mov	r3, r4
 80090dc:	f7ff fdea 	bl	8008cb4 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80090e0:	7b7b      	ldrb	r3, [r7, #13]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80090e6:	88fa      	ldrh	r2, [r7, #6]
 80090e8:	887b      	ldrh	r3, [r7, #2]
 80090ea:	4413      	add	r3, r2
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80090f2:	88ba      	ldrh	r2, [r7, #4]
 80090f4:	883b      	ldrh	r3, [r7, #0]
 80090f6:	4413      	add	r3, r2
 80090f8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	8c3a      	ldrh	r2, [r7, #32]
 8009100:	4619      	mov	r1, r3
 8009102:	f7ff fea9 	bl	8008e58 <ILI9341_Draw_Pixel>
 8009106:	e000      	b.n	800910a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009108:	bf00      	nop
							colour);
	}
}
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	bd90      	pop	{r4, r7, pc}
 8009110:	2000001e 	.word	0x2000001e
 8009114:	2000001c 	.word	0x2000001c

08009118 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b085      	sub	sp, #20
 800911c:	af02      	add	r7, sp, #8
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	461a      	mov	r2, r3
 8009126:	4623      	mov	r3, r4
 8009128:	80fb      	strh	r3, [r7, #6]
 800912a:	4603      	mov	r3, r0
 800912c:	80bb      	strh	r3, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	807b      	strh	r3, [r7, #2]
 8009132:	4613      	mov	r3, r2
 8009134:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009136:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	88fa      	ldrh	r2, [r7, #6]
 800913e:	429a      	cmp	r2, r3
 8009140:	d229      	bcs.n	8009196 <ILI9341_Draw_Horizontal_Line+0x7e>
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	88ba      	ldrh	r2, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d223      	bcs.n	8009196 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	887b      	ldrh	r3, [r7, #2]
 8009152:	4413      	add	r3, r2
 8009154:	3b01      	subs	r3, #1
 8009156:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009158:	8812      	ldrh	r2, [r2, #0]
 800915a:	b292      	uxth	r2, r2
 800915c:	4293      	cmp	r3, r2
 800915e:	db05      	blt.n	800916c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8009160:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29a      	uxth	r2, r3
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 800916c:	88fa      	ldrh	r2, [r7, #6]
 800916e:	887b      	ldrh	r3, [r7, #2]
 8009170:	4413      	add	r3, r2
 8009172:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	88bb      	ldrh	r3, [r7, #4]
 800917a:	88b9      	ldrh	r1, [r7, #4]
 800917c:	88f8      	ldrh	r0, [r7, #6]
 800917e:	f7ff fbc3 	bl	8008908 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8009182:	887c      	ldrh	r4, [r7, #2]
 8009184:	883a      	ldrh	r2, [r7, #0]
 8009186:	88b9      	ldrh	r1, [r7, #4]
 8009188:	88f8      	ldrh	r0, [r7, #6]
 800918a:	2303      	movs	r3, #3
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	4623      	mov	r3, r4
 8009190:	f7ff fd90 	bl	8008cb4 <ILI9341_Draw_colour_Burst>
 8009194:	e000      	b.n	8009198 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009196:	bf00      	nop
}
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	bd90      	pop	{r4, r7, pc}
 800919e:	bf00      	nop
 80091a0:	2000001e 	.word	0x2000001e
 80091a4:	2000001c 	.word	0x2000001c

080091a8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 80091a8:	b590      	push	{r4, r7, lr}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	4611      	mov	r1, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	4623      	mov	r3, r4
 80091b8:	80fb      	strh	r3, [r7, #6]
 80091ba:	4603      	mov	r3, r0
 80091bc:	80bb      	strh	r3, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	807b      	strh	r3, [r7, #2]
 80091c2:	4613      	mov	r3, r2
 80091c4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80091c6:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <ILI9341_Draw_Vertical_Line+0x88>)
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d229      	bcs.n	8009226 <ILI9341_Draw_Vertical_Line+0x7e>
 80091d2:	4b18      	ldr	r3, [pc, #96]	; (8009234 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	88ba      	ldrh	r2, [r7, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d223      	bcs.n	8009226 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80091de:	88ba      	ldrh	r2, [r7, #4]
 80091e0:	887b      	ldrh	r3, [r7, #2]
 80091e2:	4413      	add	r3, r2
 80091e4:	3b01      	subs	r3, #1
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091e8:	8812      	ldrh	r2, [r2, #0]
 80091ea:	b292      	uxth	r2, r2
 80091ec:	4293      	cmp	r3, r2
 80091ee:	db05      	blt.n	80091fc <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 80091f0:	4b10      	ldr	r3, [pc, #64]	; (8009234 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	88bb      	ldrh	r3, [r7, #4]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 80091fc:	88ba      	ldrh	r2, [r7, #4]
 80091fe:	887b      	ldrh	r3, [r7, #2]
 8009200:	4413      	add	r3, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29b      	uxth	r3, r3
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	88b9      	ldrh	r1, [r7, #4]
 800920c:	88f8      	ldrh	r0, [r7, #6]
 800920e:	f7ff fb7b 	bl	8008908 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8009212:	887c      	ldrh	r4, [r7, #2]
 8009214:	883a      	ldrh	r2, [r7, #0]
 8009216:	88b9      	ldrh	r1, [r7, #4]
 8009218:	88f8      	ldrh	r0, [r7, #6]
 800921a:	2303      	movs	r3, #3
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	4623      	mov	r3, r4
 8009220:	f7ff fd48 	bl	8008cb4 <ILI9341_Draw_colour_Burst>
 8009224:	e000      	b.n	8009228 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009226:	bf00      	nop
}
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bd90      	pop	{r4, r7, pc}
 800922e:	bf00      	nop
 8009230:	2000001e 	.word	0x2000001e
 8009234:	2000001c 	.word	0x2000001c

08009238 <__errno>:
 8009238:	4b01      	ldr	r3, [pc, #4]	; (8009240 <__errno+0x8>)
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	20000b64 	.word	0x20000b64

08009244 <__libc_init_array>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4e0d      	ldr	r6, [pc, #52]	; (800927c <__libc_init_array+0x38>)
 8009248:	4c0d      	ldr	r4, [pc, #52]	; (8009280 <__libc_init_array+0x3c>)
 800924a:	1ba4      	subs	r4, r4, r6
 800924c:	10a4      	asrs	r4, r4, #2
 800924e:	2500      	movs	r5, #0
 8009250:	42a5      	cmp	r5, r4
 8009252:	d109      	bne.n	8009268 <__libc_init_array+0x24>
 8009254:	4e0b      	ldr	r6, [pc, #44]	; (8009284 <__libc_init_array+0x40>)
 8009256:	4c0c      	ldr	r4, [pc, #48]	; (8009288 <__libc_init_array+0x44>)
 8009258:	f000 ffe8 	bl	800a22c <_init>
 800925c:	1ba4      	subs	r4, r4, r6
 800925e:	10a4      	asrs	r4, r4, #2
 8009260:	2500      	movs	r5, #0
 8009262:	42a5      	cmp	r5, r4
 8009264:	d105      	bne.n	8009272 <__libc_init_array+0x2e>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800926c:	4798      	blx	r3
 800926e:	3501      	adds	r5, #1
 8009270:	e7ee      	b.n	8009250 <__libc_init_array+0xc>
 8009272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009276:	4798      	blx	r3
 8009278:	3501      	adds	r5, #1
 800927a:	e7f2      	b.n	8009262 <__libc_init_array+0x1e>
 800927c:	0800a798 	.word	0x0800a798
 8009280:	0800a798 	.word	0x0800a798
 8009284:	0800a798 	.word	0x0800a798
 8009288:	0800a79c 	.word	0x0800a79c

0800928c <memset>:
 800928c:	4402      	add	r2, r0
 800928e:	4603      	mov	r3, r0
 8009290:	4293      	cmp	r3, r2
 8009292:	d100      	bne.n	8009296 <memset+0xa>
 8009294:	4770      	bx	lr
 8009296:	f803 1b01 	strb.w	r1, [r3], #1
 800929a:	e7f9      	b.n	8009290 <memset+0x4>

0800929c <_puts_r>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	460e      	mov	r6, r1
 80092a0:	4605      	mov	r5, r0
 80092a2:	b118      	cbz	r0, 80092ac <_puts_r+0x10>
 80092a4:	6983      	ldr	r3, [r0, #24]
 80092a6:	b90b      	cbnz	r3, 80092ac <_puts_r+0x10>
 80092a8:	f000 fa40 	bl	800972c <__sinit>
 80092ac:	69ab      	ldr	r3, [r5, #24]
 80092ae:	68ac      	ldr	r4, [r5, #8]
 80092b0:	b913      	cbnz	r3, 80092b8 <_puts_r+0x1c>
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 fa3a 	bl	800972c <__sinit>
 80092b8:	4b23      	ldr	r3, [pc, #140]	; (8009348 <_puts_r+0xac>)
 80092ba:	429c      	cmp	r4, r3
 80092bc:	d117      	bne.n	80092ee <_puts_r+0x52>
 80092be:	686c      	ldr	r4, [r5, #4]
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	071b      	lsls	r3, r3, #28
 80092c4:	d51d      	bpl.n	8009302 <_puts_r+0x66>
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	b1db      	cbz	r3, 8009302 <_puts_r+0x66>
 80092ca:	3e01      	subs	r6, #1
 80092cc:	68a3      	ldr	r3, [r4, #8]
 80092ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092d2:	3b01      	subs	r3, #1
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	b9e9      	cbnz	r1, 8009314 <_puts_r+0x78>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da2e      	bge.n	800933a <_puts_r+0x9e>
 80092dc:	4622      	mov	r2, r4
 80092de:	210a      	movs	r1, #10
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 f873 	bl	80093cc <__swbuf_r>
 80092e6:	3001      	adds	r0, #1
 80092e8:	d011      	beq.n	800930e <_puts_r+0x72>
 80092ea:	200a      	movs	r0, #10
 80092ec:	e011      	b.n	8009312 <_puts_r+0x76>
 80092ee:	4b17      	ldr	r3, [pc, #92]	; (800934c <_puts_r+0xb0>)
 80092f0:	429c      	cmp	r4, r3
 80092f2:	d101      	bne.n	80092f8 <_puts_r+0x5c>
 80092f4:	68ac      	ldr	r4, [r5, #8]
 80092f6:	e7e3      	b.n	80092c0 <_puts_r+0x24>
 80092f8:	4b15      	ldr	r3, [pc, #84]	; (8009350 <_puts_r+0xb4>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	bf08      	it	eq
 80092fe:	68ec      	ldreq	r4, [r5, #12]
 8009300:	e7de      	b.n	80092c0 <_puts_r+0x24>
 8009302:	4621      	mov	r1, r4
 8009304:	4628      	mov	r0, r5
 8009306:	f000 f8b3 	bl	8009470 <__swsetup_r>
 800930a:	2800      	cmp	r0, #0
 800930c:	d0dd      	beq.n	80092ca <_puts_r+0x2e>
 800930e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	2b00      	cmp	r3, #0
 8009316:	da04      	bge.n	8009322 <_puts_r+0x86>
 8009318:	69a2      	ldr	r2, [r4, #24]
 800931a:	429a      	cmp	r2, r3
 800931c:	dc06      	bgt.n	800932c <_puts_r+0x90>
 800931e:	290a      	cmp	r1, #10
 8009320:	d004      	beq.n	800932c <_puts_r+0x90>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	7019      	strb	r1, [r3, #0]
 800932a:	e7cf      	b.n	80092cc <_puts_r+0x30>
 800932c:	4622      	mov	r2, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f000 f84c 	bl	80093cc <__swbuf_r>
 8009334:	3001      	adds	r0, #1
 8009336:	d1c9      	bne.n	80092cc <_puts_r+0x30>
 8009338:	e7e9      	b.n	800930e <_puts_r+0x72>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	200a      	movs	r0, #10
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	6022      	str	r2, [r4, #0]
 8009342:	7018      	strb	r0, [r3, #0]
 8009344:	e7e5      	b.n	8009312 <_puts_r+0x76>
 8009346:	bf00      	nop
 8009348:	0800a724 	.word	0x0800a724
 800934c:	0800a744 	.word	0x0800a744
 8009350:	0800a704 	.word	0x0800a704

08009354 <puts>:
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <puts+0xc>)
 8009356:	4601      	mov	r1, r0
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f7ff bf9f 	b.w	800929c <_puts_r>
 800935e:	bf00      	nop
 8009360:	20000b64 	.word	0x20000b64

08009364 <sniprintf>:
 8009364:	b40c      	push	{r2, r3}
 8009366:	b530      	push	{r4, r5, lr}
 8009368:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <sniprintf+0x64>)
 800936a:	1e0c      	subs	r4, r1, #0
 800936c:	b09d      	sub	sp, #116	; 0x74
 800936e:	681d      	ldr	r5, [r3, #0]
 8009370:	da08      	bge.n	8009384 <sniprintf+0x20>
 8009372:	238b      	movs	r3, #139	; 0x8b
 8009374:	602b      	str	r3, [r5, #0]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800937a:	b01d      	add	sp, #116	; 0x74
 800937c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009380:	b002      	add	sp, #8
 8009382:	4770      	bx	lr
 8009384:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009388:	f8ad 3014 	strh.w	r3, [sp, #20]
 800938c:	bf14      	ite	ne
 800938e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009392:	4623      	moveq	r3, r4
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800939c:	9002      	str	r0, [sp, #8]
 800939e:	9006      	str	r0, [sp, #24]
 80093a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093a6:	ab21      	add	r3, sp, #132	; 0x84
 80093a8:	a902      	add	r1, sp, #8
 80093aa:	4628      	mov	r0, r5
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f000 fbad 	bl	8009b0c <_svfiprintf_r>
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	bfbc      	itt	lt
 80093b6:	238b      	movlt	r3, #139	; 0x8b
 80093b8:	602b      	strlt	r3, [r5, #0]
 80093ba:	2c00      	cmp	r4, #0
 80093bc:	d0dd      	beq.n	800937a <sniprintf+0x16>
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]
 80093c4:	e7d9      	b.n	800937a <sniprintf+0x16>
 80093c6:	bf00      	nop
 80093c8:	20000b64 	.word	0x20000b64

080093cc <__swbuf_r>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	460e      	mov	r6, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	4605      	mov	r5, r0
 80093d4:	b118      	cbz	r0, 80093de <__swbuf_r+0x12>
 80093d6:	6983      	ldr	r3, [r0, #24]
 80093d8:	b90b      	cbnz	r3, 80093de <__swbuf_r+0x12>
 80093da:	f000 f9a7 	bl	800972c <__sinit>
 80093de:	4b21      	ldr	r3, [pc, #132]	; (8009464 <__swbuf_r+0x98>)
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d12a      	bne.n	800943a <__swbuf_r+0x6e>
 80093e4:	686c      	ldr	r4, [r5, #4]
 80093e6:	69a3      	ldr	r3, [r4, #24]
 80093e8:	60a3      	str	r3, [r4, #8]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	071a      	lsls	r2, r3, #28
 80093ee:	d52e      	bpl.n	800944e <__swbuf_r+0x82>
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	b363      	cbz	r3, 800944e <__swbuf_r+0x82>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	1ac0      	subs	r0, r0, r3
 80093fa:	6963      	ldr	r3, [r4, #20]
 80093fc:	b2f6      	uxtb	r6, r6
 80093fe:	4283      	cmp	r3, r0
 8009400:	4637      	mov	r7, r6
 8009402:	dc04      	bgt.n	800940e <__swbuf_r+0x42>
 8009404:	4621      	mov	r1, r4
 8009406:	4628      	mov	r0, r5
 8009408:	f000 f926 	bl	8009658 <_fflush_r>
 800940c:	bb28      	cbnz	r0, 800945a <__swbuf_r+0x8e>
 800940e:	68a3      	ldr	r3, [r4, #8]
 8009410:	3b01      	subs	r3, #1
 8009412:	60a3      	str	r3, [r4, #8]
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	701e      	strb	r6, [r3, #0]
 800941c:	6963      	ldr	r3, [r4, #20]
 800941e:	3001      	adds	r0, #1
 8009420:	4283      	cmp	r3, r0
 8009422:	d004      	beq.n	800942e <__swbuf_r+0x62>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	07db      	lsls	r3, r3, #31
 8009428:	d519      	bpl.n	800945e <__swbuf_r+0x92>
 800942a:	2e0a      	cmp	r6, #10
 800942c:	d117      	bne.n	800945e <__swbuf_r+0x92>
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	f000 f911 	bl	8009658 <_fflush_r>
 8009436:	b190      	cbz	r0, 800945e <__swbuf_r+0x92>
 8009438:	e00f      	b.n	800945a <__swbuf_r+0x8e>
 800943a:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <__swbuf_r+0x9c>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d101      	bne.n	8009444 <__swbuf_r+0x78>
 8009440:	68ac      	ldr	r4, [r5, #8]
 8009442:	e7d0      	b.n	80093e6 <__swbuf_r+0x1a>
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <__swbuf_r+0xa0>)
 8009446:	429c      	cmp	r4, r3
 8009448:	bf08      	it	eq
 800944a:	68ec      	ldreq	r4, [r5, #12]
 800944c:	e7cb      	b.n	80093e6 <__swbuf_r+0x1a>
 800944e:	4621      	mov	r1, r4
 8009450:	4628      	mov	r0, r5
 8009452:	f000 f80d 	bl	8009470 <__swsetup_r>
 8009456:	2800      	cmp	r0, #0
 8009458:	d0cc      	beq.n	80093f4 <__swbuf_r+0x28>
 800945a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800945e:	4638      	mov	r0, r7
 8009460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009462:	bf00      	nop
 8009464:	0800a724 	.word	0x0800a724
 8009468:	0800a744 	.word	0x0800a744
 800946c:	0800a704 	.word	0x0800a704

08009470 <__swsetup_r>:
 8009470:	4b32      	ldr	r3, [pc, #200]	; (800953c <__swsetup_r+0xcc>)
 8009472:	b570      	push	{r4, r5, r6, lr}
 8009474:	681d      	ldr	r5, [r3, #0]
 8009476:	4606      	mov	r6, r0
 8009478:	460c      	mov	r4, r1
 800947a:	b125      	cbz	r5, 8009486 <__swsetup_r+0x16>
 800947c:	69ab      	ldr	r3, [r5, #24]
 800947e:	b913      	cbnz	r3, 8009486 <__swsetup_r+0x16>
 8009480:	4628      	mov	r0, r5
 8009482:	f000 f953 	bl	800972c <__sinit>
 8009486:	4b2e      	ldr	r3, [pc, #184]	; (8009540 <__swsetup_r+0xd0>)
 8009488:	429c      	cmp	r4, r3
 800948a:	d10f      	bne.n	80094ac <__swsetup_r+0x3c>
 800948c:	686c      	ldr	r4, [r5, #4]
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	b29a      	uxth	r2, r3
 8009494:	0715      	lsls	r5, r2, #28
 8009496:	d42c      	bmi.n	80094f2 <__swsetup_r+0x82>
 8009498:	06d0      	lsls	r0, r2, #27
 800949a:	d411      	bmi.n	80094c0 <__swsetup_r+0x50>
 800949c:	2209      	movs	r2, #9
 800949e:	6032      	str	r2, [r6, #0]
 80094a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094aa:	e03e      	b.n	800952a <__swsetup_r+0xba>
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <__swsetup_r+0xd4>)
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d101      	bne.n	80094b6 <__swsetup_r+0x46>
 80094b2:	68ac      	ldr	r4, [r5, #8]
 80094b4:	e7eb      	b.n	800948e <__swsetup_r+0x1e>
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <__swsetup_r+0xd8>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	bf08      	it	eq
 80094bc:	68ec      	ldreq	r4, [r5, #12]
 80094be:	e7e6      	b.n	800948e <__swsetup_r+0x1e>
 80094c0:	0751      	lsls	r1, r2, #29
 80094c2:	d512      	bpl.n	80094ea <__swsetup_r+0x7a>
 80094c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c6:	b141      	cbz	r1, 80094da <__swsetup_r+0x6a>
 80094c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <__swsetup_r+0x66>
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 fa19 	bl	8009908 <_free_r>
 80094d6:	2300      	movs	r3, #0
 80094d8:	6363      	str	r3, [r4, #52]	; 0x34
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	2300      	movs	r3, #0
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0308 	orr.w	r3, r3, #8
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	b94b      	cbnz	r3, 800950a <__swsetup_r+0x9a>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009500:	d003      	beq.n	800950a <__swsetup_r+0x9a>
 8009502:	4621      	mov	r1, r4
 8009504:	4630      	mov	r0, r6
 8009506:	f000 f9bf 	bl	8009888 <__smakebuf_r>
 800950a:	89a2      	ldrh	r2, [r4, #12]
 800950c:	f012 0301 	ands.w	r3, r2, #1
 8009510:	d00c      	beq.n	800952c <__swsetup_r+0xbc>
 8009512:	2300      	movs	r3, #0
 8009514:	60a3      	str	r3, [r4, #8]
 8009516:	6963      	ldr	r3, [r4, #20]
 8009518:	425b      	negs	r3, r3
 800951a:	61a3      	str	r3, [r4, #24]
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	b953      	cbnz	r3, 8009536 <__swsetup_r+0xc6>
 8009520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009524:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009528:	d1ba      	bne.n	80094a0 <__swsetup_r+0x30>
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	0792      	lsls	r2, r2, #30
 800952e:	bf58      	it	pl
 8009530:	6963      	ldrpl	r3, [r4, #20]
 8009532:	60a3      	str	r3, [r4, #8]
 8009534:	e7f2      	b.n	800951c <__swsetup_r+0xac>
 8009536:	2000      	movs	r0, #0
 8009538:	e7f7      	b.n	800952a <__swsetup_r+0xba>
 800953a:	bf00      	nop
 800953c:	20000b64 	.word	0x20000b64
 8009540:	0800a724 	.word	0x0800a724
 8009544:	0800a744 	.word	0x0800a744
 8009548:	0800a704 	.word	0x0800a704

0800954c <__sflush_r>:
 800954c:	898a      	ldrh	r2, [r1, #12]
 800954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	4605      	mov	r5, r0
 8009554:	0710      	lsls	r0, r2, #28
 8009556:	460c      	mov	r4, r1
 8009558:	d458      	bmi.n	800960c <__sflush_r+0xc0>
 800955a:	684b      	ldr	r3, [r1, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	dc05      	bgt.n	800956c <__sflush_r+0x20>
 8009560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	dc02      	bgt.n	800956c <__sflush_r+0x20>
 8009566:	2000      	movs	r0, #0
 8009568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956e:	2e00      	cmp	r6, #0
 8009570:	d0f9      	beq.n	8009566 <__sflush_r+0x1a>
 8009572:	2300      	movs	r3, #0
 8009574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009578:	682f      	ldr	r7, [r5, #0]
 800957a:	6a21      	ldr	r1, [r4, #32]
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	d032      	beq.n	80095e6 <__sflush_r+0x9a>
 8009580:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	075a      	lsls	r2, r3, #29
 8009586:	d505      	bpl.n	8009594 <__sflush_r+0x48>
 8009588:	6863      	ldr	r3, [r4, #4]
 800958a:	1ac0      	subs	r0, r0, r3
 800958c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800958e:	b10b      	cbz	r3, 8009594 <__sflush_r+0x48>
 8009590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009592:	1ac0      	subs	r0, r0, r3
 8009594:	2300      	movs	r3, #0
 8009596:	4602      	mov	r2, r0
 8009598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800959a:	6a21      	ldr	r1, [r4, #32]
 800959c:	4628      	mov	r0, r5
 800959e:	47b0      	blx	r6
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	d106      	bne.n	80095b4 <__sflush_r+0x68>
 80095a6:	6829      	ldr	r1, [r5, #0]
 80095a8:	291d      	cmp	r1, #29
 80095aa:	d848      	bhi.n	800963e <__sflush_r+0xf2>
 80095ac:	4a29      	ldr	r2, [pc, #164]	; (8009654 <__sflush_r+0x108>)
 80095ae:	40ca      	lsrs	r2, r1
 80095b0:	07d6      	lsls	r6, r2, #31
 80095b2:	d544      	bpl.n	800963e <__sflush_r+0xf2>
 80095b4:	2200      	movs	r2, #0
 80095b6:	6062      	str	r2, [r4, #4]
 80095b8:	04d9      	lsls	r1, r3, #19
 80095ba:	6922      	ldr	r2, [r4, #16]
 80095bc:	6022      	str	r2, [r4, #0]
 80095be:	d504      	bpl.n	80095ca <__sflush_r+0x7e>
 80095c0:	1c42      	adds	r2, r0, #1
 80095c2:	d101      	bne.n	80095c8 <__sflush_r+0x7c>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b903      	cbnz	r3, 80095ca <__sflush_r+0x7e>
 80095c8:	6560      	str	r0, [r4, #84]	; 0x54
 80095ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095cc:	602f      	str	r7, [r5, #0]
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d0c9      	beq.n	8009566 <__sflush_r+0x1a>
 80095d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d6:	4299      	cmp	r1, r3
 80095d8:	d002      	beq.n	80095e0 <__sflush_r+0x94>
 80095da:	4628      	mov	r0, r5
 80095dc:	f000 f994 	bl	8009908 <_free_r>
 80095e0:	2000      	movs	r0, #0
 80095e2:	6360      	str	r0, [r4, #52]	; 0x34
 80095e4:	e7c0      	b.n	8009568 <__sflush_r+0x1c>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4628      	mov	r0, r5
 80095ea:	47b0      	blx	r6
 80095ec:	1c41      	adds	r1, r0, #1
 80095ee:	d1c8      	bne.n	8009582 <__sflush_r+0x36>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0c5      	beq.n	8009582 <__sflush_r+0x36>
 80095f6:	2b1d      	cmp	r3, #29
 80095f8:	d001      	beq.n	80095fe <__sflush_r+0xb2>
 80095fa:	2b16      	cmp	r3, #22
 80095fc:	d101      	bne.n	8009602 <__sflush_r+0xb6>
 80095fe:	602f      	str	r7, [r5, #0]
 8009600:	e7b1      	b.n	8009566 <__sflush_r+0x1a>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	e7ad      	b.n	8009568 <__sflush_r+0x1c>
 800960c:	690f      	ldr	r7, [r1, #16]
 800960e:	2f00      	cmp	r7, #0
 8009610:	d0a9      	beq.n	8009566 <__sflush_r+0x1a>
 8009612:	0793      	lsls	r3, r2, #30
 8009614:	680e      	ldr	r6, [r1, #0]
 8009616:	bf08      	it	eq
 8009618:	694b      	ldreq	r3, [r1, #20]
 800961a:	600f      	str	r7, [r1, #0]
 800961c:	bf18      	it	ne
 800961e:	2300      	movne	r3, #0
 8009620:	eba6 0807 	sub.w	r8, r6, r7
 8009624:	608b      	str	r3, [r1, #8]
 8009626:	f1b8 0f00 	cmp.w	r8, #0
 800962a:	dd9c      	ble.n	8009566 <__sflush_r+0x1a>
 800962c:	4643      	mov	r3, r8
 800962e:	463a      	mov	r2, r7
 8009630:	6a21      	ldr	r1, [r4, #32]
 8009632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009634:	4628      	mov	r0, r5
 8009636:	47b0      	blx	r6
 8009638:	2800      	cmp	r0, #0
 800963a:	dc06      	bgt.n	800964a <__sflush_r+0xfe>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009648:	e78e      	b.n	8009568 <__sflush_r+0x1c>
 800964a:	4407      	add	r7, r0
 800964c:	eba8 0800 	sub.w	r8, r8, r0
 8009650:	e7e9      	b.n	8009626 <__sflush_r+0xda>
 8009652:	bf00      	nop
 8009654:	20400001 	.word	0x20400001

08009658 <_fflush_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	690b      	ldr	r3, [r1, #16]
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b1db      	cbz	r3, 800969a <_fflush_r+0x42>
 8009662:	b118      	cbz	r0, 800966c <_fflush_r+0x14>
 8009664:	6983      	ldr	r3, [r0, #24]
 8009666:	b90b      	cbnz	r3, 800966c <_fflush_r+0x14>
 8009668:	f000 f860 	bl	800972c <__sinit>
 800966c:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <_fflush_r+0x48>)
 800966e:	429c      	cmp	r4, r3
 8009670:	d109      	bne.n	8009686 <_fflush_r+0x2e>
 8009672:	686c      	ldr	r4, [r5, #4]
 8009674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009678:	b17b      	cbz	r3, 800969a <_fflush_r+0x42>
 800967a:	4621      	mov	r1, r4
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009682:	f7ff bf63 	b.w	800954c <__sflush_r>
 8009686:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <_fflush_r+0x4c>)
 8009688:	429c      	cmp	r4, r3
 800968a:	d101      	bne.n	8009690 <_fflush_r+0x38>
 800968c:	68ac      	ldr	r4, [r5, #8]
 800968e:	e7f1      	b.n	8009674 <_fflush_r+0x1c>
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <_fflush_r+0x50>)
 8009692:	429c      	cmp	r4, r3
 8009694:	bf08      	it	eq
 8009696:	68ec      	ldreq	r4, [r5, #12]
 8009698:	e7ec      	b.n	8009674 <_fflush_r+0x1c>
 800969a:	2000      	movs	r0, #0
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	0800a724 	.word	0x0800a724
 80096a4:	0800a744 	.word	0x0800a744
 80096a8:	0800a704 	.word	0x0800a704

080096ac <std>:
 80096ac:	2300      	movs	r3, #0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
 80096b2:	e9c0 3300 	strd	r3, r3, [r0]
 80096b6:	6083      	str	r3, [r0, #8]
 80096b8:	8181      	strh	r1, [r0, #12]
 80096ba:	6643      	str	r3, [r0, #100]	; 0x64
 80096bc:	81c2      	strh	r2, [r0, #14]
 80096be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c2:	6183      	str	r3, [r0, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	2208      	movs	r2, #8
 80096c8:	305c      	adds	r0, #92	; 0x5c
 80096ca:	f7ff fddf 	bl	800928c <memset>
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x38>)
 80096d0:	6263      	str	r3, [r4, #36]	; 0x24
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x3c>)
 80096d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x40>)
 80096d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x44>)
 80096dc:	6224      	str	r4, [r4, #32]
 80096de:	6323      	str	r3, [r4, #48]	; 0x30
 80096e0:	bd10      	pop	{r4, pc}
 80096e2:	bf00      	nop
 80096e4:	0800a02d 	.word	0x0800a02d
 80096e8:	0800a04f 	.word	0x0800a04f
 80096ec:	0800a087 	.word	0x0800a087
 80096f0:	0800a0ab 	.word	0x0800a0ab

080096f4 <_cleanup_r>:
 80096f4:	4901      	ldr	r1, [pc, #4]	; (80096fc <_cleanup_r+0x8>)
 80096f6:	f000 b885 	b.w	8009804 <_fwalk_reent>
 80096fa:	bf00      	nop
 80096fc:	08009659 	.word	0x08009659

08009700 <__sfmoreglue>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	1e4a      	subs	r2, r1, #1
 8009704:	2568      	movs	r5, #104	; 0x68
 8009706:	4355      	muls	r5, r2
 8009708:	460e      	mov	r6, r1
 800970a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970e:	f000 f949 	bl	80099a4 <_malloc_r>
 8009712:	4604      	mov	r4, r0
 8009714:	b140      	cbz	r0, 8009728 <__sfmoreglue+0x28>
 8009716:	2100      	movs	r1, #0
 8009718:	e9c0 1600 	strd	r1, r6, [r0]
 800971c:	300c      	adds	r0, #12
 800971e:	60a0      	str	r0, [r4, #8]
 8009720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009724:	f7ff fdb2 	bl	800928c <memset>
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}

0800972c <__sinit>:
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	b510      	push	{r4, lr}
 8009730:	4604      	mov	r4, r0
 8009732:	bb33      	cbnz	r3, 8009782 <__sinit+0x56>
 8009734:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009738:	6503      	str	r3, [r0, #80]	; 0x50
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <__sinit+0x58>)
 800973c:	4a12      	ldr	r2, [pc, #72]	; (8009788 <__sinit+0x5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6282      	str	r2, [r0, #40]	; 0x28
 8009742:	4298      	cmp	r0, r3
 8009744:	bf04      	itt	eq
 8009746:	2301      	moveq	r3, #1
 8009748:	6183      	streq	r3, [r0, #24]
 800974a:	f000 f81f 	bl	800978c <__sfp>
 800974e:	6060      	str	r0, [r4, #4]
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f81b 	bl	800978c <__sfp>
 8009756:	60a0      	str	r0, [r4, #8]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f817 	bl	800978c <__sfp>
 800975e:	2200      	movs	r2, #0
 8009760:	60e0      	str	r0, [r4, #12]
 8009762:	2104      	movs	r1, #4
 8009764:	6860      	ldr	r0, [r4, #4]
 8009766:	f7ff ffa1 	bl	80096ac <std>
 800976a:	2201      	movs	r2, #1
 800976c:	2109      	movs	r1, #9
 800976e:	68a0      	ldr	r0, [r4, #8]
 8009770:	f7ff ff9c 	bl	80096ac <std>
 8009774:	2202      	movs	r2, #2
 8009776:	2112      	movs	r1, #18
 8009778:	68e0      	ldr	r0, [r4, #12]
 800977a:	f7ff ff97 	bl	80096ac <std>
 800977e:	2301      	movs	r3, #1
 8009780:	61a3      	str	r3, [r4, #24]
 8009782:	bd10      	pop	{r4, pc}
 8009784:	0800a700 	.word	0x0800a700
 8009788:	080096f5 	.word	0x080096f5

0800978c <__sfp>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <__sfp+0x70>)
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	69b3      	ldr	r3, [r6, #24]
 8009794:	4607      	mov	r7, r0
 8009796:	b913      	cbnz	r3, 800979e <__sfp+0x12>
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff ffc7 	bl	800972c <__sinit>
 800979e:	3648      	adds	r6, #72	; 0x48
 80097a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	d503      	bpl.n	80097b0 <__sfp+0x24>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	b133      	cbz	r3, 80097ba <__sfp+0x2e>
 80097ac:	6836      	ldr	r6, [r6, #0]
 80097ae:	e7f7      	b.n	80097a0 <__sfp+0x14>
 80097b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097b4:	b16d      	cbz	r5, 80097d2 <__sfp+0x46>
 80097b6:	3468      	adds	r4, #104	; 0x68
 80097b8:	e7f4      	b.n	80097a4 <__sfp+0x18>
 80097ba:	2104      	movs	r1, #4
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff ff9f 	bl	8009700 <__sfmoreglue>
 80097c2:	6030      	str	r0, [r6, #0]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f1      	bne.n	80097ac <__sfp+0x20>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4604      	mov	r4, r0
 80097ce:	4620      	mov	r0, r4
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <__sfp+0x74>)
 80097d4:	6665      	str	r5, [r4, #100]	; 0x64
 80097d6:	e9c4 5500 	strd	r5, r5, [r4]
 80097da:	60a5      	str	r5, [r4, #8]
 80097dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80097e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80097e4:	2208      	movs	r2, #8
 80097e6:	4629      	mov	r1, r5
 80097e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097ec:	f7ff fd4e 	bl	800928c <memset>
 80097f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097f8:	e7e9      	b.n	80097ce <__sfp+0x42>
 80097fa:	bf00      	nop
 80097fc:	0800a700 	.word	0x0800a700
 8009800:	ffff0001 	.word	0xffff0001

08009804 <_fwalk_reent>:
 8009804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009808:	4680      	mov	r8, r0
 800980a:	4689      	mov	r9, r1
 800980c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009810:	2600      	movs	r6, #0
 8009812:	b914      	cbnz	r4, 800981a <_fwalk_reent+0x16>
 8009814:	4630      	mov	r0, r6
 8009816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800981e:	3f01      	subs	r7, #1
 8009820:	d501      	bpl.n	8009826 <_fwalk_reent+0x22>
 8009822:	6824      	ldr	r4, [r4, #0]
 8009824:	e7f5      	b.n	8009812 <_fwalk_reent+0xe>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d907      	bls.n	800983c <_fwalk_reent+0x38>
 800982c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009830:	3301      	adds	r3, #1
 8009832:	d003      	beq.n	800983c <_fwalk_reent+0x38>
 8009834:	4629      	mov	r1, r5
 8009836:	4640      	mov	r0, r8
 8009838:	47c8      	blx	r9
 800983a:	4306      	orrs	r6, r0
 800983c:	3568      	adds	r5, #104	; 0x68
 800983e:	e7ee      	b.n	800981e <_fwalk_reent+0x1a>

08009840 <__swhatbuf_r>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	460e      	mov	r6, r1
 8009844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009848:	2900      	cmp	r1, #0
 800984a:	b096      	sub	sp, #88	; 0x58
 800984c:	4614      	mov	r4, r2
 800984e:	461d      	mov	r5, r3
 8009850:	da07      	bge.n	8009862 <__swhatbuf_r+0x22>
 8009852:	2300      	movs	r3, #0
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	89b3      	ldrh	r3, [r6, #12]
 8009858:	061a      	lsls	r2, r3, #24
 800985a:	d410      	bmi.n	800987e <__swhatbuf_r+0x3e>
 800985c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009860:	e00e      	b.n	8009880 <__swhatbuf_r+0x40>
 8009862:	466a      	mov	r2, sp
 8009864:	f000 fc48 	bl	800a0f8 <_fstat_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	dbf2      	blt.n	8009852 <__swhatbuf_r+0x12>
 800986c:	9a01      	ldr	r2, [sp, #4]
 800986e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009876:	425a      	negs	r2, r3
 8009878:	415a      	adcs	r2, r3
 800987a:	602a      	str	r2, [r5, #0]
 800987c:	e7ee      	b.n	800985c <__swhatbuf_r+0x1c>
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	2000      	movs	r0, #0
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	b016      	add	sp, #88	; 0x58
 8009886:	bd70      	pop	{r4, r5, r6, pc}

08009888 <__smakebuf_r>:
 8009888:	898b      	ldrh	r3, [r1, #12]
 800988a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800988c:	079d      	lsls	r5, r3, #30
 800988e:	4606      	mov	r6, r0
 8009890:	460c      	mov	r4, r1
 8009892:	d507      	bpl.n	80098a4 <__smakebuf_r+0x1c>
 8009894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	6123      	str	r3, [r4, #16]
 800989c:	2301      	movs	r3, #1
 800989e:	6163      	str	r3, [r4, #20]
 80098a0:	b002      	add	sp, #8
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	ab01      	add	r3, sp, #4
 80098a6:	466a      	mov	r2, sp
 80098a8:	f7ff ffca 	bl	8009840 <__swhatbuf_r>
 80098ac:	9900      	ldr	r1, [sp, #0]
 80098ae:	4605      	mov	r5, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 f877 	bl	80099a4 <_malloc_r>
 80098b6:	b948      	cbnz	r0, 80098cc <__smakebuf_r+0x44>
 80098b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098bc:	059a      	lsls	r2, r3, #22
 80098be:	d4ef      	bmi.n	80098a0 <__smakebuf_r+0x18>
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	f043 0302 	orr.w	r3, r3, #2
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	e7e3      	b.n	8009894 <__smakebuf_r+0xc>
 80098cc:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <__smakebuf_r+0x7c>)
 80098ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	6020      	str	r0, [r4, #0]
 80098d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	6163      	str	r3, [r4, #20]
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	6120      	str	r0, [r4, #16]
 80098e2:	b15b      	cbz	r3, 80098fc <__smakebuf_r+0x74>
 80098e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 fc17 	bl	800a11c <_isatty_r>
 80098ee:	b128      	cbz	r0, 80098fc <__smakebuf_r+0x74>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	81a3      	strh	r3, [r4, #12]
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	431d      	orrs	r5, r3
 8009900:	81a5      	strh	r5, [r4, #12]
 8009902:	e7cd      	b.n	80098a0 <__smakebuf_r+0x18>
 8009904:	080096f5 	.word	0x080096f5

08009908 <_free_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4605      	mov	r5, r0
 800990c:	2900      	cmp	r1, #0
 800990e:	d045      	beq.n	800999c <_free_r+0x94>
 8009910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009914:	1f0c      	subs	r4, r1, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfb8      	it	lt
 800991a:	18e4      	addlt	r4, r4, r3
 800991c:	f000 fc44 	bl	800a1a8 <__malloc_lock>
 8009920:	4a1f      	ldr	r2, [pc, #124]	; (80099a0 <_free_r+0x98>)
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	4610      	mov	r0, r2
 8009926:	b933      	cbnz	r3, 8009936 <_free_r+0x2e>
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	6014      	str	r4, [r2, #0]
 800992c:	4628      	mov	r0, r5
 800992e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009932:	f000 bc3a 	b.w	800a1aa <__malloc_unlock>
 8009936:	42a3      	cmp	r3, r4
 8009938:	d90c      	bls.n	8009954 <_free_r+0x4c>
 800993a:	6821      	ldr	r1, [r4, #0]
 800993c:	1862      	adds	r2, r4, r1
 800993e:	4293      	cmp	r3, r2
 8009940:	bf04      	itt	eq
 8009942:	681a      	ldreq	r2, [r3, #0]
 8009944:	685b      	ldreq	r3, [r3, #4]
 8009946:	6063      	str	r3, [r4, #4]
 8009948:	bf04      	itt	eq
 800994a:	1852      	addeq	r2, r2, r1
 800994c:	6022      	streq	r2, [r4, #0]
 800994e:	6004      	str	r4, [r0, #0]
 8009950:	e7ec      	b.n	800992c <_free_r+0x24>
 8009952:	4613      	mov	r3, r2
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	b10a      	cbz	r2, 800995c <_free_r+0x54>
 8009958:	42a2      	cmp	r2, r4
 800995a:	d9fa      	bls.n	8009952 <_free_r+0x4a>
 800995c:	6819      	ldr	r1, [r3, #0]
 800995e:	1858      	adds	r0, r3, r1
 8009960:	42a0      	cmp	r0, r4
 8009962:	d10b      	bne.n	800997c <_free_r+0x74>
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	4401      	add	r1, r0
 8009968:	1858      	adds	r0, r3, r1
 800996a:	4282      	cmp	r2, r0
 800996c:	6019      	str	r1, [r3, #0]
 800996e:	d1dd      	bne.n	800992c <_free_r+0x24>
 8009970:	6810      	ldr	r0, [r2, #0]
 8009972:	6852      	ldr	r2, [r2, #4]
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	4401      	add	r1, r0
 8009978:	6019      	str	r1, [r3, #0]
 800997a:	e7d7      	b.n	800992c <_free_r+0x24>
 800997c:	d902      	bls.n	8009984 <_free_r+0x7c>
 800997e:	230c      	movs	r3, #12
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	e7d3      	b.n	800992c <_free_r+0x24>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	1821      	adds	r1, r4, r0
 8009988:	428a      	cmp	r2, r1
 800998a:	bf04      	itt	eq
 800998c:	6811      	ldreq	r1, [r2, #0]
 800998e:	6852      	ldreq	r2, [r2, #4]
 8009990:	6062      	str	r2, [r4, #4]
 8009992:	bf04      	itt	eq
 8009994:	1809      	addeq	r1, r1, r0
 8009996:	6021      	streq	r1, [r4, #0]
 8009998:	605c      	str	r4, [r3, #4]
 800999a:	e7c7      	b.n	800992c <_free_r+0x24>
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	bf00      	nop
 80099a0:	20000c00 	.word	0x20000c00

080099a4 <_malloc_r>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	1ccd      	adds	r5, r1, #3
 80099a8:	f025 0503 	bic.w	r5, r5, #3
 80099ac:	3508      	adds	r5, #8
 80099ae:	2d0c      	cmp	r5, #12
 80099b0:	bf38      	it	cc
 80099b2:	250c      	movcc	r5, #12
 80099b4:	2d00      	cmp	r5, #0
 80099b6:	4606      	mov	r6, r0
 80099b8:	db01      	blt.n	80099be <_malloc_r+0x1a>
 80099ba:	42a9      	cmp	r1, r5
 80099bc:	d903      	bls.n	80099c6 <_malloc_r+0x22>
 80099be:	230c      	movs	r3, #12
 80099c0:	6033      	str	r3, [r6, #0]
 80099c2:	2000      	movs	r0, #0
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	f000 fbef 	bl	800a1a8 <__malloc_lock>
 80099ca:	4a21      	ldr	r2, [pc, #132]	; (8009a50 <_malloc_r+0xac>)
 80099cc:	6814      	ldr	r4, [r2, #0]
 80099ce:	4621      	mov	r1, r4
 80099d0:	b991      	cbnz	r1, 80099f8 <_malloc_r+0x54>
 80099d2:	4c20      	ldr	r4, [pc, #128]	; (8009a54 <_malloc_r+0xb0>)
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	b91b      	cbnz	r3, 80099e0 <_malloc_r+0x3c>
 80099d8:	4630      	mov	r0, r6
 80099da:	f000 fb17 	bl	800a00c <_sbrk_r>
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	4629      	mov	r1, r5
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 fb12 	bl	800a00c <_sbrk_r>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d124      	bne.n	8009a36 <_malloc_r+0x92>
 80099ec:	230c      	movs	r3, #12
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 fbda 	bl	800a1aa <__malloc_unlock>
 80099f6:	e7e4      	b.n	80099c2 <_malloc_r+0x1e>
 80099f8:	680b      	ldr	r3, [r1, #0]
 80099fa:	1b5b      	subs	r3, r3, r5
 80099fc:	d418      	bmi.n	8009a30 <_malloc_r+0x8c>
 80099fe:	2b0b      	cmp	r3, #11
 8009a00:	d90f      	bls.n	8009a22 <_malloc_r+0x7e>
 8009a02:	600b      	str	r3, [r1, #0]
 8009a04:	50cd      	str	r5, [r1, r3]
 8009a06:	18cc      	adds	r4, r1, r3
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 fbce 	bl	800a1aa <__malloc_unlock>
 8009a0e:	f104 000b 	add.w	r0, r4, #11
 8009a12:	1d23      	adds	r3, r4, #4
 8009a14:	f020 0007 	bic.w	r0, r0, #7
 8009a18:	1ac3      	subs	r3, r0, r3
 8009a1a:	d0d3      	beq.n	80099c4 <_malloc_r+0x20>
 8009a1c:	425a      	negs	r2, r3
 8009a1e:	50e2      	str	r2, [r4, r3]
 8009a20:	e7d0      	b.n	80099c4 <_malloc_r+0x20>
 8009a22:	428c      	cmp	r4, r1
 8009a24:	684b      	ldr	r3, [r1, #4]
 8009a26:	bf16      	itet	ne
 8009a28:	6063      	strne	r3, [r4, #4]
 8009a2a:	6013      	streq	r3, [r2, #0]
 8009a2c:	460c      	movne	r4, r1
 8009a2e:	e7eb      	b.n	8009a08 <_malloc_r+0x64>
 8009a30:	460c      	mov	r4, r1
 8009a32:	6849      	ldr	r1, [r1, #4]
 8009a34:	e7cc      	b.n	80099d0 <_malloc_r+0x2c>
 8009a36:	1cc4      	adds	r4, r0, #3
 8009a38:	f024 0403 	bic.w	r4, r4, #3
 8009a3c:	42a0      	cmp	r0, r4
 8009a3e:	d005      	beq.n	8009a4c <_malloc_r+0xa8>
 8009a40:	1a21      	subs	r1, r4, r0
 8009a42:	4630      	mov	r0, r6
 8009a44:	f000 fae2 	bl	800a00c <_sbrk_r>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d0cf      	beq.n	80099ec <_malloc_r+0x48>
 8009a4c:	6025      	str	r5, [r4, #0]
 8009a4e:	e7db      	b.n	8009a08 <_malloc_r+0x64>
 8009a50:	20000c00 	.word	0x20000c00
 8009a54:	20000c04 	.word	0x20000c04

08009a58 <__ssputs_r>:
 8009a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a5c:	688e      	ldr	r6, [r1, #8]
 8009a5e:	429e      	cmp	r6, r3
 8009a60:	4682      	mov	sl, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4690      	mov	r8, r2
 8009a66:	4699      	mov	r9, r3
 8009a68:	d837      	bhi.n	8009ada <__ssputs_r+0x82>
 8009a6a:	898a      	ldrh	r2, [r1, #12]
 8009a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a70:	d031      	beq.n	8009ad6 <__ssputs_r+0x7e>
 8009a72:	6825      	ldr	r5, [r4, #0]
 8009a74:	6909      	ldr	r1, [r1, #16]
 8009a76:	1a6f      	subs	r7, r5, r1
 8009a78:	6965      	ldr	r5, [r4, #20]
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a80:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a84:	f109 0301 	add.w	r3, r9, #1
 8009a88:	443b      	add	r3, r7
 8009a8a:	429d      	cmp	r5, r3
 8009a8c:	bf38      	it	cc
 8009a8e:	461d      	movcc	r5, r3
 8009a90:	0553      	lsls	r3, r2, #21
 8009a92:	d530      	bpl.n	8009af6 <__ssputs_r+0x9e>
 8009a94:	4629      	mov	r1, r5
 8009a96:	f7ff ff85 	bl	80099a4 <_malloc_r>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	b950      	cbnz	r0, 8009ab4 <__ssputs_r+0x5c>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	f8ca 3000 	str.w	r3, [sl]
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab4:	463a      	mov	r2, r7
 8009ab6:	6921      	ldr	r1, [r4, #16]
 8009ab8:	f000 fb52 	bl	800a160 <memcpy>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	6126      	str	r6, [r4, #16]
 8009aca:	6165      	str	r5, [r4, #20]
 8009acc:	443e      	add	r6, r7
 8009ace:	1bed      	subs	r5, r5, r7
 8009ad0:	6026      	str	r6, [r4, #0]
 8009ad2:	60a5      	str	r5, [r4, #8]
 8009ad4:	464e      	mov	r6, r9
 8009ad6:	454e      	cmp	r6, r9
 8009ad8:	d900      	bls.n	8009adc <__ssputs_r+0x84>
 8009ada:	464e      	mov	r6, r9
 8009adc:	4632      	mov	r2, r6
 8009ade:	4641      	mov	r1, r8
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	f000 fb48 	bl	800a176 <memmove>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	1b9b      	subs	r3, r3, r6
 8009aea:	60a3      	str	r3, [r4, #8]
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	441e      	add	r6, r3
 8009af0:	6026      	str	r6, [r4, #0]
 8009af2:	2000      	movs	r0, #0
 8009af4:	e7dc      	b.n	8009ab0 <__ssputs_r+0x58>
 8009af6:	462a      	mov	r2, r5
 8009af8:	f000 fb58 	bl	800a1ac <_realloc_r>
 8009afc:	4606      	mov	r6, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d1e2      	bne.n	8009ac8 <__ssputs_r+0x70>
 8009b02:	6921      	ldr	r1, [r4, #16]
 8009b04:	4650      	mov	r0, sl
 8009b06:	f7ff feff 	bl	8009908 <_free_r>
 8009b0a:	e7c8      	b.n	8009a9e <__ssputs_r+0x46>

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	461d      	mov	r5, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	061f      	lsls	r7, r3, #24
 8009b16:	b09d      	sub	sp, #116	; 0x74
 8009b18:	4680      	mov	r8, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	d50f      	bpl.n	8009b40 <_svfiprintf_r+0x34>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b96b      	cbnz	r3, 8009b40 <_svfiprintf_r+0x34>
 8009b24:	2140      	movs	r1, #64	; 0x40
 8009b26:	f7ff ff3d 	bl	80099a4 <_malloc_r>
 8009b2a:	6020      	str	r0, [r4, #0]
 8009b2c:	6120      	str	r0, [r4, #16]
 8009b2e:	b928      	cbnz	r0, 8009b3c <_svfiprintf_r+0x30>
 8009b30:	230c      	movs	r3, #12
 8009b32:	f8c8 3000 	str.w	r3, [r8]
 8009b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3a:	e0c8      	b.n	8009cce <_svfiprintf_r+0x1c2>
 8009b3c:	2340      	movs	r3, #64	; 0x40
 8009b3e:	6163      	str	r3, [r4, #20]
 8009b40:	2300      	movs	r3, #0
 8009b42:	9309      	str	r3, [sp, #36]	; 0x24
 8009b44:	2320      	movs	r3, #32
 8009b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b4a:	2330      	movs	r3, #48	; 0x30
 8009b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b50:	9503      	str	r5, [sp, #12]
 8009b52:	f04f 0b01 	mov.w	fp, #1
 8009b56:	4637      	mov	r7, r6
 8009b58:	463d      	mov	r5, r7
 8009b5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b5e:	b10b      	cbz	r3, 8009b64 <_svfiprintf_r+0x58>
 8009b60:	2b25      	cmp	r3, #37	; 0x25
 8009b62:	d13e      	bne.n	8009be2 <_svfiprintf_r+0xd6>
 8009b64:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b68:	d00b      	beq.n	8009b82 <_svfiprintf_r+0x76>
 8009b6a:	4653      	mov	r3, sl
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4640      	mov	r0, r8
 8009b72:	f7ff ff71 	bl	8009a58 <__ssputs_r>
 8009b76:	3001      	adds	r0, #1
 8009b78:	f000 80a4 	beq.w	8009cc4 <_svfiprintf_r+0x1b8>
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	4453      	add	r3, sl
 8009b80:	9309      	str	r3, [sp, #36]	; 0x24
 8009b82:	783b      	ldrb	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 809d 	beq.w	8009cc4 <_svfiprintf_r+0x1b8>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9e:	462f      	mov	r7, r5
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ba6:	4850      	ldr	r0, [pc, #320]	; (8009ce8 <_svfiprintf_r+0x1dc>)
 8009ba8:	f7f6 fb3a 	bl	8000220 <memchr>
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	b9d0      	cbnz	r0, 8009be6 <_svfiprintf_r+0xda>
 8009bb0:	06d9      	lsls	r1, r3, #27
 8009bb2:	bf44      	itt	mi
 8009bb4:	2220      	movmi	r2, #32
 8009bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bba:	071a      	lsls	r2, r3, #28
 8009bbc:	bf44      	itt	mi
 8009bbe:	222b      	movmi	r2, #43	; 0x2b
 8009bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bc4:	782a      	ldrb	r2, [r5, #0]
 8009bc6:	2a2a      	cmp	r2, #42	; 0x2a
 8009bc8:	d015      	beq.n	8009bf6 <_svfiprintf_r+0xea>
 8009bca:	9a07      	ldr	r2, [sp, #28]
 8009bcc:	462f      	mov	r7, r5
 8009bce:	2000      	movs	r0, #0
 8009bd0:	250a      	movs	r5, #10
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd8:	3b30      	subs	r3, #48	; 0x30
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d94d      	bls.n	8009c7a <_svfiprintf_r+0x16e>
 8009bde:	b1b8      	cbz	r0, 8009c10 <_svfiprintf_r+0x104>
 8009be0:	e00f      	b.n	8009c02 <_svfiprintf_r+0xf6>
 8009be2:	462f      	mov	r7, r5
 8009be4:	e7b8      	b.n	8009b58 <_svfiprintf_r+0x4c>
 8009be6:	4a40      	ldr	r2, [pc, #256]	; (8009ce8 <_svfiprintf_r+0x1dc>)
 8009be8:	1a80      	subs	r0, r0, r2
 8009bea:	fa0b f000 	lsl.w	r0, fp, r0
 8009bee:	4318      	orrs	r0, r3
 8009bf0:	9004      	str	r0, [sp, #16]
 8009bf2:	463d      	mov	r5, r7
 8009bf4:	e7d3      	b.n	8009b9e <_svfiprintf_r+0x92>
 8009bf6:	9a03      	ldr	r2, [sp, #12]
 8009bf8:	1d11      	adds	r1, r2, #4
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	9103      	str	r1, [sp, #12]
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	db01      	blt.n	8009c06 <_svfiprintf_r+0xfa>
 8009c02:	9207      	str	r2, [sp, #28]
 8009c04:	e004      	b.n	8009c10 <_svfiprintf_r+0x104>
 8009c06:	4252      	negs	r2, r2
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	9207      	str	r2, [sp, #28]
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	783b      	ldrb	r3, [r7, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d10c      	bne.n	8009c30 <_svfiprintf_r+0x124>
 8009c16:	787b      	ldrb	r3, [r7, #1]
 8009c18:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1a:	d133      	bne.n	8009c84 <_svfiprintf_r+0x178>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb8      	it	lt
 8009c28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c2c:	3702      	adds	r7, #2
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	4d2e      	ldr	r5, [pc, #184]	; (8009cec <_svfiprintf_r+0x1e0>)
 8009c32:	7839      	ldrb	r1, [r7, #0]
 8009c34:	2203      	movs	r2, #3
 8009c36:	4628      	mov	r0, r5
 8009c38:	f7f6 faf2 	bl	8000220 <memchr>
 8009c3c:	b138      	cbz	r0, 8009c4e <_svfiprintf_r+0x142>
 8009c3e:	2340      	movs	r3, #64	; 0x40
 8009c40:	1b40      	subs	r0, r0, r5
 8009c42:	fa03 f000 	lsl.w	r0, r3, r0
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	4303      	orrs	r3, r0
 8009c4a:	3701      	adds	r7, #1
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	7839      	ldrb	r1, [r7, #0]
 8009c50:	4827      	ldr	r0, [pc, #156]	; (8009cf0 <_svfiprintf_r+0x1e4>)
 8009c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c56:	2206      	movs	r2, #6
 8009c58:	1c7e      	adds	r6, r7, #1
 8009c5a:	f7f6 fae1 	bl	8000220 <memchr>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d038      	beq.n	8009cd4 <_svfiprintf_r+0x1c8>
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <_svfiprintf_r+0x1e8>)
 8009c64:	bb13      	cbnz	r3, 8009cac <_svfiprintf_r+0x1a0>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	3307      	adds	r3, #7
 8009c6a:	f023 0307 	bic.w	r3, r3, #7
 8009c6e:	3308      	adds	r3, #8
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	444b      	add	r3, r9
 8009c76:	9309      	str	r3, [sp, #36]	; 0x24
 8009c78:	e76d      	b.n	8009b56 <_svfiprintf_r+0x4a>
 8009c7a:	fb05 3202 	mla	r2, r5, r2, r3
 8009c7e:	2001      	movs	r0, #1
 8009c80:	460f      	mov	r7, r1
 8009c82:	e7a6      	b.n	8009bd2 <_svfiprintf_r+0xc6>
 8009c84:	2300      	movs	r3, #0
 8009c86:	3701      	adds	r7, #1
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	250a      	movs	r5, #10
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c94:	3a30      	subs	r2, #48	; 0x30
 8009c96:	2a09      	cmp	r2, #9
 8009c98:	d903      	bls.n	8009ca2 <_svfiprintf_r+0x196>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0c8      	beq.n	8009c30 <_svfiprintf_r+0x124>
 8009c9e:	9105      	str	r1, [sp, #20]
 8009ca0:	e7c6      	b.n	8009c30 <_svfiprintf_r+0x124>
 8009ca2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4607      	mov	r7, r0
 8009caa:	e7f0      	b.n	8009c8e <_svfiprintf_r+0x182>
 8009cac:	ab03      	add	r3, sp, #12
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4b11      	ldr	r3, [pc, #68]	; (8009cf8 <_svfiprintf_r+0x1ec>)
 8009cb4:	a904      	add	r1, sp, #16
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	f3af 8000 	nop.w
 8009cbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009cc0:	4681      	mov	r9, r0
 8009cc2:	d1d6      	bne.n	8009c72 <_svfiprintf_r+0x166>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	065b      	lsls	r3, r3, #25
 8009cc8:	f53f af35 	bmi.w	8009b36 <_svfiprintf_r+0x2a>
 8009ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cce:	b01d      	add	sp, #116	; 0x74
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	ab03      	add	r3, sp, #12
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <_svfiprintf_r+0x1ec>)
 8009cdc:	a904      	add	r1, sp, #16
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f000 f882 	bl	8009de8 <_printf_i>
 8009ce4:	e7ea      	b.n	8009cbc <_svfiprintf_r+0x1b0>
 8009ce6:	bf00      	nop
 8009ce8:	0800a764 	.word	0x0800a764
 8009cec:	0800a76a 	.word	0x0800a76a
 8009cf0:	0800a76e 	.word	0x0800a76e
 8009cf4:	00000000 	.word	0x00000000
 8009cf8:	08009a59 	.word	0x08009a59

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4691      	mov	r9, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	f8c9 3000 	str.w	r3, [r9]
 8009d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	b112      	cbz	r2, 8009d26 <_printf_common+0x2a>
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c9 3000 	str.w	r3, [r9]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	0699      	lsls	r1, r3, #26
 8009d2a:	bf42      	ittt	mi
 8009d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d30:	3302      	addmi	r3, #2
 8009d32:	f8c9 3000 	strmi.w	r3, [r9]
 8009d36:	6825      	ldr	r5, [r4, #0]
 8009d38:	f015 0506 	ands.w	r5, r5, #6
 8009d3c:	d107      	bne.n	8009d4e <_printf_common+0x52>
 8009d3e:	f104 0a19 	add.w	sl, r4, #25
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	f8d9 2000 	ldr.w	r2, [r9]
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	dc28      	bgt.n	8009da0 <_printf_common+0xa4>
 8009d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	3300      	adds	r3, #0
 8009d56:	bf18      	it	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	0692      	lsls	r2, r2, #26
 8009d5c:	d42d      	bmi.n	8009dba <_printf_common+0xbe>
 8009d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d62:	4639      	mov	r1, r7
 8009d64:	4630      	mov	r0, r6
 8009d66:	47c0      	blx	r8
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d020      	beq.n	8009dae <_printf_common+0xb2>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	68e5      	ldr	r5, [r4, #12]
 8009d70:	f8d9 2000 	ldr.w	r2, [r9]
 8009d74:	f003 0306 	and.w	r3, r3, #6
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	bf08      	it	eq
 8009d7c:	1aad      	subeq	r5, r5, r2
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	bf0c      	ite	eq
 8009d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d88:	2500      	movne	r5, #0
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	bfc4      	itt	gt
 8009d8e:	1a9b      	subgt	r3, r3, r2
 8009d90:	18ed      	addgt	r5, r5, r3
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	341a      	adds	r4, #26
 8009d98:	454d      	cmp	r5, r9
 8009d9a:	d11a      	bne.n	8009dd2 <_printf_common+0xd6>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e008      	b.n	8009db2 <_printf_common+0xb6>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4652      	mov	r2, sl
 8009da4:	4639      	mov	r1, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	47c0      	blx	r8
 8009daa:	3001      	adds	r0, #1
 8009dac:	d103      	bne.n	8009db6 <_printf_common+0xba>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	3501      	adds	r5, #1
 8009db8:	e7c3      	b.n	8009d42 <_printf_common+0x46>
 8009dba:	18e1      	adds	r1, r4, r3
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	2030      	movs	r0, #48	; 0x30
 8009dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dc4:	4422      	add	r2, r4
 8009dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dce:	3302      	adds	r3, #2
 8009dd0:	e7c5      	b.n	8009d5e <_printf_common+0x62>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4630      	mov	r0, r6
 8009dda:	47c0      	blx	r8
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0e6      	beq.n	8009dae <_printf_common+0xb2>
 8009de0:	f109 0901 	add.w	r9, r9, #1
 8009de4:	e7d8      	b.n	8009d98 <_printf_common+0x9c>
	...

08009de8 <_printf_i>:
 8009de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009df0:	460c      	mov	r4, r1
 8009df2:	7e09      	ldrb	r1, [r1, #24]
 8009df4:	b085      	sub	sp, #20
 8009df6:	296e      	cmp	r1, #110	; 0x6e
 8009df8:	4617      	mov	r7, r2
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	4698      	mov	r8, r3
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e00:	f000 80b3 	beq.w	8009f6a <_printf_i+0x182>
 8009e04:	d822      	bhi.n	8009e4c <_printf_i+0x64>
 8009e06:	2963      	cmp	r1, #99	; 0x63
 8009e08:	d036      	beq.n	8009e78 <_printf_i+0x90>
 8009e0a:	d80a      	bhi.n	8009e22 <_printf_i+0x3a>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	f000 80b9 	beq.w	8009f84 <_printf_i+0x19c>
 8009e12:	2958      	cmp	r1, #88	; 0x58
 8009e14:	f000 8083 	beq.w	8009f1e <_printf_i+0x136>
 8009e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e20:	e032      	b.n	8009e88 <_printf_i+0xa0>
 8009e22:	2964      	cmp	r1, #100	; 0x64
 8009e24:	d001      	beq.n	8009e2a <_printf_i+0x42>
 8009e26:	2969      	cmp	r1, #105	; 0x69
 8009e28:	d1f6      	bne.n	8009e18 <_printf_i+0x30>
 8009e2a:	6820      	ldr	r0, [r4, #0]
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	0605      	lsls	r5, r0, #24
 8009e30:	f103 0104 	add.w	r1, r3, #4
 8009e34:	d52a      	bpl.n	8009e8c <_printf_i+0xa4>
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da03      	bge.n	8009e46 <_printf_i+0x5e>
 8009e3e:	222d      	movs	r2, #45	; 0x2d
 8009e40:	425b      	negs	r3, r3
 8009e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e46:	486f      	ldr	r0, [pc, #444]	; (800a004 <_printf_i+0x21c>)
 8009e48:	220a      	movs	r2, #10
 8009e4a:	e039      	b.n	8009ec0 <_printf_i+0xd8>
 8009e4c:	2973      	cmp	r1, #115	; 0x73
 8009e4e:	f000 809d 	beq.w	8009f8c <_printf_i+0x1a4>
 8009e52:	d808      	bhi.n	8009e66 <_printf_i+0x7e>
 8009e54:	296f      	cmp	r1, #111	; 0x6f
 8009e56:	d020      	beq.n	8009e9a <_printf_i+0xb2>
 8009e58:	2970      	cmp	r1, #112	; 0x70
 8009e5a:	d1dd      	bne.n	8009e18 <_printf_i+0x30>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	f043 0320 	orr.w	r3, r3, #32
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	e003      	b.n	8009e6e <_printf_i+0x86>
 8009e66:	2975      	cmp	r1, #117	; 0x75
 8009e68:	d017      	beq.n	8009e9a <_printf_i+0xb2>
 8009e6a:	2978      	cmp	r1, #120	; 0x78
 8009e6c:	d1d4      	bne.n	8009e18 <_printf_i+0x30>
 8009e6e:	2378      	movs	r3, #120	; 0x78
 8009e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e74:	4864      	ldr	r0, [pc, #400]	; (800a008 <_printf_i+0x220>)
 8009e76:	e055      	b.n	8009f24 <_printf_i+0x13c>
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	1d19      	adds	r1, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6011      	str	r1, [r2, #0]
 8009e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e08c      	b.n	8009fa6 <_printf_i+0x1be>
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6011      	str	r1, [r2, #0]
 8009e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e94:	bf18      	it	ne
 8009e96:	b21b      	sxthne	r3, r3
 8009e98:	e7cf      	b.n	8009e3a <_printf_i+0x52>
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	1d18      	adds	r0, r3, #4
 8009ea0:	6010      	str	r0, [r2, #0]
 8009ea2:	0628      	lsls	r0, r5, #24
 8009ea4:	d501      	bpl.n	8009eaa <_printf_i+0xc2>
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	e002      	b.n	8009eb0 <_printf_i+0xc8>
 8009eaa:	0668      	lsls	r0, r5, #25
 8009eac:	d5fb      	bpl.n	8009ea6 <_printf_i+0xbe>
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	4854      	ldr	r0, [pc, #336]	; (800a004 <_printf_i+0x21c>)
 8009eb2:	296f      	cmp	r1, #111	; 0x6f
 8009eb4:	bf14      	ite	ne
 8009eb6:	220a      	movne	r2, #10
 8009eb8:	2208      	moveq	r2, #8
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ec0:	6865      	ldr	r5, [r4, #4]
 8009ec2:	60a5      	str	r5, [r4, #8]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	f2c0 8095 	blt.w	8009ff4 <_printf_i+0x20c>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	f021 0104 	bic.w	r1, r1, #4
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d13d      	bne.n	8009f52 <_printf_i+0x16a>
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	f040 808e 	bne.w	8009ff8 <_printf_i+0x210>
 8009edc:	4665      	mov	r5, ip
 8009ede:	2a08      	cmp	r2, #8
 8009ee0:	d10b      	bne.n	8009efa <_printf_i+0x112>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	07db      	lsls	r3, r3, #31
 8009ee6:	d508      	bpl.n	8009efa <_printf_i+0x112>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bfde      	ittt	le
 8009ef0:	2330      	movle	r3, #48	; 0x30
 8009ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ef6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009efa:	ebac 0305 	sub.w	r3, ip, r5
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	f8cd 8000 	str.w	r8, [sp]
 8009f04:	463b      	mov	r3, r7
 8009f06:	aa03      	add	r2, sp, #12
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff fef6 	bl	8009cfc <_printf_common>
 8009f10:	3001      	adds	r0, #1
 8009f12:	d14d      	bne.n	8009fb0 <_printf_i+0x1c8>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f18:	b005      	add	sp, #20
 8009f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f1e:	4839      	ldr	r0, [pc, #228]	; (800a004 <_printf_i+0x21c>)
 8009f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	1d1d      	adds	r5, r3, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6015      	str	r5, [r2, #0]
 8009f2e:	060a      	lsls	r2, r1, #24
 8009f30:	d50b      	bpl.n	8009f4a <_printf_i+0x162>
 8009f32:	07ca      	lsls	r2, r1, #31
 8009f34:	bf44      	itt	mi
 8009f36:	f041 0120 	orrmi.w	r1, r1, #32
 8009f3a:	6021      	strmi	r1, [r4, #0]
 8009f3c:	b91b      	cbnz	r3, 8009f46 <_printf_i+0x15e>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	f022 0220 	bic.w	r2, r2, #32
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	2210      	movs	r2, #16
 8009f48:	e7b7      	b.n	8009eba <_printf_i+0xd2>
 8009f4a:	064d      	lsls	r5, r1, #25
 8009f4c:	bf48      	it	mi
 8009f4e:	b29b      	uxthmi	r3, r3
 8009f50:	e7ef      	b.n	8009f32 <_printf_i+0x14a>
 8009f52:	4665      	mov	r5, ip
 8009f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f58:	fb02 3311 	mls	r3, r2, r1, r3
 8009f5c:	5cc3      	ldrb	r3, [r0, r3]
 8009f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f62:	460b      	mov	r3, r1
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d1f5      	bne.n	8009f54 <_printf_i+0x16c>
 8009f68:	e7b9      	b.n	8009ede <_printf_i+0xf6>
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	6961      	ldr	r1, [r4, #20]
 8009f70:	1d18      	adds	r0, r3, #4
 8009f72:	6010      	str	r0, [r2, #0]
 8009f74:	0628      	lsls	r0, r5, #24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	d501      	bpl.n	8009f7e <_printf_i+0x196>
 8009f7a:	6019      	str	r1, [r3, #0]
 8009f7c:	e002      	b.n	8009f84 <_printf_i+0x19c>
 8009f7e:	066a      	lsls	r2, r5, #25
 8009f80:	d5fb      	bpl.n	8009f7a <_printf_i+0x192>
 8009f82:	8019      	strh	r1, [r3, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	4665      	mov	r5, ip
 8009f8a:	e7b9      	b.n	8009f00 <_printf_i+0x118>
 8009f8c:	6813      	ldr	r3, [r2, #0]
 8009f8e:	1d19      	adds	r1, r3, #4
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	681d      	ldr	r5, [r3, #0]
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	2100      	movs	r1, #0
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7f6 f941 	bl	8000220 <memchr>
 8009f9e:	b108      	cbz	r0, 8009fa4 <_printf_i+0x1bc>
 8009fa0:	1b40      	subs	r0, r0, r5
 8009fa2:	6060      	str	r0, [r4, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fae:	e7a7      	b.n	8009f00 <_printf_i+0x118>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0aa      	beq.n	8009f14 <_printf_i+0x12c>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	079b      	lsls	r3, r3, #30
 8009fc2:	d413      	bmi.n	8009fec <_printf_i+0x204>
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	bfb8      	it	lt
 8009fcc:	4618      	movlt	r0, r3
 8009fce:	e7a3      	b.n	8009f18 <_printf_i+0x130>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	464a      	mov	r2, r9
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	47c0      	blx	r8
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d09a      	beq.n	8009f14 <_printf_i+0x12c>
 8009fde:	3501      	adds	r5, #1
 8009fe0:	68e3      	ldr	r3, [r4, #12]
 8009fe2:	9a03      	ldr	r2, [sp, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	42ab      	cmp	r3, r5
 8009fe8:	dcf2      	bgt.n	8009fd0 <_printf_i+0x1e8>
 8009fea:	e7eb      	b.n	8009fc4 <_printf_i+0x1dc>
 8009fec:	2500      	movs	r5, #0
 8009fee:	f104 0919 	add.w	r9, r4, #25
 8009ff2:	e7f5      	b.n	8009fe0 <_printf_i+0x1f8>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1ac      	bne.n	8009f52 <_printf_i+0x16a>
 8009ff8:	7803      	ldrb	r3, [r0, #0]
 8009ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a002:	e76c      	b.n	8009ede <_printf_i+0xf6>
 800a004:	0800a775 	.word	0x0800a775
 800a008:	0800a786 	.word	0x0800a786

0800a00c <_sbrk_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4c06      	ldr	r4, [pc, #24]	; (800a028 <_sbrk_r+0x1c>)
 800a010:	2300      	movs	r3, #0
 800a012:	4605      	mov	r5, r0
 800a014:	4608      	mov	r0, r1
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	f7f8 faa6 	bl	8002568 <_sbrk>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_sbrk_r+0x1a>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	b103      	cbz	r3, 800a026 <_sbrk_r+0x1a>
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	20001068 	.word	0x20001068

0800a02c <__sread>:
 800a02c:	b510      	push	{r4, lr}
 800a02e:	460c      	mov	r4, r1
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	f000 f8e0 	bl	800a1f8 <_read_r>
 800a038:	2800      	cmp	r0, #0
 800a03a:	bfab      	itete	ge
 800a03c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a03e:	89a3      	ldrhlt	r3, [r4, #12]
 800a040:	181b      	addge	r3, r3, r0
 800a042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a046:	bfac      	ite	ge
 800a048:	6563      	strge	r3, [r4, #84]	; 0x54
 800a04a:	81a3      	strhlt	r3, [r4, #12]
 800a04c:	bd10      	pop	{r4, pc}

0800a04e <__swrite>:
 800a04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a052:	461f      	mov	r7, r3
 800a054:	898b      	ldrh	r3, [r1, #12]
 800a056:	05db      	lsls	r3, r3, #23
 800a058:	4605      	mov	r5, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	4616      	mov	r6, r2
 800a05e:	d505      	bpl.n	800a06c <__swrite+0x1e>
 800a060:	2302      	movs	r3, #2
 800a062:	2200      	movs	r2, #0
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 f868 	bl	800a13c <_lseek_r>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	4632      	mov	r2, r6
 800a07a:	463b      	mov	r3, r7
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a082:	f000 b817 	b.w	800a0b4 <_write_r>

0800a086 <__sseek>:
 800a086:	b510      	push	{r4, lr}
 800a088:	460c      	mov	r4, r1
 800a08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08e:	f000 f855 	bl	800a13c <_lseek_r>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	bf15      	itete	ne
 800a098:	6560      	strne	r0, [r4, #84]	; 0x54
 800a09a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a09e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0a2:	81a3      	strheq	r3, [r4, #12]
 800a0a4:	bf18      	it	ne
 800a0a6:	81a3      	strhne	r3, [r4, #12]
 800a0a8:	bd10      	pop	{r4, pc}

0800a0aa <__sclose>:
 800a0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ae:	f000 b813 	b.w	800a0d8 <_close_r>
	...

0800a0b4 <_write_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4c07      	ldr	r4, [pc, #28]	; (800a0d4 <_write_r+0x20>)
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	4608      	mov	r0, r1
 800a0bc:	4611      	mov	r1, r2
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6022      	str	r2, [r4, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f7f7 fe9b 	bl	8001dfe <_write>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_write_r+0x1e>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_write_r+0x1e>
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	20001068 	.word	0x20001068

0800a0d8 <_close_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4c06      	ldr	r4, [pc, #24]	; (800a0f4 <_close_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	f7f8 fa0b 	bl	80024fe <_close>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_close_r+0x1a>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_close_r+0x1a>
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	20001068 	.word	0x20001068

0800a0f8 <_fstat_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4c07      	ldr	r4, [pc, #28]	; (800a118 <_fstat_r+0x20>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4605      	mov	r5, r0
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	f7f8 fa06 	bl	8002516 <_fstat>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d102      	bne.n	800a114 <_fstat_r+0x1c>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	b103      	cbz	r3, 800a114 <_fstat_r+0x1c>
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	20001068 	.word	0x20001068

0800a11c <_isatty_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4c06      	ldr	r4, [pc, #24]	; (800a138 <_isatty_r+0x1c>)
 800a120:	2300      	movs	r3, #0
 800a122:	4605      	mov	r5, r0
 800a124:	4608      	mov	r0, r1
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	f7f8 fa05 	bl	8002536 <_isatty>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_isatty_r+0x1a>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	b103      	cbz	r3, 800a136 <_isatty_r+0x1a>
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20001068 	.word	0x20001068

0800a13c <_lseek_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4c07      	ldr	r4, [pc, #28]	; (800a15c <_lseek_r+0x20>)
 800a140:	4605      	mov	r5, r0
 800a142:	4608      	mov	r0, r1
 800a144:	4611      	mov	r1, r2
 800a146:	2200      	movs	r2, #0
 800a148:	6022      	str	r2, [r4, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f8 f9fe 	bl	800254c <_lseek>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_lseek_r+0x1e>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	b103      	cbz	r3, 800a15a <_lseek_r+0x1e>
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20001068 	.word	0x20001068

0800a160 <memcpy>:
 800a160:	b510      	push	{r4, lr}
 800a162:	1e43      	subs	r3, r0, #1
 800a164:	440a      	add	r2, r1
 800a166:	4291      	cmp	r1, r2
 800a168:	d100      	bne.n	800a16c <memcpy+0xc>
 800a16a:	bd10      	pop	{r4, pc}
 800a16c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a170:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a174:	e7f7      	b.n	800a166 <memcpy+0x6>

0800a176 <memmove>:
 800a176:	4288      	cmp	r0, r1
 800a178:	b510      	push	{r4, lr}
 800a17a:	eb01 0302 	add.w	r3, r1, r2
 800a17e:	d807      	bhi.n	800a190 <memmove+0x1a>
 800a180:	1e42      	subs	r2, r0, #1
 800a182:	4299      	cmp	r1, r3
 800a184:	d00a      	beq.n	800a19c <memmove+0x26>
 800a186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a18e:	e7f8      	b.n	800a182 <memmove+0xc>
 800a190:	4283      	cmp	r3, r0
 800a192:	d9f5      	bls.n	800a180 <memmove+0xa>
 800a194:	1881      	adds	r1, r0, r2
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	42d3      	cmn	r3, r2
 800a19a:	d100      	bne.n	800a19e <memmove+0x28>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1a6:	e7f7      	b.n	800a198 <memmove+0x22>

0800a1a8 <__malloc_lock>:
 800a1a8:	4770      	bx	lr

0800a1aa <__malloc_unlock>:
 800a1aa:	4770      	bx	lr

0800a1ac <_realloc_r>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	b921      	cbnz	r1, 800a1c0 <_realloc_r+0x14>
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1bc:	f7ff bbf2 	b.w	80099a4 <_malloc_r>
 800a1c0:	b922      	cbnz	r2, 800a1cc <_realloc_r+0x20>
 800a1c2:	f7ff fba1 	bl	8009908 <_free_r>
 800a1c6:	4625      	mov	r5, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	f000 f826 	bl	800a21c <_malloc_usable_size_r>
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	d20f      	bcs.n	800a1f4 <_realloc_r+0x48>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7ff fbe4 	bl	80099a4 <_malloc_r>
 800a1dc:	4605      	mov	r5, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d0f2      	beq.n	800a1c8 <_realloc_r+0x1c>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	f7ff ffbb 	bl	800a160 <memcpy>
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff fb8b 	bl	8009908 <_free_r>
 800a1f2:	e7e9      	b.n	800a1c8 <_realloc_r+0x1c>
 800a1f4:	4635      	mov	r5, r6
 800a1f6:	e7e7      	b.n	800a1c8 <_realloc_r+0x1c>

0800a1f8 <_read_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4c07      	ldr	r4, [pc, #28]	; (800a218 <_read_r+0x20>)
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	6022      	str	r2, [r4, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7f8 f95c 	bl	80024c4 <_read>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_read_r+0x1e>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	b103      	cbz	r3, 800a216 <_read_r+0x1e>
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	20001068 	.word	0x20001068

0800a21c <_malloc_usable_size_r>:
 800a21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a220:	1f18      	subs	r0, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	bfbc      	itt	lt
 800a226:	580b      	ldrlt	r3, [r1, r0]
 800a228:	18c0      	addlt	r0, r0, r3
 800a22a:	4770      	bx	lr

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
