
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a7c  08008a7c  00021fb8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a7c  08008a7c  00021fb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a7c  08008a7c  00021fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fb8  20000000  08008a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20001fb8  0800aa3c  00021fb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023cc  0800aa3c  000223cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa0b  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fea  00000000  00000000  000419f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a8  00000000  00000000  000459e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  00047388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c086  00000000  00000000  00048b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000181a5  00000000  00000000  00074b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117d6c  00000000  00000000  0008cd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007384  00000000  00000000  001a4b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001fb8 	.word	0x20001fb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080086c8 	.word	0x080086c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001fbc 	.word	0x20001fbc
 800021c:	080086c8 	.word	0x080086c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f007 f8cd 	bl	8007478 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 fd21 	bl	8001d90 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fd85 	bl	8000e62 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 faaa 	bl	80028bc <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fd78 	bl	8000e62 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 febe 	bl	8002110 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fd62 	bl	8000e62 <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001ff8 	.word	0x20001ff8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fd6c 	bl	8003ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f003 fada 	bl	8003a10 <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fcfe 	bl	8000e62 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20002064 	.word	0x20002064
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 fc54 	bl	8002d64 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fcce 	bl	8000e62 <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200020c4 	.word	0x200020c4
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 fce4 	bl	8003ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 ff95 	bl	8007478 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_DAC1_Init+0x8c>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000556:	f002 fea8 	bl	80032aa <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fc7f 	bl	8000e62 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000590:	f003 f808 	bl	80035a4 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fc62 	bl	8000e62 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2210      	movs	r2, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_DAC1_Init+0x88>)
 80005ae:	f002 fff9 	bl	80035a4 <HAL_DAC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fc53 	bl	8000e62 <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	3730      	adds	r7, #48	; 0x30
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200020fc 	.word	0x200020fc
 80005c8:	50000800 	.word	0x50000800

080005cc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2230      	movs	r2, #48	; 0x30
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f006 ff4d 	bl	8007478 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_DAC2_Init+0x70>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e6:	f002 fe60 	bl	80032aa <HAL_DAC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80005f0:	f000 fc37 	bl	8000e62 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005f4:	2302      	movs	r3, #2
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000604:	2306      	movs	r3, #6
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_DAC2_Init+0x6c>)
 8000620:	f002 ffc0 	bl	80035a4 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 fc1a 	bl	8000e62 <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200020e8 	.word	0x200020e8
 800063c:	50000c00 	.word	0x50000c00

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a56      	ldr	r2, [pc, #344]	; (80007b8 <HAL_DAC_MspInit+0x178>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d150      	bne.n	8000704 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000692:	2330      	movs	r3, #48	; 0x30
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f003 fc24 	bl	8003ef4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <HAL_DAC_MspInit+0x184>)
 80006b0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006b4:	2206      	movs	r2, #6
 80006b6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006dc:	2220      	movs	r2, #32
 80006de:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e8:	f003 f992 	bl	8003a10 <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80006f2:	f000 fbb6 	bl	8000e62 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000702:	e054      	b.n	80007ae <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <HAL_DAC_MspInit+0x188>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d14f      	bne.n	80007ae <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f003 fbce 	bl	8003ef4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <HAL_DAC_MspInit+0x190>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000760:	2229      	movs	r2, #41	; 0x29
 8000762:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000766:	2210      	movs	r2, #16
 8000768:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000788:	2220      	movs	r2, #32
 800078a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000794:	f003 f93c 	bl	8003a10 <HAL_DMA_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800079e:	f000 fb60 	bl	8000e62 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	50000800 	.word	0x50000800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	20002110 	.word	0x20002110
 80007c4:	4002001c 	.word	0x4002001c
 80007c8:	50000c00 	.word	0x50000c00
 80007cc:	20002170 	.word	0x20002170
 80007d0:	40020030 	.word	0x40020030

080007d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_DMA_Init+0x70>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <MX_DMA_Init+0x70>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6493      	str	r3, [r2, #72]	; 0x48
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_DMA_Init+0x70>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_DMA_Init+0x70>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <MX_DMA_Init+0x70>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6493      	str	r3, [r2, #72]	; 0x48
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x70>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	200b      	movs	r0, #11
 8000810:	f002 fd17 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f002 fd2e 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200c      	movs	r0, #12
 8000820:	f002 fd0f 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f002 fd26 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200d      	movs	r0, #13
 8000830:	f002 fd07 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000834:	200d      	movs	r0, #13
 8000836:	f002 fd1e 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <update_dc_bias_sweep+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <update_dc_bias_sweep+0x1a>
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 800085e:	801a      	strh	r2, [r3, #0]
 8000860:	e005      	b.n	800086e <update_dc_bias_sweep+0x26>
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 800086c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10a      	bne.n	800088c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <update_dc_bias_sweep+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <update_dc_bias_sweep+0x3e>
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <update_dc_bias_sweep+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e002      	b.n	800088c <update_dc_bias_sweep+0x44>
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <update_dc_bias_sweep+0x90>)
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <update_dc_bias_sweep+0x52>
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <update_dc_bias_sweep+0x88>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008a2:	d302      	bcc.n	80008aa <update_dc_bias_sweep+0x62>
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <update_dc_bias_sweep+0x88>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <update_dc_bias_sweep+0x90>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	2108      	movs	r1, #8
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f003 fcb6 	bl	8004228 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <update_dc_bias_sweep+0x8c>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	2200      	movs	r2, #0
 80008c2:	2110      	movs	r1, #16
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <update_dc_bias_sweep+0x94>)
 80008c6:	f002 fe27 	bl	8003518 <HAL_DAC_SetValue>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20001fd4 	.word	0x20001fd4
 80008d8:	20001fd8 	.word	0x20001fd8
 80008dc:	200020fc 	.word	0x200020fc

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a63      	ldr	r2, [pc, #396]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a5d      	ldr	r2, [pc, #372]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x1a8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGMODE_Pin|SG2_Pin|SG1_Pin|TRIGMUX1_Pin 
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 714e 	mov.w	r1, #824	; 0x338
 800095c:	484b      	ldr	r0, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x1ac>)
 800095e:	f003 fc63 	bl	8004228 <HAL_GPIO_WritePin>
                          |TRIGMUX2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f003 fc5d 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000974:	4846      	ldr	r0, [pc, #280]	; (8000a90 <MX_GPIO_Init+0x1b0>)
 8000976:	f003 fc57 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN1_EXTI14_Pin|BTN2_EXTI15_Pin|ENC_EXTI2_Pin;
 800097a:	f24c 0304 	movw	r3, #49156	; 0xc004
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <MX_GPIO_Init+0x1b4>)
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	483f      	ldr	r0, [pc, #252]	; (8000a8c <MX_GPIO_Init+0x1ac>)
 8000990:	f003 fab0 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN3_EXTI0_Pin|BTN4_EXTI1_Pin;
 8000994:	2303      	movs	r3, #3
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <MX_GPIO_Init+0x1b4>)
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	483c      	ldr	r0, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x1b8>)
 80009a8:	f003 faa4 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80009ac:	2308      	movs	r3, #8
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x1ac>)
 80009c4:	f003 fa96 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f003 fa87 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SG2_Pin|SG1_Pin|TRIGMUX1_Pin|TRIGMUX2_Pin;
 80009e6:	f44f 734c 	mov.w	r3, #816	; 0x330
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_GPIO_Init+0x1ac>)
 8000a00:	f003 fa78 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_GPIO_Init+0x1b0>)
 8000a1c:	f003 fa6a 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000a20:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0x1b0>)
 8000a3a:	f003 fa5b 	bl	8003ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2006      	movs	r0, #6
 8000a44:	f002 fbfd 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f002 fc14 	bl	8003276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2007      	movs	r0, #7
 8000a54:	f002 fbf5 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a58:	2007      	movs	r0, #7
 8000a5a:	f002 fc0c 	bl	8003276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2008      	movs	r0, #8
 8000a64:	f002 fbed 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f002 fc04 	bl	8003276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2028      	movs	r0, #40	; 0x28
 8000a74:	f002 fbe5 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a78:	2028      	movs	r0, #40	; 0x28
 8000a7a:	f002 fbfc 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000400 	.word	0x48000400
 8000a94:	10210000 	.word	0x10210000
 8000a98:	48001400 	.word	0x48001400

08000a9c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d013      	beq.n	8000adc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000abc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00b      	beq.n	8000adc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	e000      	b.n	8000ac8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ad2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ffc7 	bl	8000a9c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x16>
  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <update_tft>:

void update_tft()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af02      	add	r7, sp, #8
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE


				uint32_t random_num = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
	  			uint16_t xr = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	83fb      	strh	r3, [r7, #30]
	  			uint16_t yr = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	83bb      	strh	r3, [r7, #28]
	  			uint16_t radiusr = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	837b      	strh	r3, [r7, #26]
	  			uint16_t colourr = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	833b      	strh	r3, [r7, #24]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	482c      	ldr	r0, [pc, #176]	; (8000bfc <update_tft+0xd4>)
 8000b4a:	f004 fbd6 	bl	80052fa <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	83fb      	strh	r3, [r7, #30]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4828      	ldr	r0, [pc, #160]	; (8000bfc <update_tft+0xd4>)
 8000b5a:	f004 fbce 	bl	80052fa <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	83bb      	strh	r3, [r7, #28]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4824      	ldr	r0, [pc, #144]	; (8000bfc <update_tft+0xd4>)
 8000b6a:	f004 fbc6 	bl	80052fa <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	837b      	strh	r3, [r7, #26]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4820      	ldr	r0, [pc, #128]	; (8000bfc <update_tft+0xd4>)
 8000b7a:	f004 fbbe 	bl	80052fa <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	833b      	strh	r3, [r7, #24]

	  			xr &= 0x01FF;
 8000b82:	8bfb      	ldrh	r3, [r7, #30]
 8000b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b88:	83fb      	strh	r3, [r7, #30]
	  			yr &= 0x01FF;
 8000b8a:	8bbb      	ldrh	r3, [r7, #28]
 8000b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b90:	83bb      	strh	r3, [r7, #28]
	  			radiusr &= 0x001F;
 8000b92:	8b7b      	ldrh	r3, [r7, #26]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	837b      	strh	r3, [r7, #26]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8000b9a:	8b7b      	ldrh	r3, [r7, #26]
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	8b3b      	ldrh	r3, [r7, #24]
 8000ba2:	8bb9      	ldrh	r1, [r7, #28]
 8000ba4:	8bf8      	ldrh	r0, [r7, #30]
 8000ba6:	f005 fedf 	bl	8006968 <ILI9341_Draw_Filled_Circle>

	  			char enc_buff[13] = "";
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	721a      	strb	r2, [r3, #8]
	  			snprintf(enc_buff, sizeof(enc_buff), "%d\n", new_enc_value);
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <update_tft+0xd8>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	1d38      	adds	r0, r7, #4
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <update_tft+0xdc>)
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	f006 fcdc 	bl	8007580 <sniprintf>
	  			ILI9341_Draw_Text(enc_buff, 10, 20, BLACK, 5, WHITE);
 8000bc8:	1d38      	adds	r0, r7, #4
 8000bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	210a      	movs	r1, #10
 8000bda:	f005 ffe7 	bl	8006bac <ILI9341_Draw_Text>

	  			ILI9341_Draw_Text(control_pressed, 10, 60, BLACK, 5, WHITE);
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2305      	movs	r3, #5
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	223c      	movs	r2, #60	; 0x3c
 8000bec:	210a      	movs	r1, #10
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <update_tft+0xe0>)
 8000bf0:	f005 ffdc 	bl	8006bac <ILI9341_Draw_Text>
	  		//HAL_Delay(1);
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200021d0 	.word	0x200021d0
 8000c00:	20001fde 	.word	0x20001fde
 8000c04:	080086e0 	.word	0x080086e0
 8000c08:	20001fec 	.word	0x20001fec

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fe68 	bl	80018e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f8b5 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f7ff fe61 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c1e:	f7ff fdd9 	bl	80007d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c22:	f7ff fc8b 	bl	800053c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000c26:	f7ff fcd1 	bl	80005cc <MX_DAC2_Init>
  MX_ADC1_Init();
 8000c2a:	f7ff fb49 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000c2e:	f7ff fc2b 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000c32:	f000 fc29 	bl	8001488 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000c36:	f000 fd1f 	bl	8001678 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000c3a:	f000 f94f 	bl	8000edc <MX_SPI3_Init>
  MX_RNG_Init();
 8000c3e:	f000 f917 	bl	8000e70 <MX_RNG_Init>
  MX_TIM1_Init();
 8000c42:	f000 fbb1 	bl	80013a8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000c46:	f000 fc89 	bl	800155c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000c4a:	f000 fcef 	bl	800162c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	4a3f      	ldr	r2, [pc, #252]	; (8000d54 <main+0x148>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	483f      	ldr	r0, [pc, #252]	; (8000d58 <main+0x14c>)
 8000c5c:	f002 fb9a 	bl	8003394 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000c60:	2110      	movs	r1, #16
 8000c62:	483d      	ldr	r0, [pc, #244]	; (8000d58 <main+0x14c>)
 8000c64:	f002 fb43 	bl	80032ee <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <main+0x150>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	483a      	ldr	r0, [pc, #232]	; (8000d60 <main+0x154>)
 8000c76:	f002 fb8d 	bl	8003394 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8000c7a:	483a      	ldr	r0, [pc, #232]	; (8000d64 <main+0x158>)
 8000c7c:	f004 fef8 	bl	8005a70 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2108      	movs	r1, #8
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f003 face 	bl	8004228 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4835      	ldr	r0, [pc, #212]	; (8000d68 <main+0x15c>)
 8000c92:	f003 fac9 	bl	8004228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4834      	ldr	r0, [pc, #208]	; (8000d6c <main+0x160>)
 8000c9c:	f003 fac4 	bl	8004228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4831      	ldr	r0, [pc, #196]	; (8000d6c <main+0x160>)
 8000ca6:	f003 fabf 	bl	8004228 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000caa:	4831      	ldr	r0, [pc, #196]	; (8000d70 <main+0x164>)
 8000cac:	f004 ff0e 	bl	8005acc <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb6:	482d      	ldr	r0, [pc, #180]	; (8000d6c <main+0x160>)
 8000cb8:	f003 fab6 	bl	8004228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	482a      	ldr	r0, [pc, #168]	; (8000d6c <main+0x160>)
 8000cc4:	f003 fab0 	bl	8004228 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4827      	ldr	r0, [pc, #156]	; (8000d6c <main+0x160>)
 8000cce:	f003 faab 	bl	8004228 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	f023 0307 	bic.w	r3, r3, #7
 8000ce0:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cec:	f043 0305 	orr.w	r3, r3, #5
 8000cf0:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8000cf2:	4820      	ldr	r0, [pc, #128]	; (8000d74 <main+0x168>)
 8000cf4:	f004 feea 	bl	8005acc <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <main+0x16c>)
 8000cfa:	f004 feb9 	bl	8005a70 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8000cfe:	f006 f8a1 	bl	8006e44 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000d02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d06:	f006 fa41 	bl	800718c <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f006 f840 	bl	8006d90 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	2301      	movs	r3, #1
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	210a      	movs	r1, #10
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <main+0x170>)
 8000d22:	f005 ff43 	bl	8006bac <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	2214      	movs	r2, #20
 8000d34:	210a      	movs	r1, #10
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <main+0x174>)
 8000d38:	f005 ff38 	bl	8006bac <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000d3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d40:	f000 fe42 	bl	80019c8 <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d48:	f006 fa20 	bl	800718c <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000d4c:	f7ff feec 	bl	8000b28 <update_tft>
 8000d50:	e7fc      	b.n	8000d4c <main+0x140>
 8000d52:	bf00      	nop
 8000d54:	20000004 	.word	0x20000004
 8000d58:	200020fc 	.word	0x200020fc
 8000d5c:	20000fa4 	.word	0x20000fa4
 8000d60:	200020e8 	.word	0x200020e8
 8000d64:	20002248 	.word	0x20002248
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	20002294 	.word	0x20002294
 8000d74:	2000232c 	.word	0x2000232c
 8000d78:	200022e0 	.word	0x200022e0
 8000d7c:	080086e4 	.word	0x080086e4
 8000d80:	08008700 	.word	0x08008700

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a8      	sub	sp, #160	; 0xa0
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d8e:	2238      	movs	r2, #56	; 0x38
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 fb70 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2254      	movs	r2, #84	; 0x54
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f006 fb62 	bl	8007478 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f003 fa73 	bl	80042a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dba:	2322      	movs	r3, #34	; 0x22
 8000dbc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000de0:	232a      	movs	r3, #42	; 0x2a
 8000de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 faf3 	bl	80043e8 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e08:	f000 f82b 	bl	8000e62 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2303      	movs	r3, #3
 8000e12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e18:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e26:	2108      	movs	r1, #8
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fdf5 	bl	8004a18 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e34:	f000 f815 	bl	8000e62 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000e38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e3c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 ffd4 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e56:	f000 f804 	bl	8000e62 <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	37a0      	adds	r7, #160	; 0xa0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_RNG_Init+0x24>)
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <MX_RNG_Init+0x28>)
 8000e78:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_RNG_Init+0x24>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_RNG_Init+0x24>)
 8000e82:	f004 fa05 	bl	8005290 <HAL_RNG_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000e8c:	f7ff ffe9 	bl	8000e62 <Error_Handler>
  }

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200021d0 	.word	0x200021d0
 8000e98:	50060800 	.word	0x50060800

08000e9c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_RNG_MspInit+0x38>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10b      	bne.n	8000ec6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_RNG_MspInit+0x3c>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_RNG_MspInit+0x3c>)
 8000eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_RNG_MspInit+0x3c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	50060800 	.word	0x50060800
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_SPI3_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000efa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI3_Init+0x74>)
 8000f3c:	f004 fa2c 	bl	8005398 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f7ff ff8c 	bl	8000e62 <Error_Handler>
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200021e4 	.word	0x200021e4
 8000f54:	40003c00 	.word	0x40003c00

08000f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d128      	bne.n	8000fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000faa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_SPI_MspInit+0x84>)
 8000fc8:	f002 ff94 	bl	8003ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40003c00 	.word	0x40003c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	6093      	str	r3, [r2, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001036:	f7ff ffd3 	bl	8000fe0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 fc76 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <EXTI0_IRQHandler+0x20>)
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <EXTI0_IRQHandler+0x24>)
 80010ac:	6810      	ldr	r0, [r2, #0]
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	7912      	ldrb	r2, [r2, #4]
 80010b2:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <EXTI0_IRQHandler+0x28>)
 80010b6:	f006 fa5b 	bl	8007570 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f003 f8cc 	bl	8004258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20001fec 	.word	0x20001fec
 80010c8:	08008710 	.word	0x08008710
 80010cc:	08008718 	.word	0x08008718

080010d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <EXTI1_IRQHandler+0x20>)
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <EXTI1_IRQHandler+0x24>)
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	6018      	str	r0, [r3, #0]
 80010dc:	7912      	ldrb	r2, [r2, #4]
 80010de:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <EXTI1_IRQHandler+0x28>)
 80010e2:	f006 fa45 	bl	8007570 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f003 f8b6 	bl	8004258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20001fec 	.word	0x20001fec
 80010f4:	08008728 	.word	0x08008728
 80010f8:	08008730 	.word	0x08008730

080010fc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <EXTI2_IRQHandler+0x20>)
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <EXTI2_IRQHandler+0x24>)
 8001104:	cb03      	ldmia	r3!, {r0, r1}
 8001106:	6010      	str	r0, [r2, #0]
 8001108:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <EXTI2_IRQHandler+0x28>)
 800110c:	f006 fa30 	bl	8007570 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001110:	2004      	movs	r0, #4
 8001112:	f003 f8a1 	bl	8004258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001fec 	.word	0x20001fec
 8001120:	08008740 	.word	0x08008740
 8001124:	08008748 	.word	0x08008748

08001128 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <DMA1_Channel1_IRQHandler+0x10>)
 800112e:	f002 fd92 	bl	8003c56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20002064 	.word	0x20002064

0800113c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA1_Channel2_IRQHandler+0x10>)
 8001142:	f002 fd88 	bl	8003c56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20002110 	.word	0x20002110

08001150 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA1_Channel3_IRQHandler+0x10>)
 8001156:	f002 fd7e 	bl	8003c56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20002170 	.word	0x20002170

08001164 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001172:	f004 fd87 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001178:	f004 fd84 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20001fec 	.word	0x20001fec
 8001184:	08008758 	.word	0x08008758
 8001188:	200022e0 	.word	0x200022e0
 800118c:	20002378 	.word	0x20002378

08001190 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001194:	f7ff fb58 	bl	8000848 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d305      	bcc.n	80011b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80011aa:	8812      	ldrh	r2, [r2, #0]
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d90a      	bls.n	80011c6 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80011b8:	f006 f966 	bl	8007488 <iprintf>
		new_enc_value = TIM1->CNT;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80011ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80011d2:	f004 fd57 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80011d8:	f004 fd54 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	20001fdc 	.word	0x20001fdc
 80011e8:	0800875c 	.word	0x0800875c
 80011ec:	20001fde 	.word	0x20001fde
 80011f0:	200022e0 	.word	0x200022e0
 80011f4:	20002294 	.word	0x20002294

080011f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM2_IRQHandler+0x10>)
 80011fe:	f004 fd41 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000232c 	.word	0x2000232c

0800120c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <EXTI15_10_IRQHandler+0x5c>)
 8001216:	f002 ffef 	bl	80041f8 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <EXTI15_10_IRQHandler+0x60>)
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <EXTI15_10_IRQHandler+0x64>)
 8001224:	6810      	ldr	r0, [r2, #0]
 8001226:	6018      	str	r0, [r3, #0]
 8001228:	7912      	ldrb	r2, [r2, #4]
 800122a:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <EXTI15_10_IRQHandler+0x68>)
 800122e:	f006 f99f 	bl	8007570 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <EXTI15_10_IRQHandler+0x5c>)
 8001238:	f002 ffde 	bl	80041f8 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <EXTI15_10_IRQHandler+0x60>)
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <EXTI15_10_IRQHandler+0x6c>)
 8001246:	6810      	ldr	r0, [r2, #0]
 8001248:	6018      	str	r0, [r3, #0]
 800124a:	7912      	ldrb	r2, [r2, #4]
 800124c:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <EXTI15_10_IRQHandler+0x70>)
 8001250:	f006 f98e 	bl	8007570 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001254:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001258:	f002 fffe 	bl	8004258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800125c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001260:	f002 fffa 	bl	8004258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	48000800 	.word	0x48000800
 800126c:	20001fec 	.word	0x20001fec
 8001270:	08008764 	.word	0x08008764
 8001274:	0800876c 	.word	0x0800876c
 8001278:	0800877c 	.word	0x0800877c
 800127c:	08008784 	.word	0x08008784

08001280 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001292:	f3af 8000 	nop.w
 8001296:	4601      	mov	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
	}

return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x50>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x16>
		heap_end = &end;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <_sbrk+0x50>)
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <_sbrk+0x54>)
 8001338:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <_sbrk+0x50>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <_sbrk+0x50>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	466a      	mov	r2, sp
 800134a:	4293      	cmp	r3, r2
 800134c:	d907      	bls.n	800135e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800134e:	f006 f869 	bl	8007424 <__errno>
 8001352:	4602      	mov	r2, r0
 8001354:	230c      	movs	r3, #12
 8001356:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135c:	e006      	b.n	800136c <_sbrk+0x48>
	}

	heap_end += incr;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_sbrk+0x50>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a03      	ldr	r2, [pc, #12]	; (8001374 <_sbrk+0x50>)
 8001368:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20001fe0 	.word	0x20001fe0
 8001378:	200023d0 	.word	0x200023d0

0800137c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <SystemInit+0x28>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <SystemInit+0x28>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SystemInit+0x28>)
 8001392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001396:	609a      	str	r2, [r3, #8]
#endif
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09a      	sub	sp, #104	; 0x68
 80013ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f006 f85e 	bl	8007478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2234      	movs	r2, #52	; 0x34
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 f852 	bl	8007478 <memset>

  htim1.Instance = TIM1;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013d6:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_TIM1_Init+0xdc>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_TIM1_Init+0xd8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001400:	2303      	movs	r3, #3
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001428:	4619      	mov	r1, r3
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <MX_TIM1_Init+0xd8>)
 800142c:	f004 fb84 	bl	8005b38 <HAL_TIM_Encoder_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001436:	f7ff fd14 	bl	8000e62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_TIM1_Init+0xd8>)
 800144e:	f005 f8fd 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001458:	f7ff fd03 	bl	8000e62 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_TIM1_Init+0xd8>)
 800146a:	f005 f985 	bl	8006778 <HAL_TIMEx_ConfigBreakDeadTime>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001474:	f7ff fcf5 	bl	8000e62 <Error_Handler>
  }

}
 8001478:	bf00      	nop
 800147a:	3768      	adds	r7, #104	; 0x68
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200022e0 	.word	0x200022e0
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	481d      	ldr	r0, [pc, #116]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014e2:	f004 fa6e 	bl	80059c2 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014ec:	f7ff fcb9 	bl	8000e62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	; (8001558 <MX_TIM2_Init+0xd0>)
 80014fe:	f004 fd41 	bl	8005f84 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001508:	f7ff fcab 	bl	8000e62 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800150c:	2305      	movs	r3, #5
 800150e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001510:	2350      	movs	r3, #80	; 0x50
 8001512:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM2_Init+0xd0>)
 8001524:	f004 fe1e 	bl	8006164 <HAL_TIM_SlaveConfigSynchro>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800152e:	f7ff fc98 	bl	8000e62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_TIM2_Init+0xd0>)
 8001540:	f005 f884 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800154a:	f7ff fc8a 	bl	8000e62 <Error_Handler>
  }

}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	; 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000232c 	.word	0x2000232c

0800155c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2234      	movs	r2, #52	; 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f005 ff78 	bl	8007478 <memset>

  htim8.Instance = TIM8;
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_TIM8_Init+0xc8>)
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <MX_TIM8_Init+0xcc>)
 800158c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <MX_TIM8_Init+0xc8>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <MX_TIM8_Init+0xc8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_TIM8_Init+0xc8>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015b2:	481c      	ldr	r0, [pc, #112]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015b4:	f004 fa05 	bl	80059c2 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80015be:	f7ff fc50 	bl	8000e62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015cc:	4619      	mov	r1, r3
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015d0:	f004 fcd8 	bl	8005f84 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80015da:	f7ff fc42 	bl	8000e62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015de:	2320      	movs	r3, #32
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM8_Init+0xc8>)
 80015f2:	f005 f82b 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015fc:	f7ff fc31 	bl	8000e62 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_TIM8_Init+0xc8>)
 800160e:	f005 f8b3 	bl	8006778 <HAL_TIMEx_ConfigBreakDeadTime>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001618:	f7ff fc23 	bl	8000e62 <Error_Handler>
  }

}
 800161c:	bf00      	nop
 800161e:	3750      	adds	r7, #80	; 0x50
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20002248 	.word	0x20002248
 8001628:	40013400 	.word	0x40013400

0800162c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_TIM16_Init+0x44>)
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <MX_TIM16_Init+0x48>)
 8001634:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_TIM16_Init+0x44>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_TIM16_Init+0x44>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_TIM16_Init+0x44>)
 8001644:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001648:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_TIM16_Init+0x44>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_TIM16_Init+0x44>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_TIM16_Init+0x44>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_TIM16_Init+0x44>)
 800165e:	f004 f9b0 	bl	80059c2 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001668:	f7ff fbfb 	bl	8000e62 <Error_Handler>
  }

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20002378 	.word	0x20002378
 8001674:	40014400 	.word	0x40014400

08001678 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_TIM17_Init+0x44>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <MX_TIM17_Init+0x48>)
 8001680:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_TIM17_Init+0x44>)
 8001684:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001688:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_TIM17_Init+0x44>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_TIM17_Init+0x44>)
 8001692:	2240      	movs	r2, #64	; 0x40
 8001694:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_TIM17_Init+0x44>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_TIM17_Init+0x44>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_TIM17_Init+0x44>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_TIM17_Init+0x44>)
 80016aa:	f004 f98a 	bl	80059c2 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80016b4:	f7ff fbd5 	bl	8000e62 <Error_Handler>
  }

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20002294 	.word	0x20002294
 80016c0:	40014800 	.word	0x40014800

080016c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_TIM_Encoder_MspInit+0x9c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d137      	bne.n	8001756 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 80016ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_TIM_Encoder_MspInit+0xa0>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001716:	2303      	movs	r3, #3
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001726:	2302      	movs	r3, #2
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001732:	f002 fbdf 	bl	8003ef4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	2019      	movs	r0, #25
 800173c:	f001 fd81 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001740:	2019      	movs	r0, #25
 8001742:	f001 fd98 	bl	8003276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	201a      	movs	r0, #26
 800174c:	f001 fd79 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001750:	201a      	movs	r0, #26
 8001752:	f001 fd90 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40012c00 	.word	0x40012c00
 8001764:	40021000 	.word	0x40021000
 8001768:	48000800 	.word	0x48000800

0800176c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178c:	d131      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a3c      	ldr	r2, [pc, #240]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a36      	ldr	r2, [pc, #216]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017be:	2301      	movs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f002 fb8a 	bl	8003ef4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2101      	movs	r1, #1
 80017e4:	201c      	movs	r0, #28
 80017e6:	f001 fd2c 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ea:	201c      	movs	r0, #28
 80017ec:	f001 fd43 	bl	8003276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80017f0:	e044      	b.n	800187c <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM8)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_TIM_Base_MspInit+0x11c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d10c      	bne.n	8001816 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001806:	6613      	str	r3, [r2, #96]	; 0x60
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
}
 8001814:	e032      	b.n	800187c <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM16)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d114      	bne.n	800184a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182a:	6613      	str	r3, [r2, #96]	; 0x60
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2101      	movs	r1, #1
 800183c:	2019      	movs	r0, #25
 800183e:	f001 fd00 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001842:	2019      	movs	r0, #25
 8001844:	f001 fd17 	bl	8003276 <HAL_NVIC_EnableIRQ>
}
 8001848:	e018      	b.n	800187c <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM17)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_TIM_Base_MspInit+0x124>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d113      	bne.n	800187c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6613      	str	r3, [r2, #96]	; 0x60
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_TIM_Base_MspInit+0x118>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	201a      	movs	r0, #26
 8001872:	f001 fce6 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001876:	201a      	movs	r0, #26
 8001878:	f001 fcfd 	bl	8003276 <HAL_NVIC_EnableIRQ>
}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	40013400 	.word	0x40013400
 800188c:	40014400 	.word	0x40014400
 8001890:	40014800 	.word	0x40014800

08001894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001896:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <LoopForever+0xe>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b0:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <LoopForever+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018be:	f7ff fd5d 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f005 fdb5 	bl	8007430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c6:	f7ff f9a1 	bl	8000c0c <main>

080018ca <LoopForever>:

LoopForever:
    b LoopForever
 80018ca:	e7fe      	b.n	80018ca <LoopForever>
  ldr   r0, =_estack
 80018cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20001fb8 	.word	0x20001fb8
  ldr r2, =_sidata
 80018d8:	08008a84 	.word	0x08008a84
  ldr r2, =_sbss
 80018dc:	20001fb8 	.word	0x20001fb8
  ldr r4, =_ebss
 80018e0:	200023cc 	.word	0x200023cc

080018e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>

080018e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f001 fc9b 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f80e 	bl	8001918 <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	e001      	b.n	800190c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001908:	f7ff fb7a 	bl	8001000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800190c:	79fb      	ldrb	r3, [r7, #7]

}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_InitTick+0x68>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d022      	beq.n	8001972 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_InitTick+0x6c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_InitTick+0x68>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001938:	fbb1 f3f3 	udiv	r3, r1, r3
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fca6 	bl	8003292 <HAL_SYSTICK_Config>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	d809      	bhi.n	8001966 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001952:	2200      	movs	r2, #0
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195a:	f001 fc72 	bl	8003242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_InitTick+0x70>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e007      	b.n	8001976 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e004      	b.n	8001976 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20001f4c 	.word	0x20001f4c
 8001984:	20001f44 	.word	0x20001f44
 8001988:	20001f48 	.word	0x20001f48

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4413      	add	r3, r2
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_IncTick+0x1c>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200023c4 	.word	0x200023c4
 80019ac:	20001f4c 	.word	0x20001f4c

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200023c4 	.word	0x200023c4

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e0:	d004      	beq.n	80019ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_Delay+0x40>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ec:	bf00      	nop
 80019ee:	f7ff ffdf 	bl	80019b0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d8f7      	bhi.n	80019ee <HAL_Delay+0x26>
  {
  }
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20001f4c 	.word	0x20001f4c

08001a0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a74:	b490      	push	{r4, r7}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3360      	adds	r3, #96	; 0x60
 8001a86:	461a      	mov	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <LL_ADC_SetOffset+0x40>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc90      	pop	{r4, r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	03fff000 	.word	0x03fff000

08001ab8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ab8:	b490      	push	{r4, r7}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3360      	adds	r3, #96	; 0x60
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc90      	pop	{r4, r7}
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ae0:	b490      	push	{r4, r7}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3360      	adds	r3, #96	; 0x60
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc90      	pop	{r4, r7}
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b10:	b490      	push	{r4, r7}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3360      	adds	r3, #96	; 0x60
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc90      	pop	{r4, r7}
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b40:	b490      	push	{r4, r7}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc90      	pop	{r4, r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	615a      	str	r2, [r3, #20]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b96:	b490      	push	{r4, r7}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3330      	adds	r3, #48	; 0x30
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	211f      	movs	r1, #31
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	f003 011f 	and.w	r1, r3, #31
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc90      	pop	{r4, r7}
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be8:	b490      	push	{r4, r7}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0e5b      	lsrs	r3, r3, #25
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	0d1b      	lsrs	r3, r3, #20
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2107      	movs	r1, #7
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	0d1b      	lsrs	r3, r3, #20
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc90      	pop	{r4, r7}
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0318 	and.w	r3, r3, #24
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c5c:	40d9      	lsrs	r1, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	400b      	ands	r3, r1
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	0007ffff 	.word	0x0007ffff

08001c80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6093      	str	r3, [r2, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d08:	d101      	bne.n	8001d0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsEnabled+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsEnabled+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1ad      	b.n	8002106 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7fe faf9 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff67 	bl	8001ca4 <LL_ADC_IsDeepPowerDownEnabled>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff4d 	bl	8001c80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff82 	bl	8001cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d113      	bne.n	8001e1e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff66 	bl	8001ccc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e00:	4b9e      	ldr	r3, [pc, #632]	; (800207c <HAL_ADC_Init+0x2ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	4a9e      	ldr	r2, [pc, #632]	; (8002080 <HAL_ADC_Init+0x2f0>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff66 	bl	8001cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10d      	bne.n	8001e4a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	f043 0210 	orr.w	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff77 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001e54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8148 	bne.w	80020f4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8144 	bne.w	80020f4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e74:	f043 0202 	orr.w	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff4b 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d141      	bne.n	8001f10 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e94:	d004      	beq.n	8001ea0 <HAL_ADC_Init+0x110>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <HAL_ADC_Init+0x2f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_ADC_Init+0x130>
 8001ea0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ea4:	f7ff ff3a 	bl	8001d1c <LL_ADC_IsEnabled>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	4876      	ldr	r0, [pc, #472]	; (8002084 <HAL_ADC_Init+0x2f4>)
 8001eac:	f7ff ff36 	bl	8001d1c <LL_ADC_IsEnabled>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4323      	orrs	r3, r4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e012      	b.n	8001ee6 <HAL_ADC_Init+0x156>
 8001ec0:	4871      	ldr	r0, [pc, #452]	; (8002088 <HAL_ADC_Init+0x2f8>)
 8001ec2:	f7ff ff2b 	bl	8001d1c <LL_ADC_IsEnabled>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	4870      	ldr	r0, [pc, #448]	; (800208c <HAL_ADC_Init+0x2fc>)
 8001eca:	f7ff ff27 	bl	8001d1c <LL_ADC_IsEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	431c      	orrs	r4, r3
 8001ed2:	486f      	ldr	r0, [pc, #444]	; (8002090 <HAL_ADC_Init+0x300>)
 8001ed4:	f7ff ff22 	bl	8001d1c <LL_ADC_IsEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4323      	orrs	r3, r4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef2:	d004      	beq.n	8001efe <HAL_ADC_Init+0x16e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a62      	ldr	r2, [pc, #392]	; (8002084 <HAL_ADC_Init+0x2f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x172>
 8001efe:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_ADC_Init+0x304>)
 8001f00:	e000      	b.n	8001f04 <HAL_ADC_Init+0x174>
 8001f02:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_ADC_Init+0x308>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f7ff fd7e 	bl	8001a0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7f5b      	ldrb	r3, [r3, #29]
 8001f14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	045b      	lsls	r3, r3, #17
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_ADC_Init+0x30c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fed3 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001f9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fee0 	bl	8001d68 <LL_ADC_INJ_IsConversionOngoing>
 8001fa8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d17f      	bne.n	80020b0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d17c      	bne.n	80020b0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002000:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6911      	ldr	r1, [r2, #16]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002016:	e013      	b.n	8002040 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800203c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12a      	bne.n	80020a0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206c:	430a      	orrs	r2, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e019      	b.n	80020b0 <HAL_ADC_Init+0x320>
 800207c:	20001f44 	.word	0x20001f44
 8002080:	053e2d63 	.word	0x053e2d63
 8002084:	50000100 	.word	0x50000100
 8002088:	50000400 	.word	0x50000400
 800208c:	50000500 	.word	0x50000500
 8002090:	50000600 	.word	0x50000600
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10c      	bne.n	80020d2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f023 010f 	bic.w	r1, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
 80020d0:	e007      	b.n	80020e2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020f 	bic.w	r2, r2, #15
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f2:	e007      	b.n	8002104 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002104:	7ffb      	ldrb	r3, [r7, #31]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop

08002110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0a6      	sub	sp, #152	; 0x98
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x22>
 800212e:	2302      	movs	r3, #2
 8002130:	e38e      	b.n	8002850 <HAL_ADC_ConfigChannel+0x740>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fdff 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 836f 	bne.w	800282a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff fd1c 	bl	8001b96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fded 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8002168:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fdf9 	bl	8001d68 <LL_ADC_INJ_IsConversionOngoing>
 8002176:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800217a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 817b 	bne.w	800247a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8176 	bne.w	800247a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002196:	d10f      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7ff fd20 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fcdd 	bl	8001b70 <LL_ADC_SetSamplingTimeCommonConfig>
 80021b6:	e00e      	b.n	80021d6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff fd0f 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fccd 	bl	8001b70 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d022      	beq.n	800223e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6919      	ldr	r1, [r3, #16]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002208:	f7ff fc34 	bl	8001a74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	461a      	mov	r2, r3
 800221a:	f7ff fc79 	bl	8001b10 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	7f1b      	ldrb	r3, [r3, #28]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x124>
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	e000      	b.n	8002236 <HAL_ADC_ConfigChannel+0x126>
 8002234:	2300      	movs	r3, #0
 8002236:	461a      	mov	r2, r3
 8002238:	f7ff fc82 	bl	8001b40 <LL_ADC_SetOffsetSaturation>
 800223c:	e11d      	b.n	800247a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fc37 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_ADC_ConfigChannel+0x15a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fc2c 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	e012      	b.n	8002290 <HAL_ADC_ConfigChannel+0x180>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc21 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x198>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	e00a      	b.n	80022be <HAL_ADC_ConfigChannel+0x1ae>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80022b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fc08 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fbee 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1ec>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fbe3 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 021f 	and.w	r2, r3, #31
 80022fa:	e010      	b.n	800231e <HAL_ADC_ConfigChannel+0x20e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fbd8 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x226>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	e00a      	b.n	800234c <HAL_ADC_ConfigChannel+0x23c>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fbc1 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fba7 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x27a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fb9c 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	e010      	b.n	80023ac <HAL_ADC_ConfigChannel+0x29c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb91 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x2b4>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	e00a      	b.n	80023da <HAL_ADC_ConfigChannel+0x2ca>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	429a      	cmp	r2, r3
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2102      	movs	r1, #2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fb7a 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2103      	movs	r1, #3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb60 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x308>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2103      	movs	r1, #3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fb55 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	e010      	b.n	800243a <HAL_ADC_ConfigChannel+0x32a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2103      	movs	r1, #3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fb4a 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x342>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	e00a      	b.n	8002468 <HAL_ADC_ConfigChannel+0x358>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	2103      	movs	r1, #3
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb33 	bl	8001ae0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc4c 	bl	8001d1c <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 810c 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	461a      	mov	r2, r3
 800249a:	f7ff fbcd 	bl	8001c38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4aaf      	ldr	r2, [pc, #700]	; (8002760 <HAL_ADC_ConfigChannel+0x650>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f040 80fd 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x3c2>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	bf94      	ite	ls
 80024ca:	2301      	movls	r3, #1
 80024cc:	2300      	movhi	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e012      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x3e8>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	bf94      	ite	ls
 80024f2:	2301      	movls	r3, #1
 80024f4:	2300      	movhi	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d064      	beq.n	80025c6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x408>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	069b      	lsls	r3, r3, #26
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	e00e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x426>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3301      	adds	r3, #1
 8002530:	069b      	lsls	r3, r3, #26
 8002532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x446>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	3301      	adds	r3, #1
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	e010      	b.n	8002578 <HAL_ADC_ConfigChannel+0x468>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x48e>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	e011      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x4b2>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 021f 	and.w	r2, r3, #31
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c2:	430b      	orrs	r3, r1
 80025c4:	e069      	b.n	800269a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x4d2>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e9b      	lsrs	r3, r3, #26
 80025d8:	3301      	adds	r3, #1
 80025da:	069b      	lsls	r3, r3, #26
 80025dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e0:	e00e      	b.n	8002600 <HAL_ADC_ConfigChannel+0x4f0>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	61fb      	str	r3, [r7, #28]
  return result;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x510>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	e010      	b.n	8002642 <HAL_ADC_ConfigChannel+0x532>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	617b      	str	r3, [r7, #20]
  return result;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_ADC_ConfigChannel+0x55e>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	051b      	lsls	r3, r3, #20
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266c:	e014      	b.n	8002698 <HAL_ADC_ConfigChannel+0x588>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	60fb      	str	r3, [r7, #12]
  return result;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f003 021f 	and.w	r2, r3, #31
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	3b1e      	subs	r3, #30
 8002692:	051b      	lsls	r3, r3, #20
 8002694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002698:	430b      	orrs	r3, r1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	6892      	ldr	r2, [r2, #8]
 800269e:	4619      	mov	r1, r3
 80026a0:	f7ff faa2 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_ADC_ConfigChannel+0x654>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80c9 	beq.w	8002844 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x5b6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_ADC_ConfigChannel+0x658>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x5ba>
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_ADC_ConfigChannel+0x65c>)
 80026c8:	e000      	b.n	80026cc <HAL_ADC_ConfigChannel+0x5bc>
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_ADC_ConfigChannel+0x660>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f9c3 	bl	8001a58 <LL_ADC_GetCommonPathInternalCh>
 80026d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <HAL_ADC_ConfigChannel+0x664>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x5da>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_ADC_ConfigChannel+0x668>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d14e      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d148      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fe:	d005      	beq.n	800270c <HAL_ADC_ConfigChannel+0x5fc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_ADC_ConfigChannel+0x66c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 8099 	bne.w	800283e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x610>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_ADC_ConfigChannel+0x658>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x614>
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_ADC_ConfigChannel+0x65c>)
 8002722:	e000      	b.n	8002726 <HAL_ADC_ConfigChannel+0x616>
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_ADC_ConfigChannel+0x660>)
 8002726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800272a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f7ff f97e 	bl	8001a32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_ADC_ConfigChannel+0x670>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_ConfigChannel+0x674>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	099a      	lsrs	r2, r3, #6
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800274e:	e002      	b.n	8002756 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3b01      	subs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800275c:	e06f      	b.n	800283e <HAL_ADC_ConfigChannel+0x72e>
 800275e:	bf00      	nop
 8002760:	407f0000 	.word	0x407f0000
 8002764:	80080000 	.word	0x80080000
 8002768:	50000100 	.word	0x50000100
 800276c:	50000300 	.word	0x50000300
 8002770:	50000700 	.word	0x50000700
 8002774:	c3210000 	.word	0xc3210000
 8002778:	90c00010 	.word	0x90c00010
 800277c:	50000600 	.word	0x50000600
 8002780:	20001f44 	.word	0x20001f44
 8002784:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_ADC_ConfigChannel+0x748>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d125      	bne.n	80027de <HAL_ADC_ConfigChannel+0x6ce>
 8002792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11f      	bne.n	80027de <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_ADC_ConfigChannel+0x74c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d104      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x6a2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <HAL_ADC_ConfigChannel+0x750>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d047      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x6b6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <HAL_ADC_ConfigChannel+0x74c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x6ba>
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_ADC_ConfigChannel+0x754>)
 80027c8:	e000      	b.n	80027cc <HAL_ADC_ConfigChannel+0x6bc>
 80027ca:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_ADC_ConfigChannel+0x758>)
 80027cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7ff f92b 	bl	8001a32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027dc:	e031      	b.n	8002842 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_ADC_ConfigChannel+0x75c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12d      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d127      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_ADC_ConfigChannel+0x74c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002806:	d004      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x702>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_ADC_ConfigChannel+0x74c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x706>
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_ADC_ConfigChannel+0x754>)
 8002814:	e000      	b.n	8002818 <HAL_ADC_ConfigChannel+0x708>
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_ADC_ConfigChannel+0x758>)
 8002818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f7ff f905 	bl	8001a32 <LL_ADC_SetCommonPathInternalCh>
 8002828:	e00c      	b.n	8002844 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800283c:	e002      	b.n	8002844 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002842:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800284c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002850:	4618      	mov	r0, r3
 8002852:	3798      	adds	r7, #152	; 0x98
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	c7520000 	.word	0xc7520000
 800285c:	50000100 	.word	0x50000100
 8002860:	50000500 	.word	0x50000500
 8002864:	50000300 	.word	0x50000300
 8002868:	50000700 	.word	0x50000700
 800286c:	cb840000 	.word	0xcb840000

08002870 <LL_ADC_IsEnabled>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <LL_ADC_IsEnabled+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_ADC_IsEnabled+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_REG_IsConversionOngoing>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d101      	bne.n	80028ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b0a1      	sub	sp, #132	; 0x84
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0e3      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ea:	d102      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	e009      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	e001      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0be      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffb5 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 800292c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ffaf 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 80a0 	bne.w	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 809c 	bne.w	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d004      	beq.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800295c:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800295e:	e000      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002960:	4b56      	ldr	r3, [pc, #344]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002962:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04b      	beq.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297e:	035b      	lsls	r3, r3, #13
 8002980:	430b      	orrs	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002986:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a45      	ldr	r2, [pc, #276]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10f      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800299c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029a0:	f7ff ff66 	bl	8002870 <LL_ADC_IsEnabled>
 80029a4:	4604      	mov	r4, r0
 80029a6:	4841      	ldr	r0, [pc, #260]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80029a8:	f7ff ff62 	bl	8002870 <LL_ADC_IsEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4323      	orrs	r3, r4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e012      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80029bc:	483c      	ldr	r0, [pc, #240]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80029be:	f7ff ff57 	bl	8002870 <LL_ADC_IsEnabled>
 80029c2:	4604      	mov	r4, r0
 80029c4:	483b      	ldr	r0, [pc, #236]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029c6:	f7ff ff53 	bl	8002870 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	431c      	orrs	r4, r3
 80029ce:	483c      	ldr	r0, [pc, #240]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029d0:	f7ff ff4e 	bl	8002870 <LL_ADC_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4323      	orrs	r3, r4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d056      	beq.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ee:	f023 030f 	bic.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a02:	e047      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a18:	d004      	beq.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10f      	bne.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a28:	f7ff ff22 	bl	8002870 <LL_ADC_IsEnabled>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	481f      	ldr	r0, [pc, #124]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a30:	f7ff ff1e 	bl	8002870 <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4323      	orrs	r3, r4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e012      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002a44:	481a      	ldr	r0, [pc, #104]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002a46:	f7ff ff13 	bl	8002870 <LL_ADC_IsEnabled>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a4e:	f7ff ff0f 	bl	8002870 <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	431c      	orrs	r4, r3
 8002a56:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a58:	f7ff ff0a 	bl	8002870 <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a76:	f023 030f 	bic.w	r3, r3, #15
 8002a7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7e:	e009      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a92:	e000      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3784      	adds	r7, #132	; 0x84
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	50000100 	.word	0x50000100
 8002ab0:	50000400 	.word	0x50000400
 8002ab4:	50000500 	.word	0x50000500
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	50000700 	.word	0x50000700
 8002ac0:	50000600 	.word	0x50000600

08002ac4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <LL_EXTI_EnableIT_32_63+0x20>)
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	4904      	ldr	r1, [pc, #16]	; (8002b08 <LL_EXTI_EnableIT_32_63+0x20>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	620b      	str	r3, [r1, #32]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40010400 	.word	0x40010400

08002b0c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010400 	.word	0x40010400

08002b34 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <LL_EXTI_DisableIT_32_63+0x24>)
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <LL_EXTI_DisableIT_32_63+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	620b      	str	r3, [r1, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010400 	.word	0x40010400

08002b5c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4904      	ldr	r1, [pc, #16]	; (8002b7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]

}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40010400 	.word	0x40010400

08002b80 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8c:	4904      	ldr	r1, [pc, #16]	; (8002ba0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40010400 	.word	0x40010400

08002bcc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4904      	ldr	r1, [pc, #16]	; (8002bf0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c24:	4904      	ldr	r1, [pc, #16]	; (8002c38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40010400 	.word	0x40010400

08002c3c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]

}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010400 	.word	0x40010400

08002c64 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010400 	.word	0x40010400

08002c8c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40010400 	.word	0x40010400

08002cb0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010400 	.word	0x40010400

08002cfc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010400 	.word	0x40010400

08002d24 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6153      	str	r3, [r2, #20]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010400 	.word	0x40010400

08002d44 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e180      	b.n	8003082 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8e:	d102      	bne.n	8002d96 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e175      	b.n	8003082 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7f5b      	ldrb	r3, [r3, #29]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd fb93 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dbc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b98      	ldr	r3, [pc, #608]	; (8003044 <HAL_COMP_Init+0x2e0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_COMP_Init+0xc6>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d112      	bne.n	8002e2a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_COMP_Init+0x2e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	4a90      	ldr	r2, [pc, #576]	; (800304c <HAL_COMP_Init+0x2e8>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099a      	lsrs	r2, r3, #6
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002e1c:	e002      	b.n	8002e24 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f9      	bne.n	8002e1e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a88      	ldr	r2, [pc, #544]	; (8003050 <HAL_COMP_Init+0x2ec>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d028      	beq.n	8002e86 <HAL_COMP_Init+0x122>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a86      	ldr	r2, [pc, #536]	; (8003054 <HAL_COMP_Init+0x2f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d020      	beq.n	8002e80 <HAL_COMP_Init+0x11c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a85      	ldr	r2, [pc, #532]	; (8003058 <HAL_COMP_Init+0x2f4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <HAL_COMP_Init+0x116>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a83      	ldr	r2, [pc, #524]	; (800305c <HAL_COMP_Init+0x2f8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d010      	beq.n	8002e74 <HAL_COMP_Init+0x110>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a82      	ldr	r2, [pc, #520]	; (8003060 <HAL_COMP_Init+0x2fc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d008      	beq.n	8002e6e <HAL_COMP_Init+0x10a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a80      	ldr	r2, [pc, #512]	; (8003064 <HAL_COMP_Init+0x300>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_COMP_Init+0x106>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e00d      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e72:	e00a      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e78:	e007      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e7e:	e004      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e84:	e001      	b.n	8002e8a <HAL_COMP_Init+0x126>
 8002e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e8a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80b6 	beq.w	8003006 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d011      	beq.n	8002eca <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_COMP_Init+0x300>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_COMP_Init+0x156>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_COMP_Init+0x304>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d103      	bne.n	8002ec2 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002eba:	6938      	ldr	r0, [r7, #16]
 8002ebc:	f7ff feac 	bl	8002c18 <LL_EXTI_EnableRisingTrig_32_63>
 8002ec0:	e014      	b.n	8002eec <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002ec2:	6938      	ldr	r0, [r7, #16]
 8002ec4:	f7ff fe96 	bl	8002bf4 <LL_EXTI_EnableRisingTrig_0_31>
 8002ec8:	e010      	b.n	8002eec <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_COMP_Init+0x300>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_COMP_Init+0x17a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_COMP_Init+0x304>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d103      	bne.n	8002ee6 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f7ff fec0 	bl	8002c64 <LL_EXTI_DisableRisingTrig_32_63>
 8002ee4:	e002      	b.n	8002eec <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002ee6:	6938      	ldr	r0, [r7, #16]
 8002ee8:	f7ff fea8 	bl	8002c3c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d011      	beq.n	8002f1c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_COMP_Init+0x300>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_COMP_Init+0x1a8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_COMP_Init+0x304>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002f0c:	6938      	ldr	r0, [r7, #16]
 8002f0e:	f7ff fecf 	bl	8002cb0 <LL_EXTI_EnableFallingTrig_32_63>
 8002f12:	e014      	b.n	8002f3e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f14:	6938      	ldr	r0, [r7, #16]
 8002f16:	f7ff feb9 	bl	8002c8c <LL_EXTI_EnableFallingTrig_0_31>
 8002f1a:	e010      	b.n	8002f3e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_COMP_Init+0x300>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_COMP_Init+0x1cc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_COMP_Init+0x304>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f7ff fee3 	bl	8002cfc <LL_EXTI_DisableFallingTrig_32_63>
 8002f36:	e002      	b.n	8002f3e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002f38:	6938      	ldr	r0, [r7, #16]
 8002f3a:	f7ff fecb 	bl	8002cd4 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_COMP_Init+0x300>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_COMP_Init+0x1ee>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a46      	ldr	r2, [pc, #280]	; (8003068 <HAL_COMP_Init+0x304>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d103      	bne.n	8002f5a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002f52:	6938      	ldr	r0, [r7, #16]
 8002f54:	f7ff fef6 	bl	8002d44 <LL_EXTI_ClearFlag_32_63>
 8002f58:	e002      	b.n	8002f60 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002f5a:	6938      	ldr	r0, [r7, #16]
 8002f5c:	f7ff fee2 	bl	8002d24 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d011      	beq.n	8002f90 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <HAL_COMP_Init+0x300>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_COMP_Init+0x21c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	; (8003068 <HAL_COMP_Init+0x304>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002f80:	6938      	ldr	r0, [r7, #16]
 8002f82:	f7ff fdfd 	bl	8002b80 <LL_EXTI_EnableEvent_32_63>
 8002f86:	e014      	b.n	8002fb2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002f88:	6938      	ldr	r0, [r7, #16]
 8002f8a:	f7ff fde7 	bl	8002b5c <LL_EXTI_EnableEvent_0_31>
 8002f8e:	e010      	b.n	8002fb2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_COMP_Init+0x300>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_COMP_Init+0x240>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_COMP_Init+0x304>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8002fa4:	6938      	ldr	r0, [r7, #16]
 8002fa6:	f7ff fe11 	bl	8002bcc <LL_EXTI_DisableEvent_32_63>
 8002faa:	e002      	b.n	8002fb2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8002fac:	6938      	ldr	r0, [r7, #16]
 8002fae:	f7ff fdf9 	bl	8002ba4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d011      	beq.n	8002fe2 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_COMP_Init+0x300>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_COMP_Init+0x26e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_COMP_Init+0x304>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d103      	bne.n	8002fda <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002fd2:	6938      	ldr	r0, [r7, #16]
 8002fd4:	f7ff fd88 	bl	8002ae8 <LL_EXTI_EnableIT_32_63>
 8002fd8:	e04b      	b.n	8003072 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8002fda:	6938      	ldr	r0, [r7, #16]
 8002fdc:	f7ff fd72 	bl	8002ac4 <LL_EXTI_EnableIT_0_31>
 8002fe0:	e047      	b.n	8003072 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_COMP_Init+0x300>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_COMP_Init+0x292>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_COMP_Init+0x304>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d103      	bne.n	8002ffe <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	f7ff fd9c 	bl	8002b34 <LL_EXTI_DisableIT_32_63>
 8002ffc:	e039      	b.n	8003072 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8002ffe:	6938      	ldr	r0, [r7, #16]
 8003000:	f7ff fd84 	bl	8002b0c <LL_EXTI_DisableIT_0_31>
 8003004:	e035      	b.n	8003072 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_COMP_Init+0x300>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_COMP_Init+0x2b6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_COMP_Init+0x304>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d103      	bne.n	8003022 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f7ff fdd6 	bl	8002bcc <LL_EXTI_DisableEvent_32_63>
 8003020:	e002      	b.n	8003028 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003022:	6938      	ldr	r0, [r7, #16]
 8003024:	f7ff fdbe 	bl	8002ba4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <HAL_COMP_Init+0x300>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_COMP_Init+0x2d8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_COMP_Init+0x304>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d117      	bne.n	800306c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800303c:	6938      	ldr	r0, [r7, #16]
 800303e:	f7ff fd79 	bl	8002b34 <LL_EXTI_DisableIT_32_63>
 8003042:	e016      	b.n	8003072 <HAL_COMP_Init+0x30e>
 8003044:	ff007e0f 	.word	0xff007e0f
 8003048:	20001f44 	.word	0x20001f44
 800304c:	053e2d63 	.word	0x053e2d63
 8003050:	40010200 	.word	0x40010200
 8003054:	40010204 	.word	0x40010204
 8003058:	40010208 	.word	0x40010208
 800305c:	4001020c 	.word	0x4001020c
 8003060:	40010210 	.word	0x40010210
 8003064:	40010214 	.word	0x40010214
 8003068:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800306c:	6938      	ldr	r0, [r7, #16]
 800306e:	f7ff fd4d 	bl	8002b0c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7f5b      	ldrb	r3, [r3, #29]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <__NVIC_SetPriorityGrouping>:
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff40 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff90 	bl	8003180 <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5f 	bl	800312c <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff33 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa4 	bl	80031e8 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e014      	b.n	80032e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	791b      	ldrb	r3, [r3, #4]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd f9b7 	bl	8000640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	795b      	ldrb	r3, [r3, #5]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_DAC_Start+0x16>
 8003300:	2302      	movs	r3, #2
 8003302:	e043      	b.n	800338c <HAL_DAC_Start+0x9e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003328:	2001      	movs	r0, #1
 800332a:	f7fe fb4d 	bl	80019c8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10f      	bne.n	8003354 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11d      	bne.n	800337e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e014      	b.n	800337e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2102      	movs	r1, #2
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	429a      	cmp	r2, r3
 800336c:	d107      	bne.n	800337e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0202 	orr.w	r2, r2, #2
 800337c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	795b      	ldrb	r3, [r3, #5]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_DAC_Start_DMA+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0a1      	b.n	80034f6 <HAL_DAC_Start_DMA+0x162>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2202      	movs	r2, #2
 80033bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d12a      	bne.n	800341a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_DAC_Start_DMA+0x16c>)
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_DAC_Start_DMA+0x170>)
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_DAC_Start_DMA+0x174>)
 80033da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d009      	beq.n	8003406 <HAL_DAC_Start_DMA+0x72>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d00c      	beq.n	8003410 <HAL_DAC_Start_DMA+0x7c>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d000      	beq.n	80033fc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80033fa:	e039      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	613b      	str	r3, [r7, #16]
        break;
 8003404:	e034      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	613b      	str	r3, [r7, #16]
        break;
 800340e:	e02f      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3310      	adds	r3, #16
 8003416:	613b      	str	r3, [r7, #16]
        break;
 8003418:	e02a      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4a3b      	ldr	r2, [pc, #236]	; (800350c <HAL_DAC_Start_DMA+0x178>)
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <HAL_DAC_Start_DMA+0x17c>)
 8003428:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a39      	ldr	r2, [pc, #228]	; (8003514 <HAL_DAC_Start_DMA+0x180>)
 8003430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003440:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d009      	beq.n	800345c <HAL_DAC_Start_DMA+0xc8>
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00c      	beq.n	8003466 <HAL_DAC_Start_DMA+0xd2>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d000      	beq.n	8003452 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003450:	e00e      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	613b      	str	r3, [r7, #16]
        break;
 800345a:	e009      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3318      	adds	r3, #24
 8003462:	613b      	str	r3, [r7, #16]
        break;
 8003464:	e004      	b.n	8003470 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	331c      	adds	r3, #28
 800346c:	613b      	str	r3, [r7, #16]
        break;
 800346e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d111      	bne.n	800349a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6898      	ldr	r0, [r3, #8]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	f000 fb66 	bl	8003b60 <HAL_DMA_Start_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]
 8003498:	e010      	b.n	80034bc <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68d8      	ldr	r0, [r3, #12]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	f000 fb54 	bl	8003b60 <HAL_DMA_Start_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2201      	movs	r2, #1
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fe fa71 	bl	80019c8 <HAL_Delay>
 80034e6:	e005      	b.n	80034f4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	080038fd 	.word	0x080038fd
 8003504:	0800391f 	.word	0x0800391f
 8003508:	0800393b 	.word	0x0800393b
 800350c:	080039a5 	.word	0x080039a5
 8003510:	080039c7 	.word	0x080039c7
 8003514:	080039e3 	.word	0x080039e3

08003518 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	3308      	adds	r3, #8
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e004      	b.n	8003552 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	3314      	adds	r3, #20
 8003550:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	461a      	mov	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_DAC_ConfigChannel+0x1c>
 80035bc:	2302      	movs	r3, #2
 80035be:	e194      	b.n	80038ea <HAL_DAC_ConfigChannel+0x346>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2202      	movs	r2, #2
 80035ca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d174      	bne.n	80036be <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d137      	bne.n	800364a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80035da:	f7fe f9e9 	bl	80019b0 <HAL_GetTick>
 80035de:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035e0:	e011      	b.n	8003606 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035e2:	f7fe f9e5 	bl	80019b0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d90a      	bls.n	8003606 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f043 0208 	orr.w	r2, r3, #8
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2203      	movs	r2, #3
 8003600:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e171      	b.n	80038ea <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e6      	bne.n	80035e2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003614:	2001      	movs	r0, #1
 8003616:	f7fe f9d7 	bl	80019c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
 8003624:	e01e      	b.n	8003664 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003626:	f7fe f9c3 	bl	80019b0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d90a      	bls.n	800364a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f043 0208 	orr.w	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2203      	movs	r2, #3
 8003644:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e14f      	b.n	80038ea <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	2b00      	cmp	r3, #0
 8003652:	dbe8      	blt.n	8003626 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003654:	2001      	movs	r0, #1
 8003656:	f7fe f9b7 	bl	80019c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	ea02 0103 	and.w	r1, r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	21ff      	movs	r1, #255	; 0xff
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	ea02 0103 	and.w	r1, r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d11d      	bne.n	8003702 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	221f      	movs	r2, #31
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	4013      	ands	r3, r2
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	4313      	orrs	r3, r2
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2207      	movs	r2, #7
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	4013      	ands	r3, r2
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	e011      	b.n	8003754 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800373c:	2301      	movs	r3, #1
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	e008      	b.n	8003754 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800374a:	2301      	movs	r3, #1
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	e001      	b.n	8003754 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4013      	ands	r3, r2
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	791b      	ldrb	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_DAC_ConfigChannel+0x1e4>
 8003782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003786:	e000      	b.n	800378a <HAL_DAC_ConfigChannel+0x1e6>
 8003788:	2300      	movs	r3, #0
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4013      	ands	r3, r2
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	795b      	ldrb	r3, [r3, #5]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_DAC_ConfigChannel+0x210>
 80037ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b2:	e000      	b.n	80037b6 <HAL_DAC_ConfigChannel+0x212>
 80037b4:	2300      	movs	r3, #0
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d114      	bne.n	80037f6 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80037cc:	f001 fac2 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 80037d0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <HAL_DAC_ConfigChannel+0x350>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d904      	bls.n	80037e4 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e00d      	b.n	8003800 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <HAL_DAC_ConfigChannel+0x354>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d909      	bls.n	8003800 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e004      	b.n	8003800 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	4313      	orrs	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	4313      	orrs	r3, r2
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	400a      	ands	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	f640 72fe 	movw	r2, #4094	; 0xffe
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	4013      	ands	r3, r2
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386a:	4313      	orrs	r3, r2
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	22c0      	movs	r2, #192	; 0xc0
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43da      	mvns	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	ea02 0103 	and.w	r1, r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	09896800 	.word	0x09896800
 80038f8:	04c4b400 	.word	0x04c4b400

080038fc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fe2c 	bl	8003568 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	711a      	strb	r2, [r3, #4]
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff fe25 	bl	800357c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff fe1b 	bl	8003590 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	711a      	strb	r2, [r3, #4]
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ffd8 	bl	8003968 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	711a      	strb	r2, [r3, #4]
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff ffd1 	bl	800397c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f043 0204 	orr.w	r2, r3, #4
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ffc7 	bl	8003990 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	711a      	strb	r2, [r3, #4]
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e08d      	b.n	8003b3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_DMA_Init+0x138>)
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d80f      	bhi.n	8003a4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <HAL_DMA_Init+0x13c>)
 8003a36:	4413      	add	r3, r2
 8003a38:	4a45      	ldr	r2, [pc, #276]	; (8003b50 <HAL_DMA_Init+0x140>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <HAL_DMA_Init+0x144>)
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a4c:	e00e      	b.n	8003a6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_DMA_Init+0x148>)
 8003a56:	4413      	add	r3, r2
 8003a58:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <HAL_DMA_Init+0x140>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	009a      	lsls	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <HAL_DMA_Init+0x14c>)
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9b6 	bl	8003e30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003acc:	d102      	bne.n	8003ad4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ae8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_DMA_Init+0x104>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d80c      	bhi.n	8003b14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f9d6 	bl	8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e008      	b.n	8003b26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40020407 	.word	0x40020407
 8003b4c:	bffdfff8 	.word	0xbffdfff8
 8003b50:	cccccccd 	.word	0xcccccccd
 8003b54:	40020000 	.word	0x40020000
 8003b58:	bffdfbf8 	.word	0xbffdfbf8
 8003b5c:	40020400 	.word	0x40020400

08003b60 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Start_IT+0x20>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e066      	b.n	8003c4e <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d155      	bne.n	8003c40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8fb 	bl	8003db4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 020e 	orr.w	r2, r2, #14
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00f      	b.n	8003bf8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 020a 	orr.w	r2, r2, #10
 8003bf6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e005      	b.n	8003c4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2204      	movs	r2, #4
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d026      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x7a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d021      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0204 	bic.w	r2, r2, #4
 8003ca8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d071      	beq.n	8003daa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cce:	e06c      	b.n	8003daa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2202      	movs	r2, #2
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d029      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020a 	bic.w	r2, r2, #10
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2102      	movs	r1, #2
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d038      	beq.n	8003daa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d40:	e033      	b.n	8003daa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d025      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 020e 	bic.w	r2, r2, #14
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
}
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d108      	bne.n	8003e14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e12:	e007      	b.n	8003e24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d802      	bhi.n	8003e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e44:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e001      	b.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e4c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	3b08      	subs	r3, #8
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	009a      	lsls	r2, r3, #2
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40020407 	.word	0x40020407
 8003e9c:	40020800 	.word	0x40020800
 8003ea0:	40020820 	.word	0x40020820
 8003ea4:	cccccccd 	.word	0xcccccccd
 8003ea8:	40020880 	.word	0x40020880

08003eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ece:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	1000823f 	.word	0x1000823f
 8003ef0:	40020940 	.word	0x40020940

08003ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f02:	e15a      	b.n	80041ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 814c 	beq.w	80041b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d00b      	beq.n	8003f3c <HAL_GPIO_Init+0x48>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d007      	beq.n	8003f3c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f30:	2b11      	cmp	r3, #17
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b12      	cmp	r3, #18
 8003f3a:	d130      	bne.n	8003f9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f72:	2201      	movs	r2, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 0201 	and.w	r2, r3, #1
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0xea>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b12      	cmp	r3, #18
 8003fdc:	d123      	bne.n	8004026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0203 	and.w	r2, r3, #3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80a6 	beq.w	80041b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004068:	4b5b      	ldr	r3, [pc, #364]	; (80041d8 <HAL_GPIO_Init+0x2e4>)
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	4a5a      	ldr	r2, [pc, #360]	; (80041d8 <HAL_GPIO_Init+0x2e4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6613      	str	r3, [r2, #96]	; 0x60
 8004074:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <HAL_GPIO_Init+0x2e4>)
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004080:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_GPIO_Init+0x2e8>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	220f      	movs	r2, #15
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040aa:	d01f      	beq.n	80040ec <HAL_GPIO_Init+0x1f8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a4c      	ldr	r2, [pc, #304]	; (80041e0 <HAL_GPIO_Init+0x2ec>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d019      	beq.n	80040e8 <HAL_GPIO_Init+0x1f4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_GPIO_Init+0x2f0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_GPIO_Init+0x1f0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a4a      	ldr	r2, [pc, #296]	; (80041e8 <HAL_GPIO_Init+0x2f4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00d      	beq.n	80040e0 <HAL_GPIO_Init+0x1ec>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a49      	ldr	r2, [pc, #292]	; (80041ec <HAL_GPIO_Init+0x2f8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <HAL_GPIO_Init+0x1e8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a48      	ldr	r2, [pc, #288]	; (80041f0 <HAL_GPIO_Init+0x2fc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_GPIO_Init+0x1e4>
 80040d4:	2305      	movs	r3, #5
 80040d6:	e00a      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040d8:	2306      	movs	r3, #6
 80040da:	e008      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040dc:	2304      	movs	r3, #4
 80040de:	e006      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040e0:	2303      	movs	r3, #3
 80040e2:	e004      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e002      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040ec:	2300      	movs	r3, #0
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	f002 0203 	and.w	r2, r2, #3
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	4093      	lsls	r3, r2
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040fe:	4937      	ldr	r1, [pc, #220]	; (80041dc <HAL_GPIO_Init+0x2e8>)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800410c:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <HAL_GPIO_Init+0x300>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	43db      	mvns	r3, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004130:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800415a:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <HAL_GPIO_Init+0x300>)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_GPIO_Init+0x300>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_GPIO_Init+0x300>)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3301      	adds	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f ae9d 	bne.w	8003f04 <HAL_GPIO_Init+0x10>
  }
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40010000 	.word	0x40010000
 80041e0:	48000400 	.word	0x48000400
 80041e4:	48000800 	.word	0x48000800
 80041e8:	48000c00 	.word	0x48000c00
 80041ec:	48001000 	.word	0x48001000
 80041f0:	48001400 	.word	0x48001400
 80041f4:	40010400 	.word	0x40010400

080041f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004244:	e002      	b.n	800424c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800426e:	4a05      	ldr	r2, [pc, #20]	; (8004284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f806 	bl	8004288 <HAL_GPIO_EXTI_Callback>
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40010400 	.word	0x40010400

08004288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d141      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d131      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042bc:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c2:	4a46      	ldr	r2, [pc, #280]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042cc:	4b43      	ldr	r3, [pc, #268]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042dc:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2232      	movs	r2, #50	; 0x32
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	0c9b      	lsrs	r3, r3, #18
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f2:	e002      	b.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d102      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f2      	bne.n	80042f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800430e:	4b33      	ldr	r3, [pc, #204]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d158      	bne.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e057      	b.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004320:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004326:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004330:	e04d      	b.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d141      	bne.n	80043be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800433a:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d131      	bne.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004366:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2232      	movs	r2, #50	; 0x32
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	0c9b      	lsrs	r3, r3, #18
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437e:	e002      	b.n	8004386 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004392:	d102      	bne.n	800439a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f2      	bne.n	8004380 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d112      	bne.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e011      	b.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043bc:	e007      	b.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40007000 	.word	0x40007000
 80043e0:	20001f44 	.word	0x20001f44
 80043e4:	431bde83 	.word	0x431bde83

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e308      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d075      	beq.n	80044f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004406:	4ba3      	ldr	r3, [pc, #652]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004410:	4ba0      	ldr	r3, [pc, #640]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b0c      	cmp	r3, #12
 800441e:	d102      	bne.n	8004426 <HAL_RCC_OscConfig+0x3e>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d002      	beq.n	800442c <HAL_RCC_OscConfig+0x44>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d10b      	bne.n	8004444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	4b99      	ldr	r3, [pc, #612]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05b      	beq.n	80044f0 <HAL_RCC_OscConfig+0x108>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d157      	bne.n	80044f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e2e3      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d106      	bne.n	800445c <HAL_RCC_OscConfig+0x74>
 800444e:	4b91      	ldr	r3, [pc, #580]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a90      	ldr	r2, [pc, #576]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e01d      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x98>
 8004466:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a8a      	ldr	r2, [pc, #552]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b88      	ldr	r3, [pc, #544]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a87      	ldr	r2, [pc, #540]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 8004480:	4b84      	ldr	r3, [pc, #528]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a83      	ldr	r2, [pc, #524]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b81      	ldr	r3, [pc, #516]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a80      	ldr	r2, [pc, #512]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd fa86 	bl	80019b0 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fd fa82 	bl	80019b0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e2a8      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ba:	4b76      	ldr	r3, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0xc0>
 80044c6:	e014      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fa72 	bl	80019b0 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fd fa6e 	bl	80019b0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e294      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e2:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0xe8>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d075      	beq.n	80045ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004508:	4b62      	ldr	r3, [pc, #392]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d102      	bne.n	800451e <HAL_RCC_OscConfig+0x136>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d002      	beq.n	8004524 <HAL_RCC_OscConfig+0x13c>
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d11f      	bne.n	8004564 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004524:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x154>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e267      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b55      	ldr	r3, [pc, #340]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	4952      	ldr	r1, [pc, #328]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004550:	4b51      	ldr	r3, [pc, #324]	; (8004698 <HAL_RCC_OscConfig+0x2b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fd f9df 	bl	8001918 <HAL_InitTick>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d043      	beq.n	80045e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e253      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d023      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b49      	ldr	r3, [pc, #292]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a48      	ldr	r2, [pc, #288]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fa1a 	bl	80019b0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7fd fa16 	bl	80019b0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e23c      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	4939      	ldr	r1, [pc, #228]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e01a      	b.n	80045ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a36      	ldr	r2, [pc, #216]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd f9f6 	bl	80019b0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fd f9f2 	bl	80019b0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e218      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x1e0>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03c      	beq.n	8004670 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01c      	beq.n	8004638 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004604:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fd f9cf 	bl	80019b0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004616:	f7fd f9cb 	bl	80019b0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1f1      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ef      	beq.n	8004616 <HAL_RCC_OscConfig+0x22e>
 8004636:	e01b      	b.n	8004670 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 800463a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fd f9b2 	bl	80019b0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004650:	f7fd f9ae 	bl	80019b0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1d4      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ef      	bne.n	8004650 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80ab 	beq.w	80047d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_RCC_OscConfig+0x2b4>
 800468e:	2301      	movs	r3, #1
 8004690:	e005      	b.n	800469e <HAL_RCC_OscConfig+0x2b6>
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	20001f48 	.word	0x20001f48
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4baf      	ldr	r3, [pc, #700]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4aae      	ldr	r2, [pc, #696]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
 80046ae:	4bac      	ldr	r3, [pc, #688]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046be:	4ba9      	ldr	r3, [pc, #676]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4ba6      	ldr	r3, [pc, #664]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4aa5      	ldr	r2, [pc, #660]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fd f96b 	bl	80019b0 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fd f967 	bl	80019b0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e18d      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f0:	4b9c      	ldr	r3, [pc, #624]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0x32e>
 8004704:	4b96      	ldr	r3, [pc, #600]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	4a95      	ldr	r2, [pc, #596]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004714:	e024      	b.n	8004760 <HAL_RCC_OscConfig+0x378>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d110      	bne.n	8004740 <HAL_RCC_OscConfig+0x358>
 800471e:	4b90      	ldr	r3, [pc, #576]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	4a8e      	ldr	r2, [pc, #568]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472e:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	4a8a      	ldr	r2, [pc, #552]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473e:	e00f      	b.n	8004760 <HAL_RCC_OscConfig+0x378>
 8004740:	4b87      	ldr	r3, [pc, #540]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a86      	ldr	r2, [pc, #536]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004750:	4b83      	ldr	r3, [pc, #524]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	4a82      	ldr	r2, [pc, #520]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d016      	beq.n	8004796 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fd f922 	bl	80019b0 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fd f91e 	bl	80019b0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e142      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004786:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ed      	beq.n	8004770 <HAL_RCC_OscConfig+0x388>
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fd f90b 	bl	80019b0 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fd f907 	bl	80019b0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e12b      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ed      	bne.n	800479e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	4a64      	ldr	r2, [pc, #400]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03c      	beq.n	800485a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e8:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ee:	4a5c      	ldr	r2, [pc, #368]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd f8da 	bl	80019b0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004800:	f7fd f8d6 	bl	80019b0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0fc      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <HAL_RCC_OscConfig+0x418>
 8004820:	e01b      	b.n	800485a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004828:	4a4d      	ldr	r2, [pc, #308]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fd f8bd 	bl	80019b0 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483a:	f7fd f8b9 	bl	80019b0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0df      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800484c:	4b44      	ldr	r3, [pc, #272]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800484e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ef      	bne.n	800483a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80d3 	beq.w	8004a0a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004864:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b0c      	cmp	r3, #12
 800486e:	f000 808d 	beq.w	800498c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d15a      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b39      	ldr	r3, [pc, #228]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a38      	ldr	r2, [pc, #224]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fd f893 	bl	80019b0 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488e:	f7fd f88f 	bl	80019b0 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0b5      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_OscConfig+0x580>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6a11      	ldr	r1, [r2, #32]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048bc:	3a01      	subs	r2, #1
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	4311      	orrs	r1, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048c6:	0212      	lsls	r2, r2, #8
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048ce:	0852      	lsrs	r2, r2, #1
 80048d0:	3a01      	subs	r2, #1
 80048d2:	0552      	lsls	r2, r2, #21
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048da:	0852      	lsrs	r2, r2, #1
 80048dc:	3a01      	subs	r2, #1
 80048de:	0652      	lsls	r2, r2, #25
 80048e0:	4311      	orrs	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048e6:	06d2      	lsls	r2, r2, #27
 80048e8:	430a      	orrs	r2, r1
 80048ea:	491d      	ldr	r1, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd f852 	bl	80019b0 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fd f84e 	bl	80019b0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e074      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x528>
 800492e:	e06c      	b.n	8004a0a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a07      	ldr	r2, [pc, #28]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a04      	ldr	r2, [pc, #16]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800494e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd f82a 	bl	80019b0 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495e:	e00e      	b.n	800497e <HAL_RCC_OscConfig+0x596>
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd f820 	bl	80019b0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e046      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497e:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_RCC_OscConfig+0x62c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x584>
 800498a:	e03e      	b.n	8004a0a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e039      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_OscConfig+0x62c>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0203 	and.w	r2, r3, #3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d12c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	3b01      	subs	r3, #1
 80049b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d123      	bne.n	8004a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11b      	bne.n	8004a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d113      	bne.n	8004a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	3b01      	subs	r3, #1
 80049ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e11e      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b91      	ldr	r3, [pc, #580]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b8e      	ldr	r3, [pc, #568]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 020f 	bic.w	r2, r3, #15
 8004a46:	498c      	ldr	r1, [pc, #560]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b8a      	ldr	r3, [pc, #552]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e106      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d073      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d129      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a74:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0f4      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a84:	f000 f972 	bl	8004d6c <RCC_GetSysClockFreqFromPLLSource>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4a7c      	ldr	r2, [pc, #496]	; (8004c80 <HAL_RCC_ClockConfig+0x268>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d93f      	bls.n	8004b12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a92:	4b7a      	ldr	r3, [pc, #488]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d033      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d12f      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ab2:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aba:	4a70      	ldr	r2, [pc, #448]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e024      	b.n	8004b12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0c6      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae0:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0be      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004af0:	f000 f8ce 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4a61      	ldr	r2, [pc, #388]	; (8004c80 <HAL_RCC_ClockConfig+0x268>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d909      	bls.n	8004b12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004afe:	4b5f      	ldr	r3, [pc, #380]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b06:	4a5d      	ldr	r2, [pc, #372]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4957      	ldr	r1, [pc, #348]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fc ff44 	bl	80019b0 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fc ff40 	bl	80019b0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e095      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d023      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a42      	ldr	r2, [pc, #264]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b84:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b8c:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4936      	ldr	r1, [pc, #216]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d105      	bne.n	8004bba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bae:	4b33      	ldr	r3, [pc, #204]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bba:	4b2f      	ldr	r3, [pc, #188]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d21d      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 020f 	bic.w	r2, r3, #15
 8004bd0:	4929      	ldr	r1, [pc, #164]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bd8:	f7fc feea 	bl	80019b0 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fc fee6 	bl	80019b0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e03b      	b.n	8004c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCC_ClockConfig+0x260>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d1ed      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4917      	ldr	r1, [pc, #92]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	490f      	ldr	r1, [pc, #60]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c42:	f000 f825 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004c46:	4601      	mov	r1, r0
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCC_ClockConfig+0x264>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_RCC_ClockConfig+0x26c>)
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <HAL_RCC_ClockConfig+0x270>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c62:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <HAL_RCC_ClockConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc fe56 	bl	8001918 <HAL_InitTick>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	04c4b400 	.word	0x04c4b400
 8004c84:	08008794 	.word	0x08008794
 8004c88:	20001f44 	.word	0x20001f44
 8004c8c:	20001f48 	.word	0x20001f48

08004c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c96:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e047      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ca8:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e03e      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d136      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d10c      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cee:	68d2      	ldr	r2, [r2, #12]
 8004cf0:	0a12      	lsrs	r2, r2, #8
 8004cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	617b      	str	r3, [r7, #20]
      break;
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	4a10      	ldr	r2, [pc, #64]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	0a12      	lsrs	r2, r2, #8
 8004d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
      break;
 8004d16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0e5b      	lsrs	r3, r3, #25
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	3301      	adds	r3, #1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e001      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d38:	693b      	ldr	r3, [r7, #16]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	007a1200 	.word	0x007a1200

08004d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20001f44 	.word	0x20001f44

08004d6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d10c      	bne.n	8004daa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9a:	68d2      	ldr	r2, [r2, #12]
 8004d9c:	0a12      	lsrs	r2, r2, #8
 8004d9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	617b      	str	r3, [r7, #20]
    break;
 8004da8:	e00c      	b.n	8004dc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	0a12      	lsrs	r2, r2, #8
 8004db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
    break;
 8004dc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0e5b      	lsrs	r3, r3, #25
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dde:	687b      	ldr	r3, [r7, #4]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40021000 	.word	0x40021000
 8004df0:	007a1200 	.word	0x007a1200
 8004df4:	00f42400 	.word	0x00f42400

08004df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e00:	2300      	movs	r3, #0
 8004e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e04:	2300      	movs	r3, #0
 8004e06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8098 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6593      	str	r3, [r2, #88]	; 0x58
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e42:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4e:	f7fc fdaf 	bl	80019b0 <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e54:	e009      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fc fdab 	bl	80019b0 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d902      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	74fb      	strb	r3, [r7, #19]
        break;
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6a:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d159      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01e      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d019      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e98:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fc fd6b 	bl	80019b0 <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc fd67 	bl	80019b0 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d902      	bls.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ec      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f20:	e008      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
 8004f26:	e005      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f34:	7c7b      	ldrb	r3, [r7, #17]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4baf      	ldr	r3, [pc, #700]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4aae      	ldr	r2, [pc, #696]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f52:	4ba9      	ldr	r3, [pc, #676]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 0203 	bic.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	49a5      	ldr	r1, [pc, #660]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f74:	4ba0      	ldr	r3, [pc, #640]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 020c 	bic.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	499d      	ldr	r1, [pc, #628]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f96:	4b98      	ldr	r3, [pc, #608]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4994      	ldr	r1, [pc, #592]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb8:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	498c      	ldr	r1, [pc, #560]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fda:	4b87      	ldr	r3, [pc, #540]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	4983      	ldr	r1, [pc, #524]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ffc:	4b7e      	ldr	r3, [pc, #504]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	497b      	ldr	r1, [pc, #492]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4972      	ldr	r1, [pc, #456]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005040:	4b6d      	ldr	r3, [pc, #436]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	496a      	ldr	r1, [pc, #424]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	4961      	ldr	r1, [pc, #388]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005084:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	4959      	ldr	r1, [pc, #356]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a6:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4950      	ldr	r1, [pc, #320]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c8:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4948      	ldr	r1, [pc, #288]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e6:	d105      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a42      	ldr	r2, [pc, #264]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	493a      	ldr	r1, [pc, #232]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b35      	ldr	r3, [pc, #212]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005138:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	492c      	ldr	r1, [pc, #176]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	491e      	ldr	r1, [pc, #120]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518e:	d105      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4910      	ldr	r1, [pc, #64]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d018      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	4902      	ldr	r1, [pc, #8]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051f6:	e001      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051f8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005204:	d105      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005206:	4b21      	ldr	r3, [pc, #132]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4a20      	ldr	r2, [pc, #128]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d015      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	4917      	ldr	r1, [pc, #92]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d105      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d015      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800527c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005280:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005282:	7cbb      	ldrb	r3, [r7, #18]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000

08005290 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e027      	b.n	80052f2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7a5b      	ldrb	r3, [r3, #9]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fdf2 	bl	8000e9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 0108 	bic.w	r1, r3, #8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0204 	orr.w	r2, r2, #4
 80052e2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7a1b      	ldrb	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005310:	2302      	movs	r3, #2
 8005312:	e03d      	b.n	8005390 <HAL_RNG_GenerateRandomNumber+0x96>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7a5b      	ldrb	r3, [r3, #9]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d12c      	bne.n	800537e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800532a:	f7fc fb41 	bl	80019b0 <HAL_GetTick>
 800532e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005330:	e011      	b.n	8005356 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005332:	f7fc fb3d 	bl	80019b0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d90a      	bls.n	8005356 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e01c      	b.n	8005390 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d1e6      	bne.n	8005332 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	725a      	strb	r2, [r3, #9]
 800537c:	e004      	b.n	8005388 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	721a      	strb	r2, [r3, #8]

  return status;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e084      	b.n	80054b4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fb fdc7 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ea:	d902      	bls.n	80053f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e002      	b.n	80053f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005400:	d007      	beq.n	8005412 <HAL_SPI_Init+0x7a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540a:	d002      	beq.n	8005412 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005422:	d903      	bls.n	800542c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
 800542a:	e002      	b.n	8005432 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	ea42 0103 	orr.w	r1, r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0204 	and.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	ea42 0103 	orr.w	r1, r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Transmit+0x22>
 80054da:	2302      	movs	r3, #2
 80054dc:	e150      	b.n	8005780 <HAL_SPI_Transmit+0x2c4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e6:	f7fc fa63 	bl	80019b0 <HAL_GetTick>
 80054ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005500:	e135      	b.n	800576e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Transmit+0x52>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005512:	e12c      	b.n	800576e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2203      	movs	r2, #3
 8005518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d107      	bne.n	8005570 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d007      	beq.n	800558e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005596:	d94b      	bls.n	8005630 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_SPI_Transmit+0xea>
 80055a0:	8afb      	ldrh	r3, [r7, #22]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d13e      	bne.n	8005624 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055ca:	e02b      	b.n	8005624 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d112      	bne.n	8005600 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055fe:	e011      	b.n	8005624 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005600:	f7fc f9d6 	bl	80019b0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d803      	bhi.n	8005618 <HAL_SPI_Transmit+0x15c>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005616:	d102      	bne.n	800561e <HAL_SPI_Transmit+0x162>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005622:	e0a4      	b.n	800576e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ce      	bne.n	80055cc <HAL_SPI_Transmit+0x110>
 800562e:	e07c      	b.n	800572a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_SPI_Transmit+0x182>
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d170      	bne.n	8005720 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d912      	bls.n	800566e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b02      	subs	r3, #2
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566c:	e058      	b.n	8005720 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005694:	e044      	b.n	8005720 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d12b      	bne.n	80056fc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d912      	bls.n	80056d4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	1c9a      	adds	r2, r3, #2
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b02      	subs	r3, #2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d2:	e025      	b.n	8005720 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fa:	e011      	b.n	8005720 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fc:	f7fc f958 	bl	80019b0 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d803      	bhi.n	8005714 <HAL_SPI_Transmit+0x258>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005712:	d102      	bne.n	800571a <HAL_SPI_Transmit+0x25e>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800571e:	e026      	b.n	800576e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1b5      	bne.n	8005696 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f901 	bl	8005936 <SPI_EndRxTxTransaction>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e000      	b.n	800576e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800576c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800577e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005798:	e04c      	b.n	8005834 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a0:	d048      	beq.n	8005834 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80057a2:	f7fc f905 	bl	80019b0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d902      	bls.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d13d      	bne.n	8005834 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d0:	d111      	bne.n	80057f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057da:	d004      	beq.n	80057e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e4:	d107      	bne.n	80057f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d10f      	bne.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800581e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e00f      	b.n	8005854 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	429a      	cmp	r2, r3
 8005850:	d1a3      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800586a:	e057      	b.n	800591c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005872:	d106      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005888:	d048      	beq.n	800591c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800588a:	f7fc f891 	bl	80019b0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d902      	bls.n	80058a0 <SPI_WaitFifoStateUntilTimeout+0x44>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d13d      	bne.n	800591c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b8:	d111      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0x82>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c2:	d004      	beq.n	80058ce <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d107      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e6:	d10f      	bne.n	8005908 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e008      	b.n	800592e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d19f      	bne.n	800586c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af02      	add	r7, sp, #8
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff ff84 	bl	800585c <SPI_WaitFifoStateUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e027      	b.n	80059ba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff07 	bl	8005788 <SPI_WaitFlagStateUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e014      	b.n	80059ba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff5d 	bl	800585c <SPI_WaitFifoStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e000      	b.n	80059ba <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e049      	b.n	8005a68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fb febf 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f000 fc23 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d001      	beq.n	8005a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e019      	b.n	8005abc <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_TIM_Base_Start+0x58>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d00b      	beq.n	8005aba <HAL_TIM_Base_Start+0x4a>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d007      	beq.n	8005aba <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	00010007 	.word	0x00010007

08005acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d001      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e021      	b.n	8005b28 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <HAL_TIM_Base_Start_IT+0x68>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b06      	cmp	r3, #6
 8005b0c:	d00b      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0x5a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	00010007 	.word	0x00010007

08005b38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e097      	b.n	8005c7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fb fdaf 	bl	80016c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 fb5d 	bl	800624c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bd8:	f023 030c 	bic.w	r3, r3, #12
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	031b      	lsls	r3, r3, #12
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d122      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0202 	mvn.w	r2, #2
 8005cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 faa2 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa94 	bl	80061fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 faa5 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d122      	bne.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d11b      	bne.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0204 	mvn.w	r2, #4
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa78 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa6a 	bl	80061fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fa7b 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d122      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d11b      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0208 	mvn.w	r2, #8
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa4e 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa40 	bl	80061fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa51 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0210 	mvn.w	r2, #16
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2208      	movs	r2, #8
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa24 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa16 	bl	80061fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fa27 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0201 	mvn.w	r2, #1
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9f0 	bl	80061e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d10e      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d107      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd5e 	bl	80068f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fd51 	bl	8006904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9d5 	bl	8006238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0220 	mvn.w	r2, #32
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fd11 	bl	80068dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	d10f      	bne.n	8005eea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fd17 	bl	8006918 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef8:	d10f      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fd09 	bl	800692c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f28:	d10f      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fcfb 	bl	8006940 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f58:	d10f      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f68:	d107      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fced 	bl	8006954 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x18>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0d2      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x1be>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005fba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	f000 80a9 	beq.w	800612e <HAL_TIM_ConfigClockSource+0x1aa>
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe0:	d81a      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x94>
 8005fe2:	2b30      	cmp	r3, #48	; 0x30
 8005fe4:	f000 809a 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x198>
 8005fe8:	2b30      	cmp	r3, #48	; 0x30
 8005fea:	d809      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x7c>
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	f000 8095 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x198>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	f000 8092 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x198>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 808f 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ffe:	e097      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006000:	2b50      	cmp	r3, #80	; 0x50
 8006002:	d05b      	beq.n	80060bc <HAL_TIM_ConfigClockSource+0x138>
 8006004:	2b50      	cmp	r3, #80	; 0x50
 8006006:	d802      	bhi.n	800600e <HAL_TIM_ConfigClockSource+0x8a>
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d077      	beq.n	80060fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800600c:	e090      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800600e:	2b60      	cmp	r3, #96	; 0x60
 8006010:	d064      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0x158>
 8006012:	2b70      	cmp	r3, #112	; 0x70
 8006014:	d028      	beq.n	8006068 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8006016:	e08b      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006018:	4a4c      	ldr	r2, [pc, #304]	; (800614c <HAL_TIM_ConfigClockSource+0x1c8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d07e      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
 800601e:	4a4b      	ldr	r2, [pc, #300]	; (800614c <HAL_TIM_ConfigClockSource+0x1c8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d810      	bhi.n	8006046 <HAL_TIM_ConfigClockSource+0xc2>
 8006024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006028:	d078      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
 800602a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602e:	d803      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0xb4>
 8006030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006034:	d02f      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8006036:	e07b      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800603c:	d06e      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
 800603e:	4a44      	ldr	r2, [pc, #272]	; (8006150 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d06b      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006044:	e074      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006046:	4a43      	ldr	r2, [pc, #268]	; (8006154 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d067      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
 800604c:	4a41      	ldr	r2, [pc, #260]	; (8006154 <HAL_TIM_ConfigClockSource+0x1d0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d803      	bhi.n	800605a <HAL_TIM_ConfigClockSource+0xd6>
 8006052:	4a41      	ldr	r2, [pc, #260]	; (8006158 <HAL_TIM_ConfigClockSource+0x1d4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d061      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006058:	e06a      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800605a:	4a40      	ldr	r2, [pc, #256]	; (800615c <HAL_TIM_ConfigClockSource+0x1d8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d05d      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
 8006060:	4a3f      	ldr	r2, [pc, #252]	; (8006160 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d05a      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006066:	e063      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f000 fac8 	bl	800660c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800608a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]
      break;
 8006094:	e04c      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f000 fab1 	bl	800660c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b8:	609a      	str	r2, [r3, #8]
      break;
 80060ba:	e039      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f000 fa23 	bl	8006514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2150      	movs	r1, #80	; 0x50
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fa7c 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 80060da:	e029      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6859      	ldr	r1, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f000 fa42 	bl	8006572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2160      	movs	r1, #96	; 0x60
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa6c 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 80060fa:	e019      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	461a      	mov	r2, r3
 800610a:	f000 fa03 	bl	8006514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2140      	movs	r1, #64	; 0x40
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa5c 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 800611a:	e009      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f000 fa53 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 800612c:	e000      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800612e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	00100030 	.word	0x00100030
 8006150:	00100020 	.word	0x00100020
 8006154:	00100050 	.word	0x00100050
 8006158:	00100040 	.word	0x00100040
 800615c:	00100060 	.word	0x00100060
 8006160:	00100070 	.word	0x00100070

08006164 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e031      	b.n	80061e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f904 	bl	800639c <TIM_SlaveTimer_SetConfig>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e018      	b.n	80061e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a46      	ldr	r2, [pc, #280]	; (8006378 <TIM_Base_SetConfig+0x12c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d017      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a43      	ldr	r2, [pc, #268]	; (800637c <TIM_Base_SetConfig+0x130>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a42      	ldr	r2, [pc, #264]	; (8006380 <TIM_Base_SetConfig+0x134>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a41      	ldr	r2, [pc, #260]	; (8006384 <TIM_Base_SetConfig+0x138>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <TIM_Base_SetConfig+0x13c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x48>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3f      	ldr	r2, [pc, #252]	; (800638c <TIM_Base_SetConfig+0x140>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a33      	ldr	r2, [pc, #204]	; (8006378 <TIM_Base_SetConfig+0x12c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a30      	ldr	r2, [pc, #192]	; (800637c <TIM_Base_SetConfig+0x130>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <TIM_Base_SetConfig+0x134>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2e      	ldr	r2, [pc, #184]	; (8006384 <TIM_Base_SetConfig+0x138>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <TIM_Base_SetConfig+0x13c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <TIM_Base_SetConfig+0x144>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x148>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <TIM_Base_SetConfig+0x14c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a26      	ldr	r2, [pc, #152]	; (800638c <TIM_Base_SetConfig+0x140>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a12      	ldr	r2, [pc, #72]	; (8006378 <TIM_Base_SetConfig+0x12c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <TIM_Base_SetConfig+0x110>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <TIM_Base_SetConfig+0x13c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_Base_SetConfig+0x110>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a14      	ldr	r2, [pc, #80]	; (8006390 <TIM_Base_SetConfig+0x144>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_Base_SetConfig+0x110>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <TIM_Base_SetConfig+0x148>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_Base_SetConfig+0x110>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <TIM_Base_SetConfig+0x14c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0x110>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0d      	ldr	r2, [pc, #52]	; (800638c <TIM_Base_SetConfig+0x140>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	615a      	str	r2, [r3, #20]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40013400 	.word	0x40013400
 800638c:	40015000 	.word	0x40015000
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800

0800639c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ca:	f023 0307 	bic.w	r3, r3, #7
 80063ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b70      	cmp	r3, #112	; 0x70
 80063e8:	d034      	beq.n	8006454 <TIM_SlaveTimer_SetConfig+0xb8>
 80063ea:	2b70      	cmp	r3, #112	; 0x70
 80063ec:	d811      	bhi.n	8006412 <TIM_SlaveTimer_SetConfig+0x76>
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d07d      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 80063f2:	2b30      	cmp	r3, #48	; 0x30
 80063f4:	d806      	bhi.n	8006404 <TIM_SlaveTimer_SetConfig+0x68>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d079      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d077      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d075      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006402:	e075      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d05e      	beq.n	80064c6 <TIM_SlaveTimer_SetConfig+0x12a>
 8006408:	2b60      	cmp	r3, #96	; 0x60
 800640a:	d066      	beq.n	80064da <TIM_SlaveTimer_SetConfig+0x13e>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d02c      	beq.n	800646a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006410:	e06e      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006412:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <TIM_SlaveTimer_SetConfig+0x160>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d06a      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 8006418:	4a38      	ldr	r2, [pc, #224]	; (80064fc <TIM_SlaveTimer_SetConfig+0x160>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d809      	bhi.n	8006432 <TIM_SlaveTimer_SetConfig+0x96>
 800641e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006422:	d064      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 8006424:	4a36      	ldr	r2, [pc, #216]	; (8006500 <TIM_SlaveTimer_SetConfig+0x164>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d061      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642e:	d05e      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006430:	e05e      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <TIM_SlaveTimer_SetConfig+0x168>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d05a      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 8006438:	4a32      	ldr	r2, [pc, #200]	; (8006504 <TIM_SlaveTimer_SetConfig+0x168>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d803      	bhi.n	8006446 <TIM_SlaveTimer_SetConfig+0xaa>
 800643e:	4a32      	ldr	r2, [pc, #200]	; (8006508 <TIM_SlaveTimer_SetConfig+0x16c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d054      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006444:	e054      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006446:	4a31      	ldr	r2, [pc, #196]	; (800650c <TIM_SlaveTimer_SetConfig+0x170>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d050      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
 800644c:	4a30      	ldr	r2, [pc, #192]	; (8006510 <TIM_SlaveTimer_SetConfig+0x174>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d04d      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006452:	e04d      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68d9      	ldr	r1, [r3, #12]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f000 f8d2 	bl	800660c <TIM_ETR_SetConfig>
      break;
 8006468:	e042      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b05      	cmp	r3, #5
 8006470:	d004      	beq.n	800647c <TIM_SlaveTimer_SetConfig+0xe0>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800647a:	d101      	bne.n	8006480 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e038      	b.n	80064f2 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	621a      	str	r2, [r3, #32]
      break;
 80064c4:	e014      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6899      	ldr	r1, [r3, #8]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 f81e 	bl	8006514 <TIM_TI1_ConfigInputStage>
      break;
 80064d8:	e00a      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6899      	ldr	r1, [r3, #8]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 f843 	bl	8006572 <TIM_TI2_ConfigInputStage>
      break;
 80064ec:	e000      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 80064ee:	bf00      	nop
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	00100030 	.word	0x00100030
 8006500:	00100020 	.word	0x00100020
 8006504:	00100050 	.word	0x00100050
 8006508:	00100040 	.word	0x00100040
 800650c:	00100060 	.word	0x00100060
 8006510:	00100070 	.word	0x00100070

08006514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800653e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 030a 	bic.w	r3, r3, #10
 8006550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006572:	b480      	push	{r7}
 8006574:	b087      	sub	sp, #28
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0210 	bic.w	r2, r3, #16
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f043 0307 	orr.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	431a      	orrs	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006660:	2302      	movs	r3, #2
 8006662:	e074      	b.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a34      	ldr	r2, [pc, #208]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a33      	ldr	r2, [pc, #204]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a31      	ldr	r2, [pc, #196]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d108      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d01d      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a11      	ldr	r2, [pc, #68]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10c      	bne.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4313      	orrs	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40013400 	.word	0x40013400
 8006764:	40015000 	.word	0x40015000
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40014000 	.word	0x40014000

08006778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006790:	2302      	movs	r3, #2
 8006792:	e096      	b.n	80068c2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d106      	bne.n	800683a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d12b      	bne.n	80068b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	051b      	lsls	r3, r3, #20
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a11      	ldr	r2, [pc, #68]	; (80068d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a10      	ldr	r2, [pc, #64]	; (80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0e      	ldr	r2, [pc, #56]	; (80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d106      	bne.n	80068b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40013400 	.word	0x40013400
 80068d8:	40015000 	.word	0x40015000

080068dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b08b      	sub	sp, #44	; 0x2c
 800696c:	af00      	add	r7, sp, #0
 800696e:	4604      	mov	r4, r0
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4623      	mov	r3, r4
 8006978:	80fb      	strh	r3, [r7, #6]
 800697a:	4603      	mov	r3, r0
 800697c:	80bb      	strh	r3, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	807b      	strh	r3, [r7, #2]
 8006982:	4613      	mov	r3, r2
 8006984:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8006986:	887b      	ldrh	r3, [r7, #2]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800698e:	887b      	ldrh	r3, [r7, #2]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	f1c3 0301 	rsb	r3, r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80069a0:	e061      	b.n	8006a66 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e018      	b.n	80069de <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	b298      	uxth	r0, r3
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	88bb      	ldrh	r3, [r7, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	883a      	ldrh	r2, [r7, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	f000 fc0b 	bl	80071d8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	b298      	uxth	r0, r3
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	88ba      	ldrh	r2, [r7, #4]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	883a      	ldrh	r2, [r7, #0]
 80069d2:	4619      	mov	r1, r3
 80069d4:	f000 fc00 	bl	80071d8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3301      	adds	r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	4413      	add	r3, r2
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	dde0      	ble.n	80069ac <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	e018      	b.n	8006a26 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	b298      	uxth	r0, r3
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	88bb      	ldrh	r3, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	883a      	ldrh	r2, [r7, #0]
 8006a04:	4619      	mov	r1, r3
 8006a06:	f000 fbe7 	bl	80071d8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	b298      	uxth	r0, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	88ba      	ldrh	r2, [r7, #4]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	883a      	ldrh	r2, [r7, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f000 fbdc 	bl	80071d8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	dde0      	ble.n	80069f4 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	3301      	adds	r3, #1
 8006a36:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3302      	adds	r3, #2
 8006a44:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	005a      	lsls	r2, r3, #1
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dd09      	ble.n	8006a66 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	3b01      	subs	r3, #1
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3302      	adds	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	da99      	bge.n	80069a2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006a6e:	bf00      	nop
 8006a70:	372c      	adds	r7, #44	; 0x2c
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd90      	pop	{r4, r7, pc}
	...

08006a78 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b089      	sub	sp, #36	; 0x24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	71fb      	strb	r3, [r7, #7]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71bb      	strb	r3, [r7, #6]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	717b      	strb	r3, [r7, #5]
 8006a92:	4613      	mov	r3, r2
 8006a94:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b1f      	cmp	r3, #31
 8006a9e:	d802      	bhi.n	8006aa6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	71fb      	strb	r3, [r7, #7]
 8006aa4:	e002      	b.n	8006aac <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	3b20      	subs	r3, #32
 8006aaa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	753b      	strb	r3, [r7, #20]
 8006ab0:	e012      	b.n	8006ad8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8006ab2:	7dfa      	ldrb	r2, [r7, #23]
 8006ab4:	7d38      	ldrb	r0, [r7, #20]
 8006ab6:	7d39      	ldrb	r1, [r7, #20]
 8006ab8:	4c3b      	ldr	r4, [pc, #236]	; (8006ba8 <ILI9341_Draw_Char+0x130>)
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4423      	add	r3, r4
 8006ac4:	4403      	add	r3, r0
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	f107 0318 	add.w	r3, r7, #24
 8006acc:	440b      	add	r3, r1
 8006ace:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006ad2:	7d3b      	ldrb	r3, [r7, #20]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	753b      	strb	r3, [r7, #20]
 8006ad8:	7d3b      	ldrb	r3, [r7, #20]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d9e9      	bls.n	8006ab2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006ade:	79bb      	ldrb	r3, [r7, #6]
 8006ae0:	b298      	uxth	r0, r3
 8006ae2:	797b      	ldrb	r3, [r7, #5]
 8006ae4:	b299      	uxth	r1, r3
 8006ae6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ae8:	461a      	mov	r2, r3
 8006aea:	0052      	lsls	r2, r2, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	b29c      	uxth	r4, r3
 8006af8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	4623      	mov	r3, r4
 8006afe:	f000 fc33 	bl	8007368 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006b02:	2300      	movs	r3, #0
 8006b04:	757b      	strb	r3, [r7, #21]
 8006b06:	e048      	b.n	8006b9a <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75bb      	strb	r3, [r7, #22]
 8006b0c:	e03f      	b.n	8006b8e <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006b0e:	7d7b      	ldrb	r3, [r7, #21]
 8006b10:	f107 0218 	add.w	r2, r7, #24
 8006b14:	4413      	add	r3, r2
 8006b16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	fa42 f303 	asr.w	r3, r2, r3
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02e      	beq.n	8006b88 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8006b2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d110      	bne.n	8006b52 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006b30:	79bb      	ldrb	r3, [r7, #6]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	7d7b      	ldrb	r3, [r7, #21]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	b298      	uxth	r0, r3
 8006b3c:	797b      	ldrb	r3, [r7, #5]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	7dbb      	ldrb	r3, [r7, #22]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	887a      	ldrh	r2, [r7, #2]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f000 fb44 	bl	80071d8 <ILI9341_Draw_Pixel>
 8006b50:	e01a      	b.n	8006b88 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8006b52:	79bb      	ldrb	r3, [r7, #6]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	7d7b      	ldrb	r3, [r7, #21]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006b5c:	fb11 f303 	smulbb	r3, r1, r3
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	b298      	uxth	r0, r3
 8006b66:	797b      	ldrb	r3, [r7, #5]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006b70:	fb11 f303 	smulbb	r3, r1, r3
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	b299      	uxth	r1, r3
 8006b7a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8006b7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b7e:	887b      	ldrh	r3, [r7, #2]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	4623      	mov	r3, r4
 8006b84:	f000 fbf0 	bl	8007368 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006b88:	7dbb      	ldrb	r3, [r7, #22]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	75bb      	strb	r3, [r7, #22]
 8006b8e:	7dbb      	ldrb	r3, [r7, #22]
 8006b90:	2b07      	cmp	r3, #7
 8006b92:	d9bc      	bls.n	8006b0e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006b94:	7d7b      	ldrb	r3, [r7, #21]
 8006b96:	3301      	adds	r3, #1
 8006b98:	757b      	strb	r3, [r7, #21]
 8006b9a:	7d7b      	ldrb	r3, [r7, #21]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d9b3      	bls.n	8006b08 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}
 8006ba8:	080087a4 	.word	0x080087a4

08006bac <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	70fb      	strb	r3, [r7, #3]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70bb      	strb	r3, [r7, #2]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8006bc6:	e017      	b.n	8006bf8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	7818      	ldrb	r0, [r3, #0]
 8006bd0:	883c      	ldrh	r4, [r7, #0]
 8006bd2:	78ba      	ldrb	r2, [r7, #2]
 8006bd4:	78f9      	ldrb	r1, [r7, #3]
 8006bd6:	8bbb      	ldrh	r3, [r7, #28]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	8b3b      	ldrh	r3, [r7, #24]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4623      	mov	r3, r4
 8006be0:	f7ff ff4a 	bl	8006a78 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8006be4:	8b3b      	ldrh	r3, [r7, #24]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	0052      	lsls	r2, r2, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e3      	bne.n	8006bc8 <ILI9341_Draw_Text+0x1c>
    }
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd90      	pop	{r4, r7, pc}

08006c08 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																							//GPIO INIT
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2180      	movs	r1, #128	; 0x80
 8006c10:	4802      	ldr	r0, [pc, #8]	; (8006c1c <ILI9341_SPI_Init+0x14>)
 8006c12:	f7fd fb09 	bl	8004228 <HAL_GPIO_WritePin>
}
 8006c16:	bf00      	nop
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	48000400 	.word	0x48000400

08006c20 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8006c2a:	1df9      	adds	r1, r7, #7
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4803      	ldr	r0, [pc, #12]	; (8006c40 <ILI9341_SPI_Send+0x20>)
 8006c32:	f7fe fc43 	bl	80054bc <HAL_SPI_Transmit>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200021e4 	.word	0x200021e4

08006c44 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	480a      	ldr	r0, [pc, #40]	; (8006c7c <ILI9341_Write_Command+0x38>)
 8006c54:	f7fd fae8 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2140      	movs	r1, #64	; 0x40
 8006c5c:	4807      	ldr	r0, [pc, #28]	; (8006c7c <ILI9341_Write_Command+0x38>)
 8006c5e:	f7fd fae3 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ffdb 	bl	8006c20 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2180      	movs	r1, #128	; 0x80
 8006c6e:	4803      	ldr	r0, [pc, #12]	; (8006c7c <ILI9341_Write_Command+0x38>)
 8006c70:	f7fd fada 	bl	8004228 <HAL_GPIO_WritePin>
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	48000400 	.word	0x48000400

08006c80 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2140      	movs	r1, #64	; 0x40
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <ILI9341_Write_Data+0x38>)
 8006c90:	f7fd faca 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	4807      	ldr	r0, [pc, #28]	; (8006cb8 <ILI9341_Write_Data+0x38>)
 8006c9a:	f7fd fac5 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ffbd 	bl	8006c20 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2180      	movs	r1, #128	; 0x80
 8006caa:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <ILI9341_Write_Data+0x38>)
 8006cac:	f7fd fabc 	bl	8004228 <HAL_GPIO_WritePin>
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	48000400 	.word	0x48000400

08006cbc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4623      	mov	r3, r4
 8006ccc:	80fb      	strh	r3, [r7, #6]
 8006cce:	4603      	mov	r3, r0
 8006cd0:	80bb      	strh	r3, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	807b      	strh	r3, [r7, #2]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8006cda:	202a      	movs	r0, #42	; 0x2a
 8006cdc:	f7ff ffb2 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ffc9 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff ffc4 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8006cf8:	887b      	ldrh	r3, [r7, #2]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff ffbd 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8006d06:	887b      	ldrh	r3, [r7, #2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff ffb8 	bl	8006c80 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8006d10:	202b      	movs	r0, #43	; 0x2b
 8006d12:	f7ff ff97 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8006d16:	88bb      	ldrh	r3, [r7, #4]
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff ffae 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8006d24:	88bb      	ldrh	r3, [r7, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ffa9 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8006d2e:	883b      	ldrh	r3, [r7, #0]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ffa2 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8006d3c:	883b      	ldrh	r3, [r7, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff ff9d 	bl	8006c80 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8006d46:	202c      	movs	r0, #44	; 0x2c
 8006d48:	f7ff ff7c 	bl	8006c44 <ILI9341_Write_Command>
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd90      	pop	{r4, r7, pc}

08006d54 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d5e:	480b      	ldr	r0, [pc, #44]	; (8006d8c <ILI9341_Reset+0x38>)
 8006d60:	f7fd fa62 	bl	8004228 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006d64:	20c8      	movs	r0, #200	; 0xc8
 8006d66:	f7fa fe2f 	bl	80019c8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	4807      	ldr	r0, [pc, #28]	; (8006d8c <ILI9341_Reset+0x38>)
 8006d70:	f7fd fa5a 	bl	8004228 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006d74:	20c8      	movs	r0, #200	; 0xc8
 8006d76:	f7fa fe27 	bl	80019c8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d80:	4802      	ldr	r0, [pc, #8]	; (8006d8c <ILI9341_Reset+0x38>)
 8006d82:	f7fd fa51 	bl	8004228 <HAL_GPIO_WritePin>
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	48000400 	.word	0x48000400

08006d90 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8006d9e:	2036      	movs	r0, #54	; 0x36
 8006da0:	f7ff ff50 	bl	8006c44 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d836      	bhi.n	8006e18 <ILI9341_Set_Rotation+0x88>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <ILI9341_Set_Rotation+0x20>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dd7 	.word	0x08006dd7
 8006db8:	08006ded 	.word	0x08006ded
 8006dbc:	08006e03 	.word	0x08006e03
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8006dc0:	2048      	movs	r0, #72	; 0x48
 8006dc2:	f7ff ff5d 	bl	8006c80 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <ILI9341_Set_Rotation+0x94>)
 8006dc8:	22f0      	movs	r2, #240	; 0xf0
 8006dca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006dcc:	4b16      	ldr	r3, [pc, #88]	; (8006e28 <ILI9341_Set_Rotation+0x98>)
 8006dce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006dd2:	801a      	strh	r2, [r3, #0]
			break;
 8006dd4:	e021      	b.n	8006e1a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8006dd6:	2028      	movs	r0, #40	; 0x28
 8006dd8:	f7ff ff52 	bl	8006c80 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <ILI9341_Set_Rotation+0x94>)
 8006dde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006de2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <ILI9341_Set_Rotation+0x98>)
 8006de6:	22f0      	movs	r2, #240	; 0xf0
 8006de8:	801a      	strh	r2, [r3, #0]
			break;
 8006dea:	e016      	b.n	8006e1a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8006dec:	2088      	movs	r0, #136	; 0x88
 8006dee:	f7ff ff47 	bl	8006c80 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <ILI9341_Set_Rotation+0x94>)
 8006df4:	22f0      	movs	r2, #240	; 0xf0
 8006df6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <ILI9341_Set_Rotation+0x98>)
 8006dfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006dfe:	801a      	strh	r2, [r3, #0]
			break;
 8006e00:	e00b      	b.n	8006e1a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8006e02:	20e8      	movs	r0, #232	; 0xe8
 8006e04:	f7ff ff3c 	bl	8006c80 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <ILI9341_Set_Rotation+0x94>)
 8006e0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006e0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <ILI9341_Set_Rotation+0x98>)
 8006e12:	22f0      	movs	r2, #240	; 0xf0
 8006e14:	801a      	strh	r2, [r3, #0]
			break;
 8006e16:	e000      	b.n	8006e1a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8006e18:	bf00      	nop
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20001f52 	.word	0x20001f52
 8006e28:	20001f50 	.word	0x20001f50

08006e2c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8006e30:	2201      	movs	r2, #1
 8006e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e36:	4802      	ldr	r0, [pc, #8]	; (8006e40 <ILI9341_Enable+0x14>)
 8006e38:	f7fd f9f6 	bl	8004228 <HAL_GPIO_WritePin>
}
 8006e3c:	bf00      	nop
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	48000400 	.word	0x48000400

08006e44 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8006e48:	f7ff fff0 	bl	8006e2c <ILI9341_Enable>
ILI9341_SPI_Init();
 8006e4c:	f7ff fedc 	bl	8006c08 <ILI9341_SPI_Init>
ILI9341_Reset();
 8006e50:	f7ff ff80 	bl	8006d54 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8006e54:	2001      	movs	r0, #1
 8006e56:	f7ff fef5 	bl	8006c44 <ILI9341_Write_Command>
HAL_Delay(2000);
 8006e5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e5e:	f7fa fdb3 	bl	80019c8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8006e62:	20cb      	movs	r0, #203	; 0xcb
 8006e64:	f7ff feee 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8006e68:	2039      	movs	r0, #57	; 0x39
 8006e6a:	f7ff ff09 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8006e6e:	202c      	movs	r0, #44	; 0x2c
 8006e70:	f7ff ff06 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006e74:	2000      	movs	r0, #0
 8006e76:	f7ff ff03 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8006e7a:	2034      	movs	r0, #52	; 0x34
 8006e7c:	f7ff ff00 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8006e80:	2002      	movs	r0, #2
 8006e82:	f7ff fefd 	bl	8006c80 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8006e86:	20cf      	movs	r0, #207	; 0xcf
 8006e88:	f7ff fedc 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	f7ff fef7 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006e92:	20c1      	movs	r0, #193	; 0xc1
 8006e94:	f7ff fef4 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8006e98:	2030      	movs	r0, #48	; 0x30
 8006e9a:	f7ff fef1 	bl	8006c80 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8006e9e:	20e8      	movs	r0, #232	; 0xe8
 8006ea0:	f7ff fed0 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8006ea4:	2085      	movs	r0, #133	; 0x85
 8006ea6:	f7ff feeb 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f7ff fee8 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8006eb0:	2078      	movs	r0, #120	; 0x78
 8006eb2:	f7ff fee5 	bl	8006c80 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8006eb6:	20ea      	movs	r0, #234	; 0xea
 8006eb8:	f7ff fec4 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f7ff fedf 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7ff fedc 	bl	8006c80 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8006ec8:	20ed      	movs	r0, #237	; 0xed
 8006eca:	f7ff febb 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8006ece:	2064      	movs	r0, #100	; 0x64
 8006ed0:	f7ff fed6 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006ed4:	2003      	movs	r0, #3
 8006ed6:	f7ff fed3 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8006eda:	2012      	movs	r0, #18
 8006edc:	f7ff fed0 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8006ee0:	2081      	movs	r0, #129	; 0x81
 8006ee2:	f7ff fecd 	bl	8006c80 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8006ee6:	20f7      	movs	r0, #247	; 0xf7
 8006ee8:	f7ff feac 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006eec:	2020      	movs	r0, #32
 8006eee:	f7ff fec7 	bl	8006c80 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8006ef2:	20c0      	movs	r0, #192	; 0xc0
 8006ef4:	f7ff fea6 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8006ef8:	2023      	movs	r0, #35	; 0x23
 8006efa:	f7ff fec1 	bl	8006c80 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006efe:	20c1      	movs	r0, #193	; 0xc1
 8006f00:	f7ff fea0 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8006f04:	2010      	movs	r0, #16
 8006f06:	f7ff febb 	bl	8006c80 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8006f0a:	20c5      	movs	r0, #197	; 0xc5
 8006f0c:	f7ff fe9a 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8006f10:	203e      	movs	r0, #62	; 0x3e
 8006f12:	f7ff feb5 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8006f16:	2028      	movs	r0, #40	; 0x28
 8006f18:	f7ff feb2 	bl	8006c80 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8006f1c:	20c7      	movs	r0, #199	; 0xc7
 8006f1e:	f7ff fe91 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8006f22:	2086      	movs	r0, #134	; 0x86
 8006f24:	f7ff feac 	bl	8006c80 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8006f28:	2036      	movs	r0, #54	; 0x36
 8006f2a:	f7ff fe8b 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8006f2e:	2048      	movs	r0, #72	; 0x48
 8006f30:	f7ff fea6 	bl	8006c80 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8006f34:	203a      	movs	r0, #58	; 0x3a
 8006f36:	f7ff fe85 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8006f3a:	2055      	movs	r0, #85	; 0x55
 8006f3c:	f7ff fea0 	bl	8006c80 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8006f40:	20b1      	movs	r0, #177	; 0xb1
 8006f42:	f7ff fe7f 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7ff fe9a 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8006f4c:	2018      	movs	r0, #24
 8006f4e:	f7ff fe97 	bl	8006c80 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8006f52:	20b6      	movs	r0, #182	; 0xb6
 8006f54:	f7ff fe76 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8006f58:	2008      	movs	r0, #8
 8006f5a:	f7ff fe91 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8006f5e:	2082      	movs	r0, #130	; 0x82
 8006f60:	f7ff fe8e 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8006f64:	2027      	movs	r0, #39	; 0x27
 8006f66:	f7ff fe8b 	bl	8006c80 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8006f6a:	20f2      	movs	r0, #242	; 0xf2
 8006f6c:	f7ff fe6a 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7ff fe85 	bl	8006c80 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8006f76:	2026      	movs	r0, #38	; 0x26
 8006f78:	f7ff fe64 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7ff fe7f 	bl	8006c80 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8006f82:	20e0      	movs	r0, #224	; 0xe0
 8006f84:	f7ff fe5e 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8006f88:	200f      	movs	r0, #15
 8006f8a:	f7ff fe79 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006f8e:	2031      	movs	r0, #49	; 0x31
 8006f90:	f7ff fe76 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8006f94:	202b      	movs	r0, #43	; 0x2b
 8006f96:	f7ff fe73 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8006f9a:	200c      	movs	r0, #12
 8006f9c:	f7ff fe70 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006fa0:	200e      	movs	r0, #14
 8006fa2:	f7ff fe6d 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006fa6:	2008      	movs	r0, #8
 8006fa8:	f7ff fe6a 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8006fac:	204e      	movs	r0, #78	; 0x4e
 8006fae:	f7ff fe67 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8006fb2:	20f1      	movs	r0, #241	; 0xf1
 8006fb4:	f7ff fe64 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8006fb8:	2037      	movs	r0, #55	; 0x37
 8006fba:	f7ff fe61 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8006fbe:	2007      	movs	r0, #7
 8006fc0:	f7ff fe5e 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8006fc4:	2010      	movs	r0, #16
 8006fc6:	f7ff fe5b 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006fca:	2003      	movs	r0, #3
 8006fcc:	f7ff fe58 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006fd0:	200e      	movs	r0, #14
 8006fd2:	f7ff fe55 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8006fd6:	2009      	movs	r0, #9
 8006fd8:	f7ff fe52 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7ff fe4f 	bl	8006c80 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8006fe2:	20e1      	movs	r0, #225	; 0xe1
 8006fe4:	f7ff fe2e 	bl	8006c44 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f7ff fe49 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006fee:	200e      	movs	r0, #14
 8006ff0:	f7ff fe46 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8006ff4:	2014      	movs	r0, #20
 8006ff6:	f7ff fe43 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006ffa:	2003      	movs	r0, #3
 8006ffc:	f7ff fe40 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8007000:	2011      	movs	r0, #17
 8007002:	f7ff fe3d 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8007006:	2007      	movs	r0, #7
 8007008:	f7ff fe3a 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800700c:	2031      	movs	r0, #49	; 0x31
 800700e:	f7ff fe37 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8007012:	20c1      	movs	r0, #193	; 0xc1
 8007014:	f7ff fe34 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8007018:	2048      	movs	r0, #72	; 0x48
 800701a:	f7ff fe31 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800701e:	2008      	movs	r0, #8
 8007020:	f7ff fe2e 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8007024:	200f      	movs	r0, #15
 8007026:	f7ff fe2b 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800702a:	200c      	movs	r0, #12
 800702c:	f7ff fe28 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8007030:	2031      	movs	r0, #49	; 0x31
 8007032:	f7ff fe25 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8007036:	2036      	movs	r0, #54	; 0x36
 8007038:	f7ff fe22 	bl	8006c80 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800703c:	200f      	movs	r0, #15
 800703e:	f7ff fe1f 	bl	8006c80 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8007042:	2011      	movs	r0, #17
 8007044:	f7ff fdfe 	bl	8006c44 <ILI9341_Write_Command>
HAL_Delay(240);
 8007048:	20f0      	movs	r0, #240	; 0xf0
 800704a:	f7fa fcbd 	bl	80019c8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800704e:	2029      	movs	r0, #41	; 0x29
 8007050:	f7ff fdf8 	bl	8006c44 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007054:	2000      	movs	r0, #0
 8007056:	f7ff fe9b 	bl	8006d90 <ILI9341_Set_Rotation>
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8007060:	b5b0      	push	{r4, r5, r7, lr}
 8007062:	b08c      	sub	sp, #48	; 0x30
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	80fb      	strh	r3, [r7, #6]
 800706c:	466b      	mov	r3, sp
 800706e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800707c:	d202      	bcs.n	8007084 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
 8007082:	e002      	b.n	800708a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8007084:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800708a:	2201      	movs	r2, #1
 800708c:	2140      	movs	r1, #64	; 0x40
 800708e:	483d      	ldr	r0, [pc, #244]	; (8007184 <ILI9341_Draw_Colour_Burst+0x124>)
 8007090:	f7fd f8ca 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007094:	2200      	movs	r2, #0
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	483a      	ldr	r0, [pc, #232]	; (8007184 <ILI9341_Draw_Colour_Burst+0x124>)
 800709a:	f7fd f8c5 	bl	8004228 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80070a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070aa:	4603      	mov	r3, r0
 80070ac:	3b01      	subs	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	4601      	mov	r1, r0
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 0400 	mov.w	r4, #0
 80070be:	00d4      	lsls	r4, r2, #3
 80070c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80070c4:	00cb      	lsls	r3, r1, #3
 80070c6:	4601      	mov	r1, r0
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	f04f 0400 	mov.w	r4, #0
 80070d4:	00d4      	lsls	r4, r2, #3
 80070d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80070da:	00cb      	lsls	r3, r1, #3
 80070dc:	1dc3      	adds	r3, r0, #7
 80070de:	08db      	lsrs	r3, r3, #3
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	ebad 0d03 	sub.w	sp, sp, r3
 80070e6:	466b      	mov	r3, sp
 80070e8:	3300      	adds	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80070ec:	2300      	movs	r3, #0
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f0:	e00e      	b.n	8007110 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	4413      	add	r3, r2
 80070f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80070fc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	3301      	adds	r3, #1
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	b2d1      	uxtb	r1, r2
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	3302      	adds	r3, #2
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	429a      	cmp	r2, r3
 8007116:	d3ec      	bcc.n	80070f2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	fbb2 f3f3 	udiv	r3, r2, r3
 8007126:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007132:	fb01 f202 	mul.w	r2, r1, r2
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d010      	beq.n	8007162 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007140:	2300      	movs	r3, #0
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007144:	e009      	b.n	800715a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8007146:	69b9      	ldr	r1, [r7, #24]
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	b29a      	uxth	r2, r3
 800714c:	230a      	movs	r3, #10
 800714e:	480e      	ldr	r0, [pc, #56]	; (8007188 <ILI9341_Draw_Colour_Burst+0x128>)
 8007150:	f7fe f9b4 	bl	80054bc <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	3301      	adds	r3, #1
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d3f1      	bcc.n	8007146 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8007162:	69b9      	ldr	r1, [r7, #24]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	b29a      	uxth	r2, r3
 8007168:	230a      	movs	r3, #10
 800716a:	4807      	ldr	r0, [pc, #28]	; (8007188 <ILI9341_Draw_Colour_Burst+0x128>)
 800716c:	f7fe f9a6 	bl	80054bc <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007170:	2201      	movs	r2, #1
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	4803      	ldr	r0, [pc, #12]	; (8007184 <ILI9341_Draw_Colour_Burst+0x124>)
 8007176:	f7fd f857 	bl	8004228 <HAL_GPIO_WritePin>
 800717a:	46ad      	mov	sp, r5
}
 800717c:	bf00      	nop
 800717e:	3730      	adds	r7, #48	; 0x30
 8007180:	46bd      	mov	sp, r7
 8007182:	bdb0      	pop	{r4, r5, r7, pc}
 8007184:	48000400 	.word	0x48000400
 8007188:	200021e4 	.word	0x200021e4

0800718c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <ILI9341_Fill_Screen+0x44>)
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <ILI9341_Fill_Screen+0x48>)
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2100      	movs	r1, #0
 80071a4:	2000      	movs	r0, #0
 80071a6:	f7ff fd89 	bl	8006cbc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <ILI9341_Fill_Screen+0x44>)
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <ILI9341_Fill_Screen+0x48>)
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	fb03 f302 	mul.w	r3, r3, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff ff4c 	bl	8007060 <ILI9341_Draw_Colour_Burst>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20001f52 	.word	0x20001f52
 80071d4:	20001f50 	.word	0x20001f50

080071d8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	80fb      	strh	r3, [r7, #6]
 80071e2:	460b      	mov	r3, r1
 80071e4:	80bb      	strh	r3, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80071ea:	4b5b      	ldr	r3, [pc, #364]	; (8007358 <ILI9341_Draw_Pixel+0x180>)
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	f080 80ac 	bcs.w	8007350 <ILI9341_Draw_Pixel+0x178>
 80071f8:	4b58      	ldr	r3, [pc, #352]	; (800735c <ILI9341_Draw_Pixel+0x184>)
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	88ba      	ldrh	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	f080 80a5 	bcs.w	8007350 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007206:	2200      	movs	r2, #0
 8007208:	2140      	movs	r1, #64	; 0x40
 800720a:	4855      	ldr	r0, [pc, #340]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800720c:	f7fd f80c 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007210:	2200      	movs	r2, #0
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	4852      	ldr	r0, [pc, #328]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007216:	f7fd f807 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800721a:	202a      	movs	r0, #42	; 0x2a
 800721c:	f7ff fd00 	bl	8006c20 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007220:	2201      	movs	r2, #1
 8007222:	2140      	movs	r1, #64	; 0x40
 8007224:	484e      	ldr	r0, [pc, #312]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007226:	f7fc ffff 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800722a:	2201      	movs	r2, #1
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	484c      	ldr	r0, [pc, #304]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007230:	f7fc fffa 	bl	8004228 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007234:	2200      	movs	r2, #0
 8007236:	2180      	movs	r1, #128	; 0x80
 8007238:	4849      	ldr	r0, [pc, #292]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800723a:	f7fc fff5 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b29b      	uxth	r3, r3
 8007244:	b2db      	uxtb	r3, r3
 8007246:	753b      	strb	r3, [r7, #20]
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	757b      	strb	r3, [r7, #21]
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	3301      	adds	r3, #1
 8007252:	121b      	asrs	r3, r3, #8
 8007254:	b2db      	uxtb	r3, r3
 8007256:	75bb      	strb	r3, [r7, #22]
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3301      	adds	r3, #1
 800725e:	b2db      	uxtb	r3, r3
 8007260:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007262:	f107 0114 	add.w	r1, r7, #20
 8007266:	2301      	movs	r3, #1
 8007268:	2204      	movs	r2, #4
 800726a:	483e      	ldr	r0, [pc, #248]	; (8007364 <ILI9341_Draw_Pixel+0x18c>)
 800726c:	f7fe f926 	bl	80054bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007270:	2201      	movs	r2, #1
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	483a      	ldr	r0, [pc, #232]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007276:	f7fc ffd7 	bl	8004228 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800727a:	2200      	movs	r2, #0
 800727c:	2140      	movs	r1, #64	; 0x40
 800727e:	4838      	ldr	r0, [pc, #224]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007280:	f7fc ffd2 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007284:	2200      	movs	r2, #0
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	4835      	ldr	r0, [pc, #212]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800728a:	f7fc ffcd 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800728e:	202b      	movs	r0, #43	; 0x2b
 8007290:	f7ff fcc6 	bl	8006c20 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007294:	2201      	movs	r2, #1
 8007296:	2140      	movs	r1, #64	; 0x40
 8007298:	4831      	ldr	r0, [pc, #196]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800729a:	f7fc ffc5 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800729e:	2201      	movs	r2, #1
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	482f      	ldr	r0, [pc, #188]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 80072a4:	f7fc ffc0 	bl	8004228 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80072a8:	2200      	movs	r2, #0
 80072aa:	2180      	movs	r1, #128	; 0x80
 80072ac:	482c      	ldr	r0, [pc, #176]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 80072ae:	f7fc ffbb 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80072b2:	88bb      	ldrh	r3, [r7, #4]
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	743b      	strb	r3, [r7, #16]
 80072bc:	88bb      	ldrh	r3, [r7, #4]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	747b      	strb	r3, [r7, #17]
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	3301      	adds	r3, #1
 80072c6:	121b      	asrs	r3, r3, #8
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	74bb      	strb	r3, [r7, #18]
 80072cc:	88bb      	ldrh	r3, [r7, #4]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	3301      	adds	r3, #1
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80072d6:	f107 0110 	add.w	r1, r7, #16
 80072da:	2301      	movs	r3, #1
 80072dc:	2204      	movs	r2, #4
 80072de:	4821      	ldr	r0, [pc, #132]	; (8007364 <ILI9341_Draw_Pixel+0x18c>)
 80072e0:	f7fe f8ec 	bl	80054bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80072e4:	2201      	movs	r2, #1
 80072e6:	2180      	movs	r1, #128	; 0x80
 80072e8:	481d      	ldr	r0, [pc, #116]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 80072ea:	f7fc ff9d 	bl	8004228 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80072ee:	2200      	movs	r2, #0
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	481b      	ldr	r0, [pc, #108]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 80072f4:	f7fc ff98 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	4818      	ldr	r0, [pc, #96]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 80072fe:	f7fc ff93 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8007302:	202c      	movs	r0, #44	; 0x2c
 8007304:	f7ff fc8c 	bl	8006c20 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007308:	2201      	movs	r2, #1
 800730a:	2140      	movs	r1, #64	; 0x40
 800730c:	4814      	ldr	r0, [pc, #80]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800730e:	f7fc ff8b 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8007312:	2201      	movs	r2, #1
 8007314:	2180      	movs	r1, #128	; 0x80
 8007316:	4812      	ldr	r0, [pc, #72]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007318:	f7fc ff86 	bl	8004228 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800731c:	2200      	movs	r2, #0
 800731e:	2180      	movs	r1, #128	; 0x80
 8007320:	480f      	ldr	r0, [pc, #60]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 8007322:	f7fc ff81 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	b29b      	uxth	r3, r3
 800732c:	b2db      	uxtb	r3, r3
 800732e:	733b      	strb	r3, [r7, #12]
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8007336:	f107 010c 	add.w	r1, r7, #12
 800733a:	2301      	movs	r3, #1
 800733c:	2202      	movs	r2, #2
 800733e:	4809      	ldr	r0, [pc, #36]	; (8007364 <ILI9341_Draw_Pixel+0x18c>)
 8007340:	f7fe f8bc 	bl	80054bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007344:	2201      	movs	r2, #1
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	4805      	ldr	r0, [pc, #20]	; (8007360 <ILI9341_Draw_Pixel+0x188>)
 800734a:	f7fc ff6d 	bl	8004228 <HAL_GPIO_WritePin>
 800734e:	e000      	b.n	8007352 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007350:	bf00      	nop
	
}
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20001f52 	.word	0x20001f52
 800735c:	20001f50 	.word	0x20001f50
 8007360:	48000400 	.word	0x48000400
 8007364:	200021e4 	.word	0x200021e4

08007368 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	4623      	mov	r3, r4
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	4603      	mov	r3, r0
 800737c:	80bb      	strh	r3, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	807b      	strh	r3, [r7, #2]
 8007382:	4613      	mov	r3, r2
 8007384:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007386:	4b25      	ldr	r3, [pc, #148]	; (800741c <ILI9341_Draw_Rectangle+0xb4>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	429a      	cmp	r2, r3
 8007390:	d23f      	bcs.n	8007412 <ILI9341_Draw_Rectangle+0xaa>
 8007392:	4b23      	ldr	r3, [pc, #140]	; (8007420 <ILI9341_Draw_Rectangle+0xb8>)
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	88ba      	ldrh	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d239      	bcs.n	8007412 <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	4413      	add	r3, r2
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4a1d      	ldr	r2, [pc, #116]	; (800741c <ILI9341_Draw_Rectangle+0xb4>)
 80073a8:	8812      	ldrh	r2, [r2, #0]
 80073aa:	b292      	uxth	r2, r2
 80073ac:	4293      	cmp	r3, r2
 80073ae:	db05      	blt.n	80073bc <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <ILI9341_Draw_Rectangle+0xb4>)
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80073bc:	88ba      	ldrh	r2, [r7, #4]
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	4413      	add	r3, r2
 80073c2:	3b01      	subs	r3, #1
 80073c4:	4a16      	ldr	r2, [pc, #88]	; (8007420 <ILI9341_Draw_Rectangle+0xb8>)
 80073c6:	8812      	ldrh	r2, [r2, #0]
 80073c8:	b292      	uxth	r2, r2
 80073ca:	4293      	cmp	r3, r2
 80073cc:	db05      	blt.n	80073da <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 80073ce:	4b14      	ldr	r3, [pc, #80]	; (8007420 <ILI9341_Draw_Rectangle+0xb8>)
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	88bb      	ldrh	r3, [r7, #4]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	4413      	add	r3, r2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29c      	uxth	r4, r3
 80073e6:	88ba      	ldrh	r2, [r7, #4]
 80073e8:	883b      	ldrh	r3, [r7, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	88b9      	ldrh	r1, [r7, #4]
 80073f4:	88f8      	ldrh	r0, [r7, #6]
 80073f6:	4622      	mov	r2, r4
 80073f8:	f7ff fc60 	bl	8006cbc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80073fc:	883b      	ldrh	r3, [r7, #0]
 80073fe:	887a      	ldrh	r2, [r7, #2]
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	461a      	mov	r2, r3
 8007406:	8b3b      	ldrh	r3, [r7, #24]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fe28 	bl	8007060 <ILI9341_Draw_Colour_Burst>
 8007410:	e000      	b.n	8007414 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007412:	bf00      	nop
}
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	20001f52 	.word	0x20001f52
 8007420:	20001f50 	.word	0x20001f50

08007424 <__errno>:
 8007424:	4b01      	ldr	r3, [pc, #4]	; (800742c <__errno+0x8>)
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	20001f54 	.word	0x20001f54

08007430 <__libc_init_array>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4e0d      	ldr	r6, [pc, #52]	; (8007468 <__libc_init_array+0x38>)
 8007434:	4c0d      	ldr	r4, [pc, #52]	; (800746c <__libc_init_array+0x3c>)
 8007436:	1ba4      	subs	r4, r4, r6
 8007438:	10a4      	asrs	r4, r4, #2
 800743a:	2500      	movs	r5, #0
 800743c:	42a5      	cmp	r5, r4
 800743e:	d109      	bne.n	8007454 <__libc_init_array+0x24>
 8007440:	4e0b      	ldr	r6, [pc, #44]	; (8007470 <__libc_init_array+0x40>)
 8007442:	4c0c      	ldr	r4, [pc, #48]	; (8007474 <__libc_init_array+0x44>)
 8007444:	f001 f940 	bl	80086c8 <_init>
 8007448:	1ba4      	subs	r4, r4, r6
 800744a:	10a4      	asrs	r4, r4, #2
 800744c:	2500      	movs	r5, #0
 800744e:	42a5      	cmp	r5, r4
 8007450:	d105      	bne.n	800745e <__libc_init_array+0x2e>
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007458:	4798      	blx	r3
 800745a:	3501      	adds	r5, #1
 800745c:	e7ee      	b.n	800743c <__libc_init_array+0xc>
 800745e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007462:	4798      	blx	r3
 8007464:	3501      	adds	r5, #1
 8007466:	e7f2      	b.n	800744e <__libc_init_array+0x1e>
 8007468:	08008a7c 	.word	0x08008a7c
 800746c:	08008a7c 	.word	0x08008a7c
 8007470:	08008a7c 	.word	0x08008a7c
 8007474:	08008a80 	.word	0x08008a80

08007478 <memset>:
 8007478:	4402      	add	r2, r0
 800747a:	4603      	mov	r3, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <iprintf>:
 8007488:	b40f      	push	{r0, r1, r2, r3}
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <iprintf+0x2c>)
 800748c:	b513      	push	{r0, r1, r4, lr}
 800748e:	681c      	ldr	r4, [r3, #0]
 8007490:	b124      	cbz	r4, 800749c <iprintf+0x14>
 8007492:	69a3      	ldr	r3, [r4, #24]
 8007494:	b913      	cbnz	r3, 800749c <iprintf+0x14>
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fa56 	bl	8007948 <__sinit>
 800749c:	ab05      	add	r3, sp, #20
 800749e:	9a04      	ldr	r2, [sp, #16]
 80074a0:	68a1      	ldr	r1, [r4, #8]
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 fd61 	bl	8007f6c <_vfiprintf_r>
 80074aa:	b002      	add	sp, #8
 80074ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b0:	b004      	add	sp, #16
 80074b2:	4770      	bx	lr
 80074b4:	20001f54 	.word	0x20001f54

080074b8 <_puts_r>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	460e      	mov	r6, r1
 80074bc:	4605      	mov	r5, r0
 80074be:	b118      	cbz	r0, 80074c8 <_puts_r+0x10>
 80074c0:	6983      	ldr	r3, [r0, #24]
 80074c2:	b90b      	cbnz	r3, 80074c8 <_puts_r+0x10>
 80074c4:	f000 fa40 	bl	8007948 <__sinit>
 80074c8:	69ab      	ldr	r3, [r5, #24]
 80074ca:	68ac      	ldr	r4, [r5, #8]
 80074cc:	b913      	cbnz	r3, 80074d4 <_puts_r+0x1c>
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 fa3a 	bl	8007948 <__sinit>
 80074d4:	4b23      	ldr	r3, [pc, #140]	; (8007564 <_puts_r+0xac>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d117      	bne.n	800750a <_puts_r+0x52>
 80074da:	686c      	ldr	r4, [r5, #4]
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	071b      	lsls	r3, r3, #28
 80074e0:	d51d      	bpl.n	800751e <_puts_r+0x66>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	b1db      	cbz	r3, 800751e <_puts_r+0x66>
 80074e6:	3e01      	subs	r6, #1
 80074e8:	68a3      	ldr	r3, [r4, #8]
 80074ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ee:	3b01      	subs	r3, #1
 80074f0:	60a3      	str	r3, [r4, #8]
 80074f2:	b9e9      	cbnz	r1, 8007530 <_puts_r+0x78>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da2e      	bge.n	8007556 <_puts_r+0x9e>
 80074f8:	4622      	mov	r2, r4
 80074fa:	210a      	movs	r1, #10
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 f873 	bl	80075e8 <__swbuf_r>
 8007502:	3001      	adds	r0, #1
 8007504:	d011      	beq.n	800752a <_puts_r+0x72>
 8007506:	200a      	movs	r0, #10
 8007508:	e011      	b.n	800752e <_puts_r+0x76>
 800750a:	4b17      	ldr	r3, [pc, #92]	; (8007568 <_puts_r+0xb0>)
 800750c:	429c      	cmp	r4, r3
 800750e:	d101      	bne.n	8007514 <_puts_r+0x5c>
 8007510:	68ac      	ldr	r4, [r5, #8]
 8007512:	e7e3      	b.n	80074dc <_puts_r+0x24>
 8007514:	4b15      	ldr	r3, [pc, #84]	; (800756c <_puts_r+0xb4>)
 8007516:	429c      	cmp	r4, r3
 8007518:	bf08      	it	eq
 800751a:	68ec      	ldreq	r4, [r5, #12]
 800751c:	e7de      	b.n	80074dc <_puts_r+0x24>
 800751e:	4621      	mov	r1, r4
 8007520:	4628      	mov	r0, r5
 8007522:	f000 f8b3 	bl	800768c <__swsetup_r>
 8007526:	2800      	cmp	r0, #0
 8007528:	d0dd      	beq.n	80074e6 <_puts_r+0x2e>
 800752a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	2b00      	cmp	r3, #0
 8007532:	da04      	bge.n	800753e <_puts_r+0x86>
 8007534:	69a2      	ldr	r2, [r4, #24]
 8007536:	429a      	cmp	r2, r3
 8007538:	dc06      	bgt.n	8007548 <_puts_r+0x90>
 800753a:	290a      	cmp	r1, #10
 800753c:	d004      	beq.n	8007548 <_puts_r+0x90>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	7019      	strb	r1, [r3, #0]
 8007546:	e7cf      	b.n	80074e8 <_puts_r+0x30>
 8007548:	4622      	mov	r2, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f84c 	bl	80075e8 <__swbuf_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d1c9      	bne.n	80074e8 <_puts_r+0x30>
 8007554:	e7e9      	b.n	800752a <_puts_r+0x72>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	200a      	movs	r0, #10
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	6022      	str	r2, [r4, #0]
 800755e:	7018      	strb	r0, [r3, #0]
 8007560:	e7e5      	b.n	800752e <_puts_r+0x76>
 8007562:	bf00      	nop
 8007564:	08008a08 	.word	0x08008a08
 8007568:	08008a28 	.word	0x08008a28
 800756c:	080089e8 	.word	0x080089e8

08007570 <puts>:
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <puts+0xc>)
 8007572:	4601      	mov	r1, r0
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f7ff bf9f 	b.w	80074b8 <_puts_r>
 800757a:	bf00      	nop
 800757c:	20001f54 	.word	0x20001f54

08007580 <sniprintf>:
 8007580:	b40c      	push	{r2, r3}
 8007582:	b530      	push	{r4, r5, lr}
 8007584:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <sniprintf+0x64>)
 8007586:	1e0c      	subs	r4, r1, #0
 8007588:	b09d      	sub	sp, #116	; 0x74
 800758a:	681d      	ldr	r5, [r3, #0]
 800758c:	da08      	bge.n	80075a0 <sniprintf+0x20>
 800758e:	238b      	movs	r3, #139	; 0x8b
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007596:	b01d      	add	sp, #116	; 0x74
 8007598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800759c:	b002      	add	sp, #8
 800759e:	4770      	bx	lr
 80075a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075a8:	bf14      	ite	ne
 80075aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80075ae:	4623      	moveq	r3, r4
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075b8:	9002      	str	r0, [sp, #8]
 80075ba:	9006      	str	r0, [sp, #24]
 80075bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075c2:	ab21      	add	r3, sp, #132	; 0x84
 80075c4:	a902      	add	r1, sp, #8
 80075c6:	4628      	mov	r0, r5
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	f000 fbad 	bl	8007d28 <_svfiprintf_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	bfbc      	itt	lt
 80075d2:	238b      	movlt	r3, #139	; 0x8b
 80075d4:	602b      	strlt	r3, [r5, #0]
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	d0dd      	beq.n	8007596 <sniprintf+0x16>
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e7d9      	b.n	8007596 <sniprintf+0x16>
 80075e2:	bf00      	nop
 80075e4:	20001f54 	.word	0x20001f54

080075e8 <__swbuf_r>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	460e      	mov	r6, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	4605      	mov	r5, r0
 80075f0:	b118      	cbz	r0, 80075fa <__swbuf_r+0x12>
 80075f2:	6983      	ldr	r3, [r0, #24]
 80075f4:	b90b      	cbnz	r3, 80075fa <__swbuf_r+0x12>
 80075f6:	f000 f9a7 	bl	8007948 <__sinit>
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <__swbuf_r+0x98>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	d12a      	bne.n	8007656 <__swbuf_r+0x6e>
 8007600:	686c      	ldr	r4, [r5, #4]
 8007602:	69a3      	ldr	r3, [r4, #24]
 8007604:	60a3      	str	r3, [r4, #8]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	071a      	lsls	r2, r3, #28
 800760a:	d52e      	bpl.n	800766a <__swbuf_r+0x82>
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b363      	cbz	r3, 800766a <__swbuf_r+0x82>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	1ac0      	subs	r0, r0, r3
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	b2f6      	uxtb	r6, r6
 800761a:	4283      	cmp	r3, r0
 800761c:	4637      	mov	r7, r6
 800761e:	dc04      	bgt.n	800762a <__swbuf_r+0x42>
 8007620:	4621      	mov	r1, r4
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f926 	bl	8007874 <_fflush_r>
 8007628:	bb28      	cbnz	r0, 8007676 <__swbuf_r+0x8e>
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60a3      	str	r3, [r4, #8]
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	701e      	strb	r6, [r3, #0]
 8007638:	6963      	ldr	r3, [r4, #20]
 800763a:	3001      	adds	r0, #1
 800763c:	4283      	cmp	r3, r0
 800763e:	d004      	beq.n	800764a <__swbuf_r+0x62>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	07db      	lsls	r3, r3, #31
 8007644:	d519      	bpl.n	800767a <__swbuf_r+0x92>
 8007646:	2e0a      	cmp	r6, #10
 8007648:	d117      	bne.n	800767a <__swbuf_r+0x92>
 800764a:	4621      	mov	r1, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f000 f911 	bl	8007874 <_fflush_r>
 8007652:	b190      	cbz	r0, 800767a <__swbuf_r+0x92>
 8007654:	e00f      	b.n	8007676 <__swbuf_r+0x8e>
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <__swbuf_r+0x9c>)
 8007658:	429c      	cmp	r4, r3
 800765a:	d101      	bne.n	8007660 <__swbuf_r+0x78>
 800765c:	68ac      	ldr	r4, [r5, #8]
 800765e:	e7d0      	b.n	8007602 <__swbuf_r+0x1a>
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <__swbuf_r+0xa0>)
 8007662:	429c      	cmp	r4, r3
 8007664:	bf08      	it	eq
 8007666:	68ec      	ldreq	r4, [r5, #12]
 8007668:	e7cb      	b.n	8007602 <__swbuf_r+0x1a>
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 f80d 	bl	800768c <__swsetup_r>
 8007672:	2800      	cmp	r0, #0
 8007674:	d0cc      	beq.n	8007610 <__swbuf_r+0x28>
 8007676:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800767a:	4638      	mov	r0, r7
 800767c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800767e:	bf00      	nop
 8007680:	08008a08 	.word	0x08008a08
 8007684:	08008a28 	.word	0x08008a28
 8007688:	080089e8 	.word	0x080089e8

0800768c <__swsetup_r>:
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <__swsetup_r+0xcc>)
 800768e:	b570      	push	{r4, r5, r6, lr}
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	b125      	cbz	r5, 80076a2 <__swsetup_r+0x16>
 8007698:	69ab      	ldr	r3, [r5, #24]
 800769a:	b913      	cbnz	r3, 80076a2 <__swsetup_r+0x16>
 800769c:	4628      	mov	r0, r5
 800769e:	f000 f953 	bl	8007948 <__sinit>
 80076a2:	4b2e      	ldr	r3, [pc, #184]	; (800775c <__swsetup_r+0xd0>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	d10f      	bne.n	80076c8 <__swsetup_r+0x3c>
 80076a8:	686c      	ldr	r4, [r5, #4]
 80076aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	0715      	lsls	r5, r2, #28
 80076b2:	d42c      	bmi.n	800770e <__swsetup_r+0x82>
 80076b4:	06d0      	lsls	r0, r2, #27
 80076b6:	d411      	bmi.n	80076dc <__swsetup_r+0x50>
 80076b8:	2209      	movs	r2, #9
 80076ba:	6032      	str	r2, [r6, #0]
 80076bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c6:	e03e      	b.n	8007746 <__swsetup_r+0xba>
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__swsetup_r+0xd4>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d101      	bne.n	80076d2 <__swsetup_r+0x46>
 80076ce:	68ac      	ldr	r4, [r5, #8]
 80076d0:	e7eb      	b.n	80076aa <__swsetup_r+0x1e>
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <__swsetup_r+0xd8>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	bf08      	it	eq
 80076d8:	68ec      	ldreq	r4, [r5, #12]
 80076da:	e7e6      	b.n	80076aa <__swsetup_r+0x1e>
 80076dc:	0751      	lsls	r1, r2, #29
 80076de:	d512      	bpl.n	8007706 <__swsetup_r+0x7a>
 80076e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076e2:	b141      	cbz	r1, 80076f6 <__swsetup_r+0x6a>
 80076e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d002      	beq.n	80076f2 <__swsetup_r+0x66>
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 fa19 	bl	8007b24 <_free_r>
 80076f2:	2300      	movs	r3, #0
 80076f4:	6363      	str	r3, [r4, #52]	; 0x34
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0308 	orr.w	r3, r3, #8
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	b94b      	cbnz	r3, 8007726 <__swsetup_r+0x9a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d003      	beq.n	8007726 <__swsetup_r+0x9a>
 800771e:	4621      	mov	r1, r4
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f9bf 	bl	8007aa4 <__smakebuf_r>
 8007726:	89a2      	ldrh	r2, [r4, #12]
 8007728:	f012 0301 	ands.w	r3, r2, #1
 800772c:	d00c      	beq.n	8007748 <__swsetup_r+0xbc>
 800772e:	2300      	movs	r3, #0
 8007730:	60a3      	str	r3, [r4, #8]
 8007732:	6963      	ldr	r3, [r4, #20]
 8007734:	425b      	negs	r3, r3
 8007736:	61a3      	str	r3, [r4, #24]
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	b953      	cbnz	r3, 8007752 <__swsetup_r+0xc6>
 800773c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007740:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007744:	d1ba      	bne.n	80076bc <__swsetup_r+0x30>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	0792      	lsls	r2, r2, #30
 800774a:	bf58      	it	pl
 800774c:	6963      	ldrpl	r3, [r4, #20]
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	e7f2      	b.n	8007738 <__swsetup_r+0xac>
 8007752:	2000      	movs	r0, #0
 8007754:	e7f7      	b.n	8007746 <__swsetup_r+0xba>
 8007756:	bf00      	nop
 8007758:	20001f54 	.word	0x20001f54
 800775c:	08008a08 	.word	0x08008a08
 8007760:	08008a28 	.word	0x08008a28
 8007764:	080089e8 	.word	0x080089e8

08007768 <__sflush_r>:
 8007768:	898a      	ldrh	r2, [r1, #12]
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	4605      	mov	r5, r0
 8007770:	0710      	lsls	r0, r2, #28
 8007772:	460c      	mov	r4, r1
 8007774:	d458      	bmi.n	8007828 <__sflush_r+0xc0>
 8007776:	684b      	ldr	r3, [r1, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	dc05      	bgt.n	8007788 <__sflush_r+0x20>
 800777c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc02      	bgt.n	8007788 <__sflush_r+0x20>
 8007782:	2000      	movs	r0, #0
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800778a:	2e00      	cmp	r6, #0
 800778c:	d0f9      	beq.n	8007782 <__sflush_r+0x1a>
 800778e:	2300      	movs	r3, #0
 8007790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007794:	682f      	ldr	r7, [r5, #0]
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	d032      	beq.n	8007802 <__sflush_r+0x9a>
 800779c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	075a      	lsls	r2, r3, #29
 80077a2:	d505      	bpl.n	80077b0 <__sflush_r+0x48>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	1ac0      	subs	r0, r0, r3
 80077a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077aa:	b10b      	cbz	r3, 80077b0 <__sflush_r+0x48>
 80077ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ae:	1ac0      	subs	r0, r0, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	4602      	mov	r2, r0
 80077b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b6:	6a21      	ldr	r1, [r4, #32]
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b0      	blx	r6
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	d106      	bne.n	80077d0 <__sflush_r+0x68>
 80077c2:	6829      	ldr	r1, [r5, #0]
 80077c4:	291d      	cmp	r1, #29
 80077c6:	d848      	bhi.n	800785a <__sflush_r+0xf2>
 80077c8:	4a29      	ldr	r2, [pc, #164]	; (8007870 <__sflush_r+0x108>)
 80077ca:	40ca      	lsrs	r2, r1
 80077cc:	07d6      	lsls	r6, r2, #31
 80077ce:	d544      	bpl.n	800785a <__sflush_r+0xf2>
 80077d0:	2200      	movs	r2, #0
 80077d2:	6062      	str	r2, [r4, #4]
 80077d4:	04d9      	lsls	r1, r3, #19
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	6022      	str	r2, [r4, #0]
 80077da:	d504      	bpl.n	80077e6 <__sflush_r+0x7e>
 80077dc:	1c42      	adds	r2, r0, #1
 80077de:	d101      	bne.n	80077e4 <__sflush_r+0x7c>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b903      	cbnz	r3, 80077e6 <__sflush_r+0x7e>
 80077e4:	6560      	str	r0, [r4, #84]	; 0x54
 80077e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e8:	602f      	str	r7, [r5, #0]
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d0c9      	beq.n	8007782 <__sflush_r+0x1a>
 80077ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f2:	4299      	cmp	r1, r3
 80077f4:	d002      	beq.n	80077fc <__sflush_r+0x94>
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f994 	bl	8007b24 <_free_r>
 80077fc:	2000      	movs	r0, #0
 80077fe:	6360      	str	r0, [r4, #52]	; 0x34
 8007800:	e7c0      	b.n	8007784 <__sflush_r+0x1c>
 8007802:	2301      	movs	r3, #1
 8007804:	4628      	mov	r0, r5
 8007806:	47b0      	blx	r6
 8007808:	1c41      	adds	r1, r0, #1
 800780a:	d1c8      	bne.n	800779e <__sflush_r+0x36>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0c5      	beq.n	800779e <__sflush_r+0x36>
 8007812:	2b1d      	cmp	r3, #29
 8007814:	d001      	beq.n	800781a <__sflush_r+0xb2>
 8007816:	2b16      	cmp	r3, #22
 8007818:	d101      	bne.n	800781e <__sflush_r+0xb6>
 800781a:	602f      	str	r7, [r5, #0]
 800781c:	e7b1      	b.n	8007782 <__sflush_r+0x1a>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e7ad      	b.n	8007784 <__sflush_r+0x1c>
 8007828:	690f      	ldr	r7, [r1, #16]
 800782a:	2f00      	cmp	r7, #0
 800782c:	d0a9      	beq.n	8007782 <__sflush_r+0x1a>
 800782e:	0793      	lsls	r3, r2, #30
 8007830:	680e      	ldr	r6, [r1, #0]
 8007832:	bf08      	it	eq
 8007834:	694b      	ldreq	r3, [r1, #20]
 8007836:	600f      	str	r7, [r1, #0]
 8007838:	bf18      	it	ne
 800783a:	2300      	movne	r3, #0
 800783c:	eba6 0807 	sub.w	r8, r6, r7
 8007840:	608b      	str	r3, [r1, #8]
 8007842:	f1b8 0f00 	cmp.w	r8, #0
 8007846:	dd9c      	ble.n	8007782 <__sflush_r+0x1a>
 8007848:	4643      	mov	r3, r8
 800784a:	463a      	mov	r2, r7
 800784c:	6a21      	ldr	r1, [r4, #32]
 800784e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007850:	4628      	mov	r0, r5
 8007852:	47b0      	blx	r6
 8007854:	2800      	cmp	r0, #0
 8007856:	dc06      	bgt.n	8007866 <__sflush_r+0xfe>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007864:	e78e      	b.n	8007784 <__sflush_r+0x1c>
 8007866:	4407      	add	r7, r0
 8007868:	eba8 0800 	sub.w	r8, r8, r0
 800786c:	e7e9      	b.n	8007842 <__sflush_r+0xda>
 800786e:	bf00      	nop
 8007870:	20400001 	.word	0x20400001

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b1db      	cbz	r3, 80078b6 <_fflush_r+0x42>
 800787e:	b118      	cbz	r0, 8007888 <_fflush_r+0x14>
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	b90b      	cbnz	r3, 8007888 <_fflush_r+0x14>
 8007884:	f000 f860 	bl	8007948 <__sinit>
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <_fflush_r+0x48>)
 800788a:	429c      	cmp	r4, r3
 800788c:	d109      	bne.n	80078a2 <_fflush_r+0x2e>
 800788e:	686c      	ldr	r4, [r5, #4]
 8007890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007894:	b17b      	cbz	r3, 80078b6 <_fflush_r+0x42>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789e:	f7ff bf63 	b.w	8007768 <__sflush_r>
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <_fflush_r+0x4c>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d101      	bne.n	80078ac <_fflush_r+0x38>
 80078a8:	68ac      	ldr	r4, [r5, #8]
 80078aa:	e7f1      	b.n	8007890 <_fflush_r+0x1c>
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_fflush_r+0x50>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	bf08      	it	eq
 80078b2:	68ec      	ldreq	r4, [r5, #12]
 80078b4:	e7ec      	b.n	8007890 <_fflush_r+0x1c>
 80078b6:	2000      	movs	r0, #0
 80078b8:	bd38      	pop	{r3, r4, r5, pc}
 80078ba:	bf00      	nop
 80078bc:	08008a08 	.word	0x08008a08
 80078c0:	08008a28 	.word	0x08008a28
 80078c4:	080089e8 	.word	0x080089e8

080078c8 <std>:
 80078c8:	2300      	movs	r3, #0
 80078ca:	b510      	push	{r4, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	e9c0 3300 	strd	r3, r3, [r0]
 80078d2:	6083      	str	r3, [r0, #8]
 80078d4:	8181      	strh	r1, [r0, #12]
 80078d6:	6643      	str	r3, [r0, #100]	; 0x64
 80078d8:	81c2      	strh	r2, [r0, #14]
 80078da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078de:	6183      	str	r3, [r0, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	2208      	movs	r2, #8
 80078e4:	305c      	adds	r0, #92	; 0x5c
 80078e6:	f7ff fdc7 	bl	8007478 <memset>
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <std+0x38>)
 80078ec:	6263      	str	r3, [r4, #36]	; 0x24
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x3c>)
 80078f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <std+0x40>)
 80078f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x44>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	6323      	str	r3, [r4, #48]	; 0x30
 80078fc:	bd10      	pop	{r4, pc}
 80078fe:	bf00      	nop
 8007900:	080084c9 	.word	0x080084c9
 8007904:	080084eb 	.word	0x080084eb
 8007908:	08008523 	.word	0x08008523
 800790c:	08008547 	.word	0x08008547

08007910 <_cleanup_r>:
 8007910:	4901      	ldr	r1, [pc, #4]	; (8007918 <_cleanup_r+0x8>)
 8007912:	f000 b885 	b.w	8007a20 <_fwalk_reent>
 8007916:	bf00      	nop
 8007918:	08007875 	.word	0x08007875

0800791c <__sfmoreglue>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	1e4a      	subs	r2, r1, #1
 8007920:	2568      	movs	r5, #104	; 0x68
 8007922:	4355      	muls	r5, r2
 8007924:	460e      	mov	r6, r1
 8007926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800792a:	f000 f949 	bl	8007bc0 <_malloc_r>
 800792e:	4604      	mov	r4, r0
 8007930:	b140      	cbz	r0, 8007944 <__sfmoreglue+0x28>
 8007932:	2100      	movs	r1, #0
 8007934:	e9c0 1600 	strd	r1, r6, [r0]
 8007938:	300c      	adds	r0, #12
 800793a:	60a0      	str	r0, [r4, #8]
 800793c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007940:	f7ff fd9a 	bl	8007478 <memset>
 8007944:	4620      	mov	r0, r4
 8007946:	bd70      	pop	{r4, r5, r6, pc}

08007948 <__sinit>:
 8007948:	6983      	ldr	r3, [r0, #24]
 800794a:	b510      	push	{r4, lr}
 800794c:	4604      	mov	r4, r0
 800794e:	bb33      	cbnz	r3, 800799e <__sinit+0x56>
 8007950:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007954:	6503      	str	r3, [r0, #80]	; 0x50
 8007956:	4b12      	ldr	r3, [pc, #72]	; (80079a0 <__sinit+0x58>)
 8007958:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <__sinit+0x5c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6282      	str	r2, [r0, #40]	; 0x28
 800795e:	4298      	cmp	r0, r3
 8007960:	bf04      	itt	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	6183      	streq	r3, [r0, #24]
 8007966:	f000 f81f 	bl	80079a8 <__sfp>
 800796a:	6060      	str	r0, [r4, #4]
 800796c:	4620      	mov	r0, r4
 800796e:	f000 f81b 	bl	80079a8 <__sfp>
 8007972:	60a0      	str	r0, [r4, #8]
 8007974:	4620      	mov	r0, r4
 8007976:	f000 f817 	bl	80079a8 <__sfp>
 800797a:	2200      	movs	r2, #0
 800797c:	60e0      	str	r0, [r4, #12]
 800797e:	2104      	movs	r1, #4
 8007980:	6860      	ldr	r0, [r4, #4]
 8007982:	f7ff ffa1 	bl	80078c8 <std>
 8007986:	2201      	movs	r2, #1
 8007988:	2109      	movs	r1, #9
 800798a:	68a0      	ldr	r0, [r4, #8]
 800798c:	f7ff ff9c 	bl	80078c8 <std>
 8007990:	2202      	movs	r2, #2
 8007992:	2112      	movs	r1, #18
 8007994:	68e0      	ldr	r0, [r4, #12]
 8007996:	f7ff ff97 	bl	80078c8 <std>
 800799a:	2301      	movs	r3, #1
 800799c:	61a3      	str	r3, [r4, #24]
 800799e:	bd10      	pop	{r4, pc}
 80079a0:	080089e4 	.word	0x080089e4
 80079a4:	08007911 	.word	0x08007911

080079a8 <__sfp>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <__sfp+0x70>)
 80079ac:	681e      	ldr	r6, [r3, #0]
 80079ae:	69b3      	ldr	r3, [r6, #24]
 80079b0:	4607      	mov	r7, r0
 80079b2:	b913      	cbnz	r3, 80079ba <__sfp+0x12>
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff ffc7 	bl	8007948 <__sinit>
 80079ba:	3648      	adds	r6, #72	; 0x48
 80079bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	d503      	bpl.n	80079cc <__sfp+0x24>
 80079c4:	6833      	ldr	r3, [r6, #0]
 80079c6:	b133      	cbz	r3, 80079d6 <__sfp+0x2e>
 80079c8:	6836      	ldr	r6, [r6, #0]
 80079ca:	e7f7      	b.n	80079bc <__sfp+0x14>
 80079cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079d0:	b16d      	cbz	r5, 80079ee <__sfp+0x46>
 80079d2:	3468      	adds	r4, #104	; 0x68
 80079d4:	e7f4      	b.n	80079c0 <__sfp+0x18>
 80079d6:	2104      	movs	r1, #4
 80079d8:	4638      	mov	r0, r7
 80079da:	f7ff ff9f 	bl	800791c <__sfmoreglue>
 80079de:	6030      	str	r0, [r6, #0]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1f1      	bne.n	80079c8 <__sfp+0x20>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	4604      	mov	r4, r0
 80079ea:	4620      	mov	r0, r4
 80079ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <__sfp+0x74>)
 80079f0:	6665      	str	r5, [r4, #100]	; 0x64
 80079f2:	e9c4 5500 	strd	r5, r5, [r4]
 80079f6:	60a5      	str	r5, [r4, #8]
 80079f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80079fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007a00:	2208      	movs	r2, #8
 8007a02:	4629      	mov	r1, r5
 8007a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a08:	f7ff fd36 	bl	8007478 <memset>
 8007a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a14:	e7e9      	b.n	80079ea <__sfp+0x42>
 8007a16:	bf00      	nop
 8007a18:	080089e4 	.word	0x080089e4
 8007a1c:	ffff0001 	.word	0xffff0001

08007a20 <_fwalk_reent>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	4680      	mov	r8, r0
 8007a26:	4689      	mov	r9, r1
 8007a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	b914      	cbnz	r4, 8007a36 <_fwalk_reent+0x16>
 8007a30:	4630      	mov	r0, r6
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007a3a:	3f01      	subs	r7, #1
 8007a3c:	d501      	bpl.n	8007a42 <_fwalk_reent+0x22>
 8007a3e:	6824      	ldr	r4, [r4, #0]
 8007a40:	e7f5      	b.n	8007a2e <_fwalk_reent+0xe>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d907      	bls.n	8007a58 <_fwalk_reent+0x38>
 8007a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	d003      	beq.n	8007a58 <_fwalk_reent+0x38>
 8007a50:	4629      	mov	r1, r5
 8007a52:	4640      	mov	r0, r8
 8007a54:	47c8      	blx	r9
 8007a56:	4306      	orrs	r6, r0
 8007a58:	3568      	adds	r5, #104	; 0x68
 8007a5a:	e7ee      	b.n	8007a3a <_fwalk_reent+0x1a>

08007a5c <__swhatbuf_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	460e      	mov	r6, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	b096      	sub	sp, #88	; 0x58
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	da07      	bge.n	8007a7e <__swhatbuf_r+0x22>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	89b3      	ldrh	r3, [r6, #12]
 8007a74:	061a      	lsls	r2, r3, #24
 8007a76:	d410      	bmi.n	8007a9a <__swhatbuf_r+0x3e>
 8007a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7c:	e00e      	b.n	8007a9c <__swhatbuf_r+0x40>
 8007a7e:	466a      	mov	r2, sp
 8007a80:	f000 fd88 	bl	8008594 <_fstat_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	dbf2      	blt.n	8007a6e <__swhatbuf_r+0x12>
 8007a88:	9a01      	ldr	r2, [sp, #4]
 8007a8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a92:	425a      	negs	r2, r3
 8007a94:	415a      	adcs	r2, r3
 8007a96:	602a      	str	r2, [r5, #0]
 8007a98:	e7ee      	b.n	8007a78 <__swhatbuf_r+0x1c>
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	b016      	add	sp, #88	; 0x58
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}

08007aa4 <__smakebuf_r>:
 8007aa4:	898b      	ldrh	r3, [r1, #12]
 8007aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa8:	079d      	lsls	r5, r3, #30
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	d507      	bpl.n	8007ac0 <__smakebuf_r+0x1c>
 8007ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	6163      	str	r3, [r4, #20]
 8007abc:	b002      	add	sp, #8
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	ab01      	add	r3, sp, #4
 8007ac2:	466a      	mov	r2, sp
 8007ac4:	f7ff ffca 	bl	8007a5c <__swhatbuf_r>
 8007ac8:	9900      	ldr	r1, [sp, #0]
 8007aca:	4605      	mov	r5, r0
 8007acc:	4630      	mov	r0, r6
 8007ace:	f000 f877 	bl	8007bc0 <_malloc_r>
 8007ad2:	b948      	cbnz	r0, 8007ae8 <__smakebuf_r+0x44>
 8007ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad8:	059a      	lsls	r2, r3, #22
 8007ada:	d4ef      	bmi.n	8007abc <__smakebuf_r+0x18>
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	e7e3      	b.n	8007ab0 <__smakebuf_r+0xc>
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <__smakebuf_r+0x7c>)
 8007aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	6163      	str	r3, [r4, #20]
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	6120      	str	r0, [r4, #16]
 8007afe:	b15b      	cbz	r3, 8007b18 <__smakebuf_r+0x74>
 8007b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b04:	4630      	mov	r0, r6
 8007b06:	f000 fd57 	bl	80085b8 <_isatty_r>
 8007b0a:	b128      	cbz	r0, 8007b18 <__smakebuf_r+0x74>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	431d      	orrs	r5, r3
 8007b1c:	81a5      	strh	r5, [r4, #12]
 8007b1e:	e7cd      	b.n	8007abc <__smakebuf_r+0x18>
 8007b20:	08007911 	.word	0x08007911

08007b24 <_free_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	d045      	beq.n	8007bb8 <_free_r+0x94>
 8007b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b30:	1f0c      	subs	r4, r1, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bfb8      	it	lt
 8007b36:	18e4      	addlt	r4, r4, r3
 8007b38:	f000 fd84 	bl	8008644 <__malloc_lock>
 8007b3c:	4a1f      	ldr	r2, [pc, #124]	; (8007bbc <_free_r+0x98>)
 8007b3e:	6813      	ldr	r3, [r2, #0]
 8007b40:	4610      	mov	r0, r2
 8007b42:	b933      	cbnz	r3, 8007b52 <_free_r+0x2e>
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6014      	str	r4, [r2, #0]
 8007b48:	4628      	mov	r0, r5
 8007b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b4e:	f000 bd7a 	b.w	8008646 <__malloc_unlock>
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	d90c      	bls.n	8007b70 <_free_r+0x4c>
 8007b56:	6821      	ldr	r1, [r4, #0]
 8007b58:	1862      	adds	r2, r4, r1
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	bf04      	itt	eq
 8007b5e:	681a      	ldreq	r2, [r3, #0]
 8007b60:	685b      	ldreq	r3, [r3, #4]
 8007b62:	6063      	str	r3, [r4, #4]
 8007b64:	bf04      	itt	eq
 8007b66:	1852      	addeq	r2, r2, r1
 8007b68:	6022      	streq	r2, [r4, #0]
 8007b6a:	6004      	str	r4, [r0, #0]
 8007b6c:	e7ec      	b.n	8007b48 <_free_r+0x24>
 8007b6e:	4613      	mov	r3, r2
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	b10a      	cbz	r2, 8007b78 <_free_r+0x54>
 8007b74:	42a2      	cmp	r2, r4
 8007b76:	d9fa      	bls.n	8007b6e <_free_r+0x4a>
 8007b78:	6819      	ldr	r1, [r3, #0]
 8007b7a:	1858      	adds	r0, r3, r1
 8007b7c:	42a0      	cmp	r0, r4
 8007b7e:	d10b      	bne.n	8007b98 <_free_r+0x74>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	4401      	add	r1, r0
 8007b84:	1858      	adds	r0, r3, r1
 8007b86:	4282      	cmp	r2, r0
 8007b88:	6019      	str	r1, [r3, #0]
 8007b8a:	d1dd      	bne.n	8007b48 <_free_r+0x24>
 8007b8c:	6810      	ldr	r0, [r2, #0]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	4401      	add	r1, r0
 8007b94:	6019      	str	r1, [r3, #0]
 8007b96:	e7d7      	b.n	8007b48 <_free_r+0x24>
 8007b98:	d902      	bls.n	8007ba0 <_free_r+0x7c>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	e7d3      	b.n	8007b48 <_free_r+0x24>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	1821      	adds	r1, r4, r0
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	bf04      	itt	eq
 8007ba8:	6811      	ldreq	r1, [r2, #0]
 8007baa:	6852      	ldreq	r2, [r2, #4]
 8007bac:	6062      	str	r2, [r4, #4]
 8007bae:	bf04      	itt	eq
 8007bb0:	1809      	addeq	r1, r1, r0
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	605c      	str	r4, [r3, #4]
 8007bb6:	e7c7      	b.n	8007b48 <_free_r+0x24>
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	bf00      	nop
 8007bbc:	20001fe4 	.word	0x20001fe4

08007bc0 <_malloc_r>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	1ccd      	adds	r5, r1, #3
 8007bc4:	f025 0503 	bic.w	r5, r5, #3
 8007bc8:	3508      	adds	r5, #8
 8007bca:	2d0c      	cmp	r5, #12
 8007bcc:	bf38      	it	cc
 8007bce:	250c      	movcc	r5, #12
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	db01      	blt.n	8007bda <_malloc_r+0x1a>
 8007bd6:	42a9      	cmp	r1, r5
 8007bd8:	d903      	bls.n	8007be2 <_malloc_r+0x22>
 8007bda:	230c      	movs	r3, #12
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	2000      	movs	r0, #0
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	f000 fd2f 	bl	8008644 <__malloc_lock>
 8007be6:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <_malloc_r+0xac>)
 8007be8:	6814      	ldr	r4, [r2, #0]
 8007bea:	4621      	mov	r1, r4
 8007bec:	b991      	cbnz	r1, 8007c14 <_malloc_r+0x54>
 8007bee:	4c20      	ldr	r4, [pc, #128]	; (8007c70 <_malloc_r+0xb0>)
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	b91b      	cbnz	r3, 8007bfc <_malloc_r+0x3c>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f000 fc57 	bl	80084a8 <_sbrk_r>
 8007bfa:	6020      	str	r0, [r4, #0]
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f000 fc52 	bl	80084a8 <_sbrk_r>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d124      	bne.n	8007c52 <_malloc_r+0x92>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 fd1a 	bl	8008646 <__malloc_unlock>
 8007c12:	e7e4      	b.n	8007bde <_malloc_r+0x1e>
 8007c14:	680b      	ldr	r3, [r1, #0]
 8007c16:	1b5b      	subs	r3, r3, r5
 8007c18:	d418      	bmi.n	8007c4c <_malloc_r+0x8c>
 8007c1a:	2b0b      	cmp	r3, #11
 8007c1c:	d90f      	bls.n	8007c3e <_malloc_r+0x7e>
 8007c1e:	600b      	str	r3, [r1, #0]
 8007c20:	50cd      	str	r5, [r1, r3]
 8007c22:	18cc      	adds	r4, r1, r3
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 fd0e 	bl	8008646 <__malloc_unlock>
 8007c2a:	f104 000b 	add.w	r0, r4, #11
 8007c2e:	1d23      	adds	r3, r4, #4
 8007c30:	f020 0007 	bic.w	r0, r0, #7
 8007c34:	1ac3      	subs	r3, r0, r3
 8007c36:	d0d3      	beq.n	8007be0 <_malloc_r+0x20>
 8007c38:	425a      	negs	r2, r3
 8007c3a:	50e2      	str	r2, [r4, r3]
 8007c3c:	e7d0      	b.n	8007be0 <_malloc_r+0x20>
 8007c3e:	428c      	cmp	r4, r1
 8007c40:	684b      	ldr	r3, [r1, #4]
 8007c42:	bf16      	itet	ne
 8007c44:	6063      	strne	r3, [r4, #4]
 8007c46:	6013      	streq	r3, [r2, #0]
 8007c48:	460c      	movne	r4, r1
 8007c4a:	e7eb      	b.n	8007c24 <_malloc_r+0x64>
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	6849      	ldr	r1, [r1, #4]
 8007c50:	e7cc      	b.n	8007bec <_malloc_r+0x2c>
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d005      	beq.n	8007c68 <_malloc_r+0xa8>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f000 fc22 	bl	80084a8 <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0cf      	beq.n	8007c08 <_malloc_r+0x48>
 8007c68:	6025      	str	r5, [r4, #0]
 8007c6a:	e7db      	b.n	8007c24 <_malloc_r+0x64>
 8007c6c:	20001fe4 	.word	0x20001fe4
 8007c70:	20001fe8 	.word	0x20001fe8

08007c74 <__ssputs_r>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	688e      	ldr	r6, [r1, #8]
 8007c7a:	429e      	cmp	r6, r3
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4690      	mov	r8, r2
 8007c82:	4699      	mov	r9, r3
 8007c84:	d837      	bhi.n	8007cf6 <__ssputs_r+0x82>
 8007c86:	898a      	ldrh	r2, [r1, #12]
 8007c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c8c:	d031      	beq.n	8007cf2 <__ssputs_r+0x7e>
 8007c8e:	6825      	ldr	r5, [r4, #0]
 8007c90:	6909      	ldr	r1, [r1, #16]
 8007c92:	1a6f      	subs	r7, r5, r1
 8007c94:	6965      	ldr	r5, [r4, #20]
 8007c96:	2302      	movs	r3, #2
 8007c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ca0:	f109 0301 	add.w	r3, r9, #1
 8007ca4:	443b      	add	r3, r7
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	bf38      	it	cc
 8007caa:	461d      	movcc	r5, r3
 8007cac:	0553      	lsls	r3, r2, #21
 8007cae:	d530      	bpl.n	8007d12 <__ssputs_r+0x9e>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7ff ff85 	bl	8007bc0 <_malloc_r>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	b950      	cbnz	r0, 8007cd0 <__ssputs_r+0x5c>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	f8ca 3000 	str.w	r3, [sl]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	463a      	mov	r2, r7
 8007cd2:	6921      	ldr	r1, [r4, #16]
 8007cd4:	f000 fc92 	bl	80085fc <memcpy>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	6126      	str	r6, [r4, #16]
 8007ce6:	6165      	str	r5, [r4, #20]
 8007ce8:	443e      	add	r6, r7
 8007cea:	1bed      	subs	r5, r5, r7
 8007cec:	6026      	str	r6, [r4, #0]
 8007cee:	60a5      	str	r5, [r4, #8]
 8007cf0:	464e      	mov	r6, r9
 8007cf2:	454e      	cmp	r6, r9
 8007cf4:	d900      	bls.n	8007cf8 <__ssputs_r+0x84>
 8007cf6:	464e      	mov	r6, r9
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	f000 fc88 	bl	8008612 <memmove>
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	1b9b      	subs	r3, r3, r6
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	441e      	add	r6, r3
 8007d0c:	6026      	str	r6, [r4, #0]
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e7dc      	b.n	8007ccc <__ssputs_r+0x58>
 8007d12:	462a      	mov	r2, r5
 8007d14:	f000 fc98 	bl	8008648 <_realloc_r>
 8007d18:	4606      	mov	r6, r0
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1e2      	bne.n	8007ce4 <__ssputs_r+0x70>
 8007d1e:	6921      	ldr	r1, [r4, #16]
 8007d20:	4650      	mov	r0, sl
 8007d22:	f7ff feff 	bl	8007b24 <_free_r>
 8007d26:	e7c8      	b.n	8007cba <__ssputs_r+0x46>

08007d28 <_svfiprintf_r>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	898b      	ldrh	r3, [r1, #12]
 8007d30:	061f      	lsls	r7, r3, #24
 8007d32:	b09d      	sub	sp, #116	; 0x74
 8007d34:	4680      	mov	r8, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4616      	mov	r6, r2
 8007d3a:	d50f      	bpl.n	8007d5c <_svfiprintf_r+0x34>
 8007d3c:	690b      	ldr	r3, [r1, #16]
 8007d3e:	b96b      	cbnz	r3, 8007d5c <_svfiprintf_r+0x34>
 8007d40:	2140      	movs	r1, #64	; 0x40
 8007d42:	f7ff ff3d 	bl	8007bc0 <_malloc_r>
 8007d46:	6020      	str	r0, [r4, #0]
 8007d48:	6120      	str	r0, [r4, #16]
 8007d4a:	b928      	cbnz	r0, 8007d58 <_svfiprintf_r+0x30>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	f8c8 3000 	str.w	r3, [r8]
 8007d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d56:	e0c8      	b.n	8007eea <_svfiprintf_r+0x1c2>
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d60:	2320      	movs	r3, #32
 8007d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d66:	2330      	movs	r3, #48	; 0x30
 8007d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6c:	9503      	str	r5, [sp, #12]
 8007d6e:	f04f 0b01 	mov.w	fp, #1
 8007d72:	4637      	mov	r7, r6
 8007d74:	463d      	mov	r5, r7
 8007d76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d7a:	b10b      	cbz	r3, 8007d80 <_svfiprintf_r+0x58>
 8007d7c:	2b25      	cmp	r3, #37	; 0x25
 8007d7e:	d13e      	bne.n	8007dfe <_svfiprintf_r+0xd6>
 8007d80:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x76>
 8007d86:	4653      	mov	r3, sl
 8007d88:	4632      	mov	r2, r6
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	f7ff ff71 	bl	8007c74 <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80a4 	beq.w	8007ee0 <_svfiprintf_r+0x1b8>
 8007d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9a:	4453      	add	r3, sl
 8007d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9e:	783b      	ldrb	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 809d 	beq.w	8007ee0 <_svfiprintf_r+0x1b8>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007db8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dba:	462f      	mov	r7, r5
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007dc2:	4850      	ldr	r0, [pc, #320]	; (8007f04 <_svfiprintf_r+0x1dc>)
 8007dc4:	f7f8 fa2c 	bl	8000220 <memchr>
 8007dc8:	9b04      	ldr	r3, [sp, #16]
 8007dca:	b9d0      	cbnz	r0, 8007e02 <_svfiprintf_r+0xda>
 8007dcc:	06d9      	lsls	r1, r3, #27
 8007dce:	bf44      	itt	mi
 8007dd0:	2220      	movmi	r2, #32
 8007dd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007dd6:	071a      	lsls	r2, r3, #28
 8007dd8:	bf44      	itt	mi
 8007dda:	222b      	movmi	r2, #43	; 0x2b
 8007ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007de0:	782a      	ldrb	r2, [r5, #0]
 8007de2:	2a2a      	cmp	r2, #42	; 0x2a
 8007de4:	d015      	beq.n	8007e12 <_svfiprintf_r+0xea>
 8007de6:	9a07      	ldr	r2, [sp, #28]
 8007de8:	462f      	mov	r7, r5
 8007dea:	2000      	movs	r0, #0
 8007dec:	250a      	movs	r5, #10
 8007dee:	4639      	mov	r1, r7
 8007df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df4:	3b30      	subs	r3, #48	; 0x30
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d94d      	bls.n	8007e96 <_svfiprintf_r+0x16e>
 8007dfa:	b1b8      	cbz	r0, 8007e2c <_svfiprintf_r+0x104>
 8007dfc:	e00f      	b.n	8007e1e <_svfiprintf_r+0xf6>
 8007dfe:	462f      	mov	r7, r5
 8007e00:	e7b8      	b.n	8007d74 <_svfiprintf_r+0x4c>
 8007e02:	4a40      	ldr	r2, [pc, #256]	; (8007f04 <_svfiprintf_r+0x1dc>)
 8007e04:	1a80      	subs	r0, r0, r2
 8007e06:	fa0b f000 	lsl.w	r0, fp, r0
 8007e0a:	4318      	orrs	r0, r3
 8007e0c:	9004      	str	r0, [sp, #16]
 8007e0e:	463d      	mov	r5, r7
 8007e10:	e7d3      	b.n	8007dba <_svfiprintf_r+0x92>
 8007e12:	9a03      	ldr	r2, [sp, #12]
 8007e14:	1d11      	adds	r1, r2, #4
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	9103      	str	r1, [sp, #12]
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	db01      	blt.n	8007e22 <_svfiprintf_r+0xfa>
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e004      	b.n	8007e2c <_svfiprintf_r+0x104>
 8007e22:	4252      	negs	r2, r2
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	9207      	str	r2, [sp, #28]
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	783b      	ldrb	r3, [r7, #0]
 8007e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e30:	d10c      	bne.n	8007e4c <_svfiprintf_r+0x124>
 8007e32:	787b      	ldrb	r3, [r7, #1]
 8007e34:	2b2a      	cmp	r3, #42	; 0x2a
 8007e36:	d133      	bne.n	8007ea0 <_svfiprintf_r+0x178>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	9203      	str	r2, [sp, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bfb8      	it	lt
 8007e44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e48:	3702      	adds	r7, #2
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	4d2e      	ldr	r5, [pc, #184]	; (8007f08 <_svfiprintf_r+0x1e0>)
 8007e4e:	7839      	ldrb	r1, [r7, #0]
 8007e50:	2203      	movs	r2, #3
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7f8 f9e4 	bl	8000220 <memchr>
 8007e58:	b138      	cbz	r0, 8007e6a <_svfiprintf_r+0x142>
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	1b40      	subs	r0, r0, r5
 8007e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	4303      	orrs	r3, r0
 8007e66:	3701      	adds	r7, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	7839      	ldrb	r1, [r7, #0]
 8007e6c:	4827      	ldr	r0, [pc, #156]	; (8007f0c <_svfiprintf_r+0x1e4>)
 8007e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e72:	2206      	movs	r2, #6
 8007e74:	1c7e      	adds	r6, r7, #1
 8007e76:	f7f8 f9d3 	bl	8000220 <memchr>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d038      	beq.n	8007ef0 <_svfiprintf_r+0x1c8>
 8007e7e:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <_svfiprintf_r+0x1e8>)
 8007e80:	bb13      	cbnz	r3, 8007ec8 <_svfiprintf_r+0x1a0>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	3307      	adds	r3, #7
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	444b      	add	r3, r9
 8007e92:	9309      	str	r3, [sp, #36]	; 0x24
 8007e94:	e76d      	b.n	8007d72 <_svfiprintf_r+0x4a>
 8007e96:	fb05 3202 	mla	r2, r5, r2, r3
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	e7a6      	b.n	8007dee <_svfiprintf_r+0xc6>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	3701      	adds	r7, #1
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	250a      	movs	r5, #10
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb0:	3a30      	subs	r2, #48	; 0x30
 8007eb2:	2a09      	cmp	r2, #9
 8007eb4:	d903      	bls.n	8007ebe <_svfiprintf_r+0x196>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0c8      	beq.n	8007e4c <_svfiprintf_r+0x124>
 8007eba:	9105      	str	r1, [sp, #20]
 8007ebc:	e7c6      	b.n	8007e4c <_svfiprintf_r+0x124>
 8007ebe:	fb05 2101 	mla	r1, r5, r1, r2
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	e7f0      	b.n	8007eaa <_svfiprintf_r+0x182>
 8007ec8:	ab03      	add	r3, sp, #12
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <_svfiprintf_r+0x1ec>)
 8007ed0:	a904      	add	r1, sp, #16
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007edc:	4681      	mov	r9, r0
 8007ede:	d1d6      	bne.n	8007e8e <_svfiprintf_r+0x166>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	065b      	lsls	r3, r3, #25
 8007ee4:	f53f af35 	bmi.w	8007d52 <_svfiprintf_r+0x2a>
 8007ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eea:	b01d      	add	sp, #116	; 0x74
 8007eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef0:	ab03      	add	r3, sp, #12
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <_svfiprintf_r+0x1ec>)
 8007ef8:	a904      	add	r1, sp, #16
 8007efa:	4640      	mov	r0, r8
 8007efc:	f000 f9c2 	bl	8008284 <_printf_i>
 8007f00:	e7ea      	b.n	8007ed8 <_svfiprintf_r+0x1b0>
 8007f02:	bf00      	nop
 8007f04:	08008a48 	.word	0x08008a48
 8007f08:	08008a4e 	.word	0x08008a4e
 8007f0c:	08008a52 	.word	0x08008a52
 8007f10:	00000000 	.word	0x00000000
 8007f14:	08007c75 	.word	0x08007c75

08007f18 <__sfputc_r>:
 8007f18:	6893      	ldr	r3, [r2, #8]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	b410      	push	{r4}
 8007f20:	6093      	str	r3, [r2, #8]
 8007f22:	da08      	bge.n	8007f36 <__sfputc_r+0x1e>
 8007f24:	6994      	ldr	r4, [r2, #24]
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	db01      	blt.n	8007f2e <__sfputc_r+0x16>
 8007f2a:	290a      	cmp	r1, #10
 8007f2c:	d103      	bne.n	8007f36 <__sfputc_r+0x1e>
 8007f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f32:	f7ff bb59 	b.w	80075e8 <__swbuf_r>
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	1c58      	adds	r0, r3, #1
 8007f3a:	6010      	str	r0, [r2, #0]
 8007f3c:	7019      	strb	r1, [r3, #0]
 8007f3e:	4608      	mov	r0, r1
 8007f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <__sfputs_r>:
 8007f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f48:	4606      	mov	r6, r0
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	18d5      	adds	r5, r2, r3
 8007f50:	42ac      	cmp	r4, r5
 8007f52:	d101      	bne.n	8007f58 <__sfputs_r+0x12>
 8007f54:	2000      	movs	r0, #0
 8007f56:	e007      	b.n	8007f68 <__sfputs_r+0x22>
 8007f58:	463a      	mov	r2, r7
 8007f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff ffda 	bl	8007f18 <__sfputc_r>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d1f3      	bne.n	8007f50 <__sfputs_r+0xa>
 8007f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f6c <_vfiprintf_r>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	460c      	mov	r4, r1
 8007f72:	b09d      	sub	sp, #116	; 0x74
 8007f74:	4617      	mov	r7, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	4606      	mov	r6, r0
 8007f7a:	b118      	cbz	r0, 8007f84 <_vfiprintf_r+0x18>
 8007f7c:	6983      	ldr	r3, [r0, #24]
 8007f7e:	b90b      	cbnz	r3, 8007f84 <_vfiprintf_r+0x18>
 8007f80:	f7ff fce2 	bl	8007948 <__sinit>
 8007f84:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <_vfiprintf_r+0x20c>)
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d158      	bne.n	800803c <_vfiprintf_r+0xd0>
 8007f8a:	6874      	ldr	r4, [r6, #4]
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	0718      	lsls	r0, r3, #28
 8007f90:	d55e      	bpl.n	8008050 <_vfiprintf_r+0xe4>
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05b      	beq.n	8008050 <_vfiprintf_r+0xe4>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa2:	2330      	movs	r3, #48	; 0x30
 8007fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fa8:	9503      	str	r5, [sp, #12]
 8007faa:	f04f 0b01 	mov.w	fp, #1
 8007fae:	46b8      	mov	r8, r7
 8007fb0:	4645      	mov	r5, r8
 8007fb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fb6:	b10b      	cbz	r3, 8007fbc <_vfiprintf_r+0x50>
 8007fb8:	2b25      	cmp	r3, #37	; 0x25
 8007fba:	d154      	bne.n	8008066 <_vfiprintf_r+0xfa>
 8007fbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8007fc0:	d00b      	beq.n	8007fda <_vfiprintf_r+0x6e>
 8007fc2:	4653      	mov	r3, sl
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7ff ffbc 	bl	8007f46 <__sfputs_r>
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f000 80c2 	beq.w	8008158 <_vfiprintf_r+0x1ec>
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	4453      	add	r3, sl
 8007fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fda:	f898 3000 	ldrb.w	r3, [r8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80ba 	beq.w	8008158 <_vfiprintf_r+0x1ec>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fee:	9304      	str	r3, [sp, #16]
 8007ff0:	9307      	str	r3, [sp, #28]
 8007ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff8:	46a8      	mov	r8, r5
 8007ffa:	2205      	movs	r2, #5
 8007ffc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008000:	485e      	ldr	r0, [pc, #376]	; (800817c <_vfiprintf_r+0x210>)
 8008002:	f7f8 f90d 	bl	8000220 <memchr>
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	bb78      	cbnz	r0, 800806a <_vfiprintf_r+0xfe>
 800800a:	06d9      	lsls	r1, r3, #27
 800800c:	bf44      	itt	mi
 800800e:	2220      	movmi	r2, #32
 8008010:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008014:	071a      	lsls	r2, r3, #28
 8008016:	bf44      	itt	mi
 8008018:	222b      	movmi	r2, #43	; 0x2b
 800801a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800801e:	782a      	ldrb	r2, [r5, #0]
 8008020:	2a2a      	cmp	r2, #42	; 0x2a
 8008022:	d02a      	beq.n	800807a <_vfiprintf_r+0x10e>
 8008024:	9a07      	ldr	r2, [sp, #28]
 8008026:	46a8      	mov	r8, r5
 8008028:	2000      	movs	r0, #0
 800802a:	250a      	movs	r5, #10
 800802c:	4641      	mov	r1, r8
 800802e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008032:	3b30      	subs	r3, #48	; 0x30
 8008034:	2b09      	cmp	r3, #9
 8008036:	d969      	bls.n	800810c <_vfiprintf_r+0x1a0>
 8008038:	b360      	cbz	r0, 8008094 <_vfiprintf_r+0x128>
 800803a:	e024      	b.n	8008086 <_vfiprintf_r+0x11a>
 800803c:	4b50      	ldr	r3, [pc, #320]	; (8008180 <_vfiprintf_r+0x214>)
 800803e:	429c      	cmp	r4, r3
 8008040:	d101      	bne.n	8008046 <_vfiprintf_r+0xda>
 8008042:	68b4      	ldr	r4, [r6, #8]
 8008044:	e7a2      	b.n	8007f8c <_vfiprintf_r+0x20>
 8008046:	4b4f      	ldr	r3, [pc, #316]	; (8008184 <_vfiprintf_r+0x218>)
 8008048:	429c      	cmp	r4, r3
 800804a:	bf08      	it	eq
 800804c:	68f4      	ldreq	r4, [r6, #12]
 800804e:	e79d      	b.n	8007f8c <_vfiprintf_r+0x20>
 8008050:	4621      	mov	r1, r4
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff fb1a 	bl	800768c <__swsetup_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	d09d      	beq.n	8007f98 <_vfiprintf_r+0x2c>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008060:	b01d      	add	sp, #116	; 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	46a8      	mov	r8, r5
 8008068:	e7a2      	b.n	8007fb0 <_vfiprintf_r+0x44>
 800806a:	4a44      	ldr	r2, [pc, #272]	; (800817c <_vfiprintf_r+0x210>)
 800806c:	1a80      	subs	r0, r0, r2
 800806e:	fa0b f000 	lsl.w	r0, fp, r0
 8008072:	4318      	orrs	r0, r3
 8008074:	9004      	str	r0, [sp, #16]
 8008076:	4645      	mov	r5, r8
 8008078:	e7be      	b.n	8007ff8 <_vfiprintf_r+0x8c>
 800807a:	9a03      	ldr	r2, [sp, #12]
 800807c:	1d11      	adds	r1, r2, #4
 800807e:	6812      	ldr	r2, [r2, #0]
 8008080:	9103      	str	r1, [sp, #12]
 8008082:	2a00      	cmp	r2, #0
 8008084:	db01      	blt.n	800808a <_vfiprintf_r+0x11e>
 8008086:	9207      	str	r2, [sp, #28]
 8008088:	e004      	b.n	8008094 <_vfiprintf_r+0x128>
 800808a:	4252      	negs	r2, r2
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	9207      	str	r2, [sp, #28]
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	f898 3000 	ldrb.w	r3, [r8]
 8008098:	2b2e      	cmp	r3, #46	; 0x2e
 800809a:	d10e      	bne.n	80080ba <_vfiprintf_r+0x14e>
 800809c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080a0:	2b2a      	cmp	r3, #42	; 0x2a
 80080a2:	d138      	bne.n	8008116 <_vfiprintf_r+0x1aa>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bfb8      	it	lt
 80080b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080b4:	f108 0802 	add.w	r8, r8, #2
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	4d33      	ldr	r5, [pc, #204]	; (8008188 <_vfiprintf_r+0x21c>)
 80080bc:	f898 1000 	ldrb.w	r1, [r8]
 80080c0:	2203      	movs	r2, #3
 80080c2:	4628      	mov	r0, r5
 80080c4:	f7f8 f8ac 	bl	8000220 <memchr>
 80080c8:	b140      	cbz	r0, 80080dc <_vfiprintf_r+0x170>
 80080ca:	2340      	movs	r3, #64	; 0x40
 80080cc:	1b40      	subs	r0, r0, r5
 80080ce:	fa03 f000 	lsl.w	r0, r3, r0
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	4303      	orrs	r3, r0
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	f898 1000 	ldrb.w	r1, [r8]
 80080e0:	482a      	ldr	r0, [pc, #168]	; (800818c <_vfiprintf_r+0x220>)
 80080e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e6:	2206      	movs	r2, #6
 80080e8:	f108 0701 	add.w	r7, r8, #1
 80080ec:	f7f8 f898 	bl	8000220 <memchr>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d037      	beq.n	8008164 <_vfiprintf_r+0x1f8>
 80080f4:	4b26      	ldr	r3, [pc, #152]	; (8008190 <_vfiprintf_r+0x224>)
 80080f6:	bb1b      	cbnz	r3, 8008140 <_vfiprintf_r+0x1d4>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	3307      	adds	r3, #7
 80080fc:	f023 0307 	bic.w	r3, r3, #7
 8008100:	3308      	adds	r3, #8
 8008102:	9303      	str	r3, [sp, #12]
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	444b      	add	r3, r9
 8008108:	9309      	str	r3, [sp, #36]	; 0x24
 800810a:	e750      	b.n	8007fae <_vfiprintf_r+0x42>
 800810c:	fb05 3202 	mla	r2, r5, r2, r3
 8008110:	2001      	movs	r0, #1
 8008112:	4688      	mov	r8, r1
 8008114:	e78a      	b.n	800802c <_vfiprintf_r+0xc0>
 8008116:	2300      	movs	r3, #0
 8008118:	f108 0801 	add.w	r8, r8, #1
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	4619      	mov	r1, r3
 8008120:	250a      	movs	r5, #10
 8008122:	4640      	mov	r0, r8
 8008124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008128:	3a30      	subs	r2, #48	; 0x30
 800812a:	2a09      	cmp	r2, #9
 800812c:	d903      	bls.n	8008136 <_vfiprintf_r+0x1ca>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0c3      	beq.n	80080ba <_vfiprintf_r+0x14e>
 8008132:	9105      	str	r1, [sp, #20]
 8008134:	e7c1      	b.n	80080ba <_vfiprintf_r+0x14e>
 8008136:	fb05 2101 	mla	r1, r5, r1, r2
 800813a:	2301      	movs	r3, #1
 800813c:	4680      	mov	r8, r0
 800813e:	e7f0      	b.n	8008122 <_vfiprintf_r+0x1b6>
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	4622      	mov	r2, r4
 8008146:	4b13      	ldr	r3, [pc, #76]	; (8008194 <_vfiprintf_r+0x228>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	4630      	mov	r0, r6
 800814c:	f3af 8000 	nop.w
 8008150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008154:	4681      	mov	r9, r0
 8008156:	d1d5      	bne.n	8008104 <_vfiprintf_r+0x198>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	065b      	lsls	r3, r3, #25
 800815c:	f53f af7e 	bmi.w	800805c <_vfiprintf_r+0xf0>
 8008160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008162:	e77d      	b.n	8008060 <_vfiprintf_r+0xf4>
 8008164:	ab03      	add	r3, sp, #12
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4622      	mov	r2, r4
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <_vfiprintf_r+0x228>)
 800816c:	a904      	add	r1, sp, #16
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f888 	bl	8008284 <_printf_i>
 8008174:	e7ec      	b.n	8008150 <_vfiprintf_r+0x1e4>
 8008176:	bf00      	nop
 8008178:	08008a08 	.word	0x08008a08
 800817c:	08008a48 	.word	0x08008a48
 8008180:	08008a28 	.word	0x08008a28
 8008184:	080089e8 	.word	0x080089e8
 8008188:	08008a4e 	.word	0x08008a4e
 800818c:	08008a52 	.word	0x08008a52
 8008190:	00000000 	.word	0x00000000
 8008194:	08007f47 	.word	0x08007f47

08008198 <_printf_common>:
 8008198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	4691      	mov	r9, r2
 800819e:	461f      	mov	r7, r3
 80081a0:	688a      	ldr	r2, [r1, #8]
 80081a2:	690b      	ldr	r3, [r1, #16]
 80081a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bfb8      	it	lt
 80081ac:	4613      	movlt	r3, r2
 80081ae:	f8c9 3000 	str.w	r3, [r9]
 80081b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b6:	4606      	mov	r6, r0
 80081b8:	460c      	mov	r4, r1
 80081ba:	b112      	cbz	r2, 80081c2 <_printf_common+0x2a>
 80081bc:	3301      	adds	r3, #1
 80081be:	f8c9 3000 	str.w	r3, [r9]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	0699      	lsls	r1, r3, #26
 80081c6:	bf42      	ittt	mi
 80081c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80081cc:	3302      	addmi	r3, #2
 80081ce:	f8c9 3000 	strmi.w	r3, [r9]
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	f015 0506 	ands.w	r5, r5, #6
 80081d8:	d107      	bne.n	80081ea <_printf_common+0x52>
 80081da:	f104 0a19 	add.w	sl, r4, #25
 80081de:	68e3      	ldr	r3, [r4, #12]
 80081e0:	f8d9 2000 	ldr.w	r2, [r9]
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	42ab      	cmp	r3, r5
 80081e8:	dc28      	bgt.n	800823c <_printf_common+0xa4>
 80081ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	3300      	adds	r3, #0
 80081f2:	bf18      	it	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	0692      	lsls	r2, r2, #26
 80081f8:	d42d      	bmi.n	8008256 <_printf_common+0xbe>
 80081fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081fe:	4639      	mov	r1, r7
 8008200:	4630      	mov	r0, r6
 8008202:	47c0      	blx	r8
 8008204:	3001      	adds	r0, #1
 8008206:	d020      	beq.n	800824a <_printf_common+0xb2>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	68e5      	ldr	r5, [r4, #12]
 800820c:	f8d9 2000 	ldr.w	r2, [r9]
 8008210:	f003 0306 	and.w	r3, r3, #6
 8008214:	2b04      	cmp	r3, #4
 8008216:	bf08      	it	eq
 8008218:	1aad      	subeq	r5, r5, r2
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	341a      	adds	r4, #26
 8008234:	454d      	cmp	r5, r9
 8008236:	d11a      	bne.n	800826e <_printf_common+0xd6>
 8008238:	2000      	movs	r0, #0
 800823a:	e008      	b.n	800824e <_printf_common+0xb6>
 800823c:	2301      	movs	r3, #1
 800823e:	4652      	mov	r2, sl
 8008240:	4639      	mov	r1, r7
 8008242:	4630      	mov	r0, r6
 8008244:	47c0      	blx	r8
 8008246:	3001      	adds	r0, #1
 8008248:	d103      	bne.n	8008252 <_printf_common+0xba>
 800824a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008252:	3501      	adds	r5, #1
 8008254:	e7c3      	b.n	80081de <_printf_common+0x46>
 8008256:	18e1      	adds	r1, r4, r3
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	2030      	movs	r0, #48	; 0x30
 800825c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008260:	4422      	add	r2, r4
 8008262:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008266:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800826a:	3302      	adds	r3, #2
 800826c:	e7c5      	b.n	80081fa <_printf_common+0x62>
 800826e:	2301      	movs	r3, #1
 8008270:	4622      	mov	r2, r4
 8008272:	4639      	mov	r1, r7
 8008274:	4630      	mov	r0, r6
 8008276:	47c0      	blx	r8
 8008278:	3001      	adds	r0, #1
 800827a:	d0e6      	beq.n	800824a <_printf_common+0xb2>
 800827c:	f109 0901 	add.w	r9, r9, #1
 8008280:	e7d8      	b.n	8008234 <_printf_common+0x9c>
	...

08008284 <_printf_i>:
 8008284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008288:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800828c:	460c      	mov	r4, r1
 800828e:	7e09      	ldrb	r1, [r1, #24]
 8008290:	b085      	sub	sp, #20
 8008292:	296e      	cmp	r1, #110	; 0x6e
 8008294:	4617      	mov	r7, r2
 8008296:	4606      	mov	r6, r0
 8008298:	4698      	mov	r8, r3
 800829a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800829c:	f000 80b3 	beq.w	8008406 <_printf_i+0x182>
 80082a0:	d822      	bhi.n	80082e8 <_printf_i+0x64>
 80082a2:	2963      	cmp	r1, #99	; 0x63
 80082a4:	d036      	beq.n	8008314 <_printf_i+0x90>
 80082a6:	d80a      	bhi.n	80082be <_printf_i+0x3a>
 80082a8:	2900      	cmp	r1, #0
 80082aa:	f000 80b9 	beq.w	8008420 <_printf_i+0x19c>
 80082ae:	2958      	cmp	r1, #88	; 0x58
 80082b0:	f000 8083 	beq.w	80083ba <_printf_i+0x136>
 80082b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80082bc:	e032      	b.n	8008324 <_printf_i+0xa0>
 80082be:	2964      	cmp	r1, #100	; 0x64
 80082c0:	d001      	beq.n	80082c6 <_printf_i+0x42>
 80082c2:	2969      	cmp	r1, #105	; 0x69
 80082c4:	d1f6      	bne.n	80082b4 <_printf_i+0x30>
 80082c6:	6820      	ldr	r0, [r4, #0]
 80082c8:	6813      	ldr	r3, [r2, #0]
 80082ca:	0605      	lsls	r5, r0, #24
 80082cc:	f103 0104 	add.w	r1, r3, #4
 80082d0:	d52a      	bpl.n	8008328 <_printf_i+0xa4>
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6011      	str	r1, [r2, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da03      	bge.n	80082e2 <_printf_i+0x5e>
 80082da:	222d      	movs	r2, #45	; 0x2d
 80082dc:	425b      	negs	r3, r3
 80082de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80082e2:	486f      	ldr	r0, [pc, #444]	; (80084a0 <_printf_i+0x21c>)
 80082e4:	220a      	movs	r2, #10
 80082e6:	e039      	b.n	800835c <_printf_i+0xd8>
 80082e8:	2973      	cmp	r1, #115	; 0x73
 80082ea:	f000 809d 	beq.w	8008428 <_printf_i+0x1a4>
 80082ee:	d808      	bhi.n	8008302 <_printf_i+0x7e>
 80082f0:	296f      	cmp	r1, #111	; 0x6f
 80082f2:	d020      	beq.n	8008336 <_printf_i+0xb2>
 80082f4:	2970      	cmp	r1, #112	; 0x70
 80082f6:	d1dd      	bne.n	80082b4 <_printf_i+0x30>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f043 0320 	orr.w	r3, r3, #32
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	e003      	b.n	800830a <_printf_i+0x86>
 8008302:	2975      	cmp	r1, #117	; 0x75
 8008304:	d017      	beq.n	8008336 <_printf_i+0xb2>
 8008306:	2978      	cmp	r1, #120	; 0x78
 8008308:	d1d4      	bne.n	80082b4 <_printf_i+0x30>
 800830a:	2378      	movs	r3, #120	; 0x78
 800830c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008310:	4864      	ldr	r0, [pc, #400]	; (80084a4 <_printf_i+0x220>)
 8008312:	e055      	b.n	80083c0 <_printf_i+0x13c>
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	1d19      	adds	r1, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6011      	str	r1, [r2, #0]
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008324:	2301      	movs	r3, #1
 8008326:	e08c      	b.n	8008442 <_printf_i+0x1be>
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6011      	str	r1, [r2, #0]
 800832c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008330:	bf18      	it	ne
 8008332:	b21b      	sxthne	r3, r3
 8008334:	e7cf      	b.n	80082d6 <_printf_i+0x52>
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	6825      	ldr	r5, [r4, #0]
 800833a:	1d18      	adds	r0, r3, #4
 800833c:	6010      	str	r0, [r2, #0]
 800833e:	0628      	lsls	r0, r5, #24
 8008340:	d501      	bpl.n	8008346 <_printf_i+0xc2>
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	e002      	b.n	800834c <_printf_i+0xc8>
 8008346:	0668      	lsls	r0, r5, #25
 8008348:	d5fb      	bpl.n	8008342 <_printf_i+0xbe>
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	4854      	ldr	r0, [pc, #336]	; (80084a0 <_printf_i+0x21c>)
 800834e:	296f      	cmp	r1, #111	; 0x6f
 8008350:	bf14      	ite	ne
 8008352:	220a      	movne	r2, #10
 8008354:	2208      	moveq	r2, #8
 8008356:	2100      	movs	r1, #0
 8008358:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800835c:	6865      	ldr	r5, [r4, #4]
 800835e:	60a5      	str	r5, [r4, #8]
 8008360:	2d00      	cmp	r5, #0
 8008362:	f2c0 8095 	blt.w	8008490 <_printf_i+0x20c>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	f021 0104 	bic.w	r1, r1, #4
 800836c:	6021      	str	r1, [r4, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d13d      	bne.n	80083ee <_printf_i+0x16a>
 8008372:	2d00      	cmp	r5, #0
 8008374:	f040 808e 	bne.w	8008494 <_printf_i+0x210>
 8008378:	4665      	mov	r5, ip
 800837a:	2a08      	cmp	r2, #8
 800837c:	d10b      	bne.n	8008396 <_printf_i+0x112>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	07db      	lsls	r3, r3, #31
 8008382:	d508      	bpl.n	8008396 <_printf_i+0x112>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	6862      	ldr	r2, [r4, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	bfde      	ittt	le
 800838c:	2330      	movle	r3, #48	; 0x30
 800838e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008392:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008396:	ebac 0305 	sub.w	r3, ip, r5
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	f8cd 8000 	str.w	r8, [sp]
 80083a0:	463b      	mov	r3, r7
 80083a2:	aa03      	add	r2, sp, #12
 80083a4:	4621      	mov	r1, r4
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7ff fef6 	bl	8008198 <_printf_common>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d14d      	bne.n	800844c <_printf_i+0x1c8>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b4:	b005      	add	sp, #20
 80083b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ba:	4839      	ldr	r0, [pc, #228]	; (80084a0 <_printf_i+0x21c>)
 80083bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80083c0:	6813      	ldr	r3, [r2, #0]
 80083c2:	6821      	ldr	r1, [r4, #0]
 80083c4:	1d1d      	adds	r5, r3, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6015      	str	r5, [r2, #0]
 80083ca:	060a      	lsls	r2, r1, #24
 80083cc:	d50b      	bpl.n	80083e6 <_printf_i+0x162>
 80083ce:	07ca      	lsls	r2, r1, #31
 80083d0:	bf44      	itt	mi
 80083d2:	f041 0120 	orrmi.w	r1, r1, #32
 80083d6:	6021      	strmi	r1, [r4, #0]
 80083d8:	b91b      	cbnz	r3, 80083e2 <_printf_i+0x15e>
 80083da:	6822      	ldr	r2, [r4, #0]
 80083dc:	f022 0220 	bic.w	r2, r2, #32
 80083e0:	6022      	str	r2, [r4, #0]
 80083e2:	2210      	movs	r2, #16
 80083e4:	e7b7      	b.n	8008356 <_printf_i+0xd2>
 80083e6:	064d      	lsls	r5, r1, #25
 80083e8:	bf48      	it	mi
 80083ea:	b29b      	uxthmi	r3, r3
 80083ec:	e7ef      	b.n	80083ce <_printf_i+0x14a>
 80083ee:	4665      	mov	r5, ip
 80083f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80083f4:	fb02 3311 	mls	r3, r2, r1, r3
 80083f8:	5cc3      	ldrb	r3, [r0, r3]
 80083fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80083fe:	460b      	mov	r3, r1
 8008400:	2900      	cmp	r1, #0
 8008402:	d1f5      	bne.n	80083f0 <_printf_i+0x16c>
 8008404:	e7b9      	b.n	800837a <_printf_i+0xf6>
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	6961      	ldr	r1, [r4, #20]
 800840c:	1d18      	adds	r0, r3, #4
 800840e:	6010      	str	r0, [r2, #0]
 8008410:	0628      	lsls	r0, r5, #24
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	d501      	bpl.n	800841a <_printf_i+0x196>
 8008416:	6019      	str	r1, [r3, #0]
 8008418:	e002      	b.n	8008420 <_printf_i+0x19c>
 800841a:	066a      	lsls	r2, r5, #25
 800841c:	d5fb      	bpl.n	8008416 <_printf_i+0x192>
 800841e:	8019      	strh	r1, [r3, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	4665      	mov	r5, ip
 8008426:	e7b9      	b.n	800839c <_printf_i+0x118>
 8008428:	6813      	ldr	r3, [r2, #0]
 800842a:	1d19      	adds	r1, r3, #4
 800842c:	6011      	str	r1, [r2, #0]
 800842e:	681d      	ldr	r5, [r3, #0]
 8008430:	6862      	ldr	r2, [r4, #4]
 8008432:	2100      	movs	r1, #0
 8008434:	4628      	mov	r0, r5
 8008436:	f7f7 fef3 	bl	8000220 <memchr>
 800843a:	b108      	cbz	r0, 8008440 <_printf_i+0x1bc>
 800843c:	1b40      	subs	r0, r0, r5
 800843e:	6060      	str	r0, [r4, #4]
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2300      	movs	r3, #0
 8008446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844a:	e7a7      	b.n	800839c <_printf_i+0x118>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	462a      	mov	r2, r5
 8008450:	4639      	mov	r1, r7
 8008452:	4630      	mov	r0, r6
 8008454:	47c0      	blx	r8
 8008456:	3001      	adds	r0, #1
 8008458:	d0aa      	beq.n	80083b0 <_printf_i+0x12c>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	079b      	lsls	r3, r3, #30
 800845e:	d413      	bmi.n	8008488 <_printf_i+0x204>
 8008460:	68e0      	ldr	r0, [r4, #12]
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	4298      	cmp	r0, r3
 8008466:	bfb8      	it	lt
 8008468:	4618      	movlt	r0, r3
 800846a:	e7a3      	b.n	80083b4 <_printf_i+0x130>
 800846c:	2301      	movs	r3, #1
 800846e:	464a      	mov	r2, r9
 8008470:	4639      	mov	r1, r7
 8008472:	4630      	mov	r0, r6
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d09a      	beq.n	80083b0 <_printf_i+0x12c>
 800847a:	3501      	adds	r5, #1
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	9a03      	ldr	r2, [sp, #12]
 8008480:	1a9b      	subs	r3, r3, r2
 8008482:	42ab      	cmp	r3, r5
 8008484:	dcf2      	bgt.n	800846c <_printf_i+0x1e8>
 8008486:	e7eb      	b.n	8008460 <_printf_i+0x1dc>
 8008488:	2500      	movs	r5, #0
 800848a:	f104 0919 	add.w	r9, r4, #25
 800848e:	e7f5      	b.n	800847c <_printf_i+0x1f8>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1ac      	bne.n	80083ee <_printf_i+0x16a>
 8008494:	7803      	ldrb	r3, [r0, #0]
 8008496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800849a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849e:	e76c      	b.n	800837a <_printf_i+0xf6>
 80084a0:	08008a59 	.word	0x08008a59
 80084a4:	08008a6a 	.word	0x08008a6a

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4c06      	ldr	r4, [pc, #24]	; (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4605      	mov	r5, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	f7f8 ff36 	bl	8001324 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200023c8 	.word	0x200023c8

080084c8 <__sread>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	460c      	mov	r4, r1
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	f000 f8e0 	bl	8008694 <_read_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	bfab      	itete	ge
 80084d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084da:	89a3      	ldrhlt	r3, [r4, #12]
 80084dc:	181b      	addge	r3, r3, r0
 80084de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084e2:	bfac      	ite	ge
 80084e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084e6:	81a3      	strhlt	r3, [r4, #12]
 80084e8:	bd10      	pop	{r4, pc}

080084ea <__swrite>:
 80084ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	461f      	mov	r7, r3
 80084f0:	898b      	ldrh	r3, [r1, #12]
 80084f2:	05db      	lsls	r3, r3, #23
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	4616      	mov	r6, r2
 80084fa:	d505      	bpl.n	8008508 <__swrite+0x1e>
 80084fc:	2302      	movs	r3, #2
 80084fe:	2200      	movs	r2, #0
 8008500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008504:	f000 f868 	bl	80085d8 <_lseek_r>
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800850e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	4628      	mov	r0, r5
 800851a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800851e:	f000 b817 	b.w	8008550 <_write_r>

08008522 <__sseek>:
 8008522:	b510      	push	{r4, lr}
 8008524:	460c      	mov	r4, r1
 8008526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800852a:	f000 f855 	bl	80085d8 <_lseek_r>
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	bf15      	itete	ne
 8008534:	6560      	strne	r0, [r4, #84]	; 0x54
 8008536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800853a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800853e:	81a3      	strheq	r3, [r4, #12]
 8008540:	bf18      	it	ne
 8008542:	81a3      	strhne	r3, [r4, #12]
 8008544:	bd10      	pop	{r4, pc}

08008546 <__sclose>:
 8008546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854a:	f000 b813 	b.w	8008574 <_close_r>
	...

08008550 <_write_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4c07      	ldr	r4, [pc, #28]	; (8008570 <_write_r+0x20>)
 8008554:	4605      	mov	r5, r0
 8008556:	4608      	mov	r0, r1
 8008558:	4611      	mov	r1, r2
 800855a:	2200      	movs	r2, #0
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	f7f8 fac3 	bl	8000aea <_write>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_write_r+0x1e>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	b103      	cbz	r3, 800856e <_write_r+0x1e>
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	200023c8 	.word	0x200023c8

08008574 <_close_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4c06      	ldr	r4, [pc, #24]	; (8008590 <_close_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4605      	mov	r5, r0
 800857c:	4608      	mov	r0, r1
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	f7f8 fe9b 	bl	80012ba <_close>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_close_r+0x1a>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	b103      	cbz	r3, 800858e <_close_r+0x1a>
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200023c8 	.word	0x200023c8

08008594 <_fstat_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4c07      	ldr	r4, [pc, #28]	; (80085b4 <_fstat_r+0x20>)
 8008598:	2300      	movs	r3, #0
 800859a:	4605      	mov	r5, r0
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	f7f8 fe96 	bl	80012d2 <_fstat>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d102      	bne.n	80085b0 <_fstat_r+0x1c>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	b103      	cbz	r3, 80085b0 <_fstat_r+0x1c>
 80085ae:	602b      	str	r3, [r5, #0]
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
 80085b2:	bf00      	nop
 80085b4:	200023c8 	.word	0x200023c8

080085b8 <_isatty_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4c06      	ldr	r4, [pc, #24]	; (80085d4 <_isatty_r+0x1c>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4605      	mov	r5, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	f7f8 fe95 	bl	80012f2 <_isatty>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_isatty_r+0x1a>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_isatty_r+0x1a>
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	200023c8 	.word	0x200023c8

080085d8 <_lseek_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4c07      	ldr	r4, [pc, #28]	; (80085f8 <_lseek_r+0x20>)
 80085dc:	4605      	mov	r5, r0
 80085de:	4608      	mov	r0, r1
 80085e0:	4611      	mov	r1, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	6022      	str	r2, [r4, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f7f8 fe8e 	bl	8001308 <_lseek>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_lseek_r+0x1e>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_lseek_r+0x1e>
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	200023c8 	.word	0x200023c8

080085fc <memcpy>:
 80085fc:	b510      	push	{r4, lr}
 80085fe:	1e43      	subs	r3, r0, #1
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	d100      	bne.n	8008608 <memcpy+0xc>
 8008606:	bd10      	pop	{r4, pc}
 8008608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008610:	e7f7      	b.n	8008602 <memcpy+0x6>

08008612 <memmove>:
 8008612:	4288      	cmp	r0, r1
 8008614:	b510      	push	{r4, lr}
 8008616:	eb01 0302 	add.w	r3, r1, r2
 800861a:	d807      	bhi.n	800862c <memmove+0x1a>
 800861c:	1e42      	subs	r2, r0, #1
 800861e:	4299      	cmp	r1, r3
 8008620:	d00a      	beq.n	8008638 <memmove+0x26>
 8008622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800862a:	e7f8      	b.n	800861e <memmove+0xc>
 800862c:	4283      	cmp	r3, r0
 800862e:	d9f5      	bls.n	800861c <memmove+0xa>
 8008630:	1881      	adds	r1, r0, r2
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	42d3      	cmn	r3, r2
 8008636:	d100      	bne.n	800863a <memmove+0x28>
 8008638:	bd10      	pop	{r4, pc}
 800863a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800863e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008642:	e7f7      	b.n	8008634 <memmove+0x22>

08008644 <__malloc_lock>:
 8008644:	4770      	bx	lr

08008646 <__malloc_unlock>:
 8008646:	4770      	bx	lr

08008648 <_realloc_r>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	4607      	mov	r7, r0
 800864c:	4614      	mov	r4, r2
 800864e:	460e      	mov	r6, r1
 8008650:	b921      	cbnz	r1, 800865c <_realloc_r+0x14>
 8008652:	4611      	mov	r1, r2
 8008654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008658:	f7ff bab2 	b.w	8007bc0 <_malloc_r>
 800865c:	b922      	cbnz	r2, 8008668 <_realloc_r+0x20>
 800865e:	f7ff fa61 	bl	8007b24 <_free_r>
 8008662:	4625      	mov	r5, r4
 8008664:	4628      	mov	r0, r5
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008668:	f000 f826 	bl	80086b8 <_malloc_usable_size_r>
 800866c:	42a0      	cmp	r0, r4
 800866e:	d20f      	bcs.n	8008690 <_realloc_r+0x48>
 8008670:	4621      	mov	r1, r4
 8008672:	4638      	mov	r0, r7
 8008674:	f7ff faa4 	bl	8007bc0 <_malloc_r>
 8008678:	4605      	mov	r5, r0
 800867a:	2800      	cmp	r0, #0
 800867c:	d0f2      	beq.n	8008664 <_realloc_r+0x1c>
 800867e:	4631      	mov	r1, r6
 8008680:	4622      	mov	r2, r4
 8008682:	f7ff ffbb 	bl	80085fc <memcpy>
 8008686:	4631      	mov	r1, r6
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff fa4b 	bl	8007b24 <_free_r>
 800868e:	e7e9      	b.n	8008664 <_realloc_r+0x1c>
 8008690:	4635      	mov	r5, r6
 8008692:	e7e7      	b.n	8008664 <_realloc_r+0x1c>

08008694 <_read_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4c07      	ldr	r4, [pc, #28]	; (80086b4 <_read_r+0x20>)
 8008698:	4605      	mov	r5, r0
 800869a:	4608      	mov	r0, r1
 800869c:	4611      	mov	r1, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7f8 fdec 	bl	8001280 <_read>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_read_r+0x1e>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_read_r+0x1e>
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	200023c8 	.word	0x200023c8

080086b8 <_malloc_usable_size_r>:
 80086b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086bc:	1f18      	subs	r0, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfbc      	itt	lt
 80086c2:	580b      	ldrlt	r3, [r1, r0]
 80086c4:	18c0      	addlt	r0, r0, r3
 80086c6:	4770      	bx	lr

080086c8 <_init>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr

080086d4 <_fini>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr
