
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011884  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  08011a68  08011a68  00021a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ed0  08012ed0  00031e80  2**0
                  CONTENTS
  4 .ARM          00000000  08012ed0  08012ed0  00031e80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012ed0  08012ed0  00031e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ed0  08012ed0  00022ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ed4  08012ed4  00022ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e80  20000000  08012ed8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20001e80  08014d58  00031e80  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  08014d58  0003294c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044a92  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007793  00000000  00000000  00076942  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002230  00000000  00000000  0007e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de8  00000000  00000000  00080308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035313  00000000  00000000  000820f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ed9d  00000000  00000000  000b7403  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001266b5  00000000  00000000  000e61a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020c855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009610  00000000  00000000  0020c8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e80 	.word	0x20001e80
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011a4c 	.word	0x08011a4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e84 	.word	0x20001e84
 800021c:	08011a4c 	.word	0x08011a4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00c f890 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08011a68 	.word	0x08011a68

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00c f8c5 	bl	800ceb6 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00c fd1b 	bl	800d768 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00c fafd 	bl	800d334 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00c f86c 	bl	800ce34 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f006 fe86 	bl	8007a70 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb88 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00d fbff 	bl	800e56c <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08011a74 	.word	0x08011a74
 8000d78:	08011a84 	.word	0x08011a84

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fed3 	bl	8004b2c <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00d fbed 	bl	800e56c <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fecb 	bl	8004b2c <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fdce 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fdca 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fdc6 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fcad 	bl	800471c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00d fbcf 	bl	800e56c <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fca5 	bl	800471c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f8f6 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f8f2 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f8ee 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fd95 	bl	8004928 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00d fbb1 	bl	800e56c <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fd8d 	bl	8004928 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fd04 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fd00 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fcfc 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fc65 	bl	8004704 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00d fb93 	bl	800e56c <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fc5d 	bl	8004704 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb5d 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb59 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb55 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb51 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fe18 	bl	8003abc <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00d fb6a 	bl	800e56c <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00b ffbf 	bl	800ce34 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00b ffae 	bl	800ce34 <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08011a94 	.word	0x08011a94
 8000ee4:	08011aa8 	.word	0x08011aa8
 8000ee8:	08011abc 	.word	0x08011abc
 8000eec:	08011ad0 	.word	0x08011ad0
 8000ef0:	08011ae4 	.word	0x08011ae4
 8000ef4:	20001e9c 	.word	0x20001e9c

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00b ff4c 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00b ff3c 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00b ff2c 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00b ff1c 	bl	800ce34 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f004 fda0 	bl	8005b40 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00d faaf 	bl	800e57c <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00b fef8 	bl	800ce34 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fd49 	bl	8005adc <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00d fa83 	bl	800e57c <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00d fa74 	bl	800e57c <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00b febd 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00b feaa 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00b fe96 	bl	800ce34 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f003 ff40 	bl	8004f8c <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f003 ff37 	bl	8004f8c <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00d fa18 	bl	800e57c <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 febe 	bl	8004ecc <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00d fa38 	bl	800e5e4 <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00b fe4d 	bl	800ce34 <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00d fa15 	bl	800e5e4 <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00b fe2a 	bl	800ce34 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00b fe1d 	bl	800ce34 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 fc6e 	bl	8005adc <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00b fc4d 	bl	800caec <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00b fc3f 	bl	800caec <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	08011b08 	.word	0x08011b08
 8001278:	08011b18 	.word	0x08011b18
 800127c:	08011b28 	.word	0x08011b28
 8001280:	08011b38 	.word	0x08011b38
 8001284:	08011b48 	.word	0x08011b48
 8001288:	08011b58 	.word	0x08011b58
 800128c:	08011b64 	.word	0x08011b64
 8001290:	08011b70 	.word	0x08011b70
 8001294:	08011b78 	.word	0x08011b78
 8001298:	08011b98 	.word	0x08011b98
 800129c:	08011b9c 	.word	0x08011b9c
 80012a0:	08011b84 	.word	0x08011b84
 80012a4:	20000e9c 	.word	0x20000e9c
 80012a8:	20000f8c 	.word	0x20000f8c
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00b fc13 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00b fc05 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00b fbf7 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00b fbe9 	bl	800caec <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484d      	ldr	r0, [pc, #308]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001332:	f00b fd7f 	bl	800ce34 <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4847      	ldr	r0, [pc, #284]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800134e:	f00b fd71 	bl	800ce34 <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f004 fbc2 	bl	8005adc <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, SYNC_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00b fba1 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00b fb93 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00b fb85 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00b fb77 	bl	800caec <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00b fb69 	bl	800caec <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00b fb5b 	bl	800caec <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, SYNC_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 800144e:	f00b fcf1 	bl	800ce34 <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}



}
 8001454:	bf00      	nop
 8001456:	376c      	adds	r7, #108	; 0x6c
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000cbc 	.word	0x20000cbc
 8001460:	20000dac 	.word	0x20000dac
 8001464:	2000107c 	.word	0x2000107c
 8001468:	08011b8c 	.word	0x08011b8c
 800146c:	08011b90 	.word	0x08011b90
 8001470:	20000e9c 	.word	0x20000e9c
 8001474:	20000f8c 	.word	0x20000f8c

08001478 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <DM_RefreshScreen+0x88>)
 8001480:	f00a f95a 	bl	800b738 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001484:	2000      	movs	r0, #0
 8001486:	f00b ff55 	bl	800d334 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800148a:	2300      	movs	r3, #0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2302      	movs	r3, #2
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2328      	movs	r3, #40	; 0x28
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	2000      	movs	r0, #0
 80014a0:	f00b fb65 	bl	800cb6e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	2250      	movs	r2, #80	; 0x50
 80014b6:	21c8      	movs	r1, #200	; 0xc8
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f00b fb58 	bl	800cb6e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2328      	movs	r3, #40	; 0x28
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	20a0      	movs	r0, #160	; 0xa0
 80014d4:	f00b fb4b 	bl	800cb6e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	21c8      	movs	r1, #200	; 0xc8
 80014ec:	20f0      	movs	r0, #240	; 0xf0
 80014ee:	f00b fb3e 	bl	800cb6e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <DM_RefreshScreen+0x88>)
 80014f4:	f00a f8ea 	bl	800b6cc <HAL_TIM_Base_Start_IT>


}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000277c 	.word	0x2000277c

08001504 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <DM_SetErrorDebugMsg+0x1c>)
 8001510:	212d      	movs	r1, #45	; 0x2d
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <DM_SetErrorDebugMsg+0x20>)
 8001514:	f00d f832 	bl	800e57c <sniprintf>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08011c1c 	.word	0x08011c1c
 8001524:	20001e9c 	.word	0x20001e9c

08001528 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3b01      	subs	r3, #1
 8001536:	2b03      	cmp	r3, #3
 8001538:	d816      	bhi.n	8001568 <FreqMenu_DrawMenu+0x40>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <FreqMenu_DrawMenu+0x18>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001557 	.word	0x08001557
 8001548:	0800155d 	.word	0x0800155d
 800154c:	08001563 	.word	0x08001563
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001550:	f000 f810 	bl	8001574 <FreqMenu_DrawMainMenu>
			break;
 8001554:	e009      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001556:	f000 f849 	bl	80015ec <FreqMenu_DrawPresetMenu>
			break;
 800155a:	e006      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800155c:	f001 faf4 	bl	8002b48 <FreqMenu_DrawAdjustMenu>
			break;
 8001560:	e003      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001562:	f001 fb07 	bl	8002b74 <FreqMenu_DrawSweepMenu>
			break;
 8001566:	e000      	b.n	800156a <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001568:	bf00      	nop

	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	220a      	movs	r2, #10
 8001588:	2105      	movs	r1, #5
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <FreqMenu_DrawMainMenu+0x68>)
 800158c:	f00b fc52 	bl	800ce34 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001590:	f7ff fcb2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001594:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2302      	movs	r3, #2
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	22d2      	movs	r2, #210	; 0xd2
 80015a2:	2105      	movs	r1, #5
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <FreqMenu_DrawMainMenu+0x6c>)
 80015a6:	f00b fc45 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015aa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	22d2      	movs	r2, #210	; 0xd2
 80015b8:	2157      	movs	r1, #87	; 0x57
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <FreqMenu_DrawMainMenu+0x70>)
 80015bc:	f00b fc3a 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2302      	movs	r3, #2
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	22d2      	movs	r2, #210	; 0xd2
 80015ce:	21ae      	movs	r1, #174	; 0xae
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <FreqMenu_DrawMainMenu+0x74>)
 80015d2:	f00b fc2f 	bl	800ce34 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08011c20 	.word	0x08011c20
 80015e0:	08011c2c 	.word	0x08011c2c
 80015e4:	08011c34 	.word	0x08011c34
 80015e8:	08011c3c 	.word	0x08011c3c

080015ec <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	220a      	movs	r2, #10
 8001600:	2105      	movs	r1, #5
 8001602:	4886      	ldr	r0, [pc, #536]	; (800181c <FreqMenu_DrawPresetMenu+0x230>)
 8001604:	f00b fc16 	bl	800ce34 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001608:	2328      	movs	r3, #40	; 0x28
 800160a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 800160c:	233c      	movs	r3, #60	; 0x3c
 800160e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001618:	2378      	movs	r3, #120	; 0x78
 800161a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 800161c:	238c      	movs	r3, #140	; 0x8c
 800161e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001624:	f003 fe74 	bl	8005310 <FreqO_GetFPresetObject>
 8001628:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f001 825d 	beq.w	8002aec <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 22ee 	movw	r2, #750	; 0x2ee
 800163a:	4293      	cmp	r3, r2
 800163c:	f000 849a 	beq.w	8001f74 <FreqMenu_DrawPresetMenu+0x988>
 8001640:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001644:	4293      	cmp	r3, r2
 8001646:	d817      	bhi.n	8001678 <FreqMenu_DrawPresetMenu+0x8c>
 8001648:	2b32      	cmp	r3, #50	; 0x32
 800164a:	f000 81b3 	beq.w	80019b4 <FreqMenu_DrawPresetMenu+0x3c8>
 800164e:	2b32      	cmp	r3, #50	; 0x32
 8001650:	d806      	bhi.n	8001660 <FreqMenu_DrawPresetMenu+0x74>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d038      	beq.n	80016c8 <FreqMenu_DrawPresetMenu+0xdc>
 8001656:	2b0a      	cmp	r3, #10
 8001658:	f000 8102 	beq.w	8001860 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 800165c:	f001 ba52 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001660:	2bfa      	cmp	r3, #250	; 0xfa
 8001662:	f000 8317 	beq.w	8001c94 <FreqMenu_DrawPresetMenu+0x6a8>
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	f000 83d9 	beq.w	8001e20 <FreqMenu_DrawPresetMenu+0x834>
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	f000 8266 	beq.w	8001b40 <FreqMenu_DrawPresetMenu+0x554>
}
 8001674:	f001 ba46 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001678:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8758 	beq.w	8002532 <FreqMenu_DrawPresetMenu+0xf46>
 8001682:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001686:	4293      	cmp	r3, r2
 8001688:	d80f      	bhi.n	80016aa <FreqMenu_DrawPresetMenu+0xbe>
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	f000 85e0 	beq.w	8002254 <FreqMenu_DrawPresetMenu+0xc68>
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	4293      	cmp	r3, r2
 800169a:	f000 86a1 	beq.w	80023e0 <FreqMenu_DrawPresetMenu+0xdf4>
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	f000 852d 	beq.w	8002100 <FreqMenu_DrawPresetMenu+0xb14>
}
 80016a6:	f001 ba2d 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <FreqMenu_DrawPresetMenu+0x234>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f001 80ae 	beq.w	800280e <FreqMenu_DrawPresetMenu+0x1222>
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <FreqMenu_DrawPresetMenu+0x238>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f001 816f 	beq.w	8002998 <FreqMenu_DrawPresetMenu+0x13ac>
 80016ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 87fc 	beq.w	80026bc <FreqMenu_DrawPresetMenu+0x10d0>
}
 80016c4:	f001 ba1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	4853      	ldr	r0, [pc, #332]	; (8001828 <FreqMenu_DrawPresetMenu+0x23c>)
 80016dc:	f00b fbaa 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2302      	movs	r3, #2
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f0:	2105      	movs	r1, #5
 80016f2:	484e      	ldr	r0, [pc, #312]	; (800182c <FreqMenu_DrawPresetMenu+0x240>)
 80016f4:	f00b fb9e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001708:	2105      	movs	r1, #5
 800170a:	4849      	ldr	r0, [pc, #292]	; (8001830 <FreqMenu_DrawPresetMenu+0x244>)
 800170c:	f00b fb92 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	b29a      	uxth	r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	2105      	movs	r1, #5
 8001722:	4844      	ldr	r0, [pc, #272]	; (8001834 <FreqMenu_DrawPresetMenu+0x248>)
 8001724:	f00b fb86 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2300      	movs	r3, #0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2302      	movs	r3, #2
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001738:	2105      	movs	r1, #5
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <FreqMenu_DrawPresetMenu+0x24c>)
 800173c:	f00b fb7a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001750:	2105      	movs	r1, #5
 8001752:	483a      	ldr	r0, [pc, #232]	; (800183c <FreqMenu_DrawPresetMenu+0x250>)
 8001754:	f00b fb6e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b29a      	uxth	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2302      	movs	r3, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001768:	2105      	movs	r1, #5
 800176a:	4835      	ldr	r0, [pc, #212]	; (8001840 <FreqMenu_DrawPresetMenu+0x254>)
 800176c:	f00b fb62 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <FreqMenu_DrawPresetMenu+0x258>)
 8001784:	f00b fb56 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	b29a      	uxth	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2302      	movs	r3, #2
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <FreqMenu_DrawPresetMenu+0x25c>)
 800179c:	f00b fb4a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2302      	movs	r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b0:	2178      	movs	r1, #120	; 0x78
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <FreqMenu_DrawPresetMenu+0x260>)
 80017b4:	f00b fb3e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c8:	2178      	movs	r1, #120	; 0x78
 80017ca:	4821      	ldr	r0, [pc, #132]	; (8001850 <FreqMenu_DrawPresetMenu+0x264>)
 80017cc:	f00b fb32 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e0:	2178      	movs	r1, #120	; 0x78
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <FreqMenu_DrawPresetMenu+0x268>)
 80017e4:	f00b fb26 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e8:	7abb      	ldrb	r3, [r7, #10]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	4817      	ldr	r0, [pc, #92]	; (8001858 <FreqMenu_DrawPresetMenu+0x26c>)
 80017fc:	f00b fb1a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001800:	7a7b      	ldrb	r3, [r7, #9]
 8001802:	b29a      	uxth	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001810:	2178      	movs	r1, #120	; 0x78
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <FreqMenu_DrawPresetMenu+0x270>)
 8001814:	f00b fb0e 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8001818:	f001 b974 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 800181c:	08011c44 	.word	0x08011c44
 8001820:	000124f8 	.word	0x000124f8
 8001824:	000186a0 	.word	0x000186a0
 8001828:	08011c58 	.word	0x08011c58
 800182c:	08011c60 	.word	0x08011c60
 8001830:	08011c68 	.word	0x08011c68
 8001834:	08011c70 	.word	0x08011c70
 8001838:	08011c78 	.word	0x08011c78
 800183c:	08011c80 	.word	0x08011c80
 8001840:	08011c88 	.word	0x08011c88
 8001844:	08011c90 	.word	0x08011c90
 8001848:	08011c98 	.word	0x08011c98
 800184c:	08011ca0 	.word	0x08011ca0
 8001850:	08011ca8 	.word	0x08011ca8
 8001854:	08011cb0 	.word	0x08011cb0
 8001858:	08011cb8 	.word	0x08011cb8
 800185c:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	b29a      	uxth	r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001870:	2105      	movs	r1, #5
 8001872:	48a5      	ldr	r0, [pc, #660]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 8001874:	f00b fade 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2105      	movs	r1, #5
 800188a:	48a0      	ldr	r0, [pc, #640]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 800188c:	f00b fad2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	b29a      	uxth	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a0:	2105      	movs	r1, #5
 80018a2:	489b      	ldr	r0, [pc, #620]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80018a4:	f00b fac6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a8:	7b3b      	ldrb	r3, [r7, #12]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b8:	2105      	movs	r1, #5
 80018ba:	4896      	ldr	r0, [pc, #600]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 80018bc:	f00b faba 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d0:	2105      	movs	r1, #5
 80018d2:	4891      	ldr	r0, [pc, #580]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 80018d4:	f00b faae 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d8:	7abb      	ldrb	r3, [r7, #10]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e8:	2105      	movs	r1, #5
 80018ea:	488c      	ldr	r0, [pc, #560]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 80018ec:	f00b faa2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001900:	2105      	movs	r1, #5
 8001902:	4887      	ldr	r0, [pc, #540]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001904:	f00b fa96 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b29a      	uxth	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001918:	2178      	movs	r1, #120	; 0x78
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 800191c:	f00b fa8a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	487d      	ldr	r0, [pc, #500]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001934:	f00b fa7e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	b29a      	uxth	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001948:	2178      	movs	r1, #120	; 0x78
 800194a:	4878      	ldr	r0, [pc, #480]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 800194c:	f00b fa72 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	b29a      	uxth	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001960:	2178      	movs	r1, #120	; 0x78
 8001962:	4873      	ldr	r0, [pc, #460]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001964:	f00b fa66 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	b29a      	uxth	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001978:	2178      	movs	r1, #120	; 0x78
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 800197c:	f00b fa5a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001980:	7abb      	ldrb	r3, [r7, #10]
 8001982:	b29a      	uxth	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001990:	2178      	movs	r1, #120	; 0x78
 8001992:	4869      	ldr	r0, [pc, #420]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001994:	f00b fa4e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	4864      	ldr	r0, [pc, #400]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 80019ac:	f00b fa42 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80019b0:	f001 b8a8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2105      	movs	r1, #5
 80019c6:	4850      	ldr	r0, [pc, #320]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 80019c8:	f00b fa34 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2105      	movs	r1, #5
 80019de:	484b      	ldr	r0, [pc, #300]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 80019e0:	f00b fa28 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	4846      	ldr	r0, [pc, #280]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80019f8:	f00b fa1c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	4841      	ldr	r0, [pc, #260]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 8001a10:	f00b fa10 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2105      	movs	r1, #5
 8001a26:	483c      	ldr	r0, [pc, #240]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a28:	f00b fa04 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	4837      	ldr	r0, [pc, #220]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 8001a40:	f00b f9f8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a54:	2105      	movs	r1, #5
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001a58:	f00b f9ec 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2302      	movs	r3, #2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a6c:	2178      	movs	r1, #120	; 0x78
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 8001a70:	f00b f9e0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a88:	f00b f9d4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 8001aa0:	f00b f9c8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa4:	7b3b      	ldrb	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2302      	movs	r3, #2
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab4:	2178      	movs	r1, #120	; 0x78
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001ab8:	f00b f9bc 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001acc:	2178      	movs	r1, #120	; 0x78
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 8001ad0:	f00b f9b0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad4:	7abb      	ldrb	r3, [r7, #10]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ae8:	f00b f9a4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2302      	movs	r3, #2
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 8001b00:	f00b f998 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8001b04:	f000 bffe 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001b08:	08011c58 	.word	0x08011c58
 8001b0c:	08011c60 	.word	0x08011c60
 8001b10:	08011c68 	.word	0x08011c68
 8001b14:	08011c70 	.word	0x08011c70
 8001b18:	08011c78 	.word	0x08011c78
 8001b1c:	08011c80 	.word	0x08011c80
 8001b20:	08011c88 	.word	0x08011c88
 8001b24:	08011c90 	.word	0x08011c90
 8001b28:	08011c98 	.word	0x08011c98
 8001b2c:	08011ca0 	.word	0x08011ca0
 8001b30:	08011ca8 	.word	0x08011ca8
 8001b34:	08011cb0 	.word	0x08011cb0
 8001b38:	08011cb8 	.word	0x08011cb8
 8001b3c:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2105      	movs	r1, #5
 8001b52:	48a5      	ldr	r0, [pc, #660]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b54:	f00b f96e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	48a0      	ldr	r0, [pc, #640]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001b6c:	f00b f962 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2105      	movs	r1, #5
 8001b82:	489b      	ldr	r0, [pc, #620]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001b84:	f00b f956 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001b9c:	f00b f94a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4891      	ldr	r0, [pc, #580]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bb4:	f00b f93e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	488c      	ldr	r0, [pc, #560]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001bcc:	f00b f932 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd0:	7a7b      	ldrb	r3, [r7, #9]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be0:	2105      	movs	r1, #5
 8001be2:	4887      	ldr	r0, [pc, #540]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001be4:	f00b f926 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2178      	movs	r1, #120	; 0x78
 8001bfa:	4882      	ldr	r0, [pc, #520]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001bfc:	f00b f91a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c10:	2178      	movs	r1, #120	; 0x78
 8001c12:	487d      	ldr	r0, [pc, #500]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c14:	f00b f90e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2178      	movs	r1, #120	; 0x78
 8001c2a:	4878      	ldr	r0, [pc, #480]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001c2c:	f00b f902 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001c44:	f00b f8f6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	486e      	ldr	r0, [pc, #440]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001c5c:	f00b f8ea 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2178      	movs	r1, #120	; 0x78
 8001c72:	4869      	ldr	r0, [pc, #420]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c74:	f00b f8de 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c88:	2178      	movs	r1, #120	; 0x78
 8001c8a:	4864      	ldr	r0, [pc, #400]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001c8c:	f00b f8d2 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8001c90:	f000 bf38 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4850      	ldr	r0, [pc, #320]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ca8:	f00b f8c4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001cc0:	f00b f8b8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	4846      	ldr	r0, [pc, #280]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001cd8:	f00b f8ac 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2105      	movs	r1, #5
 8001cee:	4841      	ldr	r0, [pc, #260]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001cf0:	f00b f8a0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	483c      	ldr	r0, [pc, #240]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d08:	f00b f894 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d0c:	7abb      	ldrb	r3, [r7, #10]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001d20:	f00b f888 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d34:	2105      	movs	r1, #5
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001d38:	f00b f87c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2178      	movs	r1, #120	; 0x78
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001d50:	f00b f870 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d68:	f00b f864 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2302      	movs	r3, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001d80:	f00b f858 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	481e      	ldr	r0, [pc, #120]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001d98:	f00b f84c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dac:	2178      	movs	r1, #120	; 0x78
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001db0:	f00b f840 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001dc8:	f00b f834 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ddc:	2178      	movs	r1, #120	; 0x78
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001de0:	f00b f828 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8001de4:	f000 be8e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001de8:	08011c58 	.word	0x08011c58
 8001dec:	08011c60 	.word	0x08011c60
 8001df0:	08011c68 	.word	0x08011c68
 8001df4:	08011c70 	.word	0x08011c70
 8001df8:	08011c78 	.word	0x08011c78
 8001dfc:	08011c80 	.word	0x08011c80
 8001e00:	08011c88 	.word	0x08011c88
 8001e04:	08011c90 	.word	0x08011c90
 8001e08:	08011c98 	.word	0x08011c98
 8001e0c:	08011ca0 	.word	0x08011ca0
 8001e10:	08011ca8 	.word	0x08011ca8
 8001e14:	08011cb0 	.word	0x08011cb0
 8001e18:	08011cb8 	.word	0x08011cb8
 8001e1c:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e30:	2105      	movs	r1, #5
 8001e32:	48a5      	ldr	r0, [pc, #660]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e34:	f00a fffe 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	48a0      	ldr	r0, [pc, #640]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001e4c:	f00a fff2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2302      	movs	r3, #2
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e60:	2105      	movs	r1, #5
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001e64:	f00a ffe6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2302      	movs	r3, #2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e7c:	f00a ffda 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e90:	2105      	movs	r1, #5
 8001e92:	4891      	ldr	r0, [pc, #580]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e94:	f00a ffce 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e98:	7abb      	ldrb	r3, [r7, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	488c      	ldr	r0, [pc, #560]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8001eac:	f00a ffc2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	4887      	ldr	r0, [pc, #540]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001ec4:	f00a ffb6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed8:	2178      	movs	r1, #120	; 0x78
 8001eda:	4882      	ldr	r0, [pc, #520]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001edc:	f00a ffaa 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef0:	2178      	movs	r1, #120	; 0x78
 8001ef2:	487d      	ldr	r0, [pc, #500]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8001ef4:	f00a ff9e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2302      	movs	r3, #2
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f08:	2178      	movs	r1, #120	; 0x78
 8001f0a:	4878      	ldr	r0, [pc, #480]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8001f0c:	f00a ff92 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f20:	2178      	movs	r1, #120	; 0x78
 8001f22:	4873      	ldr	r0, [pc, #460]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8001f24:	f00a ff86 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2302      	movs	r3, #2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f3c:	f00a ff7a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f50:	2178      	movs	r1, #120	; 0x78
 8001f52:	4869      	ldr	r0, [pc, #420]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f54:	f00a ff6e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f68:	2178      	movs	r1, #120	; 0x78
 8001f6a:	4864      	ldr	r0, [pc, #400]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 8001f6c:	f00a ff62 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8001f70:	f000 bdc8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2105      	movs	r1, #5
 8001f86:	4850      	ldr	r0, [pc, #320]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001f88:	f00a ff54 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	484b      	ldr	r0, [pc, #300]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001fa0:	f00a ff48 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4846      	ldr	r0, [pc, #280]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001fb8:	f00a ff3c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4841      	ldr	r0, [pc, #260]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001fd0:	f00a ff30 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	483c      	ldr	r0, [pc, #240]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fe8:	f00a ff24 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	4837      	ldr	r0, [pc, #220]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8002000:	f00a ff18 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002004:	7a7b      	ldrb	r3, [r7, #9]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2302      	movs	r3, #2
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	2105      	movs	r1, #5
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002018:	f00a ff0c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2178      	movs	r1, #120	; 0x78
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002030:	f00a ff00 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4828      	ldr	r0, [pc, #160]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8002048:	f00a fef4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7b7b      	ldrb	r3, [r7, #13]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8002060:	f00a fee8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	481e      	ldr	r0, [pc, #120]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8002078:	f00a fedc 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	b29a      	uxth	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2302      	movs	r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800208c:	2178      	movs	r1, #120	; 0x78
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8002090:	f00a fed0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b29a      	uxth	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2302      	movs	r3, #2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a4:	2178      	movs	r1, #120	; 0x78
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020a8:	f00a fec4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020bc:	2178      	movs	r1, #120	; 0x78
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 80020c0:	f00a feb8 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80020c4:	f000 bd1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80020c8:	08011c58 	.word	0x08011c58
 80020cc:	08011c60 	.word	0x08011c60
 80020d0:	08011c68 	.word	0x08011c68
 80020d4:	08011c70 	.word	0x08011c70
 80020d8:	08011c78 	.word	0x08011c78
 80020dc:	08011c80 	.word	0x08011c80
 80020e0:	08011c88 	.word	0x08011c88
 80020e4:	08011c90 	.word	0x08011c90
 80020e8:	08011c98 	.word	0x08011c98
 80020ec:	08011ca0 	.word	0x08011ca0
 80020f0:	08011ca8 	.word	0x08011ca8
 80020f4:	08011cb0 	.word	0x08011cb0
 80020f8:	08011cb8 	.word	0x08011cb8
 80020fc:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2302      	movs	r3, #2
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002110:	2105      	movs	r1, #5
 8002112:	48a5      	ldr	r0, [pc, #660]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002114:	f00a fe8e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002128:	2105      	movs	r1, #5
 800212a:	48a0      	ldr	r0, [pc, #640]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 800212c:	f00a fe82 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002130:	7b7b      	ldrb	r3, [r7, #13]
 8002132:	b29a      	uxth	r2, r3
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2302      	movs	r3, #2
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002140:	2105      	movs	r1, #5
 8002142:	489b      	ldr	r0, [pc, #620]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002144:	f00a fe76 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	b29a      	uxth	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2302      	movs	r3, #2
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002158:	2105      	movs	r1, #5
 800215a:	4896      	ldr	r0, [pc, #600]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 800215c:	f00a fe6a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2302      	movs	r3, #2
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002170:	2105      	movs	r1, #5
 8002172:	4891      	ldr	r0, [pc, #580]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002174:	f00a fe5e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002178:	7abb      	ldrb	r3, [r7, #10]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2302      	movs	r3, #2
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002188:	2105      	movs	r1, #5
 800218a:	488c      	ldr	r0, [pc, #560]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 800218c:	f00a fe52 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002190:	7a7b      	ldrb	r3, [r7, #9]
 8002192:	b29a      	uxth	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2302      	movs	r3, #2
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a0:	2105      	movs	r1, #5
 80021a2:	4887      	ldr	r0, [pc, #540]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80021a4:	f00a fe46 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2302      	movs	r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	2178      	movs	r1, #120	; 0x78
 80021ba:	4882      	ldr	r0, [pc, #520]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021bc:	f00a fe3a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d0:	2178      	movs	r1, #120	; 0x78
 80021d2:	487d      	ldr	r0, [pc, #500]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 80021d4:	f00a fe2e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d8:	7b7b      	ldrb	r3, [r7, #13]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e8:	2178      	movs	r1, #120	; 0x78
 80021ea:	4878      	ldr	r0, [pc, #480]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 80021ec:	f00a fe22 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f0:	7b3b      	ldrb	r3, [r7, #12]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002200:	2178      	movs	r1, #120	; 0x78
 8002202:	4873      	ldr	r0, [pc, #460]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002204:	f00a fe16 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b29a      	uxth	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2302      	movs	r3, #2
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002218:	2178      	movs	r1, #120	; 0x78
 800221a:	486e      	ldr	r0, [pc, #440]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 800221c:	f00a fe0a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2302      	movs	r3, #2
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002230:	2178      	movs	r1, #120	; 0x78
 8002232:	4869      	ldr	r0, [pc, #420]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002234:	f00a fdfe 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002238:	7a7b      	ldrb	r3, [r7, #9]
 800223a:	b29a      	uxth	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2302      	movs	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002248:	2178      	movs	r1, #120	; 0x78
 800224a:	4864      	ldr	r0, [pc, #400]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 800224c:	f00a fdf2 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8002250:	f000 bc58 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2105      	movs	r1, #5
 8002266:	4850      	ldr	r0, [pc, #320]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002268:	f00a fde4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2105      	movs	r1, #5
 800227e:	484b      	ldr	r0, [pc, #300]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 8002280:	f00a fdd8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2105      	movs	r1, #5
 8002296:	4846      	ldr	r0, [pc, #280]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002298:	f00a fdcc 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7b3b      	ldrb	r3, [r7, #12]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2105      	movs	r1, #5
 80022ae:	4841      	ldr	r0, [pc, #260]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022b0:	f00a fdc0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2105      	movs	r1, #5
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80022c8:	f00a fdb4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022dc:	2105      	movs	r1, #5
 80022de:	4837      	ldr	r0, [pc, #220]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 80022e0:	f00a fda8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f4:	2105      	movs	r1, #5
 80022f6:	4832      	ldr	r0, [pc, #200]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022f8:	f00a fd9c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2178      	movs	r1, #120	; 0x78
 800230e:	482d      	ldr	r0, [pc, #180]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002310:	f00a fd90 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4828      	ldr	r0, [pc, #160]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002328:	f00a fd84 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4823      	ldr	r0, [pc, #140]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 8002340:	f00a fd78 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7b3b      	ldrb	r3, [r7, #12]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002358:	f00a fd6c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 8002370:	f00a fd60 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2302      	movs	r3, #2
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	4814      	ldr	r0, [pc, #80]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002388:	f00a fd54 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b29a      	uxth	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2302      	movs	r3, #2
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 80023a0:	f00a fd48 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80023a4:	e3ae      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80023a6:	bf00      	nop
 80023a8:	08011c58 	.word	0x08011c58
 80023ac:	08011c60 	.word	0x08011c60
 80023b0:	08011c68 	.word	0x08011c68
 80023b4:	08011c70 	.word	0x08011c70
 80023b8:	08011c78 	.word	0x08011c78
 80023bc:	08011c80 	.word	0x08011c80
 80023c0:	08011c88 	.word	0x08011c88
 80023c4:	08011c90 	.word	0x08011c90
 80023c8:	08011c98 	.word	0x08011c98
 80023cc:	08011ca0 	.word	0x08011ca0
 80023d0:	08011ca8 	.word	0x08011ca8
 80023d4:	08011cb0 	.word	0x08011cb0
 80023d8:	08011cb8 	.word	0x08011cb8
 80023dc:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f0:	2105      	movs	r1, #5
 80023f2:	48a4      	ldr	r0, [pc, #656]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 80023f4:	f00a fd1e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2302      	movs	r3, #2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002408:	2105      	movs	r1, #5
 800240a:	489f      	ldr	r0, [pc, #636]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800240c:	f00a fd12 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	b29a      	uxth	r2, r3
 8002414:	2300      	movs	r3, #0
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2302      	movs	r3, #2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002420:	2105      	movs	r1, #5
 8002422:	489a      	ldr	r0, [pc, #616]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002424:	f00a fd06 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	b29a      	uxth	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2302      	movs	r3, #2
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002438:	2105      	movs	r1, #5
 800243a:	4895      	ldr	r0, [pc, #596]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800243c:	f00a fcfa 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	b29a      	uxth	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2302      	movs	r3, #2
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002450:	2105      	movs	r1, #5
 8002452:	4890      	ldr	r0, [pc, #576]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002454:	f00a fcee 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002458:	7abb      	ldrb	r3, [r7, #10]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002468:	2105      	movs	r1, #5
 800246a:	488b      	ldr	r0, [pc, #556]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 800246c:	f00a fce2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	b29a      	uxth	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2302      	movs	r3, #2
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002480:	2105      	movs	r1, #5
 8002482:	4886      	ldr	r0, [pc, #536]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 8002484:	f00a fcd6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	b29a      	uxth	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002498:	2178      	movs	r1, #120	; 0x78
 800249a:	4881      	ldr	r0, [pc, #516]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800249c:	f00a fcca 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	487c      	ldr	r0, [pc, #496]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024b4:	f00a fcbe 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2302      	movs	r3, #2
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2300      	movs	r3, #0
 80024c8:	2178      	movs	r1, #120	; 0x78
 80024ca:	4877      	ldr	r0, [pc, #476]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80024cc:	f00a fcb2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d0:	7b3b      	ldrb	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e0:	2178      	movs	r1, #120	; 0x78
 80024e2:	4872      	ldr	r0, [pc, #456]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 80024e4:	f00a fca6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f8:	2178      	movs	r1, #120	; 0x78
 80024fa:	486d      	ldr	r0, [pc, #436]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 80024fc:	f00a fc9a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002510:	2178      	movs	r1, #120	; 0x78
 8002512:	4868      	ldr	r0, [pc, #416]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002514:	f00a fc8e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002528:	2178      	movs	r1, #120	; 0x78
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800252c:	f00a fc82 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8002530:	e2e8      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b29a      	uxth	r2, r3
 8002536:	2300      	movs	r3, #0
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2302      	movs	r3, #2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002542:	2105      	movs	r1, #5
 8002544:	484f      	ldr	r0, [pc, #316]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 8002546:	f00a fc75 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b29a      	uxth	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2302      	movs	r3, #2
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255a:	2105      	movs	r1, #5
 800255c:	484a      	ldr	r0, [pc, #296]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800255e:	f00a fc69 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	b29a      	uxth	r2, r3
 8002566:	2300      	movs	r3, #0
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2302      	movs	r3, #2
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002572:	2105      	movs	r1, #5
 8002574:	4845      	ldr	r0, [pc, #276]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002576:	f00a fc5d 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	b29a      	uxth	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2302      	movs	r3, #2
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258a:	2105      	movs	r1, #5
 800258c:	4840      	ldr	r0, [pc, #256]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800258e:	f00a fc51 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	b29a      	uxth	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a2:	2105      	movs	r1, #5
 80025a4:	483b      	ldr	r0, [pc, #236]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025a6:	f00a fc45 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025aa:	7abb      	ldrb	r3, [r7, #10]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ba:	2105      	movs	r1, #5
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025be:	f00a fc39 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c2:	7a7b      	ldrb	r3, [r7, #9]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d2:	2105      	movs	r1, #5
 80025d4:	4831      	ldr	r0, [pc, #196]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 80025d6:	f00a fc2d 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ea:	2178      	movs	r1, #120	; 0x78
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025ee:	f00a fc21 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002602:	2178      	movs	r1, #120	; 0x78
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002606:	f00a fc15 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	b29a      	uxth	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261a:	2178      	movs	r1, #120	; 0x78
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800261e:	f00a fc09 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	2178      	movs	r1, #120	; 0x78
 8002634:	481d      	ldr	r0, [pc, #116]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 8002636:	f00a fbfd 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	b29a      	uxth	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264a:	2178      	movs	r1, #120	; 0x78
 800264c:	4818      	ldr	r0, [pc, #96]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800264e:	f00a fbf1 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002652:	7abb      	ldrb	r3, [r7, #10]
 8002654:	b29a      	uxth	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002666:	f00a fbe5 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266a:	7a7b      	ldrb	r3, [r7, #9]
 800266c:	b29a      	uxth	r2, r3
 800266e:	2300      	movs	r3, #0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267a:	2178      	movs	r1, #120	; 0x78
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800267e:	f00a fbd9 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8002682:	e23f      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002684:	08011c58 	.word	0x08011c58
 8002688:	08011c60 	.word	0x08011c60
 800268c:	08011c68 	.word	0x08011c68
 8002690:	08011c70 	.word	0x08011c70
 8002694:	08011c78 	.word	0x08011c78
 8002698:	08011c80 	.word	0x08011c80
 800269c:	08011c88 	.word	0x08011c88
 80026a0:	08011c90 	.word	0x08011c90
 80026a4:	08011c98 	.word	0x08011c98
 80026a8:	08011ca0 	.word	0x08011ca0
 80026ac:	08011ca8 	.word	0x08011ca8
 80026b0:	08011cb0 	.word	0x08011cb0
 80026b4:	08011cb8 	.word	0x08011cb8
 80026b8:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026cc:	2105      	movs	r1, #5
 80026ce:	48a4      	ldr	r0, [pc, #656]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 80026d0:	f00a fbb0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2302      	movs	r3, #2
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e4:	2105      	movs	r1, #5
 80026e6:	489f      	ldr	r0, [pc, #636]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 80026e8:	f00a fba4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2302      	movs	r3, #2
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026fc:	2105      	movs	r1, #5
 80026fe:	489a      	ldr	r0, [pc, #616]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002700:	f00a fb98 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	b29a      	uxth	r2, r3
 8002708:	2300      	movs	r3, #0
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2302      	movs	r3, #2
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002714:	2105      	movs	r1, #5
 8002716:	4895      	ldr	r0, [pc, #596]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 8002718:	f00a fb8c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	b29a      	uxth	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2302      	movs	r3, #2
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800272c:	2105      	movs	r1, #5
 800272e:	4890      	ldr	r0, [pc, #576]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002730:	f00a fb80 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	b29a      	uxth	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2302      	movs	r3, #2
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002744:	2105      	movs	r1, #5
 8002746:	488b      	ldr	r0, [pc, #556]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 8002748:	f00a fb74 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800274c:	7a7b      	ldrb	r3, [r7, #9]
 800274e:	b29a      	uxth	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2302      	movs	r3, #2
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800275c:	2105      	movs	r1, #5
 800275e:	4886      	ldr	r0, [pc, #536]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 8002760:	f00a fb68 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b29a      	uxth	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2302      	movs	r3, #2
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002774:	2178      	movs	r1, #120	; 0x78
 8002776:	4881      	ldr	r0, [pc, #516]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 8002778:	f00a fb5c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29a      	uxth	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2302      	movs	r3, #2
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800278c:	2178      	movs	r1, #120	; 0x78
 800278e:	487c      	ldr	r0, [pc, #496]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 8002790:	f00a fb50 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	b29a      	uxth	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	2302      	movs	r3, #2
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a4:	2178      	movs	r1, #120	; 0x78
 80027a6:	4877      	ldr	r0, [pc, #476]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80027a8:	f00a fb44 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2302      	movs	r3, #2
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027bc:	2178      	movs	r1, #120	; 0x78
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 80027c0:	f00a fb38 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2302      	movs	r3, #2
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2178      	movs	r1, #120	; 0x78
 80027d6:	486d      	ldr	r0, [pc, #436]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 80027d8:	f00a fb2c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	2302      	movs	r3, #2
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ec:	2178      	movs	r1, #120	; 0x78
 80027ee:	4868      	ldr	r0, [pc, #416]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 80027f0:	f00a fb20 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f4:	7a7b      	ldrb	r3, [r7, #9]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002804:	2178      	movs	r1, #120	; 0x78
 8002806:	4863      	ldr	r0, [pc, #396]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002808:	f00a fb14 	bl	800ce34 <ILI9341_Draw_Text>
			break;
 800280c:	e17a      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b29a      	uxth	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2302      	movs	r3, #2
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800281e:	2105      	movs	r1, #5
 8002820:	484f      	ldr	r0, [pc, #316]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 8002822:	f00a fb07 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	b29a      	uxth	r2, r3
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2302      	movs	r3, #2
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002836:	2105      	movs	r1, #5
 8002838:	484a      	ldr	r0, [pc, #296]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 800283a:	f00a fafb 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800283e:	7b7b      	ldrb	r3, [r7, #13]
 8002840:	b29a      	uxth	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2302      	movs	r3, #2
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800284e:	2105      	movs	r1, #5
 8002850:	4845      	ldr	r0, [pc, #276]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002852:	f00a faef 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2302      	movs	r3, #2
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002866:	2105      	movs	r1, #5
 8002868:	4840      	ldr	r0, [pc, #256]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 800286a:	f00a fae3 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	b29a      	uxth	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2302      	movs	r3, #2
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800287e:	2105      	movs	r1, #5
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002882:	f00a fad7 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002886:	7abb      	ldrb	r3, [r7, #10]
 8002888:	b29a      	uxth	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2302      	movs	r3, #2
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002896:	2105      	movs	r1, #5
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 800289a:	f00a facb 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800289e:	7a7b      	ldrb	r3, [r7, #9]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ae:	2105      	movs	r1, #5
 80028b0:	4831      	ldr	r0, [pc, #196]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 80028b2:	f00a fabf 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2302      	movs	r3, #2
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c6:	2178      	movs	r1, #120	; 0x78
 80028c8:	482c      	ldr	r0, [pc, #176]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 80028ca:	f00a fab3 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028de:	2178      	movs	r1, #120	; 0x78
 80028e0:	4827      	ldr	r0, [pc, #156]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 80028e2:	f00a faa7 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e6:	7b7b      	ldrb	r3, [r7, #13]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2302      	movs	r3, #2
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f6:	2178      	movs	r1, #120	; 0x78
 80028f8:	4822      	ldr	r0, [pc, #136]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80028fa:	f00a fa9b 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800290e:	2178      	movs	r1, #120	; 0x78
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 8002912:	f00a fa8f 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	b29a      	uxth	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002926:	2178      	movs	r1, #120	; 0x78
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 800292a:	f00a fa83 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	b29a      	uxth	r2, r3
 8002932:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	2178      	movs	r1, #120	; 0x78
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002942:	f00a fa77 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002956:	2178      	movs	r1, #120	; 0x78
 8002958:	480e      	ldr	r0, [pc, #56]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 800295a:	f00a fa6b 	bl	800ce34 <ILI9341_Draw_Text>
			break;
 800295e:	e0d1      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002960:	08011c58 	.word	0x08011c58
 8002964:	08011c60 	.word	0x08011c60
 8002968:	08011c68 	.word	0x08011c68
 800296c:	08011c70 	.word	0x08011c70
 8002970:	08011c78 	.word	0x08011c78
 8002974:	08011c80 	.word	0x08011c80
 8002978:	08011c88 	.word	0x08011c88
 800297c:	08011c90 	.word	0x08011c90
 8002980:	08011c98 	.word	0x08011c98
 8002984:	08011ca0 	.word	0x08011ca0
 8002988:	08011ca8 	.word	0x08011ca8
 800298c:	08011cb0 	.word	0x08011cb0
 8002990:	08011cb8 	.word	0x08011cb8
 8002994:	08011cc0 	.word	0x08011cc0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b29a      	uxth	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	2302      	movs	r3, #2
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a8:	2105      	movs	r1, #5
 80029aa:	4858      	ldr	r0, [pc, #352]	; (8002b0c <FreqMenu_DrawPresetMenu+0x1520>)
 80029ac:	f00a fa42 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2302      	movs	r3, #2
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c0:	2105      	movs	r1, #5
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <FreqMenu_DrawPresetMenu+0x1524>)
 80029c4:	f00a fa36 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d8:	2105      	movs	r1, #5
 80029da:	484e      	ldr	r0, [pc, #312]	; (8002b14 <FreqMenu_DrawPresetMenu+0x1528>)
 80029dc:	f00a fa2a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029f0:	2105      	movs	r1, #5
 80029f2:	4849      	ldr	r0, [pc, #292]	; (8002b18 <FreqMenu_DrawPresetMenu+0x152c>)
 80029f4:	f00a fa1e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2302      	movs	r3, #2
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	4844      	ldr	r0, [pc, #272]	; (8002b1c <FreqMenu_DrawPresetMenu+0x1530>)
 8002a0c:	f00a fa12 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a20:	2105      	movs	r1, #5
 8002a22:	483f      	ldr	r0, [pc, #252]	; (8002b20 <FreqMenu_DrawPresetMenu+0x1534>)
 8002a24:	f00a fa06 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2302      	movs	r3, #2
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	483a      	ldr	r0, [pc, #232]	; (8002b24 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a3c:	f00a f9fa 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	4835      	ldr	r0, [pc, #212]	; (8002b28 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a54:	f00a f9ee 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2302      	movs	r3, #2
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a68:	2178      	movs	r1, #120	; 0x78
 8002a6a:	4830      	ldr	r0, [pc, #192]	; (8002b2c <FreqMenu_DrawPresetMenu+0x1540>)
 8002a6c:	f00a f9e2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a80:	2178      	movs	r1, #120	; 0x78
 8002a82:	482b      	ldr	r0, [pc, #172]	; (8002b30 <FreqMenu_DrawPresetMenu+0x1544>)
 8002a84:	f00a f9d6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a98:	2178      	movs	r1, #120	; 0x78
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <FreqMenu_DrawPresetMenu+0x1548>)
 8002a9c:	f00a f9ca 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab0:	2178      	movs	r1, #120	; 0x78
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <FreqMenu_DrawPresetMenu+0x154c>)
 8002ab4:	f00a f9be 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab8:	7abb      	ldrb	r3, [r7, #10]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac8:	2178      	movs	r1, #120	; 0x78
 8002aca:	481c      	ldr	r0, [pc, #112]	; (8002b3c <FreqMenu_DrawPresetMenu+0x1550>)
 8002acc:	f00a f9b2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ad0:	7a7b      	ldrb	r3, [r7, #9]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2302      	movs	r3, #2
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2178      	movs	r1, #120	; 0x78
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ae4:	f00a f9a6 	bl	800ce34 <ILI9341_Draw_Text>
			break;
 8002ae8:	bf00      	nop
 8002aea:	e00b      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002aec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2300      	movs	r3, #0
 8002af8:	22b4      	movs	r2, #180	; 0xb4
 8002afa:	2105      	movs	r1, #5
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <FreqMenu_DrawPresetMenu+0x1558>)
 8002afe:	f00a f999 	bl	800ce34 <ILI9341_Draw_Text>
}
 8002b02:	e7ff      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08011c58 	.word	0x08011c58
 8002b10:	08011c60 	.word	0x08011c60
 8002b14:	08011c68 	.word	0x08011c68
 8002b18:	08011c70 	.word	0x08011c70
 8002b1c:	08011c78 	.word	0x08011c78
 8002b20:	08011c80 	.word	0x08011c80
 8002b24:	08011c88 	.word	0x08011c88
 8002b28:	08011c90 	.word	0x08011c90
 8002b2c:	08011c98 	.word	0x08011c98
 8002b30:	08011ca0 	.word	0x08011ca0
 8002b34:	08011ca8 	.word	0x08011ca8
 8002b38:	08011cb0 	.word	0x08011cb0
 8002b3c:	08011cb8 	.word	0x08011cb8
 8002b40:	08011cc0 	.word	0x08011cc0
 8002b44:	08011ccc 	.word	0x08011ccc

08002b48 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <FreqMenu_DrawAdjustMenu+0x28>)
 8002b60:	f00a f968 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002b64:	f7fe f9c8 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08011cfc 	.word	0x08011cfc

08002b74 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b0a0      	sub	sp, #128	; 0x80
 8002b78:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	220a      	movs	r2, #10
 8002b88:	2105      	movs	r1, #5
 8002b8a:	48a1      	ldr	r0, [pc, #644]	; (8002e10 <FreqMenu_DrawSweepMenu+0x29c>)
 8002b8c:	f00a f952 	bl	800ce34 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002b90:	2300      	movs	r3, #0
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
 8002b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d109      	bne.n	8002bc2 <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb2:	4a99      	ldr	r2, [pc, #612]	; (8002e18 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	4615      	mov	r5, r2
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	7023      	strb	r3, [r4, #0]
 8002bc0:	e008      	b.n	8002bd4 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc6:	4a95      	ldr	r2, [pc, #596]	; (8002e1c <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2228      	movs	r2, #40	; 0x28
 8002be6:	2105      	movs	r1, #5
 8002be8:	f00a f924 	bl	800ce34 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c02:	f002 ff9d 	bl	8005b40 <SM_GetOutputInHertz>
 8002c06:	ee10 3a10 	vmov	r3, s0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcc4 	bl	8000598 <__aeabi_f2d>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c18:	e9cd 3400 	strd	r3, r4, [sp]
 8002c1c:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c1e:	2119      	movs	r1, #25
 8002c20:	f00b fcac 	bl	800e57c <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c24:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2105      	movs	r1, #5
 8002c38:	f00a f8fc 	bl	800ce34 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	4875      	ldr	r0, [pc, #468]	; (8002e24 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c4e:	f00a f8f1 	bl	800ce34 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d117      	bne.n	8002c8e <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	21eb      	movs	r1, #235	; 0xeb
 8002c6e:	486e      	ldr	r0, [pc, #440]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c70:	f00a f8e0 	bl	800ce34 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	f240 1109 	movw	r1, #265	; 0x109
 8002c86:	4869      	ldr	r0, [pc, #420]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c88:	f00a f8d4 	bl	800ce34 <ILI9341_Draw_Text>
 8002c8c:	e016      	b.n	8002cbc <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9a:	2264      	movs	r2, #100	; 0x64
 8002c9c:	f240 1109 	movw	r1, #265	; 0x109
 8002ca0:	4862      	ldr	r0, [pc, #392]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ca2:	f00a f8c7 	bl	800ce34 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ca6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2264      	movs	r2, #100	; 0x64
 8002cb4:	21eb      	movs	r1, #235	; 0xeb
 8002cb6:	485c      	ldr	r0, [pc, #368]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cb8:	f00a f8bc 	bl	800ce34 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2278      	movs	r2, #120	; 0x78
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4857      	ldr	r0, [pc, #348]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cd6:	f00a f8ad 	bl	800ce34 <ILI9341_Draw_Text>
 8002cda:	e00a      	b.n	8002cf2 <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce8:	2278      	movs	r2, #120	; 0x78
 8002cea:	2105      	movs	r1, #5
 8002cec:	4851      	ldr	r0, [pc, #324]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cee:	f00a f8a1 	bl	800ce34 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc43 	bl	8000598 <__aeabi_f2d>
 8002d12:	4603      	mov	r3, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d1a:	e9cd 3400 	strd	r3, r4, [sp]
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d20:	2119      	movs	r1, #25
 8002d22:	f00b fc2b 	bl	800e57c <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	21b6      	movs	r1, #182	; 0xb6
 8002d3a:	f00a f87b 	bl	800ce34 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2302      	movs	r3, #2
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	228c      	movs	r2, #140	; 0x8c
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4839      	ldr	r0, [pc, #228]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d60:	f00a f868 	bl	800ce34 <ILI9341_Draw_Text>
 8002d64:	e00a      	b.n	8002d7c <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	228c      	movs	r2, #140	; 0x8c
 8002d74:	2105      	movs	r1, #5
 8002d76:	4833      	ldr	r0, [pc, #204]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d78:	f00a f85c 	bl	800ce34 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <FreqMenu_DrawSweepMenu+0x2d8>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	ee17 0a90 	vmov	r0, s15
 8002da4:	f002 ff10 	bl	8005bc8 <SM_ConvertPeriodToHertz>
 8002da8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e50 <FreqMenu_DrawSweepMenu+0x2dc>
 8002db0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db4:	ee16 0a90 	vmov	r0, s13
 8002db8:	f7fd fbee 	bl	8000598 <__aeabi_f2d>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f107 0018 	add.w	r0, r7, #24
 8002dc4:	e9cd 3400 	strd	r3, r4, [sp]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002dca:	2114      	movs	r1, #20
 8002dcc:	f00b fbd6 	bl	800e57c <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd0:	f107 0018 	add.w	r0, r7, #24
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de0:	228c      	movs	r2, #140	; 0x8c
 8002de2:	219e      	movs	r1, #158	; 0x9e
 8002de4:	f00a f826 	bl	800ce34 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d131      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002df8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	22a0      	movs	r2, #160	; 0xa0
 8002e06:	2105      	movs	r1, #5
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e0a:	f00a f813 	bl	800ce34 <ILI9341_Draw_Text>
 8002e0e:	e030      	b.n	8002e72 <FreqMenu_DrawSweepMenu+0x2fe>
 8002e10:	08011d10 	.word	0x08011d10
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	08011d24 	.word	0x08011d24
 8002e1c:	08011d38 	.word	0x08011d38
 8002e20:	08011d4c 	.word	0x08011d4c
 8002e24:	08011d60 	.word	0x08011d60
 8002e28:	08011d6c 	.word	0x08011d6c
 8002e2c:	08011d70 	.word	0x08011d70
 8002e30:	20001ecd 	.word	0x20001ecd
 8002e34:	08011d78 	.word	0x08011d78
 8002e38:	20001f18 	.word	0x20001f18
 8002e3c:	08011d88 	.word	0x08011d88
 8002e40:	20001ecc 	.word	0x20001ecc
 8002e44:	08011d94 	.word	0x08011d94
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	42f00000 	.word	0x42f00000
 8002e54:	08011da4 	.word	0x08011da4
 8002e58:	08011db0 	.word	0x08011db0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e68:	22a0      	movs	r2, #160	; 0xa0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <FreqMenu_DrawSweepMenu+0x430>)
 8002e6e:	f009 ffe1 	bl	800ce34 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <FreqMenu_DrawSweepMenu+0x434>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <FreqMenu_DrawSweepMenu+0x438>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f002 fe95 	bl	8005bc8 <SM_ConvertPeriodToHertz>
 8002e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fb0 <FreqMenu_DrawSweepMenu+0x43c>
 8002ea6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eaa:	ee16 0a90 	vmov	r0, s13
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	1d38      	adds	r0, r7, #4
 8002eb8:	e9cd 3400 	strd	r3, r4, [sp]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <FreqMenu_DrawSweepMenu+0x440>)
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	f00b fb5c 	bl	800e57c <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec4:	1d38      	adds	r0, r7, #4
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed2:	22a0      	movs	r2, #160	; 0xa0
 8002ed4:	21aa      	movs	r1, #170	; 0xaa
 8002ed6:	f009 ffad 	bl	800ce34 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <FreqMenu_DrawSweepMenu+0x444>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10b      	bne.n	8002efe <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002ee6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	22d5      	movs	r2, #213	; 0xd5
 8002ef4:	2106      	movs	r1, #6
 8002ef6:	4831      	ldr	r0, [pc, #196]	; (8002fbc <FreqMenu_DrawSweepMenu+0x448>)
 8002ef8:	f009 ff9c 	bl	800ce34 <ILI9341_Draw_Text>
 8002efc:	e00a      	b.n	8002f14 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002efe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	22d5      	movs	r2, #213	; 0xd5
 8002f0c:	2105      	movs	r1, #5
 8002f0e:	482c      	ldr	r0, [pc, #176]	; (8002fc0 <FreqMenu_DrawSweepMenu+0x44c>)
 8002f10:	f009 ff90 	bl	800ce34 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22cc      	movs	r2, #204	; 0xcc
 8002f22:	2169      	movs	r1, #105	; 0x69
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f26:	f009 ff85 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f2a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	22de      	movs	r2, #222	; 0xde
 8002f38:	2162      	movs	r1, #98	; 0x62
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <FreqMenu_DrawSweepMenu+0x454>)
 8002f3c:	f009 ff7a 	bl	800ce34 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	22cc      	movs	r2, #204	; 0xcc
 8002f4e:	21b7      	movs	r1, #183	; 0xb7
 8002f50:	481c      	ldr	r0, [pc, #112]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f52:	f009 ff6f 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	22de      	movs	r2, #222	; 0xde
 8002f64:	21ad      	movs	r1, #173	; 0xad
 8002f66:	4819      	ldr	r0, [pc, #100]	; (8002fcc <FreqMenu_DrawSweepMenu+0x458>)
 8002f68:	f009 ff64 	bl	800ce34 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f6c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	22cc      	movs	r2, #204	; 0xcc
 8002f7a:	f240 1107 	movw	r1, #263	; 0x107
 8002f7e:	4811      	ldr	r0, [pc, #68]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f80:	f009 ff58 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	22de      	movs	r2, #222	; 0xde
 8002f92:	21fc      	movs	r1, #252	; 0xfc
 8002f94:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <FreqMenu_DrawSweepMenu+0x45c>)
 8002f96:	f009 ff4d 	bl	800ce34 <ILI9341_Draw_Text>
}
 8002f9a:	bf00      	nop
 8002f9c:	3778      	adds	r7, #120	; 0x78
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08011db0 	.word	0x08011db0
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	42f00000 	.word	0x42f00000
 8002fb4:	08011dc0 	.word	0x08011dc0
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	08011dcc 	.word	0x08011dcc
 8002fc0:	08011dd4 	.word	0x08011dd4
 8002fc4:	08011ddc 	.word	0x08011ddc
 8002fc8:	08011de0 	.word	0x08011de0
 8002fcc:	08011de8 	.word	0x08011de8
 8002fd0:	08011df0 	.word	0x08011df0

08002fd4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d007      	beq.n	8002ff4 <FuncMenu_DrawMenu+0x20>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d009      	beq.n	8002ffc <FuncMenu_DrawMenu+0x28>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d000      	beq.n	8002fee <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002fec:	e00a      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002fee:	f000 f80d 	bl	800300c <FuncMenu_DrawMainMenu>
			break;
 8002ff2:	e007      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f851 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8002ffa:	e003      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f84d 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8003002:	bf00      	nop

	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2302      	movs	r3, #2
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	210a      	movs	r1, #10
 8003022:	481a      	ldr	r0, [pc, #104]	; (800308c <FuncMenu_DrawMainMenu+0x80>)
 8003024:	f009 ff06 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003028:	f7fd ff66 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800302c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	22d2      	movs	r2, #210	; 0xd2
 800303a:	2105      	movs	r1, #5
 800303c:	4814      	ldr	r0, [pc, #80]	; (8003090 <FuncMenu_DrawMainMenu+0x84>)
 800303e:	f009 fef9 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003042:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	22d2      	movs	r2, #210	; 0xd2
 8003050:	2161      	movs	r1, #97	; 0x61
 8003052:	4810      	ldr	r0, [pc, #64]	; (8003094 <FuncMenu_DrawMainMenu+0x88>)
 8003054:	f009 feee 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003058:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	22d2      	movs	r2, #210	; 0xd2
 8003066:	21af      	movs	r1, #175	; 0xaf
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 800306a:	f009 fee3 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800306e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	22d2      	movs	r2, #210	; 0xd2
 800307c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 8003082:	f009 fed7 	bl	800ce34 <ILI9341_Draw_Text>
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08011df8 	.word	0x08011df8
 8003090:	08011e04 	.word	0x08011e04
 8003094:	08011e0c 	.word	0x08011e0c
 8003098:	08011e14 	.word	0x08011e14

0800309c <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	220a      	movs	r2, #10
 80030b4:	210a      	movs	r1, #10
 80030b6:	488d      	ldr	r0, [pc, #564]	; (80032ec <FuncMenu_DrawOutputMenu+0x250>)
 80030b8:	f009 febc 	bl	800ce34 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fd0c 	bl	8005adc <SM_GetOutputChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80030ca:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8396 	beq.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
	{
		switch(func_profileTmp->func)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	f200 8391 	bhi.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <FuncMenu_DrawOutputMenu+0x48>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080031f7 	.word	0x080031f7
 80030ec:	08003311 	.word	0x08003311
 80030f0:	08003407 	.word	0x08003407
 80030f4:	080034fd 	.word	0x080034fd
 80030f8:	08003615 	.word	0x08003615
 80030fc:	0800370b 	.word	0x0800370b
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003100:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	210a      	movs	r1, #10
 8003110:	4877      	ldr	r0, [pc, #476]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003112:	f009 fe8f 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003122:	2246      	movs	r2, #70	; 0x46
 8003124:	210a      	movs	r1, #10
 8003126:	4873      	ldr	r0, [pc, #460]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 8003128:	f009 fe84 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003138:	225a      	movs	r2, #90	; 0x5a
 800313a:	210a      	movs	r1, #10
 800313c:	486e      	ldr	r0, [pc, #440]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 800313e:	f009 fe79 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800314e:	226e      	movs	r2, #110	; 0x6e
 8003150:	210a      	movs	r1, #10
 8003152:	486a      	ldr	r0, [pc, #424]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 8003154:	f009 fe6e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	210a      	movs	r1, #10
 8003168:	4865      	ldr	r0, [pc, #404]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 800316a:	f009 fe63 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2296      	movs	r2, #150	; 0x96
 800317c:	210a      	movs	r1, #10
 800317e:	4861      	ldr	r0, [pc, #388]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003180:	f009 fe58 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	22aa      	movs	r2, #170	; 0xaa
 8003192:	210a      	movs	r1, #10
 8003194:	485c      	ldr	r0, [pc, #368]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 8003196:	f009 fe4d 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800319a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	2302      	movs	r3, #2
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	22d2      	movs	r2, #210	; 0xd2
 80031a8:	2105      	movs	r1, #5
 80031aa:	4858      	ldr	r0, [pc, #352]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031ac:	f009 fe42 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031b0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	22d2      	movs	r2, #210	; 0xd2
 80031be:	2161      	movs	r1, #97	; 0x61
 80031c0:	4852      	ldr	r0, [pc, #328]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031c2:	f009 fe37 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	22d2      	movs	r2, #210	; 0xd2
 80031d4:	21af      	movs	r1, #175	; 0xaf
 80031d6:	484d      	ldr	r0, [pc, #308]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031d8:	f009 fe2c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	22d2      	movs	r2, #210	; 0xd2
 80031ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031ee:	4847      	ldr	r0, [pc, #284]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031f0:	f009 fe20 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80031f4:	e304      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f6:	2300      	movs	r3, #0
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2302      	movs	r3, #2
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003202:	2232      	movs	r2, #50	; 0x32
 8003204:	210a      	movs	r1, #10
 8003206:	483a      	ldr	r0, [pc, #232]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003208:	f009 fe14 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800320c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2302      	movs	r3, #2
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2246      	movs	r2, #70	; 0x46
 800321a:	210a      	movs	r1, #10
 800321c:	4835      	ldr	r0, [pc, #212]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 800321e:	f009 fe09 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003222:	2300      	movs	r3, #0
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2302      	movs	r3, #2
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322e:	225a      	movs	r2, #90	; 0x5a
 8003230:	210a      	movs	r1, #10
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 8003234:	f009 fdfe 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003238:	2300      	movs	r3, #0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003244:	226e      	movs	r2, #110	; 0x6e
 8003246:	210a      	movs	r1, #10
 8003248:	482c      	ldr	r0, [pc, #176]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 800324a:	f009 fdf3 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800324e:	2300      	movs	r3, #0
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800325a:	2282      	movs	r2, #130	; 0x82
 800325c:	210a      	movs	r1, #10
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 8003260:	f009 fde8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003264:	2300      	movs	r3, #0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003270:	2296      	movs	r2, #150	; 0x96
 8003272:	210a      	movs	r1, #10
 8003274:	4823      	ldr	r0, [pc, #140]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003276:	f009 fddd 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800327a:	2300      	movs	r3, #0
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003286:	22aa      	movs	r2, #170	; 0xaa
 8003288:	210a      	movs	r1, #10
 800328a:	481f      	ldr	r0, [pc, #124]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 800328c:	f009 fdd2 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003290:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	22d2      	movs	r2, #210	; 0xd2
 800329e:	2105      	movs	r1, #5
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032a2:	f009 fdc7 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	22d2      	movs	r2, #210	; 0xd2
 80032b4:	2161      	movs	r1, #97	; 0x61
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032b8:	f009 fdbc 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	22d2      	movs	r2, #210	; 0xd2
 80032ca:	21af      	movs	r1, #175	; 0xaf
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032ce:	f009 fdb1 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	22d2      	movs	r2, #210	; 0xd2
 80032e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032e6:	f009 fda5 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80032ea:	e289      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80032ec:	08011e1c 	.word	0x08011e1c
 80032f0:	08011e2c 	.word	0x08011e2c
 80032f4:	08011e34 	.word	0x08011e34
 80032f8:	08011e40 	.word	0x08011e40
 80032fc:	08011e48 	.word	0x08011e48
 8003300:	08011e54 	.word	0x08011e54
 8003304:	08011e60 	.word	0x08011e60
 8003308:	08011e68 	.word	0x08011e68
 800330c:	08011e14 	.word	0x08011e14
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	210a      	movs	r1, #10
 8003320:	48b4      	ldr	r0, [pc, #720]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003322:	f009 fd87 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003332:	2246      	movs	r2, #70	; 0x46
 8003334:	210a      	movs	r1, #10
 8003336:	48b0      	ldr	r0, [pc, #704]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003338:	f009 fd7c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800333c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	225a      	movs	r2, #90	; 0x5a
 800334a:	210a      	movs	r1, #10
 800334c:	48ab      	ldr	r0, [pc, #684]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800334e:	f009 fd71 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003352:	2300      	movs	r3, #0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800335e:	226e      	movs	r2, #110	; 0x6e
 8003360:	210a      	movs	r1, #10
 8003362:	48a7      	ldr	r0, [pc, #668]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003364:	f009 fd66 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003374:	2282      	movs	r2, #130	; 0x82
 8003376:	210a      	movs	r1, #10
 8003378:	48a2      	ldr	r0, [pc, #648]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 800337a:	f009 fd5b 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800338a:	2296      	movs	r2, #150	; 0x96
 800338c:	210a      	movs	r1, #10
 800338e:	489e      	ldr	r0, [pc, #632]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003390:	f009 fd50 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003394:	2300      	movs	r3, #0
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033a0:	22aa      	movs	r2, #170	; 0xaa
 80033a2:	210a      	movs	r1, #10
 80033a4:	4899      	ldr	r0, [pc, #612]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 80033a6:	f009 fd45 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033aa:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2302      	movs	r3, #2
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	22d2      	movs	r2, #210	; 0xd2
 80033b8:	2105      	movs	r1, #5
 80033ba:	4895      	ldr	r0, [pc, #596]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033bc:	f009 fd3a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033c0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	22d2      	movs	r2, #210	; 0xd2
 80033ce:	2161      	movs	r1, #97	; 0x61
 80033d0:	488f      	ldr	r0, [pc, #572]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033d2:	f009 fd2f 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	22d2      	movs	r2, #210	; 0xd2
 80033e4:	21af      	movs	r1, #175	; 0xaf
 80033e6:	488a      	ldr	r0, [pc, #552]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033e8:	f009 fd24 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033ec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	22d2      	movs	r2, #210	; 0xd2
 80033fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033fe:	4884      	ldr	r0, [pc, #528]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 8003400:	f009 fd18 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8003404:	e1fc      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003412:	2232      	movs	r2, #50	; 0x32
 8003414:	210a      	movs	r1, #10
 8003416:	4877      	ldr	r0, [pc, #476]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003418:	f009 fd0c 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341c:	2300      	movs	r3, #0
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003428:	2246      	movs	r2, #70	; 0x46
 800342a:	210a      	movs	r1, #10
 800342c:	4872      	ldr	r0, [pc, #456]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 800342e:	f009 fd01 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003432:	2300      	movs	r3, #0
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2302      	movs	r3, #2
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800343e:	225a      	movs	r2, #90	; 0x5a
 8003440:	210a      	movs	r1, #10
 8003442:	486e      	ldr	r0, [pc, #440]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 8003444:	f009 fcf6 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003448:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	226e      	movs	r2, #110	; 0x6e
 8003456:	210a      	movs	r1, #10
 8003458:	4869      	ldr	r0, [pc, #420]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 800345a:	f009 fceb 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800345e:	2300      	movs	r3, #0
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2302      	movs	r3, #2
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800346a:	2282      	movs	r2, #130	; 0x82
 800346c:	210a      	movs	r1, #10
 800346e:	4865      	ldr	r0, [pc, #404]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003470:	f009 fce0 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2296      	movs	r2, #150	; 0x96
 8003482:	210a      	movs	r1, #10
 8003484:	4860      	ldr	r0, [pc, #384]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003486:	f009 fcd5 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	22aa      	movs	r2, #170	; 0xaa
 8003498:	210a      	movs	r1, #10
 800349a:	485c      	ldr	r0, [pc, #368]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 800349c:	f009 fcca 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80034a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2302      	movs	r3, #2
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	22d2      	movs	r2, #210	; 0xd2
 80034ae:	2105      	movs	r1, #5
 80034b0:	4857      	ldr	r0, [pc, #348]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034b2:	f009 fcbf 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	22d2      	movs	r2, #210	; 0xd2
 80034c4:	2161      	movs	r1, #97	; 0x61
 80034c6:	4852      	ldr	r0, [pc, #328]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034c8:	f009 fcb4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2302      	movs	r3, #2
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	22d2      	movs	r2, #210	; 0xd2
 80034da:	21af      	movs	r1, #175	; 0xaf
 80034dc:	484c      	ldr	r0, [pc, #304]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034de:	f009 fca9 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034e2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2302      	movs	r3, #2
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	22d2      	movs	r2, #210	; 0xd2
 80034f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034f4:	4846      	ldr	r0, [pc, #280]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034f6:	f009 fc9d 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80034fa:	e181      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	210a      	movs	r1, #10
 800350c:	4839      	ldr	r0, [pc, #228]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 800350e:	f009 fc91 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351e:	2246      	movs	r2, #70	; 0x46
 8003520:	210a      	movs	r1, #10
 8003522:	4835      	ldr	r0, [pc, #212]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003524:	f009 fc86 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003528:	2300      	movs	r3, #0
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2302      	movs	r3, #2
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003534:	225a      	movs	r2, #90	; 0x5a
 8003536:	210a      	movs	r1, #10
 8003538:	4830      	ldr	r0, [pc, #192]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800353a:	f009 fc7b 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800354a:	226e      	movs	r2, #110	; 0x6e
 800354c:	210a      	movs	r1, #10
 800354e:	482c      	ldr	r0, [pc, #176]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003550:	f009 fc70 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003554:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2302      	movs	r3, #2
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	2282      	movs	r2, #130	; 0x82
 8003562:	210a      	movs	r1, #10
 8003564:	4827      	ldr	r0, [pc, #156]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003566:	f009 fc65 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2302      	movs	r3, #2
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003576:	2296      	movs	r2, #150	; 0x96
 8003578:	210a      	movs	r1, #10
 800357a:	4823      	ldr	r0, [pc, #140]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 800357c:	f009 fc5a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003580:	2300      	movs	r3, #0
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2302      	movs	r3, #2
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800358c:	22aa      	movs	r2, #170	; 0xaa
 800358e:	210a      	movs	r1, #10
 8003590:	481e      	ldr	r0, [pc, #120]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 8003592:	f009 fc4f 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003596:	f240 23fd 	movw	r3, #765	; 0x2fd
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2302      	movs	r3, #2
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	22d2      	movs	r2, #210	; 0xd2
 80035a4:	2105      	movs	r1, #5
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035a8:	f009 fc44 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80035ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2302      	movs	r3, #2
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	22d2      	movs	r2, #210	; 0xd2
 80035ba:	2161      	movs	r1, #97	; 0x61
 80035bc:	4814      	ldr	r0, [pc, #80]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035be:	f009 fc39 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	22d2      	movs	r2, #210	; 0xd2
 80035d0:	21af      	movs	r1, #175	; 0xaf
 80035d2:	480f      	ldr	r0, [pc, #60]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035d4:	f009 fc2e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035d8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2302      	movs	r3, #2
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	22d2      	movs	r2, #210	; 0xd2
 80035e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035ec:	f009 fc22 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80035f0:	e106      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80035f2:	bf00      	nop
 80035f4:	08011e2c 	.word	0x08011e2c
 80035f8:	08011e34 	.word	0x08011e34
 80035fc:	08011e40 	.word	0x08011e40
 8003600:	08011e48 	.word	0x08011e48
 8003604:	08011e54 	.word	0x08011e54
 8003608:	08011e60 	.word	0x08011e60
 800360c:	08011e68 	.word	0x08011e68
 8003610:	08011e14 	.word	0x08011e14
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2302      	movs	r3, #2
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	210a      	movs	r1, #10
 8003624:	4878      	ldr	r0, [pc, #480]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 8003626:	f009 fc05 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2302      	movs	r3, #2
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003636:	2246      	movs	r2, #70	; 0x46
 8003638:	210a      	movs	r1, #10
 800363a:	4874      	ldr	r0, [pc, #464]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 800363c:	f009 fbfa 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003640:	2300      	movs	r3, #0
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800364c:	225a      	movs	r2, #90	; 0x5a
 800364e:	210a      	movs	r1, #10
 8003650:	486f      	ldr	r0, [pc, #444]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003652:	f009 fbef 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2302      	movs	r3, #2
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003662:	226e      	movs	r2, #110	; 0x6e
 8003664:	210a      	movs	r1, #10
 8003666:	486b      	ldr	r0, [pc, #428]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 8003668:	f009 fbe4 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2302      	movs	r3, #2
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003678:	2282      	movs	r2, #130	; 0x82
 800367a:	210a      	movs	r1, #10
 800367c:	4866      	ldr	r0, [pc, #408]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 800367e:	f009 fbd9 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003682:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	2296      	movs	r2, #150	; 0x96
 8003690:	210a      	movs	r1, #10
 8003692:	4862      	ldr	r0, [pc, #392]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 8003694:	f009 fbce 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003698:	2300      	movs	r3, #0
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a4:	22aa      	movs	r2, #170	; 0xaa
 80036a6:	210a      	movs	r1, #10
 80036a8:	485d      	ldr	r0, [pc, #372]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80036aa:	f009 fbc3 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80036ae:	f240 23fd 	movw	r3, #765	; 0x2fd
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22d2      	movs	r2, #210	; 0xd2
 80036bc:	2105      	movs	r1, #5
 80036be:	4859      	ldr	r0, [pc, #356]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036c0:	f009 fbb8 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80036c4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2302      	movs	r3, #2
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	22d2      	movs	r2, #210	; 0xd2
 80036d2:	2161      	movs	r1, #97	; 0x61
 80036d4:	4853      	ldr	r0, [pc, #332]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036d6:	f009 fbad 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2302      	movs	r3, #2
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	22d2      	movs	r2, #210	; 0xd2
 80036e8:	21af      	movs	r1, #175	; 0xaf
 80036ea:	484e      	ldr	r0, [pc, #312]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036ec:	f009 fba2 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	22d2      	movs	r2, #210	; 0xd2
 80036fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003702:	4848      	ldr	r0, [pc, #288]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 8003704:	f009 fb96 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 8003708:	e07a      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370a:	2300      	movs	r3, #0
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003716:	2232      	movs	r2, #50	; 0x32
 8003718:	210a      	movs	r1, #10
 800371a:	483b      	ldr	r0, [pc, #236]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 800371c:	f009 fb8a 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003720:	2300      	movs	r3, #0
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2302      	movs	r3, #2
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800372c:	2246      	movs	r2, #70	; 0x46
 800372e:	210a      	movs	r1, #10
 8003730:	4836      	ldr	r0, [pc, #216]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 8003732:	f009 fb7f 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2302      	movs	r3, #2
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003742:	225a      	movs	r2, #90	; 0x5a
 8003744:	210a      	movs	r1, #10
 8003746:	4832      	ldr	r0, [pc, #200]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003748:	f009 fb74 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2302      	movs	r3, #2
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003758:	226e      	movs	r2, #110	; 0x6e
 800375a:	210a      	movs	r1, #10
 800375c:	482d      	ldr	r0, [pc, #180]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 800375e:	f009 fb69 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003762:	2300      	movs	r3, #0
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800376e:	2282      	movs	r2, #130	; 0x82
 8003770:	210a      	movs	r1, #10
 8003772:	4829      	ldr	r0, [pc, #164]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 8003774:	f009 fb5e 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	2302      	movs	r3, #2
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003784:	2296      	movs	r2, #150	; 0x96
 8003786:	210a      	movs	r1, #10
 8003788:	4824      	ldr	r0, [pc, #144]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 800378a:	f009 fb53 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800378e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2302      	movs	r3, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	22aa      	movs	r2, #170	; 0xaa
 800379c:	210a      	movs	r1, #10
 800379e:	4820      	ldr	r0, [pc, #128]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80037a0:	f009 fb48 	bl	800ce34 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	22d2      	movs	r2, #210	; 0xd2
 80037b2:	2105      	movs	r1, #5
 80037b4:	481b      	ldr	r0, [pc, #108]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037b6:	f009 fb3d 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	22d2      	movs	r2, #210	; 0xd2
 80037c8:	2161      	movs	r1, #97	; 0x61
 80037ca:	4816      	ldr	r0, [pc, #88]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037cc:	f009 fb32 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	22d2      	movs	r2, #210	; 0xd2
 80037de:	21af      	movs	r1, #175	; 0xaf
 80037e0:	4811      	ldr	r0, [pc, #68]	; (8003828 <FuncMenu_DrawOutputMenu+0x78c>)
 80037e2:	f009 fb27 	bl	800ce34 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037e6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22d2      	movs	r2, #210	; 0xd2
 80037f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037f8:	480a      	ldr	r0, [pc, #40]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037fa:	f009 fb1b 	bl	800ce34 <ILI9341_Draw_Text>
				break;
 80037fe:	bf00      	nop
		}

	}


}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	08011e2c 	.word	0x08011e2c
 800380c:	08011e34 	.word	0x08011e34
 8003810:	08011e40 	.word	0x08011e40
 8003814:	08011e48 	.word	0x08011e48
 8003818:	08011e54 	.word	0x08011e54
 800381c:	08011e60 	.word	0x08011e60
 8003820:	08011e68 	.word	0x08011e68
 8003824:	08011e14 	.word	0x08011e14
 8003828:	08011e70 	.word	0x08011e70

0800382c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <GainMenu_DrawMenu+0x20>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d008      	beq.n	8003852 <GainMenu_DrawMenu+0x26>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d000      	beq.n	8003846 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003844:	e008      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003846:	f000 f80b 	bl	8003860 <GainMenu_DrawMainMenu>
			break;
 800384a:	e005      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800384c:	f000 f850 	bl	80038f0 <GainMenu_DrawSignalMenu>
			break;
 8003850:	e002      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003852:	f000 f863 	bl	800391c <GainMenu_DrawSyncMenu>
			break;
 8003856:	bf00      	nop

	}
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2302      	movs	r3, #2
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	220a      	movs	r2, #10
 8003874:	210a      	movs	r1, #10
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <GainMenu_DrawMainMenu+0x80>)
 8003878:	f009 fadc 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800387c:	f7fd fb3c 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003880:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2302      	movs	r3, #2
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	22d2      	movs	r2, #210	; 0xd2
 800388e:	2105      	movs	r1, #5
 8003890:	4814      	ldr	r0, [pc, #80]	; (80038e4 <GainMenu_DrawMainMenu+0x84>)
 8003892:	f009 facf 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003896:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2302      	movs	r3, #2
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	22d2      	movs	r2, #210	; 0xd2
 80038a4:	2161      	movs	r1, #97	; 0x61
 80038a6:	4810      	ldr	r0, [pc, #64]	; (80038e8 <GainMenu_DrawMainMenu+0x88>)
 80038a8:	f009 fac4 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2302      	movs	r3, #2
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	22d2      	movs	r2, #210	; 0xd2
 80038ba:	21af      	movs	r1, #175	; 0xaf
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038be:	f009 fab9 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038c2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2302      	movs	r3, #2
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	22d2      	movs	r2, #210	; 0xd2
 80038d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038d4:	4805      	ldr	r0, [pc, #20]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038d6:	f009 faad 	bl	800ce34 <ILI9341_Draw_Text>
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08011e78 	.word	0x08011e78
 80038e4:	08011e84 	.word	0x08011e84
 80038e8:	08011e8c 	.word	0x08011e8c
 80038ec:	08011e94 	.word	0x08011e94

080038f0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80038f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	220a      	movs	r2, #10
 8003904:	210a      	movs	r1, #10
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <GainMenu_DrawSignalMenu+0x28>)
 8003908:	f009 fa94 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800390c:	f7fd faf4 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	08011e9c 	.word	0x08011e9c

0800391c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	220a      	movs	r2, #10
 8003930:	210a      	movs	r1, #10
 8003932:	4804      	ldr	r0, [pc, #16]	; (8003944 <GainMenu_DrawSyncMenu+0x28>)
 8003934:	f009 fa7e 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003938:	f7fd fade 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08011eac 	.word	0x08011eac

08003948 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d007      	beq.n	8003968 <ToplevelMenu_DrawMenu+0x20>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d008      	beq.n	800396e <ToplevelMenu_DrawMenu+0x26>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d000      	beq.n	8003962 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003960:	e008      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003962:	f000 f80b 	bl	800397c <ToplevelMenu_DrawMainMenu>
			break;
 8003966:	e005      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003968:	f000 f848 	bl	80039fc <ToplevelMenu_DrawOutputMenu>
			break;
 800396c:	e002      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800396e:	f000 f88f 	bl	8003a90 <ToplevelMenu_DrawInputMenu>
			break;
 8003972:	bf00      	nop

	}
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003982:	481a      	ldr	r0, [pc, #104]	; (80039ec <ToplevelMenu_DrawMainMenu+0x70>)
 8003984:	f00a fdf2 	bl	800e56c <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003988:	f7fd fab6 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800398c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2302      	movs	r3, #2
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	22d2      	movs	r2, #210	; 0xd2
 800399a:	2106      	movs	r1, #6
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <ToplevelMenu_DrawMainMenu+0x74>)
 800399e:	f009 fa49 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80039a2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2302      	movs	r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22d2      	movs	r2, #210	; 0xd2
 80039b0:	215d      	movs	r1, #93	; 0x5d
 80039b2:	4810      	ldr	r0, [pc, #64]	; (80039f4 <ToplevelMenu_DrawMainMenu+0x78>)
 80039b4:	f009 fa3e 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	22d2      	movs	r2, #210	; 0xd2
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039ca:	f009 fa33 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039ce:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2302      	movs	r3, #2
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2300      	movs	r3, #0
 80039da:	22d2      	movs	r2, #210	; 0xd2
 80039dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039e2:	f009 fa27 	bl	800ce34 <ILI9341_Draw_Text>


}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	08011ebc 	.word	0x08011ebc
 80039f0:	08011ed0 	.word	0x08011ed0
 80039f4:	08011ed8 	.word	0x08011ed8
 80039f8:	08011ee0 	.word	0x08011ee0

080039fc <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2302      	movs	r3, #2
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	220a      	movs	r2, #10
 8003a10:	210a      	movs	r1, #10
 8003a12:	481a      	ldr	r0, [pc, #104]	; (8003a7c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003a14:	f009 fa0e 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a18:	f7fd fa6e 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a1c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	2302      	movs	r3, #2
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	22d2      	movs	r2, #210	; 0xd2
 8003a2a:	210d      	movs	r1, #13
 8003a2c:	4814      	ldr	r0, [pc, #80]	; (8003a80 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003a2e:	f009 fa01 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a32:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	22d2      	movs	r2, #210	; 0xd2
 8003a40:	2163      	movs	r1, #99	; 0x63
 8003a42:	4810      	ldr	r0, [pc, #64]	; (8003a84 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003a44:	f009 f9f6 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	22d2      	movs	r2, #210	; 0xd2
 8003a56:	21b0      	movs	r1, #176	; 0xb0
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003a5a:	f009 f9eb 	bl	800ce34 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a5e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2302      	movs	r3, #2
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	22d2      	movs	r2, #210	; 0xd2
 8003a6c:	21f5      	movs	r1, #245	; 0xf5
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003a70:	f009 f9e0 	bl	800ce34 <ILI9341_Draw_Text>
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	08011ee8 	.word	0x08011ee8
 8003a80:	08011ef0 	.word	0x08011ef0
 8003a84:	08011ef8 	.word	0x08011ef8
 8003a88:	08011f00 	.word	0x08011f00
 8003a8c:	08011f08 	.word	0x08011f08

08003a90 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	220a      	movs	r2, #10
 8003aa4:	210a      	movs	r1, #10
 8003aa6:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <ToplevelMenu_DrawInputMenu+0x28>)
 8003aa8:	f009 f9c4 	bl	800ce34 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003aac:	f7fd fa24 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08011f10 	.word	0x08011f10

08003abc <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <BiasMenu_getStatus+0x14>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20001ec9 	.word	0x20001ec9

08003ad4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <BiasMenuEntryHandler+0x34>)
 8003ada:	f00a fd47 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8003ade:	f7fd fccb 	bl	8001478 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <BiasMenuEntryHandler+0x38>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003aea:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003af0:	f001 f9f8 	bl	8004ee4 <BO_GetDcBiasEncoderValue>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <BiasMenuEntryHandler+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b02:	230e      	movs	r3, #14
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08011f18 	.word	0x08011f18
 8003b0c:	20001ec9 	.word	0x20001ec9
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	20001ecb 	.word	0x20001ecb

08003b18 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <BiasMenuInputHandler+0x24>)
 8003b1e:	f00a fd25 	bl	800e56c <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003b22:	2001      	movs	r0, #1
 8003b24:	f001 fff0 	bl	8005b08 <SM_GetEncoderValue>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9e6 	bl	8004efc <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <BiasMenuInputHandler+0x28>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b36:	230e      	movs	r3, #14
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	08011f3c 	.word	0x08011f3c
 8003b40:	20001ecb 	.word	0x20001ecb

08003b44 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <BiasMenuExitHandler+0x28>)
 8003b4a:	f00a fd0f 	bl	800e56c <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <BiasMenuExitHandler+0x2c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003b54:	f7fd fc90 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <BiasMenuExitHandler+0x30>)
 8003b5a:	f00a fd07 	bl	800e56c <puts>
	#endif

	eNewEvent = evIdle;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <BiasMenuExitHandler+0x34>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08011f60 	.word	0x08011f60
 8003b70:	20001ec9 	.word	0x20001ec9
 8003b74:	08011f84 	.word	0x08011f84
 8003b78:	20001ecb 	.word	0x20001ecb

08003b7c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003b80:	4bb8      	ldr	r3, [pc, #736]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b0e      	cmp	r3, #14
 8003b86:	f200 8216 	bhi.w	8003fb6 <EM_ProcessEvent+0x43a>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <EM_ProcessEvent+0x14>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003bcd 	.word	0x08003bcd
 8003b94:	08003bff 	.word	0x08003bff
 8003b98:	08003c85 	.word	0x08003c85
 8003b9c:	08003ca3 	.word	0x08003ca3
 8003ba0:	08003cef 	.word	0x08003cef
 8003ba4:	08003d21 	.word	0x08003d21
 8003ba8:	08003d53 	.word	0x08003d53
 8003bac:	08003d9f 	.word	0x08003d9f
 8003bb0:	08003dd1 	.word	0x08003dd1
 8003bb4:	08003fb7 	.word	0x08003fb7
 8003bb8:	08003e03 	.word	0x08003e03
 8003bbc:	08003e95 	.word	0x08003e95
 8003bc0:	08003ec7 	.word	0x08003ec7
 8003bc4:	08003ef7 	.word	0x08003ef7
 8003bc8:	08003f81 	.word	0x08003f81
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003bcc:	48a6      	ldr	r0, [pc, #664]	; (8003e68 <EM_ProcessEvent+0x2ec>)
 8003bce:	f00a fccd 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003bda:	f000 ffc3 	bl	8004b64 <ToplevelOutputMenuEntryHandler>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003be4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003be6:	4ba1      	ldr	r3, [pc, #644]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	f040 81e5 	bne.w	8003fba <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003bf0:	f000 ffe4 	bl	8004bbc <ToplevelInputMenuEntryHandler>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003bfa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003bfc:	e1dd      	b.n	8003fba <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003bfe:	489c      	ldr	r0, [pc, #624]	; (8003e70 <EM_ProcessEvent+0x2f4>)
 8003c00:	f00a fcb4 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c04:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	d105      	bne.n	8003c18 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003c0c:	f000 ffc0 	bl	8004b90 <ToplevelOutputMenuExitHandler>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b93      	ldr	r3, [pc, #588]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003c18:	4b94      	ldr	r3, [pc, #592]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 ff8f 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003c26:	f000 fd85 	bl	8004734 <FuncMainMenuEntryHandler>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c30:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d108      	bne.n	8003c4c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 ff82 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003c40:	f000 fb5c 	bl	80042fc <FreqMainMenuEntryHandler>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c4a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003c4c:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d108      	bne.n	8003c66 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c54:	2000      	movs	r0, #0
 8003c56:	f000 ff75 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003c5a:	f000 fe71 	bl	8004940 <GainMainMenuEntryHandler>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003c66:	4b81      	ldr	r3, [pc, #516]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	f040 81a7 	bne.w	8003fbe <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 ff67 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003c76:	f7ff ff2d 	bl	8003ad4 <BiasMenuEntryHandler>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b79      	ldr	r3, [pc, #484]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003c82:	e19c      	b.n	8003fbe <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003c84:	487b      	ldr	r0, [pc, #492]	; (8003e74 <EM_ProcessEvent+0x2f8>)
 8003c86:	f00a fc71 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	f040 8197 	bne.w	8003fc2 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003c94:	f000 ffa8 	bl	8004be8 <ToplevelInputMenuExitHandler>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003ca0:	e18f      	b.n	8003fc2 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003ca2:	4875      	ldr	r0, [pc, #468]	; (8003e78 <EM_ProcessEvent+0x2fc>)
 8003ca4:	f00a fc62 	bl	800e56c <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d108      	bne.n	8003cc2 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 8003cb0:	f000 fd56 	bl	8004760 <FuncMainMenuExitHandler>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cba:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f000 ff41 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003cca:	f000 fd65 	bl	8004798 <FuncSignalMenuEntryHandler>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cd4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 8173 	bne.w	8003fc6 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003ce0:	f000 fdbe 	bl	8004860 <FuncSyncMenuEntryHandler>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cea:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003cec:	e16b      	b.n	8003fc6 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003cee:	4863      	ldr	r0, [pc, #396]	; (8003e7c <EM_ProcessEvent+0x300>)
 8003cf0:	f00a fc3c 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d105      	bne.n	8003d08 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003cfc:	f000 fd84 	bl	8004808 <FuncSignalMenuInputHandler>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	f040 815c 	bne.w	8003fca <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003d12:	f000 fd8f 	bl	8004834 <FuncSignalMenuExitHandler>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d1c:	701a      	strb	r2, [r3, #0]

			}

			break;
 8003d1e:	e154      	b.n	8003fca <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003d20:	4857      	ldr	r0, [pc, #348]	; (8003e80 <EM_ProcessEvent+0x304>)
 8003d22:	f00a fc23 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d105      	bne.n	8003d3a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003d2e:	f000 fdcf 	bl	80048d0 <FuncSyncMenuInputHandler>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d38:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	f040 8145 	bne.w	8003fce <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003d44:	f000 fdda 	bl	80048fc <FuncSyncMenuExitHandler>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b45      	ldr	r3, [pc, #276]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d4e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d50:	e13d      	b.n	8003fce <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003d52:	484c      	ldr	r0, [pc, #304]	; (8003e84 <EM_ProcessEvent+0x308>)
 8003d54:	f00a fc0a 	bl	800e56c <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d108      	bne.n	8003d72 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003d60:	f000 fe04 	bl	800496c <GainMainMenuExitHandler>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d6a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f000 fee9 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003d7a:	f000 fe13 	bl	80049a4 <GainSignalMenuEntryHandler>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	f040 8121 	bne.w	8003fd2 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003d90:	f000 fe6a 	bl	8004a68 <GainSyncMenuEntryHandler>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d9a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d9c:	e119      	b.n	8003fd2 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003d9e:	483a      	ldr	r0, [pc, #232]	; (8003e88 <EM_ProcessEvent+0x30c>)
 8003da0:	f00a fbe4 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d105      	bne.n	8003db8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003dac:	f000 fe30 	bl	8004a10 <GainSignalMenuInputHandler>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003db6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	f040 810a 	bne.w	8003fd6 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003dc2:	f000 fe3b 	bl	8004a3c <GainSignalMenuExitHandler>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dcc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003dce:	e102      	b.n	8003fd6 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003dd0:	482e      	ldr	r0, [pc, #184]	; (8003e8c <EM_ProcessEvent+0x310>)
 8003dd2:	f00a fbcb 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003dd6:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d105      	bne.n	8003dea <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 8003dde:	f000 fe79 	bl	8004ad4 <GainSyncMenuInputHandler>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003de8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	f040 80f3 	bne.w	8003fda <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003df4:	f000 fe84 	bl	8004b00 <GainSyncMenuExitHandler>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dfe:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e00:	e0eb      	b.n	8003fda <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003e02:	4823      	ldr	r0, [pc, #140]	; (8003e90 <EM_ProcessEvent+0x314>)
 8003e04:	f00a fbb2 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d108      	bne.n	8003e22 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003e10:	f000 fa8a 	bl	8004328 <FreqMainMenuExitHandler>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e1a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f000 fe91 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003e2a:	f000 fa9f 	bl	800436c <FreqPresetMenuEntryHandler>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e34:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d105      	bne.n	8003e4a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003e3e:	f000 faf5 	bl	800442c <FreqAdjustMenuEntryHandler>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e48:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f040 80c5 	bne.w	8003fde <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003e54:	f000 f8ea 	bl	800402c <FreqSweepMenuEntryHandler>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b01      	ldr	r3, [pc, #4]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e5e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e60:	e0bd      	b.n	8003fde <EM_ProcessEvent+0x462>
 8003e62:	bf00      	nop
 8003e64:	20001eca 	.word	0x20001eca
 8003e68:	08011f9c 	.word	0x08011f9c
 8003e6c:	20001ecb 	.word	0x20001ecb
 8003e70:	08011fa8 	.word	0x08011fa8
 8003e74:	08011fc4 	.word	0x08011fc4
 8003e78:	08011fe0 	.word	0x08011fe0
 8003e7c:	08011ff8 	.word	0x08011ff8
 8003e80:	08012010 	.word	0x08012010
 8003e84:	08012028 	.word	0x08012028
 8003e88:	08012040 	.word	0x08012040
 8003e8c:	08012058 	.word	0x08012058
 8003e90:	08012070 	.word	0x08012070

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003e94:	4857      	ldr	r0, [pc, #348]	; (8003ff4 <EM_ProcessEvent+0x478>)
 8003e96:	f00a fb69 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e9a:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d105      	bne.n	8003eae <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003ea2:	f000 fa97 	bl	80043d4 <FreqPresetMenuInputHandler>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003eac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	f040 8095 	bne.w	8003fe2 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003eb8:	f000 faa2 	bl	8004400 <FreqPresetMenuExitHandler>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ec2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ec4:	e08d      	b.n	8003fe2 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003ec6:	484e      	ldr	r0, [pc, #312]	; (8004000 <EM_ProcessEvent+0x484>)
 8003ec8:	f00a fb50 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d105      	bne.n	8003ee0 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003ed4:	f000 facc 	bl	8004470 <FreqAdjustMenuInputHandler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ede:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d17e      	bne.n	8003fe6 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003ee8:	f000 fad4 	bl	8004494 <FreqAdjustMenuExitHandler>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ef2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ef4:	e077      	b.n	8003fe6 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003ef6:	4843      	ldr	r0, [pc, #268]	; (8004004 <EM_ProcessEvent+0x488>)
 8003ef8:	f00a fb38 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003efc:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003f04:	2007      	movs	r0, #7
 8003f06:	f000 f8ed 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f10:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d106      	bne.n	8003f28 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003f1a:	2008      	movs	r0, #8
 8003f1c:	f000 f8e2 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f26:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d106      	bne.n	8003f3e <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003f30:	2009      	movs	r0, #9
 8003f32:	f000 f8d7 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f3c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d106      	bne.n	8003f54 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003f46:	200a      	movs	r0, #10
 8003f48:	f000 f8cc 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f52:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d106      	bne.n	8003f6a <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003f5c:	200b      	movs	r0, #11
 8003f5e:	f000 f8c1 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f68:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d13b      	bne.n	8003fea <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003f72:	f000 f99f 	bl	80042b4 <FreqSweepMenuExitHandler>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f7c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f7e:	e034      	b.n	8003fea <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003f80:	4821      	ldr	r0, [pc, #132]	; (8004008 <EM_ProcessEvent+0x48c>)
 8003f82:	f00a faf3 	bl	800e56c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d105      	bne.n	8003f9a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003f8e:	f7ff fdc3 	bl	8003b18 <BiasMenuInputHandler>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d125      	bne.n	8003fee <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003fa2:	f7ff fdcf 	bl	8003b44 <BiasMenuExitHandler>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003fac:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f000 fdc8 	bl	8004b44 <ToplevelMenu_setStatus>
			}

			break;
 8003fb4:	e01b      	b.n	8003fee <EM_ProcessEvent+0x472>

		default:
			break;
 8003fb6:	bf00      	nop
 8003fb8:	e01a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fba:	bf00      	nop
 8003fbc:	e018      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fbe:	bf00      	nop
 8003fc0:	e016      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc2:	bf00      	nop
 8003fc4:	e014      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc6:	bf00      	nop
 8003fc8:	e012      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fca:	bf00      	nop
 8003fcc:	e010      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fce:	bf00      	nop
 8003fd0:	e00e      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd2:	bf00      	nop
 8003fd4:	e00c      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd6:	bf00      	nop
 8003fd8:	e00a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fda:	bf00      	nop
 8003fdc:	e008      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fee:	bf00      	nop
	}

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08012088 	.word	0x08012088
 8003ff8:	20001ecb 	.word	0x20001ecb
 8003ffc:	20001eca 	.word	0x20001eca
 8004000:	080120a0 	.word	0x080120a0
 8004004:	080120b8 	.word	0x080120b8
 8004008:	080120d0 	.word	0x080120d0

0800400c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <EM_SetNewEvent+0x1c>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	7013      	strb	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20001ecb 	.word	0x20001ecb

0800402c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <FreqSweepMenuEntryHandler+0x9c>)
 8004032:	f00a fa9b 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004036:	f7fd fa1f 	bl	8001478 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d008      	beq.n	8004068 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004064:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004072:	eef4 7a47 	vcmp.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d101      	bne.n	8004080 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 800407c:	f000 fa20 	bl	80044c0 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004080:	2000      	movs	r0, #0
 8004082:	f000 fa77 	bl	8004574 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004086:	2000      	movs	r0, #0
 8004088:	f000 fad2 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800408c:	f000 fb0c 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004090:	eef0 7a40 	vmov.f32	s15, s0
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <FreqSweepMenuEntryHandler+0xa8>)
 8004096:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 800409c:	2200      	movs	r2, #0
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040a0:	2009      	movs	r0, #9
 80040a2:	f000 f81f 	bl	80040e4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040a8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <FreqSweepMenuEntryHandler+0xb0>)
 80040b6:	2204      	movs	r2, #4
 80040b8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <FreqSweepMenuEntryHandler+0xb4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80040c0:	230d      	movs	r3, #13
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	080120e0 	.word	0x080120e0
 80040cc:	40013400 	.word	0x40013400
 80040d0:	20000004 	.word	0x20000004
 80040d4:	20001f18 	.word	0x20001f18
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	20001ece 	.word	0x20001ece
 80040e0:	20001ecb 	.word	0x20001ecb

080040e4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80040ee:	4865      	ldr	r0, [pc, #404]	; (8004284 <FreqSweepMenuInputHandler+0x1a0>)
 80040f0:	f00a fa3c 	bl	800e56c <puts>
	#endif



	switch(pEvent)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	3b07      	subs	r3, #7
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	f200 80ba 	bhi.w	8004272 <FreqSweepMenuInputHandler+0x18e>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <FreqSweepMenuInputHandler+0x20>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004119 	.word	0x08004119
 8004108:	08004139 	.word	0x08004139
 800410c:	08004263 	.word	0x08004263
 8004110:	0800426b 	.word	0x0800426b
 8004114:	08004179 	.word	0x08004179
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8004118:	485b      	ldr	r0, [pc, #364]	; (8004288 <FreqSweepMenuInputHandler+0x1a4>)
 800411a:	f00a fa27 	bl	800e56c <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a5a      	ldr	r2, [pc, #360]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a57      	ldr	r2, [pc, #348]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	6013      	str	r3, [r2, #0]
			break;
 8004136:	e09d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8004138:	4855      	ldr	r0, [pc, #340]	; (8004290 <FreqSweepMenuInputHandler+0x1ac>)
 800413a:	f00a fa17 	bl	800e56c <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b52      	ldr	r3, [pc, #328]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d004      	beq.n	800415e <FreqSweepMenuInputHandler+0x7a>
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <FreqSweepMenuInputHandler+0x86>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <FreqSweepMenuInputHandler+0x80>
 800415c:	e006      	b.n	800416c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 800415e:	f000 f9af 	bl	80044c0 <_setSweepModeDown>
					break;
 8004162:	e003      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8004164:	f000 f9dc 	bl	8004520 <_setSweepModeUp>
					break;
 8004168:	e000      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800416a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 800416c:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f9ff 	bl	8004574 <_setEncoderControlMode>

			break;
 8004176:	e07d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004178:	4848      	ldr	r0, [pc, #288]	; (800429c <FreqSweepMenuInputHandler+0x1b8>)
 800417a:	f00a f9f7 	bl	800e56c <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800417e:	4b46      	ldr	r3, [pc, #280]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <FreqSweepMenuInputHandler+0xa8>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00b      	beq.n	80041a2 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800418a:	e073      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800418c:	2000      	movs	r0, #0
 800418e:	f000 fa4f 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8004192:	f000 fa89 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004196:	eef0 7a40 	vmov.f32	s15, s0
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <FreqSweepMenuInputHandler+0x1bc>)
 800419c:	edc3 7a00 	vstr	s15, [r3]
					break;
 80041a0:	e05e      	b.n	8004260 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 80041a2:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <FreqSweepMenuInputHandler+0xcc>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d02a      	beq.n	8004204 <FreqSweepMenuInputHandler+0x120>
							break;
 80041ae:	e056      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	d803      	bhi.n	80041c0 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041ba:	220d      	movs	r2, #13
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041be:	e04e      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	dd09      	ble.n	80041f0 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e8:	ee17 2a90 	vmov	r2, s15
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041ee:	e036      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 80041fe:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004202:	e02c      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800420c:	4293      	cmp	r3, r2
 800420e:	d904      	bls.n	800421a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004218:	e020      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d509      	bpl.n	800424a <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800423e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004242:	ee17 2a90 	vmov	r2, s15
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004248:	e008      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
							break;
 800425c:	bf00      	nop
					break;
 800425e:	bf00      	nop
			break;
 8004260:	e008      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004262:	2000      	movs	r0, #0
 8004264:	f000 f986 	bl	8004574 <_setEncoderControlMode>

			break;
 8004268:	e004      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 f982 	bl	8004574 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004270:	e000      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8004272:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <FreqSweepMenuInputHandler+0x1cc>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800427a:	230d      	movs	r3, #13
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	08012104 	.word	0x08012104
 8004288:	08012130 	.word	0x08012130
 800428c:	40000c00 	.word	0x40000c00
 8004290:	08012148 	.word	0x08012148
 8004294:	20001ecc 	.word	0x20001ecc
 8004298:	20001ecd 	.word	0x20001ecd
 800429c:	08012160 	.word	0x08012160
 80042a0:	20001f18 	.word	0x20001f18
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	20000004 	.word	0x20000004
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20001ecb 	.word	0x20001ecb

080042b4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <FreqSweepMenuExitHandler+0x38>)
 80042ba:	f00a f957 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 80042be:	f7fd f8db 	bl	8001478 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <FreqSweepMenuExitHandler+0x40>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <FreqSweepMenuExitHandler+0x44>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80042e6:	230a      	movs	r3, #10
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08012178 	.word	0x08012178
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	20001ece 	.word	0x20001ece
 80042f8:	20001ecb 	.word	0x20001ecb

080042fc <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8004300:	4806      	ldr	r0, [pc, #24]	; (800431c <FreqMainMenuEntryHandler+0x20>)
 8004302:	f00a f933 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004306:	f7fd f8b7 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <FreqMainMenuEntryHandler+0x24>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <FreqMainMenuEntryHandler+0x28>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004316:	230a      	movs	r3, #10
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	080121a0 	.word	0x080121a0
 8004320:	20001ece 	.word	0x20001ece
 8004324:	20001ecb 	.word	0x20001ecb

08004328 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 800432c:	480a      	ldr	r0, [pc, #40]	; (8004358 <FreqMainMenuExitHandler+0x30>)
 800432e:	f00a f91d 	bl	800e56c <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <FreqMainMenuExitHandler+0x34>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <FreqMainMenuExitHandler+0x38>)
 800433a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004340:	f7fd f89a 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004344:	4807      	ldr	r0, [pc, #28]	; (8004364 <FreqMainMenuExitHandler+0x3c>)
 8004346:	f00a f911 	bl	800e56c <puts>
	#endif

	eNewEvent = evIdle;
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <FreqMainMenuExitHandler+0x40>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004350:	2301      	movs	r3, #1
}
 8004352:	4618      	mov	r0, r3
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	080121f0 	.word	0x080121f0
 800435c:	20001ece 	.word	0x20001ece
 8004360:	40012c00 	.word	0x40012c00
 8004364:	08012218 	.word	0x08012218
 8004368:	20001ecb 	.word	0x20001ecb

0800436c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8004372:	4813      	ldr	r0, [pc, #76]	; (80043c0 <FreqPresetMenuEntryHandler+0x54>)
 8004374:	f00a f8fa 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004378:	f7fd f87e 	bl	8001478 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 800437c:	f000 febc 	bl	80050f8 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <FreqPresetMenuEntryHandler+0x58>)
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004386:	f000 ffc3 	bl	8005310 <FreqO_GetFPresetObject>
 800438a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <FreqPresetMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791a      	ldrb	r2, [r3, #4]
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800439a:	f000 ffeb 	bl	8005374 <FreqO_GetFreqPresetEncoderRange>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a6:	e002      	b.n	80043ae <FreqPresetMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <FreqPresetMenuEntryHandler+0x60>)
 80043aa:	f7fd f8ab 	bl	8001504 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <FreqPresetMenuEntryHandler+0x64>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043b4:	230b      	movs	r3, #11
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	08012230 	.word	0x08012230
 80043c4:	20001ece 	.word	0x20001ece
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	0801225c 	.word	0x0801225c
 80043d0:	20001ecb 	.word	0x20001ecb

080043d4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <FreqPresetMenuInputHandler+0x24>)
 80043da:	f00a f8c7 	bl	800e56c <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043de:	2001      	movs	r0, #1
 80043e0:	f001 fb92 	bl	8005b08 <SM_GetEncoderValue>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fea0 	bl	800512c <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <FreqPresetMenuInputHandler+0x28>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043f2:	230b      	movs	r3, #11
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08012298 	.word	0x08012298
 80043fc:	20001ecb 	.word	0x20001ecb

08004400 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004404:	4806      	ldr	r0, [pc, #24]	; (8004420 <FreqPresetMenuExitHandler+0x20>)
 8004406:	f00a f8b1 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 800440a:	f7fd f835 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <FreqPresetMenuExitHandler+0x24>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <FreqPresetMenuExitHandler+0x28>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800441a:	230a      	movs	r3, #10
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	080122c4 	.word	0x080122c4
 8004424:	20001ece 	.word	0x20001ece
 8004428:	20001ecb 	.word	0x20001ecb

0800442c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8004430:	480a      	ldr	r0, [pc, #40]	; (800445c <FreqAdjustMenuEntryHandler+0x30>)
 8004432:	f00a f89b 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004436:	f7fd f81f 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <FreqAdjustMenuEntryHandler+0x34>)
 800443c:	2203      	movs	r2, #3
 800443e:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <FreqAdjustMenuEntryHandler+0x38>)
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 800444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <FreqAdjustMenuEntryHandler+0x40>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004456:	230c      	movs	r3, #12
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	080122f0 	.word	0x080122f0
 8004460:	20001ece 	.word	0x20001ece
 8004464:	40013400 	.word	0x40013400
 8004468:	40012c00 	.word	0x40012c00
 800446c:	20001ecb 	.word	0x20001ecb

08004470 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <FreqAdjustMenuInputHandler+0x1c>)
 8004476:	f00a f879 	bl	800e56c <puts>
	#endif

	FreqO_AdjustFreq();
 800447a:	f000 fe49 	bl	8005110 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <FreqAdjustMenuInputHandler+0x20>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004484:	230c      	movs	r3, #12
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	08012104 	.word	0x08012104
 8004490:	20001ecb 	.word	0x20001ecb

08004494 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <FreqAdjustMenuExitHandler+0x20>)
 800449a:	f00a f867 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 800449e:	f7fc ffeb 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <FreqAdjustMenuExitHandler+0x24>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <FreqAdjustMenuExitHandler+0x28>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044ae:	230a      	movs	r3, #10
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	0801231c 	.word	0x0801231c
 80044b8:	20001ece 	.word	0x20001ece
 80044bc:	20001ecb 	.word	0x20001ecb

080044c0 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <_setSweepModeDown+0x48>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <_setSweepModeDown+0x48>)
 80044ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80044ce:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <_setSweepModeDown+0x48>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <_setSweepModeDown+0x48>)
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <_setSweepModeDown+0x4c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <_setSweepModeDown+0x50>)
 80044ea:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <_setSweepModeDown+0x54>)
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <_setSweepModeDown+0x58>)
 80044f2:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <_setSweepModeDown+0x5c>)
 80044f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40013400 	.word	0x40013400
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004
 8004518:	477fff00 	.word	0x477fff00
 800451c:	40012c00 	.word	0x40012c00

08004520 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <_setSweepModeUp+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <_setSweepModeUp+0x40>)
 800452a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800452e:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <_setSweepModeUp+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <_setSweepModeUp+0x40>)
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <_setSweepModeUp+0x44>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <_setSweepModeUp+0x48>)
 800454a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_setSweepModeUp+0x4c>)
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <_setSweepModeUp+0x50>)
 8004552:	601a      	str	r2, [r3, #0]


}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40013400 	.word	0x40013400
 8004568:	20000004 	.word	0x20000004
 800456c:	20000000 	.word	0x20000000
 8004570:	41500000 	.word	0x41500000

08004574 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d038      	beq.n	80045f6 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <_setEncoderControlMode+0xa4>)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <_setEncoderControlMode+0xa8>)
 800458c:	220d      	movs	r2, #13
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <_setEncoderControlMode+0xa8>)
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <_setEncoderControlMode+0xac>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <_setEncoderControlMode+0x32>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d014      	beq.n	80045ce <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80045a4:	e031      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <_setEncoderControlMode+0xa8>)
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <_setEncoderControlMode+0xb0>)
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dc00      	bgt.n	80045c4 <_setEncoderControlMode+0x50>
				break;
 80045c2:	e022      	b.n	800460a <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <_setEncoderControlMode+0xa8>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045cc:	e01d      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <_setEncoderControlMode+0xa8>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <_setEncoderControlMode+0xb8>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	d400      	bmi.n	80045ec <_setEncoderControlMode+0x78>
				break;
 80045ea:	e00e      	b.n	800460a <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <_setEncoderControlMode+0xa8>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045f4:	e009      	b.n	800460a <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <_setEncoderControlMode+0xa4>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <_setEncoderControlMode+0xa8>)
 80045fe:	2201      	movs	r2, #1
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <_setEncoderControlMode+0xa8>)
 8004604:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20001ecd 	.word	0x20001ecd
 800461c:	40012c00 	.word	0x40012c00
 8004620:	20001ecc 	.word	0x20001ecc
 8004624:	20000004 	.word	0x20000004
 8004628:	40013400 	.word	0x40013400
 800462c:	20000000 	.word	0x20000000

08004630 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d122      	bne.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff85 	bl	8000554 <__aeabi_ui2d>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004690 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004652:	ec44 3b10 	vmov	d0, r3, r4
 8004656:	f00b ff63 	bl	8010520 <pow>
 800465a:	ec51 0b10 	vmov	r0, r1, d0
 800465e:	a30e      	add	r3, pc, #56	; (adr r3, 8004698 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fe3a 	bl	80002dc <__adddf3>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4618      	mov	r0, r3
 800466e:	4621      	mov	r1, r4
 8004670:	f7fc fac2 	bl	8000bf8 <__aeabi_d2uiz>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467e:	d002      	beq.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	bf00      	nop
 8004690:	00000000 	.word	0x00000000
 8004694:	40080000 	.word	0x40080000
 8004698:	00000000 	.word	0x00000000
 800469c:	40d06800 	.word	0x40d06800
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000c00 	.word	0x40000c00

080046a8 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c8:	e011      	b.n	80046ee <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	4d2037a0 	.word	0x4d2037a0

08004704 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <FreqMenu_getStatus+0x14>)
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20001ece 	.word	0x20001ece

0800471c <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <FuncMenu_getStatus+0x14>)
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20001ecf 	.word	0x20001ecf

08004734 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 8004738:	4806      	ldr	r0, [pc, #24]	; (8004754 <FuncMainMenuEntryHandler+0x20>)
 800473a:	f009 ff17 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 800473e:	f7fc fe9b 	bl	8001478 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <FuncMainMenuEntryHandler+0x24>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <FuncMainMenuEntryHandler+0x28>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800474e:	2303      	movs	r3, #3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08012348 	.word	0x08012348
 8004758:	20001ecf 	.word	0x20001ecf
 800475c:	20001ecb 	.word	0x20001ecb

08004760 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 8004764:	4808      	ldr	r0, [pc, #32]	; (8004788 <FuncMainMenuExitHandler+0x28>)
 8004766:	f009 ff01 	bl	800e56c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <FuncMainMenuExitHandler+0x2c>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004770:	f7fc fe82 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <FuncMainMenuExitHandler+0x30>)
 8004776:	f009 fef9 	bl	800e56c <puts>
	#endif

	eNewEvent = evIdle;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <FuncMainMenuExitHandler+0x34>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	08012398 	.word	0x08012398
 800478c:	20001ecf 	.word	0x20001ecf
 8004790:	080123c0 	.word	0x080123c0
 8004794:	20001ecb 	.word	0x20001ecb

08004798 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 800479e:	4815      	ldr	r0, [pc, #84]	; (80047f4 <FuncSignalMenuEntryHandler+0x5c>)
 80047a0:	f009 fee4 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 80047a4:	f7fc fe68 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80047a8:	f000 fdf0 	bl	800538c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <FuncSignalMenuEntryHandler+0x60>)
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80047b2:	2000      	movs	r0, #0
 80047b4:	f001 f992 	bl	8005adc <SM_GetOutputChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80047be:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	785a      	ldrb	r2, [r3, #1]
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80047ce:	f000 ff17 	bl	8005600 <FuncO_GetFuncPresetEncoderRange>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047da:	e002      	b.n	80047e2 <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80047dc:	4808      	ldr	r0, [pc, #32]	; (8004800 <FuncSignalMenuEntryHandler+0x68>)
 80047de:	f7fc fe91 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <FuncSignalMenuEntryHandler+0x6c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80047e8:	2304      	movs	r3, #4
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	080123d8 	.word	0x080123d8
 80047f8:	20001ecf 	.word	0x20001ecf
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	08012404 	.word	0x08012404
 8004804:	20001ecb 	.word	0x20001ecb

08004808 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 800480c:	4807      	ldr	r0, [pc, #28]	; (800482c <FuncSignalMenuInputHandler+0x24>)
 800480e:	f009 fead 	bl	800e56c <puts>
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004812:	2001      	movs	r0, #1
 8004814:	f001 f978 	bl	8005b08 <SM_GetEncoderValue>
 8004818:	4603      	mov	r3, r0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdc2 	bl	80053a4 <FuncO_MapEncoderPositionToSignalOutput>
	eNewEvent = evBlueBtn;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <FuncSignalMenuInputHandler+0x28>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004826:	2304      	movs	r3, #4
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08012438 	.word	0x08012438
 8004830:	20001ecb 	.word	0x20001ecb

08004834 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 8004838:	4806      	ldr	r0, [pc, #24]	; (8004854 <FuncSignalMenuExitHandler+0x20>)
 800483a:	f009 fe97 	bl	800e56c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <FuncSignalMenuExitHandler+0x24>)
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004844:	f7fc fe18 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <FuncSignalMenuExitHandler+0x28>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800484e:	2303      	movs	r3, #3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	08012464 	.word	0x08012464
 8004858:	20001ecf 	.word	0x20001ecf
 800485c:	20001ecb 	.word	0x20001ecb

08004860 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuEntryHandler Event captured\n");
 8004866:	4815      	ldr	r0, [pc, #84]	; (80048bc <FuncSyncMenuEntryHandler+0x5c>)
 8004868:	f009 fe80 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 800486c:	f7fc fe04 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004870:	f000 fd8c 	bl	800538c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <FuncSyncMenuEntryHandler+0x60>)
 8004876:	2203      	movs	r2, #3
 8004878:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800487a:	2001      	movs	r0, #1
 800487c:	f001 f92e 	bl	8005adc <SM_GetOutputChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004886:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <FuncSyncMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	785a      	ldrb	r2, [r3, #1]
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004896:	f000 feb3 	bl	8005600 <FuncO_GetFuncPresetEncoderRange>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80048a2:	e002      	b.n	80048aa <FuncSyncMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <FuncSyncMenuEntryHandler+0x68>)
 80048a6:	f7fc fe2d 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <FuncSyncMenuEntryHandler+0x6c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048b0:	2305      	movs	r3, #5
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08012490 	.word	0x08012490
 80048c0:	20001ecf 	.word	0x20001ecf
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	08012404 	.word	0x08012404
 80048cc:	20001ecb 	.word	0x20001ecb

080048d0 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuInputHandler Event captured\n");
 80048d4:	4807      	ldr	r0, [pc, #28]	; (80048f4 <FuncSyncMenuInputHandler+0x24>)
 80048d6:	f009 fe49 	bl	800e56c <puts>
	#endif


	FuncO_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80048da:	2001      	movs	r0, #1
 80048dc:	f001 f914 	bl	8005b08 <SM_GetEncoderValue>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd98 	bl	8005418 <FuncO_MapEncoderPositionToSyncOutput>
	eNewEvent = evBlueBtn;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <FuncSyncMenuInputHandler+0x28>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048ee:	2305      	movs	r3, #5
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	080124b8 	.word	0x080124b8
 80048f8:	20001ecb 	.word	0x20001ecb

080048fc <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuExitHandler Event captured\n");
 8004900:	4806      	ldr	r0, [pc, #24]	; (800491c <FuncSyncMenuExitHandler+0x20>)
 8004902:	f009 fe33 	bl	800e56c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <FuncSyncMenuExitHandler+0x24>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800490c:	f7fc fdb4 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <FuncSyncMenuExitHandler+0x28>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004916:	2303      	movs	r3, #3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	080124e0 	.word	0x080124e0
 8004920:	20001ecf 	.word	0x20001ecf
 8004924:	20001ecb 	.word	0x20001ecb

08004928 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <GainMenu_getStatus+0x14>)
 800492e:	781b      	ldrb	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20001ed0 	.word	0x20001ed0

08004940 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 8004944:	4806      	ldr	r0, [pc, #24]	; (8004960 <GainMainMenuEntryHandler+0x20>)
 8004946:	f009 fe11 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 800494a:	f7fc fd95 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <GainMainMenuEntryHandler+0x24>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <GainMainMenuEntryHandler+0x28>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800495a:	2306      	movs	r3, #6
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	08012508 	.word	0x08012508
 8004964:	20001ed0 	.word	0x20001ed0
 8004968:	20001ecb 	.word	0x20001ecb

0800496c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <GainMainMenuExitHandler+0x28>)
 8004972:	f009 fdfb 	bl	800e56c <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <GainMainMenuExitHandler+0x2c>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800497c:	f7fc fd7c 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004980:	4806      	ldr	r0, [pc, #24]	; (800499c <GainMainMenuExitHandler+0x30>)
 8004982:	f009 fdf3 	bl	800e56c <puts>
	#endif

	eNewEvent = evIdle;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <GainMainMenuExitHandler+0x34>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800498c:	2301      	movs	r3, #1
}
 800498e:	4618      	mov	r0, r3
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08012558 	.word	0x08012558
 8004998:	20001ed0 	.word	0x20001ed0
 800499c:	08012580 	.word	0x08012580
 80049a0:	20001ecb 	.word	0x20001ecb

080049a4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 80049aa:	4814      	ldr	r0, [pc, #80]	; (80049fc <GainSignalMenuEntryHandler+0x58>)
 80049ac:	f009 fdde 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 80049b0:	f7fc fd62 	bl	8001478 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80049b4:	f001 f92e 	bl	8005c14 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <GainSignalMenuEntryHandler+0x5c>)
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80049be:	2000      	movs	r0, #0
 80049c0:	f001 f88c 	bl	8005adc <SM_GetOutputChannel>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80049ca:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <GainSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8b1a      	ldrh	r2, [r3, #24]
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <GainSignalMenuEntryHandler+0x60>)
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <GainSignalMenuEntryHandler+0x60>)
 80049dc:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80049e2:	e002      	b.n	80049ea <GainSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80049e4:	4808      	ldr	r0, [pc, #32]	; (8004a08 <GainSignalMenuEntryHandler+0x64>)
 80049e6:	f7fc fd8d 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <GainSignalMenuEntryHandler+0x68>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80049f0:	2307      	movs	r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	08012598 	.word	0x08012598
 8004a00:	20001ed0 	.word	0x20001ed0
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	080125c4 	.word	0x080125c4
 8004a0c:	20001ecb 	.word	0x20001ecb

08004a10 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004a14:	4807      	ldr	r0, [pc, #28]	; (8004a34 <GainSignalMenuInputHandler+0x24>)
 8004a16:	f009 fda9 	bl	800e56c <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f001 f874 	bl	8005b08 <SM_GetEncoderValue>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fa6c 	bl	8005f00 <VPP_MapEncoderPositionToSignalOutput>

	eNewEvent = evYellowBtn;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <GainSignalMenuInputHandler+0x28>)
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a2e:	2307      	movs	r3, #7
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	080125fc 	.word	0x080125fc
 8004a38:	20001ecb 	.word	0x20001ecb

08004a3c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 8004a40:	4806      	ldr	r0, [pc, #24]	; (8004a5c <GainSignalMenuExitHandler+0x20>)
 8004a42:	f009 fd93 	bl	800e56c <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <GainSignalMenuExitHandler+0x24>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004a4c:	f7fc fd14 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <GainSignalMenuExitHandler+0x28>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a56:	2306      	movs	r3, #6
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08012628 	.word	0x08012628
 8004a60:	20001ed0 	.word	0x20001ed0
 8004a64:	20001ecb 	.word	0x20001ecb

08004a68 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuEntryHandler Event captured\n");
 8004a6e:	4814      	ldr	r0, [pc, #80]	; (8004ac0 <GainSyncMenuEntryHandler+0x58>)
 8004a70:	f009 fd7c 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004a74:	f7fc fd00 	bl	8001478 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004a78:	f001 f8cc 	bl	8005c14 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <GainSyncMenuEntryHandler+0x5c>)
 8004a7e:	2203      	movs	r2, #3
 8004a80:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004a82:	2001      	movs	r0, #1
 8004a84:	f001 f82a 	bl	8005adc <SM_GetOutputChannel>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a8e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <GainSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8b1a      	ldrh	r2, [r3, #24]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <GainSyncMenuEntryHandler+0x60>)
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <GainSyncMenuEntryHandler+0x60>)
 8004aa0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa6:	e002      	b.n	8004aae <GainSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <GainSyncMenuEntryHandler+0x64>)
 8004aaa:	f7fc fd2b 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <GainSyncMenuEntryHandler+0x68>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004ab4:	2308      	movs	r3, #8
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	08012654 	.word	0x08012654
 8004ac4:	20001ed0 	.word	0x20001ed0
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	080125c4 	.word	0x080125c4
 8004ad0:	20001ecb 	.word	0x20001ecb

08004ad4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuInputHandler Event captured\n");
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <GainSyncMenuInputHandler+0x24>)
 8004ada:	f009 fd47 	bl	800e56c <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f001 f812 	bl	8005b08 <SM_GetEncoderValue>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fa44 	bl	8005f74 <VPP_MapEncoderPositionToSyncOutput>

	eNewEvent = evYellowBtn;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <GainSyncMenuInputHandler+0x28>)
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004af2:	2308      	movs	r3, #8
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	0801267c 	.word	0x0801267c
 8004afc:	20001ecb 	.word	0x20001ecb

08004b00 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuExitHandler Event captured\n");
 8004b04:	4806      	ldr	r0, [pc, #24]	; (8004b20 <GainSyncMenuExitHandler+0x20>)
 8004b06:	f009 fd31 	bl	800e56c <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <GainSyncMenuExitHandler+0x24>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b10:	f7fc fcb2 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <GainSyncMenuExitHandler+0x28>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b1a:	2306      	movs	r3, #6
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	080126a4 	.word	0x080126a4
 8004b24:	20001ed0 	.word	0x20001ed0
 8004b28:	20001ecb 	.word	0x20001ecb

08004b2c <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <ToplevelMenu_getStatus+0x14>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000008 	.word	0x20000008

08004b44 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004b4e:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <ToplevelMenu_setStatus+0x1c>)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	7013      	strb	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000008 	.word	0x20000008

08004b64 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <ToplevelOutputMenuEntryHandler+0x20>)
 8004b6a:	f009 fcff 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004b6e:	f7fc fc83 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <ToplevelOutputMenuEntryHandler+0x24>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <ToplevelOutputMenuEntryHandler+0x28>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08012768 	.word	0x08012768
 8004b88:	20000008 	.word	0x20000008
 8004b8c:	20001ecb 	.word	0x20001ecb

08004b90 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004b94:	4806      	ldr	r0, [pc, #24]	; (8004bb0 <ToplevelOutputMenuExitHandler+0x20>)
 8004b96:	f009 fce9 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004b9a:	f7fc fc6d 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <ToplevelOutputMenuExitHandler+0x24>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <ToplevelOutputMenuExitHandler+0x28>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	080127c8 	.word	0x080127c8
 8004bb4:	20000008 	.word	0x20000008
 8004bb8:	20001ecb 	.word	0x20001ecb

08004bbc <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004bc0:	4806      	ldr	r0, [pc, #24]	; (8004bdc <ToplevelInputMenuEntryHandler+0x20>)
 8004bc2:	f009 fcd3 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004bc6:	f7fc fc57 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <ToplevelInputMenuEntryHandler+0x24>)
 8004bcc:	2203      	movs	r2, #3
 8004bce:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <ToplevelInputMenuEntryHandler+0x28>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004bd6:	2302      	movs	r3, #2
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	080127f8 	.word	0x080127f8
 8004be0:	20000008 	.word	0x20000008
 8004be4:	20001ecb 	.word	0x20001ecb

08004be8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004bec:	4806      	ldr	r0, [pc, #24]	; (8004c08 <ToplevelInputMenuExitHandler+0x20>)
 8004bee:	f009 fcbd 	bl	800e56c <puts>
	#endif

	DM_RefreshScreen();
 8004bf2:	f7fc fc41 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <ToplevelInputMenuExitHandler+0x24>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <ToplevelInputMenuExitHandler+0x28>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08012858 	.word	0x08012858
 8004c0c:	20000008 	.word	0x20000008
 8004c10:	20001ecb 	.word	0x20001ecb

08004c14 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4013      	ands	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d101      	bne.n	8004c2e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40010400 	.word	0x40010400

08004c40 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <IM_Init+0x1c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <IM_Init+0x1c>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40014400 	.word	0x40014400

08004c60 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11c      	bne.n	8004caa <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004c7e:	edd3 7a00 	vldr	s15, [r3]
 8004c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	db09      	blt.n	8004ca0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c98:	ee17 2a90 	vmov	r2, s15
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004c9e:	e029      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ca8:	e024      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d104      	bne.n	8004cbc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cba:	e01b      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004cbc:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004cca:	edd3 7a00 	vldr	s15, [r3]
 8004cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd6:	d809      	bhi.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cea:	e003      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	20000004 	.word	0x20000004
 8004d0c:	20000000 	.word	0x20000000

08004d10 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <IM_BTN1_EXTI14_Handler+0x44>)
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d28:	dd0c      	ble.n	8004d44 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004d2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d2e:	f7ff ff71 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7ff f967 	bl	800400c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004d3e:	4807      	ldr	r0, [pc, #28]	; (8004d5c <IM_BTN1_EXTI14_Handler+0x4c>)
 8004d40:	f009 fc14 	bl	800e56c <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	8013      	strh	r3, [r2, #0]


}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40014400 	.word	0x40014400
 8004d58:	20001ed2 	.word	0x20001ed2
 8004d5c:	08012884 	.word	0x08012884

08004d60 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <IM_BTN2_EXTI15_Handler+0x44>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d78:	dd0c      	ble.n	8004d94 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004d7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d7e:	f7ff ff49 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004d88:	2003      	movs	r0, #3
 8004d8a:	f7ff f93f 	bl	800400c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <IM_BTN2_EXTI15_Handler+0x4c>)
 8004d90:	f009 fbec 	bl	800e56c <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	8013      	strh	r3, [r2, #0]


}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40014400 	.word	0x40014400
 8004da8:	20001ed4 	.word	0x20001ed4
 8004dac:	0801289c 	.word	0x0801289c

08004db0 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <IM_BTN3_EXTI0_Handler+0x40>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc8:	dd0b      	ble.n	8004de2 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7ff ff22 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004dd6:	2004      	movs	r0, #4
 8004dd8:	f7ff f918 	bl	800400c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004ddc:	4806      	ldr	r0, [pc, #24]	; (8004df8 <IM_BTN3_EXTI0_Handler+0x48>)
 8004dde:	f009 fbc5 	bl	800e56c <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004de2:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	8013      	strh	r3, [r2, #0]


}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40014400 	.word	0x40014400
 8004df4:	20001ed6 	.word	0x20001ed6
 8004df8:	080128b8 	.word	0x080128b8

08004dfc <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <IM_BTN4_EXTI1_Handler+0x40>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e0c:	8812      	ldrh	r2, [r2, #0]
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	dd0b      	ble.n	8004e2e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004e16:	2002      	movs	r0, #2
 8004e18:	f7ff fefc 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004e22:	2002      	movs	r0, #2
 8004e24:	f7ff f8f2 	bl	800400c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004e28:	4806      	ldr	r0, [pc, #24]	; (8004e44 <IM_BTN4_EXTI1_Handler+0x48>)
 8004e2a:	f009 fb9f 	bl	800e56c <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	8013      	strh	r3, [r2, #0]


}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	20001ed8 	.word	0x20001ed8
 8004e44:	080128d0 	.word	0x080128d0

08004e48 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <IM_ENC_EXTI2_Handler+0x40>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <IM_ENC_EXTI2_Handler+0x44>)
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e60:	dd0b      	ble.n	8004e7a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004e62:	2004      	movs	r0, #4
 8004e64:	f7ff fed6 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004e6e:	2006      	movs	r0, #6
 8004e70:	f7ff f8cc 	bl	800400c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004e74:	4806      	ldr	r0, [pc, #24]	; (8004e90 <IM_ENC_EXTI2_Handler+0x48>)
 8004e76:	f009 fb79 	bl	800e56c <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <IM_ENC_EXTI2_Handler+0x44>)
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	8013      	strh	r3, [r2, #0]


}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	20001eda 	.word	0x20001eda
 8004e90:	080128e8 	.word	0x080128e8

08004e94 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea4:	d10b      	bne.n	8004ebe <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004ea6:	2005      	movs	r0, #5
 8004ea8:	f7ff f8b0 	bl	800400c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <IM_ENC_DIRF_Handler+0x34>)
 8004eae:	f009 fb5d 	bl	800e56c <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ebc:	6113      	str	r3, [r2, #16]

	}
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	08012904 	.word	0x08012904

08004ecc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <BO_GetBiasPolarity+0x14>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000009 	.word	0x20000009

08004ee4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <BO_GetDcBiasEncoderValue+0x14>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2000000a 	.word	0x2000000a

08004efc <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004f06:	2000      	movs	r0, #0
 8004f08:	f000 fdfe 	bl	8005b08 <SM_GetEncoderValue>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8004f12:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f1a:	d214      	bcs.n	8004f46 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f30:	2200      	movs	r2, #0
 8004f32:	2110      	movs	r1, #16
 8004f34:	4814      	ldr	r0, [pc, #80]	; (8004f88 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004f36:	f004 fb99 	bl	800966c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2108      	movs	r1, #8
 8004f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f42:	f005 fa73 	bl	800a42c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f4c:	d314      	bcc.n	8004f78 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f62:	2200      	movs	r2, #0
 8004f64:	2110      	movs	r1, #16
 8004f66:	4808      	ldr	r0, [pc, #32]	; (8004f88 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004f68:	f004 fb80 	bl	800966c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2108      	movs	r1, #8
 8004f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f74:	f005 fa5a 	bl	800a42c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	2000000a 	.word	0x2000000a
 8004f84:	20000009 	.word	0x20000009
 8004f88:	200025f8 	.word	0x200025f8

08004f8c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004f90:	2110      	movs	r1, #16
 8004f92:	4803      	ldr	r0, [pc, #12]	; (8004fa0 <BO_GetOutputBias+0x14>)
 8004f94:	f004 fbb0 	bl	80096f8 <HAL_DAC_GetValue>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200025f8 	.word	0x200025f8

08004fa4 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	e06b      	b.n	8005088 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004fb0:	493a      	ldr	r1, [pc, #232]	; (800509c <DT_InitRegister+0xf8>)
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d129      	bne.n	800501a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004fc6:	4935      	ldr	r1, [pc, #212]	; (800509c <DT_InitRegister+0xf8>)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <DT_InitRegister+0xfc>)
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fe6:	492d      	ldr	r1, [pc, #180]	; (800509c <DT_InitRegister+0xf8>)
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005002:	ee17 0a90 	vmov	r0, s15
 8005006:	4925      	ldr	r1, [pc, #148]	; (800509c <DT_InitRegister+0xf8>)
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	330c      	adds	r3, #12
 8005016:	6018      	str	r0, [r3, #0]
 8005018:	e033      	b.n	8005082 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800501a:	4920      	ldr	r1, [pc, #128]	; (800509c <DT_InitRegister+0xf8>)
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3304      	adds	r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <DT_InitRegister+0xfc>)
 800502e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005032:	481a      	ldr	r0, [pc, #104]	; (800509c <DT_InitRegister+0xf8>)
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4403      	add	r3, r0
 8005040:	3308      	adds	r3, #8
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fbb1 f3f3 	udiv	r3, r1, r3
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005050:	4912      	ldr	r1, [pc, #72]	; (800509c <DT_InitRegister+0xf8>)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3310      	adds	r3, #16
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506c:	ee17 0a90 	vmov	r0, s15
 8005070:	490a      	ldr	r1, [pc, #40]	; (800509c <DT_InitRegister+0xf8>)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	330c      	adds	r3, #12
 8005080:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3301      	adds	r3, #1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b0d      	cmp	r3, #13
 800508c:	dd90      	ble.n	8004fb0 <DT_InitRegister+0xc>
	}
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	00155cc0 	.word	0x00155cc0

080050a4 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e016      	b.n	80050e0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80050b2:	4910      	ldr	r1, [pc, #64]	; (80050f4 <DT_GetRegisterByEnum+0x50>)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3304      	adds	r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d107      	bne.n	80050da <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <DT_GetRegisterByEnum+0x50>)
 80050d6:	4413      	add	r3, r2
 80050d8:	e006      	b.n	80050e8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b0d      	cmp	r3, #13
 80050e4:	dde5      	ble.n	80050b2 <DT_GetRegisterByEnum+0xe>

	return 0;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2000000c 	.word	0x2000000c

080050f8 <FreqO_ResetLastEncoderValue>:
uint8_t FreqPresetEncoderRange = 56;

uint16_t freq_last_encoder_value = 0;

void FreqO_ResetLastEncoderValue()
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <FreqO_ResetLastEncoderValue+0x14>)
 80050fe:	2200      	movs	r2, #0
 8005100:	801a      	strh	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20001edc 	.word	0x20001edc

08005110 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8005114:	2000      	movs	r0, #0
 8005116:	f000 fcf7 	bl	8005b08 <SM_GetEncoderValue>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	4b02      	ldr	r3, [pc, #8]	; (8005128 <FreqO_AdjustFreq+0x18>)
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40013400 	.word	0x40013400

0800512c <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	2b38      	cmp	r3, #56	; 0x38
 800513a:	f200 80b4 	bhi.w	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <FreqO_MapEncoderPositionToBothOutput+0x18>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005229 	.word	0x08005229
 8005148:	08005229 	.word	0x08005229
 800514c:	08005229 	.word	0x08005229
 8005150:	08005229 	.word	0x08005229
 8005154:	08005231 	.word	0x08005231
 8005158:	08005231 	.word	0x08005231
 800515c:	08005231 	.word	0x08005231
 8005160:	08005231 	.word	0x08005231
 8005164:	08005239 	.word	0x08005239
 8005168:	08005239 	.word	0x08005239
 800516c:	08005239 	.word	0x08005239
 8005170:	08005239 	.word	0x08005239
 8005174:	08005241 	.word	0x08005241
 8005178:	08005241 	.word	0x08005241
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005249 	.word	0x08005249
 8005188:	08005249 	.word	0x08005249
 800518c:	08005249 	.word	0x08005249
 8005190:	08005249 	.word	0x08005249
 8005194:	08005251 	.word	0x08005251
 8005198:	08005251 	.word	0x08005251
 800519c:	08005251 	.word	0x08005251
 80051a0:	08005251 	.word	0x08005251
 80051a4:	0800525b 	.word	0x0800525b
 80051a8:	0800525b 	.word	0x0800525b
 80051ac:	0800525b 	.word	0x0800525b
 80051b0:	0800525b 	.word	0x0800525b
 80051b4:	08005265 	.word	0x08005265
 80051b8:	08005265 	.word	0x08005265
 80051bc:	08005265 	.word	0x08005265
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	08005265 	.word	0x08005265
 80051c8:	0800526f 	.word	0x0800526f
 80051cc:	0800526f 	.word	0x0800526f
 80051d0:	0800526f 	.word	0x0800526f
 80051d4:	0800526f 	.word	0x0800526f
 80051d8:	08005279 	.word	0x08005279
 80051dc:	08005279 	.word	0x08005279
 80051e0:	08005279 	.word	0x08005279
 80051e4:	08005279 	.word	0x08005279
 80051e8:	08005283 	.word	0x08005283
 80051ec:	08005283 	.word	0x08005283
 80051f0:	08005283 	.word	0x08005283
 80051f4:	08005283 	.word	0x08005283
 80051f8:	0800528d 	.word	0x0800528d
 80051fc:	0800528d 	.word	0x0800528d
 8005200:	0800528d 	.word	0x0800528d
 8005204:	0800528d 	.word	0x0800528d
 8005208:	08005297 	.word	0x08005297
 800520c:	08005297 	.word	0x08005297
 8005210:	08005297 	.word	0x08005297
 8005214:	08005297 	.word	0x08005297
 8005218:	0800529f 	.word	0x0800529f
 800521c:	0800529f 	.word	0x0800529f
 8005220:	0800529f 	.word	0x0800529f
 8005224:	0800529f 	.word	0x0800529f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8005228:	2001      	movs	r0, #1
 800522a:	f000 f845 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800522e:	e03a      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8005230:	200a      	movs	r0, #10
 8005232:	f000 f841 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005236:	e036      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8005238:	2032      	movs	r0, #50	; 0x32
 800523a:	f000 f83d 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800523e:	e032      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8005240:	2064      	movs	r0, #100	; 0x64
 8005242:	f000 f839 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005246:	e02e      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8005248:	20fa      	movs	r0, #250	; 0xfa
 800524a:	f000 f835 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800524e:	e02a      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8005250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005254:	f000 f830 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005258:	e025      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800525a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800525e:	f000 f82b 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005262:	e020      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8005264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005268:	f000 f826 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800526c:	e01b      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800526e:	f241 3088 	movw	r0, #5000	; 0x1388
 8005272:	f000 f821 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005276:	e016      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8005278:	f242 7010 	movw	r0, #10000	; 0x2710
 800527c:	f000 f81c 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005280:	e011      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8005282:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005286:	f000 f817 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800528a:	e00c      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 800528c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005290:	f000 f812 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 8005294:	e007      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8005296:	4806      	ldr	r0, [pc, #24]	; (80052b0 <FreqO_MapEncoderPositionToBothOutput+0x184>)
 8005298:	f000 f80e 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 800529c:	e003      	b.n	80052a6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800529e:	4805      	ldr	r0, [pc, #20]	; (80052b4 <FreqO_MapEncoderPositionToBothOutput+0x188>)
 80052a0:	f000 f80a 	bl	80052b8 <FreqO_ApplyPreset>
			break;
 80052a4:	bf00      	nop
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = FPRESET_100KHZ;
		FreqO_ApplyPreset_Fast(_FindFPresetObjectByIndex(tmpFreqIndex));
	}
	freq_last_encoder_value = pEncValue;
	*/
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	000124f8 	.word	0x000124f8
 80052b4:	000186a0 	.word	0x000186a0

080052b8 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff feef 	bl	80050a4 <DT_GetRegisterByEnum>
 80052c6:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <FreqO_ApplyPreset+0x4c>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <FreqO_ApplyPreset+0x4c>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f822 	bl	8005328 <FreqO_FindFPresetObject>
 80052e4:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 80052ec:	4a06      	ldr	r2, [pc, #24]	; (8005308 <FreqO_ApplyPreset+0x50>)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 80052f2:	e002      	b.n	80052fa <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80052f4:	4805      	ldr	r0, [pc, #20]	; (800530c <FreqO_ApplyPreset+0x54>)
 80052f6:	f7fc f905 	bl	8001504 <DM_SetErrorDebugMsg>
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40013400 	.word	0x40013400
 8005308:	20000198 	.word	0x20000198
 800530c:	0801291c 	.word	0x0801291c

08005310 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
	return freq_profile;
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <FreqO_GetFPresetObject+0x14>)
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000198 	.word	0x20000198

08005328 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e00e      	b.n	8005354 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005336:	4a0d      	ldr	r2, [pc, #52]	; (800536c <FreqO_FindFPresetObject+0x44>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d104      	bne.n	800534e <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <FreqO_FindFPresetObject+0x44>)
 800534a:	4413      	add	r3, r2
 800534c:	e009      	b.n	8005362 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b0d      	cmp	r3, #13
 8005358:	dded      	ble.n	8005336 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800535a:	4805      	ldr	r0, [pc, #20]	; (8005370 <FreqO_FindFPresetObject+0x48>)
 800535c:	f7fc f8d2 	bl	8001504 <DM_SetErrorDebugMsg>
	return 0;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000128 	.word	0x20000128
 8005370:	08012944 	.word	0x08012944

08005374 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <FreqO_GetFreqPresetEncoderRange+0x14>)
 800537a:	781b      	ldrb	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000124 	.word	0x20000124

0800538c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <FuncO_ResetLastEncoderValue+0x14>)
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20001f08 	.word	0x20001f08

080053a4 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80053ae:	2000      	movs	r0, #0
 80053b0:	f000 fb94 	bl	8005adc <SM_GetOutputChannel>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d90c      	bls.n	80053e2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	3301      	adds	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d901      	bls.n	80053d8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 80053d4:	2306      	movs	r3, #6
 80053d6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f856 	bl	800548c <FuncO_ApplyPresetToSignal>
 80053e0:	e010      	b.n	8005404 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d20b      	bcs.n	8005404 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d901      	bls.n	80053fc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f844 	bl	800548c <FuncO_ApplyPresetToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005404:	4a03      	ldr	r2, [pc, #12]	; (8005414 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	8013      	strh	r3, [r2, #0]
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20001f08 	.word	0x20001f08

08005418 <FuncO_MapEncoderPositionToSyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8005422:	2001      	movs	r0, #1
 8005424:	f000 fb5a 	bl	8005adc <SM_GetOutputChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	429a      	cmp	r2, r3
 800543a:	d90c      	bls.n	8005456 <FuncO_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpFunc++;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	3301      	adds	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b06      	cmp	r3, #6
 8005446:	d901      	bls.n	800544c <FuncO_MapEncoderPositionToSyncOutput+0x34>
 8005448:	2306      	movs	r3, #6
 800544a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f876 	bl	8005540 <FuncO_ApplyPresetToSync>
 8005454:	e010      	b.n	8005478 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	429a      	cmp	r2, r3
 800545e:	d20b      	bcs.n	8005478 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpFunc--;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	3b01      	subs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d901      	bls.n	8005470 <FuncO_MapEncoderPositionToSyncOutput+0x58>
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f864 	bl	8005540 <FuncO_ApplyPresetToSync>
	}
	func_last_encoder_value = pEncoderValue;
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	8013      	strh	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20001f08 	.word	0x20001f08

0800548c <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b087      	sub	sp, #28
 8005490:	af02      	add	r7, sp, #8
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005496:	79fc      	ldrb	r4, [r7, #7]
 8005498:	2000      	movs	r0, #0
 800549a:	f000 fb1f 	bl	8005adc <SM_GetOutputChannel>
 800549e:	4601      	mov	r1, r0
 80054a0:	00e3      	lsls	r3, r4, #3
 80054a2:	4a23      	ldr	r2, [pc, #140]	; (8005530 <FuncO_ApplyPresetToSignal+0xa4>)
 80054a4:	4413      	add	r3, r2
 80054a6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80054aa:	79fc      	ldrb	r4, [r7, #7]
 80054ac:	2000      	movs	r0, #0
 80054ae:	f000 fb15 	bl	8005adc <SM_GetOutputChannel>
 80054b2:	4601      	mov	r1, r0
 80054b4:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <FuncO_ApplyPresetToSignal+0xa4>)
 80054b6:	00e3      	lsls	r3, r4, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80054be:	2000      	movs	r0, #0
 80054c0:	f000 fb0c 	bl	8005adc <SM_GetOutputChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSignal(eTmpVppPreset);
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fbab 	bl	8005c2c <VPP_ApplyProfileToSignal>

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 80054d6:	4817      	ldr	r0, [pc, #92]	; (8005534 <FuncO_ApplyPresetToSignal+0xa8>)
 80054d8:	f006 f8d0 	bl	800b67c <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80054dc:	2100      	movs	r1, #0
 80054de:	4816      	ldr	r0, [pc, #88]	; (8005538 <FuncO_ApplyPresetToSignal+0xac>)
 80054e0:	f004 f86e 	bl	80095c0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f000 faf9 	bl	8005adc <SM_GetOutputChannel>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f103 0208 	add.w	r2, r3, #8
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2378      	movs	r3, #120	; 0x78
 80054f6:	2100      	movs	r1, #0
 80054f8:	480f      	ldr	r0, [pc, #60]	; (8005538 <FuncO_ApplyPresetToSignal+0xac>)
 80054fa:	f003 ff9f 	bl	800943c <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80054fe:	2100      	movs	r1, #0
 8005500:	480e      	ldr	r0, [pc, #56]	; (800553c <FuncO_ApplyPresetToSignal+0xb0>)
 8005502:	f004 f85d 	bl	80095c0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005506:	2001      	movs	r0, #1
 8005508:	f000 fae8 	bl	8005adc <SM_GetOutputChannel>
 800550c:	4603      	mov	r3, r0
 800550e:	f103 0208 	add.w	r2, r3, #8
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2378      	movs	r3, #120	; 0x78
 8005518:	2100      	movs	r1, #0
 800551a:	4808      	ldr	r0, [pc, #32]	; (800553c <FuncO_ApplyPresetToSignal+0xb0>)
 800551c:	f003 ff8e 	bl	800943c <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8005520:	4804      	ldr	r0, [pc, #16]	; (8005534 <FuncO_ApplyPresetToSignal+0xa8>)
 8005522:	f006 f87d 	bl	800b620 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bd90      	pop	{r4, r7, pc}
 800552e:	bf00      	nop
 8005530:	200001a0 	.word	0x200001a0
 8005534:	20002730 	.word	0x20002730
 8005538:	200025f8 	.word	0x200025f8
 800553c:	200025e4 	.word	0x200025e4

08005540 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b087      	sub	sp, #28
 8005544:	af02      	add	r7, sp, #8
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800554a:	79fc      	ldrb	r4, [r7, #7]
 800554c:	2001      	movs	r0, #1
 800554e:	f000 fac5 	bl	8005adc <SM_GetOutputChannel>
 8005552:	4601      	mov	r1, r0
 8005554:	00e3      	lsls	r3, r4, #3
 8005556:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <FuncO_ApplyPresetToSync+0xb0>)
 8005558:	4413      	add	r3, r2
 800555a:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800555e:	79fc      	ldrb	r4, [r7, #7]
 8005560:	2001      	movs	r0, #1
 8005562:	f000 fabb 	bl	8005adc <SM_GetOutputChannel>
 8005566:	4601      	mov	r1, r0
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <FuncO_ApplyPresetToSync+0xb0>)
 800556a:	00e3      	lsls	r3, r4, #3
 800556c:	4413      	add	r3, r2
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005572:	2001      	movs	r0, #1
 8005574:	f000 fab2 	bl	8005adc <SM_GetOutputChannel>
 8005578:	4603      	mov	r3, r0
 800557a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSync(eTmpVppPreset);
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fb7f 	bl	8005c88 <VPP_ApplyProfileToSync>

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800558a:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <FuncO_ApplyPresetToSync+0xb4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <FuncO_ApplyPresetToSync+0xb4>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005596:	2100      	movs	r1, #0
 8005598:	4817      	ldr	r0, [pc, #92]	; (80055f8 <FuncO_ApplyPresetToSync+0xb8>)
 800559a:	f004 f811 	bl	80095c0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800559e:	2001      	movs	r0, #1
 80055a0:	f000 fa9c 	bl	8005adc <SM_GetOutputChannel>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f103 0208 	add.w	r2, r3, #8
 80055aa:	2300      	movs	r3, #0
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	2378      	movs	r3, #120	; 0x78
 80055b0:	2100      	movs	r1, #0
 80055b2:	4811      	ldr	r0, [pc, #68]	; (80055f8 <FuncO_ApplyPresetToSync+0xb8>)
 80055b4:	f003 ff42 	bl	800943c <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80055b8:	2100      	movs	r1, #0
 80055ba:	4810      	ldr	r0, [pc, #64]	; (80055fc <FuncO_ApplyPresetToSync+0xbc>)
 80055bc:	f004 f800 	bl	80095c0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f000 fa8b 	bl	8005adc <SM_GetOutputChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f103 0208 	add.w	r2, r3, #8
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2378      	movs	r3, #120	; 0x78
 80055d2:	2100      	movs	r1, #0
 80055d4:	4809      	ldr	r0, [pc, #36]	; (80055fc <FuncO_ApplyPresetToSync+0xbc>)
 80055d6:	f003 ff31 	bl	800943c <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <FuncO_ApplyPresetToSync+0xb4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <FuncO_ApplyPresetToSync+0xb4>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6013      	str	r3, [r2, #0]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd90      	pop	{r4, r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200001a0 	.word	0x200001a0
 80055f4:	40013400 	.word	0x40013400
 80055f8:	200025e4 	.word	0x200025e4
 80055fc:	200025f8 	.word	0x200025f8

08005600 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8005606:	781b      	ldrb	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	2000019c 	.word	0x2000019c

08005618 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005622:	79fc      	ldrb	r4, [r7, #7]
 8005624:	2000      	movs	r0, #0
 8005626:	f000 fa59 	bl	8005adc <SM_GetOutputChannel>
 800562a:	4601      	mov	r1, r0
 800562c:	4623      	mov	r3, r4
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4423      	add	r3, r4
 8005632:	4a4f      	ldr	r2, [pc, #316]	; (8005770 <GO_ApplyPresetToSignal+0x158>)
 8005634:	4413      	add	r3, r2
 8005636:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	2b07      	cmp	r3, #7
 800563e:	f200 8093 	bhi.w	8005768 <GO_ApplyPresetToSignal+0x150>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <GO_ApplyPresetToSignal+0x30>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005669 	.word	0x08005669
 800564c:	08005689 	.word	0x08005689
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056c9 	.word	0x080056c9
 8005658:	080056e9 	.word	0x080056e9
 800565c:	08005709 	.word	0x08005709
 8005660:	08005729 	.word	0x08005729
 8005664:	08005749 	.word	0x08005749
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005668:	2200      	movs	r2, #0
 800566a:	2101      	movs	r1, #1
 800566c:	4841      	ldr	r0, [pc, #260]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 800566e:	f004 fedd 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	2120      	movs	r1, #32
 8005676:	4840      	ldr	r0, [pc, #256]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005678:	f004 fed8 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	2110      	movs	r1, #16
 8005680:	483d      	ldr	r0, [pc, #244]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005682:	f004 fed3 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 8005686:	e06f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005688:	2201      	movs	r2, #1
 800568a:	2101      	movs	r1, #1
 800568c:	4839      	ldr	r0, [pc, #228]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 800568e:	f004 fecd 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005692:	2200      	movs	r2, #0
 8005694:	2120      	movs	r1, #32
 8005696:	4838      	ldr	r0, [pc, #224]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005698:	f004 fec8 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800569c:	2200      	movs	r2, #0
 800569e:	2110      	movs	r1, #16
 80056a0:	4835      	ldr	r0, [pc, #212]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056a2:	f004 fec3 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80056a6:	e05f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80056a8:	2200      	movs	r2, #0
 80056aa:	2101      	movs	r1, #1
 80056ac:	4831      	ldr	r0, [pc, #196]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 80056ae:	f004 febd 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80056b2:	2201      	movs	r2, #1
 80056b4:	2120      	movs	r1, #32
 80056b6:	4830      	ldr	r0, [pc, #192]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056b8:	f004 feb8 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80056bc:	2200      	movs	r2, #0
 80056be:	2110      	movs	r1, #16
 80056c0:	482d      	ldr	r0, [pc, #180]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056c2:	f004 feb3 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80056c6:	e04f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80056c8:	2201      	movs	r2, #1
 80056ca:	2101      	movs	r1, #1
 80056cc:	4829      	ldr	r0, [pc, #164]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 80056ce:	f004 fead 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80056d2:	2201      	movs	r2, #1
 80056d4:	2120      	movs	r1, #32
 80056d6:	4828      	ldr	r0, [pc, #160]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056d8:	f004 fea8 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80056dc:	2200      	movs	r2, #0
 80056de:	2110      	movs	r1, #16
 80056e0:	4825      	ldr	r0, [pc, #148]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056e2:	f004 fea3 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80056e6:	e03f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80056e8:	2200      	movs	r2, #0
 80056ea:	2101      	movs	r1, #1
 80056ec:	4821      	ldr	r0, [pc, #132]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 80056ee:	f004 fe9d 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2120      	movs	r1, #32
 80056f6:	4820      	ldr	r0, [pc, #128]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 80056f8:	f004 fe98 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80056fc:	2201      	movs	r2, #1
 80056fe:	2110      	movs	r1, #16
 8005700:	481d      	ldr	r0, [pc, #116]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005702:	f004 fe93 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 8005706:	e02f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005708:	2201      	movs	r2, #1
 800570a:	2101      	movs	r1, #1
 800570c:	4819      	ldr	r0, [pc, #100]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 800570e:	f004 fe8d 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005712:	2200      	movs	r2, #0
 8005714:	2120      	movs	r1, #32
 8005716:	4818      	ldr	r0, [pc, #96]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005718:	f004 fe88 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800571c:	2201      	movs	r2, #1
 800571e:	2110      	movs	r1, #16
 8005720:	4815      	ldr	r0, [pc, #84]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005722:	f004 fe83 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 8005726:	e01f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005728:	2200      	movs	r2, #0
 800572a:	2101      	movs	r1, #1
 800572c:	4811      	ldr	r0, [pc, #68]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 800572e:	f004 fe7d 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005732:	2201      	movs	r2, #1
 8005734:	2120      	movs	r1, #32
 8005736:	4810      	ldr	r0, [pc, #64]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005738:	f004 fe78 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800573c:	2201      	movs	r2, #1
 800573e:	2110      	movs	r1, #16
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005742:	f004 fe73 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 8005746:	e00f      	b.n	8005768 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005748:	2201      	movs	r2, #1
 800574a:	2101      	movs	r1, #1
 800574c:	4809      	ldr	r0, [pc, #36]	; (8005774 <GO_ApplyPresetToSignal+0x15c>)
 800574e:	f004 fe6d 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005752:	2201      	movs	r2, #1
 8005754:	2120      	movs	r1, #32
 8005756:	4808      	ldr	r0, [pc, #32]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005758:	f004 fe68 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800575c:	2201      	movs	r2, #1
 800575e:	2110      	movs	r1, #16
 8005760:	4805      	ldr	r0, [pc, #20]	; (8005778 <GO_ApplyPresetToSignal+0x160>)
 8005762:	f004 fe63 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 8005766:	bf00      	nop
	}
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bd90      	pop	{r4, r7, pc}
 8005770:	200001d8 	.word	0x200001d8
 8005774:	48000400 	.word	0x48000400
 8005778:	48000800 	.word	0x48000800

0800577c <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005786:	79fc      	ldrb	r4, [r7, #7]
 8005788:	2001      	movs	r0, #1
 800578a:	f000 f9a7 	bl	8005adc <SM_GetOutputChannel>
 800578e:	4601      	mov	r1, r0
 8005790:	4623      	mov	r3, r4
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4423      	add	r3, r4
 8005796:	4a4f      	ldr	r2, [pc, #316]	; (80058d4 <GO_ApplyPresetToSync+0x158>)
 8005798:	4413      	add	r3, r2
 800579a:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	f200 8093 	bhi.w	80058cc <GO_ApplyPresetToSync+0x150>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <GO_ApplyPresetToSync+0x30>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057cd 	.word	0x080057cd
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	0800582d 	.word	0x0800582d
 80057bc:	0800584d 	.word	0x0800584d
 80057c0:	0800586d 	.word	0x0800586d
 80057c4:	0800588d 	.word	0x0800588d
 80057c8:	080058ad 	.word	0x080058ad
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80057cc:	2200      	movs	r2, #0
 80057ce:	2101      	movs	r1, #1
 80057d0:	4841      	ldr	r0, [pc, #260]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 80057d2:	f004 fe2b 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2120      	movs	r1, #32
 80057da:	4840      	ldr	r0, [pc, #256]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80057dc:	f004 fe26 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80057e0:	2200      	movs	r2, #0
 80057e2:	2110      	movs	r1, #16
 80057e4:	483d      	ldr	r0, [pc, #244]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80057e6:	f004 fe21 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80057ea:	e06f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80057ec:	2201      	movs	r2, #1
 80057ee:	2101      	movs	r1, #1
 80057f0:	4839      	ldr	r0, [pc, #228]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 80057f2:	f004 fe1b 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057f6:	2200      	movs	r2, #0
 80057f8:	2120      	movs	r1, #32
 80057fa:	4838      	ldr	r0, [pc, #224]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80057fc:	f004 fe16 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005800:	2200      	movs	r2, #0
 8005802:	2110      	movs	r1, #16
 8005804:	4835      	ldr	r0, [pc, #212]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 8005806:	f004 fe11 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 800580a:	e05f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800580c:	2200      	movs	r2, #0
 800580e:	2101      	movs	r1, #1
 8005810:	4831      	ldr	r0, [pc, #196]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 8005812:	f004 fe0b 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005816:	2201      	movs	r2, #1
 8005818:	2120      	movs	r1, #32
 800581a:	4830      	ldr	r0, [pc, #192]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 800581c:	f004 fe06 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005820:	2200      	movs	r2, #0
 8005822:	2110      	movs	r1, #16
 8005824:	482d      	ldr	r0, [pc, #180]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 8005826:	f004 fe01 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 800582a:	e04f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800582c:	2201      	movs	r2, #1
 800582e:	2101      	movs	r1, #1
 8005830:	4829      	ldr	r0, [pc, #164]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 8005832:	f004 fdfb 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005836:	2201      	movs	r2, #1
 8005838:	2120      	movs	r1, #32
 800583a:	4828      	ldr	r0, [pc, #160]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 800583c:	f004 fdf6 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005840:	2200      	movs	r2, #0
 8005842:	2110      	movs	r1, #16
 8005844:	4825      	ldr	r0, [pc, #148]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 8005846:	f004 fdf1 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 800584a:	e03f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	2101      	movs	r1, #1
 8005850:	4821      	ldr	r0, [pc, #132]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 8005852:	f004 fdeb 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005856:	2200      	movs	r2, #0
 8005858:	2120      	movs	r1, #32
 800585a:	4820      	ldr	r0, [pc, #128]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 800585c:	f004 fde6 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005860:	2201      	movs	r2, #1
 8005862:	2110      	movs	r1, #16
 8005864:	481d      	ldr	r0, [pc, #116]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 8005866:	f004 fde1 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 800586a:	e02f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800586c:	2201      	movs	r2, #1
 800586e:	2101      	movs	r1, #1
 8005870:	4819      	ldr	r0, [pc, #100]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 8005872:	f004 fddb 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005876:	2200      	movs	r2, #0
 8005878:	2120      	movs	r1, #32
 800587a:	4818      	ldr	r0, [pc, #96]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 800587c:	f004 fdd6 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005880:	2201      	movs	r2, #1
 8005882:	2110      	movs	r1, #16
 8005884:	4815      	ldr	r0, [pc, #84]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 8005886:	f004 fdd1 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 800588a:	e01f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800588c:	2200      	movs	r2, #0
 800588e:	2101      	movs	r1, #1
 8005890:	4811      	ldr	r0, [pc, #68]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 8005892:	f004 fdcb 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005896:	2201      	movs	r2, #1
 8005898:	2120      	movs	r1, #32
 800589a:	4810      	ldr	r0, [pc, #64]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 800589c:	f004 fdc6 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80058a0:	2201      	movs	r2, #1
 80058a2:	2110      	movs	r1, #16
 80058a4:	480d      	ldr	r0, [pc, #52]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80058a6:	f004 fdc1 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80058aa:	e00f      	b.n	80058cc <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80058ac:	2201      	movs	r2, #1
 80058ae:	2101      	movs	r1, #1
 80058b0:	4809      	ldr	r0, [pc, #36]	; (80058d8 <GO_ApplyPresetToSync+0x15c>)
 80058b2:	f004 fdbb 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058b6:	2201      	movs	r2, #1
 80058b8:	2120      	movs	r1, #32
 80058ba:	4808      	ldr	r0, [pc, #32]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80058bc:	f004 fdb6 	bl	800a42c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80058c0:	2201      	movs	r2, #1
 80058c2:	2110      	movs	r1, #16
 80058c4:	4805      	ldr	r0, [pc, #20]	; (80058dc <GO_ApplyPresetToSync+0x160>)
 80058c6:	f004 fdb1 	bl	800a42c <HAL_GPIO_WritePin>
			break;
 80058ca:	bf00      	nop
	}
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd90      	pop	{r4, r7, pc}
 80058d4:	200001d8 	.word	0x200001d8
 80058d8:	48000400 	.word	0x48000400
 80058dc:	48000800 	.word	0x48000800

080058e0 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 80058e4:	f000 f89a 	bl	8005a1c <_InitOutputChannels>
	_InitNegGainCoefficients();
 80058e8:	f000 f850 	bl	800598c <_InitNegGainCoefficients>
	_InitGainInDecibels();
 80058ec:	f000 f802 	bl	80058f4 <_InitGainInDecibels>

}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e037      	b.n	8005970 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005900:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <_InitGainInDecibels+0x8c>)
 8005902:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005904:	491f      	ldr	r1, [pc, #124]	; (8005984 <_InitGainInDecibels+0x90>)
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	3304      	adds	r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005918:	ed97 7a01 	vldr	s14, [r7, #4]
 800591c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005920:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005924:	ee16 0a90 	vmov	r0, s13
 8005928:	f7fa fe36 	bl	8000598 <__aeabi_f2d>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	ec44 3b10 	vmov	d0, r3, r4
 8005934:	f00a fd74 	bl	8010420 <log10>
 8005938:	ec51 0b10 	vmov	r0, r1, d0
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <_InitGainInDecibels+0x94>)
 8005942:	f7fa fe81 	bl	8000648 <__aeabi_dmul>
 8005946:	4603      	mov	r3, r0
 8005948:	460c      	mov	r4, r1
 800594a:	4618      	mov	r0, r3
 800594c:	4621      	mov	r1, r4
 800594e:	f7fb f973 	bl	8000c38 <__aeabi_d2f>
 8005952:	4603      	mov	r3, r0
 8005954:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005956:	490b      	ldr	r1, [pc, #44]	; (8005984 <_InitGainInDecibels+0x90>)
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	330c      	adds	r3, #12
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b61      	cmp	r3, #97	; 0x61
 8005974:	ddc4      	ble.n	8005900 <_InitGainInDecibels+0xc>

	}
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bd90      	pop	{r4, r7, pc}
 800597e:	bf00      	nop
 8005980:	3a83126f 	.word	0x3a83126f
 8005984:	200001f0 	.word	0x200001f0
 8005988:	40340000 	.word	0x40340000

0800598c <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e033      	b.n	8005a00 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005998:	491e      	ldr	r1, [pc, #120]	; (8005a14 <_InitNegGainCoefficients+0x88>)
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	3304      	adds	r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80059ac:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <_InitNegGainCoefficients+0x8c>)
 80059ae:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80059b0:	4918      	ldr	r1, [pc, #96]	; (8005a14 <_InitNegGainCoefficients+0x88>)
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3308      	adds	r3, #8
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80059ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80059d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059da:	ed97 7a02 	vldr	s14, [r7, #8]
 80059de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e2:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 80059e6:	490b      	ldr	r1, [pc, #44]	; (8005a14 <_InitNegGainCoefficients+0x88>)
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3310      	adds	r3, #16
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b61      	cmp	r3, #97	; 0x61
 8005a04:	ddc8      	ble.n	8005998 <_InitNegGainCoefficients+0xc>
	}
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	200001f0 	.word	0x200001f0
 8005a18:	402ccccd 	.word	0x402ccccd

08005a1c <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005a22:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <_InitOutputChannels+0xac>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a2e:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005a30:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a32:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <_InitOutputChannels+0xac>)
 8005a34:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	e00b      	b.n	8005a56 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005a3e:	4a23      	ldr	r2, [pc, #140]	; (8005acc <_InitOutputChannels+0xb0>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a46:	491f      	ldr	r1, [pc, #124]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3301      	adds	r3, #1
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b77      	cmp	r3, #119	; 0x77
 8005a5a:	ddf0      	ble.n	8005a3e <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005a5c:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <_InitOutputChannels+0xb4>)
 8005a60:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <_InitOutputChannels+0xa8>)
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <_InitOutputChannels+0xb8>)
 8005a68:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <_InitOutputChannels+0xac>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005a78:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005a7c:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <_InitOutputChannels+0xac>)
 8005a7e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	e00b      	b.n	8005aa0 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005a88:	4a10      	ldr	r2, [pc, #64]	; (8005acc <_InitOutputChannels+0xb0>)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a90:	4911      	ldr	r1, [pc, #68]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	3302      	adds	r3, #2
 8005a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b77      	cmp	r3, #119	; 0x77
 8005aa4:	ddf0      	ble.n	8005a88 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <_InitOutputChannels+0xb4>)
 8005aaa:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <_InitOutputChannels+0xbc>)
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <_InitOutputChannels+0xb8>)
 8005ab2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20002120 	.word	0x20002120
 8005ac8:	200001a0 	.word	0x200001a0
 8005acc:	2000152c 	.word	0x2000152c
 8005ad0:	20000bac 	.word	0x20000bac
 8005ad4:	200001db 	.word	0x200001db
 8005ad8:	20001f2c 	.word	0x20001f2c

08005adc <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <SM_GetOutputChannel+0x24>)
 8005aee:	e000      	b.n	8005af2 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <SM_GetOutputChannel+0x28>)
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20002120 	.word	0x20002120
 8005b04:	20001f2c 	.word	0x20001f2c

08005b08 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <SM_GetEncoderValue+0x34>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <SM_GetEncoderValue+0x34>)
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	e002      	b.n	8005b30 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <SM_GetEncoderValue+0x34>)
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	b29b      	uxth	r3, r3
	}
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <SM_GetOutputInHertz+0x7c>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <SM_GetOutputInHertz+0x16>
 8005b4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	e007      	b.n	8005b66 <SM_GetOutputInHertz+0x26>
 8005b56:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <SM_GetOutputInHertz+0x7c>)
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <SM_GetOutputInHertz+0x7c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <SM_GetOutputInHertz+0x36>
 8005b6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b72:	607b      	str	r3, [r7, #4]
 8005b74:	e007      	b.n	8005b86 <SM_GetOutputInHertz+0x46>
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <SM_GetOutputInHertz+0x7c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005b86:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b92:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005bc0 <SM_GetOutputInHertz+0x80>
 8005b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9a:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ba2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005bc4 <SM_GetOutputInHertz+0x84>
 8005ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005baa:	eef0 7a66 	vmov.f32	s15, s13
}
 8005bae:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40013400 	.word	0x40013400
 8005bc0:	4d2037a0 	.word	0x4d2037a0
 8005bc4:	42f00000 	.word	0x42f00000

08005bc8 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <SM_ConvertPeriodToHertz+0x16>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005bde:	887b      	ldrh	r3, [r7, #2]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c10 <SM_ConvertPeriodToHertz+0x48>
 8005bfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005bfe:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c02:	eeb0 0a67 	vmov.f32	s0, s15
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	4d2037a0 	.word	0x4d2037a0

08005c14 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <VPP_ResetLastEncoderValue+0x14>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	801a      	strh	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20001f0a 	.word	0x20001f0a

08005c2c <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005c36:	79fa      	ldrb	r2, [r7, #7]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4a10      	ldr	r2, [pc, #64]	; (8005c84 <VPP_ApplyProfileToSignal+0x58>)
 8005c42:	4413      	add	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8005c46:	2000      	movs	r0, #0
 8005c48:	f7ff ff48 	bl	8005adc <SM_GetOutputChannel>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	7a1b      	ldrb	r3, [r3, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fcdd 	bl	8005618 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8b1b      	ldrh	r3, [r3, #24]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	eef0 0a47 	vmov.f32	s1, s14
 8005c74:	eeb0 0a67 	vmov.f32	s0, s15
 8005c78:	f000 f834 	bl	8005ce4 <_ProcessSignalDataTable>


}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200001f0 	.word	0x200001f0

08005c88 <VPP_ApplyProfileToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSync(eAmpSettings_t pPresetEnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005c92:	79fa      	ldrb	r2, [r7, #7]
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <VPP_ApplyProfileToSync+0x58>)
 8005c9e:	4413      	add	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f7ff ff1a 	bl	8005adc <SM_GetOutputChannel>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	7a1b      	ldrb	r3, [r3, #8]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fd61 	bl	800577c <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	ed93 7a05 	vldr	s14, [r3, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8b1b      	ldrh	r3, [r3, #24]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	eef0 0a47 	vmov.f32	s1, s14
 8005cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd4:	f000 f88c 	bl	8005df0 <_ProcessSyncDataTable>



}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	200001f0 	.word	0x200001f0

08005ce4 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cee:	edc7 0a02 	vstr	s1, [r7, #8]
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f7ff fef0 	bl	8005adc <SM_GetOutputChannel>
 8005cfc:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d06b      	beq.n	8005de2 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e00c      	b.n	8005d2a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4933      	ldr	r1, [pc, #204]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	3301      	adds	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	2b77      	cmp	r3, #119	; 0x77
 8005d2e:	ddef      	ble.n	8005d10 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8005d30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005d34:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	e02e      	b.n	8005db2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005d54:	4a25      	ldr	r2, [pc, #148]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d70:	ee17 1a90 	vmov	r1, s15
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d90:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005d94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da0:	ee17 1a90 	vmov	r1, s15
 8005da4:	4a11      	ldr	r2, [pc, #68]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b77      	cmp	r3, #119	; 0x77
 8005db6:	ddcd      	ble.n	8005d54 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e00e      	b.n	8005ddc <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f7ff fe8c 	bl	8005adc <SM_GetOutputChannel>
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <_ProcessSignalDataTable+0x108>)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b77      	cmp	r3, #119	; 0x77
 8005de0:	dded      	ble.n	8005dbe <_ProcessSignalDataTable+0xda>
		}
	}

}
 8005de2:	bf00      	nop
 8005de4:	3728      	adds	r7, #40	; 0x28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20002314 	.word	0x20002314

08005df0 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8005dfe:	4603      	mov	r3, r0
 8005e00:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8005e02:	2001      	movs	r0, #1
 8005e04:	f7ff fe6a 	bl	8005adc <SM_GetOutputChannel>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b06      	cmp	r3, #6
 8005e12:	d059      	beq.n	8005ec8 <_ProcessSyncDataTable+0xd8>
	{
		// copy refer lookup datat table from SyncChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e00f      	b.n	8005e3a <_ProcessSyncDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f7ff fe5e 	bl	8005adc <SM_GetOutputChannel>
 8005e20:	4603      	mov	r3, r0
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4933      	ldr	r1, [pc, #204]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	3301      	adds	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b77      	cmp	r3, #119	; 0x77
 8005e3e:	ddec      	ble.n	8005e1a <_ProcessSyncDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8005e40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e44:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <_ProcessSyncDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e5a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e02e      	b.n	8005ec2 <_ProcessSyncDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e80:	ee17 1a90 	vmov	r1, s15
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ea0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005ea4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb0:	ee17 1a90 	vmov	r1, s15
 8005eb4:	4a11      	ldr	r2, [pc, #68]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b77      	cmp	r3, #119	; 0x77
 8005ec6:	ddcd      	ble.n	8005e64 <_ProcessSyncDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	e00e      	b.n	8005eec <_ProcessSyncDataTable+0xfc>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005ece:	2001      	movs	r0, #1
 8005ed0:	f7ff fe04 	bl	8005adc <SM_GetOutputChannel>
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <_ProcessSyncDataTable+0x10c>)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b77      	cmp	r3, #119	; 0x77
 8005ef0:	dded      	ble.n	8005ece <_ProcessSyncDataTable+0xde>
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20002314 	.word	0x20002314

08005f00 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f7ff fde6 	bl	8005adc <SM_GetOutputChannel>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8005f1a:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d90c      	bls.n	8005f3e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	3301      	adds	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b61      	cmp	r3, #97	; 0x61
 8005f2e:	d901      	bls.n	8005f34 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8005f30:	2361      	movs	r3, #97	; 0x61
 8005f32:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fe78 	bl	8005c2c <VPP_ApplyProfileToSignal>
 8005f3c:	e010      	b.n	8005f60 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d20b      	bcs.n	8005f60 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b61      	cmp	r3, #97	; 0x61
 8005f52:	d901      	bls.n	8005f58 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fe66 	bl	8005c2c <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8005f60:	4a03      	ldr	r2, [pc, #12]	; (8005f70 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	8013      	strh	r3, [r2, #0]

}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20001f0a 	.word	0x20001f0a

08005f74 <VPP_MapEncoderPositionToSyncOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7ff fdac 	bl	8005adc <SM_GetOutputChannel>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d90c      	bls.n	8005fb2 <VPP_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpAmp++;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b61      	cmp	r3, #97	; 0x61
 8005fa2:	d901      	bls.n	8005fa8 <VPP_MapEncoderPositionToSyncOutput+0x34>
 8005fa4:	2361      	movs	r3, #97	; 0x61
 8005fa6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fe6c 	bl	8005c88 <VPP_ApplyProfileToSync>
 8005fb0:	e010      	b.n	8005fd4 <VPP_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d20b      	bcs.n	8005fd4 <VPP_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpAmp--;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b61      	cmp	r3, #97	; 0x61
 8005fc6:	d901      	bls.n	8005fcc <VPP_MapEncoderPositionToSyncOutput+0x58>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fe5a 	bl	8005c88 <VPP_ApplyProfileToSync>
	}
	amp_last_encoder_value = pEncoderValue;
 8005fd4:	4a03      	ldr	r2, [pc, #12]	; (8005fe4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	8013      	strh	r3, [r2, #0]

}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20001f0a 	.word	0x20001f0a

08005fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	; 0x30
 8005fec:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8005fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	605a      	str	r2, [r3, #4]
 8005ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f007 fdf3 	bl	800dbec <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006006:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006008:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800600c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800600e:	4b30      	ldr	r3, [pc, #192]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006010:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006014:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800601c:	4b2c      	ldr	r3, [pc, #176]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006028:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800602a:	2200      	movs	r2, #0
 800602c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800602e:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006030:	2204      	movs	r2, #4
 8006032:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006034:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800603a:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800603c:	2201      	movs	r2, #1
 800603e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006040:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006042:	2201      	movs	r2, #1
 8006044:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006046:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800604e:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006050:	2200      	movs	r2, #0
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006054:	4b1e      	ldr	r3, [pc, #120]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006062:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006072:	4817      	ldr	r0, [pc, #92]	; (80060d0 <MX_ADC1_Init+0xe8>)
 8006074:	f001 fee0 	bl	8007e38 <HAL_ADC_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800607e:	f000 fead 	bl	8006ddc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800608a:	4619      	mov	r1, r3
 800608c:	4810      	ldr	r0, [pc, #64]	; (80060d0 <MX_ADC1_Init+0xe8>)
 800608e:	f002 fc69 	bl	8008964 <HAL_ADCEx_MultiModeConfigChannel>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006098:	f000 fea0 	bl	8006ddc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <MX_ADC1_Init+0xec>)
 800609e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80060a0:	2306      	movs	r3, #6
 80060a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80060a8:	237f      	movs	r3, #127	; 0x7f
 80060aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80060ac:	2304      	movs	r3, #4
 80060ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4805      	ldr	r0, [pc, #20]	; (80060d0 <MX_ADC1_Init+0xe8>)
 80060ba:	f002 f87d 	bl	80081b8 <HAL_ADC_ConfigChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80060c4:	f000 fe8a 	bl	8006ddc <Error_Handler>
  }

}
 80060c8:	bf00      	nop
 80060ca:	3730      	adds	r7, #48	; 0x30
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	200024f4 	.word	0x200024f4
 80060d4:	0c900008 	.word	0x0c900008

080060d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	; 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f8:	d14f      	bne.n	800619a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80060fa:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	4a29      	ldr	r2, [pc, #164]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 8006100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006106:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006112:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 8006114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006116:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800611e:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <HAL_ADC_MspInit+0xcc>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800612a:	2304      	movs	r3, #4
 800612c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800612e:	2303      	movs	r3, #3
 8006130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	4619      	mov	r1, r3
 800613c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006140:	f003 fff2 	bl	800a128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006144:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <HAL_ADC_MspInit+0xd4>)
 8006148:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800614a:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 800614c:	2205      	movs	r2, #5
 800614e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006152:	2200      	movs	r2, #0
 8006154:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006158:	2200      	movs	r2, #0
 800615a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006168:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 800616c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006174:	2220      	movs	r2, #32
 8006176:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 800617a:	2200      	movs	r2, #0
 800617c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800617e:	480a      	ldr	r0, [pc, #40]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006180:	f003 fd06 	bl	8009b90 <HAL_DMA_Init>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800618a:	f000 fe27 	bl	8006ddc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006192:	655a      	str	r2, [r3, #84]	; 0x54
 8006194:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <HAL_ADC_MspInit+0xd0>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800619a:	bf00      	nop
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000
 80061a8:	20002560 	.word	0x20002560
 80061ac:	40020008 	.word	0x40020008

080061b0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <MX_COMP1_Init+0x48>)
 80061b8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80061ba:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061bc:	2200      	movs	r2, #0
 80061be:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061c2:	4a0e      	ldr	r2, [pc, #56]	; (80061fc <MX_COMP1_Init+0x4c>)
 80061c4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061da:	2200      	movs	r2, #0
 80061dc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80061de:	4805      	ldr	r0, [pc, #20]	; (80061f4 <MX_COMP1_Init+0x44>)
 80061e0:	f002 fe14 	bl	8008e0c <HAL_COMP_Init>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80061ea:	f000 fdf7 	bl	8006ddc <Error_Handler>
  }

}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200025c0 	.word	0x200025c0
 80061f8:	40010200 	.word	0x40010200
 80061fc:	00800030 	.word	0x00800030

08006200 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0f      	ldr	r2, [pc, #60]	; (800625c <HAL_COMP_MspInit+0x5c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d118      	bne.n	8006254 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006222:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <HAL_COMP_MspInit+0x60>)
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <HAL_COMP_MspInit+0x60>)
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_COMP_MspInit+0x60>)
 8006230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800623a:	2302      	movs	r3, #2
 800623c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800623e:	2303      	movs	r3, #3
 8006240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006246:	f107 030c 	add.w	r3, r7, #12
 800624a:	4619      	mov	r1, r3
 800624c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006250:	f003 ff6a 	bl	800a128 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006254:	bf00      	nop
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40010200 	.word	0x40010200
 8006260:	40021000 	.word	0x40021000

08006264 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	; 0x30
 8006268:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800626a:	463b      	mov	r3, r7
 800626c:	2230      	movs	r2, #48	; 0x30
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f007 fcbb 	bl	800dbec <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006276:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <MX_DAC1_Init+0x8c>)
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <MX_DAC1_Init+0x90>)
 800627a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800627c:	481c      	ldr	r0, [pc, #112]	; (80062f0 <MX_DAC1_Init+0x8c>)
 800627e:	f003 f868 	bl	8009352 <HAL_DAC_Init>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006288:	f000 fda8 	bl	8006ddc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800628c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006290:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006292:	2300      	movs	r3, #0
 8006294:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006296:	2300      	movs	r3, #0
 8006298:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800629e:	2306      	movs	r3, #6
 80062a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80062aa:	2301      	movs	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80062b2:	463b      	mov	r3, r7
 80062b4:	2200      	movs	r2, #0
 80062b6:	4619      	mov	r1, r3
 80062b8:	480d      	ldr	r0, [pc, #52]	; (80062f0 <MX_DAC1_Init+0x8c>)
 80062ba:	f003 fa33 	bl	8009724 <HAL_DAC_ConfigChannel>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80062c4:	f000 fd8a 	bl	8006ddc <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80062d0:	463b      	mov	r3, r7
 80062d2:	2210      	movs	r2, #16
 80062d4:	4619      	mov	r1, r3
 80062d6:	4806      	ldr	r0, [pc, #24]	; (80062f0 <MX_DAC1_Init+0x8c>)
 80062d8:	f003 fa24 	bl	8009724 <HAL_DAC_ConfigChannel>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80062e2:	f000 fd7b 	bl	8006ddc <Error_Handler>
  }

}
 80062e6:	bf00      	nop
 80062e8:	3730      	adds	r7, #48	; 0x30
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200025f8 	.word	0x200025f8
 80062f4:	50000800 	.word	0x50000800

080062f8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80062fe:	463b      	mov	r3, r7
 8006300:	2230      	movs	r2, #48	; 0x30
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f007 fc71 	bl	800dbec <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <MX_DAC2_Init+0x6c>)
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <MX_DAC2_Init+0x70>)
 800630e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006310:	4814      	ldr	r0, [pc, #80]	; (8006364 <MX_DAC2_Init+0x6c>)
 8006312:	f003 f81e 	bl	8009352 <HAL_DAC_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800631c:	f000 fd5e 	bl	8006ddc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006324:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006326:	2300      	movs	r3, #0
 8006328:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800632a:	2300      	movs	r3, #0
 800632c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006332:	2306      	movs	r3, #6
 8006334:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800633e:	2301      	movs	r3, #1
 8006340:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006346:	463b      	mov	r3, r7
 8006348:	2200      	movs	r2, #0
 800634a:	4619      	mov	r1, r3
 800634c:	4805      	ldr	r0, [pc, #20]	; (8006364 <MX_DAC2_Init+0x6c>)
 800634e:	f003 f9e9 	bl	8009724 <HAL_DAC_ConfigChannel>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006358:	f000 fd40 	bl	8006ddc <Error_Handler>
  }

}
 800635c:	bf00      	nop
 800635e:	3730      	adds	r7, #48	; 0x30
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200025e4 	.word	0x200025e4
 8006368:	50000c00 	.word	0x50000c00

0800636c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08c      	sub	sp, #48	; 0x30
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006374:	f107 031c 	add.w	r3, r7, #28
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	609a      	str	r2, [r3, #8]
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a56      	ldr	r2, [pc, #344]	; (80064e4 <HAL_DAC_MspInit+0x178>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d150      	bne.n	8006430 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800638e:	4b56      	ldr	r3, [pc, #344]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	4a55      	ldr	r2, [pc, #340]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a6:	4b50      	ldr	r3, [pc, #320]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	4a4f      	ldr	r2, [pc, #316]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063b2:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80063be:	2330      	movs	r3, #48	; 0x30
 80063c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063c2:	2303      	movs	r3, #3
 80063c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ca:	f107 031c 	add.w	r3, r7, #28
 80063ce:	4619      	mov	r1, r3
 80063d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063d4:	f003 fea8 	bl	800a128 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80063d8:	4b44      	ldr	r3, [pc, #272]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063da:	4a45      	ldr	r2, [pc, #276]	; (80064f0 <HAL_DAC_MspInit+0x184>)
 80063dc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063e0:	2206      	movs	r2, #6
 80063e2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063e4:	4b41      	ldr	r3, [pc, #260]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063e6:	2210      	movs	r2, #16
 80063e8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ea:	4b40      	ldr	r3, [pc, #256]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80063f0:	4b3e      	ldr	r3, [pc, #248]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063f6:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_DAC_MspInit+0x180>)
 80063f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_DAC_MspInit+0x180>)
 8006400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006404:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <HAL_DAC_MspInit+0x180>)
 8006408:	2220      	movs	r2, #32
 800640a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800640c:	4b37      	ldr	r3, [pc, #220]	; (80064ec <HAL_DAC_MspInit+0x180>)
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006412:	4836      	ldr	r0, [pc, #216]	; (80064ec <HAL_DAC_MspInit+0x180>)
 8006414:	f003 fbbc 	bl	8009b90 <HAL_DMA_Init>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800641e:	f000 fcdd 	bl	8006ddc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a31      	ldr	r2, [pc, #196]	; (80064ec <HAL_DAC_MspInit+0x180>)
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	4a30      	ldr	r2, [pc, #192]	; (80064ec <HAL_DAC_MspInit+0x180>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800642e:	e054      	b.n	80064da <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2f      	ldr	r2, [pc, #188]	; (80064f4 <HAL_DAC_MspInit+0x188>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d14f      	bne.n	80064da <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800643a:	4b2b      	ldr	r3, [pc, #172]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	4a2a      	ldr	r2, [pc, #168]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006452:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	4a24      	ldr	r2, [pc, #144]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800645e:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <HAL_DAC_MspInit+0x17c>)
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800646a:	2340      	movs	r3, #64	; 0x40
 800646c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800646e:	2303      	movs	r3, #3
 8006470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006476:	f107 031c 	add.w	r3, r7, #28
 800647a:	4619      	mov	r1, r3
 800647c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006480:	f003 fe52 	bl	800a128 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 8006486:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_DAC_MspInit+0x190>)
 8006488:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 800648c:	2229      	movs	r2, #41	; 0x29
 800648e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 8006492:	2210      	movs	r2, #16
 8006494:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006496:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 8006498:	2200      	movs	r2, #0
 800649a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064b4:	2220      	movs	r2, #32
 80064b6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80064be:	480e      	ldr	r0, [pc, #56]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064c0:	f003 fb66 	bl	8009b90 <HAL_DMA_Init>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80064ca:	f000 fc87 	bl	8006ddc <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <HAL_DAC_MspInit+0x18c>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80064da:	bf00      	nop
 80064dc:	3730      	adds	r7, #48	; 0x30
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	50000800 	.word	0x50000800
 80064e8:	40021000 	.word	0x40021000
 80064ec:	2000260c 	.word	0x2000260c
 80064f0:	4002001c 	.word	0x4002001c
 80064f4:	50000c00 	.word	0x50000c00
 80064f8:	2000266c 	.word	0x2000266c
 80064fc:	40020030 	.word	0x40020030

08006500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <MX_DMA_Init+0x70>)
 8006508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <MX_DMA_Init+0x70>)
 800650c:	f043 0304 	orr.w	r3, r3, #4
 8006510:	6493      	str	r3, [r2, #72]	; 0x48
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <MX_DMA_Init+0x70>)
 8006514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <MX_DMA_Init+0x70>)
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	4a13      	ldr	r2, [pc, #76]	; (8006570 <MX_DMA_Init+0x70>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	6493      	str	r3, [r2, #72]	; 0x48
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <MX_DMA_Init+0x70>)
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006536:	2200      	movs	r2, #0
 8006538:	2101      	movs	r1, #1
 800653a:	200b      	movs	r0, #11
 800653c:	f002 fed5 	bl	80092ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006540:	200b      	movs	r0, #11
 8006542:	f002 feec 	bl	800931e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	200c      	movs	r0, #12
 800654c:	f002 fecd 	bl	80092ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006550:	200c      	movs	r0, #12
 8006552:	f002 fee4 	bl	800931e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	200d      	movs	r0, #13
 800655c:	f002 fec5 	bl	80092ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006560:	200d      	movs	r0, #13
 8006562:	f002 fedc 	bl	800931e <HAL_NVIC_EnableIRQ>

}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40021000 	.word	0x40021000

08006574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <__NVIC_GetPriorityGrouping+0x18>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	f003 0307 	and.w	r3, r3, #7
}
 8006582:	4618      	mov	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800659a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	db0b      	blt.n	80065ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	f003 021f 	and.w	r2, r3, #31
 80065a8:	4907      	ldr	r1, [pc, #28]	; (80065c8 <__NVIC_EnableIRQ+0x38>)
 80065aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2001      	movs	r0, #1
 80065b2:	fa00 f202 	lsl.w	r2, r0, r2
 80065b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000e100 	.word	0xe000e100

080065cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	db0a      	blt.n	80065f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	490c      	ldr	r1, [pc, #48]	; (8006618 <__NVIC_SetPriority+0x4c>)
 80065e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ea:	0112      	lsls	r2, r2, #4
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	440b      	add	r3, r1
 80065f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065f4:	e00a      	b.n	800660c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	4908      	ldr	r1, [pc, #32]	; (800661c <__NVIC_SetPriority+0x50>)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	3b04      	subs	r3, #4
 8006604:	0112      	lsls	r2, r2, #4
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	440b      	add	r3, r1
 800660a:	761a      	strb	r2, [r3, #24]
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	e000e100 	.word	0xe000e100
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006620:	b480      	push	{r7}
 8006622:	b089      	sub	sp, #36	; 0x24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f1c3 0307 	rsb	r3, r3, #7
 800663a:	2b04      	cmp	r3, #4
 800663c:	bf28      	it	cs
 800663e:	2304      	movcs	r3, #4
 8006640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	3304      	adds	r3, #4
 8006646:	2b06      	cmp	r3, #6
 8006648:	d902      	bls.n	8006650 <NVIC_EncodePriority+0x30>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3b03      	subs	r3, #3
 800664e:	e000      	b.n	8006652 <NVIC_EncodePriority+0x32>
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43da      	mvns	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	401a      	ands	r2, r3
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	fa01 f303 	lsl.w	r3, r1, r3
 8006672:	43d9      	mvns	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006678:	4313      	orrs	r3, r2
         );
}
 800667a:	4618      	mov	r0, r3
 800667c:	3724      	adds	r7, #36	; 0x24
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006692:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	3302      	adds	r3, #2
 800669c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	43db      	mvns	r3, r3
 80066a6:	ea02 0103 	and.w	r1, r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	fa93 f3a3 	rbit	r3, r3
 80066b6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	fab3 f383 	clz	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	409a      	lsls	r2, r3
 80066c8:	4806      	ldr	r0, [pc, #24]	; (80066e4 <LL_SYSCFG_SetEXTISource+0x5c>)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	430a      	orrs	r2, r1
 80066d2:	3302      	adds	r3, #2
 80066d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40010000 	.word	0x40010000

080066e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	fa93 f3a3 	rbit	r3, r3
 8006702:	613b      	str	r3, [r7, #16]
  return result;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	2103      	movs	r1, #3
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	401a      	ands	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	fa93 f3a3 	rbit	r3, r3
 8006722:	61bb      	str	r3, [r7, #24]
  return result;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	fab3 f383 	clz	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3724      	adds	r7, #36	; 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006746:	b480      	push	{r7}
 8006748:	b089      	sub	sp, #36	; 0x24
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	fa93 f3a3 	rbit	r3, r3
 8006760:	613b      	str	r3, [r7, #16]
  return result;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	fab3 f383 	clz	r3, r3
 8006768:	b2db      	uxtb	r3, r3
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	2103      	movs	r1, #3
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	401a      	ands	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	fa93 f3a3 	rbit	r3, r3
 8006780:	61bb      	str	r3, [r7, #24]
  return result;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	fab3 f383 	clz	r3, r3
 8006788:	b2db      	uxtb	r3, r3
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	431a      	orrs	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	60da      	str	r2, [r3, #12]
}
 8006798:	bf00      	nop
 800679a:	3724      	adds	r7, #36	; 0x24
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067cc:	4907      	ldr	r1, [pc, #28]	; (80067ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40021000 	.word	0x40021000

080067f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006802:	1d3b      	adds	r3, r7, #4
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	605a      	str	r2, [r3, #4]
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	611a      	str	r2, [r3, #16]
 8006810:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006812:	2004      	movs	r0, #4
 8006814:	f7ff ffd4 	bl	80067c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006818:	2020      	movs	r0, #32
 800681a:	f7ff ffd1 	bl	80067c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800681e:	2001      	movs	r0, #1
 8006820:	f7ff ffce 	bl	80067c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006824:	2002      	movs	r0, #2
 8006826:	f7ff ffcb 	bl	80067c0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800682a:	2108      	movs	r1, #8
 800682c:	48d3      	ldr	r0, [pc, #844]	; (8006b7c <MX_GPIO_Init+0x38c>)
 800682e:	f7ff ffb9 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006832:	2108      	movs	r1, #8
 8006834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006838:	f7ff ffb4 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 800683c:	2110      	movs	r1, #16
 800683e:	48cf      	ldr	r0, [pc, #828]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006840:	f7ff ffb0 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006844:	2120      	movs	r1, #32
 8006846:	48cd      	ldr	r0, [pc, #820]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006848:	f7ff ffac 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 800684c:	2101      	movs	r1, #1
 800684e:	48cc      	ldr	r0, [pc, #816]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006850:	f7ff ffa8 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006858:	48c8      	ldr	r0, [pc, #800]	; (8006b7c <MX_GPIO_Init+0x38c>)
 800685a:	f7ff ffa3 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800685e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006862:	48c6      	ldr	r0, [pc, #792]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006864:	f7ff ff9e 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006868:	2140      	movs	r1, #64	; 0x40
 800686a:	48c5      	ldr	r0, [pc, #788]	; (8006b80 <MX_GPIO_Init+0x390>)
 800686c:	f7ff ff9a 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	48c3      	ldr	r0, [pc, #780]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006874:	f7ff ff96 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800687c:	48c0      	ldr	r0, [pc, #768]	; (8006b80 <MX_GPIO_Init+0x390>)
 800687e:	f7ff ff91 	bl	80067a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006882:	49c0      	ldr	r1, [pc, #768]	; (8006b84 <MX_GPIO_Init+0x394>)
 8006884:	2002      	movs	r0, #2
 8006886:	f7ff feff 	bl	8006688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800688a:	49bf      	ldr	r1, [pc, #764]	; (8006b88 <MX_GPIO_Init+0x398>)
 800688c:	2002      	movs	r0, #2
 800688e:	f7ff fefb 	bl	8006688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006892:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006896:	2005      	movs	r0, #5
 8006898:	f7ff fef6 	bl	8006688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800689c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80068a0:	2005      	movs	r0, #5
 80068a2:	f7ff fef1 	bl	8006688 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80068a6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80068aa:	2002      	movs	r0, #2
 80068ac:	f7ff feec 	bl	8006688 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80068b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068b4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80068c2:	2302      	movs	r3, #2
 80068c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80068c8:	f107 031c 	add.w	r3, r7, #28
 80068cc:	4618      	mov	r0, r3
 80068ce:	f005 feab 	bl	800c628 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80068d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80068ea:	f107 031c 	add.w	r3, r7, #28
 80068ee:	4618      	mov	r0, r3
 80068f0:	f005 fe9a 	bl	800c628 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80068f4:	2301      	movs	r3, #1
 80068f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006904:	2302      	movs	r3, #2
 8006906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800690a:	f107 031c 	add.w	r3, r7, #28
 800690e:	4618      	mov	r0, r3
 8006910:	f005 fe8a 	bl	800c628 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006914:	2302      	movs	r3, #2
 8006916:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006924:	2302      	movs	r3, #2
 8006926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800692a:	f107 031c 	add.w	r3, r7, #28
 800692e:	4618      	mov	r0, r3
 8006930:	f005 fe7a 	bl	800c628 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006934:	2304      	movs	r3, #4
 8006936:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800693e:	2300      	movs	r3, #0
 8006940:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006944:	2302      	movs	r3, #2
 8006946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800694a:	f107 031c 	add.w	r3, r7, #28
 800694e:	4618      	mov	r0, r3
 8006950:	f005 fe6a 	bl	800c628 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006954:	2201      	movs	r2, #1
 8006956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800695a:	4888      	ldr	r0, [pc, #544]	; (8006b7c <MX_GPIO_Init+0x38c>)
 800695c:	f7ff fef3 	bl	8006746 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006960:	2201      	movs	r2, #1
 8006962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006966:	4885      	ldr	r0, [pc, #532]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006968:	f7ff feed 	bl	8006746 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 800696c:	2201      	movs	r2, #1
 800696e:	2101      	movs	r1, #1
 8006970:	4886      	ldr	r0, [pc, #536]	; (8006b8c <MX_GPIO_Init+0x39c>)
 8006972:	f7ff fee8 	bl	8006746 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006976:	2201      	movs	r2, #1
 8006978:	2102      	movs	r1, #2
 800697a:	4884      	ldr	r0, [pc, #528]	; (8006b8c <MX_GPIO_Init+0x39c>)
 800697c:	f7ff fee3 	bl	8006746 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006980:	2201      	movs	r2, #1
 8006982:	2104      	movs	r1, #4
 8006984:	487d      	ldr	r0, [pc, #500]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006986:	f7ff fede 	bl	8006746 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800698a:	2200      	movs	r2, #0
 800698c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006990:	487a      	ldr	r0, [pc, #488]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006992:	f7ff fea9 	bl	80066e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006996:	2200      	movs	r2, #0
 8006998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800699c:	4877      	ldr	r0, [pc, #476]	; (8006b7c <MX_GPIO_Init+0x38c>)
 800699e:	f7ff fea3 	bl	80066e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2101      	movs	r1, #1
 80069a6:	4879      	ldr	r0, [pc, #484]	; (8006b8c <MX_GPIO_Init+0x39c>)
 80069a8:	f7ff fe9e 	bl	80066e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2102      	movs	r1, #2
 80069b0:	4876      	ldr	r0, [pc, #472]	; (8006b8c <MX_GPIO_Init+0x39c>)
 80069b2:	f7ff fe99 	bl	80066e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2104      	movs	r1, #4
 80069ba:	4870      	ldr	r0, [pc, #448]	; (8006b7c <MX_GPIO_Init+0x38c>)
 80069bc:	f7ff fe94 	bl	80066e8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80069c0:	2308      	movs	r3, #8
 80069c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80069c4:	2301      	movs	r3, #1
 80069c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80069d0:	2302      	movs	r3, #2
 80069d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4868      	ldr	r0, [pc, #416]	; (8006b7c <MX_GPIO_Init+0x38c>)
 80069da:	f006 f818 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80069de:	2308      	movs	r3, #8
 80069e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80069e2:	2301      	movs	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069fa:	f006 f808 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80069fe:	2310      	movs	r3, #16
 8006a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a02:	2301      	movs	r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4859      	ldr	r0, [pc, #356]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006a18:	f005 fff9 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a20:	2301      	movs	r3, #1
 8006a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006a30:	1d3b      	adds	r3, r7, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4851      	ldr	r0, [pc, #324]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006a36:	f005 ffea 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	484b      	ldr	r0, [pc, #300]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006a54:	f005 ffdb 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	4619      	mov	r1, r3
 8006a72:	4842      	ldr	r0, [pc, #264]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006a74:	f005 ffcb 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	483a      	ldr	r0, [pc, #232]	; (8006b7c <MX_GPIO_Init+0x38c>)
 8006a94:	f005 ffbb 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4833      	ldr	r0, [pc, #204]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006ab2:	f005 ffac 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006aba:	2301      	movs	r3, #1
 8006abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	482c      	ldr	r0, [pc, #176]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006ad0:	f005 ff9d 	bl	800ca0e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ada:	2301      	movs	r3, #1
 8006adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4824      	ldr	r0, [pc, #144]	; (8006b80 <MX_GPIO_Init+0x390>)
 8006af0:	f005 ff8d 	bl	800ca0e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006af4:	f7ff fd3e 	bl	8006574 <__NVIC_GetPriorityGrouping>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fd8e 	bl	8006620 <NVIC_EncodePriority>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4619      	mov	r1, r3
 8006b08:	2006      	movs	r0, #6
 8006b0a:	f7ff fd5f 	bl	80065cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006b0e:	2006      	movs	r0, #6
 8006b10:	f7ff fd3e 	bl	8006590 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b14:	f7ff fd2e 	bl	8006574 <__NVIC_GetPriorityGrouping>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff fd7e 	bl	8006620 <NVIC_EncodePriority>
 8006b24:	4603      	mov	r3, r0
 8006b26:	4619      	mov	r1, r3
 8006b28:	2007      	movs	r0, #7
 8006b2a:	f7ff fd4f 	bl	80065cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006b2e:	2007      	movs	r0, #7
 8006b30:	f7ff fd2e 	bl	8006590 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b34:	f7ff fd1e 	bl	8006574 <__NVIC_GetPriorityGrouping>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fd6e 	bl	8006620 <NVIC_EncodePriority>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4619      	mov	r1, r3
 8006b48:	2008      	movs	r0, #8
 8006b4a:	f7ff fd3f 	bl	80065cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006b4e:	2008      	movs	r0, #8
 8006b50:	f7ff fd1e 	bl	8006590 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b54:	f7ff fd0e 	bl	8006574 <__NVIC_GetPriorityGrouping>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fd5e 	bl	8006620 <NVIC_EncodePriority>
 8006b64:	4603      	mov	r3, r0
 8006b66:	4619      	mov	r1, r3
 8006b68:	2028      	movs	r0, #40	; 0x28
 8006b6a:	f7ff fd2f 	bl	80065cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006b6e:	2028      	movs	r0, #40	; 0x28
 8006b70:	f7ff fd0e 	bl	8006590 <__NVIC_EnableIRQ>

}
 8006b74:	bf00      	nop
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	e009      	b.n	8006b90 <MX_GPIO_Init+0x3a0>
 8006b7c:	48000800 	.word	0x48000800
 8006b80:	48000400 	.word	0x48000400
 8006b84:	0f000003 	.word	0x0f000003
 8006b88:	f0000003 	.word	0xf0000003
 8006b8c:	48001400 	.word	0x48001400
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop

08006b94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006ba0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d013      	beq.n	8006bd4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006bac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bb0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006bb4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006bbc:	e000      	b.n	8006bc0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006bbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006bc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f9      	beq.n	8006bbe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006bca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006bd4:	687b      	ldr	r3, [r7, #4]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
  int i=0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e009      	b.n	8006c0c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	60ba      	str	r2, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff ffc7 	bl	8006b94 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	dbf1      	blt.n	8006bf8 <_write+0x16>
  return len;
 8006c14:	687b      	ldr	r3, [r7, #4]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c24:	f000 feb3 	bl	800798e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c28:	f000 f86a 	bl	8006d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c2c:	f7ff fde0 	bl	80067f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006c30:	f7ff fc66 	bl	8006500 <MX_DMA_Init>
  MX_DAC1_Init();
 8006c34:	f7ff fb16 	bl	8006264 <MX_DAC1_Init>
  MX_DAC2_Init();
 8006c38:	f7ff fb5e 	bl	80062f8 <MX_DAC2_Init>
  MX_ADC1_Init();
 8006c3c:	f7ff f9d4 	bl	8005fe8 <MX_ADC1_Init>
  MX_COMP1_Init();
 8006c40:	f7ff fab6 	bl	80061b0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8006c44:	f000 fba8 	bl	8007398 <MX_TIM2_Init>
  MX_SPI3_Init();
 8006c48:	f000 f906 	bl	8006e58 <MX_SPI3_Init>
  MX_RNG_Init();
 8006c4c:	f000 f8f6 	bl	8006e3c <MX_RNG_Init>
  MX_TIM1_Init();
 8006c50:	f000 fb32 	bl	80072b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8006c54:	f000 fc88 	bl	8007568 <MX_TIM8_Init>
  MX_TIM16_Init();
 8006c58:	f000 fd40 	bl	80076dc <MX_TIM16_Init>
  MX_TIM15_Init();
 8006c5c:	f000 fcec 	bl	8007638 <MX_TIM15_Init>
  MX_TIM5_Init();
 8006c60:	f000 fc34 	bl	80074cc <MX_TIM5_Init>
  MX_TIM3_Init();
 8006c64:	f000 fbe4 	bl	8007430 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  DT_InitRegister();
 8006c68:	f7fe f99c 	bl	8004fa4 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8006c6c:	f7fe fe38 	bl	80058e0 <SM_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7fe fc0b 	bl	800548c <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8006c76:	2000      	movs	r0, #0
 8006c78:	f7fe fc62 	bl	8005540 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006c7c:	2110      	movs	r1, #16
 8006c7e:	481b      	ldr	r0, [pc, #108]	; (8006cec <main+0xcc>)
 8006c80:	f002 fb89 	bl	8009396 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <main+0xd0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <main+0xd0>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8006c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c94:	f7fe fb10 	bl	80052b8 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8006c98:	2201      	movs	r2, #1
 8006c9a:	2108      	movs	r1, #8
 8006c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ca0:	f003 fbc4 	bl	800a42c <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8006ca4:	2059      	movs	r0, #89	; 0x59
 8006ca6:	f7fe ffc1 	bl	8005c2c <VPP_ApplyProfileToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006caa:	2200      	movs	r2, #0
 8006cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cb0:	4810      	ldr	r0, [pc, #64]	; (8006cf4 <main+0xd4>)
 8006cb2:	f003 fbbb 	bl	800a42c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cbc:	480d      	ldr	r0, [pc, #52]	; (8006cf4 <main+0xd4>)
 8006cbe:	f003 fbb5 	bl	800a42c <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8006cc2:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <main+0xd8>)
 8006cc4:	f004 fcac 	bl	800b620 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <main+0xdc>)
 8006cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cce:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <main+0xdc>)
 8006cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8006cd8:	f7fa f824 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8006cdc:	f7fa f830 	bl	8000d40 <DM_PostInit>

  IM_Init();
 8006ce0:	f7fd ffae 	bl	8004c40 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8006ce4:	f7fc ff4a 	bl	8003b7c <EM_ProcessEvent>
 8006ce8:	e7fc      	b.n	8006ce4 <main+0xc4>
 8006cea:	bf00      	nop
 8006cec:	200025f8 	.word	0x200025f8
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	48000800 	.word	0x48000800
 8006cf8:	20002860 	.word	0x20002860
 8006cfc:	40001000 	.word	0x40001000

08006d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0a8      	sub	sp, #160	; 0xa0
 8006d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006d0a:	2238      	movs	r2, #56	; 0x38
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f006 ff6c 	bl	800dbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d24:	463b      	mov	r3, r7
 8006d26:	2254      	movs	r2, #84	; 0x54
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f006 ff5e 	bl	800dbec <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8006d30:	2000      	movs	r0, #0
 8006d32:	f003 fb93 	bl	800a45c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006d36:	2322      	movs	r3, #34	; 0x22
 8006d38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d40:	2340      	movs	r3, #64	; 0x40
 8006d42:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006d50:	2302      	movs	r3, #2
 8006d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8006d56:	2302      	movs	r3, #2
 8006d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8006d5c:	232a      	movs	r3, #42	; 0x2a
 8006d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8006d62:	231e      	movs	r3, #30
 8006d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8006d68:	2304      	movs	r3, #4
 8006d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f003 fc13 	bl	800a5a4 <HAL_RCC_OscConfig>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8006d84:	f000 f82a 	bl	8006ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d88:	230f      	movs	r3, #15
 8006d8a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d90:	2300      	movs	r3, #0
 8006d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d94:	2300      	movs	r3, #0
 8006d96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8006d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006da0:	2108      	movs	r1, #8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f003 ff16 	bl	800abd4 <HAL_RCC_ClockConfig>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006dae:	f000 f815 	bl	8006ddc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8006db2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006db6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8006db8:	2300      	movs	r3, #0
 8006dba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8006dbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f004 f8f5 	bl	800afb4 <HAL_RCCEx_PeriphCLKConfig>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006dd0:	f000 f804 	bl	8006ddc <Error_Handler>
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	37a0      	adds	r7, #160	; 0xa0
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f043 0204 	orr.w	r2, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <LL_AHB2_GRP1_EnableClock>:
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e14:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	40021000 	.word	0x40021000

08006e3c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8006e40:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006e44:	f7ff ffe2 	bl	8006e0c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8006e48:	4802      	ldr	r0, [pc, #8]	; (8006e54 <MX_RNG_Init+0x18>)
 8006e4a:	f7ff ffce 	bl	8006dea <LL_RNG_Enable>

}
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	50060800 	.word	0x50060800

08006e58 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <MX_SPI3_Init+0x78>)
 8006e60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006e62:	4b1a      	ldr	r3, [pc, #104]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e70:	4b16      	ldr	r3, [pc, #88]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006e76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e78:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e8e:	2210      	movs	r2, #16
 8006e90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006eb6:	4805      	ldr	r0, [pc, #20]	; (8006ecc <MX_SPI3_Init+0x74>)
 8006eb8:	f004 fac8 	bl	800b44c <HAL_SPI_Init>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006ec2:	f7ff ff8b 	bl	8006ddc <Error_Handler>
  }

}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200026cc 	.word	0x200026cc
 8006ed0:	40003c00 	.word	0x40003c00

08006ed4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006edc:	f107 0314 	add.w	r3, r7, #20
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	605a      	str	r2, [r3, #4]
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	60da      	str	r2, [r3, #12]
 8006eea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_SPI_MspInit+0x7c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d128      	bne.n	8006f48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efa:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f00:	6593      	str	r3, [r2, #88]	; 0x58
 8006f02:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f12:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006f14:	f043 0304 	orr.w	r3, r3, #4
 8006f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <HAL_SPI_MspInit+0x80>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006f26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f34:	2300      	movs	r3, #0
 8006f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f38:	2306      	movs	r3, #6
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4619      	mov	r1, r3
 8006f42:	4805      	ldr	r0, [pc, #20]	; (8006f58 <HAL_SPI_MspInit+0x84>)
 8006f44:	f003 f8f0 	bl	800a128 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40003c00 	.word	0x40003c00
 8006f54:	40021000 	.word	0x40021000
 8006f58:	48000800 	.word	0x48000800

08006f5c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f6a:	6093      	str	r3, [r2, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40007000 	.word	0x40007000

08006f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f82:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <HAL_MspInit+0x44>)
 8006f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f86:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <HAL_MspInit+0x44>)
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <HAL_MspInit+0x44>)
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <HAL_MspInit+0x44>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	4a08      	ldr	r2, [pc, #32]	; (8006fc0 <HAL_MspInit+0x44>)
 8006fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <HAL_MspInit+0x44>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8006fb2:	f7ff ffd3 	bl	8006f5c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40021000 	.word	0x40021000

08006fc4 <LL_EXTI_IsActiveFlag_0_31>:
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006fce:	695a      	ldr	r2, [r3, #20]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d101      	bne.n	8006fde <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40010400 	.word	0x40010400

08006ff0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006ff8:	4a04      	ldr	r2, [pc, #16]	; (800700c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6153      	str	r3, [r2, #20]
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010400 	.word	0x40010400

08007010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007022:	e7fe      	b.n	8007022 <HardFault_Handler+0x4>

08007024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007028:	e7fe      	b.n	8007028 <MemManage_Handler+0x4>

0800702a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800702a:	b480      	push	{r7}
 800702c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800702e:	e7fe      	b.n	800702e <BusFault_Handler+0x4>

08007030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007034:	e7fe      	b.n	8007034 <UsageFault_Handler+0x4>

08007036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007036:	b480      	push	{r7}
 8007038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007048:	bf00      	nop
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007052:	b480      	push	{r7}
 8007054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007056:	bf00      	nop
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007064:	f000 fce6 	bl	8007a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007068:	bf00      	nop
 800706a:	bd80      	pop	{r7, pc}

0800706c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007070:	f7fd fe9e 	bl	8004db0 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007074:	2001      	movs	r0, #1
 8007076:	f7ff ffa5 	bl	8006fc4 <LL_EXTI_IsActiveFlag_0_31>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007080:	2001      	movs	r0, #1
 8007082:	f7ff ffb5 	bl	8006ff0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}

0800708a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 800708e:	f7fd feb5 	bl	8004dfc <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007092:	2002      	movs	r0, #2
 8007094:	f7ff ff96 	bl	8006fc4 <LL_EXTI_IsActiveFlag_0_31>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800709e:	2002      	movs	r0, #2
 80070a0:	f7ff ffa6 	bl	8006ff0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80070ac:	f7fd fecc 	bl	8004e48 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80070b0:	2004      	movs	r0, #4
 80070b2:	f7ff ff87 	bl	8006fc4 <LL_EXTI_IsActiveFlag_0_31>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80070bc:	2004      	movs	r0, #4
 80070be:	f7ff ff97 	bl	8006ff0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80070cc:	4802      	ldr	r0, [pc, #8]	; (80070d8 <DMA1_Channel1_IRQHandler+0x10>)
 80070ce:	f002 fedb 	bl	8009e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20002560 	.word	0x20002560

080070dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80070e0:	4802      	ldr	r0, [pc, #8]	; (80070ec <DMA1_Channel2_IRQHandler+0x10>)
 80070e2:	f002 fed1 	bl	8009e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80070e6:	bf00      	nop
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2000260c 	.word	0x2000260c

080070f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80070f4:	4802      	ldr	r0, [pc, #8]	; (8007100 <DMA1_Channel3_IRQHandler+0x10>)
 80070f6:	f002 fec7 	bl	8009e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2000266c 	.word	0x2000266c

08007104 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007108:	f7f9 fe38 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 800710c:	f7fd fec2 	bl	8004e94 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007110:	4803      	ldr	r0, [pc, #12]	; (8007120 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007112:	f004 fbe6 	bl	800b8e2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007116:	4803      	ldr	r0, [pc, #12]	; (8007124 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007118:	f004 fbe3 	bl	800b8e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800711c:	bf00      	nop
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20002860 	.word	0x20002860
 8007124:	2000277c 	.word	0x2000277c

08007128 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800712c:	4802      	ldr	r0, [pc, #8]	; (8007138 <TIM3_IRQHandler+0x10>)
 800712e:	f004 fbd8 	bl	800b8e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20002814 	.word	0x20002814

0800713c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007140:	f7fd fde6 	bl	8004d10 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007144:	f7fd fe0c 	bl	8004d60 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007148:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800714c:	f7ff ff3a 	bl	8006fc4 <LL_EXTI_IsActiveFlag_0_31>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007156:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800715a:	f7ff ff49 	bl	8006ff0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800715e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007162:	f7ff ff2f 	bl	8006fc4 <LL_EXTI_IsActiveFlag_0_31>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800716c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007170:	f7ff ff3e 	bl	8006ff0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007174:	bf00      	nop
 8007176:	bd80      	pop	{r7, pc}

08007178 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 800717c:	f7fd fd70 	bl	8004c60 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007180:	4802      	ldr	r0, [pc, #8]	; (800718c <TIM5_IRQHandler+0x14>)
 8007182:	f004 fbae 	bl	800b8e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200027c8 	.word	0x200027c8

08007190 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e00a      	b.n	80071b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80071a2:	f3af 8000 	nop.w
 80071a6:	4601      	mov	r1, r0
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	60ba      	str	r2, [r7, #8]
 80071ae:	b2ca      	uxtb	r2, r1
 80071b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	3301      	adds	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	dbf0      	blt.n	80071a2 <_read+0x12>
	}

return len;
 80071c0:	687b      	ldr	r3, [r7, #4]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
	return -1;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071f2:	605a      	str	r2, [r3, #4]
	return 0;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <_isatty>:

int _isatty(int file)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
	return 1;
 800720a:	2301      	movs	r3, #1
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
	return 0;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <_sbrk+0x50>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <_sbrk+0x16>
		heap_end = &end;
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <_sbrk+0x50>)
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <_sbrk+0x54>)
 8007248:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <_sbrk+0x50>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <_sbrk+0x50>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4413      	add	r3, r2
 8007258:	466a      	mov	r2, sp
 800725a:	4293      	cmp	r3, r2
 800725c:	d907      	bls.n	800726e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800725e:	f006 fc9b 	bl	800db98 <__errno>
 8007262:	4602      	mov	r2, r0
 8007264:	230c      	movs	r3, #12
 8007266:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726c:	e006      	b.n	800727c <_sbrk+0x48>
	}

	heap_end += incr;
 800726e:	4b05      	ldr	r3, [pc, #20]	; (8007284 <_sbrk+0x50>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	4a03      	ldr	r2, [pc, #12]	; (8007284 <_sbrk+0x50>)
 8007278:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20001f0c 	.word	0x20001f0c
 8007288:	20002950 	.word	0x20002950

0800728c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <SystemInit+0x28>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	4a07      	ldr	r2, [pc, #28]	; (80072b4 <SystemInit+0x28>)
 8007298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800729c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <SystemInit+0x28>)
 80072a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072a6:	609a      	str	r2, [r3, #8]
#endif
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	e000ed00 	.word	0xe000ed00

080072b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b09a      	sub	sp, #104	; 0x68
 80072bc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80072be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80072c2:	2224      	movs	r2, #36	; 0x24
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f006 fc90 	bl	800dbec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	2234      	movs	r2, #52	; 0x34
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f006 fc84 	bl	800dbec <memset>

  htim1.Instance = TIM1;
 80072e4:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <MX_TIM1_Init+0xd8>)
 80072e6:	4a2b      	ldr	r2, [pc, #172]	; (8007394 <MX_TIM1_Init+0xdc>)
 80072e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <MX_TIM1_Init+0xd8>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80072f0:	4b27      	ldr	r3, [pc, #156]	; (8007390 <MX_TIM1_Init+0xd8>)
 80072f2:	2260      	movs	r2, #96	; 0x60
 80072f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80072f6:	4b26      	ldr	r3, [pc, #152]	; (8007390 <MX_TIM1_Init+0xd8>)
 80072f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072fe:	4b24      	ldr	r3, [pc, #144]	; (8007390 <MX_TIM1_Init+0xd8>)
 8007300:	2200      	movs	r2, #0
 8007302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007304:	4b22      	ldr	r3, [pc, #136]	; (8007390 <MX_TIM1_Init+0xd8>)
 8007306:	2200      	movs	r2, #0
 8007308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800730a:	4b21      	ldr	r3, [pc, #132]	; (8007390 <MX_TIM1_Init+0xd8>)
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007310:	2302      	movs	r3, #2
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007314:	2300      	movs	r3, #0
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007318:	2301      	movs	r3, #1
 800731a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800731c:	2300      	movs	r3, #0
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007324:	2300      	movs	r3, #0
 8007326:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007328:	2301      	movs	r3, #1
 800732a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800732c:	2300      	movs	r3, #0
 800732e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007338:	4619      	mov	r1, r3
 800733a:	4815      	ldr	r0, [pc, #84]	; (8007390 <MX_TIM1_Init+0xd8>)
 800733c:	f004 fa2b 	bl	800b796 <HAL_TIM_Encoder_Init>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007346:	f7ff fd49 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800734a:	2320      	movs	r3, #32
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800734e:	2300      	movs	r3, #0
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007352:	2300      	movs	r3, #0
 8007354:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800735a:	4619      	mov	r1, r3
 800735c:	480c      	ldr	r0, [pc, #48]	; (8007390 <MX_TIM1_Init+0xd8>)
 800735e:	f004 fea5 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007368:	f7ff fd38 	bl	8006ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800736c:	2300      	movs	r3, #0
 800736e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007370:	2300      	movs	r3, #0
 8007372:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4805      	ldr	r0, [pc, #20]	; (8007390 <MX_TIM1_Init+0xd8>)
 800737a:	f004 ff2d 	bl	800c1d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007384:	f7ff fd2a 	bl	8006ddc <Error_Handler>
  }

}
 8007388:	bf00      	nop
 800738a:	3768      	adds	r7, #104	; 0x68
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20002860 	.word	0x20002860
 8007394:	40012c00 	.word	0x40012c00

08007398 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	609a      	str	r2, [r3, #8]
 80073aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80073b6:	4b1d      	ldr	r3, [pc, #116]	; (800742c <MX_TIM2_Init+0x94>)
 80073b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80073bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80073be:	4b1b      	ldr	r3, [pc, #108]	; (800742c <MX_TIM2_Init+0x94>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073c4:	4b19      	ldr	r3, [pc, #100]	; (800742c <MX_TIM2_Init+0x94>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80073ca:	4b18      	ldr	r3, [pc, #96]	; (800742c <MX_TIM2_Init+0x94>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073d0:	4b16      	ldr	r3, [pc, #88]	; (800742c <MX_TIM2_Init+0x94>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <MX_TIM2_Init+0x94>)
 80073d8:	2280      	movs	r2, #128	; 0x80
 80073da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80073dc:	4813      	ldr	r0, [pc, #76]	; (800742c <MX_TIM2_Init+0x94>)
 80073de:	f004 f8c7 	bl	800b570 <HAL_TIM_Base_Init>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80073e8:	f7ff fcf8 	bl	8006ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80073f2:	f107 0310 	add.w	r3, r7, #16
 80073f6:	4619      	mov	r1, r3
 80073f8:	480c      	ldr	r0, [pc, #48]	; (800742c <MX_TIM2_Init+0x94>)
 80073fa:	f004 fbf1 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007404:	f7ff fcea 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007408:	2320      	movs	r3, #32
 800740a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4805      	ldr	r0, [pc, #20]	; (800742c <MX_TIM2_Init+0x94>)
 8007416:	f004 fe49 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007420:	f7ff fcdc 	bl	8006ddc <Error_Handler>
  }

}
 8007424:	bf00      	nop
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200028ac 	.word	0x200028ac

08007430 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007436:	f107 0310 	add.w	r3, r7, #16
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	605a      	str	r2, [r3, #4]
 8007440:	609a      	str	r2, [r3, #8]
 8007442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007450:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <MX_TIM3_Init+0x98>)
 8007452:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <MX_TIM3_Init+0x94>)
 800745c:	2210      	movs	r2, #16
 800745e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007460:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007462:	2201      	movs	r2, #1
 8007464:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007466:	4b17      	ldr	r3, [pc, #92]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800746c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007474:	4813      	ldr	r0, [pc, #76]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007476:	f004 f87b 	bl	800b570 <HAL_TIM_Base_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007480:	f7ff fcac 	bl	8006ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800748a:	f107 0310 	add.w	r3, r7, #16
 800748e:	4619      	mov	r1, r3
 8007490:	480c      	ldr	r0, [pc, #48]	; (80074c4 <MX_TIM3_Init+0x94>)
 8007492:	f004 fba5 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800749c:	f7ff fc9e 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074a0:	2300      	movs	r3, #0
 80074a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80074a8:	1d3b      	adds	r3, r7, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <MX_TIM3_Init+0x94>)
 80074ae:	f004 fdfd 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80074b8:	f7ff fc90 	bl	8006ddc <Error_Handler>
  }

}
 80074bc:	bf00      	nop
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20002814 	.word	0x20002814
 80074c8:	40000400 	.word	0x40000400

080074cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	605a      	str	r2, [r3, #4]
 80074dc:	609a      	str	r2, [r3, #8]
 80074de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80074ea:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <MX_TIM5_Init+0x94>)
 80074ec:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <MX_TIM5_Init+0x98>)
 80074ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80074f0:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <MX_TIM5_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <MX_TIM5_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80074fc:	4b18      	ldr	r3, [pc, #96]	; (8007560 <MX_TIM5_Init+0x94>)
 80074fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007502:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <MX_TIM5_Init+0x94>)
 8007506:	2200      	movs	r2, #0
 8007508:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800750a:	4b15      	ldr	r3, [pc, #84]	; (8007560 <MX_TIM5_Init+0x94>)
 800750c:	2280      	movs	r2, #128	; 0x80
 800750e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007510:	4813      	ldr	r0, [pc, #76]	; (8007560 <MX_TIM5_Init+0x94>)
 8007512:	f004 f82d 	bl	800b570 <HAL_TIM_Base_Init>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800751c:	f7ff fc5e 	bl	8006ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007526:	f107 0310 	add.w	r3, r7, #16
 800752a:	4619      	mov	r1, r3
 800752c:	480c      	ldr	r0, [pc, #48]	; (8007560 <MX_TIM5_Init+0x94>)
 800752e:	f004 fb57 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007538:	f7ff fc50 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800753c:	2300      	movs	r3, #0
 800753e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4805      	ldr	r0, [pc, #20]	; (8007560 <MX_TIM5_Init+0x94>)
 800754a:	f004 fdaf 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007554:	f7ff fc42 	bl	8006ddc <Error_Handler>
  }

}
 8007558:	bf00      	nop
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200027c8 	.word	0x200027c8
 8007564:	40000c00 	.word	0x40000c00

08007568 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b094      	sub	sp, #80	; 0x50
 800756c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800756e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	609a      	str	r2, [r3, #8]
 800757a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800757c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	605a      	str	r2, [r3, #4]
 8007586:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007588:	463b      	mov	r3, r7
 800758a:	2234      	movs	r2, #52	; 0x34
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f006 fb2c 	bl	800dbec <memset>

  htim8.Instance = TIM8;
 8007594:	4b26      	ldr	r3, [pc, #152]	; (8007630 <MX_TIM8_Init+0xc8>)
 8007596:	4a27      	ldr	r2, [pc, #156]	; (8007634 <MX_TIM8_Init+0xcc>)
 8007598:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800759a:	4b25      	ldr	r3, [pc, #148]	; (8007630 <MX_TIM8_Init+0xc8>)
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075a0:	4b23      	ldr	r3, [pc, #140]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80075a6:	4b22      	ldr	r3, [pc, #136]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075ac:	4b20      	ldr	r3, [pc, #128]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80075b2:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075b8:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075ba:	2280      	movs	r2, #128	; 0x80
 80075bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80075be:	481c      	ldr	r0, [pc, #112]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075c0:	f003 ffd6 	bl	800b570 <HAL_TIM_Base_Init>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80075ca:	f7ff fc07 	bl	8006ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80075d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075d8:	4619      	mov	r1, r3
 80075da:	4815      	ldr	r0, [pc, #84]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075dc:	f004 fb00 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80075e6:	f7ff fbf9 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80075ea:	2320      	movs	r3, #32
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80075f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075fa:	4619      	mov	r1, r3
 80075fc:	480c      	ldr	r0, [pc, #48]	; (8007630 <MX_TIM8_Init+0xc8>)
 80075fe:	f004 fd55 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007608:	f7ff fbe8 	bl	8006ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800760c:	2300      	movs	r3, #0
 800760e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007610:	2300      	movs	r3, #0
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007614:	463b      	mov	r3, r7
 8007616:	4619      	mov	r1, r3
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <MX_TIM8_Init+0xc8>)
 800761a:	f004 fddd 	bl	800c1d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007624:	f7ff fbda 	bl	8006ddc <Error_Handler>
  }

}
 8007628:	bf00      	nop
 800762a:	3750      	adds	r7, #80	; 0x50
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20002730 	.word	0x20002730
 8007634:	40013400 	.word	0x40013400

08007638 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800763e:	f107 0310 	add.w	r3, r7, #16
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	605a      	str	r2, [r3, #4]
 8007648:	609a      	str	r2, [r3, #8]
 800764a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	605a      	str	r2, [r3, #4]
 8007654:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <MX_TIM15_Init+0x9c>)
 8007658:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <MX_TIM15_Init+0xa0>)
 800765a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <MX_TIM15_Init+0x9c>)
 800765e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007662:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <MX_TIM15_Init+0x9c>)
 8007666:	2200      	movs	r2, #0
 8007668:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800766a:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <MX_TIM15_Init+0x9c>)
 800766c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007670:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007672:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <MX_TIM15_Init+0x9c>)
 8007674:	2200      	movs	r2, #0
 8007676:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007678:	4b16      	ldr	r3, [pc, #88]	; (80076d4 <MX_TIM15_Init+0x9c>)
 800767a:	2200      	movs	r2, #0
 800767c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800767e:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <MX_TIM15_Init+0x9c>)
 8007680:	2200      	movs	r2, #0
 8007682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007684:	4813      	ldr	r0, [pc, #76]	; (80076d4 <MX_TIM15_Init+0x9c>)
 8007686:	f003 ff73 	bl	800b570 <HAL_TIM_Base_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007690:	f7ff fba4 	bl	8006ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007698:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800769a:	f107 0310 	add.w	r3, r7, #16
 800769e:	4619      	mov	r1, r3
 80076a0:	480c      	ldr	r0, [pc, #48]	; (80076d4 <MX_TIM15_Init+0x9c>)
 80076a2:	f004 fa9d 	bl	800bbe0 <HAL_TIM_ConfigClockSource>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80076ac:	f7ff fb96 	bl	8006ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076b0:	2300      	movs	r3, #0
 80076b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	4619      	mov	r1, r3
 80076bc:	4805      	ldr	r0, [pc, #20]	; (80076d4 <MX_TIM15_Init+0x9c>)
 80076be:	f004 fcf5 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80076c8:	f7ff fb88 	bl	8006ddc <Error_Handler>
  }

}
 80076cc:	bf00      	nop
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	2000277c 	.word	0x2000277c
 80076d8:	40014000 	.word	0x40014000

080076dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80076e0:	4b10      	ldr	r3, [pc, #64]	; (8007724 <MX_TIM16_Init+0x48>)
 80076e2:	4a11      	ldr	r2, [pc, #68]	; (8007728 <MX_TIM16_Init+0x4c>)
 80076e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <MX_TIM16_Init+0x48>)
 80076e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <MX_TIM16_Init+0x48>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80076f4:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <MX_TIM16_Init+0x48>)
 80076f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076fc:	4b09      	ldr	r3, [pc, #36]	; (8007724 <MX_TIM16_Init+0x48>)
 80076fe:	2200      	movs	r2, #0
 8007700:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007702:	4b08      	ldr	r3, [pc, #32]	; (8007724 <MX_TIM16_Init+0x48>)
 8007704:	2200      	movs	r2, #0
 8007706:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <MX_TIM16_Init+0x48>)
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800770e:	4805      	ldr	r0, [pc, #20]	; (8007724 <MX_TIM16_Init+0x48>)
 8007710:	f003 ff2e 	bl	800b570 <HAL_TIM_Base_Init>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800771a:	f7ff fb5f 	bl	8006ddc <Error_Handler>
  }

}
 800771e:	bf00      	nop
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200028f8 	.word	0x200028f8
 8007728:	40014400 	.word	0x40014400

0800772c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	; 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007734:	f107 0314 	add.w	r3, r7, #20
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	609a      	str	r2, [r3, #8]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d12f      	bne.n	80077ae <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 8007750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 8007754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007758:	6613      	str	r3, [r2, #96]	; 0x60
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 800775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	4a14      	ldr	r2, [pc, #80]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 800776c:	f043 0304 	orr.w	r3, r3, #4
 8007770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <HAL_TIM_Encoder_MspInit+0x90>)
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800777e:	2303      	movs	r3, #3
 8007780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007782:	2302      	movs	r3, #2
 8007784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800778a:	2300      	movs	r3, #0
 800778c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800778e:	2302      	movs	r3, #2
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800779a:	f002 fcc5 	bl	800a128 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800779e:	2200      	movs	r2, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	2018      	movs	r0, #24
 80077a4:	f001 fda1 	bl	80092ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80077a8:	2018      	movs	r0, #24
 80077aa:	f001 fdb8 	bl	800931e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80077ae:	bf00      	nop
 80077b0:	3728      	adds	r7, #40	; 0x28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40021000 	.word	0x40021000
 80077c0:	48000800 	.word	0x48000800

080077c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	605a      	str	r2, [r3, #4]
 80077d6:	609a      	str	r2, [r3, #8]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d10c      	bne.n	8007800 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077e6:	4b4f      	ldr	r3, [pc, #316]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ea:	4a4e      	ldr	r2, [pc, #312]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	6593      	str	r3, [r2, #88]	; 0x58
 80077f2:	4b4c      	ldr	r3, [pc, #304]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80077fe:	e08d      	b.n	800791c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a48      	ldr	r2, [pc, #288]	; (8007928 <HAL_TIM_Base_MspInit+0x164>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d114      	bne.n	8007834 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800780a:	4b46      	ldr	r3, [pc, #280]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 800780c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780e:	4a45      	ldr	r2, [pc, #276]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007810:	f043 0302 	orr.w	r3, r3, #2
 8007814:	6593      	str	r3, [r2, #88]	; 0x58
 8007816:	4b43      	ldr	r3, [pc, #268]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	201d      	movs	r0, #29
 8007828:	f001 fd5f 	bl	80092ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800782c:	201d      	movs	r0, #29
 800782e:	f001 fd76 	bl	800931e <HAL_NVIC_EnableIRQ>
}
 8007832:	e073      	b.n	800791c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a3c      	ldr	r2, [pc, #240]	; (800792c <HAL_TIM_Base_MspInit+0x168>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d131      	bne.n	80078a2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800783e:	4b39      	ldr	r3, [pc, #228]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	4a38      	ldr	r2, [pc, #224]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	6593      	str	r3, [r2, #88]	; 0x58
 800784a:	4b36      	ldr	r3, [pc, #216]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007856:	4b33      	ldr	r3, [pc, #204]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 800785c:	f043 0301 	orr.w	r3, r3, #1
 8007860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007862:	4b30      	ldr	r3, [pc, #192]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800786e:	2301      	movs	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007872:	2302      	movs	r3, #2
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007876:	2300      	movs	r3, #0
 8007878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800787a:	2300      	movs	r3, #0
 800787c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800787e:	2302      	movs	r3, #2
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007886:	4619      	mov	r1, r3
 8007888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800788c:	f002 fc4c 	bl	800a128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007890:	2200      	movs	r2, #0
 8007892:	2102      	movs	r1, #2
 8007894:	2032      	movs	r0, #50	; 0x32
 8007896:	f001 fd28 	bl	80092ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800789a:	2032      	movs	r0, #50	; 0x32
 800789c:	f001 fd3f 	bl	800931e <HAL_NVIC_EnableIRQ>
}
 80078a0:	e03c      	b.n	800791c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a22      	ldr	r2, [pc, #136]	; (8007930 <HAL_TIM_Base_MspInit+0x16c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10c      	bne.n	80078c6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80078ac:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b0:	4a1c      	ldr	r2, [pc, #112]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078b6:	6613      	str	r3, [r2, #96]	; 0x60
 80078b8:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	693b      	ldr	r3, [r7, #16]
}
 80078c4:	e02a      	b.n	800791c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <HAL_TIM_Base_MspInit+0x170>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d114      	bne.n	80078fa <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80078d0:	4b14      	ldr	r3, [pc, #80]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d4:	4a13      	ldr	r2, [pc, #76]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078da:	6613      	str	r3, [r2, #96]	; 0x60
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	2018      	movs	r0, #24
 80078ee:	f001 fcfc 	bl	80092ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80078f2:	2018      	movs	r0, #24
 80078f4:	f001 fd13 	bl	800931e <HAL_NVIC_EnableIRQ>
}
 80078f8:	e010      	b.n	800791c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a0e      	ldr	r2, [pc, #56]	; (8007938 <HAL_TIM_Base_MspInit+0x174>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10b      	bne.n	800791c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007908:	4a06      	ldr	r2, [pc, #24]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 800790a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790e:	6613      	str	r3, [r2, #96]	; 0x60
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <HAL_TIM_Base_MspInit+0x160>)
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	68bb      	ldr	r3, [r7, #8]
}
 800791c:	bf00      	nop
 800791e:	3738      	adds	r7, #56	; 0x38
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40021000 	.word	0x40021000
 8007928:	40000400 	.word	0x40000400
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400

0800793c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800793c:	480d      	ldr	r0, [pc, #52]	; (8007974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800793e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007940:	480d      	ldr	r0, [pc, #52]	; (8007978 <LoopForever+0x6>)
  ldr r1, =_edata
 8007942:	490e      	ldr	r1, [pc, #56]	; (800797c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007944:	4a0e      	ldr	r2, [pc, #56]	; (8007980 <LoopForever+0xe>)
  movs r3, #0
 8007946:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007948:	e002      	b.n	8007950 <LoopCopyDataInit>

0800794a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800794a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800794c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800794e:	3304      	adds	r3, #4

08007950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007954:	d3f9      	bcc.n	800794a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007956:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007958:	4c0b      	ldr	r4, [pc, #44]	; (8007988 <LoopForever+0x16>)
  movs r3, #0
 800795a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800795c:	e001      	b.n	8007962 <LoopFillZerobss>

0800795e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800795e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007960:	3204      	adds	r2, #4

08007962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007964:	d3fb      	bcc.n	800795e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007966:	f7ff fc91 	bl	800728c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800796a:	f006 f91b 	bl	800dba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800796e:	f7ff f957 	bl	8006c20 <main>

08007972 <LoopForever>:

LoopForever:
    b LoopForever
 8007972:	e7fe      	b.n	8007972 <LoopForever>
  ldr   r0, =_estack
 8007974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800797c:	20001e80 	.word	0x20001e80
  ldr r2, =_sidata
 8007980:	08012ed8 	.word	0x08012ed8
  ldr r2, =_sbss
 8007984:	20001e80 	.word	0x20001e80
  ldr r4, =_ebss
 8007988:	2000294c 	.word	0x2000294c

0800798c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800798c:	e7fe      	b.n	800798c <ADC1_2_IRQHandler>

0800798e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007998:	2003      	movs	r0, #3
 800799a:	f001 fc9b 	bl	80092d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800799e:	2000      	movs	r0, #0
 80079a0:	f000 f80e 	bl	80079c0 <HAL_InitTick>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	71fb      	strb	r3, [r7, #7]
 80079ae:	e001      	b.n	80079b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80079b0:	f7ff fae4 	bl	8006f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80079b4:	79fb      	ldrb	r3, [r7, #7]

}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80079cc:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <HAL_InitTick+0x68>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d022      	beq.n	8007a1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <HAL_InitTick+0x6c>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <HAL_InitTick+0x68>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fca6 	bl	800933a <HAL_SYSTICK_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10f      	bne.n	8007a14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b0f      	cmp	r3, #15
 80079f8:	d809      	bhi.n	8007a0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079fa:	2200      	movs	r2, #0
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a02:	f001 fc72 	bl	80092ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007a06:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <HAL_InitTick+0x70>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	e007      	b.n	8007a1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	e004      	b.n	8007a1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
 8007a18:	e001      	b.n	8007a1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000cb0 	.word	0x20000cb0
 8007a2c:	20000ca8 	.word	0x20000ca8
 8007a30:	20000cac 	.word	0x20000cac

08007a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_IncTick+0x1c>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <HAL_IncTick+0x20>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4413      	add	r3, r2
 8007a42:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <HAL_IncTick+0x1c>)
 8007a44:	6013      	str	r3, [r2, #0]
}
 8007a46:	bf00      	nop
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20002944 	.word	0x20002944
 8007a54:	20000cb0 	.word	0x20000cb0

08007a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a5c:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <HAL_GetTick+0x14>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	20002944 	.word	0x20002944

08007a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a78:	f7ff ffee 	bl	8007a58 <HAL_GetTick>
 8007a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d004      	beq.n	8007a94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <HAL_Delay+0x40>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a94:	bf00      	nop
 8007a96:	f7ff ffdf 	bl	8007a58 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d8f7      	bhi.n	8007a96 <HAL_Delay+0x26>
  {
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000cb0 	.word	0x20000cb0

08007ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	609a      	str	r2, [r3, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	609a      	str	r2, [r3, #8]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007b1c:	b490      	push	{r4, r7}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3360      	adds	r3, #96	; 0x60
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <LL_ADC_SetOffset+0x40>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b4e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc90      	pop	{r4, r7}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	03fff000 	.word	0x03fff000

08007b60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007b60:	b490      	push	{r4, r7}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3360      	adds	r3, #96	; 0x60
 8007b6e:	461a      	mov	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc90      	pop	{r4, r7}
 8007b86:	4770      	bx	lr

08007b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007b88:	b490      	push	{r4, r7}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3360      	adds	r3, #96	; 0x60
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc90      	pop	{r4, r7}
 8007bb6:	4770      	bx	lr

08007bb8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007bb8:	b490      	push	{r4, r7}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3360      	adds	r3, #96	; 0x60
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc90      	pop	{r4, r7}
 8007be6:	4770      	bx	lr

08007be8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007be8:	b490      	push	{r4, r7}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3360      	adds	r3, #96	; 0x60
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc90      	pop	{r4, r7}
 8007c16:	4770      	bx	lr

08007c18 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	615a      	str	r2, [r3, #20]
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007c3e:	b490      	push	{r4, r7}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3330      	adds	r3, #48	; 0x30
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	f003 030c 	and.w	r3, r3, #12
 8007c5a:	4413      	add	r3, r2
 8007c5c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	211f      	movs	r1, #31
 8007c68:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	401a      	ands	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	0e9b      	lsrs	r3, r3, #26
 8007c74:	f003 011f 	and.w	r1, r3, #31
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	4313      	orrs	r3, r2
 8007c84:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc90      	pop	{r4, r7}
 8007c8e:	4770      	bx	lr

08007c90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007c90:	b490      	push	{r4, r7}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3314      	adds	r3, #20
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0e5b      	lsrs	r3, r3, #25
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	4413      	add	r3, r2
 8007cae:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	0d1b      	lsrs	r3, r3, #20
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	2107      	movs	r1, #7
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	0d1b      	lsrs	r3, r3, #20
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc90      	pop	{r4, r7}
 8007cde:	4770      	bx	lr

08007ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	401a      	ands	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f003 0318 	and.w	r3, r3, #24
 8007d02:	4908      	ldr	r1, [pc, #32]	; (8007d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007d04:	40d9      	lsrs	r1, r3
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	400b      	ands	r3, r1
 8007d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007d16:	bf00      	nop
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	0007ffff 	.word	0x0007ffff

08007d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6093      	str	r3, [r2, #8]
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d60:	d101      	bne.n	8007d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db0:	d101      	bne.n	8007db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <LL_ADC_IsEnabled+0x18>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <LL_ADC_IsEnabled+0x1a>
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d101      	bne.n	8007e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d101      	bne.n	8007e28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b089      	sub	sp, #36	; 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1ad      	b.n	80081ae <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fe f939 	bl	80060d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ff67 	bl	8007d4c <LL_ADC_IsDeepPowerDownEnabled>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff ff4d 	bl	8007d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff ff82 	bl	8007d9c <LL_ADC_IsInternalRegulatorEnabled>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d113      	bne.n	8007ec6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ff66 	bl	8007d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007ea8:	4b9e      	ldr	r3, [pc, #632]	; (8008124 <HAL_ADC_Init+0x2ec>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	099b      	lsrs	r3, r3, #6
 8007eae:	4a9e      	ldr	r2, [pc, #632]	; (8008128 <HAL_ADC_Init+0x2f0>)
 8007eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb4:	099b      	lsrs	r3, r3, #6
 8007eb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007eb8:	e002      	b.n	8007ec0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f9      	bne.n	8007eba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff ff66 	bl	8007d9c <LL_ADC_IsInternalRegulatorEnabled>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	f043 0210 	orr.w	r2, r3, #16
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee6:	f043 0201 	orr.w	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff ff77 	bl	8007dea <LL_ADC_REG_IsConversionOngoing>
 8007efc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 8148 	bne.w	800819c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 8144 	bne.w	800819c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007f1c:	f043 0202 	orr.w	r2, r3, #2
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff ff4b 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d141      	bne.n	8007fb8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f3c:	d004      	beq.n	8007f48 <HAL_ADC_Init+0x110>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a7a      	ldr	r2, [pc, #488]	; (800812c <HAL_ADC_Init+0x2f4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10f      	bne.n	8007f68 <HAL_ADC_Init+0x130>
 8007f48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007f4c:	f7ff ff3a 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f50:	4604      	mov	r4, r0
 8007f52:	4876      	ldr	r0, [pc, #472]	; (800812c <HAL_ADC_Init+0x2f4>)
 8007f54:	f7ff ff36 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4323      	orrs	r3, r4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	e012      	b.n	8007f8e <HAL_ADC_Init+0x156>
 8007f68:	4871      	ldr	r0, [pc, #452]	; (8008130 <HAL_ADC_Init+0x2f8>)
 8007f6a:	f7ff ff2b 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4870      	ldr	r0, [pc, #448]	; (8008134 <HAL_ADC_Init+0x2fc>)
 8007f72:	f7ff ff27 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f76:	4603      	mov	r3, r0
 8007f78:	431c      	orrs	r4, r3
 8007f7a:	486f      	ldr	r0, [pc, #444]	; (8008138 <HAL_ADC_Init+0x300>)
 8007f7c:	f7ff ff22 	bl	8007dc4 <LL_ADC_IsEnabled>
 8007f80:	4603      	mov	r3, r0
 8007f82:	4323      	orrs	r3, r4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d012      	beq.n	8007fb8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f9a:	d004      	beq.n	8007fa6 <HAL_ADC_Init+0x16e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a62      	ldr	r2, [pc, #392]	; (800812c <HAL_ADC_Init+0x2f4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d101      	bne.n	8007faa <HAL_ADC_Init+0x172>
 8007fa6:	4a65      	ldr	r2, [pc, #404]	; (800813c <HAL_ADC_Init+0x304>)
 8007fa8:	e000      	b.n	8007fac <HAL_ADC_Init+0x174>
 8007faa:	4a65      	ldr	r2, [pc, #404]	; (8008140 <HAL_ADC_Init+0x308>)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7ff fd7e 	bl	8007ab4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7f5b      	ldrb	r3, [r3, #29]
 8007fbc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007fc2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007fc8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007fce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d106      	bne.n	8007ff4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	3b01      	subs	r3, #1
 8007fec:	045b      	lsls	r3, r3, #17
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4313      	orrs	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	4b4b      	ldr	r3, [pc, #300]	; (8008144 <HAL_ADC_Init+0x30c>)
 8008018:	4013      	ands	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	69b9      	ldr	r1, [r7, #24]
 8008020:	430b      	orrs	r3, r1
 8008022:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff fed3 	bl	8007dea <LL_ADC_REG_IsConversionOngoing>
 8008044:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fee0 	bl	8007e10 <LL_ADC_INJ_IsConversionOngoing>
 8008050:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d17f      	bne.n	8008158 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d17c      	bne.n	8008158 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008062:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800806a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800807a:	f023 0302 	bic.w	r3, r3, #2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	430b      	orrs	r3, r1
 8008086:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d017      	beq.n	80080c0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800809e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80080a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80080ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6911      	ldr	r1, [r2, #16]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80080be:	e013      	b.n	80080e8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80080e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d12a      	bne.n	8008148 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080fc:	f023 0304 	bic.w	r3, r3, #4
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008108:	4311      	orrs	r1, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800810e:	4311      	orrs	r1, r2
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008114:	430a      	orrs	r2, r1
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	611a      	str	r2, [r3, #16]
 8008122:	e019      	b.n	8008158 <HAL_ADC_Init+0x320>
 8008124:	20000ca8 	.word	0x20000ca8
 8008128:	053e2d63 	.word	0x053e2d63
 800812c:	50000100 	.word	0x50000100
 8008130:	50000400 	.word	0x50000400
 8008134:	50000500 	.word	0x50000500
 8008138:	50000600 	.word	0x50000600
 800813c:	50000300 	.word	0x50000300
 8008140:	50000700 	.word	0x50000700
 8008144:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691a      	ldr	r2, [r3, #16]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f023 010f 	bic.w	r1, r3, #15
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	1e5a      	subs	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
 8008178:	e007      	b.n	800818a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 020f 	bic.w	r2, r2, #15
 8008188:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	65da      	str	r2, [r3, #92]	; 0x5c
 800819a:	e007      	b.n	80081ac <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a0:	f043 0210 	orr.w	r2, r3, #16
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80081ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3724      	adds	r7, #36	; 0x24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}
 80081b6:	bf00      	nop

080081b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b0a6      	sub	sp, #152	; 0x98
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_ADC_ConfigChannel+0x22>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e38e      	b.n	80088f8 <HAL_ADC_ConfigChannel+0x740>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fdff 	bl	8007dea <LL_ADC_REG_IsConversionOngoing>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 836f 	bne.w	80088d2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	6859      	ldr	r1, [r3, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	f7ff fd1c 	bl	8007c3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fded 	bl	8007dea <LL_ADC_REG_IsConversionOngoing>
 8008210:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fdf9 	bl	8007e10 <LL_ADC_INJ_IsConversionOngoing>
 800821e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008226:	2b00      	cmp	r3, #0
 8008228:	f040 817b 	bne.w	8008522 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800822c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 8176 	bne.w	8008522 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800823e:	d10f      	bne.n	8008260 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	4619      	mov	r1, r3
 800824c:	f7ff fd20 	bl	8007c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff fcdd 	bl	8007c18 <LL_ADC_SetSamplingTimeCommonConfig>
 800825e:	e00e      	b.n	800827e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	461a      	mov	r2, r3
 800826e:	f7ff fd0f 	bl	8007c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2100      	movs	r1, #0
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff fccd 	bl	8007c18 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	695a      	ldr	r2, [r3, #20]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	08db      	lsrs	r3, r3, #3
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b04      	cmp	r3, #4
 800829e:	d022      	beq.n	80082e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6919      	ldr	r1, [r3, #16]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082b0:	f7ff fc34 	bl	8007b1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6919      	ldr	r1, [r3, #16]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f7ff fc79 	bl	8007bb8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6919      	ldr	r1, [r3, #16]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	7f1b      	ldrb	r3, [r3, #28]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d102      	bne.n	80082dc <HAL_ADC_ConfigChannel+0x124>
 80082d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082da:	e000      	b.n	80082de <HAL_ADC_ConfigChannel+0x126>
 80082dc:	2300      	movs	r3, #0
 80082de:	461a      	mov	r2, r3
 80082e0:	f7ff fc82 	bl	8007be8 <LL_ADC_SetOffsetSaturation>
 80082e4:	e11d      	b.n	8008522 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fc37 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <HAL_ADC_ConfigChannel+0x15a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fc2c 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 8008308:	4603      	mov	r3, r0
 800830a:	0e9b      	lsrs	r3, r3, #26
 800830c:	f003 021f 	and.w	r2, r3, #31
 8008310:	e012      	b.n	8008338 <HAL_ADC_ConfigChannel+0x180>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fc21 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 800831e:	4603      	mov	r3, r0
 8008320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008328:	fa93 f3a3 	rbit	r3, r3
 800832c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800832e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008330:	fab3 f383 	clz	r3, r3
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x198>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	0e9b      	lsrs	r3, r3, #26
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	e00a      	b.n	8008366 <HAL_ADC_ConfigChannel+0x1ae>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008358:	fa93 f3a3 	rbit	r3, r3
 800835c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800835e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008360:	fab3 f383 	clz	r3, r3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	429a      	cmp	r2, r3
 8008368:	d106      	bne.n	8008378 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fc08 	bl	8007b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2101      	movs	r1, #1
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fbee 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 8008384:	4603      	mov	r3, r0
 8008386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <HAL_ADC_ConfigChannel+0x1ec>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2101      	movs	r1, #1
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fbe3 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 800839a:	4603      	mov	r3, r0
 800839c:	0e9b      	lsrs	r3, r3, #26
 800839e:	f003 021f 	and.w	r2, r3, #31
 80083a2:	e010      	b.n	80083c6 <HAL_ADC_ConfigChannel+0x20e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2101      	movs	r1, #1
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff fbd8 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 80083b0:	4603      	mov	r3, r0
 80083b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b6:	fa93 f3a3 	rbit	r3, r3
 80083ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80083bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083be:	fab3 f383 	clz	r3, r3
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <HAL_ADC_ConfigChannel+0x226>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	0e9b      	lsrs	r3, r3, #26
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	e00a      	b.n	80083f4 <HAL_ADC_ConfigChannel+0x23c>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083e6:	fa93 f3a3 	rbit	r3, r3
 80083ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80083ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d106      	bne.n	8008406 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2101      	movs	r1, #1
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fbc1 	bl	8007b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2102      	movs	r1, #2
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fba7 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 8008412:	4603      	mov	r3, r0
 8008414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <HAL_ADC_ConfigChannel+0x27a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2102      	movs	r1, #2
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fb9c 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 8008428:	4603      	mov	r3, r0
 800842a:	0e9b      	lsrs	r3, r3, #26
 800842c:	f003 021f 	and.w	r2, r3, #31
 8008430:	e010      	b.n	8008454 <HAL_ADC_ConfigChannel+0x29c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2102      	movs	r1, #2
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff fb91 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 800843e:	4603      	mov	r3, r0
 8008440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008444:	fa93 f3a3 	rbit	r3, r3
 8008448:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800844a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800844c:	fab3 f383 	clz	r3, r3
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <HAL_ADC_ConfigChannel+0x2b4>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	0e9b      	lsrs	r3, r3, #26
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	e00a      	b.n	8008482 <HAL_ADC_ConfigChannel+0x2ca>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008474:	fa93 f3a3 	rbit	r3, r3
 8008478:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800847a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847c:	fab3 f383 	clz	r3, r3
 8008480:	b2db      	uxtb	r3, r3
 8008482:	429a      	cmp	r2, r3
 8008484:	d106      	bne.n	8008494 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	2102      	movs	r1, #2
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fb7a 	bl	8007b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2103      	movs	r1, #3
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fb60 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <HAL_ADC_ConfigChannel+0x308>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2103      	movs	r1, #3
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fb55 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 80084b6:	4603      	mov	r3, r0
 80084b8:	0e9b      	lsrs	r3, r3, #26
 80084ba:	f003 021f 	and.w	r2, r3, #31
 80084be:	e010      	b.n	80084e2 <HAL_ADC_ConfigChannel+0x32a>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2103      	movs	r1, #3
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fb4a 	bl	8007b60 <LL_ADC_GetOffsetChannel>
 80084cc:	4603      	mov	r3, r0
 80084ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d2:	fa93 f3a3 	rbit	r3, r3
 80084d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80084d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084da:	fab3 f383 	clz	r3, r3
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <HAL_ADC_ConfigChannel+0x342>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	0e9b      	lsrs	r3, r3, #26
 80084f4:	f003 031f 	and.w	r3, r3, #31
 80084f8:	e00a      	b.n	8008510 <HAL_ADC_ConfigChannel+0x358>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008502:	fa93 f3a3 	rbit	r3, r3
 8008506:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850a:	fab3 f383 	clz	r3, r3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	429a      	cmp	r2, r3
 8008512:	d106      	bne.n	8008522 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	2103      	movs	r1, #3
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fb33 	bl	8007b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff fc4c 	bl	8007dc4 <LL_ADC_IsEnabled>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 810c 	bne.w	800874c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	461a      	mov	r2, r3
 8008542:	f7ff fbcd 	bl	8007ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	4aaf      	ldr	r2, [pc, #700]	; (8008808 <HAL_ADC_ConfigChannel+0x650>)
 800854c:	4293      	cmp	r3, r2
 800854e:	f040 80fd 	bne.w	800874c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <HAL_ADC_ConfigChannel+0x3c2>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	0e9b      	lsrs	r3, r3, #26
 8008568:	3301      	adds	r3, #1
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2b09      	cmp	r3, #9
 8008570:	bf94      	ite	ls
 8008572:	2301      	movls	r3, #1
 8008574:	2300      	movhi	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	e012      	b.n	80085a0 <HAL_ADC_ConfigChannel+0x3e8>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008582:	fa93 f3a3 	rbit	r3, r3
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858a:	fab3 f383 	clz	r3, r3
 800858e:	b2db      	uxtb	r3, r3
 8008590:	3301      	adds	r3, #1
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	2b09      	cmp	r3, #9
 8008598:	bf94      	ite	ls
 800859a:	2301      	movls	r3, #1
 800859c:	2300      	movhi	r3, #0
 800859e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d064      	beq.n	800866e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d107      	bne.n	80085c0 <HAL_ADC_ConfigChannel+0x408>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	0e9b      	lsrs	r3, r3, #26
 80085b6:	3301      	adds	r3, #1
 80085b8:	069b      	lsls	r3, r3, #26
 80085ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80085be:	e00e      	b.n	80085de <HAL_ADC_ConfigChannel+0x426>
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	fa93 f3a3 	rbit	r3, r3
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	fab3 f383 	clz	r3, r3
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	3301      	adds	r3, #1
 80085d8:	069b      	lsls	r3, r3, #26
 80085da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <HAL_ADC_ConfigChannel+0x446>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	0e9b      	lsrs	r3, r3, #26
 80085f0:	3301      	adds	r3, #1
 80085f2:	f003 031f 	and.w	r3, r3, #31
 80085f6:	2101      	movs	r1, #1
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	e010      	b.n	8008620 <HAL_ADC_ConfigChannel+0x468>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	fa93 f3a3 	rbit	r3, r3
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	fab3 f383 	clz	r3, r3
 8008612:	b2db      	uxtb	r3, r3
 8008614:	3301      	adds	r3, #1
 8008616:	f003 031f 	and.w	r3, r3, #31
 800861a:	2101      	movs	r1, #1
 800861c:	fa01 f303 	lsl.w	r3, r1, r3
 8008620:	ea42 0103 	orr.w	r1, r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <HAL_ADC_ConfigChannel+0x48e>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	0e9b      	lsrs	r3, r3, #26
 8008636:	3301      	adds	r3, #1
 8008638:	f003 021f 	and.w	r2, r3, #31
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	051b      	lsls	r3, r3, #20
 8008644:	e011      	b.n	800866a <HAL_ADC_ConfigChannel+0x4b2>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	fa93 f3a3 	rbit	r3, r3
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	fab3 f383 	clz	r3, r3
 800865a:	b2db      	uxtb	r3, r3
 800865c:	3301      	adds	r3, #1
 800865e:	f003 021f 	and.w	r2, r3, #31
 8008662:	4613      	mov	r3, r2
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	4413      	add	r3, r2
 8008668:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800866a:	430b      	orrs	r3, r1
 800866c:	e069      	b.n	8008742 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008676:	2b00      	cmp	r3, #0
 8008678:	d107      	bne.n	800868a <HAL_ADC_ConfigChannel+0x4d2>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	0e9b      	lsrs	r3, r3, #26
 8008680:	3301      	adds	r3, #1
 8008682:	069b      	lsls	r3, r3, #26
 8008684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008688:	e00e      	b.n	80086a8 <HAL_ADC_ConfigChannel+0x4f0>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	fa93 f3a3 	rbit	r3, r3
 8008696:	61fb      	str	r3, [r7, #28]
  return result;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	fab3 f383 	clz	r3, r3
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	3301      	adds	r3, #1
 80086a2:	069b      	lsls	r3, r3, #26
 80086a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <HAL_ADC_ConfigChannel+0x510>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	0e9b      	lsrs	r3, r3, #26
 80086ba:	3301      	adds	r3, #1
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	2101      	movs	r1, #1
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	e010      	b.n	80086ea <HAL_ADC_ConfigChannel+0x532>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	fa93 f3a3 	rbit	r3, r3
 80086d4:	617b      	str	r3, [r7, #20]
  return result;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	fab3 f383 	clz	r3, r3
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	3301      	adds	r3, #1
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ea:	ea42 0103 	orr.w	r1, r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10d      	bne.n	8008716 <HAL_ADC_ConfigChannel+0x55e>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	0e9b      	lsrs	r3, r3, #26
 8008700:	3301      	adds	r3, #1
 8008702:	f003 021f 	and.w	r2, r3, #31
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	3b1e      	subs	r3, #30
 800870e:	051b      	lsls	r3, r3, #20
 8008710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008714:	e014      	b.n	8008740 <HAL_ADC_ConfigChannel+0x588>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	60fb      	str	r3, [r7, #12]
  return result;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	fab3 f383 	clz	r3, r3
 800872a:	b2db      	uxtb	r3, r3
 800872c:	3301      	adds	r3, #1
 800872e:	f003 021f 	and.w	r2, r3, #31
 8008732:	4613      	mov	r3, r2
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4413      	add	r3, r2
 8008738:	3b1e      	subs	r3, #30
 800873a:	051b      	lsls	r3, r3, #20
 800873c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008740:	430b      	orrs	r3, r1
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	6892      	ldr	r2, [r2, #8]
 8008746:	4619      	mov	r1, r3
 8008748:	f7ff faa2 	bl	8007c90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b2e      	ldr	r3, [pc, #184]	; (800880c <HAL_ADC_ConfigChannel+0x654>)
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80c9 	beq.w	80088ec <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008762:	d004      	beq.n	800876e <HAL_ADC_ConfigChannel+0x5b6>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a29      	ldr	r2, [pc, #164]	; (8008810 <HAL_ADC_ConfigChannel+0x658>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d101      	bne.n	8008772 <HAL_ADC_ConfigChannel+0x5ba>
 800876e:	4b29      	ldr	r3, [pc, #164]	; (8008814 <HAL_ADC_ConfigChannel+0x65c>)
 8008770:	e000      	b.n	8008774 <HAL_ADC_ConfigChannel+0x5bc>
 8008772:	4b29      	ldr	r3, [pc, #164]	; (8008818 <HAL_ADC_ConfigChannel+0x660>)
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff f9c3 	bl	8007b00 <LL_ADC_GetCommonPathInternalCh>
 800877a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a26      	ldr	r2, [pc, #152]	; (800881c <HAL_ADC_ConfigChannel+0x664>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_ADC_ConfigChannel+0x5da>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a24      	ldr	r2, [pc, #144]	; (8008820 <HAL_ADC_ConfigChannel+0x668>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d14e      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d148      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a6:	d005      	beq.n	80087b4 <HAL_ADC_ConfigChannel+0x5fc>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1d      	ldr	r2, [pc, #116]	; (8008824 <HAL_ADC_ConfigChannel+0x66c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f040 8099 	bne.w	80088e6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087bc:	d004      	beq.n	80087c8 <HAL_ADC_ConfigChannel+0x610>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a13      	ldr	r2, [pc, #76]	; (8008810 <HAL_ADC_ConfigChannel+0x658>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d101      	bne.n	80087cc <HAL_ADC_ConfigChannel+0x614>
 80087c8:	4a12      	ldr	r2, [pc, #72]	; (8008814 <HAL_ADC_ConfigChannel+0x65c>)
 80087ca:	e000      	b.n	80087ce <HAL_ADC_ConfigChannel+0x616>
 80087cc:	4a12      	ldr	r2, [pc, #72]	; (8008818 <HAL_ADC_ConfigChannel+0x660>)
 80087ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7ff f97e 	bl	8007ada <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80087de:	4b12      	ldr	r3, [pc, #72]	; (8008828 <HAL_ADC_ConfigChannel+0x670>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	099b      	lsrs	r3, r3, #6
 80087e4:	4a11      	ldr	r2, [pc, #68]	; (800882c <HAL_ADC_ConfigChannel+0x674>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	099a      	lsrs	r2, r3, #6
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80087f6:	e002      	b.n	80087fe <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1f9      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008804:	e06f      	b.n	80088e6 <HAL_ADC_ConfigChannel+0x72e>
 8008806:	bf00      	nop
 8008808:	407f0000 	.word	0x407f0000
 800880c:	80080000 	.word	0x80080000
 8008810:	50000100 	.word	0x50000100
 8008814:	50000300 	.word	0x50000300
 8008818:	50000700 	.word	0x50000700
 800881c:	c3210000 	.word	0xc3210000
 8008820:	90c00010 	.word	0x90c00010
 8008824:	50000600 	.word	0x50000600
 8008828:	20000ca8 	.word	0x20000ca8
 800882c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a32      	ldr	r2, [pc, #200]	; (8008900 <HAL_ADC_ConfigChannel+0x748>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d125      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x6ce>
 800883a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800883e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11f      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2e      	ldr	r2, [pc, #184]	; (8008904 <HAL_ADC_ConfigChannel+0x74c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d104      	bne.n	800885a <HAL_ADC_ConfigChannel+0x6a2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <HAL_ADC_ConfigChannel+0x750>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d047      	beq.n	80088ea <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008862:	d004      	beq.n	800886e <HAL_ADC_ConfigChannel+0x6b6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a26      	ldr	r2, [pc, #152]	; (8008904 <HAL_ADC_ConfigChannel+0x74c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d101      	bne.n	8008872 <HAL_ADC_ConfigChannel+0x6ba>
 800886e:	4a27      	ldr	r2, [pc, #156]	; (800890c <HAL_ADC_ConfigChannel+0x754>)
 8008870:	e000      	b.n	8008874 <HAL_ADC_ConfigChannel+0x6bc>
 8008872:	4a27      	ldr	r2, [pc, #156]	; (8008910 <HAL_ADC_ConfigChannel+0x758>)
 8008874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7ff f92b 	bl	8007ada <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008884:	e031      	b.n	80088ea <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a22      	ldr	r2, [pc, #136]	; (8008914 <HAL_ADC_ConfigChannel+0x75c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d12d      	bne.n	80088ec <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d127      	bne.n	80088ec <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a18      	ldr	r2, [pc, #96]	; (8008904 <HAL_ADC_ConfigChannel+0x74c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d022      	beq.n	80088ec <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ae:	d004      	beq.n	80088ba <HAL_ADC_ConfigChannel+0x702>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <HAL_ADC_ConfigChannel+0x74c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d101      	bne.n	80088be <HAL_ADC_ConfigChannel+0x706>
 80088ba:	4a14      	ldr	r2, [pc, #80]	; (800890c <HAL_ADC_ConfigChannel+0x754>)
 80088bc:	e000      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x708>
 80088be:	4a14      	ldr	r2, [pc, #80]	; (8008910 <HAL_ADC_ConfigChannel+0x758>)
 80088c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7ff f905 	bl	8007ada <LL_ADC_SetCommonPathInternalCh>
 80088d0:	e00c      	b.n	80088ec <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	f043 0220 	orr.w	r2, r3, #32
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80088e4:	e002      	b.n	80088ec <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80088e6:	bf00      	nop
 80088e8:	e000      	b.n	80088ec <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80088f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3798      	adds	r7, #152	; 0x98
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	c7520000 	.word	0xc7520000
 8008904:	50000100 	.word	0x50000100
 8008908:	50000500 	.word	0x50000500
 800890c:	50000300 	.word	0x50000300
 8008910:	50000700 	.word	0x50000700
 8008914:	cb840000 	.word	0xcb840000

08008918 <LL_ADC_IsEnabled>:
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <LL_ADC_IsEnabled+0x18>
 800892c:	2301      	movs	r3, #1
 800892e:	e000      	b.n	8008932 <LL_ADC_IsEnabled+0x1a>
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <LL_ADC_REG_IsConversionOngoing>:
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b04      	cmp	r3, #4
 8008950:	d101      	bne.n	8008956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008964:	b590      	push	{r4, r7, lr}
 8008966:	b0a1      	sub	sp, #132	; 0x84
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800897e:	2302      	movs	r3, #2
 8008980:	e0e3      	b.n	8008b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008992:	d102      	bne.n	800899a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008994:	4b6f      	ldr	r3, [pc, #444]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008996:	60bb      	str	r3, [r7, #8]
 8008998:	e009      	b.n	80089ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a6e      	ldr	r2, [pc, #440]	; (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d102      	bne.n	80089aa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80089a4:	4b6d      	ldr	r3, [pc, #436]	; (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	e001      	b.n	80089ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80089aa:	2300      	movs	r3, #0
 80089ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b8:	f043 0220 	orr.w	r2, r3, #32
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0be      	b.n	8008b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff ffb5 	bl	800893e <LL_ADC_REG_IsConversionOngoing>
 80089d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff ffaf 	bl	800893e <LL_ADC_REG_IsConversionOngoing>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 80a0 	bne.w	8008b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80089e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 809c 	bne.w	8008b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089f8:	d004      	beq.n	8008a04 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a55      	ldr	r2, [pc, #340]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d101      	bne.n	8008a08 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008a04:	4b56      	ldr	r3, [pc, #344]	; (8008b60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008a06:	e000      	b.n	8008a0a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008a08:	4b56      	ldr	r3, [pc, #344]	; (8008b64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d04b      	beq.n	8008aac <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	6859      	ldr	r1, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a26:	035b      	lsls	r3, r3, #13
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a38:	d004      	beq.n	8008a44 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a45      	ldr	r2, [pc, #276]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10f      	bne.n	8008a64 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008a48:	f7ff ff66 	bl	8008918 <LL_ADC_IsEnabled>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4841      	ldr	r0, [pc, #260]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008a50:	f7ff ff62 	bl	8008918 <LL_ADC_IsEnabled>
 8008a54:	4603      	mov	r3, r0
 8008a56:	4323      	orrs	r3, r4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2301      	moveq	r3, #1
 8008a5e:	2300      	movne	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	e012      	b.n	8008a8a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008a64:	483c      	ldr	r0, [pc, #240]	; (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008a66:	f7ff ff57 	bl	8008918 <LL_ADC_IsEnabled>
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	483b      	ldr	r0, [pc, #236]	; (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a6e:	f7ff ff53 	bl	8008918 <LL_ADC_IsEnabled>
 8008a72:	4603      	mov	r3, r0
 8008a74:	431c      	orrs	r4, r3
 8008a76:	483c      	ldr	r0, [pc, #240]	; (8008b68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008a78:	f7ff ff4e 	bl	8008918 <LL_ADC_IsEnabled>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	4323      	orrs	r3, r4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bf0c      	ite	eq
 8008a84:	2301      	moveq	r3, #1
 8008a86:	2300      	movne	r3, #0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d056      	beq.n	8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008a96:	f023 030f 	bic.w	r3, r3, #15
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	6892      	ldr	r2, [r2, #8]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008aaa:	e047      	b.n	8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ac0:	d004      	beq.n	8008acc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a23      	ldr	r2, [pc, #140]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10f      	bne.n	8008aec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ad0:	f7ff ff22 	bl	8008918 <LL_ADC_IsEnabled>
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	481f      	ldr	r0, [pc, #124]	; (8008b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008ad8:	f7ff ff1e 	bl	8008918 <LL_ADC_IsEnabled>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4323      	orrs	r3, r4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	e012      	b.n	8008b12 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008aec:	481a      	ldr	r0, [pc, #104]	; (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008aee:	f7ff ff13 	bl	8008918 <LL_ADC_IsEnabled>
 8008af2:	4604      	mov	r4, r0
 8008af4:	4819      	ldr	r0, [pc, #100]	; (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008af6:	f7ff ff0f 	bl	8008918 <LL_ADC_IsEnabled>
 8008afa:	4603      	mov	r3, r0
 8008afc:	431c      	orrs	r4, r3
 8008afe:	481a      	ldr	r0, [pc, #104]	; (8008b68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008b00:	f7ff ff0a 	bl	8008918 <LL_ADC_IsEnabled>
 8008b04:	4603      	mov	r3, r0
 8008b06:	4323      	orrs	r3, r4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2301      	moveq	r3, #1
 8008b0e:	2300      	movne	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d012      	beq.n	8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008b1e:	f023 030f 	bic.w	r3, r3, #15
 8008b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b26:	e009      	b.n	8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008b3a:	e000      	b.n	8008b3e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3784      	adds	r7, #132	; 0x84
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd90      	pop	{r4, r7, pc}
 8008b52:	bf00      	nop
 8008b54:	50000100 	.word	0x50000100
 8008b58:	50000400 	.word	0x50000400
 8008b5c:	50000500 	.word	0x50000500
 8008b60:	50000300 	.word	0x50000300
 8008b64:	50000700 	.word	0x50000700
 8008b68:	50000600 	.word	0x50000600

08008b6c <LL_EXTI_EnableIT_0_31>:
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <LL_EXTI_EnableIT_0_31+0x20>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	4904      	ldr	r1, [pc, #16]	; (8008b8c <LL_EXTI_EnableIT_0_31+0x20>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	600b      	str	r3, [r1, #0]
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40010400 	.word	0x40010400

08008b90 <LL_EXTI_EnableIT_32_63>:
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <LL_EXTI_EnableIT_32_63+0x20>)
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
 8008b9c:	4904      	ldr	r1, [pc, #16]	; (8008bb0 <LL_EXTI_EnableIT_32_63+0x20>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	620b      	str	r3, [r1, #32]
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40010400 	.word	0x40010400

08008bb4 <LL_EXTI_DisableIT_0_31>:
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	4904      	ldr	r1, [pc, #16]	; (8008bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010400 	.word	0x40010400

08008bdc <LL_EXTI_DisableIT_32_63>:
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008be4:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <LL_EXTI_DisableIT_32_63+0x24>)
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	43db      	mvns	r3, r3
 8008bec:	4904      	ldr	r1, [pc, #16]	; (8008c00 <LL_EXTI_DisableIT_32_63+0x24>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	620b      	str	r3, [r1, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010400 	.word	0x40010400

08008c04 <LL_EXTI_EnableEvent_0_31>:
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	4904      	ldr	r1, [pc, #16]	; (8008c24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	604b      	str	r3, [r1, #4]
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	40010400 	.word	0x40010400

08008c28 <LL_EXTI_EnableEvent_32_63>:
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c34:	4904      	ldr	r1, [pc, #16]	; (8008c48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	40010400 	.word	0x40010400

08008c4c <LL_EXTI_DisableEvent_0_31>:
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	4904      	ldr	r1, [pc, #16]	; (8008c70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	604b      	str	r3, [r1, #4]
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40010400 	.word	0x40010400

08008c74 <LL_EXTI_DisableEvent_32_63>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008c7c:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	43db      	mvns	r3, r3
 8008c84:	4904      	ldr	r1, [pc, #16]	; (8008c98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40010400 	.word	0x40010400

08008c9c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	4904      	ldr	r1, [pc, #16]	; (8008cbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	608b      	str	r3, [r1, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	40010400 	.word	0x40010400

08008cc0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ccc:	4904      	ldr	r1, [pc, #16]	; (8008ce0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	40010400 	.word	0x40010400

08008ce4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	4904      	ldr	r1, [pc, #16]	; (8008d08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	608b      	str	r3, [r1, #8]
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40010400 	.word	0x40010400

08008d0c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	40010400 	.word	0x40010400

08008d34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	4904      	ldr	r1, [pc, #16]	; (8008d54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60cb      	str	r3, [r1, #12]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	40010400 	.word	0x40010400

08008d58 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	40010400 	.word	0x40010400

08008d7c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	4904      	ldr	r1, [pc, #16]	; (8008da0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	60cb      	str	r3, [r1, #12]
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40010400 	.word	0x40010400

08008da4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	4904      	ldr	r1, [pc, #16]	; (8008dc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40010400 	.word	0x40010400

08008dcc <LL_EXTI_ClearFlag_0_31>:
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008dd4:	4a04      	ldr	r2, [pc, #16]	; (8008de8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6153      	str	r3, [r2, #20]
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	40010400 	.word	0x40010400

08008dec <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8008df4:	4a04      	ldr	r2, [pc, #16]	; (8008e08 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40010400 	.word	0x40010400

08008e0c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	77fb      	strb	r3, [r7, #31]
 8008e26:	e180      	b.n	800912a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e36:	d102      	bne.n	8008e3e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	77fb      	strb	r3, [r7, #31]
 8008e3c:	e175      	b.n	800912a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7f5b      	ldrb	r3, [r3, #29]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7fd f9d3 	bl	8006200 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e64:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008e80:	4313      	orrs	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b98      	ldr	r3, [pc, #608]	; (80090ec <HAL_COMP_Init+0x2e0>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	6979      	ldr	r1, [r7, #20]
 8008e94:	430b      	orrs	r3, r1
 8008e96:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d015      	beq.n	8008ed2 <HAL_COMP_Init+0xc6>
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d112      	bne.n	8008ed2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008eac:	4b90      	ldr	r3, [pc, #576]	; (80090f0 <HAL_COMP_Init+0x2e4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	099b      	lsrs	r3, r3, #6
 8008eb2:	4a90      	ldr	r2, [pc, #576]	; (80090f4 <HAL_COMP_Init+0x2e8>)
 8008eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb8:	099a      	lsrs	r2, r3, #6
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008ec4:	e002      	b.n	8008ecc <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f9      	bne.n	8008ec6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a88      	ldr	r2, [pc, #544]	; (80090f8 <HAL_COMP_Init+0x2ec>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d028      	beq.n	8008f2e <HAL_COMP_Init+0x122>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a86      	ldr	r2, [pc, #536]	; (80090fc <HAL_COMP_Init+0x2f0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d020      	beq.n	8008f28 <HAL_COMP_Init+0x11c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a85      	ldr	r2, [pc, #532]	; (8009100 <HAL_COMP_Init+0x2f4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d018      	beq.n	8008f22 <HAL_COMP_Init+0x116>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a83      	ldr	r2, [pc, #524]	; (8009104 <HAL_COMP_Init+0x2f8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d010      	beq.n	8008f1c <HAL_COMP_Init+0x110>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a82      	ldr	r2, [pc, #520]	; (8009108 <HAL_COMP_Init+0x2fc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d008      	beq.n	8008f16 <HAL_COMP_Init+0x10a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a80      	ldr	r2, [pc, #512]	; (800910c <HAL_COMP_Init+0x300>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d101      	bne.n	8008f12 <HAL_COMP_Init+0x106>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e00f      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e00d      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f1a:	e00a      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f20:	e007      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f26:	e004      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f2c:	e001      	b.n	8008f32 <HAL_COMP_Init+0x126>
 8008f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f32:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80b6 	beq.w	80090ae <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d011      	beq.n	8008f72 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a6e      	ldr	r2, [pc, #440]	; (800910c <HAL_COMP_Init+0x300>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d004      	beq.n	8008f62 <HAL_COMP_Init+0x156>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a6c      	ldr	r2, [pc, #432]	; (8009110 <HAL_COMP_Init+0x304>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d103      	bne.n	8008f6a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8008f62:	6938      	ldr	r0, [r7, #16]
 8008f64:	f7ff feac 	bl	8008cc0 <LL_EXTI_EnableRisingTrig_32_63>
 8008f68:	e014      	b.n	8008f94 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f7ff fe96 	bl	8008c9c <LL_EXTI_EnableRisingTrig_0_31>
 8008f70:	e010      	b.n	8008f94 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a65      	ldr	r2, [pc, #404]	; (800910c <HAL_COMP_Init+0x300>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <HAL_COMP_Init+0x17a>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a63      	ldr	r2, [pc, #396]	; (8009110 <HAL_COMP_Init+0x304>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d103      	bne.n	8008f8e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8008f86:	6938      	ldr	r0, [r7, #16]
 8008f88:	f7ff fec0 	bl	8008d0c <LL_EXTI_DisableRisingTrig_32_63>
 8008f8c:	e002      	b.n	8008f94 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008f8e:	6938      	ldr	r0, [r7, #16]
 8008f90:	f7ff fea8 	bl	8008ce4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d011      	beq.n	8008fc4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a59      	ldr	r2, [pc, #356]	; (800910c <HAL_COMP_Init+0x300>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_COMP_Init+0x1a8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a58      	ldr	r2, [pc, #352]	; (8009110 <HAL_COMP_Init+0x304>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d103      	bne.n	8008fbc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8008fb4:	6938      	ldr	r0, [r7, #16]
 8008fb6:	f7ff fecf 	bl	8008d58 <LL_EXTI_EnableFallingTrig_32_63>
 8008fba:	e014      	b.n	8008fe6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8008fbc:	6938      	ldr	r0, [r7, #16]
 8008fbe:	f7ff feb9 	bl	8008d34 <LL_EXTI_EnableFallingTrig_0_31>
 8008fc2:	e010      	b.n	8008fe6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a50      	ldr	r2, [pc, #320]	; (800910c <HAL_COMP_Init+0x300>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <HAL_COMP_Init+0x1cc>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a4f      	ldr	r2, [pc, #316]	; (8009110 <HAL_COMP_Init+0x304>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d103      	bne.n	8008fe0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8008fd8:	6938      	ldr	r0, [r7, #16]
 8008fda:	f7ff fee3 	bl	8008da4 <LL_EXTI_DisableFallingTrig_32_63>
 8008fde:	e002      	b.n	8008fe6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8008fe0:	6938      	ldr	r0, [r7, #16]
 8008fe2:	f7ff fecb 	bl	8008d7c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a48      	ldr	r2, [pc, #288]	; (800910c <HAL_COMP_Init+0x300>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d004      	beq.n	8008ffa <HAL_COMP_Init+0x1ee>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a46      	ldr	r2, [pc, #280]	; (8009110 <HAL_COMP_Init+0x304>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d103      	bne.n	8009002 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8008ffa:	6938      	ldr	r0, [r7, #16]
 8008ffc:	f7ff fef6 	bl	8008dec <LL_EXTI_ClearFlag_32_63>
 8009000:	e002      	b.n	8009008 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009002:	6938      	ldr	r0, [r7, #16]
 8009004:	f7ff fee2 	bl	8008dcc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d011      	beq.n	8009038 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a3c      	ldr	r2, [pc, #240]	; (800910c <HAL_COMP_Init+0x300>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_COMP_Init+0x21c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a3b      	ldr	r2, [pc, #236]	; (8009110 <HAL_COMP_Init+0x304>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d103      	bne.n	8009030 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009028:	6938      	ldr	r0, [r7, #16]
 800902a:	f7ff fdfd 	bl	8008c28 <LL_EXTI_EnableEvent_32_63>
 800902e:	e014      	b.n	800905a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f7ff fde7 	bl	8008c04 <LL_EXTI_EnableEvent_0_31>
 8009036:	e010      	b.n	800905a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a33      	ldr	r2, [pc, #204]	; (800910c <HAL_COMP_Init+0x300>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_COMP_Init+0x240>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a32      	ldr	r2, [pc, #200]	; (8009110 <HAL_COMP_Init+0x304>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d103      	bne.n	8009054 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800904c:	6938      	ldr	r0, [r7, #16]
 800904e:	f7ff fe11 	bl	8008c74 <LL_EXTI_DisableEvent_32_63>
 8009052:	e002      	b.n	800905a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009054:	6938      	ldr	r0, [r7, #16]
 8009056:	f7ff fdf9 	bl	8008c4c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a28      	ldr	r2, [pc, #160]	; (800910c <HAL_COMP_Init+0x300>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <HAL_COMP_Init+0x26e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a26      	ldr	r2, [pc, #152]	; (8009110 <HAL_COMP_Init+0x304>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d103      	bne.n	8009082 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800907a:	6938      	ldr	r0, [r7, #16]
 800907c:	f7ff fd88 	bl	8008b90 <LL_EXTI_EnableIT_32_63>
 8009080:	e04b      	b.n	800911a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009082:	6938      	ldr	r0, [r7, #16]
 8009084:	f7ff fd72 	bl	8008b6c <LL_EXTI_EnableIT_0_31>
 8009088:	e047      	b.n	800911a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1f      	ldr	r2, [pc, #124]	; (800910c <HAL_COMP_Init+0x300>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d004      	beq.n	800909e <HAL_COMP_Init+0x292>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1d      	ldr	r2, [pc, #116]	; (8009110 <HAL_COMP_Init+0x304>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d103      	bne.n	80090a6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800909e:	6938      	ldr	r0, [r7, #16]
 80090a0:	f7ff fd9c 	bl	8008bdc <LL_EXTI_DisableIT_32_63>
 80090a4:	e039      	b.n	800911a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80090a6:	6938      	ldr	r0, [r7, #16]
 80090a8:	f7ff fd84 	bl	8008bb4 <LL_EXTI_DisableIT_0_31>
 80090ac:	e035      	b.n	800911a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a16      	ldr	r2, [pc, #88]	; (800910c <HAL_COMP_Init+0x300>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d004      	beq.n	80090c2 <HAL_COMP_Init+0x2b6>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a14      	ldr	r2, [pc, #80]	; (8009110 <HAL_COMP_Init+0x304>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d103      	bne.n	80090ca <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f7ff fdd6 	bl	8008c74 <LL_EXTI_DisableEvent_32_63>
 80090c8:	e002      	b.n	80090d0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f7ff fdbe 	bl	8008c4c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a0d      	ldr	r2, [pc, #52]	; (800910c <HAL_COMP_Init+0x300>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_COMP_Init+0x2d8>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a0c      	ldr	r2, [pc, #48]	; (8009110 <HAL_COMP_Init+0x304>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d117      	bne.n	8009114 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80090e4:	6938      	ldr	r0, [r7, #16]
 80090e6:	f7ff fd79 	bl	8008bdc <LL_EXTI_DisableIT_32_63>
 80090ea:	e016      	b.n	800911a <HAL_COMP_Init+0x30e>
 80090ec:	ff007e0f 	.word	0xff007e0f
 80090f0:	20000ca8 	.word	0x20000ca8
 80090f4:	053e2d63 	.word	0x053e2d63
 80090f8:	40010200 	.word	0x40010200
 80090fc:	40010204 	.word	0x40010204
 8009100:	40010208 	.word	0x40010208
 8009104:	4001020c 	.word	0x4001020c
 8009108:	40010210 	.word	0x40010210
 800910c:	40010214 	.word	0x40010214
 8009110:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009114:	6938      	ldr	r0, [r7, #16]
 8009116:	f7ff fd4d 	bl	8008bb4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7f5b      	ldrb	r3, [r3, #29]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800912a:	7ffb      	ldrb	r3, [r7, #31]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <__NVIC_SetPriorityGrouping>:
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <__NVIC_SetPriorityGrouping+0x44>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009150:	4013      	ands	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800915c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009166:	4a04      	ldr	r2, [pc, #16]	; (8009178 <__NVIC_SetPriorityGrouping+0x44>)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	60d3      	str	r3, [r2, #12]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	e000ed00 	.word	0xe000ed00

0800917c <__NVIC_GetPriorityGrouping>:
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <__NVIC_GetPriorityGrouping+0x18>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	0a1b      	lsrs	r3, r3, #8
 8009186:	f003 0307 	and.w	r3, r3, #7
}
 800918a:	4618      	mov	r0, r3
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <__NVIC_EnableIRQ>:
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	db0b      	blt.n	80091c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	f003 021f 	and.w	r2, r3, #31
 80091b0:	4907      	ldr	r1, [pc, #28]	; (80091d0 <__NVIC_EnableIRQ+0x38>)
 80091b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	2001      	movs	r0, #1
 80091ba:	fa00 f202 	lsl.w	r2, r0, r2
 80091be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	e000e100 	.word	0xe000e100

080091d4 <__NVIC_SetPriority>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	db0a      	blt.n	80091fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	490c      	ldr	r1, [pc, #48]	; (8009220 <__NVIC_SetPriority+0x4c>)
 80091ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f2:	0112      	lsls	r2, r2, #4
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	440b      	add	r3, r1
 80091f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80091fc:	e00a      	b.n	8009214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	4908      	ldr	r1, [pc, #32]	; (8009224 <__NVIC_SetPriority+0x50>)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	3b04      	subs	r3, #4
 800920c:	0112      	lsls	r2, r2, #4
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	440b      	add	r3, r1
 8009212:	761a      	strb	r2, [r3, #24]
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	e000e100 	.word	0xe000e100
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <NVIC_EncodePriority>:
{
 8009228:	b480      	push	{r7}
 800922a:	b089      	sub	sp, #36	; 0x24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f1c3 0307 	rsb	r3, r3, #7
 8009242:	2b04      	cmp	r3, #4
 8009244:	bf28      	it	cs
 8009246:	2304      	movcs	r3, #4
 8009248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3304      	adds	r3, #4
 800924e:	2b06      	cmp	r3, #6
 8009250:	d902      	bls.n	8009258 <NVIC_EncodePriority+0x30>
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	3b03      	subs	r3, #3
 8009256:	e000      	b.n	800925a <NVIC_EncodePriority+0x32>
 8009258:	2300      	movs	r3, #0
 800925a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800925c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	43da      	mvns	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	401a      	ands	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	fa01 f303 	lsl.w	r3, r1, r3
 800927a:	43d9      	mvns	r1, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009280:	4313      	orrs	r3, r2
}
 8009282:	4618      	mov	r0, r3
 8009284:	3724      	adds	r7, #36	; 0x24
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <SysTick_Config>:
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3b01      	subs	r3, #1
 800929c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092a0:	d301      	bcc.n	80092a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80092a2:	2301      	movs	r3, #1
 80092a4:	e00f      	b.n	80092c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80092a6:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <SysTick_Config+0x40>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092ae:	210f      	movs	r1, #15
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b4:	f7ff ff8e 	bl	80091d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <SysTick_Config+0x40>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <SysTick_Config+0x40>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010

080092d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ff29 	bl	8009134 <__NVIC_SetPriorityGrouping>
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	4603      	mov	r3, r0
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80092f8:	f7ff ff40 	bl	800917c <__NVIC_GetPriorityGrouping>
 80092fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	6978      	ldr	r0, [r7, #20]
 8009304:	f7ff ff90 	bl	8009228 <NVIC_EncodePriority>
 8009308:	4602      	mov	r2, r0
 800930a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff ff5f 	bl	80091d4 <__NVIC_SetPriority>
}
 8009316:	bf00      	nop
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	4603      	mov	r3, r0
 8009326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff ff33 	bl	8009198 <__NVIC_EnableIRQ>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ffa4 	bl	8009290 <SysTick_Config>
 8009348:	4603      	mov	r3, r0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e014      	b.n	800938e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	791b      	ldrb	r3, [r3, #4]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7fc fff9 	bl	800636c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2202      	movs	r2, #2
 800937e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	795b      	ldrb	r3, [r3, #5]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d101      	bne.n	80093ac <HAL_DAC_Start+0x16>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e043      	b.n	8009434 <HAL_DAC_Start+0x9e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6819      	ldr	r1, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	2201      	movs	r2, #1
 80093c6:	409a      	lsls	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7fe fb4d 	bl	8007a70 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d11d      	bne.n	8009426 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0201 	orr.w	r2, r2, #1
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	e014      	b.n	8009426 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	f003 0310 	and.w	r3, r3, #16
 800940c:	2102      	movs	r1, #2
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	429a      	cmp	r2, r3
 8009414:	d107      	bne.n	8009426 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0202 	orr.w	r2, r2, #2
 8009424:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	795b      	ldrb	r3, [r3, #5]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_DAC_Start_DMA+0x1e>
 8009456:	2302      	movs	r3, #2
 8009458:	e0a1      	b.n	800959e <HAL_DAC_Start_DMA+0x162>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2202      	movs	r2, #2
 8009464:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d12a      	bne.n	80094c2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	4a4d      	ldr	r2, [pc, #308]	; (80095a8 <HAL_DAC_Start_DMA+0x16c>)
 8009472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	4a4c      	ldr	r2, [pc, #304]	; (80095ac <HAL_DAC_Start_DMA+0x170>)
 800947a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	4a4b      	ldr	r2, [pc, #300]	; (80095b0 <HAL_DAC_Start_DMA+0x174>)
 8009482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009492:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	2b04      	cmp	r3, #4
 8009498:	d009      	beq.n	80094ae <HAL_DAC_Start_DMA+0x72>
 800949a:	2b08      	cmp	r3, #8
 800949c:	d00c      	beq.n	80094b8 <HAL_DAC_Start_DMA+0x7c>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d000      	beq.n	80094a4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80094a2:	e039      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	613b      	str	r3, [r7, #16]
        break;
 80094ac:	e034      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	613b      	str	r3, [r7, #16]
        break;
 80094b6:	e02f      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3310      	adds	r3, #16
 80094be:	613b      	str	r3, [r7, #16]
        break;
 80094c0:	e02a      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	4a3b      	ldr	r2, [pc, #236]	; (80095b4 <HAL_DAC_Start_DMA+0x178>)
 80094c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	4a3a      	ldr	r2, [pc, #232]	; (80095b8 <HAL_DAC_Start_DMA+0x17c>)
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	4a39      	ldr	r2, [pc, #228]	; (80095bc <HAL_DAC_Start_DMA+0x180>)
 80094d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d009      	beq.n	8009504 <HAL_DAC_Start_DMA+0xc8>
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d00c      	beq.n	800950e <HAL_DAC_Start_DMA+0xd2>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d000      	beq.n	80094fa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80094f8:	e00e      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	613b      	str	r3, [r7, #16]
        break;
 8009502:	e009      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3318      	adds	r3, #24
 800950a:	613b      	str	r3, [r7, #16]
        break;
 800950c:	e004      	b.n	8009518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	331c      	adds	r3, #28
 8009514:	613b      	str	r3, [r7, #16]
        break;
 8009516:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d111      	bne.n	8009542 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800952c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6898      	ldr	r0, [r3, #8]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	f000 fbd2 	bl	8009ce0 <HAL_DMA_Start_IT>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]
 8009540:	e010      	b.n	8009564 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009550:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68d8      	ldr	r0, [r3, #12]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	f000 fbc0 	bl	8009ce0 <HAL_DMA_Start_IT>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10f      	bne.n	8009590 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6819      	ldr	r1, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2201      	movs	r2, #1
 800957e:	409a      	lsls	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009588:	2001      	movs	r0, #1
 800958a:	f7fe fa71 	bl	8007a70 <HAL_Delay>
 800958e:	e005      	b.n	800959c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f043 0204 	orr.w	r2, r3, #4
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	08009a7d 	.word	0x08009a7d
 80095ac:	08009a9f 	.word	0x08009a9f
 80095b0:	08009abb 	.word	0x08009abb
 80095b4:	08009b25 	.word	0x08009b25
 80095b8:	08009b47 	.word	0x08009b47
 80095bc:	08009b63 	.word	0x08009b63

080095c0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	43da      	mvns	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	400a      	ands	r2, r1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6819      	ldr	r1, [r3, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2201      	movs	r2, #1
 80095f6:	fa02 f303 	lsl.w	r3, r2, r3
 80095fa:	43da      	mvns	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	400a      	ands	r2, r1
 8009602:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009604:	2001      	movs	r0, #1
 8009606:	f7fe fa33 	bl	8007a70 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10f      	bne.n	8009630 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 fbde 	bl	8009dd6 <HAL_DMA_Abort>
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e00e      	b.n	800964e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fbce 	bl	8009dd6 <HAL_DMA_Abort>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800964c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2204      	movs	r2, #4
 8009658:	711a      	strb	r2, [r3, #4]
 800965a:	e002      	b.n	8009662 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4413      	add	r3, r2
 8009696:	3308      	adds	r3, #8
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e004      	b.n	80096a6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	3314      	adds	r3, #20
 80096a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	461a      	mov	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	e002      	b.n	8009716 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	795b      	ldrb	r3, [r3, #5]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <HAL_DAC_ConfigChannel+0x1c>
 800973c:	2302      	movs	r3, #2
 800973e:	e194      	b.n	8009a6a <HAL_DAC_ConfigChannel+0x346>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2202      	movs	r2, #2
 800974a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	2b04      	cmp	r3, #4
 8009752:	d174      	bne.n	800983e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d137      	bne.n	80097ca <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800975a:	f7fe f97d 	bl	8007a58 <HAL_GetTick>
 800975e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009760:	e011      	b.n	8009786 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009762:	f7fe f979 	bl	8007a58 <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	d90a      	bls.n	8009786 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	f043 0208 	orr.w	r2, r3, #8
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2203      	movs	r2, #3
 8009780:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e171      	b.n	8009a6a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009794:	2001      	movs	r0, #1
 8009796:	f7fe f96b 	bl	8007a70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097a2:	641a      	str	r2, [r3, #64]	; 0x40
 80097a4:	e01e      	b.n	80097e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80097a6:	f7fe f957 	bl	8007a58 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d90a      	bls.n	80097ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	f043 0208 	orr.w	r2, r3, #8
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2203      	movs	r2, #3
 80097c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e14f      	b.n	8009a6a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dbe8      	blt.n	80097a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80097d4:	2001      	movs	r0, #1
 80097d6:	f7fe f94b 	bl	8007a70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	43db      	mvns	r3, r3
 80097fa:	ea02 0103 	and.w	r1, r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	409a      	lsls	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	21ff      	movs	r1, #255	; 0xff
 8009820:	fa01 f303 	lsl.w	r3, r1, r3
 8009824:	43db      	mvns	r3, r3
 8009826:	ea02 0103 	and.w	r1, r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	409a      	lsls	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d11d      	bne.n	8009882 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	221f      	movs	r2, #31
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	43db      	mvns	r3, r3
 800985c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985e:	4013      	ands	r3, r2
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009876:	4313      	orrs	r3, r2
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2207      	movs	r2, #7
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	43db      	mvns	r3, r3
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	4013      	ands	r3, r2
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	623b      	str	r3, [r7, #32]
 80098ae:	e011      	b.n	80098d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80098bc:	2301      	movs	r3, #1
 80098be:	623b      	str	r3, [r7, #32]
 80098c0:	e008      	b.n	80098d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80098ca:	2301      	movs	r3, #1
 80098cc:	623b      	str	r3, [r7, #32]
 80098ce:	e001      	b.n	80098d4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	6a3a      	ldr	r2, [r7, #32]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	43db      	mvns	r3, r3
 80098f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f6:	4013      	ands	r3, r2
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d102      	bne.n	8009908 <HAL_DAC_ConfigChannel+0x1e4>
 8009902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009906:	e000      	b.n	800990a <HAL_DAC_ConfigChannel+0x1e6>
 8009908:	2300      	movs	r3, #0
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	4313      	orrs	r3, r2
 800990e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	43db      	mvns	r3, r3
 8009920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009922:	4013      	ands	r3, r2
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	795b      	ldrb	r3, [r3, #5]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d102      	bne.n	8009934 <HAL_DAC_ConfigChannel+0x210>
 800992e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009932:	e000      	b.n	8009936 <HAL_DAC_ConfigChannel+0x212>
 8009934:	2300      	movs	r3, #0
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	4313      	orrs	r3, r2
 800993a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d114      	bne.n	8009976 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800994c:	f001 fae0 	bl	800af10 <HAL_RCC_GetHCLKFreq>
 8009950:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	4a47      	ldr	r2, [pc, #284]	; (8009a74 <HAL_DAC_ConfigChannel+0x350>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d904      	bls.n	8009964 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
 8009962:	e00d      	b.n	8009980 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	4a44      	ldr	r2, [pc, #272]	; (8009a78 <HAL_DAC_ConfigChannel+0x354>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d909      	bls.n	8009980 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
 8009974:	e004      	b.n	8009980 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997c:	4313      	orrs	r3, r2
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998e:	4313      	orrs	r3, r2
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	43da      	mvns	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	400a      	ands	r2, r1
 80099b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f003 0310 	and.w	r3, r3, #16
 80099c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	43db      	mvns	r3, r3
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	4013      	ands	r3, r2
 80099d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	4313      	orrs	r3, r2
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6819      	ldr	r1, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	22c0      	movs	r2, #192	; 0xc0
 8009a04:	fa02 f303 	lsl.w	r3, r2, r3
 8009a08:	43da      	mvns	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	400a      	ands	r2, r1
 8009a10:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	089b      	lsrs	r3, r3, #2
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	089b      	lsrs	r3, r3, #2
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009a40:	fa01 f303 	lsl.w	r3, r1, r3
 8009a44:	43db      	mvns	r3, r3
 8009a46:	ea02 0103 	and.w	r1, r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	409a      	lsls	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3728      	adds	r7, #40	; 0x28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	09896800 	.word	0x09896800
 8009a78:	04c4b400 	.word	0x04c4b400

08009a7c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fe16 	bl	80096bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2201      	movs	r2, #1
 8009a94:	711a      	strb	r2, [r3, #4]
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f7ff fe0f 	bl	80096d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f043 0204 	orr.w	r2, r3, #4
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff fe05 	bl	80096e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	711a      	strb	r2, [r3, #4]
}
 8009ae0:	bf00      	nop
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff ffd8 	bl	8009ae8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	711a      	strb	r2, [r3, #4]
}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ffd1 	bl	8009afc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f043 0204 	orr.w	r2, r3, #4
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff ffc7 	bl	8009b10 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	711a      	strb	r2, [r3, #4]
}
 8009b88:	bf00      	nop
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e08d      	b.n	8009cbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4b47      	ldr	r3, [pc, #284]	; (8009cc8 <HAL_DMA_Init+0x138>)
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d80f      	bhi.n	8009bce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4b45      	ldr	r3, [pc, #276]	; (8009ccc <HAL_DMA_Init+0x13c>)
 8009bb6:	4413      	add	r3, r2
 8009bb8:	4a45      	ldr	r2, [pc, #276]	; (8009cd0 <HAL_DMA_Init+0x140>)
 8009bba:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbe:	091b      	lsrs	r3, r3, #4
 8009bc0:	009a      	lsls	r2, r3, #2
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a42      	ldr	r2, [pc, #264]	; (8009cd4 <HAL_DMA_Init+0x144>)
 8009bca:	641a      	str	r2, [r3, #64]	; 0x40
 8009bcc:	e00e      	b.n	8009bec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4b40      	ldr	r3, [pc, #256]	; (8009cd8 <HAL_DMA_Init+0x148>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4a3d      	ldr	r2, [pc, #244]	; (8009cd0 <HAL_DMA_Init+0x140>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	091b      	lsrs	r3, r3, #4
 8009be0:	009a      	lsls	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a3c      	ldr	r2, [pc, #240]	; (8009cdc <HAL_DMA_Init+0x14c>)
 8009bea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa10 	bl	800a064 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4c:	d102      	bne.n	8009c54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5c:	b2d2      	uxtb	r2, r2
 8009c5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d010      	beq.n	8009c94 <HAL_DMA_Init+0x104>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d80c      	bhi.n	8009c94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa30 	bl	800a0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	e008      	b.n	8009ca6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	40020407 	.word	0x40020407
 8009ccc:	bffdfff8 	.word	0xbffdfff8
 8009cd0:	cccccccd 	.word	0xcccccccd
 8009cd4:	40020000 	.word	0x40020000
 8009cd8:	bffdfbf8 	.word	0xbffdfbf8
 8009cdc:	40020400 	.word	0x40020400

08009ce0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_DMA_Start_IT+0x20>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e066      	b.n	8009dce <HAL_DMA_Start_IT+0xee>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d155      	bne.n	8009dc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0201 	bic.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f954 	bl	8009fe6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d008      	beq.n	8009d58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 020e 	orr.w	r2, r2, #14
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	e00f      	b.n	8009d78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0204 	bic.w	r2, r2, #4
 8009d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 020a 	orr.w	r2, r2, #10
 8009d76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f042 0201 	orr.w	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	e005      	b.n	8009dcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d005      	beq.n	8009dfa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2204      	movs	r2, #4
 8009df2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]
 8009df8:	e037      	b.n	8009e6a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 020e 	bic.w	r2, r2, #14
 8009e08:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e18:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0201 	bic.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2e:	f003 021f 	and.w	r2, r3, #31
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	2101      	movs	r1, #1
 8009e38:	fa01 f202 	lsl.w	r2, r1, r2
 8009e3c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e46:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00c      	beq.n	8009e6a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e68:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea4:	f003 031f 	and.w	r3, r3, #31
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d026      	beq.n	8009f02 <HAL_DMA_IRQHandler+0x7a>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d021      	beq.n	8009f02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d107      	bne.n	8009edc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0204 	bic.w	r2, r2, #4
 8009eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee0:	f003 021f 	and.w	r2, r3, #31
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2104      	movs	r1, #4
 8009eea:	fa01 f202 	lsl.w	r2, r1, r2
 8009eee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d071      	beq.n	8009fdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009f00:	e06c      	b.n	8009fdc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	f003 031f 	and.w	r3, r3, #31
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	409a      	lsls	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4013      	ands	r3, r2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d02e      	beq.n	8009f74 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d029      	beq.n	8009f74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 020a 	bic.w	r2, r2, #10
 8009f3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4a:	f003 021f 	and.w	r2, r3, #31
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	2102      	movs	r1, #2
 8009f54:	fa01 f202 	lsl.w	r2, r1, r2
 8009f58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d038      	beq.n	8009fdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009f72:	e033      	b.n	8009fdc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f78:	f003 031f 	and.w	r3, r3, #31
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	409a      	lsls	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4013      	ands	r3, r2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d02a      	beq.n	8009fde <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f003 0308 	and.w	r3, r3, #8
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d025      	beq.n	8009fde <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 020e 	bic.w	r2, r2, #14
 8009fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	f003 021f 	and.w	r2, r3, #31
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	2101      	movs	r1, #1
 8009fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009fdc:	bf00      	nop
 8009fde:	bf00      	nop
}
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ffc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a00e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a014:	f003 021f 	and.w	r2, r3, #31
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	2101      	movs	r1, #1
 800a01e:	fa01 f202 	lsl.w	r2, r1, r2
 800a022:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b10      	cmp	r3, #16
 800a032:	d108      	bne.n	800a046 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a044:	e007      	b.n	800a056 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
	...

0800a064 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	4b16      	ldr	r3, [pc, #88]	; (800a0cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a074:	429a      	cmp	r2, r3
 800a076:	d802      	bhi.n	800a07e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a078:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	e001      	b.n	800a082 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a07e:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a080:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	3b08      	subs	r3, #8
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a090:	fba2 2303 	umull	r2, r3, r2, r3
 800a094:	091b      	lsrs	r3, r3, #4
 800a096:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09c:	089b      	lsrs	r3, r3, #2
 800a09e:	009a      	lsls	r2, r3, #2
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a0b      	ldr	r2, [pc, #44]	; (800a0dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a0ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 031f 	and.w	r3, r3, #31
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	409a      	lsls	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40020407 	.word	0x40020407
 800a0d0:	40020800 	.word	0x40020800
 800a0d4:	40020820 	.word	0x40020820
 800a0d8:	cccccccd 	.word	0xcccccccd
 800a0dc:	40020880 	.word	0x40020880

0800a0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a08      	ldr	r2, [pc, #32]	; (800a124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a102:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3b01      	subs	r3, #1
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	2201      	movs	r2, #1
 800a10e:	409a      	lsls	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a114:	bf00      	nop
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	1000823f 	.word	0x1000823f
 800a124:	40020940 	.word	0x40020940

0800a128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a136:	e15a      	b.n	800a3ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	2101      	movs	r1, #1
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	fa01 f303 	lsl.w	r3, r1, r3
 800a144:	4013      	ands	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 814c 	beq.w	800a3e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d00b      	beq.n	800a170 <HAL_GPIO_Init+0x48>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d007      	beq.n	800a170 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a164:	2b11      	cmp	r3, #17
 800a166:	d003      	beq.n	800a170 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b12      	cmp	r3, #18
 800a16e:	d130      	bne.n	800a1d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	2203      	movs	r2, #3
 800a17c:	fa02 f303 	lsl.w	r3, r2, r3
 800a180:	43db      	mvns	r3, r3
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	4013      	ands	r3, r2
 800a186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 0201 	and.w	r2, r3, #1
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	2203      	movs	r2, #3
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	43db      	mvns	r3, r3
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	2b02      	cmp	r3, #2
 800a208:	d003      	beq.n	800a212 <HAL_GPIO_Init+0xea>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b12      	cmp	r3, #18
 800a210:	d123      	bne.n	800a25a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	08da      	lsrs	r2, r3, #3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3208      	adds	r2, #8
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	220f      	movs	r2, #15
 800a22a:	fa02 f303 	lsl.w	r3, r2, r3
 800a22e:	43db      	mvns	r3, r3
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4013      	ands	r3, r2
 800a234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	691a      	ldr	r2, [r3, #16]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	08da      	lsrs	r2, r3, #3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3208      	adds	r2, #8
 800a254:	6939      	ldr	r1, [r7, #16]
 800a256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	2203      	movs	r2, #3
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	43db      	mvns	r3, r3
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	4013      	ands	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f003 0203 	and.w	r2, r3, #3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	4313      	orrs	r3, r2
 800a286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80a6 	beq.w	800a3e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a29c:	4b5b      	ldr	r3, [pc, #364]	; (800a40c <HAL_GPIO_Init+0x2e4>)
 800a29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a0:	4a5a      	ldr	r2, [pc, #360]	; (800a40c <HAL_GPIO_Init+0x2e4>)
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	6613      	str	r3, [r2, #96]	; 0x60
 800a2a8:	4b58      	ldr	r3, [pc, #352]	; (800a40c <HAL_GPIO_Init+0x2e4>)
 800a2aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2b4:	4a56      	ldr	r2, [pc, #344]	; (800a410 <HAL_GPIO_Init+0x2e8>)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	089b      	lsrs	r3, r3, #2
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	220f      	movs	r2, #15
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a2de:	d01f      	beq.n	800a320 <HAL_GPIO_Init+0x1f8>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a4c      	ldr	r2, [pc, #304]	; (800a414 <HAL_GPIO_Init+0x2ec>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d019      	beq.n	800a31c <HAL_GPIO_Init+0x1f4>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a4b      	ldr	r2, [pc, #300]	; (800a418 <HAL_GPIO_Init+0x2f0>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d013      	beq.n	800a318 <HAL_GPIO_Init+0x1f0>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a4a      	ldr	r2, [pc, #296]	; (800a41c <HAL_GPIO_Init+0x2f4>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00d      	beq.n	800a314 <HAL_GPIO_Init+0x1ec>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a49      	ldr	r2, [pc, #292]	; (800a420 <HAL_GPIO_Init+0x2f8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d007      	beq.n	800a310 <HAL_GPIO_Init+0x1e8>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a48      	ldr	r2, [pc, #288]	; (800a424 <HAL_GPIO_Init+0x2fc>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d101      	bne.n	800a30c <HAL_GPIO_Init+0x1e4>
 800a308:	2305      	movs	r3, #5
 800a30a:	e00a      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a30c:	2306      	movs	r3, #6
 800a30e:	e008      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a310:	2304      	movs	r3, #4
 800a312:	e006      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a314:	2303      	movs	r3, #3
 800a316:	e004      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a318:	2302      	movs	r3, #2
 800a31a:	e002      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <HAL_GPIO_Init+0x1fa>
 800a320:	2300      	movs	r3, #0
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	f002 0203 	and.w	r2, r2, #3
 800a328:	0092      	lsls	r2, r2, #2
 800a32a:	4093      	lsls	r3, r2
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a332:	4937      	ldr	r1, [pc, #220]	; (800a410 <HAL_GPIO_Init+0x2e8>)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	3302      	adds	r3, #2
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a340:	4b39      	ldr	r3, [pc, #228]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	43db      	mvns	r3, r3
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4013      	ands	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a364:	4a30      	ldr	r2, [pc, #192]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a36a:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	43db      	mvns	r3, r3
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4013      	ands	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a38e:	4a26      	ldr	r2, [pc, #152]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a394:	4b24      	ldr	r3, [pc, #144]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	43db      	mvns	r3, r3
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a3be:	4b1a      	ldr	r3, [pc, #104]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3e2:	4a11      	ldr	r2, [pc, #68]	; (800a428 <HAL_GPIO_Init+0x300>)
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f47f ae9d 	bne.w	800a138 <HAL_GPIO_Init+0x10>
  }
}
 800a3fe:	bf00      	nop
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	40021000 	.word	0x40021000
 800a410:	40010000 	.word	0x40010000
 800a414:	48000400 	.word	0x48000400
 800a418:	48000800 	.word	0x48000800
 800a41c:	48000c00 	.word	0x48000c00
 800a420:	48001000 	.word	0x48001000
 800a424:	48001400 	.word	0x48001400
 800a428:	40010400 	.word	0x40010400

0800a42c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	807b      	strh	r3, [r7, #2]
 800a438:	4613      	mov	r3, r2
 800a43a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a43c:	787b      	ldrb	r3, [r7, #1]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a442:	887a      	ldrh	r2, [r7, #2]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a448:	e002      	b.n	800a450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d141      	bne.n	800a4ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a46a:	4b4b      	ldr	r3, [pc, #300]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a476:	d131      	bne.n	800a4dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a478:	4b47      	ldr	r3, [pc, #284]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a47e:	4a46      	ldr	r2, [pc, #280]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a488:	4b43      	ldr	r3, [pc, #268]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a490:	4a41      	ldr	r2, [pc, #260]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a498:	4b40      	ldr	r3, [pc, #256]	; (800a59c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2232      	movs	r2, #50	; 0x32
 800a49e:	fb02 f303 	mul.w	r3, r2, r3
 800a4a2:	4a3f      	ldr	r2, [pc, #252]	; (800a5a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	0c9b      	lsrs	r3, r3, #18
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4ae:	e002      	b.n	800a4b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4b6:	4b38      	ldr	r3, [pc, #224]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c2:	d102      	bne.n	800a4ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f2      	bne.n	800a4b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a4ca:	4b33      	ldr	r3, [pc, #204]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4d6:	d158      	bne.n	800a58a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e057      	b.n	800a58c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4e2:	4a2d      	ldr	r2, [pc, #180]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a4ec:	e04d      	b.n	800a58a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f4:	d141      	bne.n	800a57a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a4f6:	4b28      	ldr	r3, [pc, #160]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a502:	d131      	bne.n	800a568 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a504:	4b24      	ldr	r3, [pc, #144]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a50a:	4a23      	ldr	r2, [pc, #140]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a514:	4b20      	ldr	r3, [pc, #128]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a51c:	4a1e      	ldr	r2, [pc, #120]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a51e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a524:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2232      	movs	r2, #50	; 0x32
 800a52a:	fb02 f303 	mul.w	r3, r2, r3
 800a52e:	4a1c      	ldr	r2, [pc, #112]	; (800a5a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a530:	fba2 2303 	umull	r2, r3, r2, r3
 800a534:	0c9b      	lsrs	r3, r3, #18
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a53a:	e002      	b.n	800a542 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3b01      	subs	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a542:	4b15      	ldr	r3, [pc, #84]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a54e:	d102      	bne.n	800a556 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1f2      	bne.n	800a53c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a556:	4b10      	ldr	r3, [pc, #64]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a562:	d112      	bne.n	800a58a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e011      	b.n	800a58c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a568:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a56e:	4a0a      	ldr	r2, [pc, #40]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a578:	e007      	b.n	800a58a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a582:	4a05      	ldr	r2, [pc, #20]	; (800a598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a584:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a588:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	40007000 	.word	0x40007000
 800a59c:	20000ca8 	.word	0x20000ca8
 800a5a0:	431bde83 	.word	0x431bde83

0800a5a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e308      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d075      	beq.n	800a6ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5c2:	4ba3      	ldr	r3, [pc, #652]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f003 030c 	and.w	r3, r3, #12
 800a5ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a5cc:	4ba0      	ldr	r3, [pc, #640]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b0c      	cmp	r3, #12
 800a5da:	d102      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x3e>
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d002      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x44>
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d10b      	bne.n	800a600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5e8:	4b99      	ldr	r3, [pc, #612]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d05b      	beq.n	800a6ac <HAL_RCC_OscConfig+0x108>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d157      	bne.n	800a6ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e2e3      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a608:	d106      	bne.n	800a618 <HAL_RCC_OscConfig+0x74>
 800a60a:	4b91      	ldr	r3, [pc, #580]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a90      	ldr	r2, [pc, #576]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	e01d      	b.n	800a654 <HAL_RCC_OscConfig+0xb0>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a620:	d10c      	bne.n	800a63c <HAL_RCC_OscConfig+0x98>
 800a622:	4b8b      	ldr	r3, [pc, #556]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a8a      	ldr	r2, [pc, #552]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	4b88      	ldr	r3, [pc, #544]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a87      	ldr	r2, [pc, #540]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	e00b      	b.n	800a654 <HAL_RCC_OscConfig+0xb0>
 800a63c:	4b84      	ldr	r3, [pc, #528]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a83      	ldr	r2, [pc, #524]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	4b81      	ldr	r3, [pc, #516]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a80      	ldr	r2, [pc, #512]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a64e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d013      	beq.n	800a684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a65c:	f7fd f9fc 	bl	8007a58 <HAL_GetTick>
 800a660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a662:	e008      	b.n	800a676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a664:	f7fd f9f8 	bl	8007a58 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b64      	cmp	r3, #100	; 0x64
 800a670:	d901      	bls.n	800a676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e2a8      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a676:	4b76      	ldr	r3, [pc, #472]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0f0      	beq.n	800a664 <HAL_RCC_OscConfig+0xc0>
 800a682:	e014      	b.n	800a6ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a684:	f7fd f9e8 	bl	8007a58 <HAL_GetTick>
 800a688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a68a:	e008      	b.n	800a69e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a68c:	f7fd f9e4 	bl	8007a58 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b64      	cmp	r3, #100	; 0x64
 800a698:	d901      	bls.n	800a69e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e294      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a69e:	4b6c      	ldr	r3, [pc, #432]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1f0      	bne.n	800a68c <HAL_RCC_OscConfig+0xe8>
 800a6aa:	e000      	b.n	800a6ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d075      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6ba:	4b65      	ldr	r3, [pc, #404]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f003 030c 	and.w	r3, r3, #12
 800a6c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6c4:	4b62      	ldr	r3, [pc, #392]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b0c      	cmp	r3, #12
 800a6d2:	d102      	bne.n	800a6da <HAL_RCC_OscConfig+0x136>
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d002      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x13c>
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d11f      	bne.n	800a720 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6e0:	4b5b      	ldr	r3, [pc, #364]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x154>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e267      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6f8:	4b55      	ldr	r3, [pc, #340]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	061b      	lsls	r3, r3, #24
 800a706:	4952      	ldr	r1, [pc, #328]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a70c:	4b51      	ldr	r3, [pc, #324]	; (800a854 <HAL_RCC_OscConfig+0x2b0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f7fd f955 	bl	80079c0 <HAL_InitTick>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d043      	beq.n	800a7a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e253      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d023      	beq.n	800a770 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a728:	4b49      	ldr	r3, [pc, #292]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a48      	ldr	r2, [pc, #288]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a72e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7fd f990 	bl	8007a58 <HAL_GetTick>
 800a738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a73c:	f7fd f98c 	bl	8007a58 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e23c      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a74e:	4b40      	ldr	r3, [pc, #256]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0f0      	beq.n	800a73c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a75a:	4b3d      	ldr	r3, [pc, #244]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	061b      	lsls	r3, r3, #24
 800a768:	4939      	ldr	r1, [pc, #228]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	604b      	str	r3, [r1, #4]
 800a76e:	e01a      	b.n	800a7a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a770:	4b37      	ldr	r3, [pc, #220]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a36      	ldr	r2, [pc, #216]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a77c:	f7fd f96c 	bl	8007a58 <HAL_GetTick>
 800a780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a782:	e008      	b.n	800a796 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a784:	f7fd f968 	bl	8007a58 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d901      	bls.n	800a796 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e218      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a796:	4b2e      	ldr	r3, [pc, #184]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f0      	bne.n	800a784 <HAL_RCC_OscConfig+0x1e0>
 800a7a2:	e000      	b.n	800a7a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d03c      	beq.n	800a82c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d01c      	beq.n	800a7f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7ba:	4b25      	ldr	r3, [pc, #148]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7c0:	4a23      	ldr	r2, [pc, #140]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a7c2:	f043 0301 	orr.w	r3, r3, #1
 800a7c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ca:	f7fd f945 	bl	8007a58 <HAL_GetTick>
 800a7ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a7d0:	e008      	b.n	800a7e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7d2:	f7fd f941 	bl	8007a58 <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d901      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e1f1      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a7e4:	4b1a      	ldr	r3, [pc, #104]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a7e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0ef      	beq.n	800a7d2 <HAL_RCC_OscConfig+0x22e>
 800a7f2:	e01b      	b.n	800a82c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7f4:	4b16      	ldr	r3, [pc, #88]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a7f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7fa:	4a15      	ldr	r2, [pc, #84]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a7fc:	f023 0301 	bic.w	r3, r3, #1
 800a800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a804:	f7fd f928 	bl	8007a58 <HAL_GetTick>
 800a808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a80c:	f7fd f924 	bl	8007a58 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e1d4      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1ef      	bne.n	800a80c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80ab 	beq.w	800a990 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a83a:	2300      	movs	r3, #0
 800a83c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a83e:	4b04      	ldr	r3, [pc, #16]	; (800a850 <HAL_RCC_OscConfig+0x2ac>)
 800a840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <HAL_RCC_OscConfig+0x2b4>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e005      	b.n	800a85a <HAL_RCC_OscConfig+0x2b6>
 800a84e:	bf00      	nop
 800a850:	40021000 	.word	0x40021000
 800a854:	20000cac 	.word	0x20000cac
 800a858:	2300      	movs	r3, #0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a85e:	4baf      	ldr	r3, [pc, #700]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a862:	4aae      	ldr	r2, [pc, #696]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a868:	6593      	str	r3, [r2, #88]	; 0x58
 800a86a:	4bac      	ldr	r3, [pc, #688]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a876:	2301      	movs	r3, #1
 800a878:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a87a:	4ba9      	ldr	r3, [pc, #676]	; (800ab20 <HAL_RCC_OscConfig+0x57c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a882:	2b00      	cmp	r3, #0
 800a884:	d118      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a886:	4ba6      	ldr	r3, [pc, #664]	; (800ab20 <HAL_RCC_OscConfig+0x57c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4aa5      	ldr	r2, [pc, #660]	; (800ab20 <HAL_RCC_OscConfig+0x57c>)
 800a88c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a892:	f7fd f8e1 	bl	8007a58 <HAL_GetTick>
 800a896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a898:	e008      	b.n	800a8ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a89a:	f7fd f8dd 	bl	8007a58 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e18d      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8ac:	4b9c      	ldr	r3, [pc, #624]	; (800ab20 <HAL_RCC_OscConfig+0x57c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0f0      	beq.n	800a89a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d108      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x32e>
 800a8c0:	4b96      	ldr	r3, [pc, #600]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c6:	4a95      	ldr	r2, [pc, #596]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8c8:	f043 0301 	orr.w	r3, r3, #1
 800a8cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8d0:	e024      	b.n	800a91c <HAL_RCC_OscConfig+0x378>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d110      	bne.n	800a8fc <HAL_RCC_OscConfig+0x358>
 800a8da:	4b90      	ldr	r3, [pc, #576]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e0:	4a8e      	ldr	r2, [pc, #568]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8e2:	f043 0304 	orr.w	r3, r3, #4
 800a8e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8ea:	4b8c      	ldr	r3, [pc, #560]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f0:	4a8a      	ldr	r2, [pc, #552]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8fa:	e00f      	b.n	800a91c <HAL_RCC_OscConfig+0x378>
 800a8fc:	4b87      	ldr	r3, [pc, #540]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a902:	4a86      	ldr	r2, [pc, #536]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a904:	f023 0301 	bic.w	r3, r3, #1
 800a908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a90c:	4b83      	ldr	r3, [pc, #524]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a912:	4a82      	ldr	r2, [pc, #520]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a914:	f023 0304 	bic.w	r3, r3, #4
 800a918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d016      	beq.n	800a952 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a924:	f7fd f898 	bl	8007a58 <HAL_GetTick>
 800a928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a92a:	e00a      	b.n	800a942 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a92c:	f7fd f894 	bl	8007a58 <HAL_GetTick>
 800a930:	4602      	mov	r2, r0
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	f241 3288 	movw	r2, #5000	; 0x1388
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e142      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a942:	4b76      	ldr	r3, [pc, #472]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0ed      	beq.n	800a92c <HAL_RCC_OscConfig+0x388>
 800a950:	e015      	b.n	800a97e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a952:	f7fd f881 	bl	8007a58 <HAL_GetTick>
 800a956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a958:	e00a      	b.n	800a970 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95a:	f7fd f87d 	bl	8007a58 <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	f241 3288 	movw	r2, #5000	; 0x1388
 800a968:	4293      	cmp	r3, r2
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e12b      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a970:	4b6a      	ldr	r3, [pc, #424]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ed      	bne.n	800a95a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a97e:	7ffb      	ldrb	r3, [r7, #31]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d105      	bne.n	800a990 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a984:	4b65      	ldr	r3, [pc, #404]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a988:	4a64      	ldr	r2, [pc, #400]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a98a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a98e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d03c      	beq.n	800aa16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01c      	beq.n	800a9de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9a4:	4b5d      	ldr	r3, [pc, #372]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a9a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9aa:	4a5c      	ldr	r2, [pc, #368]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a9ac:	f043 0301 	orr.w	r3, r3, #1
 800a9b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b4:	f7fd f850 	bl	8007a58 <HAL_GetTick>
 800a9b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a9ba:	e008      	b.n	800a9ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9bc:	f7fd f84c 	bl	8007a58 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e0fc      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a9ce:	4b53      	ldr	r3, [pc, #332]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a9d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0ef      	beq.n	800a9bc <HAL_RCC_OscConfig+0x418>
 800a9dc:	e01b      	b.n	800aa16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9de:	4b4f      	ldr	r3, [pc, #316]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a9e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9e4:	4a4d      	ldr	r2, [pc, #308]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ee:	f7fd f833 	bl	8007a58 <HAL_GetTick>
 800a9f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9f6:	f7fd f82f 	bl	8007a58 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e0df      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa08:	4b44      	ldr	r3, [pc, #272]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1ef      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 80d3 	beq.w	800abc6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa20:	4b3e      	ldr	r3, [pc, #248]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 030c 	and.w	r3, r3, #12
 800aa28:	2b0c      	cmp	r3, #12
 800aa2a:	f000 808d 	beq.w	800ab48 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d15a      	bne.n	800aaec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa36:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a38      	ldr	r2, [pc, #224]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa42:	f7fd f809 	bl	8007a58 <HAL_GetTick>
 800aa46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa48:	e008      	b.n	800aa5c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa4a:	f7fd f805 	bl	8007a58 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d901      	bls.n	800aa5c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e0b5      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa5c:	4b2f      	ldr	r3, [pc, #188]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f0      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa68:	4b2c      	ldr	r3, [pc, #176]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <HAL_RCC_OscConfig+0x580>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6a11      	ldr	r1, [r2, #32]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa78:	3a01      	subs	r2, #1
 800aa7a:	0112      	lsls	r2, r2, #4
 800aa7c:	4311      	orrs	r1, r2
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aa82:	0212      	lsls	r2, r2, #8
 800aa84:	4311      	orrs	r1, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa8a:	0852      	lsrs	r2, r2, #1
 800aa8c:	3a01      	subs	r2, #1
 800aa8e:	0552      	lsls	r2, r2, #21
 800aa90:	4311      	orrs	r1, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa96:	0852      	lsrs	r2, r2, #1
 800aa98:	3a01      	subs	r2, #1
 800aa9a:	0652      	lsls	r2, r2, #25
 800aa9c:	4311      	orrs	r1, r2
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aaa2:	06d2      	lsls	r2, r2, #27
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	491d      	ldr	r1, [pc, #116]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaac:	4b1b      	ldr	r3, [pc, #108]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a1a      	ldr	r2, [pc, #104]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aab6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aab8:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	4a17      	ldr	r2, [pc, #92]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aabe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aac2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac4:	f7fc ffc8 	bl	8007a58 <HAL_GetTick>
 800aac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aaca:	e008      	b.n	800aade <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aacc:	f7fc ffc4 	bl	8007a58 <HAL_GetTick>
 800aad0:	4602      	mov	r2, r0
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d901      	bls.n	800aade <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e074      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aade:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0f0      	beq.n	800aacc <HAL_RCC_OscConfig+0x528>
 800aaea:	e06c      	b.n	800abc6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaec:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0a      	ldr	r2, [pc, #40]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aaf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaf6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800aaf8:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	4a07      	ldr	r2, [pc, #28]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4a04      	ldr	r2, [pc, #16]	; (800ab1c <HAL_RCC_OscConfig+0x578>)
 800ab0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ab0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab14:	f7fc ffa0 	bl	8007a58 <HAL_GetTick>
 800ab18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab1a:	e00e      	b.n	800ab3a <HAL_RCC_OscConfig+0x596>
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	40007000 	.word	0x40007000
 800ab24:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab28:	f7fc ff96 	bl	8007a58 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e046      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab3a:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <HAL_RCC_OscConfig+0x62c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_OscConfig+0x584>
 800ab46:	e03e      	b.n	800abc6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d101      	bne.n	800ab54 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e039      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ab54:	4b1e      	ldr	r3, [pc, #120]	; (800abd0 <HAL_RCC_OscConfig+0x62c>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f003 0203 	and.w	r2, r3, #3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d12c      	bne.n	800abc2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	3b01      	subs	r3, #1
 800ab74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d123      	bne.n	800abc2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d11b      	bne.n	800abc2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d113      	bne.n	800abc2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	3b01      	subs	r3, #1
 800aba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800abaa:	429a      	cmp	r2, r3
 800abac:	d109      	bne.n	800abc2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb8:	085b      	lsrs	r3, r3, #1
 800abba:	3b01      	subs	r3, #1
 800abbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d001      	beq.n	800abc6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	40021000 	.word	0x40021000

0800abd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800abde:	2300      	movs	r3, #0
 800abe0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e11e      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abec:	4b91      	ldr	r3, [pc, #580]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d910      	bls.n	800ac1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfa:	4b8e      	ldr	r3, [pc, #568]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f023 020f 	bic.w	r2, r3, #15
 800ac02:	498c      	ldr	r1, [pc, #560]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac0a:	4b8a      	ldr	r3, [pc, #552]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d001      	beq.n	800ac1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e106      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d073      	beq.n	800ad10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d129      	bne.n	800ac84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac30:	4b81      	ldr	r3, [pc, #516]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e0f4      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ac40:	f000 f972 	bl	800af28 <RCC_GetSysClockFreqFromPLLSource>
 800ac44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4a7c      	ldr	r2, [pc, #496]	; (800ae3c <HAL_RCC_ClockConfig+0x268>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d93f      	bls.n	800acce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ac4e:	4b7a      	ldr	r3, [pc, #488]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d033      	beq.n	800acce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d12f      	bne.n	800acce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ac6e:	4b72      	ldr	r3, [pc, #456]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac76:	4a70      	ldr	r2, [pc, #448]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ac7e:	2380      	movs	r3, #128	; 0x80
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	e024      	b.n	800acce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d107      	bne.n	800ac9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac8c:	4b6a      	ldr	r3, [pc, #424]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d109      	bne.n	800acac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e0c6      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac9c:	4b66      	ldr	r3, [pc, #408]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e0be      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800acac:	f000 f8ce 	bl	800ae4c <HAL_RCC_GetSysClockFreq>
 800acb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	4a61      	ldr	r2, [pc, #388]	; (800ae3c <HAL_RCC_ClockConfig+0x268>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d909      	bls.n	800acce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800acba:	4b5f      	ldr	r3, [pc, #380]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acc2:	4a5d      	ldr	r2, [pc, #372]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800acc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800acca:	2380      	movs	r3, #128	; 0x80
 800accc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acce:	4b5a      	ldr	r3, [pc, #360]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f023 0203 	bic.w	r2, r3, #3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	4957      	ldr	r1, [pc, #348]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace0:	f7fc feba 	bl	8007a58 <HAL_GetTick>
 800ace4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ace6:	e00a      	b.n	800acfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ace8:	f7fc feb6 	bl	8007a58 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e095      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acfe:	4b4e      	ldr	r3, [pc, #312]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f003 020c 	and.w	r2, r3, #12
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d1eb      	bne.n	800ace8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d023      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d005      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad28:	4b43      	ldr	r3, [pc, #268]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	4a42      	ldr	r2, [pc, #264]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0308 	and.w	r3, r3, #8
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ad40:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad48:	4a3b      	ldr	r2, [pc, #236]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad50:	4b39      	ldr	r3, [pc, #228]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	4936      	ldr	r1, [pc, #216]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	608b      	str	r3, [r1, #8]
 800ad62:	e008      	b.n	800ad76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b80      	cmp	r3, #128	; 0x80
 800ad68:	d105      	bne.n	800ad76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ad6a:	4b33      	ldr	r3, [pc, #204]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	4a32      	ldr	r2, [pc, #200]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ad70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad76:	4b2f      	ldr	r3, [pc, #188]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d21d      	bcs.n	800adc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad84:	4b2b      	ldr	r3, [pc, #172]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f023 020f 	bic.w	r2, r3, #15
 800ad8c:	4929      	ldr	r1, [pc, #164]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ad94:	f7fc fe60 	bl	8007a58 <HAL_GetTick>
 800ad98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad9a:	e00a      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad9c:	f7fc fe5c 	bl	8007a58 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adaa:	4293      	cmp	r3, r2
 800adac:	d901      	bls.n	800adb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e03b      	b.n	800ae2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adb2:	4b20      	ldr	r3, [pc, #128]	; (800ae34 <HAL_RCC_ClockConfig+0x260>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 030f 	and.w	r3, r3, #15
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d1ed      	bne.n	800ad9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adcc:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	4917      	ldr	r1, [pc, #92]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800adda:	4313      	orrs	r3, r2
 800addc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800adea:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	490f      	ldr	r1, [pc, #60]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800adfe:	f000 f825 	bl	800ae4c <HAL_RCC_GetSysClockFreq>
 800ae02:	4601      	mov	r1, r0
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <HAL_RCC_ClockConfig+0x264>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	091b      	lsrs	r3, r3, #4
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	4a0c      	ldr	r2, [pc, #48]	; (800ae40 <HAL_RCC_ClockConfig+0x26c>)
 800ae10:	5cd3      	ldrb	r3, [r2, r3]
 800ae12:	f003 031f 	and.w	r3, r3, #31
 800ae16:	fa21 f303 	lsr.w	r3, r1, r3
 800ae1a:	4a0a      	ldr	r2, [pc, #40]	; (800ae44 <HAL_RCC_ClockConfig+0x270>)
 800ae1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <HAL_RCC_ClockConfig+0x274>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fc fdcc 	bl	80079c0 <HAL_InitTick>
 800ae28:	4603      	mov	r3, r0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	40022000 	.word	0x40022000
 800ae38:	40021000 	.word	0x40021000
 800ae3c:	04c4b400 	.word	0x04c4b400
 800ae40:	08012974 	.word	0x08012974
 800ae44:	20000ca8 	.word	0x20000ca8
 800ae48:	20000cac 	.word	0x20000cac

0800ae4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ae52:	4b2c      	ldr	r3, [pc, #176]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 030c 	and.w	r3, r3, #12
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d102      	bne.n	800ae64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ae5e:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	e047      	b.n	800aef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ae64:	4b27      	ldr	r3, [pc, #156]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f003 030c 	and.w	r3, r3, #12
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d102      	bne.n	800ae76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ae70:	4b26      	ldr	r3, [pc, #152]	; (800af0c <HAL_RCC_GetSysClockFreq+0xc0>)
 800ae72:	613b      	str	r3, [r7, #16]
 800ae74:	e03e      	b.n	800aef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ae76:	4b23      	ldr	r3, [pc, #140]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f003 030c 	and.w	r3, r3, #12
 800ae7e:	2b0c      	cmp	r3, #12
 800ae80:	d136      	bne.n	800aef0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae82:	4b20      	ldr	r3, [pc, #128]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae8c:	4b1d      	ldr	r3, [pc, #116]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	091b      	lsrs	r3, r3, #4
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	3301      	adds	r3, #1
 800ae98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d10c      	bne.n	800aeba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aea0:	4a1a      	ldr	r2, [pc, #104]	; (800af0c <HAL_RCC_GetSysClockFreq+0xc0>)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea8:	4a16      	ldr	r2, [pc, #88]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aeaa:	68d2      	ldr	r2, [r2, #12]
 800aeac:	0a12      	lsrs	r2, r2, #8
 800aeae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	617b      	str	r3, [r7, #20]
      break;
 800aeb8:	e00c      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aeba:	4a13      	ldr	r2, [pc, #76]	; (800af08 <HAL_RCC_GetSysClockFreq+0xbc>)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec2:	4a10      	ldr	r2, [pc, #64]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aec4:	68d2      	ldr	r2, [r2, #12]
 800aec6:	0a12      	lsrs	r2, r2, #8
 800aec8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aecc:	fb02 f303 	mul.w	r3, r2, r3
 800aed0:	617b      	str	r3, [r7, #20]
      break;
 800aed2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aed4:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	0e5b      	lsrs	r3, r3, #25
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	3301      	adds	r3, #1
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeec:	613b      	str	r3, [r7, #16]
 800aeee:	e001      	b.n	800aef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800aef4:	693b      	ldr	r3, [r7, #16]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	371c      	adds	r7, #28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	40021000 	.word	0x40021000
 800af08:	00f42400 	.word	0x00f42400
 800af0c:	007a1200 	.word	0x007a1200

0800af10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af14:	4b03      	ldr	r3, [pc, #12]	; (800af24 <HAL_RCC_GetHCLKFreq+0x14>)
 800af16:	681b      	ldr	r3, [r3, #0]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000ca8 	.word	0x20000ca8

0800af28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af2e:	4b1e      	ldr	r3, [pc, #120]	; (800afa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af38:	4b1b      	ldr	r3, [pc, #108]	; (800afa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	091b      	lsrs	r3, r3, #4
 800af3e:	f003 030f 	and.w	r3, r3, #15
 800af42:	3301      	adds	r3, #1
 800af44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d10c      	bne.n	800af66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af4c:	4a17      	ldr	r2, [pc, #92]	; (800afac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	fbb2 f3f3 	udiv	r3, r2, r3
 800af54:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af56:	68d2      	ldr	r2, [r2, #12]
 800af58:	0a12      	lsrs	r2, r2, #8
 800af5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af5e:	fb02 f303 	mul.w	r3, r2, r3
 800af62:	617b      	str	r3, [r7, #20]
    break;
 800af64:	e00c      	b.n	800af80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af66:	4a12      	ldr	r2, [pc, #72]	; (800afb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6e:	4a0e      	ldr	r2, [pc, #56]	; (800afa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af70:	68d2      	ldr	r2, [r2, #12]
 800af72:	0a12      	lsrs	r2, r2, #8
 800af74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af78:	fb02 f303 	mul.w	r3, r2, r3
 800af7c:	617b      	str	r3, [r7, #20]
    break;
 800af7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	0e5b      	lsrs	r3, r3, #25
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	3301      	adds	r3, #1
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	fbb2 f3f3 	udiv	r3, r2, r3
 800af98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800af9a:	687b      	ldr	r3, [r7, #4]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	40021000 	.word	0x40021000
 800afac:	007a1200 	.word	0x007a1200
 800afb0:	00f42400 	.word	0x00f42400

0800afb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afbc:	2300      	movs	r3, #0
 800afbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afc0:	2300      	movs	r3, #0
 800afc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8098 	beq.w	800b102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afd2:	2300      	movs	r3, #0
 800afd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afd6:	4b43      	ldr	r3, [pc, #268]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10d      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afe2:	4b40      	ldr	r3, [pc, #256]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe6:	4a3f      	ldr	r2, [pc, #252]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afec:	6593      	str	r3, [r2, #88]	; 0x58
 800afee:	4b3d      	ldr	r3, [pc, #244]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff6:	60bb      	str	r3, [r7, #8]
 800aff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800affa:	2301      	movs	r3, #1
 800affc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800affe:	4b3a      	ldr	r3, [pc, #232]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a39      	ldr	r2, [pc, #228]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b00a:	f7fc fd25 	bl	8007a58 <HAL_GetTick>
 800b00e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b010:	e009      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b012:	f7fc fd21 	bl	8007a58 <HAL_GetTick>
 800b016:	4602      	mov	r2, r0
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d902      	bls.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	74fb      	strb	r3, [r7, #19]
        break;
 800b024:	e005      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b026:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0ef      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b032:	7cfb      	ldrb	r3, [r7, #19]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d159      	bne.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b038:	4b2a      	ldr	r3, [pc, #168]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b03e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b042:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01e      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	429a      	cmp	r2, r3
 800b052:	d019      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b054:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b05e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b060:	4b20      	ldr	r3, [pc, #128]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b066:	4a1f      	ldr	r2, [pc, #124]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b06c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b070:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b076:	4a1b      	ldr	r2, [pc, #108]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b07c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b080:	4a18      	ldr	r2, [pc, #96]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d016      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b092:	f7fc fce1 	bl	8007a58 <HAL_GetTick>
 800b096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b098:	e00b      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b09a:	f7fc fcdd 	bl	8007a58 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d902      	bls.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	74fb      	strb	r3, [r7, #19]
            break;
 800b0b0:	e006      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d0ec      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b0c0:	7cfb      	ldrb	r3, [r7, #19]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0c6:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d4:	4903      	ldr	r1, [pc, #12]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b0dc:	e008      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0de:	7cfb      	ldrb	r3, [r7, #19]
 800b0e0:	74bb      	strb	r3, [r7, #18]
 800b0e2:	e005      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b0e4:	40021000 	.word	0x40021000
 800b0e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ec:	7cfb      	ldrb	r3, [r7, #19]
 800b0ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0f0:	7c7b      	ldrb	r3, [r7, #17]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d105      	bne.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0f6:	4baf      	ldr	r3, [pc, #700]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fa:	4aae      	ldr	r2, [pc, #696]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b10e:	4ba9      	ldr	r3, [pc, #676]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b114:	f023 0203 	bic.w	r2, r3, #3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	49a5      	ldr	r1, [pc, #660]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b130:	4ba0      	ldr	r3, [pc, #640]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b136:	f023 020c 	bic.w	r2, r3, #12
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	499d      	ldr	r1, [pc, #628]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b140:	4313      	orrs	r3, r2
 800b142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b152:	4b98      	ldr	r3, [pc, #608]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4994      	ldr	r1, [pc, #592]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b162:	4313      	orrs	r3, r2
 800b164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0308 	and.w	r3, r3, #8
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00a      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b174:	4b8f      	ldr	r3, [pc, #572]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	498c      	ldr	r1, [pc, #560]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b184:	4313      	orrs	r3, r2
 800b186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b196:	4b87      	ldr	r3, [pc, #540]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	4983      	ldr	r1, [pc, #524]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0320 	and.w	r3, r3, #32
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00a      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1b8:	4b7e      	ldr	r3, [pc, #504]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	497b      	ldr	r1, [pc, #492]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1da:	4b76      	ldr	r3, [pc, #472]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	4972      	ldr	r1, [pc, #456]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00a      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b1fc:	4b6d      	ldr	r3, [pc, #436]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b202:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	496a      	ldr	r1, [pc, #424]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b21e:	4b65      	ldr	r3, [pc, #404]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22c:	4961      	ldr	r1, [pc, #388]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b22e:	4313      	orrs	r3, r2
 800b230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00a      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b240:	4b5c      	ldr	r3, [pc, #368]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b246:	f023 0203 	bic.w	r2, r3, #3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24e:	4959      	ldr	r1, [pc, #356]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b250:	4313      	orrs	r3, r2
 800b252:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00a      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b262:	4b54      	ldr	r3, [pc, #336]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b270:	4950      	ldr	r1, [pc, #320]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b272:	4313      	orrs	r3, r2
 800b274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b280:	2b00      	cmp	r3, #0
 800b282:	d015      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b284:	4b4b      	ldr	r3, [pc, #300]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	4948      	ldr	r1, [pc, #288]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b294:	4313      	orrs	r3, r2
 800b296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2a2:	d105      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2a4:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	4a42      	ldr	r2, [pc, #264]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d015      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b2bc:	4b3d      	ldr	r3, [pc, #244]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ca:	493a      	ldr	r1, [pc, #232]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2da:	d105      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2dc:	4b35      	ldr	r3, [pc, #212]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4a34      	ldr	r2, [pc, #208]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d015      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2f4:	4b2f      	ldr	r3, [pc, #188]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	492c      	ldr	r1, [pc, #176]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b304:	4313      	orrs	r3, r2
 800b306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b312:	d105      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b314:	4b27      	ldr	r3, [pc, #156]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4a26      	ldr	r2, [pc, #152]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b31e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d015      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b32c:	4b21      	ldr	r3, [pc, #132]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33a:	491e      	ldr	r1, [pc, #120]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b34a:	d105      	bne.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b34c:	4b19      	ldr	r3, [pc, #100]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	4a18      	ldr	r2, [pc, #96]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b356:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d015      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b364:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	4910      	ldr	r1, [pc, #64]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b382:	d105      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b384:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4a0a      	ldr	r2, [pc, #40]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b38a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b38e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d018      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b39c:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	4902      	ldr	r1, [pc, #8]	; (800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b3b2:	e001      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b3b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3c0:	d105      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b3c2:	4b21      	ldr	r3, [pc, #132]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	4a20      	ldr	r2, [pc, #128]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b3c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d015      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b3da:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e8:	4917      	ldr	r1, [pc, #92]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f8:	d105      	bne.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b3fa:	4b13      	ldr	r3, [pc, #76]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b404:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d015      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b412:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b420:	4909      	ldr	r1, [pc, #36]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b422:	4313      	orrs	r3, r2
 800b424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b430:	d105      	bne.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b432:	4b05      	ldr	r3, [pc, #20]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	4a04      	ldr	r2, [pc, #16]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b43c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b43e:	7cbb      	ldrb	r3, [r7, #18]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	40021000 	.word	0x40021000

0800b44c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e084      	b.n	800b568 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7fb fd2b 	bl	8006ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2202      	movs	r2, #2
 800b482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b494:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b49e:	d902      	bls.n	800b4a6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]
 800b4a4:	e002      	b.n	800b4ac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b4b4:	d007      	beq.n	800b4c6 <HAL_SPI_Init+0x7a>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4be:	d002      	beq.n	800b4c6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10b      	bne.n	800b4e6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4d6:	d903      	bls.n	800b4e0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	631a      	str	r2, [r3, #48]	; 0x30
 800b4de:	e002      	b.n	800b4e6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a1b      	ldr	r3, [r3, #32]
 800b510:	ea42 0103 	orr.w	r1, r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	f003 0204 	and.w	r2, r3, #4
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	431a      	orrs	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	ea42 0103 	orr.w	r1, r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	430a      	orrs	r2, r1
 800b546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69da      	ldr	r2, [r3, #28]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e049      	b.n	800b616 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7fc f914 	bl	80077c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	f000 fc38 	bl	800be24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b01      	cmp	r3, #1
 800b632:	d001      	beq.n	800b638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e019      	b.n	800b66c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2202      	movs	r2, #2
 800b63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689a      	ldr	r2, [r3, #8]
 800b646:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <HAL_TIM_Base_Start+0x58>)
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b06      	cmp	r3, #6
 800b650:	d00b      	beq.n	800b66a <HAL_TIM_Base_Start+0x4a>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b658:	d007      	beq.n	800b66a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0201 	orr.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	00010007 	.word	0x00010007

0800b67c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6a1a      	ldr	r2, [r3, #32]
 800b68a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b68e:	4013      	ands	r3, r2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10f      	bne.n	800b6b4 <HAL_TIM_Base_Stop+0x38>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6a1a      	ldr	r2, [r3, #32]
 800b69a:	f244 4344 	movw	r3, #17476	; 0x4444
 800b69e:	4013      	ands	r3, r2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d107      	bne.n	800b6b4 <HAL_TIM_Base_Stop+0x38>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0201 	bic.w	r2, r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
	...

0800b6cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d001      	beq.n	800b6e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e021      	b.n	800b728 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f042 0201 	orr.w	r2, r2, #1
 800b6fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	4b0c      	ldr	r3, [pc, #48]	; (800b734 <HAL_TIM_Base_Start_IT+0x68>)
 800b704:	4013      	ands	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	d00b      	beq.n	800b726 <HAL_TIM_Base_Start_IT+0x5a>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b714:	d007      	beq.n	800b726 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	00010007 	.word	0x00010007

0800b738 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f022 0201 	bic.w	r2, r2, #1
 800b74e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6a1a      	ldr	r2, [r3, #32]
 800b756:	f241 1311 	movw	r3, #4369	; 0x1111
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10f      	bne.n	800b780 <HAL_TIM_Base_Stop_IT+0x48>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a1a      	ldr	r2, [r3, #32]
 800b766:	f244 4344 	movw	r3, #17476	; 0x4444
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d107      	bne.n	800b780 <HAL_TIM_Base_Stop_IT+0x48>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0201 	bic.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e097      	b.n	800b8da <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7fb ffb4 	bl	800772c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6812      	ldr	r2, [r2, #0]
 800b7d6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800b7da:	f023 0307 	bic.w	r3, r3, #7
 800b7de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	f000 fb1a 	bl	800be24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	021b      	lsls	r3, r3, #8
 800b828:	4313      	orrs	r3, r2
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b836:	f023 030c 	bic.w	r3, r3, #12
 800b83a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	4313      	orrs	r3, r2
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	011a      	lsls	r2, r3, #4
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	031b      	lsls	r3, r3, #12
 800b866:	4313      	orrs	r3, r2
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b874:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b87c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4313      	orrs	r3, r2
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	f003 0302 	and.w	r3, r3, #2
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d122      	bne.n	800b93e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b02      	cmp	r3, #2
 800b904:	d11b      	bne.n	800b93e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f06f 0202 	mvn.w	r2, #2
 800b90e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	f003 0303 	and.w	r3, r3, #3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fa5f 	bl	800bde8 <HAL_TIM_IC_CaptureCallback>
 800b92a:	e005      	b.n	800b938 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fa51 	bl	800bdd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fa62 	bl	800bdfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d122      	bne.n	800b992 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	f003 0304 	and.w	r3, r3, #4
 800b956:	2b04      	cmp	r3, #4
 800b958:	d11b      	bne.n	800b992 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f06f 0204 	mvn.w	r2, #4
 800b962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fa35 	bl	800bde8 <HAL_TIM_IC_CaptureCallback>
 800b97e:	e005      	b.n	800b98c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fa27 	bl	800bdd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa38 	bl	800bdfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b08      	cmp	r3, #8
 800b99e:	d122      	bne.n	800b9e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f003 0308 	and.w	r3, r3, #8
 800b9aa:	2b08      	cmp	r3, #8
 800b9ac:	d11b      	bne.n	800b9e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f06f 0208 	mvn.w	r2, #8
 800b9b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2204      	movs	r2, #4
 800b9bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f003 0303 	and.w	r3, r3, #3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fa0b 	bl	800bde8 <HAL_TIM_IC_CaptureCallback>
 800b9d2:	e005      	b.n	800b9e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f9fd 	bl	800bdd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fa0e 	bl	800bdfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	f003 0310 	and.w	r3, r3, #16
 800b9f0:	2b10      	cmp	r3, #16
 800b9f2:	d122      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	f003 0310 	and.w	r3, r3, #16
 800b9fe:	2b10      	cmp	r3, #16
 800ba00:	d11b      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f06f 0210 	mvn.w	r2, #16
 800ba0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2208      	movs	r2, #8
 800ba10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f9e1 	bl	800bde8 <HAL_TIM_IC_CaptureCallback>
 800ba26:	e005      	b.n	800ba34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f9d3 	bl	800bdd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9e4 	bl	800bdfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d10e      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d107      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f06f 0201 	mvn.w	r2, #1
 800ba5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9ad 	bl	800bdc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba70:	2b80      	cmp	r3, #128	; 0x80
 800ba72:	d10e      	bne.n	800ba92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d107      	bne.n	800ba92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fc5f 	bl	800c350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baa0:	d10e      	bne.n	800bac0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baac:	2b80      	cmp	r3, #128	; 0x80
 800baae:	d107      	bne.n	800bac0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fc52 	bl	800c364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baca:	2b40      	cmp	r3, #64	; 0x40
 800bacc:	d10e      	bne.n	800baec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b40      	cmp	r3, #64	; 0x40
 800bada:	d107      	bne.n	800baec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f992 	bl	800be10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	f003 0320 	and.w	r3, r3, #32
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	d10e      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	f003 0320 	and.w	r3, r3, #32
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d107      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f06f 0220 	mvn.w	r2, #32
 800bb10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fc12 	bl	800c33c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb26:	d10f      	bne.n	800bb48 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb36:	d107      	bne.n	800bb48 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bb40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fc18 	bl	800c378 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb56:	d10f      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb66:	d107      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bb70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fc0a 	bl	800c38c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb86:	d10f      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb96:	d107      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fbfc 	bl	800c3a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbb6:	d10f      	bne.n	800bbd8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbc6:	d107      	bne.n	800bbd8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bbd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fbee 	bl	800c3b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbd8:	bf00      	nop
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d101      	bne.n	800bbf8 <HAL_TIM_ConfigClockSource+0x18>
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e0d2      	b.n	800bd9e <HAL_TIM_ConfigClockSource+0x1be>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800bc16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc34:	f000 80a9 	beq.w	800bd8a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc3c:	d81a      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x94>
 800bc3e:	2b30      	cmp	r3, #48	; 0x30
 800bc40:	f000 809a 	beq.w	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc44:	2b30      	cmp	r3, #48	; 0x30
 800bc46:	d809      	bhi.n	800bc5c <HAL_TIM_ConfigClockSource+0x7c>
 800bc48:	2b10      	cmp	r3, #16
 800bc4a:	f000 8095 	beq.w	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc4e:	2b20      	cmp	r3, #32
 800bc50:	f000 8092 	beq.w	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 808f 	beq.w	800bd78 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bc5a:	e097      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bc5c:	2b50      	cmp	r3, #80	; 0x50
 800bc5e:	d05b      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x138>
 800bc60:	2b50      	cmp	r3, #80	; 0x50
 800bc62:	d802      	bhi.n	800bc6a <HAL_TIM_ConfigClockSource+0x8a>
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	d077      	beq.n	800bd58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bc68:	e090      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bc6a:	2b60      	cmp	r3, #96	; 0x60
 800bc6c:	d064      	beq.n	800bd38 <HAL_TIM_ConfigClockSource+0x158>
 800bc6e:	2b70      	cmp	r3, #112	; 0x70
 800bc70:	d028      	beq.n	800bcc4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800bc72:	e08b      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bc74:	4a4c      	ldr	r2, [pc, #304]	; (800bda8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d07e      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc7a:	4a4b      	ldr	r2, [pc, #300]	; (800bda8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d810      	bhi.n	800bca2 <HAL_TIM_ConfigClockSource+0xc2>
 800bc80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc84:	d078      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc8a:	d803      	bhi.n	800bc94 <HAL_TIM_ConfigClockSource+0xb4>
 800bc8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc90:	d02f      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800bc92:	e07b      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bc94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bc98:	d06e      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bc9a:	4a44      	ldr	r2, [pc, #272]	; (800bdac <HAL_TIM_ConfigClockSource+0x1cc>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d06b      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bca0:	e074      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bca2:	4a43      	ldr	r2, [pc, #268]	; (800bdb0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d067      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bca8:	4a41      	ldr	r2, [pc, #260]	; (800bdb0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d803      	bhi.n	800bcb6 <HAL_TIM_ConfigClockSource+0xd6>
 800bcae:	4a41      	ldr	r2, [pc, #260]	; (800bdb4 <HAL_TIM_ConfigClockSource+0x1d4>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d061      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bcb4:	e06a      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bcb6:	4a40      	ldr	r2, [pc, #256]	; (800bdb8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d05d      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
 800bcbc:	4a3f      	ldr	r2, [pc, #252]	; (800bdbc <HAL_TIM_ConfigClockSource+0x1dc>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d05a      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bcc2:	e063      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	6899      	ldr	r1, [r3, #8]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f000 f9ca 	bl	800c06c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bce6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	609a      	str	r2, [r3, #8]
      break;
 800bcf0:	e04c      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6818      	ldr	r0, [r3, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	6899      	ldr	r1, [r3, #8]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f000 f9b3 	bl	800c06c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd14:	609a      	str	r2, [r3, #8]
      break;
 800bd16:	e039      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	6859      	ldr	r1, [r3, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	461a      	mov	r2, r3
 800bd26:	f000 f925 	bl	800bf74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2150      	movs	r1, #80	; 0x50
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 f97e 	bl	800c032 <TIM_ITRx_SetConfig>
      break;
 800bd36:	e029      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	6859      	ldr	r1, [r3, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	461a      	mov	r2, r3
 800bd46:	f000 f944 	bl	800bfd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2160      	movs	r1, #96	; 0x60
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 f96e 	bl	800c032 <TIM_ITRx_SetConfig>
      break;
 800bd56:	e019      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	6859      	ldr	r1, [r3, #4]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	461a      	mov	r2, r3
 800bd66:	f000 f905 	bl	800bf74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2140      	movs	r1, #64	; 0x40
 800bd70:	4618      	mov	r0, r3
 800bd72:	f000 f95e 	bl	800c032 <TIM_ITRx_SetConfig>
      break;
 800bd76:	e009      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f000 f955 	bl	800c032 <TIM_ITRx_SetConfig>
      break;
 800bd88:	e000      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800bd8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	00100030 	.word	0x00100030
 800bdac:	00100020 	.word	0x00100020
 800bdb0:	00100050 	.word	0x00100050
 800bdb4:	00100040 	.word	0x00100040
 800bdb8:	00100060 	.word	0x00100060
 800bdbc:	00100070 	.word	0x00100070

0800bdc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a46      	ldr	r2, [pc, #280]	; (800bf50 <TIM_Base_SetConfig+0x12c>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d017      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be42:	d013      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a43      	ldr	r2, [pc, #268]	; (800bf54 <TIM_Base_SetConfig+0x130>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d00f      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a42      	ldr	r2, [pc, #264]	; (800bf58 <TIM_Base_SetConfig+0x134>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d00b      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a41      	ldr	r2, [pc, #260]	; (800bf5c <TIM_Base_SetConfig+0x138>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d007      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a40      	ldr	r2, [pc, #256]	; (800bf60 <TIM_Base_SetConfig+0x13c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d003      	beq.n	800be6c <TIM_Base_SetConfig+0x48>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a3f      	ldr	r2, [pc, #252]	; (800bf64 <TIM_Base_SetConfig+0x140>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d108      	bne.n	800be7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a33      	ldr	r2, [pc, #204]	; (800bf50 <TIM_Base_SetConfig+0x12c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d023      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be8c:	d01f      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a30      	ldr	r2, [pc, #192]	; (800bf54 <TIM_Base_SetConfig+0x130>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d01b      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a2f      	ldr	r2, [pc, #188]	; (800bf58 <TIM_Base_SetConfig+0x134>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d017      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a2e      	ldr	r2, [pc, #184]	; (800bf5c <TIM_Base_SetConfig+0x138>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d013      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a2d      	ldr	r2, [pc, #180]	; (800bf60 <TIM_Base_SetConfig+0x13c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d00f      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a2d      	ldr	r2, [pc, #180]	; (800bf68 <TIM_Base_SetConfig+0x144>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00b      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a2c      	ldr	r2, [pc, #176]	; (800bf6c <TIM_Base_SetConfig+0x148>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d007      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a2b      	ldr	r2, [pc, #172]	; (800bf70 <TIM_Base_SetConfig+0x14c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d003      	beq.n	800bece <TIM_Base_SetConfig+0xaa>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a26      	ldr	r2, [pc, #152]	; (800bf64 <TIM_Base_SetConfig+0x140>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d108      	bne.n	800bee0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4313      	orrs	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	4313      	orrs	r3, r2
 800beec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a12      	ldr	r2, [pc, #72]	; (800bf50 <TIM_Base_SetConfig+0x12c>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d013      	beq.n	800bf34 <TIM_Base_SetConfig+0x110>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a14      	ldr	r2, [pc, #80]	; (800bf60 <TIM_Base_SetConfig+0x13c>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d00f      	beq.n	800bf34 <TIM_Base_SetConfig+0x110>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <TIM_Base_SetConfig+0x144>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d00b      	beq.n	800bf34 <TIM_Base_SetConfig+0x110>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a13      	ldr	r2, [pc, #76]	; (800bf6c <TIM_Base_SetConfig+0x148>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d007      	beq.n	800bf34 <TIM_Base_SetConfig+0x110>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a12      	ldr	r2, [pc, #72]	; (800bf70 <TIM_Base_SetConfig+0x14c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d003      	beq.n	800bf34 <TIM_Base_SetConfig+0x110>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a0d      	ldr	r2, [pc, #52]	; (800bf64 <TIM_Base_SetConfig+0x140>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d103      	bne.n	800bf3c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	691a      	ldr	r2, [r3, #16]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	615a      	str	r2, [r3, #20]
}
 800bf42:	bf00      	nop
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	40012c00 	.word	0x40012c00
 800bf54:	40000400 	.word	0x40000400
 800bf58:	40000800 	.word	0x40000800
 800bf5c:	40000c00 	.word	0x40000c00
 800bf60:	40013400 	.word	0x40013400
 800bf64:	40015000 	.word	0x40015000
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800

0800bf74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f023 0201 	bic.w	r2, r3, #1
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f023 030a 	bic.w	r3, r3, #10
 800bfb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	621a      	str	r2, [r3, #32]
}
 800bfc6:	bf00      	nop
 800bfc8:	371c      	adds	r7, #28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b087      	sub	sp, #28
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	f023 0210 	bic.w	r2, r3, #16
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	031b      	lsls	r3, r3, #12
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	4313      	orrs	r3, r2
 800c006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c00e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	621a      	str	r2, [r3, #32]
}
 800c026:	bf00      	nop
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c04c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4313      	orrs	r3, r2
 800c054:	f043 0307 	orr.w	r3, r3, #7
 800c058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	609a      	str	r2, [r3, #8]
}
 800c060:	bf00      	nop
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	021a      	lsls	r2, r3, #8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	431a      	orrs	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	4313      	orrs	r3, r2
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	609a      	str	r2, [r3, #8]
}
 800c0a0:	bf00      	nop
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e074      	b.n	800c1ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a34      	ldr	r2, [pc, #208]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d009      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a33      	ldr	r2, [pc, #204]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d004      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a31      	ldr	r2, [pc, #196]	; (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d108      	bne.n	800c114 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	4313      	orrs	r3, r2
 800c128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a21      	ldr	r2, [pc, #132]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d022      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c144:	d01d      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a1f      	ldr	r2, [pc, #124]	; (800c1c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d018      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a1d      	ldr	r2, [pc, #116]	; (800c1cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d013      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a1c      	ldr	r2, [pc, #112]	; (800c1d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d00e      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a15      	ldr	r2, [pc, #84]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d009      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d004      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a11      	ldr	r2, [pc, #68]	; (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d10c      	bne.n	800c19c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	4313      	orrs	r3, r2
 800c192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	40012c00 	.word	0x40012c00
 800c1c0:	40013400 	.word	0x40013400
 800c1c4:	40015000 	.word	0x40015000
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	40000800 	.word	0x40000800
 800c1d0:	40000c00 	.word	0x40000c00
 800c1d4:	40014000 	.word	0x40014000

0800c1d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d101      	bne.n	800c1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	e096      	b.n	800c322 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	4313      	orrs	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	4313      	orrs	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4313      	orrs	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	041b      	lsls	r3, r3, #16
 800c26a:	4313      	orrs	r3, r2
 800c26c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a2f      	ldr	r2, [pc, #188]	; (800c330 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d009      	beq.n	800c28c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a2d      	ldr	r2, [pc, #180]	; (800c334 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d004      	beq.n	800c28c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a2c      	ldr	r2, [pc, #176]	; (800c338 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d106      	bne.n	800c29a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a24      	ldr	r2, [pc, #144]	; (800c330 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d009      	beq.n	800c2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a22      	ldr	r2, [pc, #136]	; (800c334 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d004      	beq.n	800c2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a21      	ldr	r2, [pc, #132]	; (800c338 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d12b      	bne.n	800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	051b      	lsls	r3, r3, #20
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a11      	ldr	r2, [pc, #68]	; (800c330 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d009      	beq.n	800c302 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d004      	beq.n	800c302 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a0e      	ldr	r2, [pc, #56]	; (800c338 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d106      	bne.n	800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30c:	4313      	orrs	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	40012c00 	.word	0x40012c00
 800c334:	40013400 	.word	0x40013400
 800c338:	40015000 	.word	0x40015000

0800c33c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <LL_EXTI_EnableIT_0_31>:
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c3d0:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <LL_EXTI_EnableIT_0_31+0x20>)
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	4904      	ldr	r1, [pc, #16]	; (800c3e8 <LL_EXTI_EnableIT_0_31+0x20>)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	600b      	str	r3, [r1, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	40010400 	.word	0x40010400

0800c3ec <LL_EXTI_EnableIT_32_63>:
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <LL_EXTI_EnableIT_32_63+0x20>)
 800c3f6:	6a1a      	ldr	r2, [r3, #32]
 800c3f8:	4904      	ldr	r1, [pc, #16]	; (800c40c <LL_EXTI_EnableIT_32_63+0x20>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	620b      	str	r3, [r1, #32]
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	40010400 	.word	0x40010400

0800c410 <LL_EXTI_DisableIT_0_31>:
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c418:	4b06      	ldr	r3, [pc, #24]	; (800c434 <LL_EXTI_DisableIT_0_31+0x24>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	43db      	mvns	r3, r3
 800c420:	4904      	ldr	r1, [pc, #16]	; (800c434 <LL_EXTI_DisableIT_0_31+0x24>)
 800c422:	4013      	ands	r3, r2
 800c424:	600b      	str	r3, [r1, #0]
}
 800c426:	bf00      	nop
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	40010400 	.word	0x40010400

0800c438 <LL_EXTI_DisableIT_32_63>:
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800c440:	4b06      	ldr	r3, [pc, #24]	; (800c45c <LL_EXTI_DisableIT_32_63+0x24>)
 800c442:	6a1a      	ldr	r2, [r3, #32]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	43db      	mvns	r3, r3
 800c448:	4904      	ldr	r1, [pc, #16]	; (800c45c <LL_EXTI_DisableIT_32_63+0x24>)
 800c44a:	4013      	ands	r3, r2
 800c44c:	620b      	str	r3, [r1, #32]
}
 800c44e:	bf00      	nop
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	40010400 	.word	0x40010400

0800c460 <LL_EXTI_EnableEvent_0_31>:
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	4904      	ldr	r1, [pc, #16]	; (800c480 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4313      	orrs	r3, r2
 800c472:	604b      	str	r3, [r1, #4]
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	40010400 	.word	0x40010400

0800c484 <LL_EXTI_EnableEvent_32_63>:
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800c48c:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800c48e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c490:	4904      	ldr	r1, [pc, #16]	; (800c4a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4313      	orrs	r3, r2
 800c496:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	40010400 	.word	0x40010400

0800c4a8 <LL_EXTI_DisableEvent_0_31>:
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800c4b0:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <LL_EXTI_DisableEvent_0_31+0x24>)
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	43db      	mvns	r3, r3
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <LL_EXTI_DisableEvent_0_31+0x24>)
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	604b      	str	r3, [r1, #4]
}
 800c4be:	bf00      	nop
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	40010400 	.word	0x40010400

0800c4d0 <LL_EXTI_DisableEvent_32_63>:
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800c4d8:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800c4da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	43db      	mvns	r3, r3
 800c4e0:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c4e6:	bf00      	nop
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	40010400 	.word	0x40010400

0800c4f8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c500:	4b05      	ldr	r3, [pc, #20]	; (800c518 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	4904      	ldr	r1, [pc, #16]	; (800c518 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4313      	orrs	r3, r2
 800c50a:	608b      	str	r3, [r1, #8]
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	40010400 	.word	0x40010400

0800c51c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c528:	4904      	ldr	r1, [pc, #16]	; (800c53c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	40010400 	.word	0x40010400

0800c540 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c548:	4b06      	ldr	r3, [pc, #24]	; (800c564 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	43db      	mvns	r3, r3
 800c550:	4904      	ldr	r1, [pc, #16]	; (800c564 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c552:	4013      	ands	r3, r2
 800c554:	608b      	str	r3, [r1, #8]
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	40010400 	.word	0x40010400

0800c568 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	43db      	mvns	r3, r3
 800c578:	4904      	ldr	r1, [pc, #16]	; (800c58c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	40010400 	.word	0x40010400

0800c590 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c59a:	68da      	ldr	r2, [r3, #12]
 800c59c:	4904      	ldr	r1, [pc, #16]	; (800c5b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	60cb      	str	r3, [r1, #12]
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	40010400 	.word	0x40010400

0800c5b4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800c5bc:	4b05      	ldr	r3, [pc, #20]	; (800c5d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	4904      	ldr	r1, [pc, #16]	; (800c5d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr
 800c5d4:	40010400 	.word	0x40010400

0800c5d8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	43db      	mvns	r3, r3
 800c5e8:	4904      	ldr	r1, [pc, #16]	; (800c5fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	60cb      	str	r3, [r1, #12]
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	40010400 	.word	0x40010400

0800c600 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800c608:	4b06      	ldr	r3, [pc, #24]	; (800c624 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800c60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	43db      	mvns	r3, r3
 800c610:	4904      	ldr	r1, [pc, #16]	; (800c624 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800c612:	4013      	ands	r3, r2
 800c614:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40010400 	.word	0x40010400

0800c628 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7a1b      	ldrb	r3, [r3, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 80c8 	beq.w	800c7ce <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d05d      	beq.n	800c702 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	7a5b      	ldrb	r3, [r3, #9]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d00e      	beq.n	800c66c <LL_EXTI_Init+0x44>
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d017      	beq.n	800c682 <LL_EXTI_Init+0x5a>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d120      	bne.n	800c698 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff ff24 	bl	800c4a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff feaf 	bl	800c3c8 <LL_EXTI_EnableIT_0_31>
          break;
 800c66a:	e018      	b.n	800c69e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fecd 	bl	800c410 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff fef0 	bl	800c460 <LL_EXTI_EnableEvent_0_31>
          break;
 800c680:	e00d      	b.n	800c69e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff fe9e 	bl	800c3c8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fee5 	bl	800c460 <LL_EXTI_EnableEvent_0_31>
          break;
 800c696:	e002      	b.n	800c69e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800c698:	2301      	movs	r3, #1
 800c69a:	60fb      	str	r3, [r7, #12]
          break;
 800c69c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7a9b      	ldrb	r3, [r3, #10]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d02d      	beq.n	800c702 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7a9b      	ldrb	r3, [r3, #10]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d00e      	beq.n	800c6cc <LL_EXTI_Init+0xa4>
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d017      	beq.n	800c6e2 <LL_EXTI_Init+0xba>
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d120      	bne.n	800c6f8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff ff8c 	bl	800c5d8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff ff17 	bl	800c4f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800c6ca:	e01b      	b.n	800c704 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff ff35 	bl	800c540 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff ff58 	bl	800c590 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800c6e0:	e010      	b.n	800c704 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ff06 	bl	800c4f8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff ff4d 	bl	800c590 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800c6f6:	e005      	b.n	800c704 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f043 0302 	orr.w	r3, r3, #2
 800c6fe:	60fb      	str	r3, [r7, #12]
            break;
 800c700:	e000      	b.n	800c704 <LL_EXTI_Init+0xdc>
        }
      }
 800c702:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d075      	beq.n	800c7f8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	7a5b      	ldrb	r3, [r3, #9]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d00e      	beq.n	800c732 <LL_EXTI_Init+0x10a>
 800c714:	2b02      	cmp	r3, #2
 800c716:	d017      	beq.n	800c748 <LL_EXTI_Init+0x120>
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d120      	bne.n	800c75e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff fed5 	bl	800c4d0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fe5e 	bl	800c3ec <LL_EXTI_EnableIT_32_63>
          break;
 800c730:	e01a      	b.n	800c768 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fe7e 	bl	800c438 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff fe9f 	bl	800c484 <LL_EXTI_EnableEvent_32_63>
          break;
 800c746:	e00f      	b.n	800c768 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fe4d 	bl	800c3ec <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff fe94 	bl	800c484 <LL_EXTI_EnableEvent_32_63>
          break;
 800c75c:	e004      	b.n	800c768 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f043 0304 	orr.w	r3, r3, #4
 800c764:	60fb      	str	r3, [r7, #12]
          break;
 800c766:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7a9b      	ldrb	r3, [r3, #10]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d043      	beq.n	800c7f8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7a9b      	ldrb	r3, [r3, #10]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d00e      	beq.n	800c796 <LL_EXTI_Init+0x16e>
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d017      	beq.n	800c7ac <LL_EXTI_Init+0x184>
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d120      	bne.n	800c7c2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff ff3b 	bl	800c600 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff fec4 	bl	800c51c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800c794:	e031      	b.n	800c7fa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fee4 	bl	800c568 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff ff05 	bl	800c5b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800c7aa:	e026      	b.n	800c7fa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff feb3 	bl	800c51c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7ff fefa 	bl	800c5b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800c7c0:	e01b      	b.n	800c7fa <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f043 0305 	orr.w	r3, r3, #5
 800c7c8:	60fb      	str	r3, [r7, #12]
            break;
 800c7ca:	bf00      	nop
 800c7cc:	e015      	b.n	800c7fa <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fe1c 	bl	800c410 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff fe63 	bl	800c4a8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fe26 	bl	800c438 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fe6d 	bl	800c4d0 <LL_EXTI_DisableEvent_32_63>
 800c7f6:	e000      	b.n	800c7fa <LL_EXTI_Init+0x1d2>
      }
 800c7f8:	bf00      	nop
  }

  return status;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <LL_GPIO_SetPinMode>:
{
 800c804:	b480      	push	{r7}
 800c806:	b089      	sub	sp, #36	; 0x24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	fa93 f3a3 	rbit	r3, r3
 800c81e:	613b      	str	r3, [r7, #16]
  return result;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	fab3 f383 	clz	r3, r3
 800c826:	b2db      	uxtb	r3, r3
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	2103      	movs	r1, #3
 800c82c:	fa01 f303 	lsl.w	r3, r1, r3
 800c830:	43db      	mvns	r3, r3
 800c832:	401a      	ands	r2, r3
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	fa93 f3a3 	rbit	r3, r3
 800c83e:	61bb      	str	r3, [r7, #24]
  return result;
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	fab3 f383 	clz	r3, r3
 800c846:	b2db      	uxtb	r3, r3
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	fa01 f303 	lsl.w	r3, r1, r3
 800c850:	431a      	orrs	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	601a      	str	r2, [r3, #0]
}
 800c856:	bf00      	nop
 800c858:	3724      	adds	r7, #36	; 0x24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <LL_GPIO_SetPinOutputType>:
{
 800c862:	b480      	push	{r7}
 800c864:	b085      	sub	sp, #20
 800c866:	af00      	add	r7, sp, #0
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	43db      	mvns	r3, r3
 800c876:	401a      	ands	r2, r3
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	6879      	ldr	r1, [r7, #4]
 800c87c:	fb01 f303 	mul.w	r3, r1, r3
 800c880:	431a      	orrs	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	605a      	str	r2, [r3, #4]
}
 800c886:	bf00      	nop
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <LL_GPIO_SetPinSpeed>:
{
 800c892:	b480      	push	{r7}
 800c894:	b089      	sub	sp, #36	; 0x24
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	689a      	ldr	r2, [r3, #8]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	fa93 f3a3 	rbit	r3, r3
 800c8ac:	613b      	str	r3, [r7, #16]
  return result;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	fab3 f383 	clz	r3, r3
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	2103      	movs	r1, #3
 800c8ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c8be:	43db      	mvns	r3, r3
 800c8c0:	401a      	ands	r2, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	fa93 f3a3 	rbit	r3, r3
 800c8cc:	61bb      	str	r3, [r7, #24]
  return result;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	fab3 f383 	clz	r3, r3
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	fa01 f303 	lsl.w	r3, r1, r3
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	609a      	str	r2, [r3, #8]
}
 800c8e4:	bf00      	nop
 800c8e6:	3724      	adds	r7, #36	; 0x24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <LL_GPIO_SetPinPull>:
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b089      	sub	sp, #36	; 0x24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	fa93 f3a3 	rbit	r3, r3
 800c90a:	613b      	str	r3, [r7, #16]
  return result;
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	fab3 f383 	clz	r3, r3
 800c912:	b2db      	uxtb	r3, r3
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	2103      	movs	r1, #3
 800c918:	fa01 f303 	lsl.w	r3, r1, r3
 800c91c:	43db      	mvns	r3, r3
 800c91e:	401a      	ands	r2, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	fa93 f3a3 	rbit	r3, r3
 800c92a:	61bb      	str	r3, [r7, #24]
  return result;
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	fab3 f383 	clz	r3, r3
 800c932:	b2db      	uxtb	r3, r3
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	fa01 f303 	lsl.w	r3, r1, r3
 800c93c:	431a      	orrs	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	60da      	str	r2, [r3, #12]
}
 800c942:	bf00      	nop
 800c944:	3724      	adds	r7, #36	; 0x24
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <LL_GPIO_SetAFPin_0_7>:
{
 800c94e:	b480      	push	{r7}
 800c950:	b089      	sub	sp, #36	; 0x24
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6a1a      	ldr	r2, [r3, #32]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	fa93 f3a3 	rbit	r3, r3
 800c968:	613b      	str	r3, [r7, #16]
  return result;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	fab3 f383 	clz	r3, r3
 800c970:	b2db      	uxtb	r3, r3
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	210f      	movs	r1, #15
 800c976:	fa01 f303 	lsl.w	r3, r1, r3
 800c97a:	43db      	mvns	r3, r3
 800c97c:	401a      	ands	r2, r3
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	fa93 f3a3 	rbit	r3, r3
 800c988:	61bb      	str	r3, [r7, #24]
  return result;
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	fab3 f383 	clz	r3, r3
 800c990:	b2db      	uxtb	r3, r3
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	6879      	ldr	r1, [r7, #4]
 800c996:	fa01 f303 	lsl.w	r3, r1, r3
 800c99a:	431a      	orrs	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	621a      	str	r2, [r3, #32]
}
 800c9a0:	bf00      	nop
 800c9a2:	3724      	adds	r7, #36	; 0x24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <LL_GPIO_SetAFPin_8_15>:
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b089      	sub	sp, #36	; 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	fa93 f3a3 	rbit	r3, r3
 800c9c8:	613b      	str	r3, [r7, #16]
  return result;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	fab3 f383 	clz	r3, r3
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	210f      	movs	r1, #15
 800c9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9da:	43db      	mvns	r3, r3
 800c9dc:	401a      	ands	r2, r3
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	0a1b      	lsrs	r3, r3, #8
 800c9e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	fa93 f3a3 	rbit	r3, r3
 800c9ea:	61bb      	str	r3, [r7, #24]
  return result;
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	fab3 f383 	clz	r3, r3
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ca02:	bf00      	nop
 800ca04:	3724      	adds	r7, #36	; 0x24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b086      	sub	sp, #24
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	fa93 f3a3 	rbit	r3, r3
 800ca24:	60bb      	str	r3, [r7, #8]
  return result;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	fab3 f383 	clz	r3, r3
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ca30:	e040      	b.n	800cab4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	2101      	movs	r1, #1
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca3e:	4013      	ands	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d032      	beq.n	800caae <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6939      	ldr	r1, [r7, #16]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff fed7 	bl	800c804 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d003      	beq.n	800ca66 <LL_GPIO_Init+0x58>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d106      	bne.n	800ca74 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6939      	ldr	r1, [r7, #16]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff ff0f 	bl	800c892 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	6939      	ldr	r1, [r7, #16]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff ff37 	bl	800c8f0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d111      	bne.n	800caae <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	2bff      	cmp	r3, #255	; 0xff
 800ca8e:	d807      	bhi.n	800caa0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	461a      	mov	r2, r3
 800ca96:	6939      	ldr	r1, [r7, #16]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff ff58 	bl	800c94e <LL_GPIO_SetAFPin_0_7>
 800ca9e:	e006      	b.n	800caae <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	461a      	mov	r2, r3
 800caa6:	6939      	ldr	r1, [r7, #16]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7ff ff7f 	bl	800c9ac <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	3301      	adds	r3, #1
 800cab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	fa22 f303 	lsr.w	r3, r2, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1b7      	bne.n	800ca32 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d003      	beq.n	800cad2 <LL_GPIO_Init+0xc4>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d107      	bne.n	800cae2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	6819      	ldr	r1, [r3, #0]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	461a      	mov	r2, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff fec0 	bl	800c862 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800caec:	b590      	push	{r4, r7, lr}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4604      	mov	r4, r0
 800caf4:	4608      	mov	r0, r1
 800caf6:	4611      	mov	r1, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	4623      	mov	r3, r4
 800cafc:	80fb      	strh	r3, [r7, #6]
 800cafe:	4603      	mov	r3, r0
 800cb00:	80bb      	strh	r3, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
 800cb06:	4613      	mov	r3, r2
 800cb08:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e026      	b.n	800cb5e <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800cb10:	2300      	movs	r3, #0
 800cb12:	60bb      	str	r3, [r7, #8]
 800cb14:	e01c      	b.n	800cb50 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	b298      	uxth	r0, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb26:	4413      	add	r3, r2
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	88bb      	ldrh	r3, [r7, #4]
 800cb36:	4413      	add	r3, r2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	4413      	add	r3, r2
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	883a      	ldrh	r2, [r7, #0]
 800cb44:	4619      	mov	r1, r3
 800cb46:	f000 fc1f 	bl	800d388 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	60bb      	str	r3, [r7, #8]
 800cb50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	dbde      	blt.n	800cb16 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	60fb      	str	r3, [r7, #12]
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	dbd4      	blt.n	800cb10 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800cb66:	bf00      	nop
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd90      	pop	{r4, r7, pc}

0800cb6e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800cb6e:	b590      	push	{r4, r7, lr}
 800cb70:	b087      	sub	sp, #28
 800cb72:	af02      	add	r7, sp, #8
 800cb74:	4604      	mov	r4, r0
 800cb76:	4608      	mov	r0, r1
 800cb78:	4611      	mov	r1, r2
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	4623      	mov	r3, r4
 800cb7e:	80fb      	strh	r3, [r7, #6]
 800cb80:	4603      	mov	r3, r0
 800cb82:	80bb      	strh	r3, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	807b      	strh	r3, [r7, #2]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800cb90:	7bfa      	ldrb	r2, [r7, #15]
 800cb92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d939      	bls.n	800cc0e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800cb9a:	88ba      	ldrh	r2, [r7, #4]
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
 800cb9e:	441a      	add	r2, r3
 800cba0:	88b9      	ldrh	r1, [r7, #4]
 800cba2:	883b      	ldrh	r3, [r7, #0]
 800cba4:	4419      	add	r1, r3
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	1acb      	subs	r3, r1, r3
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	f000 8089 	beq.w	800ccc2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800cbb0:	88fa      	ldrh	r2, [r7, #6]
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	441a      	add	r2, r3
 800cbb6:	88f9      	ldrh	r1, [r7, #6]
 800cbb8:	887b      	ldrh	r3, [r7, #2]
 800cbba:	4419      	add	r1, r3
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
 800cbbe:	1acb      	subs	r3, r1, r3
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d07e      	beq.n	800ccc2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
 800cbca:	4413      	add	r3, r2
 800cbcc:	b298      	uxth	r0, r3
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	88bb      	ldrh	r3, [r7, #4]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	b299      	uxth	r1, r3
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	005b      	lsls	r3, r3, #1
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	887a      	ldrh	r2, [r7, #2]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b29c      	uxth	r4, r3
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	883a      	ldrh	r2, [r7, #0]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	8c3b      	ldrh	r3, [r7, #32]
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	4622      	mov	r2, r4
 800cc08:	f000 fd18 	bl	800d63c <ILI9341_Draw_Rectangle>
				goto finish;
 800cc0c:	e05a      	b.n	800ccc4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	88fb      	ldrh	r3, [r7, #6]
 800cc14:	4413      	add	r3, r2
 800cc16:	b298      	uxth	r0, r3
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	88bb      	ldrh	r3, [r7, #4]
 800cc1e:	4413      	add	r3, r2
 800cc20:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	887a      	ldrh	r2, [r7, #2]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc32:	f000 fa6b 	bl	800d10c <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	88fb      	ldrh	r3, [r7, #6]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	b298      	uxth	r0, r3
										(y + h) - b,
 800cc40:	88ba      	ldrh	r2, [r7, #4]
 800cc42:	883b      	ldrh	r3, [r7, #0]
 800cc44:	4413      	add	r3, r2
 800cc46:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	b299      	uxth	r1, r3
										(w - b)+1,
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	887a      	ldrh	r2, [r7, #2]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc60:	f000 fa54 	bl	800d10c <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	88fb      	ldrh	r3, [r7, #6]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	b298      	uxth	r0, r3
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	88bb      	ldrh	r3, [r7, #4]
 800cc74:	4413      	add	r3, r2
 800cc76:	b299      	uxth	r1, r3
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	883a      	ldrh	r2, [r7, #0]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc88:	f000 faa4 	bl	800d1d4 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800cc8c:	88fa      	ldrh	r2, [r7, #6]
 800cc8e:	887b      	ldrh	r3, [r7, #2]
 800cc90:	4413      	add	r3, r2
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	b298      	uxth	r0, r3
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	88bb      	ldrh	r3, [r7, #4]
 800cca2:	4413      	add	r3, r2
 800cca4:	b299      	uxth	r1, r3
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	883a      	ldrh	r2, [r7, #0]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ccb6:	f000 fa8d 	bl	800d1d4 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800ccc0:	e766      	b.n	800cb90 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800ccc2:	bf00      	nop
	// done
	return;
 800ccc4:	bf00      	nop
}
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd90      	pop	{r4, r7, pc}

0800cccc <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800cccc:	b590      	push	{r4, r7, lr}
 800ccce:	b089      	sub	sp, #36	; 0x24
 800ccd0:	af02      	add	r7, sp, #8
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	461a      	mov	r2, r3
 800ccda:	4623      	mov	r3, r4
 800ccdc:	71fb      	strb	r3, [r7, #7]
 800ccde:	4603      	mov	r3, r0
 800cce0:	80bb      	strh	r3, [r7, #4]
 800cce2:	460b      	mov	r3, r1
 800cce4:	807b      	strh	r3, [r7, #2]
 800cce6:	4613      	mov	r3, r2
 800cce8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800ccea:	79fb      	ldrb	r3, [r7, #7]
 800ccec:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	2b1f      	cmp	r3, #31
 800ccf2:	d802      	bhi.n	800ccfa <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	71fb      	strb	r3, [r7, #7]
 800ccf8:	e002      	b.n	800cd00 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	3b20      	subs	r3, #32
 800ccfe:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800cd00:	2300      	movs	r3, #0
 800cd02:	753b      	strb	r3, [r7, #20]
 800cd04:	e012      	b.n	800cd2c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800cd06:	7dfa      	ldrb	r2, [r7, #23]
 800cd08:	7d38      	ldrb	r0, [r7, #20]
 800cd0a:	7d39      	ldrb	r1, [r7, #20]
 800cd0c:	4c48      	ldr	r4, [pc, #288]	; (800ce30 <ILI9341_Draw_Char+0x164>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	4423      	add	r3, r4
 800cd18:	4403      	add	r3, r0
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	f107 0318 	add.w	r3, r7, #24
 800cd20:	440b      	add	r3, r1
 800cd22:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800cd26:	7d3b      	ldrb	r3, [r7, #20]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	753b      	strb	r3, [r7, #20]
 800cd2c:	7d3b      	ldrb	r3, [r7, #20]
 800cd2e:	2b05      	cmp	r3, #5
 800cd30:	d9e9      	bls.n	800cd06 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800cd32:	2300      	movs	r3, #0
 800cd34:	757b      	strb	r3, [r7, #21]
 800cd36:	e074      	b.n	800ce22 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	75bb      	strb	r3, [r7, #22]
 800cd3c:	e06b      	b.n	800ce16 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800cd3e:	7d7b      	ldrb	r3, [r7, #21]
 800cd40:	f107 0218 	add.w	r2, r7, #24
 800cd44:	4413      	add	r3, r2
 800cd46:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	7dbb      	ldrb	r3, [r7, #22]
 800cd4e:	fa42 f303 	asr.w	r3, r2, r3
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d02d      	beq.n	800cdb6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800cd5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d10e      	bne.n	800cd7e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800cd60:	7d7b      	ldrb	r3, [r7, #21]
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	88bb      	ldrh	r3, [r7, #4]
 800cd66:	4413      	add	r3, r2
 800cd68:	b298      	uxth	r0, r3
 800cd6a:	7dbb      	ldrb	r3, [r7, #22]
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	887b      	ldrh	r3, [r7, #2]
 800cd70:	4413      	add	r3, r2
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	883a      	ldrh	r2, [r7, #0]
 800cd76:	4619      	mov	r1, r3
 800cd78:	f000 fb06 	bl	800d388 <ILI9341_Draw_Pixel>
 800cd7c:	e048      	b.n	800ce10 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800cd7e:	7d7b      	ldrb	r3, [r7, #21]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd84:	fb12 f303 	smulbb	r3, r2, r3
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	88bb      	ldrh	r3, [r7, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	b298      	uxth	r0, r3
 800cd90:	7dbb      	ldrb	r3, [r7, #22]
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd96:	fb12 f303 	smulbb	r3, r2, r3
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	887b      	ldrh	r3, [r7, #2]
 800cd9e:	4413      	add	r3, r2
 800cda0:	b299      	uxth	r1, r3
 800cda2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800cda4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cda6:	2301      	movs	r3, #1
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	883b      	ldrh	r3, [r7, #0]
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	4623      	mov	r3, r4
 800cdb0:	f000 fc44 	bl	800d63c <ILI9341_Draw_Rectangle>
 800cdb4:	e02c      	b.n	800ce10 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800cdb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d10e      	bne.n	800cdda <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800cdbc:	7d7b      	ldrb	r3, [r7, #21]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	88bb      	ldrh	r3, [r7, #4]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	b298      	uxth	r0, r3
 800cdc6:	7dbb      	ldrb	r3, [r7, #22]
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	887b      	ldrh	r3, [r7, #2]
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f000 fad8 	bl	800d388 <ILI9341_Draw_Pixel>
 800cdd8:	e01a      	b.n	800ce10 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800cdda:	7d7b      	ldrb	r3, [r7, #21]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cde0:	fb12 f303 	smulbb	r3, r2, r3
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	88bb      	ldrh	r3, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	b298      	uxth	r0, r3
 800cdec:	7dbb      	ldrb	r3, [r7, #22]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cdf2:	fb12 f303 	smulbb	r3, r2, r3
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	887b      	ldrh	r3, [r7, #2]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	b299      	uxth	r1, r3
 800cdfe:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800ce00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ce02:	2301      	movs	r3, #1
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	f000 fc16 	bl	800d63c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800ce10:	7dbb      	ldrb	r3, [r7, #22]
 800ce12:	3301      	adds	r3, #1
 800ce14:	75bb      	strb	r3, [r7, #22]
 800ce16:	7dbb      	ldrb	r3, [r7, #22]
 800ce18:	2b07      	cmp	r3, #7
 800ce1a:	d990      	bls.n	800cd3e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800ce1c:	7d7b      	ldrb	r3, [r7, #21]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	757b      	strb	r3, [r7, #21]
 800ce22:	7d7b      	ldrb	r3, [r7, #21]
 800ce24:	2b05      	cmp	r3, #5
 800ce26:	d987      	bls.n	800cd38 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800ce28:	bf00      	nop
 800ce2a:	371c      	adds	r7, #28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd90      	pop	{r4, r7, pc}
 800ce30:	08012984 	.word	0x08012984

0800ce34 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	461a      	mov	r2, r3
 800ce42:	4603      	mov	r3, r0
 800ce44:	817b      	strh	r3, [r7, #10]
 800ce46:	460b      	mov	r3, r1
 800ce48:	813b      	strh	r3, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800ce4e:	897b      	ldrh	r3, [r7, #10]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	b298      	uxth	r0, r3
 800ce54:	8c3b      	ldrh	r3, [r7, #32]
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5c:	8939      	ldrh	r1, [r7, #8]
 800ce5e:	f000 f9b9 	bl	800d1d4 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800ce62:	897b      	ldrh	r3, [r7, #10]
 800ce64:	3b02      	subs	r3, #2
 800ce66:	b298      	uxth	r0, r3
 800ce68:	8c3b      	ldrh	r3, [r7, #32]
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce70:	8939      	ldrh	r1, [r7, #8]
 800ce72:	f000 f9af 	bl	800d1d4 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800ce76:	e016      	b.n	800cea6 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	60fa      	str	r2, [r7, #12]
 800ce7e:	7818      	ldrb	r0, [r3, #0]
 800ce80:	88fc      	ldrh	r4, [r7, #6]
 800ce82:	893a      	ldrh	r2, [r7, #8]
 800ce84:	8979      	ldrh	r1, [r7, #10]
 800ce86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	8c3b      	ldrh	r3, [r7, #32]
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	4623      	mov	r3, r4
 800ce90:	f7ff ff1c 	bl	800cccc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800ce94:	8c3b      	ldrh	r3, [r7, #32]
 800ce96:	461a      	mov	r2, r3
 800ce98:	0052      	lsls	r2, r2, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	897b      	ldrh	r3, [r7, #10]
 800cea2:	4413      	add	r3, r2
 800cea4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1e4      	bne.n	800ce78 <ILI9341_Draw_Text+0x44>
    }


}
 800ceae:	bf00      	nop
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd90      	pop	{r4, r7, pc}

0800ceb6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800ceba:	f000 fca3 	bl	800d804 <_LCD_Enable>
	ILI9341_SPI_Init();
 800cebe:	f000 f907 	bl	800d0d0 <ILI9341_SPI_Init>
	_LCD_Reset();
 800cec2:	f000 fcaf 	bl	800d824 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800cec6:	2001      	movs	r0, #1
 800cec8:	f000 fd7a 	bl	800d9c0 <_LCD_SendCommand>
	HAL_Delay(2000);
 800cecc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ced0:	f7fa fdce 	bl	8007a70 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800ced4:	20cb      	movs	r0, #203	; 0xcb
 800ced6:	f000 fd73 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800ceda:	2039      	movs	r0, #57	; 0x39
 800cedc:	f000 fda2 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800cee0:	202c      	movs	r0, #44	; 0x2c
 800cee2:	f000 fd9f 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cee6:	2000      	movs	r0, #0
 800cee8:	f000 fd9c 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x34);
 800ceec:	2034      	movs	r0, #52	; 0x34
 800ceee:	f000 fd99 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x02);
 800cef2:	2002      	movs	r0, #2
 800cef4:	f000 fd96 	bl	800da24 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800cef8:	20cf      	movs	r0, #207	; 0xcf
 800cefa:	f000 fd61 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cefe:	2000      	movs	r0, #0
 800cf00:	f000 fd90 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800cf04:	20c1      	movs	r0, #193	; 0xc1
 800cf06:	f000 fd8d 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x30);
 800cf0a:	2030      	movs	r0, #48	; 0x30
 800cf0c:	f000 fd8a 	bl	800da24 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800cf10:	20e8      	movs	r0, #232	; 0xe8
 800cf12:	f000 fd55 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800cf16:	2085      	movs	r0, #133	; 0x85
 800cf18:	f000 fd84 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f000 fd81 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x78);
 800cf22:	2078      	movs	r0, #120	; 0x78
 800cf24:	f000 fd7e 	bl	800da24 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800cf28:	20ea      	movs	r0, #234	; 0xea
 800cf2a:	f000 fd49 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cf2e:	2000      	movs	r0, #0
 800cf30:	f000 fd78 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cf34:	2000      	movs	r0, #0
 800cf36:	f000 fd75 	bl	800da24 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800cf3a:	20ed      	movs	r0, #237	; 0xed
 800cf3c:	f000 fd40 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800cf40:	2064      	movs	r0, #100	; 0x64
 800cf42:	f000 fd6f 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x03);
 800cf46:	2003      	movs	r0, #3
 800cf48:	f000 fd6c 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x12);
 800cf4c:	2012      	movs	r0, #18
 800cf4e:	f000 fd69 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x81);
 800cf52:	2081      	movs	r0, #129	; 0x81
 800cf54:	f000 fd66 	bl	800da24 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800cf58:	20f7      	movs	r0, #247	; 0xf7
 800cf5a:	f000 fd31 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800cf5e:	2020      	movs	r0, #32
 800cf60:	f000 fd60 	bl	800da24 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800cf64:	20c0      	movs	r0, #192	; 0xc0
 800cf66:	f000 fd2b 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800cf6a:	2023      	movs	r0, #35	; 0x23
 800cf6c:	f000 fd5a 	bl	800da24 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800cf70:	20c1      	movs	r0, #193	; 0xc1
 800cf72:	f000 fd25 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800cf76:	2010      	movs	r0, #16
 800cf78:	f000 fd54 	bl	800da24 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800cf7c:	20c5      	movs	r0, #197	; 0xc5
 800cf7e:	f000 fd1f 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800cf82:	203e      	movs	r0, #62	; 0x3e
 800cf84:	f000 fd4e 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x28);
 800cf88:	2028      	movs	r0, #40	; 0x28
 800cf8a:	f000 fd4b 	bl	800da24 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800cf8e:	20c7      	movs	r0, #199	; 0xc7
 800cf90:	f000 fd16 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800cf94:	2086      	movs	r0, #134	; 0x86
 800cf96:	f000 fd45 	bl	800da24 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800cf9a:	2036      	movs	r0, #54	; 0x36
 800cf9c:	f000 fd10 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800cfa0:	2048      	movs	r0, #72	; 0x48
 800cfa2:	f000 fd3f 	bl	800da24 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800cfa6:	203a      	movs	r0, #58	; 0x3a
 800cfa8:	f000 fd0a 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800cfac:	2055      	movs	r0, #85	; 0x55
 800cfae:	f000 fd39 	bl	800da24 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800cfb2:	20b1      	movs	r0, #177	; 0xb1
 800cfb4:	f000 fd04 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f000 fd33 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x18);
 800cfbe:	2018      	movs	r0, #24
 800cfc0:	f000 fd30 	bl	800da24 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800cfc4:	20b6      	movs	r0, #182	; 0xb6
 800cfc6:	f000 fcfb 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800cfca:	2008      	movs	r0, #8
 800cfcc:	f000 fd2a 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x82);
 800cfd0:	2082      	movs	r0, #130	; 0x82
 800cfd2:	f000 fd27 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x27);
 800cfd6:	2027      	movs	r0, #39	; 0x27
 800cfd8:	f000 fd24 	bl	800da24 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800cfdc:	20f2      	movs	r0, #242	; 0xf2
 800cfde:	f000 fcef 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f000 fd1e 	bl	800da24 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800cfe8:	2026      	movs	r0, #38	; 0x26
 800cfea:	f000 fce9 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800cfee:	2001      	movs	r0, #1
 800cff0:	f000 fd18 	bl	800da24 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800cff4:	20e0      	movs	r0, #224	; 0xe0
 800cff6:	f000 fce3 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800cffa:	200f      	movs	r0, #15
 800cffc:	f000 fd12 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d000:	2031      	movs	r0, #49	; 0x31
 800d002:	f000 fd0f 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d006:	202b      	movs	r0, #43	; 0x2b
 800d008:	f000 fd0c 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d00c:	200c      	movs	r0, #12
 800d00e:	f000 fd09 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d012:	200e      	movs	r0, #14
 800d014:	f000 fd06 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d018:	2008      	movs	r0, #8
 800d01a:	f000 fd03 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d01e:	204e      	movs	r0, #78	; 0x4e
 800d020:	f000 fd00 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d024:	20f1      	movs	r0, #241	; 0xf1
 800d026:	f000 fcfd 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x37);
 800d02a:	2037      	movs	r0, #55	; 0x37
 800d02c:	f000 fcfa 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d030:	2007      	movs	r0, #7
 800d032:	f000 fcf7 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x10);
 800d036:	2010      	movs	r0, #16
 800d038:	f000 fcf4 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d03c:	2003      	movs	r0, #3
 800d03e:	f000 fcf1 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d042:	200e      	movs	r0, #14
 800d044:	f000 fcee 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x09);
 800d048:	2009      	movs	r0, #9
 800d04a:	f000 fceb 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d04e:	2000      	movs	r0, #0
 800d050:	f000 fce8 	bl	800da24 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800d054:	20e1      	movs	r0, #225	; 0xe1
 800d056:	f000 fcb3 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d05a:	2000      	movs	r0, #0
 800d05c:	f000 fce2 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d060:	200e      	movs	r0, #14
 800d062:	f000 fcdf 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x14);
 800d066:	2014      	movs	r0, #20
 800d068:	f000 fcdc 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d06c:	2003      	movs	r0, #3
 800d06e:	f000 fcd9 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x11);
 800d072:	2011      	movs	r0, #17
 800d074:	f000 fcd6 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d078:	2007      	movs	r0, #7
 800d07a:	f000 fcd3 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d07e:	2031      	movs	r0, #49	; 0x31
 800d080:	f000 fcd0 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d084:	20c1      	movs	r0, #193	; 0xc1
 800d086:	f000 fccd 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x48);
 800d08a:	2048      	movs	r0, #72	; 0x48
 800d08c:	f000 fcca 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d090:	2008      	movs	r0, #8
 800d092:	f000 fcc7 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d096:	200f      	movs	r0, #15
 800d098:	f000 fcc4 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d09c:	200c      	movs	r0, #12
 800d09e:	f000 fcc1 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d0a2:	2031      	movs	r0, #49	; 0x31
 800d0a4:	f000 fcbe 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x36);
 800d0a8:	2036      	movs	r0, #54	; 0x36
 800d0aa:	f000 fcbb 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d0ae:	200f      	movs	r0, #15
 800d0b0:	f000 fcb8 	bl	800da24 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800d0b4:	2011      	movs	r0, #17
 800d0b6:	f000 fc83 	bl	800d9c0 <_LCD_SendCommand>
	HAL_Delay(240);
 800d0ba:	20f0      	movs	r0, #240	; 0xf0
 800d0bc:	f7fa fcd8 	bl	8007a70 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800d0c0:	2029      	movs	r0, #41	; 0x29
 800d0c2:	f000 fc7d 	bl	800d9c0 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f000 fb4e 	bl	800d768 <ILI9341_Set_Rotation>
}
 800d0cc:	bf00      	nop
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <ILI9341_SPI_Init+0x34>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0dc:	2b40      	cmp	r3, #64	; 0x40
 800d0de:	d005      	beq.n	800d0ec <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <ILI9341_SPI_Init+0x34>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a07      	ldr	r2, [pc, #28]	; (800d104 <ILI9341_SPI_Init+0x34>)
 800d0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ea:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d0ec:	4b06      	ldr	r3, [pc, #24]	; (800d108 <ILI9341_SPI_Init+0x38>)
 800d0ee:	695b      	ldr	r3, [r3, #20]
 800d0f0:	4a05      	ldr	r2, [pc, #20]	; (800d108 <ILI9341_SPI_Init+0x38>)
 800d0f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0f6:	6153      	str	r3, [r2, #20]
}
 800d0f8:	bf00      	nop
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	40003c00 	.word	0x40003c00
 800d108:	48000400 	.word	0x48000400

0800d10c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b087      	sub	sp, #28
 800d110:	af02      	add	r7, sp, #8
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	461a      	mov	r2, r3
 800d11a:	4623      	mov	r3, r4
 800d11c:	80fb      	strh	r3, [r7, #6]
 800d11e:	4603      	mov	r3, r0
 800d120:	80bb      	strh	r3, [r7, #4]
 800d122:	460b      	mov	r3, r1
 800d124:	807b      	strh	r3, [r7, #2]
 800d126:	4613      	mov	r3, r2
 800d128:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d12a:	4b28      	ldr	r3, [pc, #160]	; (800d1cc <ILI9341_Draw_Horizontal_Line+0xc0>)
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	88fa      	ldrh	r2, [r7, #6]
 800d132:	429a      	cmp	r2, r3
 800d134:	d246      	bcs.n	800d1c4 <ILI9341_Draw_Horizontal_Line+0xb8>
 800d136:	4b26      	ldr	r3, [pc, #152]	; (800d1d0 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	88ba      	ldrh	r2, [r7, #4]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d240      	bcs.n	800d1c4 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800d142:	88fa      	ldrh	r2, [r7, #6]
 800d144:	887b      	ldrh	r3, [r7, #2]
 800d146:	4413      	add	r3, r2
 800d148:	3b01      	subs	r3, #1
 800d14a:	4a20      	ldr	r2, [pc, #128]	; (800d1cc <ILI9341_Draw_Horizontal_Line+0xc0>)
 800d14c:	8812      	ldrh	r2, [r2, #0]
 800d14e:	b292      	uxth	r2, r2
 800d150:	4293      	cmp	r3, r2
 800d152:	db05      	blt.n	800d160 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800d154:	4b1d      	ldr	r3, [pc, #116]	; (800d1cc <ILI9341_Draw_Horizontal_Line+0xc0>)
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	b29a      	uxth	r2, r3
 800d15a:	88fb      	ldrh	r3, [r7, #6]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800d160:	88fa      	ldrh	r2, [r7, #6]
 800d162:	887b      	ldrh	r3, [r7, #2]
 800d164:	4413      	add	r3, r2
 800d166:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d168:	3b01      	subs	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	88bb      	ldrh	r3, [r7, #4]
 800d16e:	88b9      	ldrh	r1, [r7, #4]
 800d170:	88f8      	ldrh	r0, [r7, #6]
 800d172:	f000 f893 	bl	800d29c <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800d17a:	887b      	ldrh	r3, [r7, #2]
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d009      	beq.n	800d198 <ILI9341_Draw_Horizontal_Line+0x8c>
 800d184:	887b      	ldrh	r3, [r7, #2]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d906      	bls.n	800d198 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800d18a:	2301      	movs	r3, #1
 800d18c:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800d18e:	887b      	ldrh	r3, [r7, #2]
 800d190:	085b      	lsrs	r3, r3, #1
 800d192:	b29b      	uxth	r3, r3
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800d198:	887c      	ldrh	r4, [r7, #2]
 800d19a:	883a      	ldrh	r2, [r7, #0]
 800d19c:	88b9      	ldrh	r1, [r7, #4]
 800d19e:	88f8      	ldrh	r0, [r7, #6]
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	4623      	mov	r3, r4
 800d1a6:	f000 fb5b 	bl	800d860 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00a      	beq.n	800d1c6 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800d1b0:	88fa      	ldrh	r2, [r7, #6]
 800d1b2:	887b      	ldrh	r3, [r7, #2]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	883a      	ldrh	r2, [r7, #0]
 800d1ba:	88b9      	ldrh	r1, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 f8e3 	bl	800d388 <ILI9341_Draw_Pixel>
 800d1c2:	e000      	b.n	800d1c6 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d1c4:	bf00      	nop
							(ypos),
							colour);
	}


}
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd90      	pop	{r4, r7, pc}
 800d1cc:	20000cb6 	.word	0x20000cb6
 800d1d0:	20000cb4 	.word	0x20000cb4

0800d1d4 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800d1d4:	b590      	push	{r4, r7, lr}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	4611      	mov	r1, r2
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	80fb      	strh	r3, [r7, #6]
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	80bb      	strh	r3, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	807b      	strh	r3, [r7, #2]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d1f2:	4b28      	ldr	r3, [pc, #160]	; (800d294 <ILI9341_Draw_Vertical_Line+0xc0>)
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	88fa      	ldrh	r2, [r7, #6]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d246      	bcs.n	800d28c <ILI9341_Draw_Vertical_Line+0xb8>
 800d1fe:	4b26      	ldr	r3, [pc, #152]	; (800d298 <ILI9341_Draw_Vertical_Line+0xc4>)
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	b29b      	uxth	r3, r3
 800d204:	88ba      	ldrh	r2, [r7, #4]
 800d206:	429a      	cmp	r2, r3
 800d208:	d240      	bcs.n	800d28c <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800d20a:	88ba      	ldrh	r2, [r7, #4]
 800d20c:	887b      	ldrh	r3, [r7, #2]
 800d20e:	4413      	add	r3, r2
 800d210:	3b01      	subs	r3, #1
 800d212:	4a21      	ldr	r2, [pc, #132]	; (800d298 <ILI9341_Draw_Vertical_Line+0xc4>)
 800d214:	8812      	ldrh	r2, [r2, #0]
 800d216:	b292      	uxth	r2, r2
 800d218:	4293      	cmp	r3, r2
 800d21a:	db05      	blt.n	800d228 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800d21c:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <ILI9341_Draw_Vertical_Line+0xc4>)
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	b29a      	uxth	r2, r3
 800d222:	88bb      	ldrh	r3, [r7, #4]
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800d228:	88ba      	ldrh	r2, [r7, #4]
 800d22a:	887b      	ldrh	r3, [r7, #2]
 800d22c:	4413      	add	r3, r2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	3b01      	subs	r3, #1
 800d232:	b29b      	uxth	r3, r3
 800d234:	88fa      	ldrh	r2, [r7, #6]
 800d236:	88b9      	ldrh	r1, [r7, #4]
 800d238:	88f8      	ldrh	r0, [r7, #6]
 800d23a:	f000 f82f 	bl	800d29c <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800d242:	887b      	ldrh	r3, [r7, #2]
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <ILI9341_Draw_Vertical_Line+0x8c>
 800d24c:	887b      	ldrh	r3, [r7, #2]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d906      	bls.n	800d260 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800d252:	2301      	movs	r3, #1
 800d254:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800d256:	887b      	ldrh	r3, [r7, #2]
 800d258:	085b      	lsrs	r3, r3, #1
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d008      	beq.n	800d278 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800d266:	88ba      	ldrh	r2, [r7, #4]
 800d268:	887b      	ldrh	r3, [r7, #2]
 800d26a:	4413      	add	r3, r2
 800d26c:	b299      	uxth	r1, r3
 800d26e:	883a      	ldrh	r2, [r7, #0]
 800d270:	88fb      	ldrh	r3, [r7, #6]
 800d272:	4618      	mov	r0, r3
 800d274:	f000 f888 	bl	800d388 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800d278:	887c      	ldrh	r4, [r7, #2]
 800d27a:	883a      	ldrh	r2, [r7, #0]
 800d27c:	88b9      	ldrh	r1, [r7, #4]
 800d27e:	88f8      	ldrh	r0, [r7, #6]
 800d280:	2303      	movs	r3, #3
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	4623      	mov	r3, r4
 800d286:	f000 faeb 	bl	800d860 <_LCD_Write_Frame>
 800d28a:	e000      	b.n	800d28e <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d28c:	bf00      	nop
}
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	bd90      	pop	{r4, r7, pc}
 800d294:	20000cb6 	.word	0x20000cb6
 800d298:	20000cb4 	.word	0x20000cb4

0800d29c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800d29c:	b590      	push	{r4, r7, lr}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4623      	mov	r3, r4
 800d2ac:	80fb      	strh	r3, [r7, #6]
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	80bb      	strh	r3, [r7, #4]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	807b      	strh	r3, [r7, #2]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800d2ba:	202a      	movs	r0, #42	; 0x2a
 800d2bc:	f000 fb80 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800d2c0:	88fb      	ldrh	r3, [r7, #6]
 800d2c2:	0a1b      	lsrs	r3, r3, #8
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 fbab 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(sc);
 800d2ce:	88fb      	ldrh	r3, [r7, #6]
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fba6 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800d2d8:	887b      	ldrh	r3, [r7, #2]
 800d2da:	0a1b      	lsrs	r3, r3, #8
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 fb9f 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(ec);
 800d2e6:	887b      	ldrh	r3, [r7, #2]
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fb9a 	bl	800da24 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800d2f0:	202b      	movs	r0, #43	; 0x2b
 800d2f2:	f000 fb65 	bl	800d9c0 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800d2f6:	88bb      	ldrh	r3, [r7, #4]
 800d2f8:	0a1b      	lsrs	r3, r3, #8
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 fb90 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(sp);
 800d304:	88bb      	ldrh	r3, [r7, #4]
 800d306:	b2db      	uxtb	r3, r3
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 fb8b 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800d30e:	883b      	ldrh	r3, [r7, #0]
 800d310:	0a1b      	lsrs	r3, r3, #8
 800d312:	b29b      	uxth	r3, r3
 800d314:	b2db      	uxtb	r3, r3
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fb84 	bl	800da24 <_LCD_SendData>
	_LCD_SendData(ep);
 800d31c:	883b      	ldrh	r3, [r7, #0]
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	4618      	mov	r0, r3
 800d322:	f000 fb7f 	bl	800da24 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800d326:	202c      	movs	r0, #44	; 0x2c
 800d328:	f000 fb4a 	bl	800d9c0 <_LCD_SendCommand>
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	bd90      	pop	{r4, r7, pc}

0800d334 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af02      	add	r7, sp, #8
 800d33a:	4603      	mov	r3, r0
 800d33c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800d33e:	4b10      	ldr	r3, [pc, #64]	; (800d380 <ILI9341_Fill_Screen+0x4c>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	b29a      	uxth	r2, r3
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <ILI9341_Fill_Screen+0x50>)
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2100      	movs	r1, #0
 800d34c:	2000      	movs	r0, #0
 800d34e:	f7ff ffa5 	bl	800d29c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800d352:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <ILI9341_Fill_Screen+0x4c>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	b29b      	uxth	r3, r3
 800d358:	461a      	mov	r2, r3
 800d35a:	4b0a      	ldr	r3, [pc, #40]	; (800d384 <ILI9341_Fill_Screen+0x50>)
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	fb03 f302 	mul.w	r3, r3, r2
 800d364:	4619      	mov	r1, r3
 800d366:	88fa      	ldrh	r2, [r7, #6]
 800d368:	2304      	movs	r3, #4
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	460b      	mov	r3, r1
 800d36e:	2100      	movs	r1, #0
 800d370:	2000      	movs	r0, #0
 800d372:	f000 fa75 	bl	800d860 <_LCD_Write_Frame>
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20000cb6 	.word	0x20000cb6
 800d384:	20000cb4 	.word	0x20000cb4

0800d388 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08e      	sub	sp, #56	; 0x38
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	80fb      	strh	r3, [r7, #6]
 800d392:	460b      	mov	r3, r1
 800d394:	80bb      	strh	r3, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d39a:	4b98      	ldr	r3, [pc, #608]	; (800d5fc <ILI9341_Draw_Pixel+0x274>)
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	88fa      	ldrh	r2, [r7, #6]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	f080 8143 	bcs.w	800d62e <ILI9341_Draw_Pixel+0x2a6>
 800d3a8:	4b95      	ldr	r3, [pc, #596]	; (800d600 <ILI9341_Draw_Pixel+0x278>)
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	88ba      	ldrh	r2, [r7, #4]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f080 813c 	bcs.w	800d62e <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d3b6:	4b93      	ldr	r3, [pc, #588]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	4a92      	ldr	r2, [pc, #584]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3c0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d3c2:	4b90      	ldr	r3, [pc, #576]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	4a8f      	ldr	r2, [pc, #572]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3cc:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800d3ce:	220a      	movs	r2, #10
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	202a      	movs	r0, #42	; 0x2a
 800d3d4:	f000 fb58 	bl	800da88 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d3d8:	2300      	movs	r3, #0
 800d3da:	637b      	str	r3, [r7, #52]	; 0x34
 800d3dc:	e008      	b.n	800d3f0 <ILI9341_Draw_Pixel+0x68>
 800d3de:	4b89      	ldr	r3, [pc, #548]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	4a88      	ldr	r2, [pc, #544]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3e8:	6153      	str	r3, [r2, #20]
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	ddf3      	ble.n	800d3de <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d3f6:	4b83      	ldr	r3, [pc, #524]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	4a82      	ldr	r2, [pc, #520]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d400:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d402:	4b80      	ldr	r3, [pc, #512]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	4a7f      	ldr	r2, [pc, #508]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d40e:	4b7d      	ldr	r3, [pc, #500]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	4a7c      	ldr	r2, [pc, #496]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d418:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800d41a:	88fb      	ldrh	r3, [r7, #6]
 800d41c:	0a1b      	lsrs	r3, r3, #8
 800d41e:	b29b      	uxth	r3, r3
 800d420:	b2db      	uxtb	r3, r3
 800d422:	753b      	strb	r3, [r7, #20]
 800d424:	88fb      	ldrh	r3, [r7, #6]
 800d426:	b2db      	uxtb	r3, r3
 800d428:	757b      	strb	r3, [r7, #21]
 800d42a:	88fb      	ldrh	r3, [r7, #6]
 800d42c:	3301      	adds	r3, #1
 800d42e:	121b      	asrs	r3, r3, #8
 800d430:	b2db      	uxtb	r3, r3
 800d432:	75bb      	strb	r3, [r7, #22]
 800d434:	88fb      	ldrh	r3, [r7, #6]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	3301      	adds	r3, #1
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800d43e:	f107 0014 	add.w	r0, r7, #20
 800d442:	230a      	movs	r3, #10
 800d444:	2200      	movs	r2, #0
 800d446:	2104      	movs	r1, #4
 800d448:	f000 fb50 	bl	800daec <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d44c:	2300      	movs	r3, #0
 800d44e:	633b      	str	r3, [r7, #48]	; 0x30
 800d450:	e008      	b.n	800d464 <ILI9341_Draw_Pixel+0xdc>
 800d452:	4b6c      	ldr	r3, [pc, #432]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	4a6b      	ldr	r2, [pc, #428]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d45c:	6153      	str	r3, [r2, #20]
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	3301      	adds	r3, #1
 800d462:	633b      	str	r3, [r7, #48]	; 0x30
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	2b02      	cmp	r3, #2
 800d468:	ddf3      	ble.n	800d452 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d46a:	4b66      	ldr	r3, [pc, #408]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	4a65      	ldr	r2, [pc, #404]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d474:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d476:	4b63      	ldr	r3, [pc, #396]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	4a62      	ldr	r2, [pc, #392]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d480:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d482:	4b60      	ldr	r3, [pc, #384]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	4a5f      	ldr	r2, [pc, #380]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d48c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800d48e:	220a      	movs	r2, #10
 800d490:	2100      	movs	r1, #0
 800d492:	202b      	movs	r0, #43	; 0x2b
 800d494:	f000 faf8 	bl	800da88 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d498:	2300      	movs	r3, #0
 800d49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d49c:	e008      	b.n	800d4b0 <ILI9341_Draw_Pixel+0x128>
 800d49e:	4b59      	ldr	r3, [pc, #356]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	4a58      	ldr	r2, [pc, #352]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4a8:	6153      	str	r3, [r2, #20]
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	ddf3      	ble.n	800d49e <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d4b6:	4b53      	ldr	r3, [pc, #332]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	4a52      	ldr	r2, [pc, #328]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d4c2:	4b50      	ldr	r3, [pc, #320]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	4a4f      	ldr	r2, [pc, #316]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4cc:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d4ce:	4b4d      	ldr	r3, [pc, #308]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	4a4c      	ldr	r2, [pc, #304]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d4d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4d8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800d4da:	88bb      	ldrh	r3, [r7, #4]
 800d4dc:	0a1b      	lsrs	r3, r3, #8
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	743b      	strb	r3, [r7, #16]
 800d4e4:	88bb      	ldrh	r3, [r7, #4]
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	747b      	strb	r3, [r7, #17]
 800d4ea:	88bb      	ldrh	r3, [r7, #4]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	121b      	asrs	r3, r3, #8
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	74bb      	strb	r3, [r7, #18]
 800d4f4:	88bb      	ldrh	r3, [r7, #4]
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800d4fe:	f107 0010 	add.w	r0, r7, #16
 800d502:	230a      	movs	r3, #10
 800d504:	2200      	movs	r2, #0
 800d506:	2104      	movs	r1, #4
 800d508:	f000 faf0 	bl	800daec <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d50c:	2300      	movs	r3, #0
 800d50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d510:	e008      	b.n	800d524 <ILI9341_Draw_Pixel+0x19c>
 800d512:	4b3c      	ldr	r3, [pc, #240]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	4a3b      	ldr	r2, [pc, #236]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d51c:	6153      	str	r3, [r2, #20]
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	3301      	adds	r3, #1
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	2b02      	cmp	r3, #2
 800d528:	ddf3      	ble.n	800d512 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d52a:	4b36      	ldr	r3, [pc, #216]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	4a35      	ldr	r2, [pc, #212]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d534:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d536:	4b33      	ldr	r3, [pc, #204]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	4a32      	ldr	r2, [pc, #200]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d53c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d540:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d542:	4b30      	ldr	r3, [pc, #192]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	4a2f      	ldr	r2, [pc, #188]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d54c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800d54e:	220a      	movs	r2, #10
 800d550:	2100      	movs	r1, #0
 800d552:	202c      	movs	r0, #44	; 0x2c
 800d554:	f000 fa98 	bl	800da88 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d558:	2300      	movs	r3, #0
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
 800d55c:	e008      	b.n	800d570 <ILI9341_Draw_Pixel+0x1e8>
 800d55e:	4b29      	ldr	r3, [pc, #164]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	4a28      	ldr	r2, [pc, #160]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d568:	6153      	str	r3, [r2, #20]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	3301      	adds	r3, #1
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	2b02      	cmp	r3, #2
 800d574:	ddf3      	ble.n	800d55e <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d576:	4b23      	ldr	r3, [pc, #140]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d580:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d582:	4b20      	ldr	r3, [pc, #128]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	4a1f      	ldr	r2, [pc, #124]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d58c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d58e:	4b1d      	ldr	r3, [pc, #116]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	4a1c      	ldr	r2, [pc, #112]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d598:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800d59a:	887b      	ldrh	r3, [r7, #2]
 800d59c:	0a1b      	lsrs	r3, r3, #8
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	733b      	strb	r3, [r7, #12]
 800d5a4:	887b      	ldrh	r3, [r7, #2]
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800d5aa:	f107 000c 	add.w	r0, r7, #12
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2102      	movs	r1, #2
 800d5b4:	f000 fa9a 	bl	800daec <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	623b      	str	r3, [r7, #32]
 800d5bc:	e008      	b.n	800d5d0 <ILI9341_Draw_Pixel+0x248>
 800d5be:	4b11      	ldr	r3, [pc, #68]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	4a10      	ldr	r2, [pc, #64]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5c8:	6153      	str	r3, [r2, #20]
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	623b      	str	r3, [r7, #32]
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	ddf3      	ble.n	800d5be <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	e008      	b.n	800d5ee <ILI9341_Draw_Pixel+0x266>
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	4a08      	ldr	r2, [pc, #32]	; (800d604 <ILI9341_Draw_Pixel+0x27c>)
 800d5e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5e6:	6153      	str	r3, [r2, #20]
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	61fb      	str	r3, [r7, #28]
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	ddf3      	ble.n	800d5dc <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	61bb      	str	r3, [r7, #24]
 800d5f8:	e00f      	b.n	800d61a <ILI9341_Draw_Pixel+0x292>
 800d5fa:	bf00      	nop
 800d5fc:	20000cb6 	.word	0x20000cb6
 800d600:	20000cb4 	.word	0x20000cb4
 800d604:	48000400 	.word	0x48000400
 800d608:	4b0b      	ldr	r3, [pc, #44]	; (800d638 <ILI9341_Draw_Pixel+0x2b0>)
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	4a0a      	ldr	r2, [pc, #40]	; (800d638 <ILI9341_Draw_Pixel+0x2b0>)
 800d60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d612:	6153      	str	r3, [r2, #20]
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	3301      	adds	r3, #1
 800d618:	61bb      	str	r3, [r7, #24]
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	ddf3      	ble.n	800d608 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <ILI9341_Draw_Pixel+0x2b0>)
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	4a04      	ldr	r2, [pc, #16]	; (800d638 <ILI9341_Draw_Pixel+0x2b0>)
 800d626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d62a:	6153      	str	r3, [r2, #20]
 800d62c:	e000      	b.n	800d630 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d62e:	bf00      	nop


}
 800d630:	3738      	adds	r7, #56	; 0x38
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	48000400 	.word	0x48000400

0800d63c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800d63c:	b590      	push	{r4, r7, lr}
 800d63e:	b087      	sub	sp, #28
 800d640:	af02      	add	r7, sp, #8
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	4611      	mov	r1, r2
 800d648:	461a      	mov	r2, r3
 800d64a:	4623      	mov	r3, r4
 800d64c:	80fb      	strh	r3, [r7, #6]
 800d64e:	4603      	mov	r3, r0
 800d650:	80bb      	strh	r3, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	807b      	strh	r3, [r7, #2]
 800d656:	4613      	mov	r3, r2
 800d658:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d65a:	4b41      	ldr	r3, [pc, #260]	; (800d760 <ILI9341_Draw_Rectangle+0x124>)
 800d65c:	881b      	ldrh	r3, [r3, #0]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	88fa      	ldrh	r2, [r7, #6]
 800d662:	429a      	cmp	r2, r3
 800d664:	d278      	bcs.n	800d758 <ILI9341_Draw_Rectangle+0x11c>
 800d666:	4b3f      	ldr	r3, [pc, #252]	; (800d764 <ILI9341_Draw_Rectangle+0x128>)
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	88ba      	ldrh	r2, [r7, #4]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d272      	bcs.n	800d758 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800d672:	88fa      	ldrh	r2, [r7, #6]
 800d674:	887b      	ldrh	r3, [r7, #2]
 800d676:	4413      	add	r3, r2
 800d678:	3b01      	subs	r3, #1
 800d67a:	4a39      	ldr	r2, [pc, #228]	; (800d760 <ILI9341_Draw_Rectangle+0x124>)
 800d67c:	8812      	ldrh	r2, [r2, #0]
 800d67e:	b292      	uxth	r2, r2
 800d680:	4293      	cmp	r3, r2
 800d682:	db05      	blt.n	800d690 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800d684:	4b36      	ldr	r3, [pc, #216]	; (800d760 <ILI9341_Draw_Rectangle+0x124>)
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b29a      	uxth	r2, r3
 800d68a:	88fb      	ldrh	r3, [r7, #6]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800d690:	88ba      	ldrh	r2, [r7, #4]
 800d692:	883b      	ldrh	r3, [r7, #0]
 800d694:	4413      	add	r3, r2
 800d696:	3b01      	subs	r3, #1
 800d698:	4a32      	ldr	r2, [pc, #200]	; (800d764 <ILI9341_Draw_Rectangle+0x128>)
 800d69a:	8812      	ldrh	r2, [r2, #0]
 800d69c:	b292      	uxth	r2, r2
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	db05      	blt.n	800d6ae <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800d6a2:	4b30      	ldr	r3, [pc, #192]	; (800d764 <ILI9341_Draw_Rectangle+0x128>)
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	88bb      	ldrh	r3, [r7, #4]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800d6ae:	88fa      	ldrh	r2, [r7, #6]
 800d6b0:	887b      	ldrh	r3, [r7, #2]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800d6ba:	88ba      	ldrh	r2, [r7, #4]
 800d6bc:	883b      	ldrh	r3, [r7, #0]
 800d6be:	4413      	add	r3, r2
 800d6c0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	88b9      	ldrh	r1, [r7, #4]
 800d6c8:	88f8      	ldrh	r0, [r7, #6]
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	f7ff fde6 	bl	800d29c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800d6d0:	883a      	ldrh	r2, [r7, #0]
 800d6d2:	887b      	ldrh	r3, [r7, #2]
 800d6d4:	fb12 f303 	smulbb	r3, r2, r3
 800d6d8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800d6de:	89fb      	ldrh	r3, [r7, #14]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d009      	beq.n	800d6fc <ILI9341_Draw_Rectangle+0xc0>
 800d6e8:	89fb      	ldrh	r3, [r7, #14]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d906      	bls.n	800d6fc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800d6f2:	89fb      	ldrh	r3, [r7, #14]
 800d6f4:	085b      	lsrs	r3, r3, #1
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800d6fc:	89fc      	ldrh	r4, [r7, #14]
 800d6fe:	8c3a      	ldrh	r2, [r7, #32]
 800d700:	88b9      	ldrh	r1, [r7, #4]
 800d702:	88f8      	ldrh	r0, [r7, #6]
 800d704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4623      	mov	r3, r4
 800d70c:	f000 f8a8 	bl	800d860 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800d710:	7b7b      	ldrb	r3, [r7, #13]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d021      	beq.n	800d75a <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800d716:	88fa      	ldrh	r2, [r7, #6]
 800d718:	887b      	ldrh	r3, [r7, #2]
 800d71a:	4413      	add	r3, r2
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3b02      	subs	r3, #2
 800d720:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800d722:	88ba      	ldrh	r2, [r7, #4]
 800d724:	883b      	ldrh	r3, [r7, #0]
 800d726:	4413      	add	r3, r2
 800d728:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800d72a:	3b01      	subs	r3, #1
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	8c3a      	ldrh	r2, [r7, #32]
 800d730:	4619      	mov	r1, r3
 800d732:	f7ff fe29 	bl	800d388 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800d736:	88fa      	ldrh	r2, [r7, #6]
 800d738:	887b      	ldrh	r3, [r7, #2]
 800d73a:	4413      	add	r3, r2
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800d742:	88ba      	ldrh	r2, [r7, #4]
 800d744:	883b      	ldrh	r3, [r7, #0]
 800d746:	4413      	add	r3, r2
 800d748:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800d74a:	3b01      	subs	r3, #1
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	8c3a      	ldrh	r2, [r7, #32]
 800d750:	4619      	mov	r1, r3
 800d752:	f7ff fe19 	bl	800d388 <ILI9341_Draw_Pixel>
 800d756:	e000      	b.n	800d75a <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d758:	bf00      	nop
							colour);
	}
}
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd90      	pop	{r4, r7, pc}
 800d760:	20000cb6 	.word	0x20000cb6
 800d764:	20000cb4 	.word	0x20000cb4

0800d768 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800d776:	2036      	movs	r0, #54	; 0x36
 800d778:	f000 f922 	bl	800d9c0 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d836      	bhi.n	800d7f0 <ILI9341_Set_Rotation+0x88>
 800d782:	a201      	add	r2, pc, #4	; (adr r2, 800d788 <ILI9341_Set_Rotation+0x20>)
 800d784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d788:	0800d799 	.word	0x0800d799
 800d78c:	0800d7af 	.word	0x0800d7af
 800d790:	0800d7c5 	.word	0x0800d7c5
 800d794:	0800d7db 	.word	0x0800d7db
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800d798:	2048      	movs	r0, #72	; 0x48
 800d79a:	f000 f943 	bl	800da24 <_LCD_SendData>
			LCD_WIDTH = 240;
 800d79e:	4b17      	ldr	r3, [pc, #92]	; (800d7fc <ILI9341_Set_Rotation+0x94>)
 800d7a0:	22f0      	movs	r2, #240	; 0xf0
 800d7a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800d7a4:	4b16      	ldr	r3, [pc, #88]	; (800d800 <ILI9341_Set_Rotation+0x98>)
 800d7a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d7aa:	801a      	strh	r2, [r3, #0]
			break;
 800d7ac:	e021      	b.n	800d7f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800d7ae:	2028      	movs	r0, #40	; 0x28
 800d7b0:	f000 f938 	bl	800da24 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800d7b4:	4b11      	ldr	r3, [pc, #68]	; (800d7fc <ILI9341_Set_Rotation+0x94>)
 800d7b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d7ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800d7bc:	4b10      	ldr	r3, [pc, #64]	; (800d800 <ILI9341_Set_Rotation+0x98>)
 800d7be:	22f0      	movs	r2, #240	; 0xf0
 800d7c0:	801a      	strh	r2, [r3, #0]
			break;
 800d7c2:	e016      	b.n	800d7f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800d7c4:	2088      	movs	r0, #136	; 0x88
 800d7c6:	f000 f92d 	bl	800da24 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <ILI9341_Set_Rotation+0x94>)
 800d7cc:	22f0      	movs	r2, #240	; 0xf0
 800d7ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <ILI9341_Set_Rotation+0x98>)
 800d7d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d7d6:	801a      	strh	r2, [r3, #0]
			break;
 800d7d8:	e00b      	b.n	800d7f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800d7da:	20e8      	movs	r0, #232	; 0xe8
 800d7dc:	f000 f922 	bl	800da24 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800d7e0:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <ILI9341_Set_Rotation+0x94>)
 800d7e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d7e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <ILI9341_Set_Rotation+0x98>)
 800d7ea:	22f0      	movs	r2, #240	; 0xf0
 800d7ec:	801a      	strh	r2, [r3, #0]
			break;
 800d7ee:	e000      	b.n	800d7f2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800d7f0:	bf00      	nop
	}
}
 800d7f2:	bf00      	nop
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000cb6 	.word	0x20000cb6
 800d800:	20000cb4 	.word	0x20000cb4

0800d804 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800d804:	b480      	push	{r7}
 800d806:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800d808:	4b05      	ldr	r3, [pc, #20]	; (800d820 <_LCD_Enable+0x1c>)
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	4a04      	ldr	r2, [pc, #16]	; (800d820 <_LCD_Enable+0x1c>)
 800d80e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d812:	6153      	str	r3, [r2, #20]
}
 800d814:	bf00      	nop
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	48000400 	.word	0x48000400

0800d824 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800d828:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <_LCD_Reset+0x38>)
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	4a0b      	ldr	r2, [pc, #44]	; (800d85c <_LCD_Reset+0x38>)
 800d82e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d832:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800d834:	20c8      	movs	r0, #200	; 0xc8
 800d836:	f7fa f91b 	bl	8007a70 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d83a:	4b08      	ldr	r3, [pc, #32]	; (800d85c <_LCD_Reset+0x38>)
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	4a07      	ldr	r2, [pc, #28]	; (800d85c <_LCD_Reset+0x38>)
 800d840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d844:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800d846:	20c8      	movs	r0, #200	; 0xc8
 800d848:	f7fa f912 	bl	8007a70 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800d84c:	4b03      	ldr	r3, [pc, #12]	; (800d85c <_LCD_Reset+0x38>)
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	4a02      	ldr	r2, [pc, #8]	; (800d85c <_LCD_Reset+0x38>)
 800d852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d856:	6153      	str	r3, [r2, #20]
}
 800d858:	bf00      	nop
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	48000400 	.word	0x48000400

0800d860 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800d860:	b5b0      	push	{r4, r5, r7, lr}
 800d862:	b08e      	sub	sp, #56	; 0x38
 800d864:	af00      	add	r7, sp, #0
 800d866:	607b      	str	r3, [r7, #4]
 800d868:	4603      	mov	r3, r0
 800d86a:	81fb      	strh	r3, [r7, #14]
 800d86c:	460b      	mov	r3, r1
 800d86e:	81bb      	strh	r3, [r7, #12]
 800d870:	4613      	mov	r3, r2
 800d872:	817b      	strh	r3, [r7, #10]
 800d874:	466b      	mov	r3, sp
 800d876:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800d878:	2300      	movs	r3, #0
 800d87a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	4a4d      	ldr	r2, [pc, #308]	; (800d9b8 <_LCD_Write_Frame+0x158>)
 800d882:	8812      	ldrh	r2, [r2, #0]
 800d884:	4293      	cmp	r3, r2
 800d886:	d202      	bcs.n	800d88e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d88c:	e002      	b.n	800d894 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800d88e:	4b4a      	ldr	r3, [pc, #296]	; (800d9b8 <_LCD_Write_Frame+0x158>)
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800d894:	897b      	ldrh	r3, [r7, #10]
 800d896:	0a1b      	lsrs	r3, r3, #8
 800d898:	b29b      	uxth	r3, r3
 800d89a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800d89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89e:	4603      	mov	r3, r0
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	61bb      	str	r3, [r7, #24]
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	f04f 0200 	mov.w	r2, #0
 800d8aa:	f04f 0300 	mov.w	r3, #0
 800d8ae:	f04f 0400 	mov.w	r4, #0
 800d8b2:	00d4      	lsls	r4, r2, #3
 800d8b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d8b8:	00cb      	lsls	r3, r1, #3
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	f04f 0200 	mov.w	r2, #0
 800d8c0:	f04f 0300 	mov.w	r3, #0
 800d8c4:	f04f 0400 	mov.w	r4, #0
 800d8c8:	00d4      	lsls	r4, r2, #3
 800d8ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d8ce:	00cb      	lsls	r3, r1, #3
 800d8d0:	1dc3      	adds	r3, r0, #7
 800d8d2:	08db      	lsrs	r3, r3, #3
 800d8d4:	00db      	lsls	r3, r3, #3
 800d8d6:	ebad 0d03 	sub.w	sp, sp, r3
 800d8da:	466b      	mov	r3, sp
 800d8dc:	3300      	adds	r3, #0
 800d8de:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e4:	e00d      	b.n	800d902 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800d8e6:	697a      	ldr	r2, [r7, #20]
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	4413      	add	r3, r2
 800d8ec:	7ffa      	ldrb	r2, [r7, #31]
 800d8ee:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	897a      	ldrh	r2, [r7, #10]
 800d8f6:	b2d1      	uxtb	r1, r2
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	3302      	adds	r3, #2
 800d900:	633b      	str	r3, [r7, #48]	; 0x30
 800d902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	429a      	cmp	r2, r3
 800d908:	d3ed      	bcc.n	800d8e6 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800d910:	2301      	movs	r3, #1
 800d912:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00d      	beq.n	800d93a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	fbb2 f3f3 	udiv	r3, r2, r3
 800d926:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d92c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d930:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d932:	fb01 f202 	mul.w	r2, r1, r2
 800d936:	1a9b      	subs	r3, r3, r2
 800d938:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d93a:	4b20      	ldr	r3, [pc, #128]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a1f      	ldr	r2, [pc, #124]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d944:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d946:	4b1d      	ldr	r3, [pc, #116]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	4a1c      	ldr	r2, [pc, #112]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d950:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00f      	beq.n	800d978 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800d958:	2300      	movs	r3, #0
 800d95a:	627b      	str	r3, [r7, #36]	; 0x24
 800d95c:	e008      	b.n	800d970 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800d95e:	6978      	ldr	r0, [r7, #20]
 800d960:	230a      	movs	r3, #10
 800d962:	2200      	movs	r2, #0
 800d964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d966:	f000 f8c1 	bl	800daec <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	3301      	adds	r3, #1
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
 800d970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d974:	429a      	cmp	r2, r3
 800d976:	d3f2      	bcc.n	800d95e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800d978:	6978      	ldr	r0, [r7, #20]
 800d97a:	230a      	movs	r3, #10
 800d97c:	2200      	movs	r2, #0
 800d97e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d980:	f000 f8b4 	bl	800daec <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d984:	2300      	movs	r3, #0
 800d986:	623b      	str	r3, [r7, #32]
 800d988:	e008      	b.n	800d99c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d98a:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	4a0b      	ldr	r2, [pc, #44]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d994:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	3301      	adds	r3, #1
 800d99a:	623b      	str	r3, [r7, #32]
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	ddf3      	ble.n	800d98a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d9a2:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d9a4:	695b      	ldr	r3, [r3, #20]
 800d9a6:	4a05      	ldr	r2, [pc, #20]	; (800d9bc <_LCD_Write_Frame+0x15c>)
 800d9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ac:	6153      	str	r3, [r2, #20]
 800d9ae:	46ad      	mov	sp, r5

}
 800d9b0:	bf00      	nop
 800d9b2:	3738      	adds	r7, #56	; 0x38
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d9b8:	20000cb8 	.word	0x20000cb8
 800d9bc:	48000400 	.word	0x48000400

0800d9c0 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9ca:	4b15      	ldr	r3, [pc, #84]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	4a14      	ldr	r2, [pc, #80]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d9d6:	4b12      	ldr	r3, [pc, #72]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	4a11      	ldr	r2, [pc, #68]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f84d 	bl	800da88 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
 800d9f2:	e008      	b.n	800da06 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	4a09      	ldr	r2, [pc, #36]	; (800da20 <_LCD_SendCommand+0x60>)
 800d9fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9fe:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3301      	adds	r3, #1
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	ddf3      	ble.n	800d9f4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800da0c:	4b04      	ldr	r3, [pc, #16]	; (800da20 <_LCD_SendCommand+0x60>)
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	4a03      	ldr	r2, [pc, #12]	; (800da20 <_LCD_SendCommand+0x60>)
 800da12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da16:	6153      	str	r3, [r2, #20]
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	48000400 	.word	0x48000400

0800da24 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800da2e:	4b15      	ldr	r3, [pc, #84]	; (800da84 <_LCD_SendData+0x60>)
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	4a14      	ldr	r2, [pc, #80]	; (800da84 <_LCD_SendData+0x60>)
 800da34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da38:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <_LCD_SendData+0x60>)
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	4a11      	ldr	r2, [pc, #68]	; (800da84 <_LCD_SendData+0x60>)
 800da40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da44:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	2200      	movs	r2, #0
 800da4a:	2100      	movs	r1, #0
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 f81b 	bl	800da88 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]
 800da56:	e008      	b.n	800da6a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da58:	4b0a      	ldr	r3, [pc, #40]	; (800da84 <_LCD_SendData+0x60>)
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <_LCD_SendData+0x60>)
 800da5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da62:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3301      	adds	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	ddf3      	ble.n	800da58 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da70:	4b04      	ldr	r3, [pc, #16]	; (800da84 <_LCD_SendData+0x60>)
 800da72:	695b      	ldr	r3, [r3, #20]
 800da74:	4a03      	ldr	r2, [pc, #12]	; (800da84 <_LCD_SendData+0x60>)
 800da76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da7a:	6153      	str	r3, [r2, #20]
}
 800da7c:	bf00      	nop
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	48000400 	.word	0x48000400

0800da88 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	71fb      	strb	r3, [r7, #7]
 800da92:	460b      	mov	r3, r1
 800da94:	71bb      	strb	r3, [r7, #6]
 800da96:	4613      	mov	r3, r2
 800da98:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	e003      	b.n	800daa8 <_SPI_SendByte+0x20>
   		asm("nop");
 800daa0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3301      	adds	r3, #1
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	79bb      	ldrb	r3, [r7, #6]
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	429a      	cmp	r2, r3
 800daae:	dbf7      	blt.n	800daa0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800dab0:	4b0c      	ldr	r3, [pc, #48]	; (800dae4 <_SPI_SendByte+0x5c>)
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d102      	bne.n	800dac2 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800dabc:	4a0a      	ldr	r2, [pc, #40]	; (800dae8 <_SPI_SendByte+0x60>)
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	e003      	b.n	800dad0 <_SPI_SendByte+0x48>
   		asm("nop");
 800dac8:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	3301      	adds	r3, #1
 800dace:	60bb      	str	r3, [r7, #8]
 800dad0:	797b      	ldrb	r3, [r7, #5]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	dbf7      	blt.n	800dac8 <_SPI_SendByte+0x40>

#endif

}
 800dad8:	bf00      	nop
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	40003c00 	.word	0x40003c00
 800dae8:	40003c0c 	.word	0x40003c0c

0800daec <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800daec:	b480      	push	{r7}
 800daee:	b089      	sub	sp, #36	; 0x24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	4611      	mov	r1, r2
 800daf8:	461a      	mov	r2, r3
 800dafa:	460b      	mov	r3, r1
 800dafc:	71fb      	strb	r3, [r7, #7]
 800dafe:	4613      	mov	r3, r2
 800db00:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800db02:	2300      	movs	r3, #0
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	e003      	b.n	800db10 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800db08:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	3301      	adds	r3, #1
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	429a      	cmp	r2, r3
 800db16:	dbf7      	blt.n	800db08 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800db1c:	e01d      	b.n	800db5a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800db1e:	4b1c      	ldr	r3, [pc, #112]	; (800db90 <_SPI_SendByteMultiByte+0xa4>)
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b02      	cmp	r3, #2
 800db28:	d117      	bne.n	800db5a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d90a      	bls.n	800db46 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	881a      	ldrh	r2, [r3, #0]
 800db34:	4b16      	ldr	r3, [pc, #88]	; (800db90 <_SPI_SendByteMultiByte+0xa4>)
 800db36:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	3302      	adds	r3, #2
 800db3c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	3b02      	subs	r3, #2
 800db42:	60bb      	str	r3, [r7, #8]
 800db44:	e009      	b.n	800db5a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800db46:	4a13      	ldr	r2, [pc, #76]	; (800db94 <_SPI_SendByteMultiByte+0xa8>)
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	3301      	adds	r3, #1
 800db52:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	3b01      	subs	r3, #1
 800db58:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1de      	bne.n	800db1e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800db60:	4b0b      	ldr	r3, [pc, #44]	; (800db90 <_SPI_SendByteMultiByte+0xa4>)
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	4a0a      	ldr	r2, [pc, #40]	; (800db90 <_SPI_SendByteMultiByte+0xa4>)
 800db66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db6a:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800db6c:	2300      	movs	r3, #0
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e003      	b.n	800db7a <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800db72:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	3301      	adds	r3, #1
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	79bb      	ldrb	r3, [r7, #6]
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	429a      	cmp	r2, r3
 800db80:	dbf7      	blt.n	800db72 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800db82:	bf00      	nop
 800db84:	3724      	adds	r7, #36	; 0x24
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	40003c00 	.word	0x40003c00
 800db94:	40003c0c 	.word	0x40003c0c

0800db98 <__errno>:
 800db98:	4b01      	ldr	r3, [pc, #4]	; (800dba0 <__errno+0x8>)
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	20001cac 	.word	0x20001cac

0800dba4 <__libc_init_array>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	4e0d      	ldr	r6, [pc, #52]	; (800dbdc <__libc_init_array+0x38>)
 800dba8:	4c0d      	ldr	r4, [pc, #52]	; (800dbe0 <__libc_init_array+0x3c>)
 800dbaa:	1ba4      	subs	r4, r4, r6
 800dbac:	10a4      	asrs	r4, r4, #2
 800dbae:	2500      	movs	r5, #0
 800dbb0:	42a5      	cmp	r5, r4
 800dbb2:	d109      	bne.n	800dbc8 <__libc_init_array+0x24>
 800dbb4:	4e0b      	ldr	r6, [pc, #44]	; (800dbe4 <__libc_init_array+0x40>)
 800dbb6:	4c0c      	ldr	r4, [pc, #48]	; (800dbe8 <__libc_init_array+0x44>)
 800dbb8:	f003 ff48 	bl	8011a4c <_init>
 800dbbc:	1ba4      	subs	r4, r4, r6
 800dbbe:	10a4      	asrs	r4, r4, #2
 800dbc0:	2500      	movs	r5, #0
 800dbc2:	42a5      	cmp	r5, r4
 800dbc4:	d105      	bne.n	800dbd2 <__libc_init_array+0x2e>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
 800dbc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dbcc:	4798      	blx	r3
 800dbce:	3501      	adds	r5, #1
 800dbd0:	e7ee      	b.n	800dbb0 <__libc_init_array+0xc>
 800dbd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dbd6:	4798      	blx	r3
 800dbd8:	3501      	adds	r5, #1
 800dbda:	e7f2      	b.n	800dbc2 <__libc_init_array+0x1e>
 800dbdc:	08012ed0 	.word	0x08012ed0
 800dbe0:	08012ed0 	.word	0x08012ed0
 800dbe4:	08012ed0 	.word	0x08012ed0
 800dbe8:	08012ed4 	.word	0x08012ed4

0800dbec <memset>:
 800dbec:	4402      	add	r2, r0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d100      	bne.n	800dbf6 <memset+0xa>
 800dbf4:	4770      	bx	lr
 800dbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800dbfa:	e7f9      	b.n	800dbf0 <memset+0x4>

0800dbfc <__cvt>:
 800dbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	ec55 4b10 	vmov	r4, r5, d0
 800dc04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dc06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	460e      	mov	r6, r1
 800dc0e:	4691      	mov	r9, r2
 800dc10:	4619      	mov	r1, r3
 800dc12:	bfb8      	it	lt
 800dc14:	4622      	movlt	r2, r4
 800dc16:	462b      	mov	r3, r5
 800dc18:	f027 0720 	bic.w	r7, r7, #32
 800dc1c:	bfbb      	ittet	lt
 800dc1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc22:	461d      	movlt	r5, r3
 800dc24:	2300      	movge	r3, #0
 800dc26:	232d      	movlt	r3, #45	; 0x2d
 800dc28:	bfb8      	it	lt
 800dc2a:	4614      	movlt	r4, r2
 800dc2c:	2f46      	cmp	r7, #70	; 0x46
 800dc2e:	700b      	strb	r3, [r1, #0]
 800dc30:	d004      	beq.n	800dc3c <__cvt+0x40>
 800dc32:	2f45      	cmp	r7, #69	; 0x45
 800dc34:	d100      	bne.n	800dc38 <__cvt+0x3c>
 800dc36:	3601      	adds	r6, #1
 800dc38:	2102      	movs	r1, #2
 800dc3a:	e000      	b.n	800dc3e <__cvt+0x42>
 800dc3c:	2103      	movs	r1, #3
 800dc3e:	ab03      	add	r3, sp, #12
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	ab02      	add	r3, sp, #8
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	4632      	mov	r2, r6
 800dc48:	4653      	mov	r3, sl
 800dc4a:	ec45 4b10 	vmov	d0, r4, r5
 800dc4e:	f000 fe27 	bl	800e8a0 <_dtoa_r>
 800dc52:	2f47      	cmp	r7, #71	; 0x47
 800dc54:	4680      	mov	r8, r0
 800dc56:	d102      	bne.n	800dc5e <__cvt+0x62>
 800dc58:	f019 0f01 	tst.w	r9, #1
 800dc5c:	d026      	beq.n	800dcac <__cvt+0xb0>
 800dc5e:	2f46      	cmp	r7, #70	; 0x46
 800dc60:	eb08 0906 	add.w	r9, r8, r6
 800dc64:	d111      	bne.n	800dc8a <__cvt+0x8e>
 800dc66:	f898 3000 	ldrb.w	r3, [r8]
 800dc6a:	2b30      	cmp	r3, #48	; 0x30
 800dc6c:	d10a      	bne.n	800dc84 <__cvt+0x88>
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2300      	movs	r3, #0
 800dc72:	4620      	mov	r0, r4
 800dc74:	4629      	mov	r1, r5
 800dc76:	f7f2 ff4f 	bl	8000b18 <__aeabi_dcmpeq>
 800dc7a:	b918      	cbnz	r0, 800dc84 <__cvt+0x88>
 800dc7c:	f1c6 0601 	rsb	r6, r6, #1
 800dc80:	f8ca 6000 	str.w	r6, [sl]
 800dc84:	f8da 3000 	ldr.w	r3, [sl]
 800dc88:	4499      	add	r9, r3
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 ff41 	bl	8000b18 <__aeabi_dcmpeq>
 800dc96:	b938      	cbnz	r0, 800dca8 <__cvt+0xac>
 800dc98:	2230      	movs	r2, #48	; 0x30
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	454b      	cmp	r3, r9
 800dc9e:	d205      	bcs.n	800dcac <__cvt+0xb0>
 800dca0:	1c59      	adds	r1, r3, #1
 800dca2:	9103      	str	r1, [sp, #12]
 800dca4:	701a      	strb	r2, [r3, #0]
 800dca6:	e7f8      	b.n	800dc9a <__cvt+0x9e>
 800dca8:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcb0:	eba3 0308 	sub.w	r3, r3, r8
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	b004      	add	sp, #16
 800dcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dcbe <__exponent>:
 800dcbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcc0:	2900      	cmp	r1, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	bfba      	itte	lt
 800dcc6:	4249      	neglt	r1, r1
 800dcc8:	232d      	movlt	r3, #45	; 0x2d
 800dcca:	232b      	movge	r3, #43	; 0x2b
 800dccc:	2909      	cmp	r1, #9
 800dcce:	f804 2b02 	strb.w	r2, [r4], #2
 800dcd2:	7043      	strb	r3, [r0, #1]
 800dcd4:	dd20      	ble.n	800dd18 <__exponent+0x5a>
 800dcd6:	f10d 0307 	add.w	r3, sp, #7
 800dcda:	461f      	mov	r7, r3
 800dcdc:	260a      	movs	r6, #10
 800dcde:	fb91 f5f6 	sdiv	r5, r1, r6
 800dce2:	fb06 1115 	mls	r1, r6, r5, r1
 800dce6:	3130      	adds	r1, #48	; 0x30
 800dce8:	2d09      	cmp	r5, #9
 800dcea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dcee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	dc09      	bgt.n	800dd0a <__exponent+0x4c>
 800dcf6:	3130      	adds	r1, #48	; 0x30
 800dcf8:	3b02      	subs	r3, #2
 800dcfa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dcfe:	42bb      	cmp	r3, r7
 800dd00:	4622      	mov	r2, r4
 800dd02:	d304      	bcc.n	800dd0e <__exponent+0x50>
 800dd04:	1a10      	subs	r0, r2, r0
 800dd06:	b003      	add	sp, #12
 800dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	e7e7      	b.n	800dcde <__exponent+0x20>
 800dd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd12:	f804 2b01 	strb.w	r2, [r4], #1
 800dd16:	e7f2      	b.n	800dcfe <__exponent+0x40>
 800dd18:	2330      	movs	r3, #48	; 0x30
 800dd1a:	4419      	add	r1, r3
 800dd1c:	7083      	strb	r3, [r0, #2]
 800dd1e:	1d02      	adds	r2, r0, #4
 800dd20:	70c1      	strb	r1, [r0, #3]
 800dd22:	e7ef      	b.n	800dd04 <__exponent+0x46>

0800dd24 <_printf_float>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	b08d      	sub	sp, #52	; 0x34
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dd30:	4616      	mov	r6, r2
 800dd32:	461f      	mov	r7, r3
 800dd34:	4605      	mov	r5, r0
 800dd36:	f001 fce5 	bl	800f704 <_localeconv_r>
 800dd3a:	6803      	ldr	r3, [r0, #0]
 800dd3c:	9304      	str	r3, [sp, #16]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f2 fa6e 	bl	8000220 <strlen>
 800dd44:	2300      	movs	r3, #0
 800dd46:	930a      	str	r3, [sp, #40]	; 0x28
 800dd48:	f8d8 3000 	ldr.w	r3, [r8]
 800dd4c:	9005      	str	r0, [sp, #20]
 800dd4e:	3307      	adds	r3, #7
 800dd50:	f023 0307 	bic.w	r3, r3, #7
 800dd54:	f103 0208 	add.w	r2, r3, #8
 800dd58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dd5c:	f8d4 b000 	ldr.w	fp, [r4]
 800dd60:	f8c8 2000 	str.w	r2, [r8]
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dd6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dd70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd74:	9307      	str	r3, [sp, #28]
 800dd76:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd7e:	4ba7      	ldr	r3, [pc, #668]	; (800e01c <_printf_float+0x2f8>)
 800dd80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd84:	f7f2 fefa 	bl	8000b7c <__aeabi_dcmpun>
 800dd88:	bb70      	cbnz	r0, 800dde8 <_printf_float+0xc4>
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd8e:	4ba3      	ldr	r3, [pc, #652]	; (800e01c <_printf_float+0x2f8>)
 800dd90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd94:	f7f2 fed4 	bl	8000b40 <__aeabi_dcmple>
 800dd98:	bb30      	cbnz	r0, 800dde8 <_printf_float+0xc4>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4640      	mov	r0, r8
 800dda0:	4649      	mov	r1, r9
 800dda2:	f7f2 fec3 	bl	8000b2c <__aeabi_dcmplt>
 800dda6:	b110      	cbz	r0, 800ddae <_printf_float+0x8a>
 800dda8:	232d      	movs	r3, #45	; 0x2d
 800ddaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddae:	4a9c      	ldr	r2, [pc, #624]	; (800e020 <_printf_float+0x2fc>)
 800ddb0:	4b9c      	ldr	r3, [pc, #624]	; (800e024 <_printf_float+0x300>)
 800ddb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ddb6:	bf8c      	ite	hi
 800ddb8:	4690      	movhi	r8, r2
 800ddba:	4698      	movls	r8, r3
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	f02b 0204 	bic.w	r2, fp, #4
 800ddc2:	6123      	str	r3, [r4, #16]
 800ddc4:	6022      	str	r2, [r4, #0]
 800ddc6:	f04f 0900 	mov.w	r9, #0
 800ddca:	9700      	str	r7, [sp, #0]
 800ddcc:	4633      	mov	r3, r6
 800ddce:	aa0b      	add	r2, sp, #44	; 0x2c
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 f9e6 	bl	800e1a4 <_printf_common>
 800ddd8:	3001      	adds	r0, #1
 800ddda:	f040 808d 	bne.w	800def8 <_printf_float+0x1d4>
 800ddde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dde2:	b00d      	add	sp, #52	; 0x34
 800dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde8:	4642      	mov	r2, r8
 800ddea:	464b      	mov	r3, r9
 800ddec:	4640      	mov	r0, r8
 800ddee:	4649      	mov	r1, r9
 800ddf0:	f7f2 fec4 	bl	8000b7c <__aeabi_dcmpun>
 800ddf4:	b110      	cbz	r0, 800ddfc <_printf_float+0xd8>
 800ddf6:	4a8c      	ldr	r2, [pc, #560]	; (800e028 <_printf_float+0x304>)
 800ddf8:	4b8c      	ldr	r3, [pc, #560]	; (800e02c <_printf_float+0x308>)
 800ddfa:	e7da      	b.n	800ddb2 <_printf_float+0x8e>
 800ddfc:	6861      	ldr	r1, [r4, #4]
 800ddfe:	1c4b      	adds	r3, r1, #1
 800de00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800de04:	a80a      	add	r0, sp, #40	; 0x28
 800de06:	d13e      	bne.n	800de86 <_printf_float+0x162>
 800de08:	2306      	movs	r3, #6
 800de0a:	6063      	str	r3, [r4, #4]
 800de0c:	2300      	movs	r3, #0
 800de0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800de12:	ab09      	add	r3, sp, #36	; 0x24
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	ec49 8b10 	vmov	d0, r8, r9
 800de1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de1e:	6022      	str	r2, [r4, #0]
 800de20:	f8cd a004 	str.w	sl, [sp, #4]
 800de24:	6861      	ldr	r1, [r4, #4]
 800de26:	4628      	mov	r0, r5
 800de28:	f7ff fee8 	bl	800dbfc <__cvt>
 800de2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800de30:	2b47      	cmp	r3, #71	; 0x47
 800de32:	4680      	mov	r8, r0
 800de34:	d109      	bne.n	800de4a <_printf_float+0x126>
 800de36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de38:	1cd8      	adds	r0, r3, #3
 800de3a:	db02      	blt.n	800de42 <_printf_float+0x11e>
 800de3c:	6862      	ldr	r2, [r4, #4]
 800de3e:	4293      	cmp	r3, r2
 800de40:	dd47      	ble.n	800ded2 <_printf_float+0x1ae>
 800de42:	f1aa 0a02 	sub.w	sl, sl, #2
 800de46:	fa5f fa8a 	uxtb.w	sl, sl
 800de4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800de4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de50:	d824      	bhi.n	800de9c <_printf_float+0x178>
 800de52:	3901      	subs	r1, #1
 800de54:	4652      	mov	r2, sl
 800de56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de5a:	9109      	str	r1, [sp, #36]	; 0x24
 800de5c:	f7ff ff2f 	bl	800dcbe <__exponent>
 800de60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de62:	1813      	adds	r3, r2, r0
 800de64:	2a01      	cmp	r2, #1
 800de66:	4681      	mov	r9, r0
 800de68:	6123      	str	r3, [r4, #16]
 800de6a:	dc02      	bgt.n	800de72 <_printf_float+0x14e>
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	07d1      	lsls	r1, r2, #31
 800de70:	d501      	bpl.n	800de76 <_printf_float+0x152>
 800de72:	3301      	adds	r3, #1
 800de74:	6123      	str	r3, [r4, #16]
 800de76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0a5      	beq.n	800ddca <_printf_float+0xa6>
 800de7e:	232d      	movs	r3, #45	; 0x2d
 800de80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de84:	e7a1      	b.n	800ddca <_printf_float+0xa6>
 800de86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800de8a:	f000 8177 	beq.w	800e17c <_printf_float+0x458>
 800de8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800de92:	d1bb      	bne.n	800de0c <_printf_float+0xe8>
 800de94:	2900      	cmp	r1, #0
 800de96:	d1b9      	bne.n	800de0c <_printf_float+0xe8>
 800de98:	2301      	movs	r3, #1
 800de9a:	e7b6      	b.n	800de0a <_printf_float+0xe6>
 800de9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800dea0:	d119      	bne.n	800ded6 <_printf_float+0x1b2>
 800dea2:	2900      	cmp	r1, #0
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	dd0c      	ble.n	800dec2 <_printf_float+0x19e>
 800dea8:	6121      	str	r1, [r4, #16]
 800deaa:	b913      	cbnz	r3, 800deb2 <_printf_float+0x18e>
 800deac:	6822      	ldr	r2, [r4, #0]
 800deae:	07d2      	lsls	r2, r2, #31
 800deb0:	d502      	bpl.n	800deb8 <_printf_float+0x194>
 800deb2:	3301      	adds	r3, #1
 800deb4:	440b      	add	r3, r1
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deba:	65a3      	str	r3, [r4, #88]	; 0x58
 800debc:	f04f 0900 	mov.w	r9, #0
 800dec0:	e7d9      	b.n	800de76 <_printf_float+0x152>
 800dec2:	b913      	cbnz	r3, 800deca <_printf_float+0x1a6>
 800dec4:	6822      	ldr	r2, [r4, #0]
 800dec6:	07d0      	lsls	r0, r2, #31
 800dec8:	d501      	bpl.n	800dece <_printf_float+0x1aa>
 800deca:	3302      	adds	r3, #2
 800decc:	e7f3      	b.n	800deb6 <_printf_float+0x192>
 800dece:	2301      	movs	r3, #1
 800ded0:	e7f1      	b.n	800deb6 <_printf_float+0x192>
 800ded2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ded6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800deda:	4293      	cmp	r3, r2
 800dedc:	db05      	blt.n	800deea <_printf_float+0x1c6>
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	6123      	str	r3, [r4, #16]
 800dee2:	07d1      	lsls	r1, r2, #31
 800dee4:	d5e8      	bpl.n	800deb8 <_printf_float+0x194>
 800dee6:	3301      	adds	r3, #1
 800dee8:	e7e5      	b.n	800deb6 <_printf_float+0x192>
 800deea:	2b00      	cmp	r3, #0
 800deec:	bfd4      	ite	le
 800deee:	f1c3 0302 	rsble	r3, r3, #2
 800def2:	2301      	movgt	r3, #1
 800def4:	4413      	add	r3, r2
 800def6:	e7de      	b.n	800deb6 <_printf_float+0x192>
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	055a      	lsls	r2, r3, #21
 800defc:	d407      	bmi.n	800df0e <_printf_float+0x1ea>
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	4642      	mov	r2, r8
 800df02:	4631      	mov	r1, r6
 800df04:	4628      	mov	r0, r5
 800df06:	47b8      	blx	r7
 800df08:	3001      	adds	r0, #1
 800df0a:	d12b      	bne.n	800df64 <_printf_float+0x240>
 800df0c:	e767      	b.n	800ddde <_printf_float+0xba>
 800df0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800df12:	f240 80dc 	bls.w	800e0ce <_printf_float+0x3aa>
 800df16:	2200      	movs	r2, #0
 800df18:	2300      	movs	r3, #0
 800df1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df1e:	f7f2 fdfb 	bl	8000b18 <__aeabi_dcmpeq>
 800df22:	2800      	cmp	r0, #0
 800df24:	d033      	beq.n	800df8e <_printf_float+0x26a>
 800df26:	2301      	movs	r3, #1
 800df28:	4a41      	ldr	r2, [pc, #260]	; (800e030 <_printf_float+0x30c>)
 800df2a:	4631      	mov	r1, r6
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b8      	blx	r7
 800df30:	3001      	adds	r0, #1
 800df32:	f43f af54 	beq.w	800ddde <_printf_float+0xba>
 800df36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df3a:	429a      	cmp	r2, r3
 800df3c:	db02      	blt.n	800df44 <_printf_float+0x220>
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	07d8      	lsls	r0, r3, #31
 800df42:	d50f      	bpl.n	800df64 <_printf_float+0x240>
 800df44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df48:	4631      	mov	r1, r6
 800df4a:	4628      	mov	r0, r5
 800df4c:	47b8      	blx	r7
 800df4e:	3001      	adds	r0, #1
 800df50:	f43f af45 	beq.w	800ddde <_printf_float+0xba>
 800df54:	f04f 0800 	mov.w	r8, #0
 800df58:	f104 091a 	add.w	r9, r4, #26
 800df5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df5e:	3b01      	subs	r3, #1
 800df60:	4543      	cmp	r3, r8
 800df62:	dc09      	bgt.n	800df78 <_printf_float+0x254>
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	079b      	lsls	r3, r3, #30
 800df68:	f100 8103 	bmi.w	800e172 <_printf_float+0x44e>
 800df6c:	68e0      	ldr	r0, [r4, #12]
 800df6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df70:	4298      	cmp	r0, r3
 800df72:	bfb8      	it	lt
 800df74:	4618      	movlt	r0, r3
 800df76:	e734      	b.n	800dde2 <_printf_float+0xbe>
 800df78:	2301      	movs	r3, #1
 800df7a:	464a      	mov	r2, r9
 800df7c:	4631      	mov	r1, r6
 800df7e:	4628      	mov	r0, r5
 800df80:	47b8      	blx	r7
 800df82:	3001      	adds	r0, #1
 800df84:	f43f af2b 	beq.w	800ddde <_printf_float+0xba>
 800df88:	f108 0801 	add.w	r8, r8, #1
 800df8c:	e7e6      	b.n	800df5c <_printf_float+0x238>
 800df8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df90:	2b00      	cmp	r3, #0
 800df92:	dc2b      	bgt.n	800dfec <_printf_float+0x2c8>
 800df94:	2301      	movs	r3, #1
 800df96:	4a26      	ldr	r2, [pc, #152]	; (800e030 <_printf_float+0x30c>)
 800df98:	4631      	mov	r1, r6
 800df9a:	4628      	mov	r0, r5
 800df9c:	47b8      	blx	r7
 800df9e:	3001      	adds	r0, #1
 800dfa0:	f43f af1d 	beq.w	800ddde <_printf_float+0xba>
 800dfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa6:	b923      	cbnz	r3, 800dfb2 <_printf_float+0x28e>
 800dfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfaa:	b913      	cbnz	r3, 800dfb2 <_printf_float+0x28e>
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	07d9      	lsls	r1, r3, #31
 800dfb0:	d5d8      	bpl.n	800df64 <_printf_float+0x240>
 800dfb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	4628      	mov	r0, r5
 800dfba:	47b8      	blx	r7
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	f43f af0e 	beq.w	800ddde <_printf_float+0xba>
 800dfc2:	f04f 0900 	mov.w	r9, #0
 800dfc6:	f104 0a1a 	add.w	sl, r4, #26
 800dfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfcc:	425b      	negs	r3, r3
 800dfce:	454b      	cmp	r3, r9
 800dfd0:	dc01      	bgt.n	800dfd6 <_printf_float+0x2b2>
 800dfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfd4:	e794      	b.n	800df00 <_printf_float+0x1dc>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	4652      	mov	r2, sl
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4628      	mov	r0, r5
 800dfde:	47b8      	blx	r7
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f43f aefc 	beq.w	800ddde <_printf_float+0xba>
 800dfe6:	f109 0901 	add.w	r9, r9, #1
 800dfea:	e7ee      	b.n	800dfca <_printf_float+0x2a6>
 800dfec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dff0:	429a      	cmp	r2, r3
 800dff2:	bfa8      	it	ge
 800dff4:	461a      	movge	r2, r3
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	4691      	mov	r9, r2
 800dffa:	dd07      	ble.n	800e00c <_printf_float+0x2e8>
 800dffc:	4613      	mov	r3, r2
 800dffe:	4631      	mov	r1, r6
 800e000:	4642      	mov	r2, r8
 800e002:	4628      	mov	r0, r5
 800e004:	47b8      	blx	r7
 800e006:	3001      	adds	r0, #1
 800e008:	f43f aee9 	beq.w	800ddde <_printf_float+0xba>
 800e00c:	f104 031a 	add.w	r3, r4, #26
 800e010:	f04f 0b00 	mov.w	fp, #0
 800e014:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e018:	9306      	str	r3, [sp, #24]
 800e01a:	e015      	b.n	800e048 <_printf_float+0x324>
 800e01c:	7fefffff 	.word	0x7fefffff
 800e020:	08012bcc 	.word	0x08012bcc
 800e024:	08012bc8 	.word	0x08012bc8
 800e028:	08012bd4 	.word	0x08012bd4
 800e02c:	08012bd0 	.word	0x08012bd0
 800e030:	08012e84 	.word	0x08012e84
 800e034:	2301      	movs	r3, #1
 800e036:	9a06      	ldr	r2, [sp, #24]
 800e038:	4631      	mov	r1, r6
 800e03a:	4628      	mov	r0, r5
 800e03c:	47b8      	blx	r7
 800e03e:	3001      	adds	r0, #1
 800e040:	f43f aecd 	beq.w	800ddde <_printf_float+0xba>
 800e044:	f10b 0b01 	add.w	fp, fp, #1
 800e048:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e04c:	ebaa 0309 	sub.w	r3, sl, r9
 800e050:	455b      	cmp	r3, fp
 800e052:	dcef      	bgt.n	800e034 <_printf_float+0x310>
 800e054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e058:	429a      	cmp	r2, r3
 800e05a:	44d0      	add	r8, sl
 800e05c:	db15      	blt.n	800e08a <_printf_float+0x366>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	07da      	lsls	r2, r3, #31
 800e062:	d412      	bmi.n	800e08a <_printf_float+0x366>
 800e064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e066:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e068:	eba3 020a 	sub.w	r2, r3, sl
 800e06c:	eba3 0a01 	sub.w	sl, r3, r1
 800e070:	4592      	cmp	sl, r2
 800e072:	bfa8      	it	ge
 800e074:	4692      	movge	sl, r2
 800e076:	f1ba 0f00 	cmp.w	sl, #0
 800e07a:	dc0e      	bgt.n	800e09a <_printf_float+0x376>
 800e07c:	f04f 0800 	mov.w	r8, #0
 800e080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e084:	f104 091a 	add.w	r9, r4, #26
 800e088:	e019      	b.n	800e0be <_printf_float+0x39a>
 800e08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e08e:	4631      	mov	r1, r6
 800e090:	4628      	mov	r0, r5
 800e092:	47b8      	blx	r7
 800e094:	3001      	adds	r0, #1
 800e096:	d1e5      	bne.n	800e064 <_printf_float+0x340>
 800e098:	e6a1      	b.n	800ddde <_printf_float+0xba>
 800e09a:	4653      	mov	r3, sl
 800e09c:	4642      	mov	r2, r8
 800e09e:	4631      	mov	r1, r6
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	47b8      	blx	r7
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d1e9      	bne.n	800e07c <_printf_float+0x358>
 800e0a8:	e699      	b.n	800ddde <_printf_float+0xba>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	464a      	mov	r2, r9
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b8      	blx	r7
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	f43f ae92 	beq.w	800ddde <_printf_float+0xba>
 800e0ba:	f108 0801 	add.w	r8, r8, #1
 800e0be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0c2:	1a9b      	subs	r3, r3, r2
 800e0c4:	eba3 030a 	sub.w	r3, r3, sl
 800e0c8:	4543      	cmp	r3, r8
 800e0ca:	dcee      	bgt.n	800e0aa <_printf_float+0x386>
 800e0cc:	e74a      	b.n	800df64 <_printf_float+0x240>
 800e0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0d0:	2a01      	cmp	r2, #1
 800e0d2:	dc01      	bgt.n	800e0d8 <_printf_float+0x3b4>
 800e0d4:	07db      	lsls	r3, r3, #31
 800e0d6:	d53a      	bpl.n	800e14e <_printf_float+0x42a>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	4642      	mov	r2, r8
 800e0dc:	4631      	mov	r1, r6
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b8      	blx	r7
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f43f ae7b 	beq.w	800ddde <_printf_float+0xba>
 800e0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	47b8      	blx	r7
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	f108 0801 	add.w	r8, r8, #1
 800e0f8:	f43f ae71 	beq.w	800ddde <_printf_float+0xba>
 800e0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0fe:	2200      	movs	r2, #0
 800e100:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e108:	2300      	movs	r3, #0
 800e10a:	f7f2 fd05 	bl	8000b18 <__aeabi_dcmpeq>
 800e10e:	b9c8      	cbnz	r0, 800e144 <_printf_float+0x420>
 800e110:	4653      	mov	r3, sl
 800e112:	4642      	mov	r2, r8
 800e114:	4631      	mov	r1, r6
 800e116:	4628      	mov	r0, r5
 800e118:	47b8      	blx	r7
 800e11a:	3001      	adds	r0, #1
 800e11c:	d10e      	bne.n	800e13c <_printf_float+0x418>
 800e11e:	e65e      	b.n	800ddde <_printf_float+0xba>
 800e120:	2301      	movs	r3, #1
 800e122:	4652      	mov	r2, sl
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	f43f ae57 	beq.w	800ddde <_printf_float+0xba>
 800e130:	f108 0801 	add.w	r8, r8, #1
 800e134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e136:	3b01      	subs	r3, #1
 800e138:	4543      	cmp	r3, r8
 800e13a:	dcf1      	bgt.n	800e120 <_printf_float+0x3fc>
 800e13c:	464b      	mov	r3, r9
 800e13e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e142:	e6de      	b.n	800df02 <_printf_float+0x1de>
 800e144:	f04f 0800 	mov.w	r8, #0
 800e148:	f104 0a1a 	add.w	sl, r4, #26
 800e14c:	e7f2      	b.n	800e134 <_printf_float+0x410>
 800e14e:	2301      	movs	r3, #1
 800e150:	e7df      	b.n	800e112 <_printf_float+0x3ee>
 800e152:	2301      	movs	r3, #1
 800e154:	464a      	mov	r2, r9
 800e156:	4631      	mov	r1, r6
 800e158:	4628      	mov	r0, r5
 800e15a:	47b8      	blx	r7
 800e15c:	3001      	adds	r0, #1
 800e15e:	f43f ae3e 	beq.w	800ddde <_printf_float+0xba>
 800e162:	f108 0801 	add.w	r8, r8, #1
 800e166:	68e3      	ldr	r3, [r4, #12]
 800e168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e16a:	1a9b      	subs	r3, r3, r2
 800e16c:	4543      	cmp	r3, r8
 800e16e:	dcf0      	bgt.n	800e152 <_printf_float+0x42e>
 800e170:	e6fc      	b.n	800df6c <_printf_float+0x248>
 800e172:	f04f 0800 	mov.w	r8, #0
 800e176:	f104 0919 	add.w	r9, r4, #25
 800e17a:	e7f4      	b.n	800e166 <_printf_float+0x442>
 800e17c:	2900      	cmp	r1, #0
 800e17e:	f43f ae8b 	beq.w	800de98 <_printf_float+0x174>
 800e182:	2300      	movs	r3, #0
 800e184:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e188:	ab09      	add	r3, sp, #36	; 0x24
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	ec49 8b10 	vmov	d0, r8, r9
 800e190:	6022      	str	r2, [r4, #0]
 800e192:	f8cd a004 	str.w	sl, [sp, #4]
 800e196:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e19a:	4628      	mov	r0, r5
 800e19c:	f7ff fd2e 	bl	800dbfc <__cvt>
 800e1a0:	4680      	mov	r8, r0
 800e1a2:	e648      	b.n	800de36 <_printf_float+0x112>

0800e1a4 <_printf_common>:
 800e1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a8:	4691      	mov	r9, r2
 800e1aa:	461f      	mov	r7, r3
 800e1ac:	688a      	ldr	r2, [r1, #8]
 800e1ae:	690b      	ldr	r3, [r1, #16]
 800e1b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	bfb8      	it	lt
 800e1b8:	4613      	movlt	r3, r2
 800e1ba:	f8c9 3000 	str.w	r3, [r9]
 800e1be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1c2:	4606      	mov	r6, r0
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	b112      	cbz	r2, 800e1ce <_printf_common+0x2a>
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	f8c9 3000 	str.w	r3, [r9]
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	0699      	lsls	r1, r3, #26
 800e1d2:	bf42      	ittt	mi
 800e1d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e1d8:	3302      	addmi	r3, #2
 800e1da:	f8c9 3000 	strmi.w	r3, [r9]
 800e1de:	6825      	ldr	r5, [r4, #0]
 800e1e0:	f015 0506 	ands.w	r5, r5, #6
 800e1e4:	d107      	bne.n	800e1f6 <_printf_common+0x52>
 800e1e6:	f104 0a19 	add.w	sl, r4, #25
 800e1ea:	68e3      	ldr	r3, [r4, #12]
 800e1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e1f0:	1a9b      	subs	r3, r3, r2
 800e1f2:	42ab      	cmp	r3, r5
 800e1f4:	dc28      	bgt.n	800e248 <_printf_common+0xa4>
 800e1f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	3300      	adds	r3, #0
 800e1fe:	bf18      	it	ne
 800e200:	2301      	movne	r3, #1
 800e202:	0692      	lsls	r2, r2, #26
 800e204:	d42d      	bmi.n	800e262 <_printf_common+0xbe>
 800e206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e20a:	4639      	mov	r1, r7
 800e20c:	4630      	mov	r0, r6
 800e20e:	47c0      	blx	r8
 800e210:	3001      	adds	r0, #1
 800e212:	d020      	beq.n	800e256 <_printf_common+0xb2>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	68e5      	ldr	r5, [r4, #12]
 800e218:	f8d9 2000 	ldr.w	r2, [r9]
 800e21c:	f003 0306 	and.w	r3, r3, #6
 800e220:	2b04      	cmp	r3, #4
 800e222:	bf08      	it	eq
 800e224:	1aad      	subeq	r5, r5, r2
 800e226:	68a3      	ldr	r3, [r4, #8]
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	bf0c      	ite	eq
 800e22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e230:	2500      	movne	r5, #0
 800e232:	4293      	cmp	r3, r2
 800e234:	bfc4      	itt	gt
 800e236:	1a9b      	subgt	r3, r3, r2
 800e238:	18ed      	addgt	r5, r5, r3
 800e23a:	f04f 0900 	mov.w	r9, #0
 800e23e:	341a      	adds	r4, #26
 800e240:	454d      	cmp	r5, r9
 800e242:	d11a      	bne.n	800e27a <_printf_common+0xd6>
 800e244:	2000      	movs	r0, #0
 800e246:	e008      	b.n	800e25a <_printf_common+0xb6>
 800e248:	2301      	movs	r3, #1
 800e24a:	4652      	mov	r2, sl
 800e24c:	4639      	mov	r1, r7
 800e24e:	4630      	mov	r0, r6
 800e250:	47c0      	blx	r8
 800e252:	3001      	adds	r0, #1
 800e254:	d103      	bne.n	800e25e <_printf_common+0xba>
 800e256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25e:	3501      	adds	r5, #1
 800e260:	e7c3      	b.n	800e1ea <_printf_common+0x46>
 800e262:	18e1      	adds	r1, r4, r3
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	2030      	movs	r0, #48	; 0x30
 800e268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e26c:	4422      	add	r2, r4
 800e26e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e276:	3302      	adds	r3, #2
 800e278:	e7c5      	b.n	800e206 <_printf_common+0x62>
 800e27a:	2301      	movs	r3, #1
 800e27c:	4622      	mov	r2, r4
 800e27e:	4639      	mov	r1, r7
 800e280:	4630      	mov	r0, r6
 800e282:	47c0      	blx	r8
 800e284:	3001      	adds	r0, #1
 800e286:	d0e6      	beq.n	800e256 <_printf_common+0xb2>
 800e288:	f109 0901 	add.w	r9, r9, #1
 800e28c:	e7d8      	b.n	800e240 <_printf_common+0x9c>
	...

0800e290 <_printf_i>:
 800e290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e294:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e298:	460c      	mov	r4, r1
 800e29a:	7e09      	ldrb	r1, [r1, #24]
 800e29c:	b085      	sub	sp, #20
 800e29e:	296e      	cmp	r1, #110	; 0x6e
 800e2a0:	4617      	mov	r7, r2
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	4698      	mov	r8, r3
 800e2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2a8:	f000 80b3 	beq.w	800e412 <_printf_i+0x182>
 800e2ac:	d822      	bhi.n	800e2f4 <_printf_i+0x64>
 800e2ae:	2963      	cmp	r1, #99	; 0x63
 800e2b0:	d036      	beq.n	800e320 <_printf_i+0x90>
 800e2b2:	d80a      	bhi.n	800e2ca <_printf_i+0x3a>
 800e2b4:	2900      	cmp	r1, #0
 800e2b6:	f000 80b9 	beq.w	800e42c <_printf_i+0x19c>
 800e2ba:	2958      	cmp	r1, #88	; 0x58
 800e2bc:	f000 8083 	beq.w	800e3c6 <_printf_i+0x136>
 800e2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e2c8:	e032      	b.n	800e330 <_printf_i+0xa0>
 800e2ca:	2964      	cmp	r1, #100	; 0x64
 800e2cc:	d001      	beq.n	800e2d2 <_printf_i+0x42>
 800e2ce:	2969      	cmp	r1, #105	; 0x69
 800e2d0:	d1f6      	bne.n	800e2c0 <_printf_i+0x30>
 800e2d2:	6820      	ldr	r0, [r4, #0]
 800e2d4:	6813      	ldr	r3, [r2, #0]
 800e2d6:	0605      	lsls	r5, r0, #24
 800e2d8:	f103 0104 	add.w	r1, r3, #4
 800e2dc:	d52a      	bpl.n	800e334 <_printf_i+0xa4>
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6011      	str	r1, [r2, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	da03      	bge.n	800e2ee <_printf_i+0x5e>
 800e2e6:	222d      	movs	r2, #45	; 0x2d
 800e2e8:	425b      	negs	r3, r3
 800e2ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e2ee:	486f      	ldr	r0, [pc, #444]	; (800e4ac <_printf_i+0x21c>)
 800e2f0:	220a      	movs	r2, #10
 800e2f2:	e039      	b.n	800e368 <_printf_i+0xd8>
 800e2f4:	2973      	cmp	r1, #115	; 0x73
 800e2f6:	f000 809d 	beq.w	800e434 <_printf_i+0x1a4>
 800e2fa:	d808      	bhi.n	800e30e <_printf_i+0x7e>
 800e2fc:	296f      	cmp	r1, #111	; 0x6f
 800e2fe:	d020      	beq.n	800e342 <_printf_i+0xb2>
 800e300:	2970      	cmp	r1, #112	; 0x70
 800e302:	d1dd      	bne.n	800e2c0 <_printf_i+0x30>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	f043 0320 	orr.w	r3, r3, #32
 800e30a:	6023      	str	r3, [r4, #0]
 800e30c:	e003      	b.n	800e316 <_printf_i+0x86>
 800e30e:	2975      	cmp	r1, #117	; 0x75
 800e310:	d017      	beq.n	800e342 <_printf_i+0xb2>
 800e312:	2978      	cmp	r1, #120	; 0x78
 800e314:	d1d4      	bne.n	800e2c0 <_printf_i+0x30>
 800e316:	2378      	movs	r3, #120	; 0x78
 800e318:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e31c:	4864      	ldr	r0, [pc, #400]	; (800e4b0 <_printf_i+0x220>)
 800e31e:	e055      	b.n	800e3cc <_printf_i+0x13c>
 800e320:	6813      	ldr	r3, [r2, #0]
 800e322:	1d19      	adds	r1, r3, #4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6011      	str	r1, [r2, #0]
 800e328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e330:	2301      	movs	r3, #1
 800e332:	e08c      	b.n	800e44e <_printf_i+0x1be>
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6011      	str	r1, [r2, #0]
 800e338:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e33c:	bf18      	it	ne
 800e33e:	b21b      	sxthne	r3, r3
 800e340:	e7cf      	b.n	800e2e2 <_printf_i+0x52>
 800e342:	6813      	ldr	r3, [r2, #0]
 800e344:	6825      	ldr	r5, [r4, #0]
 800e346:	1d18      	adds	r0, r3, #4
 800e348:	6010      	str	r0, [r2, #0]
 800e34a:	0628      	lsls	r0, r5, #24
 800e34c:	d501      	bpl.n	800e352 <_printf_i+0xc2>
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	e002      	b.n	800e358 <_printf_i+0xc8>
 800e352:	0668      	lsls	r0, r5, #25
 800e354:	d5fb      	bpl.n	800e34e <_printf_i+0xbe>
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	4854      	ldr	r0, [pc, #336]	; (800e4ac <_printf_i+0x21c>)
 800e35a:	296f      	cmp	r1, #111	; 0x6f
 800e35c:	bf14      	ite	ne
 800e35e:	220a      	movne	r2, #10
 800e360:	2208      	moveq	r2, #8
 800e362:	2100      	movs	r1, #0
 800e364:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e368:	6865      	ldr	r5, [r4, #4]
 800e36a:	60a5      	str	r5, [r4, #8]
 800e36c:	2d00      	cmp	r5, #0
 800e36e:	f2c0 8095 	blt.w	800e49c <_printf_i+0x20c>
 800e372:	6821      	ldr	r1, [r4, #0]
 800e374:	f021 0104 	bic.w	r1, r1, #4
 800e378:	6021      	str	r1, [r4, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d13d      	bne.n	800e3fa <_printf_i+0x16a>
 800e37e:	2d00      	cmp	r5, #0
 800e380:	f040 808e 	bne.w	800e4a0 <_printf_i+0x210>
 800e384:	4665      	mov	r5, ip
 800e386:	2a08      	cmp	r2, #8
 800e388:	d10b      	bne.n	800e3a2 <_printf_i+0x112>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	07db      	lsls	r3, r3, #31
 800e38e:	d508      	bpl.n	800e3a2 <_printf_i+0x112>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	6862      	ldr	r2, [r4, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	bfde      	ittt	le
 800e398:	2330      	movle	r3, #48	; 0x30
 800e39a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e39e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e3a2:	ebac 0305 	sub.w	r3, ip, r5
 800e3a6:	6123      	str	r3, [r4, #16]
 800e3a8:	f8cd 8000 	str.w	r8, [sp]
 800e3ac:	463b      	mov	r3, r7
 800e3ae:	aa03      	add	r2, sp, #12
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff fef6 	bl	800e1a4 <_printf_common>
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	d14d      	bne.n	800e458 <_printf_i+0x1c8>
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3c0:	b005      	add	sp, #20
 800e3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3c6:	4839      	ldr	r0, [pc, #228]	; (800e4ac <_printf_i+0x21c>)
 800e3c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e3cc:	6813      	ldr	r3, [r2, #0]
 800e3ce:	6821      	ldr	r1, [r4, #0]
 800e3d0:	1d1d      	adds	r5, r3, #4
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6015      	str	r5, [r2, #0]
 800e3d6:	060a      	lsls	r2, r1, #24
 800e3d8:	d50b      	bpl.n	800e3f2 <_printf_i+0x162>
 800e3da:	07ca      	lsls	r2, r1, #31
 800e3dc:	bf44      	itt	mi
 800e3de:	f041 0120 	orrmi.w	r1, r1, #32
 800e3e2:	6021      	strmi	r1, [r4, #0]
 800e3e4:	b91b      	cbnz	r3, 800e3ee <_printf_i+0x15e>
 800e3e6:	6822      	ldr	r2, [r4, #0]
 800e3e8:	f022 0220 	bic.w	r2, r2, #32
 800e3ec:	6022      	str	r2, [r4, #0]
 800e3ee:	2210      	movs	r2, #16
 800e3f0:	e7b7      	b.n	800e362 <_printf_i+0xd2>
 800e3f2:	064d      	lsls	r5, r1, #25
 800e3f4:	bf48      	it	mi
 800e3f6:	b29b      	uxthmi	r3, r3
 800e3f8:	e7ef      	b.n	800e3da <_printf_i+0x14a>
 800e3fa:	4665      	mov	r5, ip
 800e3fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e400:	fb02 3311 	mls	r3, r2, r1, r3
 800e404:	5cc3      	ldrb	r3, [r0, r3]
 800e406:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e40a:	460b      	mov	r3, r1
 800e40c:	2900      	cmp	r1, #0
 800e40e:	d1f5      	bne.n	800e3fc <_printf_i+0x16c>
 800e410:	e7b9      	b.n	800e386 <_printf_i+0xf6>
 800e412:	6813      	ldr	r3, [r2, #0]
 800e414:	6825      	ldr	r5, [r4, #0]
 800e416:	6961      	ldr	r1, [r4, #20]
 800e418:	1d18      	adds	r0, r3, #4
 800e41a:	6010      	str	r0, [r2, #0]
 800e41c:	0628      	lsls	r0, r5, #24
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	d501      	bpl.n	800e426 <_printf_i+0x196>
 800e422:	6019      	str	r1, [r3, #0]
 800e424:	e002      	b.n	800e42c <_printf_i+0x19c>
 800e426:	066a      	lsls	r2, r5, #25
 800e428:	d5fb      	bpl.n	800e422 <_printf_i+0x192>
 800e42a:	8019      	strh	r1, [r3, #0]
 800e42c:	2300      	movs	r3, #0
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	4665      	mov	r5, ip
 800e432:	e7b9      	b.n	800e3a8 <_printf_i+0x118>
 800e434:	6813      	ldr	r3, [r2, #0]
 800e436:	1d19      	adds	r1, r3, #4
 800e438:	6011      	str	r1, [r2, #0]
 800e43a:	681d      	ldr	r5, [r3, #0]
 800e43c:	6862      	ldr	r2, [r4, #4]
 800e43e:	2100      	movs	r1, #0
 800e440:	4628      	mov	r0, r5
 800e442:	f7f1 fef5 	bl	8000230 <memchr>
 800e446:	b108      	cbz	r0, 800e44c <_printf_i+0x1bc>
 800e448:	1b40      	subs	r0, r0, r5
 800e44a:	6060      	str	r0, [r4, #4]
 800e44c:	6863      	ldr	r3, [r4, #4]
 800e44e:	6123      	str	r3, [r4, #16]
 800e450:	2300      	movs	r3, #0
 800e452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e456:	e7a7      	b.n	800e3a8 <_printf_i+0x118>
 800e458:	6923      	ldr	r3, [r4, #16]
 800e45a:	462a      	mov	r2, r5
 800e45c:	4639      	mov	r1, r7
 800e45e:	4630      	mov	r0, r6
 800e460:	47c0      	blx	r8
 800e462:	3001      	adds	r0, #1
 800e464:	d0aa      	beq.n	800e3bc <_printf_i+0x12c>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	079b      	lsls	r3, r3, #30
 800e46a:	d413      	bmi.n	800e494 <_printf_i+0x204>
 800e46c:	68e0      	ldr	r0, [r4, #12]
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	4298      	cmp	r0, r3
 800e472:	bfb8      	it	lt
 800e474:	4618      	movlt	r0, r3
 800e476:	e7a3      	b.n	800e3c0 <_printf_i+0x130>
 800e478:	2301      	movs	r3, #1
 800e47a:	464a      	mov	r2, r9
 800e47c:	4639      	mov	r1, r7
 800e47e:	4630      	mov	r0, r6
 800e480:	47c0      	blx	r8
 800e482:	3001      	adds	r0, #1
 800e484:	d09a      	beq.n	800e3bc <_printf_i+0x12c>
 800e486:	3501      	adds	r5, #1
 800e488:	68e3      	ldr	r3, [r4, #12]
 800e48a:	9a03      	ldr	r2, [sp, #12]
 800e48c:	1a9b      	subs	r3, r3, r2
 800e48e:	42ab      	cmp	r3, r5
 800e490:	dcf2      	bgt.n	800e478 <_printf_i+0x1e8>
 800e492:	e7eb      	b.n	800e46c <_printf_i+0x1dc>
 800e494:	2500      	movs	r5, #0
 800e496:	f104 0919 	add.w	r9, r4, #25
 800e49a:	e7f5      	b.n	800e488 <_printf_i+0x1f8>
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1ac      	bne.n	800e3fa <_printf_i+0x16a>
 800e4a0:	7803      	ldrb	r3, [r0, #0]
 800e4a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4aa:	e76c      	b.n	800e386 <_printf_i+0xf6>
 800e4ac:	08012bd8 	.word	0x08012bd8
 800e4b0:	08012be9 	.word	0x08012be9

0800e4b4 <_puts_r>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	460e      	mov	r6, r1
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	b118      	cbz	r0, 800e4c4 <_puts_r+0x10>
 800e4bc:	6983      	ldr	r3, [r0, #24]
 800e4be:	b90b      	cbnz	r3, 800e4c4 <_puts_r+0x10>
 800e4c0:	f001 f896 	bl	800f5f0 <__sinit>
 800e4c4:	69ab      	ldr	r3, [r5, #24]
 800e4c6:	68ac      	ldr	r4, [r5, #8]
 800e4c8:	b913      	cbnz	r3, 800e4d0 <_puts_r+0x1c>
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f001 f890 	bl	800f5f0 <__sinit>
 800e4d0:	4b23      	ldr	r3, [pc, #140]	; (800e560 <_puts_r+0xac>)
 800e4d2:	429c      	cmp	r4, r3
 800e4d4:	d117      	bne.n	800e506 <_puts_r+0x52>
 800e4d6:	686c      	ldr	r4, [r5, #4]
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	071b      	lsls	r3, r3, #28
 800e4dc:	d51d      	bpl.n	800e51a <_puts_r+0x66>
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	b1db      	cbz	r3, 800e51a <_puts_r+0x66>
 800e4e2:	3e01      	subs	r6, #1
 800e4e4:	68a3      	ldr	r3, [r4, #8]
 800e4e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	60a3      	str	r3, [r4, #8]
 800e4ee:	b9e9      	cbnz	r1, 800e52c <_puts_r+0x78>
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da2e      	bge.n	800e552 <_puts_r+0x9e>
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	210a      	movs	r1, #10
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 f883 	bl	800e604 <__swbuf_r>
 800e4fe:	3001      	adds	r0, #1
 800e500:	d011      	beq.n	800e526 <_puts_r+0x72>
 800e502:	200a      	movs	r0, #10
 800e504:	e011      	b.n	800e52a <_puts_r+0x76>
 800e506:	4b17      	ldr	r3, [pc, #92]	; (800e564 <_puts_r+0xb0>)
 800e508:	429c      	cmp	r4, r3
 800e50a:	d101      	bne.n	800e510 <_puts_r+0x5c>
 800e50c:	68ac      	ldr	r4, [r5, #8]
 800e50e:	e7e3      	b.n	800e4d8 <_puts_r+0x24>
 800e510:	4b15      	ldr	r3, [pc, #84]	; (800e568 <_puts_r+0xb4>)
 800e512:	429c      	cmp	r4, r3
 800e514:	bf08      	it	eq
 800e516:	68ec      	ldreq	r4, [r5, #12]
 800e518:	e7de      	b.n	800e4d8 <_puts_r+0x24>
 800e51a:	4621      	mov	r1, r4
 800e51c:	4628      	mov	r0, r5
 800e51e:	f000 f8c3 	bl	800e6a8 <__swsetup_r>
 800e522:	2800      	cmp	r0, #0
 800e524:	d0dd      	beq.n	800e4e2 <_puts_r+0x2e>
 800e526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da04      	bge.n	800e53a <_puts_r+0x86>
 800e530:	69a2      	ldr	r2, [r4, #24]
 800e532:	429a      	cmp	r2, r3
 800e534:	dc06      	bgt.n	800e544 <_puts_r+0x90>
 800e536:	290a      	cmp	r1, #10
 800e538:	d004      	beq.n	800e544 <_puts_r+0x90>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	6022      	str	r2, [r4, #0]
 800e540:	7019      	strb	r1, [r3, #0]
 800e542:	e7cf      	b.n	800e4e4 <_puts_r+0x30>
 800e544:	4622      	mov	r2, r4
 800e546:	4628      	mov	r0, r5
 800e548:	f000 f85c 	bl	800e604 <__swbuf_r>
 800e54c:	3001      	adds	r0, #1
 800e54e:	d1c9      	bne.n	800e4e4 <_puts_r+0x30>
 800e550:	e7e9      	b.n	800e526 <_puts_r+0x72>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	200a      	movs	r0, #10
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	6022      	str	r2, [r4, #0]
 800e55a:	7018      	strb	r0, [r3, #0]
 800e55c:	e7e5      	b.n	800e52a <_puts_r+0x76>
 800e55e:	bf00      	nop
 800e560:	08012c28 	.word	0x08012c28
 800e564:	08012c48 	.word	0x08012c48
 800e568:	08012c08 	.word	0x08012c08

0800e56c <puts>:
 800e56c:	4b02      	ldr	r3, [pc, #8]	; (800e578 <puts+0xc>)
 800e56e:	4601      	mov	r1, r0
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	f7ff bf9f 	b.w	800e4b4 <_puts_r>
 800e576:	bf00      	nop
 800e578:	20001cac 	.word	0x20001cac

0800e57c <sniprintf>:
 800e57c:	b40c      	push	{r2, r3}
 800e57e:	b530      	push	{r4, r5, lr}
 800e580:	4b17      	ldr	r3, [pc, #92]	; (800e5e0 <sniprintf+0x64>)
 800e582:	1e0c      	subs	r4, r1, #0
 800e584:	b09d      	sub	sp, #116	; 0x74
 800e586:	681d      	ldr	r5, [r3, #0]
 800e588:	da08      	bge.n	800e59c <sniprintf+0x20>
 800e58a:	238b      	movs	r3, #139	; 0x8b
 800e58c:	602b      	str	r3, [r5, #0]
 800e58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e592:	b01d      	add	sp, #116	; 0x74
 800e594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e598:	b002      	add	sp, #8
 800e59a:	4770      	bx	lr
 800e59c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e5a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e5a4:	bf14      	ite	ne
 800e5a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e5aa:	4623      	moveq	r3, r4
 800e5ac:	9304      	str	r3, [sp, #16]
 800e5ae:	9307      	str	r3, [sp, #28]
 800e5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5b4:	9002      	str	r0, [sp, #8]
 800e5b6:	9006      	str	r0, [sp, #24]
 800e5b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e5bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e5be:	ab21      	add	r3, sp, #132	; 0x84
 800e5c0:	a902      	add	r1, sp, #8
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	f001 fd0d 	bl	800ffe4 <_svfiprintf_r>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	bfbc      	itt	lt
 800e5ce:	238b      	movlt	r3, #139	; 0x8b
 800e5d0:	602b      	strlt	r3, [r5, #0]
 800e5d2:	2c00      	cmp	r4, #0
 800e5d4:	d0dd      	beq.n	800e592 <sniprintf+0x16>
 800e5d6:	9b02      	ldr	r3, [sp, #8]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
 800e5dc:	e7d9      	b.n	800e592 <sniprintf+0x16>
 800e5de:	bf00      	nop
 800e5e0:	20001cac 	.word	0x20001cac

0800e5e4 <strcat>:
 800e5e4:	b510      	push	{r4, lr}
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	781a      	ldrb	r2, [r3, #0]
 800e5ea:	1c5c      	adds	r4, r3, #1
 800e5ec:	b93a      	cbnz	r2, 800e5fe <strcat+0x1a>
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	d1f9      	bne.n	800e5f0 <strcat+0xc>
 800e5fc:	bd10      	pop	{r4, pc}
 800e5fe:	4623      	mov	r3, r4
 800e600:	e7f2      	b.n	800e5e8 <strcat+0x4>
	...

0800e604 <__swbuf_r>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	460e      	mov	r6, r1
 800e608:	4614      	mov	r4, r2
 800e60a:	4605      	mov	r5, r0
 800e60c:	b118      	cbz	r0, 800e616 <__swbuf_r+0x12>
 800e60e:	6983      	ldr	r3, [r0, #24]
 800e610:	b90b      	cbnz	r3, 800e616 <__swbuf_r+0x12>
 800e612:	f000 ffed 	bl	800f5f0 <__sinit>
 800e616:	4b21      	ldr	r3, [pc, #132]	; (800e69c <__swbuf_r+0x98>)
 800e618:	429c      	cmp	r4, r3
 800e61a:	d12a      	bne.n	800e672 <__swbuf_r+0x6e>
 800e61c:	686c      	ldr	r4, [r5, #4]
 800e61e:	69a3      	ldr	r3, [r4, #24]
 800e620:	60a3      	str	r3, [r4, #8]
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	071a      	lsls	r2, r3, #28
 800e626:	d52e      	bpl.n	800e686 <__swbuf_r+0x82>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	b363      	cbz	r3, 800e686 <__swbuf_r+0x82>
 800e62c:	6923      	ldr	r3, [r4, #16]
 800e62e:	6820      	ldr	r0, [r4, #0]
 800e630:	1ac0      	subs	r0, r0, r3
 800e632:	6963      	ldr	r3, [r4, #20]
 800e634:	b2f6      	uxtb	r6, r6
 800e636:	4283      	cmp	r3, r0
 800e638:	4637      	mov	r7, r6
 800e63a:	dc04      	bgt.n	800e646 <__swbuf_r+0x42>
 800e63c:	4621      	mov	r1, r4
 800e63e:	4628      	mov	r0, r5
 800e640:	f000 ff6c 	bl	800f51c <_fflush_r>
 800e644:	bb28      	cbnz	r0, 800e692 <__swbuf_r+0x8e>
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	3b01      	subs	r3, #1
 800e64a:	60a3      	str	r3, [r4, #8]
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	6022      	str	r2, [r4, #0]
 800e652:	701e      	strb	r6, [r3, #0]
 800e654:	6963      	ldr	r3, [r4, #20]
 800e656:	3001      	adds	r0, #1
 800e658:	4283      	cmp	r3, r0
 800e65a:	d004      	beq.n	800e666 <__swbuf_r+0x62>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	07db      	lsls	r3, r3, #31
 800e660:	d519      	bpl.n	800e696 <__swbuf_r+0x92>
 800e662:	2e0a      	cmp	r6, #10
 800e664:	d117      	bne.n	800e696 <__swbuf_r+0x92>
 800e666:	4621      	mov	r1, r4
 800e668:	4628      	mov	r0, r5
 800e66a:	f000 ff57 	bl	800f51c <_fflush_r>
 800e66e:	b190      	cbz	r0, 800e696 <__swbuf_r+0x92>
 800e670:	e00f      	b.n	800e692 <__swbuf_r+0x8e>
 800e672:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <__swbuf_r+0x9c>)
 800e674:	429c      	cmp	r4, r3
 800e676:	d101      	bne.n	800e67c <__swbuf_r+0x78>
 800e678:	68ac      	ldr	r4, [r5, #8]
 800e67a:	e7d0      	b.n	800e61e <__swbuf_r+0x1a>
 800e67c:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <__swbuf_r+0xa0>)
 800e67e:	429c      	cmp	r4, r3
 800e680:	bf08      	it	eq
 800e682:	68ec      	ldreq	r4, [r5, #12]
 800e684:	e7cb      	b.n	800e61e <__swbuf_r+0x1a>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f000 f80d 	bl	800e6a8 <__swsetup_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0cc      	beq.n	800e62c <__swbuf_r+0x28>
 800e692:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e696:	4638      	mov	r0, r7
 800e698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e69a:	bf00      	nop
 800e69c:	08012c28 	.word	0x08012c28
 800e6a0:	08012c48 	.word	0x08012c48
 800e6a4:	08012c08 	.word	0x08012c08

0800e6a8 <__swsetup_r>:
 800e6a8:	4b32      	ldr	r3, [pc, #200]	; (800e774 <__swsetup_r+0xcc>)
 800e6aa:	b570      	push	{r4, r5, r6, lr}
 800e6ac:	681d      	ldr	r5, [r3, #0]
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	b125      	cbz	r5, 800e6be <__swsetup_r+0x16>
 800e6b4:	69ab      	ldr	r3, [r5, #24]
 800e6b6:	b913      	cbnz	r3, 800e6be <__swsetup_r+0x16>
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f000 ff99 	bl	800f5f0 <__sinit>
 800e6be:	4b2e      	ldr	r3, [pc, #184]	; (800e778 <__swsetup_r+0xd0>)
 800e6c0:	429c      	cmp	r4, r3
 800e6c2:	d10f      	bne.n	800e6e4 <__swsetup_r+0x3c>
 800e6c4:	686c      	ldr	r4, [r5, #4]
 800e6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	0715      	lsls	r5, r2, #28
 800e6ce:	d42c      	bmi.n	800e72a <__swsetup_r+0x82>
 800e6d0:	06d0      	lsls	r0, r2, #27
 800e6d2:	d411      	bmi.n	800e6f8 <__swsetup_r+0x50>
 800e6d4:	2209      	movs	r2, #9
 800e6d6:	6032      	str	r2, [r6, #0]
 800e6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6dc:	81a3      	strh	r3, [r4, #12]
 800e6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6e2:	e03e      	b.n	800e762 <__swsetup_r+0xba>
 800e6e4:	4b25      	ldr	r3, [pc, #148]	; (800e77c <__swsetup_r+0xd4>)
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	d101      	bne.n	800e6ee <__swsetup_r+0x46>
 800e6ea:	68ac      	ldr	r4, [r5, #8]
 800e6ec:	e7eb      	b.n	800e6c6 <__swsetup_r+0x1e>
 800e6ee:	4b24      	ldr	r3, [pc, #144]	; (800e780 <__swsetup_r+0xd8>)
 800e6f0:	429c      	cmp	r4, r3
 800e6f2:	bf08      	it	eq
 800e6f4:	68ec      	ldreq	r4, [r5, #12]
 800e6f6:	e7e6      	b.n	800e6c6 <__swsetup_r+0x1e>
 800e6f8:	0751      	lsls	r1, r2, #29
 800e6fa:	d512      	bpl.n	800e722 <__swsetup_r+0x7a>
 800e6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6fe:	b141      	cbz	r1, 800e712 <__swsetup_r+0x6a>
 800e700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e704:	4299      	cmp	r1, r3
 800e706:	d002      	beq.n	800e70e <__swsetup_r+0x66>
 800e708:	4630      	mov	r0, r6
 800e70a:	f001 fb69 	bl	800fde0 <_free_r>
 800e70e:	2300      	movs	r3, #0
 800e710:	6363      	str	r3, [r4, #52]	; 0x34
 800e712:	89a3      	ldrh	r3, [r4, #12]
 800e714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e718:	81a3      	strh	r3, [r4, #12]
 800e71a:	2300      	movs	r3, #0
 800e71c:	6063      	str	r3, [r4, #4]
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	89a3      	ldrh	r3, [r4, #12]
 800e724:	f043 0308 	orr.w	r3, r3, #8
 800e728:	81a3      	strh	r3, [r4, #12]
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	b94b      	cbnz	r3, 800e742 <__swsetup_r+0x9a>
 800e72e:	89a3      	ldrh	r3, [r4, #12]
 800e730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e738:	d003      	beq.n	800e742 <__swsetup_r+0x9a>
 800e73a:	4621      	mov	r1, r4
 800e73c:	4630      	mov	r0, r6
 800e73e:	f001 f813 	bl	800f768 <__smakebuf_r>
 800e742:	89a2      	ldrh	r2, [r4, #12]
 800e744:	f012 0301 	ands.w	r3, r2, #1
 800e748:	d00c      	beq.n	800e764 <__swsetup_r+0xbc>
 800e74a:	2300      	movs	r3, #0
 800e74c:	60a3      	str	r3, [r4, #8]
 800e74e:	6963      	ldr	r3, [r4, #20]
 800e750:	425b      	negs	r3, r3
 800e752:	61a3      	str	r3, [r4, #24]
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	b953      	cbnz	r3, 800e76e <__swsetup_r+0xc6>
 800e758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e75c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e760:	d1ba      	bne.n	800e6d8 <__swsetup_r+0x30>
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	0792      	lsls	r2, r2, #30
 800e766:	bf58      	it	pl
 800e768:	6963      	ldrpl	r3, [r4, #20]
 800e76a:	60a3      	str	r3, [r4, #8]
 800e76c:	e7f2      	b.n	800e754 <__swsetup_r+0xac>
 800e76e:	2000      	movs	r0, #0
 800e770:	e7f7      	b.n	800e762 <__swsetup_r+0xba>
 800e772:	bf00      	nop
 800e774:	20001cac 	.word	0x20001cac
 800e778:	08012c28 	.word	0x08012c28
 800e77c:	08012c48 	.word	0x08012c48
 800e780:	08012c08 	.word	0x08012c08

0800e784 <quorem>:
 800e784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	6903      	ldr	r3, [r0, #16]
 800e78a:	690c      	ldr	r4, [r1, #16]
 800e78c:	42a3      	cmp	r3, r4
 800e78e:	4680      	mov	r8, r0
 800e790:	f2c0 8082 	blt.w	800e898 <quorem+0x114>
 800e794:	3c01      	subs	r4, #1
 800e796:	f101 0714 	add.w	r7, r1, #20
 800e79a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e79e:	f100 0614 	add.w	r6, r0, #20
 800e7a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e7a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e7aa:	eb06 030c 	add.w	r3, r6, ip
 800e7ae:	3501      	adds	r5, #1
 800e7b0:	eb07 090c 	add.w	r9, r7, ip
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800e7ba:	b395      	cbz	r5, 800e822 <quorem+0x9e>
 800e7bc:	f04f 0a00 	mov.w	sl, #0
 800e7c0:	4638      	mov	r0, r7
 800e7c2:	46b6      	mov	lr, r6
 800e7c4:	46d3      	mov	fp, sl
 800e7c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7ca:	b293      	uxth	r3, r2
 800e7cc:	fb05 a303 	mla	r3, r5, r3, sl
 800e7d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	ebab 0303 	sub.w	r3, fp, r3
 800e7da:	0c12      	lsrs	r2, r2, #16
 800e7dc:	f8de b000 	ldr.w	fp, [lr]
 800e7e0:	fb05 a202 	mla	r2, r5, r2, sl
 800e7e4:	fa13 f38b 	uxtah	r3, r3, fp
 800e7e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e7ec:	fa1f fb82 	uxth.w	fp, r2
 800e7f0:	f8de 2000 	ldr.w	r2, [lr]
 800e7f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e7f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e802:	4581      	cmp	r9, r0
 800e804:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e808:	f84e 3b04 	str.w	r3, [lr], #4
 800e80c:	d2db      	bcs.n	800e7c6 <quorem+0x42>
 800e80e:	f856 300c 	ldr.w	r3, [r6, ip]
 800e812:	b933      	cbnz	r3, 800e822 <quorem+0x9e>
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	3b04      	subs	r3, #4
 800e818:	429e      	cmp	r6, r3
 800e81a:	461a      	mov	r2, r3
 800e81c:	d330      	bcc.n	800e880 <quorem+0xfc>
 800e81e:	f8c8 4010 	str.w	r4, [r8, #16]
 800e822:	4640      	mov	r0, r8
 800e824:	f001 fa08 	bl	800fc38 <__mcmp>
 800e828:	2800      	cmp	r0, #0
 800e82a:	db25      	blt.n	800e878 <quorem+0xf4>
 800e82c:	3501      	adds	r5, #1
 800e82e:	4630      	mov	r0, r6
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	f857 2b04 	ldr.w	r2, [r7], #4
 800e838:	f8d0 e000 	ldr.w	lr, [r0]
 800e83c:	b293      	uxth	r3, r2
 800e83e:	ebac 0303 	sub.w	r3, ip, r3
 800e842:	0c12      	lsrs	r2, r2, #16
 800e844:	fa13 f38e 	uxtah	r3, r3, lr
 800e848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e84c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e850:	b29b      	uxth	r3, r3
 800e852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e856:	45b9      	cmp	r9, r7
 800e858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e85c:	f840 3b04 	str.w	r3, [r0], #4
 800e860:	d2e8      	bcs.n	800e834 <quorem+0xb0>
 800e862:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e866:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e86a:	b92a      	cbnz	r2, 800e878 <quorem+0xf4>
 800e86c:	3b04      	subs	r3, #4
 800e86e:	429e      	cmp	r6, r3
 800e870:	461a      	mov	r2, r3
 800e872:	d30b      	bcc.n	800e88c <quorem+0x108>
 800e874:	f8c8 4010 	str.w	r4, [r8, #16]
 800e878:	4628      	mov	r0, r5
 800e87a:	b003      	add	sp, #12
 800e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e880:	6812      	ldr	r2, [r2, #0]
 800e882:	3b04      	subs	r3, #4
 800e884:	2a00      	cmp	r2, #0
 800e886:	d1ca      	bne.n	800e81e <quorem+0x9a>
 800e888:	3c01      	subs	r4, #1
 800e88a:	e7c5      	b.n	800e818 <quorem+0x94>
 800e88c:	6812      	ldr	r2, [r2, #0]
 800e88e:	3b04      	subs	r3, #4
 800e890:	2a00      	cmp	r2, #0
 800e892:	d1ef      	bne.n	800e874 <quorem+0xf0>
 800e894:	3c01      	subs	r4, #1
 800e896:	e7ea      	b.n	800e86e <quorem+0xea>
 800e898:	2000      	movs	r0, #0
 800e89a:	e7ee      	b.n	800e87a <quorem+0xf6>
 800e89c:	0000      	movs	r0, r0
	...

0800e8a0 <_dtoa_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	ec57 6b10 	vmov	r6, r7, d0
 800e8a8:	b097      	sub	sp, #92	; 0x5c
 800e8aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8ac:	9106      	str	r1, [sp, #24]
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e8b2:	9312      	str	r3, [sp, #72]	; 0x48
 800e8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e8b8:	e9cd 6700 	strd	r6, r7, [sp]
 800e8bc:	b93d      	cbnz	r5, 800e8ce <_dtoa_r+0x2e>
 800e8be:	2010      	movs	r0, #16
 800e8c0:	f000 ff92 	bl	800f7e8 <malloc>
 800e8c4:	6260      	str	r0, [r4, #36]	; 0x24
 800e8c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8ca:	6005      	str	r5, [r0, #0]
 800e8cc:	60c5      	str	r5, [r0, #12]
 800e8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8d0:	6819      	ldr	r1, [r3, #0]
 800e8d2:	b151      	cbz	r1, 800e8ea <_dtoa_r+0x4a>
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	604a      	str	r2, [r1, #4]
 800e8d8:	2301      	movs	r3, #1
 800e8da:	4093      	lsls	r3, r2
 800e8dc:	608b      	str	r3, [r1, #8]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f000 ffc9 	bl	800f876 <_Bfree>
 800e8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	601a      	str	r2, [r3, #0]
 800e8ea:	1e3b      	subs	r3, r7, #0
 800e8ec:	bfbb      	ittet	lt
 800e8ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8f2:	9301      	strlt	r3, [sp, #4]
 800e8f4:	2300      	movge	r3, #0
 800e8f6:	2201      	movlt	r2, #1
 800e8f8:	bfac      	ite	ge
 800e8fa:	f8c8 3000 	strge.w	r3, [r8]
 800e8fe:	f8c8 2000 	strlt.w	r2, [r8]
 800e902:	4baf      	ldr	r3, [pc, #700]	; (800ebc0 <_dtoa_r+0x320>)
 800e904:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e908:	ea33 0308 	bics.w	r3, r3, r8
 800e90c:	d114      	bne.n	800e938 <_dtoa_r+0x98>
 800e90e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e910:	f242 730f 	movw	r3, #9999	; 0x270f
 800e914:	6013      	str	r3, [r2, #0]
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	b923      	cbnz	r3, 800e924 <_dtoa_r+0x84>
 800e91a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e91e:	2800      	cmp	r0, #0
 800e920:	f000 8542 	beq.w	800f3a8 <_dtoa_r+0xb08>
 800e924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e926:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ebd4 <_dtoa_r+0x334>
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f000 8544 	beq.w	800f3b8 <_dtoa_r+0xb18>
 800e930:	f10b 0303 	add.w	r3, fp, #3
 800e934:	f000 bd3e 	b.w	800f3b4 <_dtoa_r+0xb14>
 800e938:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e93c:	2200      	movs	r2, #0
 800e93e:	2300      	movs	r3, #0
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f2 f8e8 	bl	8000b18 <__aeabi_dcmpeq>
 800e948:	4681      	mov	r9, r0
 800e94a:	b168      	cbz	r0, 800e968 <_dtoa_r+0xc8>
 800e94c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e94e:	2301      	movs	r3, #1
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8524 	beq.w	800f3a2 <_dtoa_r+0xb02>
 800e95a:	4b9a      	ldr	r3, [pc, #616]	; (800ebc4 <_dtoa_r+0x324>)
 800e95c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e95e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800e962:	6013      	str	r3, [r2, #0]
 800e964:	f000 bd28 	b.w	800f3b8 <_dtoa_r+0xb18>
 800e968:	aa14      	add	r2, sp, #80	; 0x50
 800e96a:	a915      	add	r1, sp, #84	; 0x54
 800e96c:	ec47 6b10 	vmov	d0, r6, r7
 800e970:	4620      	mov	r0, r4
 800e972:	f001 f9d8 	bl	800fd26 <__d2b>
 800e976:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e97a:	9004      	str	r0, [sp, #16]
 800e97c:	2d00      	cmp	r5, #0
 800e97e:	d07c      	beq.n	800ea7a <_dtoa_r+0x1da>
 800e980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e984:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e988:	46b2      	mov	sl, r6
 800e98a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e992:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e996:	2200      	movs	r2, #0
 800e998:	4b8b      	ldr	r3, [pc, #556]	; (800ebc8 <_dtoa_r+0x328>)
 800e99a:	4650      	mov	r0, sl
 800e99c:	4659      	mov	r1, fp
 800e99e:	f7f1 fc9b 	bl	80002d8 <__aeabi_dsub>
 800e9a2:	a381      	add	r3, pc, #516	; (adr r3, 800eba8 <_dtoa_r+0x308>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fe4e 	bl	8000648 <__aeabi_dmul>
 800e9ac:	a380      	add	r3, pc, #512	; (adr r3, 800ebb0 <_dtoa_r+0x310>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fc93 	bl	80002dc <__adddf3>
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	460f      	mov	r7, r1
 800e9bc:	f7f1 fdda 	bl	8000574 <__aeabi_i2d>
 800e9c0:	a37d      	add	r3, pc, #500	; (adr r3, 800ebb8 <_dtoa_r+0x318>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fe3f 	bl	8000648 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f1 fc83 	bl	80002dc <__adddf3>
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	460f      	mov	r7, r1
 800e9da:	f7f2 f8e5 	bl	8000ba8 <__aeabi_d2iz>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	4682      	mov	sl, r0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f2 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800e9ec:	b148      	cbz	r0, 800ea02 <_dtoa_r+0x162>
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	f7f1 fdc0 	bl	8000574 <__aeabi_i2d>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	f7f2 f88e 	bl	8000b18 <__aeabi_dcmpeq>
 800e9fc:	b908      	cbnz	r0, 800ea02 <_dtoa_r+0x162>
 800e9fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ea02:	f1ba 0f16 	cmp.w	sl, #22
 800ea06:	d859      	bhi.n	800eabc <_dtoa_r+0x21c>
 800ea08:	4970      	ldr	r1, [pc, #448]	; (800ebcc <_dtoa_r+0x32c>)
 800ea0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ea0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea16:	f7f2 f8a7 	bl	8000b68 <__aeabi_dcmpgt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d050      	beq.n	800eac0 <_dtoa_r+0x220>
 800ea1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ea22:	2300      	movs	r3, #0
 800ea24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea28:	1b5d      	subs	r5, r3, r5
 800ea2a:	f1b5 0801 	subs.w	r8, r5, #1
 800ea2e:	bf49      	itett	mi
 800ea30:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea34:	2300      	movpl	r3, #0
 800ea36:	9305      	strmi	r3, [sp, #20]
 800ea38:	f04f 0800 	movmi.w	r8, #0
 800ea3c:	bf58      	it	pl
 800ea3e:	9305      	strpl	r3, [sp, #20]
 800ea40:	f1ba 0f00 	cmp.w	sl, #0
 800ea44:	db3e      	blt.n	800eac4 <_dtoa_r+0x224>
 800ea46:	2300      	movs	r3, #0
 800ea48:	44d0      	add	r8, sl
 800ea4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ea4e:	9307      	str	r3, [sp, #28]
 800ea50:	9b06      	ldr	r3, [sp, #24]
 800ea52:	2b09      	cmp	r3, #9
 800ea54:	f200 8090 	bhi.w	800eb78 <_dtoa_r+0x2d8>
 800ea58:	2b05      	cmp	r3, #5
 800ea5a:	bfc4      	itt	gt
 800ea5c:	3b04      	subgt	r3, #4
 800ea5e:	9306      	strgt	r3, [sp, #24]
 800ea60:	9b06      	ldr	r3, [sp, #24]
 800ea62:	f1a3 0302 	sub.w	r3, r3, #2
 800ea66:	bfcc      	ite	gt
 800ea68:	2500      	movgt	r5, #0
 800ea6a:	2501      	movle	r5, #1
 800ea6c:	2b03      	cmp	r3, #3
 800ea6e:	f200 808f 	bhi.w	800eb90 <_dtoa_r+0x2f0>
 800ea72:	e8df f003 	tbb	[pc, r3]
 800ea76:	7f7d      	.short	0x7f7d
 800ea78:	7131      	.short	0x7131
 800ea7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ea7e:	441d      	add	r5, r3
 800ea80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ea84:	2820      	cmp	r0, #32
 800ea86:	dd13      	ble.n	800eab0 <_dtoa_r+0x210>
 800ea88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ea8c:	9b00      	ldr	r3, [sp, #0]
 800ea8e:	fa08 f800 	lsl.w	r8, r8, r0
 800ea92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ea96:	fa23 f000 	lsr.w	r0, r3, r0
 800ea9a:	ea48 0000 	orr.w	r0, r8, r0
 800ea9e:	f7f1 fd59 	bl	8000554 <__aeabi_ui2d>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800eaaa:	3d01      	subs	r5, #1
 800eaac:	9313      	str	r3, [sp, #76]	; 0x4c
 800eaae:	e772      	b.n	800e996 <_dtoa_r+0xf6>
 800eab0:	9b00      	ldr	r3, [sp, #0]
 800eab2:	f1c0 0020 	rsb	r0, r0, #32
 800eab6:	fa03 f000 	lsl.w	r0, r3, r0
 800eaba:	e7f0      	b.n	800ea9e <_dtoa_r+0x1fe>
 800eabc:	2301      	movs	r3, #1
 800eabe:	e7b1      	b.n	800ea24 <_dtoa_r+0x184>
 800eac0:	900f      	str	r0, [sp, #60]	; 0x3c
 800eac2:	e7b0      	b.n	800ea26 <_dtoa_r+0x186>
 800eac4:	9b05      	ldr	r3, [sp, #20]
 800eac6:	eba3 030a 	sub.w	r3, r3, sl
 800eaca:	9305      	str	r3, [sp, #20]
 800eacc:	f1ca 0300 	rsb	r3, sl, #0
 800ead0:	9307      	str	r3, [sp, #28]
 800ead2:	2300      	movs	r3, #0
 800ead4:	930e      	str	r3, [sp, #56]	; 0x38
 800ead6:	e7bb      	b.n	800ea50 <_dtoa_r+0x1b0>
 800ead8:	2301      	movs	r3, #1
 800eada:	930a      	str	r3, [sp, #40]	; 0x28
 800eadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	dd59      	ble.n	800eb96 <_dtoa_r+0x2f6>
 800eae2:	9302      	str	r3, [sp, #8]
 800eae4:	4699      	mov	r9, r3
 800eae6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eae8:	2200      	movs	r2, #0
 800eaea:	6072      	str	r2, [r6, #4]
 800eaec:	2204      	movs	r2, #4
 800eaee:	f102 0014 	add.w	r0, r2, #20
 800eaf2:	4298      	cmp	r0, r3
 800eaf4:	6871      	ldr	r1, [r6, #4]
 800eaf6:	d953      	bls.n	800eba0 <_dtoa_r+0x300>
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f000 fe88 	bl	800f80e <_Balloc>
 800eafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb00:	6030      	str	r0, [r6, #0]
 800eb02:	f1b9 0f0e 	cmp.w	r9, #14
 800eb06:	f8d3 b000 	ldr.w	fp, [r3]
 800eb0a:	f200 80e6 	bhi.w	800ecda <_dtoa_r+0x43a>
 800eb0e:	2d00      	cmp	r5, #0
 800eb10:	f000 80e3 	beq.w	800ecda <_dtoa_r+0x43a>
 800eb14:	ed9d 7b00 	vldr	d7, [sp]
 800eb18:	f1ba 0f00 	cmp.w	sl, #0
 800eb1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800eb20:	dd74      	ble.n	800ec0c <_dtoa_r+0x36c>
 800eb22:	4a2a      	ldr	r2, [pc, #168]	; (800ebcc <_dtoa_r+0x32c>)
 800eb24:	f00a 030f 	and.w	r3, sl, #15
 800eb28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb2c:	ed93 7b00 	vldr	d7, [r3]
 800eb30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800eb34:	06f0      	lsls	r0, r6, #27
 800eb36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800eb3a:	d565      	bpl.n	800ec08 <_dtoa_r+0x368>
 800eb3c:	4b24      	ldr	r3, [pc, #144]	; (800ebd0 <_dtoa_r+0x330>)
 800eb3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb46:	f7f1 fea9 	bl	800089c <__aeabi_ddiv>
 800eb4a:	e9cd 0100 	strd	r0, r1, [sp]
 800eb4e:	f006 060f 	and.w	r6, r6, #15
 800eb52:	2503      	movs	r5, #3
 800eb54:	4f1e      	ldr	r7, [pc, #120]	; (800ebd0 <_dtoa_r+0x330>)
 800eb56:	e04c      	b.n	800ebf2 <_dtoa_r+0x352>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	930a      	str	r3, [sp, #40]	; 0x28
 800eb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb5e:	4453      	add	r3, sl
 800eb60:	f103 0901 	add.w	r9, r3, #1
 800eb64:	9302      	str	r3, [sp, #8]
 800eb66:	464b      	mov	r3, r9
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	bfb8      	it	lt
 800eb6c:	2301      	movlt	r3, #1
 800eb6e:	e7ba      	b.n	800eae6 <_dtoa_r+0x246>
 800eb70:	2300      	movs	r3, #0
 800eb72:	e7b2      	b.n	800eada <_dtoa_r+0x23a>
 800eb74:	2300      	movs	r3, #0
 800eb76:	e7f0      	b.n	800eb5a <_dtoa_r+0x2ba>
 800eb78:	2501      	movs	r5, #1
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	9306      	str	r3, [sp, #24]
 800eb7e:	950a      	str	r5, [sp, #40]	; 0x28
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb84:	9302      	str	r3, [sp, #8]
 800eb86:	4699      	mov	r9, r3
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2312      	movs	r3, #18
 800eb8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb8e:	e7aa      	b.n	800eae6 <_dtoa_r+0x246>
 800eb90:	2301      	movs	r3, #1
 800eb92:	930a      	str	r3, [sp, #40]	; 0x28
 800eb94:	e7f4      	b.n	800eb80 <_dtoa_r+0x2e0>
 800eb96:	2301      	movs	r3, #1
 800eb98:	9302      	str	r3, [sp, #8]
 800eb9a:	4699      	mov	r9, r3
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	e7f5      	b.n	800eb8c <_dtoa_r+0x2ec>
 800eba0:	3101      	adds	r1, #1
 800eba2:	6071      	str	r1, [r6, #4]
 800eba4:	0052      	lsls	r2, r2, #1
 800eba6:	e7a2      	b.n	800eaee <_dtoa_r+0x24e>
 800eba8:	636f4361 	.word	0x636f4361
 800ebac:	3fd287a7 	.word	0x3fd287a7
 800ebb0:	8b60c8b3 	.word	0x8b60c8b3
 800ebb4:	3fc68a28 	.word	0x3fc68a28
 800ebb8:	509f79fb 	.word	0x509f79fb
 800ebbc:	3fd34413 	.word	0x3fd34413
 800ebc0:	7ff00000 	.word	0x7ff00000
 800ebc4:	08012e85 	.word	0x08012e85
 800ebc8:	3ff80000 	.word	0x3ff80000
 800ebcc:	08012c90 	.word	0x08012c90
 800ebd0:	08012c68 	.word	0x08012c68
 800ebd4:	08012c03 	.word	0x08012c03
 800ebd8:	07f1      	lsls	r1, r6, #31
 800ebda:	d508      	bpl.n	800ebee <_dtoa_r+0x34e>
 800ebdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebe4:	f7f1 fd30 	bl	8000648 <__aeabi_dmul>
 800ebe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebec:	3501      	adds	r5, #1
 800ebee:	1076      	asrs	r6, r6, #1
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	d1f0      	bne.n	800ebd8 <_dtoa_r+0x338>
 800ebf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebfe:	f7f1 fe4d 	bl	800089c <__aeabi_ddiv>
 800ec02:	e9cd 0100 	strd	r0, r1, [sp]
 800ec06:	e01a      	b.n	800ec3e <_dtoa_r+0x39e>
 800ec08:	2502      	movs	r5, #2
 800ec0a:	e7a3      	b.n	800eb54 <_dtoa_r+0x2b4>
 800ec0c:	f000 80a0 	beq.w	800ed50 <_dtoa_r+0x4b0>
 800ec10:	f1ca 0600 	rsb	r6, sl, #0
 800ec14:	4b9f      	ldr	r3, [pc, #636]	; (800ee94 <_dtoa_r+0x5f4>)
 800ec16:	4fa0      	ldr	r7, [pc, #640]	; (800ee98 <_dtoa_r+0x5f8>)
 800ec18:	f006 020f 	and.w	r2, r6, #15
 800ec1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ec28:	f7f1 fd0e 	bl	8000648 <__aeabi_dmul>
 800ec2c:	e9cd 0100 	strd	r0, r1, [sp]
 800ec30:	1136      	asrs	r6, r6, #4
 800ec32:	2300      	movs	r3, #0
 800ec34:	2502      	movs	r5, #2
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	d17f      	bne.n	800ed3a <_dtoa_r+0x49a>
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1e1      	bne.n	800ec02 <_dtoa_r+0x362>
 800ec3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 8087 	beq.w	800ed54 <_dtoa_r+0x4b4>
 800ec46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	4b93      	ldr	r3, [pc, #588]	; (800ee9c <_dtoa_r+0x5fc>)
 800ec4e:	4630      	mov	r0, r6
 800ec50:	4639      	mov	r1, r7
 800ec52:	f7f1 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d07c      	beq.n	800ed54 <_dtoa_r+0x4b4>
 800ec5a:	f1b9 0f00 	cmp.w	r9, #0
 800ec5e:	d079      	beq.n	800ed54 <_dtoa_r+0x4b4>
 800ec60:	9b02      	ldr	r3, [sp, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd35      	ble.n	800ecd2 <_dtoa_r+0x432>
 800ec66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ec6a:	9308      	str	r3, [sp, #32]
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	2200      	movs	r2, #0
 800ec70:	4b8b      	ldr	r3, [pc, #556]	; (800eea0 <_dtoa_r+0x600>)
 800ec72:	4630      	mov	r0, r6
 800ec74:	f7f1 fce8 	bl	8000648 <__aeabi_dmul>
 800ec78:	e9cd 0100 	strd	r0, r1, [sp]
 800ec7c:	9f02      	ldr	r7, [sp, #8]
 800ec7e:	3501      	adds	r5, #1
 800ec80:	4628      	mov	r0, r5
 800ec82:	f7f1 fc77 	bl	8000574 <__aeabi_i2d>
 800ec86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec8a:	f7f1 fcdd 	bl	8000648 <__aeabi_dmul>
 800ec8e:	2200      	movs	r2, #0
 800ec90:	4b84      	ldr	r3, [pc, #528]	; (800eea4 <_dtoa_r+0x604>)
 800ec92:	f7f1 fb23 	bl	80002dc <__adddf3>
 800ec96:	4605      	mov	r5, r0
 800ec98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ec9c:	2f00      	cmp	r7, #0
 800ec9e:	d15d      	bne.n	800ed5c <_dtoa_r+0x4bc>
 800eca0:	2200      	movs	r2, #0
 800eca2:	4b81      	ldr	r3, [pc, #516]	; (800eea8 <_dtoa_r+0x608>)
 800eca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca8:	f7f1 fb16 	bl	80002d8 <__aeabi_dsub>
 800ecac:	462a      	mov	r2, r5
 800ecae:	4633      	mov	r3, r6
 800ecb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ecb4:	f7f1 ff58 	bl	8000b68 <__aeabi_dcmpgt>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	f040 8288 	bne.w	800f1ce <_dtoa_r+0x92e>
 800ecbe:	462a      	mov	r2, r5
 800ecc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ecc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecc8:	f7f1 ff30 	bl	8000b2c <__aeabi_dcmplt>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f040 827c 	bne.w	800f1ca <_dtoa_r+0x92a>
 800ecd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ecd6:	e9cd 2300 	strd	r2, r3, [sp]
 800ecda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f2c0 8150 	blt.w	800ef82 <_dtoa_r+0x6e2>
 800ece2:	f1ba 0f0e 	cmp.w	sl, #14
 800ece6:	f300 814c 	bgt.w	800ef82 <_dtoa_r+0x6e2>
 800ecea:	4b6a      	ldr	r3, [pc, #424]	; (800ee94 <_dtoa_r+0x5f4>)
 800ecec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecf0:	ed93 7b00 	vldr	d7, [r3]
 800ecf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecfc:	f280 80d8 	bge.w	800eeb0 <_dtoa_r+0x610>
 800ed00:	f1b9 0f00 	cmp.w	r9, #0
 800ed04:	f300 80d4 	bgt.w	800eeb0 <_dtoa_r+0x610>
 800ed08:	f040 825e 	bne.w	800f1c8 <_dtoa_r+0x928>
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	4b66      	ldr	r3, [pc, #408]	; (800eea8 <_dtoa_r+0x608>)
 800ed10:	ec51 0b17 	vmov	r0, r1, d7
 800ed14:	f7f1 fc98 	bl	8000648 <__aeabi_dmul>
 800ed18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed1c:	f7f1 ff1a 	bl	8000b54 <__aeabi_dcmpge>
 800ed20:	464f      	mov	r7, r9
 800ed22:	464e      	mov	r6, r9
 800ed24:	2800      	cmp	r0, #0
 800ed26:	f040 8234 	bne.w	800f192 <_dtoa_r+0x8f2>
 800ed2a:	2331      	movs	r3, #49	; 0x31
 800ed2c:	f10b 0501 	add.w	r5, fp, #1
 800ed30:	f88b 3000 	strb.w	r3, [fp]
 800ed34:	f10a 0a01 	add.w	sl, sl, #1
 800ed38:	e22f      	b.n	800f19a <_dtoa_r+0x8fa>
 800ed3a:	07f2      	lsls	r2, r6, #31
 800ed3c:	d505      	bpl.n	800ed4a <_dtoa_r+0x4aa>
 800ed3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed42:	f7f1 fc81 	bl	8000648 <__aeabi_dmul>
 800ed46:	3501      	adds	r5, #1
 800ed48:	2301      	movs	r3, #1
 800ed4a:	1076      	asrs	r6, r6, #1
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	e772      	b.n	800ec36 <_dtoa_r+0x396>
 800ed50:	2502      	movs	r5, #2
 800ed52:	e774      	b.n	800ec3e <_dtoa_r+0x39e>
 800ed54:	f8cd a020 	str.w	sl, [sp, #32]
 800ed58:	464f      	mov	r7, r9
 800ed5a:	e791      	b.n	800ec80 <_dtoa_r+0x3e0>
 800ed5c:	4b4d      	ldr	r3, [pc, #308]	; (800ee94 <_dtoa_r+0x5f4>)
 800ed5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ed66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d047      	beq.n	800edfc <_dtoa_r+0x55c>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	2000      	movs	r0, #0
 800ed72:	494e      	ldr	r1, [pc, #312]	; (800eeac <_dtoa_r+0x60c>)
 800ed74:	f7f1 fd92 	bl	800089c <__aeabi_ddiv>
 800ed78:	462a      	mov	r2, r5
 800ed7a:	4633      	mov	r3, r6
 800ed7c:	f7f1 faac 	bl	80002d8 <__aeabi_dsub>
 800ed80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed84:	465d      	mov	r5, fp
 800ed86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed8a:	f7f1 ff0d 	bl	8000ba8 <__aeabi_d2iz>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	f7f1 fbf0 	bl	8000574 <__aeabi_i2d>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed9c:	f7f1 fa9c 	bl	80002d8 <__aeabi_dsub>
 800eda0:	3630      	adds	r6, #48	; 0x30
 800eda2:	f805 6b01 	strb.w	r6, [r5], #1
 800eda6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800edaa:	e9cd 0100 	strd	r0, r1, [sp]
 800edae:	f7f1 febd 	bl	8000b2c <__aeabi_dcmplt>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d163      	bne.n	800ee7e <_dtoa_r+0x5de>
 800edb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edba:	2000      	movs	r0, #0
 800edbc:	4937      	ldr	r1, [pc, #220]	; (800ee9c <_dtoa_r+0x5fc>)
 800edbe:	f7f1 fa8b 	bl	80002d8 <__aeabi_dsub>
 800edc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800edc6:	f7f1 feb1 	bl	8000b2c <__aeabi_dcmplt>
 800edca:	2800      	cmp	r0, #0
 800edcc:	f040 80b7 	bne.w	800ef3e <_dtoa_r+0x69e>
 800edd0:	eba5 030b 	sub.w	r3, r5, fp
 800edd4:	429f      	cmp	r7, r3
 800edd6:	f77f af7c 	ble.w	800ecd2 <_dtoa_r+0x432>
 800edda:	2200      	movs	r2, #0
 800eddc:	4b30      	ldr	r3, [pc, #192]	; (800eea0 <_dtoa_r+0x600>)
 800edde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ede2:	f7f1 fc31 	bl	8000648 <__aeabi_dmul>
 800ede6:	2200      	movs	r2, #0
 800ede8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800edec:	4b2c      	ldr	r3, [pc, #176]	; (800eea0 <_dtoa_r+0x600>)
 800edee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edf2:	f7f1 fc29 	bl	8000648 <__aeabi_dmul>
 800edf6:	e9cd 0100 	strd	r0, r1, [sp]
 800edfa:	e7c4      	b.n	800ed86 <_dtoa_r+0x4e6>
 800edfc:	462a      	mov	r2, r5
 800edfe:	4633      	mov	r3, r6
 800ee00:	f7f1 fc22 	bl	8000648 <__aeabi_dmul>
 800ee04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ee08:	eb0b 0507 	add.w	r5, fp, r7
 800ee0c:	465e      	mov	r6, fp
 800ee0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee12:	f7f1 fec9 	bl	8000ba8 <__aeabi_d2iz>
 800ee16:	4607      	mov	r7, r0
 800ee18:	f7f1 fbac 	bl	8000574 <__aeabi_i2d>
 800ee1c:	3730      	adds	r7, #48	; 0x30
 800ee1e:	4602      	mov	r2, r0
 800ee20:	460b      	mov	r3, r1
 800ee22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee26:	f7f1 fa57 	bl	80002d8 <__aeabi_dsub>
 800ee2a:	f806 7b01 	strb.w	r7, [r6], #1
 800ee2e:	42ae      	cmp	r6, r5
 800ee30:	e9cd 0100 	strd	r0, r1, [sp]
 800ee34:	f04f 0200 	mov.w	r2, #0
 800ee38:	d126      	bne.n	800ee88 <_dtoa_r+0x5e8>
 800ee3a:	4b1c      	ldr	r3, [pc, #112]	; (800eeac <_dtoa_r+0x60c>)
 800ee3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee40:	f7f1 fa4c 	bl	80002dc <__adddf3>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee4c:	f7f1 fe8c 	bl	8000b68 <__aeabi_dcmpgt>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d174      	bne.n	800ef3e <_dtoa_r+0x69e>
 800ee54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ee58:	2000      	movs	r0, #0
 800ee5a:	4914      	ldr	r1, [pc, #80]	; (800eeac <_dtoa_r+0x60c>)
 800ee5c:	f7f1 fa3c 	bl	80002d8 <__aeabi_dsub>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee68:	f7f1 fe60 	bl	8000b2c <__aeabi_dcmplt>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	f43f af30 	beq.w	800ecd2 <_dtoa_r+0x432>
 800ee72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee76:	2b30      	cmp	r3, #48	; 0x30
 800ee78:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ee7c:	d002      	beq.n	800ee84 <_dtoa_r+0x5e4>
 800ee7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ee82:	e04a      	b.n	800ef1a <_dtoa_r+0x67a>
 800ee84:	4615      	mov	r5, r2
 800ee86:	e7f4      	b.n	800ee72 <_dtoa_r+0x5d2>
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <_dtoa_r+0x600>)
 800ee8a:	f7f1 fbdd 	bl	8000648 <__aeabi_dmul>
 800ee8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ee92:	e7bc      	b.n	800ee0e <_dtoa_r+0x56e>
 800ee94:	08012c90 	.word	0x08012c90
 800ee98:	08012c68 	.word	0x08012c68
 800ee9c:	3ff00000 	.word	0x3ff00000
 800eea0:	40240000 	.word	0x40240000
 800eea4:	401c0000 	.word	0x401c0000
 800eea8:	40140000 	.word	0x40140000
 800eeac:	3fe00000 	.word	0x3fe00000
 800eeb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eeb4:	465d      	mov	r5, fp
 800eeb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eeba:	4630      	mov	r0, r6
 800eebc:	4639      	mov	r1, r7
 800eebe:	f7f1 fced 	bl	800089c <__aeabi_ddiv>
 800eec2:	f7f1 fe71 	bl	8000ba8 <__aeabi_d2iz>
 800eec6:	4680      	mov	r8, r0
 800eec8:	f7f1 fb54 	bl	8000574 <__aeabi_i2d>
 800eecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eed0:	f7f1 fbba 	bl	8000648 <__aeabi_dmul>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4630      	mov	r0, r6
 800eeda:	4639      	mov	r1, r7
 800eedc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800eee0:	f7f1 f9fa 	bl	80002d8 <__aeabi_dsub>
 800eee4:	f805 6b01 	strb.w	r6, [r5], #1
 800eee8:	eba5 060b 	sub.w	r6, r5, fp
 800eeec:	45b1      	cmp	r9, r6
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	d139      	bne.n	800ef68 <_dtoa_r+0x6c8>
 800eef4:	f7f1 f9f2 	bl	80002dc <__adddf3>
 800eef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1
 800ef00:	f7f1 fe32 	bl	8000b68 <__aeabi_dcmpgt>
 800ef04:	b9c8      	cbnz	r0, 800ef3a <_dtoa_r+0x69a>
 800ef06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	4639      	mov	r1, r7
 800ef0e:	f7f1 fe03 	bl	8000b18 <__aeabi_dcmpeq>
 800ef12:	b110      	cbz	r0, 800ef1a <_dtoa_r+0x67a>
 800ef14:	f018 0f01 	tst.w	r8, #1
 800ef18:	d10f      	bne.n	800ef3a <_dtoa_r+0x69a>
 800ef1a:	9904      	ldr	r1, [sp, #16]
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f000 fcaa 	bl	800f876 <_Bfree>
 800ef22:	2300      	movs	r3, #0
 800ef24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef26:	702b      	strb	r3, [r5, #0]
 800ef28:	f10a 0301 	add.w	r3, sl, #1
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f000 8241 	beq.w	800f3b8 <_dtoa_r+0xb18>
 800ef36:	601d      	str	r5, [r3, #0]
 800ef38:	e23e      	b.n	800f3b8 <_dtoa_r+0xb18>
 800ef3a:	f8cd a020 	str.w	sl, [sp, #32]
 800ef3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef42:	2a39      	cmp	r2, #57	; 0x39
 800ef44:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800ef48:	d108      	bne.n	800ef5c <_dtoa_r+0x6bc>
 800ef4a:	459b      	cmp	fp, r3
 800ef4c:	d10a      	bne.n	800ef64 <_dtoa_r+0x6c4>
 800ef4e:	9b08      	ldr	r3, [sp, #32]
 800ef50:	3301      	adds	r3, #1
 800ef52:	9308      	str	r3, [sp, #32]
 800ef54:	2330      	movs	r3, #48	; 0x30
 800ef56:	f88b 3000 	strb.w	r3, [fp]
 800ef5a:	465b      	mov	r3, fp
 800ef5c:	781a      	ldrb	r2, [r3, #0]
 800ef5e:	3201      	adds	r2, #1
 800ef60:	701a      	strb	r2, [r3, #0]
 800ef62:	e78c      	b.n	800ee7e <_dtoa_r+0x5de>
 800ef64:	461d      	mov	r5, r3
 800ef66:	e7ea      	b.n	800ef3e <_dtoa_r+0x69e>
 800ef68:	2200      	movs	r2, #0
 800ef6a:	4b9b      	ldr	r3, [pc, #620]	; (800f1d8 <_dtoa_r+0x938>)
 800ef6c:	f7f1 fb6c 	bl	8000648 <__aeabi_dmul>
 800ef70:	2200      	movs	r2, #0
 800ef72:	2300      	movs	r3, #0
 800ef74:	4606      	mov	r6, r0
 800ef76:	460f      	mov	r7, r1
 800ef78:	f7f1 fdce 	bl	8000b18 <__aeabi_dcmpeq>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d09a      	beq.n	800eeb6 <_dtoa_r+0x616>
 800ef80:	e7cb      	b.n	800ef1a <_dtoa_r+0x67a>
 800ef82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	f000 808b 	beq.w	800f0a0 <_dtoa_r+0x800>
 800ef8a:	9a06      	ldr	r2, [sp, #24]
 800ef8c:	2a01      	cmp	r2, #1
 800ef8e:	dc6e      	bgt.n	800f06e <_dtoa_r+0x7ce>
 800ef90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	d067      	beq.n	800f066 <_dtoa_r+0x7c6>
 800ef96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef9a:	9f07      	ldr	r7, [sp, #28]
 800ef9c:	9d05      	ldr	r5, [sp, #20]
 800ef9e:	9a05      	ldr	r2, [sp, #20]
 800efa0:	2101      	movs	r1, #1
 800efa2:	441a      	add	r2, r3
 800efa4:	4620      	mov	r0, r4
 800efa6:	9205      	str	r2, [sp, #20]
 800efa8:	4498      	add	r8, r3
 800efaa:	f000 fd04 	bl	800f9b6 <__i2b>
 800efae:	4606      	mov	r6, r0
 800efb0:	2d00      	cmp	r5, #0
 800efb2:	dd0c      	ble.n	800efce <_dtoa_r+0x72e>
 800efb4:	f1b8 0f00 	cmp.w	r8, #0
 800efb8:	dd09      	ble.n	800efce <_dtoa_r+0x72e>
 800efba:	4545      	cmp	r5, r8
 800efbc:	9a05      	ldr	r2, [sp, #20]
 800efbe:	462b      	mov	r3, r5
 800efc0:	bfa8      	it	ge
 800efc2:	4643      	movge	r3, r8
 800efc4:	1ad2      	subs	r2, r2, r3
 800efc6:	9205      	str	r2, [sp, #20]
 800efc8:	1aed      	subs	r5, r5, r3
 800efca:	eba8 0803 	sub.w	r8, r8, r3
 800efce:	9b07      	ldr	r3, [sp, #28]
 800efd0:	b1eb      	cbz	r3, 800f00e <_dtoa_r+0x76e>
 800efd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d067      	beq.n	800f0a8 <_dtoa_r+0x808>
 800efd8:	b18f      	cbz	r7, 800effe <_dtoa_r+0x75e>
 800efda:	4631      	mov	r1, r6
 800efdc:	463a      	mov	r2, r7
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 fd88 	bl	800faf4 <__pow5mult>
 800efe4:	9a04      	ldr	r2, [sp, #16]
 800efe6:	4601      	mov	r1, r0
 800efe8:	4606      	mov	r6, r0
 800efea:	4620      	mov	r0, r4
 800efec:	f000 fcec 	bl	800f9c8 <__multiply>
 800eff0:	9904      	ldr	r1, [sp, #16]
 800eff2:	9008      	str	r0, [sp, #32]
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 fc3e 	bl	800f876 <_Bfree>
 800effa:	9b08      	ldr	r3, [sp, #32]
 800effc:	9304      	str	r3, [sp, #16]
 800effe:	9b07      	ldr	r3, [sp, #28]
 800f000:	1bda      	subs	r2, r3, r7
 800f002:	d004      	beq.n	800f00e <_dtoa_r+0x76e>
 800f004:	9904      	ldr	r1, [sp, #16]
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fd74 	bl	800faf4 <__pow5mult>
 800f00c:	9004      	str	r0, [sp, #16]
 800f00e:	2101      	movs	r1, #1
 800f010:	4620      	mov	r0, r4
 800f012:	f000 fcd0 	bl	800f9b6 <__i2b>
 800f016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f018:	4607      	mov	r7, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 81d0 	beq.w	800f3c0 <_dtoa_r+0xb20>
 800f020:	461a      	mov	r2, r3
 800f022:	4601      	mov	r1, r0
 800f024:	4620      	mov	r0, r4
 800f026:	f000 fd65 	bl	800faf4 <__pow5mult>
 800f02a:	9b06      	ldr	r3, [sp, #24]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	4607      	mov	r7, r0
 800f030:	dc40      	bgt.n	800f0b4 <_dtoa_r+0x814>
 800f032:	9b00      	ldr	r3, [sp, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d139      	bne.n	800f0ac <_dtoa_r+0x80c>
 800f038:	9b01      	ldr	r3, [sp, #4]
 800f03a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d136      	bne.n	800f0b0 <_dtoa_r+0x810>
 800f042:	9b01      	ldr	r3, [sp, #4]
 800f044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f048:	0d1b      	lsrs	r3, r3, #20
 800f04a:	051b      	lsls	r3, r3, #20
 800f04c:	b12b      	cbz	r3, 800f05a <_dtoa_r+0x7ba>
 800f04e:	9b05      	ldr	r3, [sp, #20]
 800f050:	3301      	adds	r3, #1
 800f052:	9305      	str	r3, [sp, #20]
 800f054:	f108 0801 	add.w	r8, r8, #1
 800f058:	2301      	movs	r3, #1
 800f05a:	9307      	str	r3, [sp, #28]
 800f05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d12a      	bne.n	800f0b8 <_dtoa_r+0x818>
 800f062:	2001      	movs	r0, #1
 800f064:	e030      	b.n	800f0c8 <_dtoa_r+0x828>
 800f066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f068:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f06c:	e795      	b.n	800ef9a <_dtoa_r+0x6fa>
 800f06e:	9b07      	ldr	r3, [sp, #28]
 800f070:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f074:	42bb      	cmp	r3, r7
 800f076:	bfbf      	itttt	lt
 800f078:	9b07      	ldrlt	r3, [sp, #28]
 800f07a:	9707      	strlt	r7, [sp, #28]
 800f07c:	1afa      	sublt	r2, r7, r3
 800f07e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f080:	bfbb      	ittet	lt
 800f082:	189b      	addlt	r3, r3, r2
 800f084:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f086:	1bdf      	subge	r7, r3, r7
 800f088:	2700      	movlt	r7, #0
 800f08a:	f1b9 0f00 	cmp.w	r9, #0
 800f08e:	bfb5      	itete	lt
 800f090:	9b05      	ldrlt	r3, [sp, #20]
 800f092:	9d05      	ldrge	r5, [sp, #20]
 800f094:	eba3 0509 	sublt.w	r5, r3, r9
 800f098:	464b      	movge	r3, r9
 800f09a:	bfb8      	it	lt
 800f09c:	2300      	movlt	r3, #0
 800f09e:	e77e      	b.n	800ef9e <_dtoa_r+0x6fe>
 800f0a0:	9f07      	ldr	r7, [sp, #28]
 800f0a2:	9d05      	ldr	r5, [sp, #20]
 800f0a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f0a6:	e783      	b.n	800efb0 <_dtoa_r+0x710>
 800f0a8:	9a07      	ldr	r2, [sp, #28]
 800f0aa:	e7ab      	b.n	800f004 <_dtoa_r+0x764>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e7d4      	b.n	800f05a <_dtoa_r+0x7ba>
 800f0b0:	9b00      	ldr	r3, [sp, #0]
 800f0b2:	e7d2      	b.n	800f05a <_dtoa_r+0x7ba>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9307      	str	r3, [sp, #28]
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f0be:	6918      	ldr	r0, [r3, #16]
 800f0c0:	f000 fc2b 	bl	800f91a <__hi0bits>
 800f0c4:	f1c0 0020 	rsb	r0, r0, #32
 800f0c8:	4440      	add	r0, r8
 800f0ca:	f010 001f 	ands.w	r0, r0, #31
 800f0ce:	d047      	beq.n	800f160 <_dtoa_r+0x8c0>
 800f0d0:	f1c0 0320 	rsb	r3, r0, #32
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	dd3b      	ble.n	800f150 <_dtoa_r+0x8b0>
 800f0d8:	9b05      	ldr	r3, [sp, #20]
 800f0da:	f1c0 001c 	rsb	r0, r0, #28
 800f0de:	4403      	add	r3, r0
 800f0e0:	9305      	str	r3, [sp, #20]
 800f0e2:	4405      	add	r5, r0
 800f0e4:	4480      	add	r8, r0
 800f0e6:	9b05      	ldr	r3, [sp, #20]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	dd05      	ble.n	800f0f8 <_dtoa_r+0x858>
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	9904      	ldr	r1, [sp, #16]
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fd4d 	bl	800fb90 <__lshift>
 800f0f6:	9004      	str	r0, [sp, #16]
 800f0f8:	f1b8 0f00 	cmp.w	r8, #0
 800f0fc:	dd05      	ble.n	800f10a <_dtoa_r+0x86a>
 800f0fe:	4639      	mov	r1, r7
 800f100:	4642      	mov	r2, r8
 800f102:	4620      	mov	r0, r4
 800f104:	f000 fd44 	bl	800fb90 <__lshift>
 800f108:	4607      	mov	r7, r0
 800f10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f10c:	b353      	cbz	r3, 800f164 <_dtoa_r+0x8c4>
 800f10e:	4639      	mov	r1, r7
 800f110:	9804      	ldr	r0, [sp, #16]
 800f112:	f000 fd91 	bl	800fc38 <__mcmp>
 800f116:	2800      	cmp	r0, #0
 800f118:	da24      	bge.n	800f164 <_dtoa_r+0x8c4>
 800f11a:	2300      	movs	r3, #0
 800f11c:	220a      	movs	r2, #10
 800f11e:	9904      	ldr	r1, [sp, #16]
 800f120:	4620      	mov	r0, r4
 800f122:	f000 fbbf 	bl	800f8a4 <__multadd>
 800f126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f128:	9004      	str	r0, [sp, #16]
 800f12a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 814d 	beq.w	800f3ce <_dtoa_r+0xb2e>
 800f134:	2300      	movs	r3, #0
 800f136:	4631      	mov	r1, r6
 800f138:	220a      	movs	r2, #10
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 fbb2 	bl	800f8a4 <__multadd>
 800f140:	9b02      	ldr	r3, [sp, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	4606      	mov	r6, r0
 800f146:	dc4f      	bgt.n	800f1e8 <_dtoa_r+0x948>
 800f148:	9b06      	ldr	r3, [sp, #24]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	dd4c      	ble.n	800f1e8 <_dtoa_r+0x948>
 800f14e:	e011      	b.n	800f174 <_dtoa_r+0x8d4>
 800f150:	d0c9      	beq.n	800f0e6 <_dtoa_r+0x846>
 800f152:	9a05      	ldr	r2, [sp, #20]
 800f154:	331c      	adds	r3, #28
 800f156:	441a      	add	r2, r3
 800f158:	9205      	str	r2, [sp, #20]
 800f15a:	441d      	add	r5, r3
 800f15c:	4498      	add	r8, r3
 800f15e:	e7c2      	b.n	800f0e6 <_dtoa_r+0x846>
 800f160:	4603      	mov	r3, r0
 800f162:	e7f6      	b.n	800f152 <_dtoa_r+0x8b2>
 800f164:	f1b9 0f00 	cmp.w	r9, #0
 800f168:	dc38      	bgt.n	800f1dc <_dtoa_r+0x93c>
 800f16a:	9b06      	ldr	r3, [sp, #24]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	dd35      	ble.n	800f1dc <_dtoa_r+0x93c>
 800f170:	f8cd 9008 	str.w	r9, [sp, #8]
 800f174:	9b02      	ldr	r3, [sp, #8]
 800f176:	b963      	cbnz	r3, 800f192 <_dtoa_r+0x8f2>
 800f178:	4639      	mov	r1, r7
 800f17a:	2205      	movs	r2, #5
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fb91 	bl	800f8a4 <__multadd>
 800f182:	4601      	mov	r1, r0
 800f184:	4607      	mov	r7, r0
 800f186:	9804      	ldr	r0, [sp, #16]
 800f188:	f000 fd56 	bl	800fc38 <__mcmp>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	f73f adcc 	bgt.w	800ed2a <_dtoa_r+0x48a>
 800f192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f194:	465d      	mov	r5, fp
 800f196:	ea6f 0a03 	mvn.w	sl, r3
 800f19a:	f04f 0900 	mov.w	r9, #0
 800f19e:	4639      	mov	r1, r7
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f000 fb68 	bl	800f876 <_Bfree>
 800f1a6:	2e00      	cmp	r6, #0
 800f1a8:	f43f aeb7 	beq.w	800ef1a <_dtoa_r+0x67a>
 800f1ac:	f1b9 0f00 	cmp.w	r9, #0
 800f1b0:	d005      	beq.n	800f1be <_dtoa_r+0x91e>
 800f1b2:	45b1      	cmp	r9, r6
 800f1b4:	d003      	beq.n	800f1be <_dtoa_r+0x91e>
 800f1b6:	4649      	mov	r1, r9
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 fb5c 	bl	800f876 <_Bfree>
 800f1be:	4631      	mov	r1, r6
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fb58 	bl	800f876 <_Bfree>
 800f1c6:	e6a8      	b.n	800ef1a <_dtoa_r+0x67a>
 800f1c8:	2700      	movs	r7, #0
 800f1ca:	463e      	mov	r6, r7
 800f1cc:	e7e1      	b.n	800f192 <_dtoa_r+0x8f2>
 800f1ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f1d2:	463e      	mov	r6, r7
 800f1d4:	e5a9      	b.n	800ed2a <_dtoa_r+0x48a>
 800f1d6:	bf00      	nop
 800f1d8:	40240000 	.word	0x40240000
 800f1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1de:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f000 80fa 	beq.w	800f3dc <_dtoa_r+0xb3c>
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	dd05      	ble.n	800f1f8 <_dtoa_r+0x958>
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	462a      	mov	r2, r5
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fccd 	bl	800fb90 <__lshift>
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	9b07      	ldr	r3, [sp, #28]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d04c      	beq.n	800f298 <_dtoa_r+0x9f8>
 800f1fe:	6871      	ldr	r1, [r6, #4]
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fb04 	bl	800f80e <_Balloc>
 800f206:	6932      	ldr	r2, [r6, #16]
 800f208:	3202      	adds	r2, #2
 800f20a:	4605      	mov	r5, r0
 800f20c:	0092      	lsls	r2, r2, #2
 800f20e:	f106 010c 	add.w	r1, r6, #12
 800f212:	300c      	adds	r0, #12
 800f214:	f000 faf0 	bl	800f7f8 <memcpy>
 800f218:	2201      	movs	r2, #1
 800f21a:	4629      	mov	r1, r5
 800f21c:	4620      	mov	r0, r4
 800f21e:	f000 fcb7 	bl	800fb90 <__lshift>
 800f222:	9b00      	ldr	r3, [sp, #0]
 800f224:	f8cd b014 	str.w	fp, [sp, #20]
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	46b1      	mov	r9, r6
 800f22e:	9307      	str	r3, [sp, #28]
 800f230:	4606      	mov	r6, r0
 800f232:	4639      	mov	r1, r7
 800f234:	9804      	ldr	r0, [sp, #16]
 800f236:	f7ff faa5 	bl	800e784 <quorem>
 800f23a:	4649      	mov	r1, r9
 800f23c:	4605      	mov	r5, r0
 800f23e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f242:	9804      	ldr	r0, [sp, #16]
 800f244:	f000 fcf8 	bl	800fc38 <__mcmp>
 800f248:	4632      	mov	r2, r6
 800f24a:	9000      	str	r0, [sp, #0]
 800f24c:	4639      	mov	r1, r7
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fd0c 	bl	800fc6c <__mdiff>
 800f254:	68c3      	ldr	r3, [r0, #12]
 800f256:	4602      	mov	r2, r0
 800f258:	bb03      	cbnz	r3, 800f29c <_dtoa_r+0x9fc>
 800f25a:	4601      	mov	r1, r0
 800f25c:	9008      	str	r0, [sp, #32]
 800f25e:	9804      	ldr	r0, [sp, #16]
 800f260:	f000 fcea 	bl	800fc38 <__mcmp>
 800f264:	9a08      	ldr	r2, [sp, #32]
 800f266:	4603      	mov	r3, r0
 800f268:	4611      	mov	r1, r2
 800f26a:	4620      	mov	r0, r4
 800f26c:	9308      	str	r3, [sp, #32]
 800f26e:	f000 fb02 	bl	800f876 <_Bfree>
 800f272:	9b08      	ldr	r3, [sp, #32]
 800f274:	b9a3      	cbnz	r3, 800f2a0 <_dtoa_r+0xa00>
 800f276:	9a06      	ldr	r2, [sp, #24]
 800f278:	b992      	cbnz	r2, 800f2a0 <_dtoa_r+0xa00>
 800f27a:	9a07      	ldr	r2, [sp, #28]
 800f27c:	b982      	cbnz	r2, 800f2a0 <_dtoa_r+0xa00>
 800f27e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f282:	d029      	beq.n	800f2d8 <_dtoa_r+0xa38>
 800f284:	9b00      	ldr	r3, [sp, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	dd01      	ble.n	800f28e <_dtoa_r+0x9ee>
 800f28a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f28e:	9b05      	ldr	r3, [sp, #20]
 800f290:	1c5d      	adds	r5, r3, #1
 800f292:	f883 8000 	strb.w	r8, [r3]
 800f296:	e782      	b.n	800f19e <_dtoa_r+0x8fe>
 800f298:	4630      	mov	r0, r6
 800f29a:	e7c2      	b.n	800f222 <_dtoa_r+0x982>
 800f29c:	2301      	movs	r3, #1
 800f29e:	e7e3      	b.n	800f268 <_dtoa_r+0x9c8>
 800f2a0:	9a00      	ldr	r2, [sp, #0]
 800f2a2:	2a00      	cmp	r2, #0
 800f2a4:	db04      	blt.n	800f2b0 <_dtoa_r+0xa10>
 800f2a6:	d125      	bne.n	800f2f4 <_dtoa_r+0xa54>
 800f2a8:	9a06      	ldr	r2, [sp, #24]
 800f2aa:	bb1a      	cbnz	r2, 800f2f4 <_dtoa_r+0xa54>
 800f2ac:	9a07      	ldr	r2, [sp, #28]
 800f2ae:	bb0a      	cbnz	r2, 800f2f4 <_dtoa_r+0xa54>
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	ddec      	ble.n	800f28e <_dtoa_r+0x9ee>
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	9904      	ldr	r1, [sp, #16]
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fc69 	bl	800fb90 <__lshift>
 800f2be:	4639      	mov	r1, r7
 800f2c0:	9004      	str	r0, [sp, #16]
 800f2c2:	f000 fcb9 	bl	800fc38 <__mcmp>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	dc03      	bgt.n	800f2d2 <_dtoa_r+0xa32>
 800f2ca:	d1e0      	bne.n	800f28e <_dtoa_r+0x9ee>
 800f2cc:	f018 0f01 	tst.w	r8, #1
 800f2d0:	d0dd      	beq.n	800f28e <_dtoa_r+0x9ee>
 800f2d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f2d6:	d1d8      	bne.n	800f28a <_dtoa_r+0x9ea>
 800f2d8:	9b05      	ldr	r3, [sp, #20]
 800f2da:	9a05      	ldr	r2, [sp, #20]
 800f2dc:	1c5d      	adds	r5, r3, #1
 800f2de:	2339      	movs	r3, #57	; 0x39
 800f2e0:	7013      	strb	r3, [r2, #0]
 800f2e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2e6:	2b39      	cmp	r3, #57	; 0x39
 800f2e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f2ec:	d04f      	beq.n	800f38e <_dtoa_r+0xaee>
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	7013      	strb	r3, [r2, #0]
 800f2f2:	e754      	b.n	800f19e <_dtoa_r+0x8fe>
 800f2f4:	9a05      	ldr	r2, [sp, #20]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f102 0501 	add.w	r5, r2, #1
 800f2fc:	dd06      	ble.n	800f30c <_dtoa_r+0xa6c>
 800f2fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f302:	d0e9      	beq.n	800f2d8 <_dtoa_r+0xa38>
 800f304:	f108 0801 	add.w	r8, r8, #1
 800f308:	9b05      	ldr	r3, [sp, #20]
 800f30a:	e7c2      	b.n	800f292 <_dtoa_r+0x9f2>
 800f30c:	9a02      	ldr	r2, [sp, #8]
 800f30e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f312:	eba5 030b 	sub.w	r3, r5, fp
 800f316:	4293      	cmp	r3, r2
 800f318:	d021      	beq.n	800f35e <_dtoa_r+0xabe>
 800f31a:	2300      	movs	r3, #0
 800f31c:	220a      	movs	r2, #10
 800f31e:	9904      	ldr	r1, [sp, #16]
 800f320:	4620      	mov	r0, r4
 800f322:	f000 fabf 	bl	800f8a4 <__multadd>
 800f326:	45b1      	cmp	r9, r6
 800f328:	9004      	str	r0, [sp, #16]
 800f32a:	f04f 0300 	mov.w	r3, #0
 800f32e:	f04f 020a 	mov.w	r2, #10
 800f332:	4649      	mov	r1, r9
 800f334:	4620      	mov	r0, r4
 800f336:	d105      	bne.n	800f344 <_dtoa_r+0xaa4>
 800f338:	f000 fab4 	bl	800f8a4 <__multadd>
 800f33c:	4681      	mov	r9, r0
 800f33e:	4606      	mov	r6, r0
 800f340:	9505      	str	r5, [sp, #20]
 800f342:	e776      	b.n	800f232 <_dtoa_r+0x992>
 800f344:	f000 faae 	bl	800f8a4 <__multadd>
 800f348:	4631      	mov	r1, r6
 800f34a:	4681      	mov	r9, r0
 800f34c:	2300      	movs	r3, #0
 800f34e:	220a      	movs	r2, #10
 800f350:	4620      	mov	r0, r4
 800f352:	f000 faa7 	bl	800f8a4 <__multadd>
 800f356:	4606      	mov	r6, r0
 800f358:	e7f2      	b.n	800f340 <_dtoa_r+0xaa0>
 800f35a:	f04f 0900 	mov.w	r9, #0
 800f35e:	2201      	movs	r2, #1
 800f360:	9904      	ldr	r1, [sp, #16]
 800f362:	4620      	mov	r0, r4
 800f364:	f000 fc14 	bl	800fb90 <__lshift>
 800f368:	4639      	mov	r1, r7
 800f36a:	9004      	str	r0, [sp, #16]
 800f36c:	f000 fc64 	bl	800fc38 <__mcmp>
 800f370:	2800      	cmp	r0, #0
 800f372:	dcb6      	bgt.n	800f2e2 <_dtoa_r+0xa42>
 800f374:	d102      	bne.n	800f37c <_dtoa_r+0xadc>
 800f376:	f018 0f01 	tst.w	r8, #1
 800f37a:	d1b2      	bne.n	800f2e2 <_dtoa_r+0xa42>
 800f37c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f380:	2b30      	cmp	r3, #48	; 0x30
 800f382:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f386:	f47f af0a 	bne.w	800f19e <_dtoa_r+0x8fe>
 800f38a:	4615      	mov	r5, r2
 800f38c:	e7f6      	b.n	800f37c <_dtoa_r+0xadc>
 800f38e:	4593      	cmp	fp, r2
 800f390:	d105      	bne.n	800f39e <_dtoa_r+0xafe>
 800f392:	2331      	movs	r3, #49	; 0x31
 800f394:	f10a 0a01 	add.w	sl, sl, #1
 800f398:	f88b 3000 	strb.w	r3, [fp]
 800f39c:	e6ff      	b.n	800f19e <_dtoa_r+0x8fe>
 800f39e:	4615      	mov	r5, r2
 800f3a0:	e79f      	b.n	800f2e2 <_dtoa_r+0xa42>
 800f3a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f408 <_dtoa_r+0xb68>
 800f3a6:	e007      	b.n	800f3b8 <_dtoa_r+0xb18>
 800f3a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f40c <_dtoa_r+0xb6c>
 800f3ae:	b11b      	cbz	r3, 800f3b8 <_dtoa_r+0xb18>
 800f3b0:	f10b 0308 	add.w	r3, fp, #8
 800f3b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f3b6:	6013      	str	r3, [r2, #0]
 800f3b8:	4658      	mov	r0, fp
 800f3ba:	b017      	add	sp, #92	; 0x5c
 800f3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c0:	9b06      	ldr	r3, [sp, #24]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	f77f ae35 	ble.w	800f032 <_dtoa_r+0x792>
 800f3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ca:	9307      	str	r3, [sp, #28]
 800f3cc:	e649      	b.n	800f062 <_dtoa_r+0x7c2>
 800f3ce:	9b02      	ldr	r3, [sp, #8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	dc03      	bgt.n	800f3dc <_dtoa_r+0xb3c>
 800f3d4:	9b06      	ldr	r3, [sp, #24]
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	f73f aecc 	bgt.w	800f174 <_dtoa_r+0x8d4>
 800f3dc:	465d      	mov	r5, fp
 800f3de:	4639      	mov	r1, r7
 800f3e0:	9804      	ldr	r0, [sp, #16]
 800f3e2:	f7ff f9cf 	bl	800e784 <quorem>
 800f3e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f3ea:	f805 8b01 	strb.w	r8, [r5], #1
 800f3ee:	9a02      	ldr	r2, [sp, #8]
 800f3f0:	eba5 030b 	sub.w	r3, r5, fp
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	ddb0      	ble.n	800f35a <_dtoa_r+0xaba>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	220a      	movs	r2, #10
 800f3fc:	9904      	ldr	r1, [sp, #16]
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 fa50 	bl	800f8a4 <__multadd>
 800f404:	9004      	str	r0, [sp, #16]
 800f406:	e7ea      	b.n	800f3de <_dtoa_r+0xb3e>
 800f408:	08012e84 	.word	0x08012e84
 800f40c:	08012bfa 	.word	0x08012bfa

0800f410 <__sflush_r>:
 800f410:	898a      	ldrh	r2, [r1, #12]
 800f412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f416:	4605      	mov	r5, r0
 800f418:	0710      	lsls	r0, r2, #28
 800f41a:	460c      	mov	r4, r1
 800f41c:	d458      	bmi.n	800f4d0 <__sflush_r+0xc0>
 800f41e:	684b      	ldr	r3, [r1, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	dc05      	bgt.n	800f430 <__sflush_r+0x20>
 800f424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc02      	bgt.n	800f430 <__sflush_r+0x20>
 800f42a:	2000      	movs	r0, #0
 800f42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f432:	2e00      	cmp	r6, #0
 800f434:	d0f9      	beq.n	800f42a <__sflush_r+0x1a>
 800f436:	2300      	movs	r3, #0
 800f438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f43c:	682f      	ldr	r7, [r5, #0]
 800f43e:	6a21      	ldr	r1, [r4, #32]
 800f440:	602b      	str	r3, [r5, #0]
 800f442:	d032      	beq.n	800f4aa <__sflush_r+0x9a>
 800f444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	075a      	lsls	r2, r3, #29
 800f44a:	d505      	bpl.n	800f458 <__sflush_r+0x48>
 800f44c:	6863      	ldr	r3, [r4, #4]
 800f44e:	1ac0      	subs	r0, r0, r3
 800f450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f452:	b10b      	cbz	r3, 800f458 <__sflush_r+0x48>
 800f454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f456:	1ac0      	subs	r0, r0, r3
 800f458:	2300      	movs	r3, #0
 800f45a:	4602      	mov	r2, r0
 800f45c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f45e:	6a21      	ldr	r1, [r4, #32]
 800f460:	4628      	mov	r0, r5
 800f462:	47b0      	blx	r6
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	d106      	bne.n	800f478 <__sflush_r+0x68>
 800f46a:	6829      	ldr	r1, [r5, #0]
 800f46c:	291d      	cmp	r1, #29
 800f46e:	d848      	bhi.n	800f502 <__sflush_r+0xf2>
 800f470:	4a29      	ldr	r2, [pc, #164]	; (800f518 <__sflush_r+0x108>)
 800f472:	40ca      	lsrs	r2, r1
 800f474:	07d6      	lsls	r6, r2, #31
 800f476:	d544      	bpl.n	800f502 <__sflush_r+0xf2>
 800f478:	2200      	movs	r2, #0
 800f47a:	6062      	str	r2, [r4, #4]
 800f47c:	04d9      	lsls	r1, r3, #19
 800f47e:	6922      	ldr	r2, [r4, #16]
 800f480:	6022      	str	r2, [r4, #0]
 800f482:	d504      	bpl.n	800f48e <__sflush_r+0x7e>
 800f484:	1c42      	adds	r2, r0, #1
 800f486:	d101      	bne.n	800f48c <__sflush_r+0x7c>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b903      	cbnz	r3, 800f48e <__sflush_r+0x7e>
 800f48c:	6560      	str	r0, [r4, #84]	; 0x54
 800f48e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f490:	602f      	str	r7, [r5, #0]
 800f492:	2900      	cmp	r1, #0
 800f494:	d0c9      	beq.n	800f42a <__sflush_r+0x1a>
 800f496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f49a:	4299      	cmp	r1, r3
 800f49c:	d002      	beq.n	800f4a4 <__sflush_r+0x94>
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f000 fc9e 	bl	800fde0 <_free_r>
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	6360      	str	r0, [r4, #52]	; 0x34
 800f4a8:	e7c0      	b.n	800f42c <__sflush_r+0x1c>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	47b0      	blx	r6
 800f4b0:	1c41      	adds	r1, r0, #1
 800f4b2:	d1c8      	bne.n	800f446 <__sflush_r+0x36>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0c5      	beq.n	800f446 <__sflush_r+0x36>
 800f4ba:	2b1d      	cmp	r3, #29
 800f4bc:	d001      	beq.n	800f4c2 <__sflush_r+0xb2>
 800f4be:	2b16      	cmp	r3, #22
 800f4c0:	d101      	bne.n	800f4c6 <__sflush_r+0xb6>
 800f4c2:	602f      	str	r7, [r5, #0]
 800f4c4:	e7b1      	b.n	800f42a <__sflush_r+0x1a>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4cc:	81a3      	strh	r3, [r4, #12]
 800f4ce:	e7ad      	b.n	800f42c <__sflush_r+0x1c>
 800f4d0:	690f      	ldr	r7, [r1, #16]
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	d0a9      	beq.n	800f42a <__sflush_r+0x1a>
 800f4d6:	0793      	lsls	r3, r2, #30
 800f4d8:	680e      	ldr	r6, [r1, #0]
 800f4da:	bf08      	it	eq
 800f4dc:	694b      	ldreq	r3, [r1, #20]
 800f4de:	600f      	str	r7, [r1, #0]
 800f4e0:	bf18      	it	ne
 800f4e2:	2300      	movne	r3, #0
 800f4e4:	eba6 0807 	sub.w	r8, r6, r7
 800f4e8:	608b      	str	r3, [r1, #8]
 800f4ea:	f1b8 0f00 	cmp.w	r8, #0
 800f4ee:	dd9c      	ble.n	800f42a <__sflush_r+0x1a>
 800f4f0:	4643      	mov	r3, r8
 800f4f2:	463a      	mov	r2, r7
 800f4f4:	6a21      	ldr	r1, [r4, #32]
 800f4f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dc06      	bgt.n	800f50e <__sflush_r+0xfe>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f50c:	e78e      	b.n	800f42c <__sflush_r+0x1c>
 800f50e:	4407      	add	r7, r0
 800f510:	eba8 0800 	sub.w	r8, r8, r0
 800f514:	e7e9      	b.n	800f4ea <__sflush_r+0xda>
 800f516:	bf00      	nop
 800f518:	20400001 	.word	0x20400001

0800f51c <_fflush_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	690b      	ldr	r3, [r1, #16]
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b1db      	cbz	r3, 800f55e <_fflush_r+0x42>
 800f526:	b118      	cbz	r0, 800f530 <_fflush_r+0x14>
 800f528:	6983      	ldr	r3, [r0, #24]
 800f52a:	b90b      	cbnz	r3, 800f530 <_fflush_r+0x14>
 800f52c:	f000 f860 	bl	800f5f0 <__sinit>
 800f530:	4b0c      	ldr	r3, [pc, #48]	; (800f564 <_fflush_r+0x48>)
 800f532:	429c      	cmp	r4, r3
 800f534:	d109      	bne.n	800f54a <_fflush_r+0x2e>
 800f536:	686c      	ldr	r4, [r5, #4]
 800f538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f53c:	b17b      	cbz	r3, 800f55e <_fflush_r+0x42>
 800f53e:	4621      	mov	r1, r4
 800f540:	4628      	mov	r0, r5
 800f542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f546:	f7ff bf63 	b.w	800f410 <__sflush_r>
 800f54a:	4b07      	ldr	r3, [pc, #28]	; (800f568 <_fflush_r+0x4c>)
 800f54c:	429c      	cmp	r4, r3
 800f54e:	d101      	bne.n	800f554 <_fflush_r+0x38>
 800f550:	68ac      	ldr	r4, [r5, #8]
 800f552:	e7f1      	b.n	800f538 <_fflush_r+0x1c>
 800f554:	4b05      	ldr	r3, [pc, #20]	; (800f56c <_fflush_r+0x50>)
 800f556:	429c      	cmp	r4, r3
 800f558:	bf08      	it	eq
 800f55a:	68ec      	ldreq	r4, [r5, #12]
 800f55c:	e7ec      	b.n	800f538 <_fflush_r+0x1c>
 800f55e:	2000      	movs	r0, #0
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	08012c28 	.word	0x08012c28
 800f568:	08012c48 	.word	0x08012c48
 800f56c:	08012c08 	.word	0x08012c08

0800f570 <std>:
 800f570:	2300      	movs	r3, #0
 800f572:	b510      	push	{r4, lr}
 800f574:	4604      	mov	r4, r0
 800f576:	e9c0 3300 	strd	r3, r3, [r0]
 800f57a:	6083      	str	r3, [r0, #8]
 800f57c:	8181      	strh	r1, [r0, #12]
 800f57e:	6643      	str	r3, [r0, #100]	; 0x64
 800f580:	81c2      	strh	r2, [r0, #14]
 800f582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f586:	6183      	str	r3, [r0, #24]
 800f588:	4619      	mov	r1, r3
 800f58a:	2208      	movs	r2, #8
 800f58c:	305c      	adds	r0, #92	; 0x5c
 800f58e:	f7fe fb2d 	bl	800dbec <memset>
 800f592:	4b05      	ldr	r3, [pc, #20]	; (800f5a8 <std+0x38>)
 800f594:	6263      	str	r3, [r4, #36]	; 0x24
 800f596:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <std+0x3c>)
 800f598:	62a3      	str	r3, [r4, #40]	; 0x28
 800f59a:	4b05      	ldr	r3, [pc, #20]	; (800f5b0 <std+0x40>)
 800f59c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f59e:	4b05      	ldr	r3, [pc, #20]	; (800f5b4 <std+0x44>)
 800f5a0:	6224      	str	r4, [r4, #32]
 800f5a2:	6323      	str	r3, [r4, #48]	; 0x30
 800f5a4:	bd10      	pop	{r4, pc}
 800f5a6:	bf00      	nop
 800f5a8:	080101f5 	.word	0x080101f5
 800f5ac:	08010217 	.word	0x08010217
 800f5b0:	0801024f 	.word	0x0801024f
 800f5b4:	08010273 	.word	0x08010273

0800f5b8 <_cleanup_r>:
 800f5b8:	4901      	ldr	r1, [pc, #4]	; (800f5c0 <_cleanup_r+0x8>)
 800f5ba:	f000 b885 	b.w	800f6c8 <_fwalk_reent>
 800f5be:	bf00      	nop
 800f5c0:	0800f51d 	.word	0x0800f51d

0800f5c4 <__sfmoreglue>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	1e4a      	subs	r2, r1, #1
 800f5c8:	2568      	movs	r5, #104	; 0x68
 800f5ca:	4355      	muls	r5, r2
 800f5cc:	460e      	mov	r6, r1
 800f5ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5d2:	f000 fc53 	bl	800fe7c <_malloc_r>
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	b140      	cbz	r0, 800f5ec <__sfmoreglue+0x28>
 800f5da:	2100      	movs	r1, #0
 800f5dc:	e9c0 1600 	strd	r1, r6, [r0]
 800f5e0:	300c      	adds	r0, #12
 800f5e2:	60a0      	str	r0, [r4, #8]
 800f5e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5e8:	f7fe fb00 	bl	800dbec <memset>
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}

0800f5f0 <__sinit>:
 800f5f0:	6983      	ldr	r3, [r0, #24]
 800f5f2:	b510      	push	{r4, lr}
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	bb33      	cbnz	r3, 800f646 <__sinit+0x56>
 800f5f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f5fc:	6503      	str	r3, [r0, #80]	; 0x50
 800f5fe:	4b12      	ldr	r3, [pc, #72]	; (800f648 <__sinit+0x58>)
 800f600:	4a12      	ldr	r2, [pc, #72]	; (800f64c <__sinit+0x5c>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	6282      	str	r2, [r0, #40]	; 0x28
 800f606:	4298      	cmp	r0, r3
 800f608:	bf04      	itt	eq
 800f60a:	2301      	moveq	r3, #1
 800f60c:	6183      	streq	r3, [r0, #24]
 800f60e:	f000 f81f 	bl	800f650 <__sfp>
 800f612:	6060      	str	r0, [r4, #4]
 800f614:	4620      	mov	r0, r4
 800f616:	f000 f81b 	bl	800f650 <__sfp>
 800f61a:	60a0      	str	r0, [r4, #8]
 800f61c:	4620      	mov	r0, r4
 800f61e:	f000 f817 	bl	800f650 <__sfp>
 800f622:	2200      	movs	r2, #0
 800f624:	60e0      	str	r0, [r4, #12]
 800f626:	2104      	movs	r1, #4
 800f628:	6860      	ldr	r0, [r4, #4]
 800f62a:	f7ff ffa1 	bl	800f570 <std>
 800f62e:	2201      	movs	r2, #1
 800f630:	2109      	movs	r1, #9
 800f632:	68a0      	ldr	r0, [r4, #8]
 800f634:	f7ff ff9c 	bl	800f570 <std>
 800f638:	2202      	movs	r2, #2
 800f63a:	2112      	movs	r1, #18
 800f63c:	68e0      	ldr	r0, [r4, #12]
 800f63e:	f7ff ff97 	bl	800f570 <std>
 800f642:	2301      	movs	r3, #1
 800f644:	61a3      	str	r3, [r4, #24]
 800f646:	bd10      	pop	{r4, pc}
 800f648:	08012bc4 	.word	0x08012bc4
 800f64c:	0800f5b9 	.word	0x0800f5b9

0800f650 <__sfp>:
 800f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f652:	4b1b      	ldr	r3, [pc, #108]	; (800f6c0 <__sfp+0x70>)
 800f654:	681e      	ldr	r6, [r3, #0]
 800f656:	69b3      	ldr	r3, [r6, #24]
 800f658:	4607      	mov	r7, r0
 800f65a:	b913      	cbnz	r3, 800f662 <__sfp+0x12>
 800f65c:	4630      	mov	r0, r6
 800f65e:	f7ff ffc7 	bl	800f5f0 <__sinit>
 800f662:	3648      	adds	r6, #72	; 0x48
 800f664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f668:	3b01      	subs	r3, #1
 800f66a:	d503      	bpl.n	800f674 <__sfp+0x24>
 800f66c:	6833      	ldr	r3, [r6, #0]
 800f66e:	b133      	cbz	r3, 800f67e <__sfp+0x2e>
 800f670:	6836      	ldr	r6, [r6, #0]
 800f672:	e7f7      	b.n	800f664 <__sfp+0x14>
 800f674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f678:	b16d      	cbz	r5, 800f696 <__sfp+0x46>
 800f67a:	3468      	adds	r4, #104	; 0x68
 800f67c:	e7f4      	b.n	800f668 <__sfp+0x18>
 800f67e:	2104      	movs	r1, #4
 800f680:	4638      	mov	r0, r7
 800f682:	f7ff ff9f 	bl	800f5c4 <__sfmoreglue>
 800f686:	6030      	str	r0, [r6, #0]
 800f688:	2800      	cmp	r0, #0
 800f68a:	d1f1      	bne.n	800f670 <__sfp+0x20>
 800f68c:	230c      	movs	r3, #12
 800f68e:	603b      	str	r3, [r7, #0]
 800f690:	4604      	mov	r4, r0
 800f692:	4620      	mov	r0, r4
 800f694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f696:	4b0b      	ldr	r3, [pc, #44]	; (800f6c4 <__sfp+0x74>)
 800f698:	6665      	str	r5, [r4, #100]	; 0x64
 800f69a:	e9c4 5500 	strd	r5, r5, [r4]
 800f69e:	60a5      	str	r5, [r4, #8]
 800f6a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f6a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f6a8:	2208      	movs	r2, #8
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6b0:	f7fe fa9c 	bl	800dbec <memset>
 800f6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6bc:	e7e9      	b.n	800f692 <__sfp+0x42>
 800f6be:	bf00      	nop
 800f6c0:	08012bc4 	.word	0x08012bc4
 800f6c4:	ffff0001 	.word	0xffff0001

0800f6c8 <_fwalk_reent>:
 800f6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6cc:	4680      	mov	r8, r0
 800f6ce:	4689      	mov	r9, r1
 800f6d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6d4:	2600      	movs	r6, #0
 800f6d6:	b914      	cbnz	r4, 800f6de <_fwalk_reent+0x16>
 800f6d8:	4630      	mov	r0, r6
 800f6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f6e2:	3f01      	subs	r7, #1
 800f6e4:	d501      	bpl.n	800f6ea <_fwalk_reent+0x22>
 800f6e6:	6824      	ldr	r4, [r4, #0]
 800f6e8:	e7f5      	b.n	800f6d6 <_fwalk_reent+0xe>
 800f6ea:	89ab      	ldrh	r3, [r5, #12]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d907      	bls.n	800f700 <_fwalk_reent+0x38>
 800f6f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	d003      	beq.n	800f700 <_fwalk_reent+0x38>
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	47c8      	blx	r9
 800f6fe:	4306      	orrs	r6, r0
 800f700:	3568      	adds	r5, #104	; 0x68
 800f702:	e7ee      	b.n	800f6e2 <_fwalk_reent+0x1a>

0800f704 <_localeconv_r>:
 800f704:	4b04      	ldr	r3, [pc, #16]	; (800f718 <_localeconv_r+0x14>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6a18      	ldr	r0, [r3, #32]
 800f70a:	4b04      	ldr	r3, [pc, #16]	; (800f71c <_localeconv_r+0x18>)
 800f70c:	2800      	cmp	r0, #0
 800f70e:	bf08      	it	eq
 800f710:	4618      	moveq	r0, r3
 800f712:	30f0      	adds	r0, #240	; 0xf0
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	20001cac 	.word	0x20001cac
 800f71c:	20001d10 	.word	0x20001d10

0800f720 <__swhatbuf_r>:
 800f720:	b570      	push	{r4, r5, r6, lr}
 800f722:	460e      	mov	r6, r1
 800f724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f728:	2900      	cmp	r1, #0
 800f72a:	b096      	sub	sp, #88	; 0x58
 800f72c:	4614      	mov	r4, r2
 800f72e:	461d      	mov	r5, r3
 800f730:	da07      	bge.n	800f742 <__swhatbuf_r+0x22>
 800f732:	2300      	movs	r3, #0
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	89b3      	ldrh	r3, [r6, #12]
 800f738:	061a      	lsls	r2, r3, #24
 800f73a:	d410      	bmi.n	800f75e <__swhatbuf_r+0x3e>
 800f73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f740:	e00e      	b.n	800f760 <__swhatbuf_r+0x40>
 800f742:	466a      	mov	r2, sp
 800f744:	f000 fdbc 	bl	80102c0 <_fstat_r>
 800f748:	2800      	cmp	r0, #0
 800f74a:	dbf2      	blt.n	800f732 <__swhatbuf_r+0x12>
 800f74c:	9a01      	ldr	r2, [sp, #4]
 800f74e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f752:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f756:	425a      	negs	r2, r3
 800f758:	415a      	adcs	r2, r3
 800f75a:	602a      	str	r2, [r5, #0]
 800f75c:	e7ee      	b.n	800f73c <__swhatbuf_r+0x1c>
 800f75e:	2340      	movs	r3, #64	; 0x40
 800f760:	2000      	movs	r0, #0
 800f762:	6023      	str	r3, [r4, #0]
 800f764:	b016      	add	sp, #88	; 0x58
 800f766:	bd70      	pop	{r4, r5, r6, pc}

0800f768 <__smakebuf_r>:
 800f768:	898b      	ldrh	r3, [r1, #12]
 800f76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f76c:	079d      	lsls	r5, r3, #30
 800f76e:	4606      	mov	r6, r0
 800f770:	460c      	mov	r4, r1
 800f772:	d507      	bpl.n	800f784 <__smakebuf_r+0x1c>
 800f774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	6123      	str	r3, [r4, #16]
 800f77c:	2301      	movs	r3, #1
 800f77e:	6163      	str	r3, [r4, #20]
 800f780:	b002      	add	sp, #8
 800f782:	bd70      	pop	{r4, r5, r6, pc}
 800f784:	ab01      	add	r3, sp, #4
 800f786:	466a      	mov	r2, sp
 800f788:	f7ff ffca 	bl	800f720 <__swhatbuf_r>
 800f78c:	9900      	ldr	r1, [sp, #0]
 800f78e:	4605      	mov	r5, r0
 800f790:	4630      	mov	r0, r6
 800f792:	f000 fb73 	bl	800fe7c <_malloc_r>
 800f796:	b948      	cbnz	r0, 800f7ac <__smakebuf_r+0x44>
 800f798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79c:	059a      	lsls	r2, r3, #22
 800f79e:	d4ef      	bmi.n	800f780 <__smakebuf_r+0x18>
 800f7a0:	f023 0303 	bic.w	r3, r3, #3
 800f7a4:	f043 0302 	orr.w	r3, r3, #2
 800f7a8:	81a3      	strh	r3, [r4, #12]
 800f7aa:	e7e3      	b.n	800f774 <__smakebuf_r+0xc>
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <__smakebuf_r+0x7c>)
 800f7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	6020      	str	r0, [r4, #0]
 800f7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b8:	81a3      	strh	r3, [r4, #12]
 800f7ba:	9b00      	ldr	r3, [sp, #0]
 800f7bc:	6163      	str	r3, [r4, #20]
 800f7be:	9b01      	ldr	r3, [sp, #4]
 800f7c0:	6120      	str	r0, [r4, #16]
 800f7c2:	b15b      	cbz	r3, 800f7dc <__smakebuf_r+0x74>
 800f7c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	f000 fd8b 	bl	80102e4 <_isatty_r>
 800f7ce:	b128      	cbz	r0, 800f7dc <__smakebuf_r+0x74>
 800f7d0:	89a3      	ldrh	r3, [r4, #12]
 800f7d2:	f023 0303 	bic.w	r3, r3, #3
 800f7d6:	f043 0301 	orr.w	r3, r3, #1
 800f7da:	81a3      	strh	r3, [r4, #12]
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	431d      	orrs	r5, r3
 800f7e0:	81a5      	strh	r5, [r4, #12]
 800f7e2:	e7cd      	b.n	800f780 <__smakebuf_r+0x18>
 800f7e4:	0800f5b9 	.word	0x0800f5b9

0800f7e8 <malloc>:
 800f7e8:	4b02      	ldr	r3, [pc, #8]	; (800f7f4 <malloc+0xc>)
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	6818      	ldr	r0, [r3, #0]
 800f7ee:	f000 bb45 	b.w	800fe7c <_malloc_r>
 800f7f2:	bf00      	nop
 800f7f4:	20001cac 	.word	0x20001cac

0800f7f8 <memcpy>:
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	1e43      	subs	r3, r0, #1
 800f7fc:	440a      	add	r2, r1
 800f7fe:	4291      	cmp	r1, r2
 800f800:	d100      	bne.n	800f804 <memcpy+0xc>
 800f802:	bd10      	pop	{r4, pc}
 800f804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f80c:	e7f7      	b.n	800f7fe <memcpy+0x6>

0800f80e <_Balloc>:
 800f80e:	b570      	push	{r4, r5, r6, lr}
 800f810:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f812:	4604      	mov	r4, r0
 800f814:	460e      	mov	r6, r1
 800f816:	b93d      	cbnz	r5, 800f828 <_Balloc+0x1a>
 800f818:	2010      	movs	r0, #16
 800f81a:	f7ff ffe5 	bl	800f7e8 <malloc>
 800f81e:	6260      	str	r0, [r4, #36]	; 0x24
 800f820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f824:	6005      	str	r5, [r0, #0]
 800f826:	60c5      	str	r5, [r0, #12]
 800f828:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f82a:	68eb      	ldr	r3, [r5, #12]
 800f82c:	b183      	cbz	r3, 800f850 <_Balloc+0x42>
 800f82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f836:	b9b8      	cbnz	r0, 800f868 <_Balloc+0x5a>
 800f838:	2101      	movs	r1, #1
 800f83a:	fa01 f506 	lsl.w	r5, r1, r6
 800f83e:	1d6a      	adds	r2, r5, #5
 800f840:	0092      	lsls	r2, r2, #2
 800f842:	4620      	mov	r0, r4
 800f844:	f000 fabe 	bl	800fdc4 <_calloc_r>
 800f848:	b160      	cbz	r0, 800f864 <_Balloc+0x56>
 800f84a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f84e:	e00e      	b.n	800f86e <_Balloc+0x60>
 800f850:	2221      	movs	r2, #33	; 0x21
 800f852:	2104      	movs	r1, #4
 800f854:	4620      	mov	r0, r4
 800f856:	f000 fab5 	bl	800fdc4 <_calloc_r>
 800f85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f85c:	60e8      	str	r0, [r5, #12]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e4      	bne.n	800f82e <_Balloc+0x20>
 800f864:	2000      	movs	r0, #0
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	6802      	ldr	r2, [r0, #0]
 800f86a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f86e:	2300      	movs	r3, #0
 800f870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f874:	e7f7      	b.n	800f866 <_Balloc+0x58>

0800f876 <_Bfree>:
 800f876:	b570      	push	{r4, r5, r6, lr}
 800f878:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f87a:	4606      	mov	r6, r0
 800f87c:	460d      	mov	r5, r1
 800f87e:	b93c      	cbnz	r4, 800f890 <_Bfree+0x1a>
 800f880:	2010      	movs	r0, #16
 800f882:	f7ff ffb1 	bl	800f7e8 <malloc>
 800f886:	6270      	str	r0, [r6, #36]	; 0x24
 800f888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f88c:	6004      	str	r4, [r0, #0]
 800f88e:	60c4      	str	r4, [r0, #12]
 800f890:	b13d      	cbz	r5, 800f8a2 <_Bfree+0x2c>
 800f892:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f894:	686a      	ldr	r2, [r5, #4]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f89c:	6029      	str	r1, [r5, #0]
 800f89e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}

0800f8a4 <__multadd>:
 800f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	690d      	ldr	r5, [r1, #16]
 800f8aa:	461f      	mov	r7, r3
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	460c      	mov	r4, r1
 800f8b0:	f101 0c14 	add.w	ip, r1, #20
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f8dc 0000 	ldr.w	r0, [ip]
 800f8ba:	b281      	uxth	r1, r0
 800f8bc:	fb02 7101 	mla	r1, r2, r1, r7
 800f8c0:	0c0f      	lsrs	r7, r1, #16
 800f8c2:	0c00      	lsrs	r0, r0, #16
 800f8c4:	fb02 7000 	mla	r0, r2, r0, r7
 800f8c8:	b289      	uxth	r1, r1
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f8d0:	429d      	cmp	r5, r3
 800f8d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f8da:	dcec      	bgt.n	800f8b6 <__multadd+0x12>
 800f8dc:	b1d7      	cbz	r7, 800f914 <__multadd+0x70>
 800f8de:	68a3      	ldr	r3, [r4, #8]
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	dc12      	bgt.n	800f90a <__multadd+0x66>
 800f8e4:	6861      	ldr	r1, [r4, #4]
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	3101      	adds	r1, #1
 800f8ea:	f7ff ff90 	bl	800f80e <_Balloc>
 800f8ee:	6922      	ldr	r2, [r4, #16]
 800f8f0:	3202      	adds	r2, #2
 800f8f2:	f104 010c 	add.w	r1, r4, #12
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	0092      	lsls	r2, r2, #2
 800f8fa:	300c      	adds	r0, #12
 800f8fc:	f7ff ff7c 	bl	800f7f8 <memcpy>
 800f900:	4621      	mov	r1, r4
 800f902:	4630      	mov	r0, r6
 800f904:	f7ff ffb7 	bl	800f876 <_Bfree>
 800f908:	4644      	mov	r4, r8
 800f90a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f90e:	3501      	adds	r5, #1
 800f910:	615f      	str	r7, [r3, #20]
 800f912:	6125      	str	r5, [r4, #16]
 800f914:	4620      	mov	r0, r4
 800f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f91a <__hi0bits>:
 800f91a:	0c02      	lsrs	r2, r0, #16
 800f91c:	0412      	lsls	r2, r2, #16
 800f91e:	4603      	mov	r3, r0
 800f920:	b9b2      	cbnz	r2, 800f950 <__hi0bits+0x36>
 800f922:	0403      	lsls	r3, r0, #16
 800f924:	2010      	movs	r0, #16
 800f926:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f92a:	bf04      	itt	eq
 800f92c:	021b      	lsleq	r3, r3, #8
 800f92e:	3008      	addeq	r0, #8
 800f930:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f934:	bf04      	itt	eq
 800f936:	011b      	lsleq	r3, r3, #4
 800f938:	3004      	addeq	r0, #4
 800f93a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f93e:	bf04      	itt	eq
 800f940:	009b      	lsleq	r3, r3, #2
 800f942:	3002      	addeq	r0, #2
 800f944:	2b00      	cmp	r3, #0
 800f946:	db06      	blt.n	800f956 <__hi0bits+0x3c>
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	d503      	bpl.n	800f954 <__hi0bits+0x3a>
 800f94c:	3001      	adds	r0, #1
 800f94e:	4770      	bx	lr
 800f950:	2000      	movs	r0, #0
 800f952:	e7e8      	b.n	800f926 <__hi0bits+0xc>
 800f954:	2020      	movs	r0, #32
 800f956:	4770      	bx	lr

0800f958 <__lo0bits>:
 800f958:	6803      	ldr	r3, [r0, #0]
 800f95a:	f013 0207 	ands.w	r2, r3, #7
 800f95e:	4601      	mov	r1, r0
 800f960:	d00b      	beq.n	800f97a <__lo0bits+0x22>
 800f962:	07da      	lsls	r2, r3, #31
 800f964:	d423      	bmi.n	800f9ae <__lo0bits+0x56>
 800f966:	0798      	lsls	r0, r3, #30
 800f968:	bf49      	itett	mi
 800f96a:	085b      	lsrmi	r3, r3, #1
 800f96c:	089b      	lsrpl	r3, r3, #2
 800f96e:	2001      	movmi	r0, #1
 800f970:	600b      	strmi	r3, [r1, #0]
 800f972:	bf5c      	itt	pl
 800f974:	600b      	strpl	r3, [r1, #0]
 800f976:	2002      	movpl	r0, #2
 800f978:	4770      	bx	lr
 800f97a:	b298      	uxth	r0, r3
 800f97c:	b9a8      	cbnz	r0, 800f9aa <__lo0bits+0x52>
 800f97e:	0c1b      	lsrs	r3, r3, #16
 800f980:	2010      	movs	r0, #16
 800f982:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f986:	bf04      	itt	eq
 800f988:	0a1b      	lsreq	r3, r3, #8
 800f98a:	3008      	addeq	r0, #8
 800f98c:	071a      	lsls	r2, r3, #28
 800f98e:	bf04      	itt	eq
 800f990:	091b      	lsreq	r3, r3, #4
 800f992:	3004      	addeq	r0, #4
 800f994:	079a      	lsls	r2, r3, #30
 800f996:	bf04      	itt	eq
 800f998:	089b      	lsreq	r3, r3, #2
 800f99a:	3002      	addeq	r0, #2
 800f99c:	07da      	lsls	r2, r3, #31
 800f99e:	d402      	bmi.n	800f9a6 <__lo0bits+0x4e>
 800f9a0:	085b      	lsrs	r3, r3, #1
 800f9a2:	d006      	beq.n	800f9b2 <__lo0bits+0x5a>
 800f9a4:	3001      	adds	r0, #1
 800f9a6:	600b      	str	r3, [r1, #0]
 800f9a8:	4770      	bx	lr
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	e7e9      	b.n	800f982 <__lo0bits+0x2a>
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	4770      	bx	lr
 800f9b2:	2020      	movs	r0, #32
 800f9b4:	4770      	bx	lr

0800f9b6 <__i2b>:
 800f9b6:	b510      	push	{r4, lr}
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	f7ff ff27 	bl	800f80e <_Balloc>
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	6144      	str	r4, [r0, #20]
 800f9c4:	6102      	str	r2, [r0, #16]
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <__multiply>:
 800f9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9cc:	4614      	mov	r4, r2
 800f9ce:	690a      	ldr	r2, [r1, #16]
 800f9d0:	6923      	ldr	r3, [r4, #16]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	bfb8      	it	lt
 800f9d6:	460b      	movlt	r3, r1
 800f9d8:	4688      	mov	r8, r1
 800f9da:	bfbc      	itt	lt
 800f9dc:	46a0      	movlt	r8, r4
 800f9de:	461c      	movlt	r4, r3
 800f9e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f9e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9f0:	eb07 0609 	add.w	r6, r7, r9
 800f9f4:	42b3      	cmp	r3, r6
 800f9f6:	bfb8      	it	lt
 800f9f8:	3101      	addlt	r1, #1
 800f9fa:	f7ff ff08 	bl	800f80e <_Balloc>
 800f9fe:	f100 0514 	add.w	r5, r0, #20
 800fa02:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fa06:	462b      	mov	r3, r5
 800fa08:	2200      	movs	r2, #0
 800fa0a:	4573      	cmp	r3, lr
 800fa0c:	d316      	bcc.n	800fa3c <__multiply+0x74>
 800fa0e:	f104 0214 	add.w	r2, r4, #20
 800fa12:	f108 0114 	add.w	r1, r8, #20
 800fa16:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fa1a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	9b00      	ldr	r3, [sp, #0]
 800fa22:	9201      	str	r2, [sp, #4]
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d80c      	bhi.n	800fa42 <__multiply+0x7a>
 800fa28:	2e00      	cmp	r6, #0
 800fa2a:	dd03      	ble.n	800fa34 <__multiply+0x6c>
 800fa2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d05d      	beq.n	800faf0 <__multiply+0x128>
 800fa34:	6106      	str	r6, [r0, #16]
 800fa36:	b003      	add	sp, #12
 800fa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3c:	f843 2b04 	str.w	r2, [r3], #4
 800fa40:	e7e3      	b.n	800fa0a <__multiply+0x42>
 800fa42:	f8b2 b000 	ldrh.w	fp, [r2]
 800fa46:	f1bb 0f00 	cmp.w	fp, #0
 800fa4a:	d023      	beq.n	800fa94 <__multiply+0xcc>
 800fa4c:	4689      	mov	r9, r1
 800fa4e:	46ac      	mov	ip, r5
 800fa50:	f04f 0800 	mov.w	r8, #0
 800fa54:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa58:	f8dc a000 	ldr.w	sl, [ip]
 800fa5c:	b2a3      	uxth	r3, r4
 800fa5e:	fa1f fa8a 	uxth.w	sl, sl
 800fa62:	fb0b a303 	mla	r3, fp, r3, sl
 800fa66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa6a:	f8dc 4000 	ldr.w	r4, [ip]
 800fa6e:	4443      	add	r3, r8
 800fa70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa74:	fb0b 840a 	mla	r4, fp, sl, r8
 800fa78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fa7c:	46e2      	mov	sl, ip
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fa84:	454f      	cmp	r7, r9
 800fa86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa8a:	f84a 3b04 	str.w	r3, [sl], #4
 800fa8e:	d82b      	bhi.n	800fae8 <__multiply+0x120>
 800fa90:	f8cc 8004 	str.w	r8, [ip, #4]
 800fa94:	9b01      	ldr	r3, [sp, #4]
 800fa96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fa9a:	3204      	adds	r2, #4
 800fa9c:	f1ba 0f00 	cmp.w	sl, #0
 800faa0:	d020      	beq.n	800fae4 <__multiply+0x11c>
 800faa2:	682b      	ldr	r3, [r5, #0]
 800faa4:	4689      	mov	r9, r1
 800faa6:	46a8      	mov	r8, r5
 800faa8:	f04f 0b00 	mov.w	fp, #0
 800faac:	f8b9 c000 	ldrh.w	ip, [r9]
 800fab0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fab4:	fb0a 440c 	mla	r4, sl, ip, r4
 800fab8:	445c      	add	r4, fp
 800faba:	46c4      	mov	ip, r8
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fac2:	f84c 3b04 	str.w	r3, [ip], #4
 800fac6:	f859 3b04 	ldr.w	r3, [r9], #4
 800faca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800face:	0c1b      	lsrs	r3, r3, #16
 800fad0:	fb0a b303 	mla	r3, sl, r3, fp
 800fad4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fad8:	454f      	cmp	r7, r9
 800fada:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fade:	d805      	bhi.n	800faec <__multiply+0x124>
 800fae0:	f8c8 3004 	str.w	r3, [r8, #4]
 800fae4:	3504      	adds	r5, #4
 800fae6:	e79b      	b.n	800fa20 <__multiply+0x58>
 800fae8:	46d4      	mov	ip, sl
 800faea:	e7b3      	b.n	800fa54 <__multiply+0x8c>
 800faec:	46e0      	mov	r8, ip
 800faee:	e7dd      	b.n	800faac <__multiply+0xe4>
 800faf0:	3e01      	subs	r6, #1
 800faf2:	e799      	b.n	800fa28 <__multiply+0x60>

0800faf4 <__pow5mult>:
 800faf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf8:	4615      	mov	r5, r2
 800fafa:	f012 0203 	ands.w	r2, r2, #3
 800fafe:	4606      	mov	r6, r0
 800fb00:	460f      	mov	r7, r1
 800fb02:	d007      	beq.n	800fb14 <__pow5mult+0x20>
 800fb04:	3a01      	subs	r2, #1
 800fb06:	4c21      	ldr	r4, [pc, #132]	; (800fb8c <__pow5mult+0x98>)
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb0e:	f7ff fec9 	bl	800f8a4 <__multadd>
 800fb12:	4607      	mov	r7, r0
 800fb14:	10ad      	asrs	r5, r5, #2
 800fb16:	d035      	beq.n	800fb84 <__pow5mult+0x90>
 800fb18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb1a:	b93c      	cbnz	r4, 800fb2c <__pow5mult+0x38>
 800fb1c:	2010      	movs	r0, #16
 800fb1e:	f7ff fe63 	bl	800f7e8 <malloc>
 800fb22:	6270      	str	r0, [r6, #36]	; 0x24
 800fb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb28:	6004      	str	r4, [r0, #0]
 800fb2a:	60c4      	str	r4, [r0, #12]
 800fb2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb34:	b94c      	cbnz	r4, 800fb4a <__pow5mult+0x56>
 800fb36:	f240 2171 	movw	r1, #625	; 0x271
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f7ff ff3b 	bl	800f9b6 <__i2b>
 800fb40:	2300      	movs	r3, #0
 800fb42:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb46:	4604      	mov	r4, r0
 800fb48:	6003      	str	r3, [r0, #0]
 800fb4a:	f04f 0800 	mov.w	r8, #0
 800fb4e:	07eb      	lsls	r3, r5, #31
 800fb50:	d50a      	bpl.n	800fb68 <__pow5mult+0x74>
 800fb52:	4639      	mov	r1, r7
 800fb54:	4622      	mov	r2, r4
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7ff ff36 	bl	800f9c8 <__multiply>
 800fb5c:	4639      	mov	r1, r7
 800fb5e:	4681      	mov	r9, r0
 800fb60:	4630      	mov	r0, r6
 800fb62:	f7ff fe88 	bl	800f876 <_Bfree>
 800fb66:	464f      	mov	r7, r9
 800fb68:	106d      	asrs	r5, r5, #1
 800fb6a:	d00b      	beq.n	800fb84 <__pow5mult+0x90>
 800fb6c:	6820      	ldr	r0, [r4, #0]
 800fb6e:	b938      	cbnz	r0, 800fb80 <__pow5mult+0x8c>
 800fb70:	4622      	mov	r2, r4
 800fb72:	4621      	mov	r1, r4
 800fb74:	4630      	mov	r0, r6
 800fb76:	f7ff ff27 	bl	800f9c8 <__multiply>
 800fb7a:	6020      	str	r0, [r4, #0]
 800fb7c:	f8c0 8000 	str.w	r8, [r0]
 800fb80:	4604      	mov	r4, r0
 800fb82:	e7e4      	b.n	800fb4e <__pow5mult+0x5a>
 800fb84:	4638      	mov	r0, r7
 800fb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8a:	bf00      	nop
 800fb8c:	08012d58 	.word	0x08012d58

0800fb90 <__lshift>:
 800fb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb94:	460c      	mov	r4, r1
 800fb96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb9a:	6923      	ldr	r3, [r4, #16]
 800fb9c:	6849      	ldr	r1, [r1, #4]
 800fb9e:	eb0a 0903 	add.w	r9, sl, r3
 800fba2:	68a3      	ldr	r3, [r4, #8]
 800fba4:	4607      	mov	r7, r0
 800fba6:	4616      	mov	r6, r2
 800fba8:	f109 0501 	add.w	r5, r9, #1
 800fbac:	42ab      	cmp	r3, r5
 800fbae:	db32      	blt.n	800fc16 <__lshift+0x86>
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	f7ff fe2c 	bl	800f80e <_Balloc>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4680      	mov	r8, r0
 800fbba:	f100 0114 	add.w	r1, r0, #20
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	4553      	cmp	r3, sl
 800fbc2:	db2b      	blt.n	800fc1c <__lshift+0x8c>
 800fbc4:	6920      	ldr	r0, [r4, #16]
 800fbc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbca:	f104 0314 	add.w	r3, r4, #20
 800fbce:	f016 021f 	ands.w	r2, r6, #31
 800fbd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fbda:	d025      	beq.n	800fc28 <__lshift+0x98>
 800fbdc:	f1c2 0e20 	rsb	lr, r2, #32
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	681e      	ldr	r6, [r3, #0]
 800fbe4:	468a      	mov	sl, r1
 800fbe6:	4096      	lsls	r6, r2
 800fbe8:	4330      	orrs	r0, r6
 800fbea:	f84a 0b04 	str.w	r0, [sl], #4
 800fbee:	f853 0b04 	ldr.w	r0, [r3], #4
 800fbf2:	459c      	cmp	ip, r3
 800fbf4:	fa20 f00e 	lsr.w	r0, r0, lr
 800fbf8:	d814      	bhi.n	800fc24 <__lshift+0x94>
 800fbfa:	6048      	str	r0, [r1, #4]
 800fbfc:	b108      	cbz	r0, 800fc02 <__lshift+0x72>
 800fbfe:	f109 0502 	add.w	r5, r9, #2
 800fc02:	3d01      	subs	r5, #1
 800fc04:	4638      	mov	r0, r7
 800fc06:	f8c8 5010 	str.w	r5, [r8, #16]
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	f7ff fe33 	bl	800f876 <_Bfree>
 800fc10:	4640      	mov	r0, r8
 800fc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc16:	3101      	adds	r1, #1
 800fc18:	005b      	lsls	r3, r3, #1
 800fc1a:	e7c7      	b.n	800fbac <__lshift+0x1c>
 800fc1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fc20:	3301      	adds	r3, #1
 800fc22:	e7cd      	b.n	800fbc0 <__lshift+0x30>
 800fc24:	4651      	mov	r1, sl
 800fc26:	e7dc      	b.n	800fbe2 <__lshift+0x52>
 800fc28:	3904      	subs	r1, #4
 800fc2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc32:	459c      	cmp	ip, r3
 800fc34:	d8f9      	bhi.n	800fc2a <__lshift+0x9a>
 800fc36:	e7e4      	b.n	800fc02 <__lshift+0x72>

0800fc38 <__mcmp>:
 800fc38:	6903      	ldr	r3, [r0, #16]
 800fc3a:	690a      	ldr	r2, [r1, #16]
 800fc3c:	1a9b      	subs	r3, r3, r2
 800fc3e:	b530      	push	{r4, r5, lr}
 800fc40:	d10c      	bne.n	800fc5c <__mcmp+0x24>
 800fc42:	0092      	lsls	r2, r2, #2
 800fc44:	3014      	adds	r0, #20
 800fc46:	3114      	adds	r1, #20
 800fc48:	1884      	adds	r4, r0, r2
 800fc4a:	4411      	add	r1, r2
 800fc4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc54:	4295      	cmp	r5, r2
 800fc56:	d003      	beq.n	800fc60 <__mcmp+0x28>
 800fc58:	d305      	bcc.n	800fc66 <__mcmp+0x2e>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	bd30      	pop	{r4, r5, pc}
 800fc60:	42a0      	cmp	r0, r4
 800fc62:	d3f3      	bcc.n	800fc4c <__mcmp+0x14>
 800fc64:	e7fa      	b.n	800fc5c <__mcmp+0x24>
 800fc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc6a:	e7f7      	b.n	800fc5c <__mcmp+0x24>

0800fc6c <__mdiff>:
 800fc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc70:	460d      	mov	r5, r1
 800fc72:	4607      	mov	r7, r0
 800fc74:	4611      	mov	r1, r2
 800fc76:	4628      	mov	r0, r5
 800fc78:	4614      	mov	r4, r2
 800fc7a:	f7ff ffdd 	bl	800fc38 <__mcmp>
 800fc7e:	1e06      	subs	r6, r0, #0
 800fc80:	d108      	bne.n	800fc94 <__mdiff+0x28>
 800fc82:	4631      	mov	r1, r6
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7ff fdc2 	bl	800f80e <_Balloc>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc94:	bfa4      	itt	ge
 800fc96:	4623      	movge	r3, r4
 800fc98:	462c      	movge	r4, r5
 800fc9a:	4638      	mov	r0, r7
 800fc9c:	6861      	ldr	r1, [r4, #4]
 800fc9e:	bfa6      	itte	ge
 800fca0:	461d      	movge	r5, r3
 800fca2:	2600      	movge	r6, #0
 800fca4:	2601      	movlt	r6, #1
 800fca6:	f7ff fdb2 	bl	800f80e <_Balloc>
 800fcaa:	692b      	ldr	r3, [r5, #16]
 800fcac:	60c6      	str	r6, [r0, #12]
 800fcae:	6926      	ldr	r6, [r4, #16]
 800fcb0:	f105 0914 	add.w	r9, r5, #20
 800fcb4:	f104 0214 	add.w	r2, r4, #20
 800fcb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fcbc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fcc0:	f100 0514 	add.w	r5, r0, #20
 800fcc4:	f04f 0e00 	mov.w	lr, #0
 800fcc8:	f852 ab04 	ldr.w	sl, [r2], #4
 800fccc:	f859 4b04 	ldr.w	r4, [r9], #4
 800fcd0:	fa1e f18a 	uxtah	r1, lr, sl
 800fcd4:	b2a3      	uxth	r3, r4
 800fcd6:	1ac9      	subs	r1, r1, r3
 800fcd8:	0c23      	lsrs	r3, r4, #16
 800fcda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fcde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fce2:	b289      	uxth	r1, r1
 800fce4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fce8:	45c8      	cmp	r8, r9
 800fcea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fcee:	4694      	mov	ip, r2
 800fcf0:	f845 3b04 	str.w	r3, [r5], #4
 800fcf4:	d8e8      	bhi.n	800fcc8 <__mdiff+0x5c>
 800fcf6:	45bc      	cmp	ip, r7
 800fcf8:	d304      	bcc.n	800fd04 <__mdiff+0x98>
 800fcfa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fcfe:	b183      	cbz	r3, 800fd22 <__mdiff+0xb6>
 800fd00:	6106      	str	r6, [r0, #16]
 800fd02:	e7c5      	b.n	800fc90 <__mdiff+0x24>
 800fd04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fd08:	fa1e f381 	uxtah	r3, lr, r1
 800fd0c:	141a      	asrs	r2, r3, #16
 800fd0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fd1c:	f845 3b04 	str.w	r3, [r5], #4
 800fd20:	e7e9      	b.n	800fcf6 <__mdiff+0x8a>
 800fd22:	3e01      	subs	r6, #1
 800fd24:	e7e9      	b.n	800fcfa <__mdiff+0x8e>

0800fd26 <__d2b>:
 800fd26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd2a:	460e      	mov	r6, r1
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	ec59 8b10 	vmov	r8, r9, d0
 800fd32:	4615      	mov	r5, r2
 800fd34:	f7ff fd6b 	bl	800f80e <_Balloc>
 800fd38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd42:	bb34      	cbnz	r4, 800fd92 <__d2b+0x6c>
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	f1b8 0300 	subs.w	r3, r8, #0
 800fd4a:	d027      	beq.n	800fd9c <__d2b+0x76>
 800fd4c:	a802      	add	r0, sp, #8
 800fd4e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fd52:	f7ff fe01 	bl	800f958 <__lo0bits>
 800fd56:	9900      	ldr	r1, [sp, #0]
 800fd58:	b1f0      	cbz	r0, 800fd98 <__d2b+0x72>
 800fd5a:	9a01      	ldr	r2, [sp, #4]
 800fd5c:	f1c0 0320 	rsb	r3, r0, #32
 800fd60:	fa02 f303 	lsl.w	r3, r2, r3
 800fd64:	430b      	orrs	r3, r1
 800fd66:	40c2      	lsrs	r2, r0
 800fd68:	617b      	str	r3, [r7, #20]
 800fd6a:	9201      	str	r2, [sp, #4]
 800fd6c:	9b01      	ldr	r3, [sp, #4]
 800fd6e:	61bb      	str	r3, [r7, #24]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	bf14      	ite	ne
 800fd74:	2102      	movne	r1, #2
 800fd76:	2101      	moveq	r1, #1
 800fd78:	6139      	str	r1, [r7, #16]
 800fd7a:	b1c4      	cbz	r4, 800fdae <__d2b+0x88>
 800fd7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fd80:	4404      	add	r4, r0
 800fd82:	6034      	str	r4, [r6, #0]
 800fd84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd88:	6028      	str	r0, [r5, #0]
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	b003      	add	sp, #12
 800fd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd96:	e7d5      	b.n	800fd44 <__d2b+0x1e>
 800fd98:	6179      	str	r1, [r7, #20]
 800fd9a:	e7e7      	b.n	800fd6c <__d2b+0x46>
 800fd9c:	a801      	add	r0, sp, #4
 800fd9e:	f7ff fddb 	bl	800f958 <__lo0bits>
 800fda2:	9b01      	ldr	r3, [sp, #4]
 800fda4:	617b      	str	r3, [r7, #20]
 800fda6:	2101      	movs	r1, #1
 800fda8:	6139      	str	r1, [r7, #16]
 800fdaa:	3020      	adds	r0, #32
 800fdac:	e7e5      	b.n	800fd7a <__d2b+0x54>
 800fdae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fdb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fdb6:	6030      	str	r0, [r6, #0]
 800fdb8:	6918      	ldr	r0, [r3, #16]
 800fdba:	f7ff fdae 	bl	800f91a <__hi0bits>
 800fdbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fdc2:	e7e1      	b.n	800fd88 <__d2b+0x62>

0800fdc4 <_calloc_r>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	fb02 f401 	mul.w	r4, r2, r1
 800fdca:	4621      	mov	r1, r4
 800fdcc:	f000 f856 	bl	800fe7c <_malloc_r>
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	b118      	cbz	r0, 800fddc <_calloc_r+0x18>
 800fdd4:	4622      	mov	r2, r4
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	f7fd ff08 	bl	800dbec <memset>
 800fddc:	4628      	mov	r0, r5
 800fdde:	bd38      	pop	{r3, r4, r5, pc}

0800fde0 <_free_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4605      	mov	r5, r0
 800fde4:	2900      	cmp	r1, #0
 800fde6:	d045      	beq.n	800fe74 <_free_r+0x94>
 800fde8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdec:	1f0c      	subs	r4, r1, #4
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	bfb8      	it	lt
 800fdf2:	18e4      	addlt	r4, r4, r3
 800fdf4:	f000 fac3 	bl	801037e <__malloc_lock>
 800fdf8:	4a1f      	ldr	r2, [pc, #124]	; (800fe78 <_free_r+0x98>)
 800fdfa:	6813      	ldr	r3, [r2, #0]
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	b933      	cbnz	r3, 800fe0e <_free_r+0x2e>
 800fe00:	6063      	str	r3, [r4, #4]
 800fe02:	6014      	str	r4, [r2, #0]
 800fe04:	4628      	mov	r0, r5
 800fe06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe0a:	f000 bab9 	b.w	8010380 <__malloc_unlock>
 800fe0e:	42a3      	cmp	r3, r4
 800fe10:	d90c      	bls.n	800fe2c <_free_r+0x4c>
 800fe12:	6821      	ldr	r1, [r4, #0]
 800fe14:	1862      	adds	r2, r4, r1
 800fe16:	4293      	cmp	r3, r2
 800fe18:	bf04      	itt	eq
 800fe1a:	681a      	ldreq	r2, [r3, #0]
 800fe1c:	685b      	ldreq	r3, [r3, #4]
 800fe1e:	6063      	str	r3, [r4, #4]
 800fe20:	bf04      	itt	eq
 800fe22:	1852      	addeq	r2, r2, r1
 800fe24:	6022      	streq	r2, [r4, #0]
 800fe26:	6004      	str	r4, [r0, #0]
 800fe28:	e7ec      	b.n	800fe04 <_free_r+0x24>
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	b10a      	cbz	r2, 800fe34 <_free_r+0x54>
 800fe30:	42a2      	cmp	r2, r4
 800fe32:	d9fa      	bls.n	800fe2a <_free_r+0x4a>
 800fe34:	6819      	ldr	r1, [r3, #0]
 800fe36:	1858      	adds	r0, r3, r1
 800fe38:	42a0      	cmp	r0, r4
 800fe3a:	d10b      	bne.n	800fe54 <_free_r+0x74>
 800fe3c:	6820      	ldr	r0, [r4, #0]
 800fe3e:	4401      	add	r1, r0
 800fe40:	1858      	adds	r0, r3, r1
 800fe42:	4282      	cmp	r2, r0
 800fe44:	6019      	str	r1, [r3, #0]
 800fe46:	d1dd      	bne.n	800fe04 <_free_r+0x24>
 800fe48:	6810      	ldr	r0, [r2, #0]
 800fe4a:	6852      	ldr	r2, [r2, #4]
 800fe4c:	605a      	str	r2, [r3, #4]
 800fe4e:	4401      	add	r1, r0
 800fe50:	6019      	str	r1, [r3, #0]
 800fe52:	e7d7      	b.n	800fe04 <_free_r+0x24>
 800fe54:	d902      	bls.n	800fe5c <_free_r+0x7c>
 800fe56:	230c      	movs	r3, #12
 800fe58:	602b      	str	r3, [r5, #0]
 800fe5a:	e7d3      	b.n	800fe04 <_free_r+0x24>
 800fe5c:	6820      	ldr	r0, [r4, #0]
 800fe5e:	1821      	adds	r1, r4, r0
 800fe60:	428a      	cmp	r2, r1
 800fe62:	bf04      	itt	eq
 800fe64:	6811      	ldreq	r1, [r2, #0]
 800fe66:	6852      	ldreq	r2, [r2, #4]
 800fe68:	6062      	str	r2, [r4, #4]
 800fe6a:	bf04      	itt	eq
 800fe6c:	1809      	addeq	r1, r1, r0
 800fe6e:	6021      	streq	r1, [r4, #0]
 800fe70:	605c      	str	r4, [r3, #4]
 800fe72:	e7c7      	b.n	800fe04 <_free_r+0x24>
 800fe74:	bd38      	pop	{r3, r4, r5, pc}
 800fe76:	bf00      	nop
 800fe78:	20001f10 	.word	0x20001f10

0800fe7c <_malloc_r>:
 800fe7c:	b570      	push	{r4, r5, r6, lr}
 800fe7e:	1ccd      	adds	r5, r1, #3
 800fe80:	f025 0503 	bic.w	r5, r5, #3
 800fe84:	3508      	adds	r5, #8
 800fe86:	2d0c      	cmp	r5, #12
 800fe88:	bf38      	it	cc
 800fe8a:	250c      	movcc	r5, #12
 800fe8c:	2d00      	cmp	r5, #0
 800fe8e:	4606      	mov	r6, r0
 800fe90:	db01      	blt.n	800fe96 <_malloc_r+0x1a>
 800fe92:	42a9      	cmp	r1, r5
 800fe94:	d903      	bls.n	800fe9e <_malloc_r+0x22>
 800fe96:	230c      	movs	r3, #12
 800fe98:	6033      	str	r3, [r6, #0]
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	bd70      	pop	{r4, r5, r6, pc}
 800fe9e:	f000 fa6e 	bl	801037e <__malloc_lock>
 800fea2:	4a21      	ldr	r2, [pc, #132]	; (800ff28 <_malloc_r+0xac>)
 800fea4:	6814      	ldr	r4, [r2, #0]
 800fea6:	4621      	mov	r1, r4
 800fea8:	b991      	cbnz	r1, 800fed0 <_malloc_r+0x54>
 800feaa:	4c20      	ldr	r4, [pc, #128]	; (800ff2c <_malloc_r+0xb0>)
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	b91b      	cbnz	r3, 800feb8 <_malloc_r+0x3c>
 800feb0:	4630      	mov	r0, r6
 800feb2:	f000 f98f 	bl	80101d4 <_sbrk_r>
 800feb6:	6020      	str	r0, [r4, #0]
 800feb8:	4629      	mov	r1, r5
 800feba:	4630      	mov	r0, r6
 800febc:	f000 f98a 	bl	80101d4 <_sbrk_r>
 800fec0:	1c43      	adds	r3, r0, #1
 800fec2:	d124      	bne.n	800ff0e <_malloc_r+0x92>
 800fec4:	230c      	movs	r3, #12
 800fec6:	6033      	str	r3, [r6, #0]
 800fec8:	4630      	mov	r0, r6
 800feca:	f000 fa59 	bl	8010380 <__malloc_unlock>
 800fece:	e7e4      	b.n	800fe9a <_malloc_r+0x1e>
 800fed0:	680b      	ldr	r3, [r1, #0]
 800fed2:	1b5b      	subs	r3, r3, r5
 800fed4:	d418      	bmi.n	800ff08 <_malloc_r+0x8c>
 800fed6:	2b0b      	cmp	r3, #11
 800fed8:	d90f      	bls.n	800fefa <_malloc_r+0x7e>
 800feda:	600b      	str	r3, [r1, #0]
 800fedc:	50cd      	str	r5, [r1, r3]
 800fede:	18cc      	adds	r4, r1, r3
 800fee0:	4630      	mov	r0, r6
 800fee2:	f000 fa4d 	bl	8010380 <__malloc_unlock>
 800fee6:	f104 000b 	add.w	r0, r4, #11
 800feea:	1d23      	adds	r3, r4, #4
 800feec:	f020 0007 	bic.w	r0, r0, #7
 800fef0:	1ac3      	subs	r3, r0, r3
 800fef2:	d0d3      	beq.n	800fe9c <_malloc_r+0x20>
 800fef4:	425a      	negs	r2, r3
 800fef6:	50e2      	str	r2, [r4, r3]
 800fef8:	e7d0      	b.n	800fe9c <_malloc_r+0x20>
 800fefa:	428c      	cmp	r4, r1
 800fefc:	684b      	ldr	r3, [r1, #4]
 800fefe:	bf16      	itet	ne
 800ff00:	6063      	strne	r3, [r4, #4]
 800ff02:	6013      	streq	r3, [r2, #0]
 800ff04:	460c      	movne	r4, r1
 800ff06:	e7eb      	b.n	800fee0 <_malloc_r+0x64>
 800ff08:	460c      	mov	r4, r1
 800ff0a:	6849      	ldr	r1, [r1, #4]
 800ff0c:	e7cc      	b.n	800fea8 <_malloc_r+0x2c>
 800ff0e:	1cc4      	adds	r4, r0, #3
 800ff10:	f024 0403 	bic.w	r4, r4, #3
 800ff14:	42a0      	cmp	r0, r4
 800ff16:	d005      	beq.n	800ff24 <_malloc_r+0xa8>
 800ff18:	1a21      	subs	r1, r4, r0
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f000 f95a 	bl	80101d4 <_sbrk_r>
 800ff20:	3001      	adds	r0, #1
 800ff22:	d0cf      	beq.n	800fec4 <_malloc_r+0x48>
 800ff24:	6025      	str	r5, [r4, #0]
 800ff26:	e7db      	b.n	800fee0 <_malloc_r+0x64>
 800ff28:	20001f10 	.word	0x20001f10
 800ff2c:	20001f14 	.word	0x20001f14

0800ff30 <__ssputs_r>:
 800ff30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff34:	688e      	ldr	r6, [r1, #8]
 800ff36:	429e      	cmp	r6, r3
 800ff38:	4682      	mov	sl, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	4690      	mov	r8, r2
 800ff3e:	4699      	mov	r9, r3
 800ff40:	d837      	bhi.n	800ffb2 <__ssputs_r+0x82>
 800ff42:	898a      	ldrh	r2, [r1, #12]
 800ff44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff48:	d031      	beq.n	800ffae <__ssputs_r+0x7e>
 800ff4a:	6825      	ldr	r5, [r4, #0]
 800ff4c:	6909      	ldr	r1, [r1, #16]
 800ff4e:	1a6f      	subs	r7, r5, r1
 800ff50:	6965      	ldr	r5, [r4, #20]
 800ff52:	2302      	movs	r3, #2
 800ff54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff58:	fb95 f5f3 	sdiv	r5, r5, r3
 800ff5c:	f109 0301 	add.w	r3, r9, #1
 800ff60:	443b      	add	r3, r7
 800ff62:	429d      	cmp	r5, r3
 800ff64:	bf38      	it	cc
 800ff66:	461d      	movcc	r5, r3
 800ff68:	0553      	lsls	r3, r2, #21
 800ff6a:	d530      	bpl.n	800ffce <__ssputs_r+0x9e>
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	f7ff ff85 	bl	800fe7c <_malloc_r>
 800ff72:	4606      	mov	r6, r0
 800ff74:	b950      	cbnz	r0, 800ff8c <__ssputs_r+0x5c>
 800ff76:	230c      	movs	r3, #12
 800ff78:	f8ca 3000 	str.w	r3, [sl]
 800ff7c:	89a3      	ldrh	r3, [r4, #12]
 800ff7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff82:	81a3      	strh	r3, [r4, #12]
 800ff84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff8c:	463a      	mov	r2, r7
 800ff8e:	6921      	ldr	r1, [r4, #16]
 800ff90:	f7ff fc32 	bl	800f7f8 <memcpy>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff9e:	81a3      	strh	r3, [r4, #12]
 800ffa0:	6126      	str	r6, [r4, #16]
 800ffa2:	6165      	str	r5, [r4, #20]
 800ffa4:	443e      	add	r6, r7
 800ffa6:	1bed      	subs	r5, r5, r7
 800ffa8:	6026      	str	r6, [r4, #0]
 800ffaa:	60a5      	str	r5, [r4, #8]
 800ffac:	464e      	mov	r6, r9
 800ffae:	454e      	cmp	r6, r9
 800ffb0:	d900      	bls.n	800ffb4 <__ssputs_r+0x84>
 800ffb2:	464e      	mov	r6, r9
 800ffb4:	4632      	mov	r2, r6
 800ffb6:	4641      	mov	r1, r8
 800ffb8:	6820      	ldr	r0, [r4, #0]
 800ffba:	f000 f9c7 	bl	801034c <memmove>
 800ffbe:	68a3      	ldr	r3, [r4, #8]
 800ffc0:	1b9b      	subs	r3, r3, r6
 800ffc2:	60a3      	str	r3, [r4, #8]
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	441e      	add	r6, r3
 800ffc8:	6026      	str	r6, [r4, #0]
 800ffca:	2000      	movs	r0, #0
 800ffcc:	e7dc      	b.n	800ff88 <__ssputs_r+0x58>
 800ffce:	462a      	mov	r2, r5
 800ffd0:	f000 f9d7 	bl	8010382 <_realloc_r>
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d1e2      	bne.n	800ffa0 <__ssputs_r+0x70>
 800ffda:	6921      	ldr	r1, [r4, #16]
 800ffdc:	4650      	mov	r0, sl
 800ffde:	f7ff feff 	bl	800fde0 <_free_r>
 800ffe2:	e7c8      	b.n	800ff76 <__ssputs_r+0x46>

0800ffe4 <_svfiprintf_r>:
 800ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe8:	461d      	mov	r5, r3
 800ffea:	898b      	ldrh	r3, [r1, #12]
 800ffec:	061f      	lsls	r7, r3, #24
 800ffee:	b09d      	sub	sp, #116	; 0x74
 800fff0:	4680      	mov	r8, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	4616      	mov	r6, r2
 800fff6:	d50f      	bpl.n	8010018 <_svfiprintf_r+0x34>
 800fff8:	690b      	ldr	r3, [r1, #16]
 800fffa:	b96b      	cbnz	r3, 8010018 <_svfiprintf_r+0x34>
 800fffc:	2140      	movs	r1, #64	; 0x40
 800fffe:	f7ff ff3d 	bl	800fe7c <_malloc_r>
 8010002:	6020      	str	r0, [r4, #0]
 8010004:	6120      	str	r0, [r4, #16]
 8010006:	b928      	cbnz	r0, 8010014 <_svfiprintf_r+0x30>
 8010008:	230c      	movs	r3, #12
 801000a:	f8c8 3000 	str.w	r3, [r8]
 801000e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010012:	e0c8      	b.n	80101a6 <_svfiprintf_r+0x1c2>
 8010014:	2340      	movs	r3, #64	; 0x40
 8010016:	6163      	str	r3, [r4, #20]
 8010018:	2300      	movs	r3, #0
 801001a:	9309      	str	r3, [sp, #36]	; 0x24
 801001c:	2320      	movs	r3, #32
 801001e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010022:	2330      	movs	r3, #48	; 0x30
 8010024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010028:	9503      	str	r5, [sp, #12]
 801002a:	f04f 0b01 	mov.w	fp, #1
 801002e:	4637      	mov	r7, r6
 8010030:	463d      	mov	r5, r7
 8010032:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010036:	b10b      	cbz	r3, 801003c <_svfiprintf_r+0x58>
 8010038:	2b25      	cmp	r3, #37	; 0x25
 801003a:	d13e      	bne.n	80100ba <_svfiprintf_r+0xd6>
 801003c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010040:	d00b      	beq.n	801005a <_svfiprintf_r+0x76>
 8010042:	4653      	mov	r3, sl
 8010044:	4632      	mov	r2, r6
 8010046:	4621      	mov	r1, r4
 8010048:	4640      	mov	r0, r8
 801004a:	f7ff ff71 	bl	800ff30 <__ssputs_r>
 801004e:	3001      	adds	r0, #1
 8010050:	f000 80a4 	beq.w	801019c <_svfiprintf_r+0x1b8>
 8010054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010056:	4453      	add	r3, sl
 8010058:	9309      	str	r3, [sp, #36]	; 0x24
 801005a:	783b      	ldrb	r3, [r7, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 809d 	beq.w	801019c <_svfiprintf_r+0x1b8>
 8010062:	2300      	movs	r3, #0
 8010064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801006c:	9304      	str	r3, [sp, #16]
 801006e:	9307      	str	r3, [sp, #28]
 8010070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010074:	931a      	str	r3, [sp, #104]	; 0x68
 8010076:	462f      	mov	r7, r5
 8010078:	2205      	movs	r2, #5
 801007a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801007e:	4850      	ldr	r0, [pc, #320]	; (80101c0 <_svfiprintf_r+0x1dc>)
 8010080:	f7f0 f8d6 	bl	8000230 <memchr>
 8010084:	9b04      	ldr	r3, [sp, #16]
 8010086:	b9d0      	cbnz	r0, 80100be <_svfiprintf_r+0xda>
 8010088:	06d9      	lsls	r1, r3, #27
 801008a:	bf44      	itt	mi
 801008c:	2220      	movmi	r2, #32
 801008e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010092:	071a      	lsls	r2, r3, #28
 8010094:	bf44      	itt	mi
 8010096:	222b      	movmi	r2, #43	; 0x2b
 8010098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801009c:	782a      	ldrb	r2, [r5, #0]
 801009e:	2a2a      	cmp	r2, #42	; 0x2a
 80100a0:	d015      	beq.n	80100ce <_svfiprintf_r+0xea>
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	462f      	mov	r7, r5
 80100a6:	2000      	movs	r0, #0
 80100a8:	250a      	movs	r5, #10
 80100aa:	4639      	mov	r1, r7
 80100ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100b0:	3b30      	subs	r3, #48	; 0x30
 80100b2:	2b09      	cmp	r3, #9
 80100b4:	d94d      	bls.n	8010152 <_svfiprintf_r+0x16e>
 80100b6:	b1b8      	cbz	r0, 80100e8 <_svfiprintf_r+0x104>
 80100b8:	e00f      	b.n	80100da <_svfiprintf_r+0xf6>
 80100ba:	462f      	mov	r7, r5
 80100bc:	e7b8      	b.n	8010030 <_svfiprintf_r+0x4c>
 80100be:	4a40      	ldr	r2, [pc, #256]	; (80101c0 <_svfiprintf_r+0x1dc>)
 80100c0:	1a80      	subs	r0, r0, r2
 80100c2:	fa0b f000 	lsl.w	r0, fp, r0
 80100c6:	4318      	orrs	r0, r3
 80100c8:	9004      	str	r0, [sp, #16]
 80100ca:	463d      	mov	r5, r7
 80100cc:	e7d3      	b.n	8010076 <_svfiprintf_r+0x92>
 80100ce:	9a03      	ldr	r2, [sp, #12]
 80100d0:	1d11      	adds	r1, r2, #4
 80100d2:	6812      	ldr	r2, [r2, #0]
 80100d4:	9103      	str	r1, [sp, #12]
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	db01      	blt.n	80100de <_svfiprintf_r+0xfa>
 80100da:	9207      	str	r2, [sp, #28]
 80100dc:	e004      	b.n	80100e8 <_svfiprintf_r+0x104>
 80100de:	4252      	negs	r2, r2
 80100e0:	f043 0302 	orr.w	r3, r3, #2
 80100e4:	9207      	str	r2, [sp, #28]
 80100e6:	9304      	str	r3, [sp, #16]
 80100e8:	783b      	ldrb	r3, [r7, #0]
 80100ea:	2b2e      	cmp	r3, #46	; 0x2e
 80100ec:	d10c      	bne.n	8010108 <_svfiprintf_r+0x124>
 80100ee:	787b      	ldrb	r3, [r7, #1]
 80100f0:	2b2a      	cmp	r3, #42	; 0x2a
 80100f2:	d133      	bne.n	801015c <_svfiprintf_r+0x178>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	1d1a      	adds	r2, r3, #4
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9203      	str	r2, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfb8      	it	lt
 8010100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010104:	3702      	adds	r7, #2
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	4d2e      	ldr	r5, [pc, #184]	; (80101c4 <_svfiprintf_r+0x1e0>)
 801010a:	7839      	ldrb	r1, [r7, #0]
 801010c:	2203      	movs	r2, #3
 801010e:	4628      	mov	r0, r5
 8010110:	f7f0 f88e 	bl	8000230 <memchr>
 8010114:	b138      	cbz	r0, 8010126 <_svfiprintf_r+0x142>
 8010116:	2340      	movs	r3, #64	; 0x40
 8010118:	1b40      	subs	r0, r0, r5
 801011a:	fa03 f000 	lsl.w	r0, r3, r0
 801011e:	9b04      	ldr	r3, [sp, #16]
 8010120:	4303      	orrs	r3, r0
 8010122:	3701      	adds	r7, #1
 8010124:	9304      	str	r3, [sp, #16]
 8010126:	7839      	ldrb	r1, [r7, #0]
 8010128:	4827      	ldr	r0, [pc, #156]	; (80101c8 <_svfiprintf_r+0x1e4>)
 801012a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801012e:	2206      	movs	r2, #6
 8010130:	1c7e      	adds	r6, r7, #1
 8010132:	f7f0 f87d 	bl	8000230 <memchr>
 8010136:	2800      	cmp	r0, #0
 8010138:	d038      	beq.n	80101ac <_svfiprintf_r+0x1c8>
 801013a:	4b24      	ldr	r3, [pc, #144]	; (80101cc <_svfiprintf_r+0x1e8>)
 801013c:	bb13      	cbnz	r3, 8010184 <_svfiprintf_r+0x1a0>
 801013e:	9b03      	ldr	r3, [sp, #12]
 8010140:	3307      	adds	r3, #7
 8010142:	f023 0307 	bic.w	r3, r3, #7
 8010146:	3308      	adds	r3, #8
 8010148:	9303      	str	r3, [sp, #12]
 801014a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014c:	444b      	add	r3, r9
 801014e:	9309      	str	r3, [sp, #36]	; 0x24
 8010150:	e76d      	b.n	801002e <_svfiprintf_r+0x4a>
 8010152:	fb05 3202 	mla	r2, r5, r2, r3
 8010156:	2001      	movs	r0, #1
 8010158:	460f      	mov	r7, r1
 801015a:	e7a6      	b.n	80100aa <_svfiprintf_r+0xc6>
 801015c:	2300      	movs	r3, #0
 801015e:	3701      	adds	r7, #1
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	4619      	mov	r1, r3
 8010164:	250a      	movs	r5, #10
 8010166:	4638      	mov	r0, r7
 8010168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801016c:	3a30      	subs	r2, #48	; 0x30
 801016e:	2a09      	cmp	r2, #9
 8010170:	d903      	bls.n	801017a <_svfiprintf_r+0x196>
 8010172:	2b00      	cmp	r3, #0
 8010174:	d0c8      	beq.n	8010108 <_svfiprintf_r+0x124>
 8010176:	9105      	str	r1, [sp, #20]
 8010178:	e7c6      	b.n	8010108 <_svfiprintf_r+0x124>
 801017a:	fb05 2101 	mla	r1, r5, r1, r2
 801017e:	2301      	movs	r3, #1
 8010180:	4607      	mov	r7, r0
 8010182:	e7f0      	b.n	8010166 <_svfiprintf_r+0x182>
 8010184:	ab03      	add	r3, sp, #12
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	4622      	mov	r2, r4
 801018a:	4b11      	ldr	r3, [pc, #68]	; (80101d0 <_svfiprintf_r+0x1ec>)
 801018c:	a904      	add	r1, sp, #16
 801018e:	4640      	mov	r0, r8
 8010190:	f7fd fdc8 	bl	800dd24 <_printf_float>
 8010194:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010198:	4681      	mov	r9, r0
 801019a:	d1d6      	bne.n	801014a <_svfiprintf_r+0x166>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	065b      	lsls	r3, r3, #25
 80101a0:	f53f af35 	bmi.w	801000e <_svfiprintf_r+0x2a>
 80101a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101a6:	b01d      	add	sp, #116	; 0x74
 80101a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ac:	ab03      	add	r3, sp, #12
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4622      	mov	r2, r4
 80101b2:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <_svfiprintf_r+0x1ec>)
 80101b4:	a904      	add	r1, sp, #16
 80101b6:	4640      	mov	r0, r8
 80101b8:	f7fe f86a 	bl	800e290 <_printf_i>
 80101bc:	e7ea      	b.n	8010194 <_svfiprintf_r+0x1b0>
 80101be:	bf00      	nop
 80101c0:	08012d64 	.word	0x08012d64
 80101c4:	08012d6a 	.word	0x08012d6a
 80101c8:	08012d6e 	.word	0x08012d6e
 80101cc:	0800dd25 	.word	0x0800dd25
 80101d0:	0800ff31 	.word	0x0800ff31

080101d4 <_sbrk_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4c06      	ldr	r4, [pc, #24]	; (80101f0 <_sbrk_r+0x1c>)
 80101d8:	2300      	movs	r3, #0
 80101da:	4605      	mov	r5, r0
 80101dc:	4608      	mov	r0, r1
 80101de:	6023      	str	r3, [r4, #0]
 80101e0:	f7f7 f828 	bl	8007234 <_sbrk>
 80101e4:	1c43      	adds	r3, r0, #1
 80101e6:	d102      	bne.n	80101ee <_sbrk_r+0x1a>
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	b103      	cbz	r3, 80101ee <_sbrk_r+0x1a>
 80101ec:	602b      	str	r3, [r5, #0]
 80101ee:	bd38      	pop	{r3, r4, r5, pc}
 80101f0:	20002948 	.word	0x20002948

080101f4 <__sread>:
 80101f4:	b510      	push	{r4, lr}
 80101f6:	460c      	mov	r4, r1
 80101f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101fc:	f000 f8e8 	bl	80103d0 <_read_r>
 8010200:	2800      	cmp	r0, #0
 8010202:	bfab      	itete	ge
 8010204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010206:	89a3      	ldrhlt	r3, [r4, #12]
 8010208:	181b      	addge	r3, r3, r0
 801020a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801020e:	bfac      	ite	ge
 8010210:	6563      	strge	r3, [r4, #84]	; 0x54
 8010212:	81a3      	strhlt	r3, [r4, #12]
 8010214:	bd10      	pop	{r4, pc}

08010216 <__swrite>:
 8010216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801021a:	461f      	mov	r7, r3
 801021c:	898b      	ldrh	r3, [r1, #12]
 801021e:	05db      	lsls	r3, r3, #23
 8010220:	4605      	mov	r5, r0
 8010222:	460c      	mov	r4, r1
 8010224:	4616      	mov	r6, r2
 8010226:	d505      	bpl.n	8010234 <__swrite+0x1e>
 8010228:	2302      	movs	r3, #2
 801022a:	2200      	movs	r2, #0
 801022c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010230:	f000 f868 	bl	8010304 <_lseek_r>
 8010234:	89a3      	ldrh	r3, [r4, #12]
 8010236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801023a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	4632      	mov	r2, r6
 8010242:	463b      	mov	r3, r7
 8010244:	4628      	mov	r0, r5
 8010246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801024a:	f000 b817 	b.w	801027c <_write_r>

0801024e <__sseek>:
 801024e:	b510      	push	{r4, lr}
 8010250:	460c      	mov	r4, r1
 8010252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010256:	f000 f855 	bl	8010304 <_lseek_r>
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	bf15      	itete	ne
 8010260:	6560      	strne	r0, [r4, #84]	; 0x54
 8010262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801026a:	81a3      	strheq	r3, [r4, #12]
 801026c:	bf18      	it	ne
 801026e:	81a3      	strhne	r3, [r4, #12]
 8010270:	bd10      	pop	{r4, pc}

08010272 <__sclose>:
 8010272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010276:	f000 b813 	b.w	80102a0 <_close_r>
	...

0801027c <_write_r>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4c07      	ldr	r4, [pc, #28]	; (801029c <_write_r+0x20>)
 8010280:	4605      	mov	r5, r0
 8010282:	4608      	mov	r0, r1
 8010284:	4611      	mov	r1, r2
 8010286:	2200      	movs	r2, #0
 8010288:	6022      	str	r2, [r4, #0]
 801028a:	461a      	mov	r2, r3
 801028c:	f7f6 fca9 	bl	8006be2 <_write>
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d102      	bne.n	801029a <_write_r+0x1e>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	b103      	cbz	r3, 801029a <_write_r+0x1e>
 8010298:	602b      	str	r3, [r5, #0]
 801029a:	bd38      	pop	{r3, r4, r5, pc}
 801029c:	20002948 	.word	0x20002948

080102a0 <_close_r>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4c06      	ldr	r4, [pc, #24]	; (80102bc <_close_r+0x1c>)
 80102a4:	2300      	movs	r3, #0
 80102a6:	4605      	mov	r5, r0
 80102a8:	4608      	mov	r0, r1
 80102aa:	6023      	str	r3, [r4, #0]
 80102ac:	f7f6 ff8d 	bl	80071ca <_close>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	d102      	bne.n	80102ba <_close_r+0x1a>
 80102b4:	6823      	ldr	r3, [r4, #0]
 80102b6:	b103      	cbz	r3, 80102ba <_close_r+0x1a>
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	20002948 	.word	0x20002948

080102c0 <_fstat_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4c07      	ldr	r4, [pc, #28]	; (80102e0 <_fstat_r+0x20>)
 80102c4:	2300      	movs	r3, #0
 80102c6:	4605      	mov	r5, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	4611      	mov	r1, r2
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	f7f6 ff88 	bl	80071e2 <_fstat>
 80102d2:	1c43      	adds	r3, r0, #1
 80102d4:	d102      	bne.n	80102dc <_fstat_r+0x1c>
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	b103      	cbz	r3, 80102dc <_fstat_r+0x1c>
 80102da:	602b      	str	r3, [r5, #0]
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
 80102de:	bf00      	nop
 80102e0:	20002948 	.word	0x20002948

080102e4 <_isatty_r>:
 80102e4:	b538      	push	{r3, r4, r5, lr}
 80102e6:	4c06      	ldr	r4, [pc, #24]	; (8010300 <_isatty_r+0x1c>)
 80102e8:	2300      	movs	r3, #0
 80102ea:	4605      	mov	r5, r0
 80102ec:	4608      	mov	r0, r1
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	f7f6 ff87 	bl	8007202 <_isatty>
 80102f4:	1c43      	adds	r3, r0, #1
 80102f6:	d102      	bne.n	80102fe <_isatty_r+0x1a>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	b103      	cbz	r3, 80102fe <_isatty_r+0x1a>
 80102fc:	602b      	str	r3, [r5, #0]
 80102fe:	bd38      	pop	{r3, r4, r5, pc}
 8010300:	20002948 	.word	0x20002948

08010304 <_lseek_r>:
 8010304:	b538      	push	{r3, r4, r5, lr}
 8010306:	4c07      	ldr	r4, [pc, #28]	; (8010324 <_lseek_r+0x20>)
 8010308:	4605      	mov	r5, r0
 801030a:	4608      	mov	r0, r1
 801030c:	4611      	mov	r1, r2
 801030e:	2200      	movs	r2, #0
 8010310:	6022      	str	r2, [r4, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	f7f6 ff80 	bl	8007218 <_lseek>
 8010318:	1c43      	adds	r3, r0, #1
 801031a:	d102      	bne.n	8010322 <_lseek_r+0x1e>
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	b103      	cbz	r3, 8010322 <_lseek_r+0x1e>
 8010320:	602b      	str	r3, [r5, #0]
 8010322:	bd38      	pop	{r3, r4, r5, pc}
 8010324:	20002948 	.word	0x20002948

08010328 <__ascii_mbtowc>:
 8010328:	b082      	sub	sp, #8
 801032a:	b901      	cbnz	r1, 801032e <__ascii_mbtowc+0x6>
 801032c:	a901      	add	r1, sp, #4
 801032e:	b142      	cbz	r2, 8010342 <__ascii_mbtowc+0x1a>
 8010330:	b14b      	cbz	r3, 8010346 <__ascii_mbtowc+0x1e>
 8010332:	7813      	ldrb	r3, [r2, #0]
 8010334:	600b      	str	r3, [r1, #0]
 8010336:	7812      	ldrb	r2, [r2, #0]
 8010338:	1c10      	adds	r0, r2, #0
 801033a:	bf18      	it	ne
 801033c:	2001      	movne	r0, #1
 801033e:	b002      	add	sp, #8
 8010340:	4770      	bx	lr
 8010342:	4610      	mov	r0, r2
 8010344:	e7fb      	b.n	801033e <__ascii_mbtowc+0x16>
 8010346:	f06f 0001 	mvn.w	r0, #1
 801034a:	e7f8      	b.n	801033e <__ascii_mbtowc+0x16>

0801034c <memmove>:
 801034c:	4288      	cmp	r0, r1
 801034e:	b510      	push	{r4, lr}
 8010350:	eb01 0302 	add.w	r3, r1, r2
 8010354:	d807      	bhi.n	8010366 <memmove+0x1a>
 8010356:	1e42      	subs	r2, r0, #1
 8010358:	4299      	cmp	r1, r3
 801035a:	d00a      	beq.n	8010372 <memmove+0x26>
 801035c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010360:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010364:	e7f8      	b.n	8010358 <memmove+0xc>
 8010366:	4283      	cmp	r3, r0
 8010368:	d9f5      	bls.n	8010356 <memmove+0xa>
 801036a:	1881      	adds	r1, r0, r2
 801036c:	1ad2      	subs	r2, r2, r3
 801036e:	42d3      	cmn	r3, r2
 8010370:	d100      	bne.n	8010374 <memmove+0x28>
 8010372:	bd10      	pop	{r4, pc}
 8010374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010378:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801037c:	e7f7      	b.n	801036e <memmove+0x22>

0801037e <__malloc_lock>:
 801037e:	4770      	bx	lr

08010380 <__malloc_unlock>:
 8010380:	4770      	bx	lr

08010382 <_realloc_r>:
 8010382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010384:	4607      	mov	r7, r0
 8010386:	4614      	mov	r4, r2
 8010388:	460e      	mov	r6, r1
 801038a:	b921      	cbnz	r1, 8010396 <_realloc_r+0x14>
 801038c:	4611      	mov	r1, r2
 801038e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010392:	f7ff bd73 	b.w	800fe7c <_malloc_r>
 8010396:	b922      	cbnz	r2, 80103a2 <_realloc_r+0x20>
 8010398:	f7ff fd22 	bl	800fde0 <_free_r>
 801039c:	4625      	mov	r5, r4
 801039e:	4628      	mov	r0, r5
 80103a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a2:	f000 f834 	bl	801040e <_malloc_usable_size_r>
 80103a6:	42a0      	cmp	r0, r4
 80103a8:	d20f      	bcs.n	80103ca <_realloc_r+0x48>
 80103aa:	4621      	mov	r1, r4
 80103ac:	4638      	mov	r0, r7
 80103ae:	f7ff fd65 	bl	800fe7c <_malloc_r>
 80103b2:	4605      	mov	r5, r0
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d0f2      	beq.n	801039e <_realloc_r+0x1c>
 80103b8:	4631      	mov	r1, r6
 80103ba:	4622      	mov	r2, r4
 80103bc:	f7ff fa1c 	bl	800f7f8 <memcpy>
 80103c0:	4631      	mov	r1, r6
 80103c2:	4638      	mov	r0, r7
 80103c4:	f7ff fd0c 	bl	800fde0 <_free_r>
 80103c8:	e7e9      	b.n	801039e <_realloc_r+0x1c>
 80103ca:	4635      	mov	r5, r6
 80103cc:	e7e7      	b.n	801039e <_realloc_r+0x1c>
	...

080103d0 <_read_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4c07      	ldr	r4, [pc, #28]	; (80103f0 <_read_r+0x20>)
 80103d4:	4605      	mov	r5, r0
 80103d6:	4608      	mov	r0, r1
 80103d8:	4611      	mov	r1, r2
 80103da:	2200      	movs	r2, #0
 80103dc:	6022      	str	r2, [r4, #0]
 80103de:	461a      	mov	r2, r3
 80103e0:	f7f6 fed6 	bl	8007190 <_read>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_read_r+0x1e>
 80103e8:	6823      	ldr	r3, [r4, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_read_r+0x1e>
 80103ec:	602b      	str	r3, [r5, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	20002948 	.word	0x20002948

080103f4 <__ascii_wctomb>:
 80103f4:	b149      	cbz	r1, 801040a <__ascii_wctomb+0x16>
 80103f6:	2aff      	cmp	r2, #255	; 0xff
 80103f8:	bf85      	ittet	hi
 80103fa:	238a      	movhi	r3, #138	; 0x8a
 80103fc:	6003      	strhi	r3, [r0, #0]
 80103fe:	700a      	strbls	r2, [r1, #0]
 8010400:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010404:	bf98      	it	ls
 8010406:	2001      	movls	r0, #1
 8010408:	4770      	bx	lr
 801040a:	4608      	mov	r0, r1
 801040c:	4770      	bx	lr

0801040e <_malloc_usable_size_r>:
 801040e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010412:	1f18      	subs	r0, r3, #4
 8010414:	2b00      	cmp	r3, #0
 8010416:	bfbc      	itt	lt
 8010418:	580b      	ldrlt	r3, [r1, r0]
 801041a:	18c0      	addlt	r0, r0, r3
 801041c:	4770      	bx	lr
	...

08010420 <log10>:
 8010420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010422:	ed2d 8b02 	vpush	{d8}
 8010426:	b08b      	sub	sp, #44	; 0x2c
 8010428:	ec55 4b10 	vmov	r4, r5, d0
 801042c:	f000 f9e8 	bl	8010800 <__ieee754_log10>
 8010430:	4b36      	ldr	r3, [pc, #216]	; (801050c <log10+0xec>)
 8010432:	eeb0 8a40 	vmov.f32	s16, s0
 8010436:	eef0 8a60 	vmov.f32	s17, s1
 801043a:	f993 6000 	ldrsb.w	r6, [r3]
 801043e:	1c73      	adds	r3, r6, #1
 8010440:	d05c      	beq.n	80104fc <log10+0xdc>
 8010442:	4622      	mov	r2, r4
 8010444:	462b      	mov	r3, r5
 8010446:	4620      	mov	r0, r4
 8010448:	4629      	mov	r1, r5
 801044a:	f7f0 fb97 	bl	8000b7c <__aeabi_dcmpun>
 801044e:	4607      	mov	r7, r0
 8010450:	2800      	cmp	r0, #0
 8010452:	d153      	bne.n	80104fc <log10+0xdc>
 8010454:	2200      	movs	r2, #0
 8010456:	2300      	movs	r3, #0
 8010458:	4620      	mov	r0, r4
 801045a:	4629      	mov	r1, r5
 801045c:	f7f0 fb70 	bl	8000b40 <__aeabi_dcmple>
 8010460:	2800      	cmp	r0, #0
 8010462:	d04b      	beq.n	80104fc <log10+0xdc>
 8010464:	4b2a      	ldr	r3, [pc, #168]	; (8010510 <log10+0xf0>)
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	9708      	str	r7, [sp, #32]
 801046a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801046e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010472:	b9a6      	cbnz	r6, 801049e <log10+0x7e>
 8010474:	4b27      	ldr	r3, [pc, #156]	; (8010514 <log10+0xf4>)
 8010476:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801047a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801047e:	4620      	mov	r0, r4
 8010480:	2200      	movs	r2, #0
 8010482:	2300      	movs	r3, #0
 8010484:	4629      	mov	r1, r5
 8010486:	f7f0 fb47 	bl	8000b18 <__aeabi_dcmpeq>
 801048a:	bb40      	cbnz	r0, 80104de <log10+0xbe>
 801048c:	2301      	movs	r3, #1
 801048e:	2e02      	cmp	r6, #2
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	d119      	bne.n	80104c8 <log10+0xa8>
 8010494:	f7fd fb80 	bl	800db98 <__errno>
 8010498:	2321      	movs	r3, #33	; 0x21
 801049a:	6003      	str	r3, [r0, #0]
 801049c:	e019      	b.n	80104d2 <log10+0xb2>
 801049e:	4b1e      	ldr	r3, [pc, #120]	; (8010518 <log10+0xf8>)
 80104a0:	2200      	movs	r2, #0
 80104a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104a6:	4620      	mov	r0, r4
 80104a8:	2200      	movs	r2, #0
 80104aa:	2300      	movs	r3, #0
 80104ac:	4629      	mov	r1, r5
 80104ae:	f7f0 fb33 	bl	8000b18 <__aeabi_dcmpeq>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d0ea      	beq.n	801048c <log10+0x6c>
 80104b6:	2302      	movs	r3, #2
 80104b8:	429e      	cmp	r6, r3
 80104ba:	9300      	str	r3, [sp, #0]
 80104bc:	d111      	bne.n	80104e2 <log10+0xc2>
 80104be:	f7fd fb6b 	bl	800db98 <__errno>
 80104c2:	2322      	movs	r3, #34	; 0x22
 80104c4:	6003      	str	r3, [r0, #0]
 80104c6:	e011      	b.n	80104ec <log10+0xcc>
 80104c8:	4668      	mov	r0, sp
 80104ca:	f000 fff4 	bl	80114b6 <matherr>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d0e0      	beq.n	8010494 <log10+0x74>
 80104d2:	4812      	ldr	r0, [pc, #72]	; (801051c <log10+0xfc>)
 80104d4:	f000 fff4 	bl	80114c0 <nan>
 80104d8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80104dc:	e006      	b.n	80104ec <log10+0xcc>
 80104de:	2302      	movs	r3, #2
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	4668      	mov	r0, sp
 80104e4:	f000 ffe7 	bl	80114b6 <matherr>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d0e8      	beq.n	80104be <log10+0x9e>
 80104ec:	9b08      	ldr	r3, [sp, #32]
 80104ee:	b11b      	cbz	r3, 80104f8 <log10+0xd8>
 80104f0:	f7fd fb52 	bl	800db98 <__errno>
 80104f4:	9b08      	ldr	r3, [sp, #32]
 80104f6:	6003      	str	r3, [r0, #0]
 80104f8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80104fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010500:	eef0 0a68 	vmov.f32	s1, s17
 8010504:	b00b      	add	sp, #44	; 0x2c
 8010506:	ecbd 8b02 	vpop	{d8}
 801050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801050c:	20001e7c 	.word	0x20001e7c
 8010510:	08012e80 	.word	0x08012e80
 8010514:	c7efffff 	.word	0xc7efffff
 8010518:	fff00000 	.word	0xfff00000
 801051c:	08012d69 	.word	0x08012d69

08010520 <pow>:
 8010520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010524:	ed2d 8b04 	vpush	{d8-d9}
 8010528:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80107fc <pow+0x2dc>
 801052c:	b08d      	sub	sp, #52	; 0x34
 801052e:	ec57 6b10 	vmov	r6, r7, d0
 8010532:	ec55 4b11 	vmov	r4, r5, d1
 8010536:	f000 f9ef 	bl	8010918 <__ieee754_pow>
 801053a:	f999 3000 	ldrsb.w	r3, [r9]
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	3301      	adds	r3, #1
 8010542:	eeb0 8a40 	vmov.f32	s16, s0
 8010546:	eef0 8a60 	vmov.f32	s17, s1
 801054a:	46c8      	mov	r8, r9
 801054c:	d05f      	beq.n	801060e <pow+0xee>
 801054e:	4622      	mov	r2, r4
 8010550:	462b      	mov	r3, r5
 8010552:	4620      	mov	r0, r4
 8010554:	4629      	mov	r1, r5
 8010556:	f7f0 fb11 	bl	8000b7c <__aeabi_dcmpun>
 801055a:	4683      	mov	fp, r0
 801055c:	2800      	cmp	r0, #0
 801055e:	d156      	bne.n	801060e <pow+0xee>
 8010560:	4632      	mov	r2, r6
 8010562:	463b      	mov	r3, r7
 8010564:	4630      	mov	r0, r6
 8010566:	4639      	mov	r1, r7
 8010568:	f7f0 fb08 	bl	8000b7c <__aeabi_dcmpun>
 801056c:	9001      	str	r0, [sp, #4]
 801056e:	b1e8      	cbz	r0, 80105ac <pow+0x8c>
 8010570:	2200      	movs	r2, #0
 8010572:	2300      	movs	r3, #0
 8010574:	4620      	mov	r0, r4
 8010576:	4629      	mov	r1, r5
 8010578:	f7f0 face 	bl	8000b18 <__aeabi_dcmpeq>
 801057c:	2800      	cmp	r0, #0
 801057e:	d046      	beq.n	801060e <pow+0xee>
 8010580:	2301      	movs	r3, #1
 8010582:	9302      	str	r3, [sp, #8]
 8010584:	4b96      	ldr	r3, [pc, #600]	; (80107e0 <pow+0x2c0>)
 8010586:	9303      	str	r3, [sp, #12]
 8010588:	4b96      	ldr	r3, [pc, #600]	; (80107e4 <pow+0x2c4>)
 801058a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801058e:	2200      	movs	r2, #0
 8010590:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010594:	9b00      	ldr	r3, [sp, #0]
 8010596:	2b02      	cmp	r3, #2
 8010598:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801059c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80105a0:	d033      	beq.n	801060a <pow+0xea>
 80105a2:	a802      	add	r0, sp, #8
 80105a4:	f000 ff87 	bl	80114b6 <matherr>
 80105a8:	bb48      	cbnz	r0, 80105fe <pow+0xde>
 80105aa:	e05d      	b.n	8010668 <pow+0x148>
 80105ac:	f04f 0a00 	mov.w	sl, #0
 80105b0:	f04f 0b00 	mov.w	fp, #0
 80105b4:	4652      	mov	r2, sl
 80105b6:	465b      	mov	r3, fp
 80105b8:	4630      	mov	r0, r6
 80105ba:	4639      	mov	r1, r7
 80105bc:	f7f0 faac 	bl	8000b18 <__aeabi_dcmpeq>
 80105c0:	ec4b ab19 	vmov	d9, sl, fp
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d054      	beq.n	8010672 <pow+0x152>
 80105c8:	4652      	mov	r2, sl
 80105ca:	465b      	mov	r3, fp
 80105cc:	4620      	mov	r0, r4
 80105ce:	4629      	mov	r1, r5
 80105d0:	f7f0 faa2 	bl	8000b18 <__aeabi_dcmpeq>
 80105d4:	4680      	mov	r8, r0
 80105d6:	b318      	cbz	r0, 8010620 <pow+0x100>
 80105d8:	2301      	movs	r3, #1
 80105da:	9302      	str	r3, [sp, #8]
 80105dc:	4b80      	ldr	r3, [pc, #512]	; (80107e0 <pow+0x2c0>)
 80105de:	9303      	str	r3, [sp, #12]
 80105e0:	9b01      	ldr	r3, [sp, #4]
 80105e2:	930a      	str	r3, [sp, #40]	; 0x28
 80105e4:	9b00      	ldr	r3, [sp, #0]
 80105e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80105ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80105ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d0d5      	beq.n	80105a2 <pow+0x82>
 80105f6:	4b7b      	ldr	r3, [pc, #492]	; (80107e4 <pow+0x2c4>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80105fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010600:	b11b      	cbz	r3, 801060a <pow+0xea>
 8010602:	f7fd fac9 	bl	800db98 <__errno>
 8010606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010608:	6003      	str	r3, [r0, #0]
 801060a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801060e:	eeb0 0a48 	vmov.f32	s0, s16
 8010612:	eef0 0a68 	vmov.f32	s1, s17
 8010616:	b00d      	add	sp, #52	; 0x34
 8010618:	ecbd 8b04 	vpop	{d8-d9}
 801061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010620:	ec45 4b10 	vmov	d0, r4, r5
 8010624:	f000 ff3f 	bl	80114a6 <finite>
 8010628:	2800      	cmp	r0, #0
 801062a:	d0f0      	beq.n	801060e <pow+0xee>
 801062c:	4652      	mov	r2, sl
 801062e:	465b      	mov	r3, fp
 8010630:	4620      	mov	r0, r4
 8010632:	4629      	mov	r1, r5
 8010634:	f7f0 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8010638:	2800      	cmp	r0, #0
 801063a:	d0e8      	beq.n	801060e <pow+0xee>
 801063c:	2301      	movs	r3, #1
 801063e:	9302      	str	r3, [sp, #8]
 8010640:	4b67      	ldr	r3, [pc, #412]	; (80107e0 <pow+0x2c0>)
 8010642:	9303      	str	r3, [sp, #12]
 8010644:	f999 3000 	ldrsb.w	r3, [r9]
 8010648:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801064c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010650:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010654:	b913      	cbnz	r3, 801065c <pow+0x13c>
 8010656:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801065a:	e7a2      	b.n	80105a2 <pow+0x82>
 801065c:	4962      	ldr	r1, [pc, #392]	; (80107e8 <pow+0x2c8>)
 801065e:	2000      	movs	r0, #0
 8010660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010664:	2b02      	cmp	r3, #2
 8010666:	d19c      	bne.n	80105a2 <pow+0x82>
 8010668:	f7fd fa96 	bl	800db98 <__errno>
 801066c:	2321      	movs	r3, #33	; 0x21
 801066e:	6003      	str	r3, [r0, #0]
 8010670:	e7c5      	b.n	80105fe <pow+0xde>
 8010672:	eeb0 0a48 	vmov.f32	s0, s16
 8010676:	eef0 0a68 	vmov.f32	s1, s17
 801067a:	f000 ff14 	bl	80114a6 <finite>
 801067e:	9000      	str	r0, [sp, #0]
 8010680:	2800      	cmp	r0, #0
 8010682:	f040 8081 	bne.w	8010788 <pow+0x268>
 8010686:	ec47 6b10 	vmov	d0, r6, r7
 801068a:	f000 ff0c 	bl	80114a6 <finite>
 801068e:	2800      	cmp	r0, #0
 8010690:	d07a      	beq.n	8010788 <pow+0x268>
 8010692:	ec45 4b10 	vmov	d0, r4, r5
 8010696:	f000 ff06 	bl	80114a6 <finite>
 801069a:	2800      	cmp	r0, #0
 801069c:	d074      	beq.n	8010788 <pow+0x268>
 801069e:	ec53 2b18 	vmov	r2, r3, d8
 80106a2:	ee18 0a10 	vmov	r0, s16
 80106a6:	4619      	mov	r1, r3
 80106a8:	f7f0 fa68 	bl	8000b7c <__aeabi_dcmpun>
 80106ac:	f999 9000 	ldrsb.w	r9, [r9]
 80106b0:	4b4b      	ldr	r3, [pc, #300]	; (80107e0 <pow+0x2c0>)
 80106b2:	b1b0      	cbz	r0, 80106e2 <pow+0x1c2>
 80106b4:	2201      	movs	r2, #1
 80106b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106ba:	9b00      	ldr	r3, [sp, #0]
 80106bc:	930a      	str	r3, [sp, #40]	; 0x28
 80106be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80106c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80106c6:	f1b9 0f00 	cmp.w	r9, #0
 80106ca:	d0c4      	beq.n	8010656 <pow+0x136>
 80106cc:	4652      	mov	r2, sl
 80106ce:	465b      	mov	r3, fp
 80106d0:	4650      	mov	r0, sl
 80106d2:	4659      	mov	r1, fp
 80106d4:	f7f0 f8e2 	bl	800089c <__aeabi_ddiv>
 80106d8:	f1b9 0f02 	cmp.w	r9, #2
 80106dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80106e0:	e7c1      	b.n	8010666 <pow+0x146>
 80106e2:	2203      	movs	r2, #3
 80106e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106e8:	900a      	str	r0, [sp, #40]	; 0x28
 80106ea:	4629      	mov	r1, r5
 80106ec:	4620      	mov	r0, r4
 80106ee:	2200      	movs	r2, #0
 80106f0:	4b3e      	ldr	r3, [pc, #248]	; (80107ec <pow+0x2cc>)
 80106f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80106f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80106fa:	f7ef ffa5 	bl	8000648 <__aeabi_dmul>
 80106fe:	4604      	mov	r4, r0
 8010700:	460d      	mov	r5, r1
 8010702:	f1b9 0f00 	cmp.w	r9, #0
 8010706:	d124      	bne.n	8010752 <pow+0x232>
 8010708:	4b39      	ldr	r3, [pc, #228]	; (80107f0 <pow+0x2d0>)
 801070a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801070e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010712:	4630      	mov	r0, r6
 8010714:	4652      	mov	r2, sl
 8010716:	465b      	mov	r3, fp
 8010718:	4639      	mov	r1, r7
 801071a:	f7f0 fa07 	bl	8000b2c <__aeabi_dcmplt>
 801071e:	2800      	cmp	r0, #0
 8010720:	d056      	beq.n	80107d0 <pow+0x2b0>
 8010722:	ec45 4b10 	vmov	d0, r4, r5
 8010726:	f000 fed3 	bl	80114d0 <rint>
 801072a:	4622      	mov	r2, r4
 801072c:	462b      	mov	r3, r5
 801072e:	ec51 0b10 	vmov	r0, r1, d0
 8010732:	f7f0 f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 8010736:	b920      	cbnz	r0, 8010742 <pow+0x222>
 8010738:	4b2e      	ldr	r3, [pc, #184]	; (80107f4 <pow+0x2d4>)
 801073a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801073e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010742:	f998 3000 	ldrsb.w	r3, [r8]
 8010746:	2b02      	cmp	r3, #2
 8010748:	d142      	bne.n	80107d0 <pow+0x2b0>
 801074a:	f7fd fa25 	bl	800db98 <__errno>
 801074e:	2322      	movs	r3, #34	; 0x22
 8010750:	e78d      	b.n	801066e <pow+0x14e>
 8010752:	4b29      	ldr	r3, [pc, #164]	; (80107f8 <pow+0x2d8>)
 8010754:	2200      	movs	r2, #0
 8010756:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801075a:	4630      	mov	r0, r6
 801075c:	4652      	mov	r2, sl
 801075e:	465b      	mov	r3, fp
 8010760:	4639      	mov	r1, r7
 8010762:	f7f0 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 8010766:	2800      	cmp	r0, #0
 8010768:	d0eb      	beq.n	8010742 <pow+0x222>
 801076a:	ec45 4b10 	vmov	d0, r4, r5
 801076e:	f000 feaf 	bl	80114d0 <rint>
 8010772:	4622      	mov	r2, r4
 8010774:	462b      	mov	r3, r5
 8010776:	ec51 0b10 	vmov	r0, r1, d0
 801077a:	f7f0 f9cd 	bl	8000b18 <__aeabi_dcmpeq>
 801077e:	2800      	cmp	r0, #0
 8010780:	d1df      	bne.n	8010742 <pow+0x222>
 8010782:	2200      	movs	r2, #0
 8010784:	4b18      	ldr	r3, [pc, #96]	; (80107e8 <pow+0x2c8>)
 8010786:	e7da      	b.n	801073e <pow+0x21e>
 8010788:	2200      	movs	r2, #0
 801078a:	2300      	movs	r3, #0
 801078c:	ec51 0b18 	vmov	r0, r1, d8
 8010790:	f7f0 f9c2 	bl	8000b18 <__aeabi_dcmpeq>
 8010794:	2800      	cmp	r0, #0
 8010796:	f43f af3a 	beq.w	801060e <pow+0xee>
 801079a:	ec47 6b10 	vmov	d0, r6, r7
 801079e:	f000 fe82 	bl	80114a6 <finite>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	f43f af33 	beq.w	801060e <pow+0xee>
 80107a8:	ec45 4b10 	vmov	d0, r4, r5
 80107ac:	f000 fe7b 	bl	80114a6 <finite>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	f43f af2c 	beq.w	801060e <pow+0xee>
 80107b6:	2304      	movs	r3, #4
 80107b8:	9302      	str	r3, [sp, #8]
 80107ba:	4b09      	ldr	r3, [pc, #36]	; (80107e0 <pow+0x2c0>)
 80107bc:	9303      	str	r3, [sp, #12]
 80107be:	2300      	movs	r3, #0
 80107c0:	930a      	str	r3, [sp, #40]	; 0x28
 80107c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80107c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80107ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 80107ce:	e7b8      	b.n	8010742 <pow+0x222>
 80107d0:	a802      	add	r0, sp, #8
 80107d2:	f000 fe70 	bl	80114b6 <matherr>
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f47f af11 	bne.w	80105fe <pow+0xde>
 80107dc:	e7b5      	b.n	801074a <pow+0x22a>
 80107de:	bf00      	nop
 80107e0:	08012e86 	.word	0x08012e86
 80107e4:	3ff00000 	.word	0x3ff00000
 80107e8:	fff00000 	.word	0xfff00000
 80107ec:	3fe00000 	.word	0x3fe00000
 80107f0:	47efffff 	.word	0x47efffff
 80107f4:	c7efffff 	.word	0xc7efffff
 80107f8:	7ff00000 	.word	0x7ff00000
 80107fc:	20001e7c 	.word	0x20001e7c

08010800 <__ieee754_log10>:
 8010800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010804:	ec55 4b10 	vmov	r4, r5, d0
 8010808:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801080c:	462b      	mov	r3, r5
 801080e:	da2f      	bge.n	8010870 <__ieee754_log10+0x70>
 8010810:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010814:	4322      	orrs	r2, r4
 8010816:	d10a      	bne.n	801082e <__ieee754_log10+0x2e>
 8010818:	493b      	ldr	r1, [pc, #236]	; (8010908 <__ieee754_log10+0x108>)
 801081a:	2200      	movs	r2, #0
 801081c:	2300      	movs	r3, #0
 801081e:	2000      	movs	r0, #0
 8010820:	f7f0 f83c 	bl	800089c <__aeabi_ddiv>
 8010824:	ec41 0b10 	vmov	d0, r0, r1
 8010828:	b003      	add	sp, #12
 801082a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801082e:	2d00      	cmp	r5, #0
 8010830:	da08      	bge.n	8010844 <__ieee754_log10+0x44>
 8010832:	ee10 2a10 	vmov	r2, s0
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7ef fd4d 	bl	80002d8 <__aeabi_dsub>
 801083e:	2200      	movs	r2, #0
 8010840:	2300      	movs	r3, #0
 8010842:	e7ed      	b.n	8010820 <__ieee754_log10+0x20>
 8010844:	2200      	movs	r2, #0
 8010846:	4b31      	ldr	r3, [pc, #196]	; (801090c <__ieee754_log10+0x10c>)
 8010848:	4629      	mov	r1, r5
 801084a:	ee10 0a10 	vmov	r0, s0
 801084e:	f7ef fefb 	bl	8000648 <__aeabi_dmul>
 8010852:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8010856:	4604      	mov	r4, r0
 8010858:	460d      	mov	r5, r1
 801085a:	460b      	mov	r3, r1
 801085c:	492c      	ldr	r1, [pc, #176]	; (8010910 <__ieee754_log10+0x110>)
 801085e:	428b      	cmp	r3, r1
 8010860:	dd08      	ble.n	8010874 <__ieee754_log10+0x74>
 8010862:	4622      	mov	r2, r4
 8010864:	462b      	mov	r3, r5
 8010866:	4620      	mov	r0, r4
 8010868:	4629      	mov	r1, r5
 801086a:	f7ef fd37 	bl	80002dc <__adddf3>
 801086e:	e7d9      	b.n	8010824 <__ieee754_log10+0x24>
 8010870:	2200      	movs	r2, #0
 8010872:	e7f3      	b.n	801085c <__ieee754_log10+0x5c>
 8010874:	1518      	asrs	r0, r3, #20
 8010876:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801087a:	4410      	add	r0, r2
 801087c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8010880:	4448      	add	r0, r9
 8010882:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8010886:	f7ef fe75 	bl	8000574 <__aeabi_i2d>
 801088a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801088e:	3303      	adds	r3, #3
 8010890:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8010894:	ec45 4b10 	vmov	d0, r4, r5
 8010898:	4606      	mov	r6, r0
 801089a:	460f      	mov	r7, r1
 801089c:	f000 ff14 	bl	80116c8 <__ieee754_log>
 80108a0:	a313      	add	r3, pc, #76	; (adr r3, 80108f0 <__ieee754_log10+0xf0>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	4630      	mov	r0, r6
 80108a8:	4639      	mov	r1, r7
 80108aa:	ed8d 0b00 	vstr	d0, [sp]
 80108ae:	f7ef fecb 	bl	8000648 <__aeabi_dmul>
 80108b2:	ed9d 0b00 	vldr	d0, [sp]
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	a30f      	add	r3, pc, #60	; (adr r3, 80108f8 <__ieee754_log10+0xf8>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	ec51 0b10 	vmov	r0, r1, d0
 80108c4:	f7ef fec0 	bl	8000648 <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4620      	mov	r0, r4
 80108ce:	4629      	mov	r1, r5
 80108d0:	f7ef fd04 	bl	80002dc <__adddf3>
 80108d4:	a30a      	add	r3, pc, #40	; (adr r3, 8010900 <__ieee754_log10+0x100>)
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	4604      	mov	r4, r0
 80108dc:	460d      	mov	r5, r1
 80108de:	4630      	mov	r0, r6
 80108e0:	4639      	mov	r1, r7
 80108e2:	f7ef feb1 	bl	8000648 <__aeabi_dmul>
 80108e6:	4602      	mov	r2, r0
 80108e8:	460b      	mov	r3, r1
 80108ea:	4620      	mov	r0, r4
 80108ec:	4629      	mov	r1, r5
 80108ee:	e7bc      	b.n	801086a <__ieee754_log10+0x6a>
 80108f0:	11f12b36 	.word	0x11f12b36
 80108f4:	3d59fef3 	.word	0x3d59fef3
 80108f8:	1526e50e 	.word	0x1526e50e
 80108fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8010900:	509f6000 	.word	0x509f6000
 8010904:	3fd34413 	.word	0x3fd34413
 8010908:	c3500000 	.word	0xc3500000
 801090c:	43500000 	.word	0x43500000
 8010910:	7fefffff 	.word	0x7fefffff
 8010914:	00000000 	.word	0x00000000

08010918 <__ieee754_pow>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	b091      	sub	sp, #68	; 0x44
 801091e:	ed8d 1b00 	vstr	d1, [sp]
 8010922:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010926:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801092a:	ea58 0302 	orrs.w	r3, r8, r2
 801092e:	ec57 6b10 	vmov	r6, r7, d0
 8010932:	f000 84be 	beq.w	80112b2 <__ieee754_pow+0x99a>
 8010936:	4b7a      	ldr	r3, [pc, #488]	; (8010b20 <__ieee754_pow+0x208>)
 8010938:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801093c:	429c      	cmp	r4, r3
 801093e:	463d      	mov	r5, r7
 8010940:	ee10 aa10 	vmov	sl, s0
 8010944:	dc09      	bgt.n	801095a <__ieee754_pow+0x42>
 8010946:	d103      	bne.n	8010950 <__ieee754_pow+0x38>
 8010948:	b93e      	cbnz	r6, 801095a <__ieee754_pow+0x42>
 801094a:	45a0      	cmp	r8, r4
 801094c:	dc0d      	bgt.n	801096a <__ieee754_pow+0x52>
 801094e:	e001      	b.n	8010954 <__ieee754_pow+0x3c>
 8010950:	4598      	cmp	r8, r3
 8010952:	dc02      	bgt.n	801095a <__ieee754_pow+0x42>
 8010954:	4598      	cmp	r8, r3
 8010956:	d10e      	bne.n	8010976 <__ieee754_pow+0x5e>
 8010958:	b16a      	cbz	r2, 8010976 <__ieee754_pow+0x5e>
 801095a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801095e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010962:	ea54 030a 	orrs.w	r3, r4, sl
 8010966:	f000 84a4 	beq.w	80112b2 <__ieee754_pow+0x99a>
 801096a:	486e      	ldr	r0, [pc, #440]	; (8010b24 <__ieee754_pow+0x20c>)
 801096c:	b011      	add	sp, #68	; 0x44
 801096e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010972:	f000 bda5 	b.w	80114c0 <nan>
 8010976:	2d00      	cmp	r5, #0
 8010978:	da53      	bge.n	8010a22 <__ieee754_pow+0x10a>
 801097a:	4b6b      	ldr	r3, [pc, #428]	; (8010b28 <__ieee754_pow+0x210>)
 801097c:	4598      	cmp	r8, r3
 801097e:	dc4d      	bgt.n	8010a1c <__ieee754_pow+0x104>
 8010980:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010984:	4598      	cmp	r8, r3
 8010986:	dd4c      	ble.n	8010a22 <__ieee754_pow+0x10a>
 8010988:	ea4f 5328 	mov.w	r3, r8, asr #20
 801098c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010990:	2b14      	cmp	r3, #20
 8010992:	dd26      	ble.n	80109e2 <__ieee754_pow+0xca>
 8010994:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010998:	fa22 f103 	lsr.w	r1, r2, r3
 801099c:	fa01 f303 	lsl.w	r3, r1, r3
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d13e      	bne.n	8010a22 <__ieee754_pow+0x10a>
 80109a4:	f001 0101 	and.w	r1, r1, #1
 80109a8:	f1c1 0b02 	rsb	fp, r1, #2
 80109ac:	2a00      	cmp	r2, #0
 80109ae:	d15b      	bne.n	8010a68 <__ieee754_pow+0x150>
 80109b0:	4b5b      	ldr	r3, [pc, #364]	; (8010b20 <__ieee754_pow+0x208>)
 80109b2:	4598      	cmp	r8, r3
 80109b4:	d124      	bne.n	8010a00 <__ieee754_pow+0xe8>
 80109b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80109ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80109be:	ea53 030a 	orrs.w	r3, r3, sl
 80109c2:	f000 8476 	beq.w	80112b2 <__ieee754_pow+0x99a>
 80109c6:	4b59      	ldr	r3, [pc, #356]	; (8010b2c <__ieee754_pow+0x214>)
 80109c8:	429c      	cmp	r4, r3
 80109ca:	dd2d      	ble.n	8010a28 <__ieee754_pow+0x110>
 80109cc:	f1b9 0f00 	cmp.w	r9, #0
 80109d0:	f280 8473 	bge.w	80112ba <__ieee754_pow+0x9a2>
 80109d4:	2000      	movs	r0, #0
 80109d6:	2100      	movs	r1, #0
 80109d8:	ec41 0b10 	vmov	d0, r0, r1
 80109dc:	b011      	add	sp, #68	; 0x44
 80109de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	d13e      	bne.n	8010a64 <__ieee754_pow+0x14c>
 80109e6:	f1c3 0314 	rsb	r3, r3, #20
 80109ea:	fa48 f103 	asr.w	r1, r8, r3
 80109ee:	fa01 f303 	lsl.w	r3, r1, r3
 80109f2:	4543      	cmp	r3, r8
 80109f4:	f040 8469 	bne.w	80112ca <__ieee754_pow+0x9b2>
 80109f8:	f001 0101 	and.w	r1, r1, #1
 80109fc:	f1c1 0b02 	rsb	fp, r1, #2
 8010a00:	4b4b      	ldr	r3, [pc, #300]	; (8010b30 <__ieee754_pow+0x218>)
 8010a02:	4598      	cmp	r8, r3
 8010a04:	d118      	bne.n	8010a38 <__ieee754_pow+0x120>
 8010a06:	f1b9 0f00 	cmp.w	r9, #0
 8010a0a:	f280 845a 	bge.w	80112c2 <__ieee754_pow+0x9aa>
 8010a0e:	4948      	ldr	r1, [pc, #288]	; (8010b30 <__ieee754_pow+0x218>)
 8010a10:	4632      	mov	r2, r6
 8010a12:	463b      	mov	r3, r7
 8010a14:	2000      	movs	r0, #0
 8010a16:	f7ef ff41 	bl	800089c <__aeabi_ddiv>
 8010a1a:	e7dd      	b.n	80109d8 <__ieee754_pow+0xc0>
 8010a1c:	f04f 0b02 	mov.w	fp, #2
 8010a20:	e7c4      	b.n	80109ac <__ieee754_pow+0x94>
 8010a22:	f04f 0b00 	mov.w	fp, #0
 8010a26:	e7c1      	b.n	80109ac <__ieee754_pow+0x94>
 8010a28:	f1b9 0f00 	cmp.w	r9, #0
 8010a2c:	dad2      	bge.n	80109d4 <__ieee754_pow+0xbc>
 8010a2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010a32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a36:	e7cf      	b.n	80109d8 <__ieee754_pow+0xc0>
 8010a38:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010a3c:	d106      	bne.n	8010a4c <__ieee754_pow+0x134>
 8010a3e:	4632      	mov	r2, r6
 8010a40:	463b      	mov	r3, r7
 8010a42:	4610      	mov	r0, r2
 8010a44:	4619      	mov	r1, r3
 8010a46:	f7ef fdff 	bl	8000648 <__aeabi_dmul>
 8010a4a:	e7c5      	b.n	80109d8 <__ieee754_pow+0xc0>
 8010a4c:	4b39      	ldr	r3, [pc, #228]	; (8010b34 <__ieee754_pow+0x21c>)
 8010a4e:	4599      	cmp	r9, r3
 8010a50:	d10a      	bne.n	8010a68 <__ieee754_pow+0x150>
 8010a52:	2d00      	cmp	r5, #0
 8010a54:	db08      	blt.n	8010a68 <__ieee754_pow+0x150>
 8010a56:	ec47 6b10 	vmov	d0, r6, r7
 8010a5a:	b011      	add	sp, #68	; 0x44
 8010a5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	f000 bc68 	b.w	8011334 <__ieee754_sqrt>
 8010a64:	f04f 0b00 	mov.w	fp, #0
 8010a68:	ec47 6b10 	vmov	d0, r6, r7
 8010a6c:	f000 fd12 	bl	8011494 <fabs>
 8010a70:	ec51 0b10 	vmov	r0, r1, d0
 8010a74:	f1ba 0f00 	cmp.w	sl, #0
 8010a78:	d127      	bne.n	8010aca <__ieee754_pow+0x1b2>
 8010a7a:	b124      	cbz	r4, 8010a86 <__ieee754_pow+0x16e>
 8010a7c:	4b2c      	ldr	r3, [pc, #176]	; (8010b30 <__ieee754_pow+0x218>)
 8010a7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d121      	bne.n	8010aca <__ieee754_pow+0x1b2>
 8010a86:	f1b9 0f00 	cmp.w	r9, #0
 8010a8a:	da05      	bge.n	8010a98 <__ieee754_pow+0x180>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	2000      	movs	r0, #0
 8010a92:	4927      	ldr	r1, [pc, #156]	; (8010b30 <__ieee754_pow+0x218>)
 8010a94:	f7ef ff02 	bl	800089c <__aeabi_ddiv>
 8010a98:	2d00      	cmp	r5, #0
 8010a9a:	da9d      	bge.n	80109d8 <__ieee754_pow+0xc0>
 8010a9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010aa0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010aa4:	ea54 030b 	orrs.w	r3, r4, fp
 8010aa8:	d108      	bne.n	8010abc <__ieee754_pow+0x1a4>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	460b      	mov	r3, r1
 8010aae:	4610      	mov	r0, r2
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	f7ef fc11 	bl	80002d8 <__aeabi_dsub>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	460b      	mov	r3, r1
 8010aba:	e7ac      	b.n	8010a16 <__ieee754_pow+0xfe>
 8010abc:	f1bb 0f01 	cmp.w	fp, #1
 8010ac0:	d18a      	bne.n	80109d8 <__ieee754_pow+0xc0>
 8010ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	e786      	b.n	80109d8 <__ieee754_pow+0xc0>
 8010aca:	0fed      	lsrs	r5, r5, #31
 8010acc:	1e6b      	subs	r3, r5, #1
 8010ace:	930d      	str	r3, [sp, #52]	; 0x34
 8010ad0:	ea5b 0303 	orrs.w	r3, fp, r3
 8010ad4:	d102      	bne.n	8010adc <__ieee754_pow+0x1c4>
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	463b      	mov	r3, r7
 8010ada:	e7e8      	b.n	8010aae <__ieee754_pow+0x196>
 8010adc:	4b16      	ldr	r3, [pc, #88]	; (8010b38 <__ieee754_pow+0x220>)
 8010ade:	4598      	cmp	r8, r3
 8010ae0:	f340 80fe 	ble.w	8010ce0 <__ieee754_pow+0x3c8>
 8010ae4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010ae8:	4598      	cmp	r8, r3
 8010aea:	dd0a      	ble.n	8010b02 <__ieee754_pow+0x1ea>
 8010aec:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <__ieee754_pow+0x214>)
 8010aee:	429c      	cmp	r4, r3
 8010af0:	dc0d      	bgt.n	8010b0e <__ieee754_pow+0x1f6>
 8010af2:	f1b9 0f00 	cmp.w	r9, #0
 8010af6:	f6bf af6d 	bge.w	80109d4 <__ieee754_pow+0xbc>
 8010afa:	a307      	add	r3, pc, #28	; (adr r3, 8010b18 <__ieee754_pow+0x200>)
 8010afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b00:	e79f      	b.n	8010a42 <__ieee754_pow+0x12a>
 8010b02:	4b0e      	ldr	r3, [pc, #56]	; (8010b3c <__ieee754_pow+0x224>)
 8010b04:	429c      	cmp	r4, r3
 8010b06:	ddf4      	ble.n	8010af2 <__ieee754_pow+0x1da>
 8010b08:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <__ieee754_pow+0x218>)
 8010b0a:	429c      	cmp	r4, r3
 8010b0c:	dd18      	ble.n	8010b40 <__ieee754_pow+0x228>
 8010b0e:	f1b9 0f00 	cmp.w	r9, #0
 8010b12:	dcf2      	bgt.n	8010afa <__ieee754_pow+0x1e2>
 8010b14:	e75e      	b.n	80109d4 <__ieee754_pow+0xbc>
 8010b16:	bf00      	nop
 8010b18:	8800759c 	.word	0x8800759c
 8010b1c:	7e37e43c 	.word	0x7e37e43c
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	08012d69 	.word	0x08012d69
 8010b28:	433fffff 	.word	0x433fffff
 8010b2c:	3fefffff 	.word	0x3fefffff
 8010b30:	3ff00000 	.word	0x3ff00000
 8010b34:	3fe00000 	.word	0x3fe00000
 8010b38:	41e00000 	.word	0x41e00000
 8010b3c:	3feffffe 	.word	0x3feffffe
 8010b40:	2200      	movs	r2, #0
 8010b42:	4b63      	ldr	r3, [pc, #396]	; (8010cd0 <__ieee754_pow+0x3b8>)
 8010b44:	f7ef fbc8 	bl	80002d8 <__aeabi_dsub>
 8010b48:	a355      	add	r3, pc, #340	; (adr r3, 8010ca0 <__ieee754_pow+0x388>)
 8010b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4e:	4604      	mov	r4, r0
 8010b50:	460d      	mov	r5, r1
 8010b52:	f7ef fd79 	bl	8000648 <__aeabi_dmul>
 8010b56:	a354      	add	r3, pc, #336	; (adr r3, 8010ca8 <__ieee754_pow+0x390>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	460f      	mov	r7, r1
 8010b60:	4620      	mov	r0, r4
 8010b62:	4629      	mov	r1, r5
 8010b64:	f7ef fd70 	bl	8000648 <__aeabi_dmul>
 8010b68:	2200      	movs	r2, #0
 8010b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b6e:	4b59      	ldr	r3, [pc, #356]	; (8010cd4 <__ieee754_pow+0x3bc>)
 8010b70:	4620      	mov	r0, r4
 8010b72:	4629      	mov	r1, r5
 8010b74:	f7ef fd68 	bl	8000648 <__aeabi_dmul>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	a14c      	add	r1, pc, #304	; (adr r1, 8010cb0 <__ieee754_pow+0x398>)
 8010b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b82:	f7ef fba9 	bl	80002d8 <__aeabi_dsub>
 8010b86:	4622      	mov	r2, r4
 8010b88:	462b      	mov	r3, r5
 8010b8a:	f7ef fd5d 	bl	8000648 <__aeabi_dmul>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	2000      	movs	r0, #0
 8010b94:	4950      	ldr	r1, [pc, #320]	; (8010cd8 <__ieee754_pow+0x3c0>)
 8010b96:	f7ef fb9f 	bl	80002d8 <__aeabi_dsub>
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	462b      	mov	r3, r5
 8010b9e:	4680      	mov	r8, r0
 8010ba0:	4689      	mov	r9, r1
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	f7ef fd4f 	bl	8000648 <__aeabi_dmul>
 8010baa:	4602      	mov	r2, r0
 8010bac:	460b      	mov	r3, r1
 8010bae:	4640      	mov	r0, r8
 8010bb0:	4649      	mov	r1, r9
 8010bb2:	f7ef fd49 	bl	8000648 <__aeabi_dmul>
 8010bb6:	a340      	add	r3, pc, #256	; (adr r3, 8010cb8 <__ieee754_pow+0x3a0>)
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	f7ef fd44 	bl	8000648 <__aeabi_dmul>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bc8:	f7ef fb86 	bl	80002d8 <__aeabi_dsub>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	460b      	mov	r3, r1
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	460d      	mov	r5, r1
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	f7ef fb80 	bl	80002dc <__adddf3>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010be2:	4632      	mov	r2, r6
 8010be4:	463b      	mov	r3, r7
 8010be6:	f7ef fb77 	bl	80002d8 <__aeabi_dsub>
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	4620      	mov	r0, r4
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	f7ef fb71 	bl	80002d8 <__aeabi_dsub>
 8010bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bf8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	4606      	mov	r6, r0
 8010c00:	460f      	mov	r7, r1
 8010c02:	f040 81eb 	bne.w	8010fdc <__ieee754_pow+0x6c4>
 8010c06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010cc0 <__ieee754_pow+0x3a8>
 8010c0a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010c0e:	2400      	movs	r4, #0
 8010c10:	4622      	mov	r2, r4
 8010c12:	462b      	mov	r3, r5
 8010c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c1c:	f7ef fb5c 	bl	80002d8 <__aeabi_dsub>
 8010c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c24:	f7ef fd10 	bl	8000648 <__aeabi_dmul>
 8010c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c2c:	4680      	mov	r8, r0
 8010c2e:	4689      	mov	r9, r1
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	f7ef fd08 	bl	8000648 <__aeabi_dmul>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	4649      	mov	r1, r9
 8010c40:	f7ef fb4c 	bl	80002dc <__adddf3>
 8010c44:	4622      	mov	r2, r4
 8010c46:	462b      	mov	r3, r5
 8010c48:	4680      	mov	r8, r0
 8010c4a:	4689      	mov	r9, r1
 8010c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c50:	f7ef fcfa 	bl	8000648 <__aeabi_dmul>
 8010c54:	460b      	mov	r3, r1
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	4640      	mov	r0, r8
 8010c60:	e9cd 4500 	strd	r4, r5, [sp]
 8010c64:	f7ef fb3a 	bl	80002dc <__adddf3>
 8010c68:	4b1c      	ldr	r3, [pc, #112]	; (8010cdc <__ieee754_pow+0x3c4>)
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	460f      	mov	r7, r1
 8010c70:	468b      	mov	fp, r1
 8010c72:	f340 82f7 	ble.w	8011264 <__ieee754_pow+0x94c>
 8010c76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010c7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010c7e:	4303      	orrs	r3, r0
 8010c80:	f000 81ea 	beq.w	8011058 <__ieee754_pow+0x740>
 8010c84:	a310      	add	r3, pc, #64	; (adr r3, 8010cc8 <__ieee754_pow+0x3b0>)
 8010c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c8e:	f7ef fcdb 	bl	8000648 <__aeabi_dmul>
 8010c92:	a30d      	add	r3, pc, #52	; (adr r3, 8010cc8 <__ieee754_pow+0x3b0>)
 8010c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c98:	e6d5      	b.n	8010a46 <__ieee754_pow+0x12e>
 8010c9a:	bf00      	nop
 8010c9c:	f3af 8000 	nop.w
 8010ca0:	60000000 	.word	0x60000000
 8010ca4:	3ff71547 	.word	0x3ff71547
 8010ca8:	f85ddf44 	.word	0xf85ddf44
 8010cac:	3e54ae0b 	.word	0x3e54ae0b
 8010cb0:	55555555 	.word	0x55555555
 8010cb4:	3fd55555 	.word	0x3fd55555
 8010cb8:	652b82fe 	.word	0x652b82fe
 8010cbc:	3ff71547 	.word	0x3ff71547
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	bff00000 	.word	0xbff00000
 8010cc8:	8800759c 	.word	0x8800759c
 8010ccc:	7e37e43c 	.word	0x7e37e43c
 8010cd0:	3ff00000 	.word	0x3ff00000
 8010cd4:	3fd00000 	.word	0x3fd00000
 8010cd8:	3fe00000 	.word	0x3fe00000
 8010cdc:	408fffff 	.word	0x408fffff
 8010ce0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010ce4:	f04f 0200 	mov.w	r2, #0
 8010ce8:	da05      	bge.n	8010cf6 <__ieee754_pow+0x3de>
 8010cea:	4bd3      	ldr	r3, [pc, #844]	; (8011038 <__ieee754_pow+0x720>)
 8010cec:	f7ef fcac 	bl	8000648 <__aeabi_dmul>
 8010cf0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010cf4:	460c      	mov	r4, r1
 8010cf6:	1523      	asrs	r3, r4, #20
 8010cf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010cfc:	4413      	add	r3, r2
 8010cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010d00:	4bce      	ldr	r3, [pc, #824]	; (801103c <__ieee754_pow+0x724>)
 8010d02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d0a:	429c      	cmp	r4, r3
 8010d0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d10:	dd08      	ble.n	8010d24 <__ieee754_pow+0x40c>
 8010d12:	4bcb      	ldr	r3, [pc, #812]	; (8011040 <__ieee754_pow+0x728>)
 8010d14:	429c      	cmp	r4, r3
 8010d16:	f340 815e 	ble.w	8010fd6 <__ieee754_pow+0x6be>
 8010d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010d20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010d24:	f04f 0a00 	mov.w	sl, #0
 8010d28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8010d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d30:	4bc4      	ldr	r3, [pc, #784]	; (8011044 <__ieee754_pow+0x72c>)
 8010d32:	4413      	add	r3, r2
 8010d34:	ed93 7b00 	vldr	d7, [r3]
 8010d38:	4629      	mov	r1, r5
 8010d3a:	ec53 2b17 	vmov	r2, r3, d7
 8010d3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010d46:	f7ef fac7 	bl	80002d8 <__aeabi_dsub>
 8010d4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010d4e:	4606      	mov	r6, r0
 8010d50:	460f      	mov	r7, r1
 8010d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d56:	f7ef fac1 	bl	80002dc <__adddf3>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	2000      	movs	r0, #0
 8010d60:	49b9      	ldr	r1, [pc, #740]	; (8011048 <__ieee754_pow+0x730>)
 8010d62:	f7ef fd9b 	bl	800089c <__aeabi_ddiv>
 8010d66:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	4630      	mov	r0, r6
 8010d70:	4639      	mov	r1, r7
 8010d72:	f7ef fc69 	bl	8000648 <__aeabi_dmul>
 8010d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d7a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010d7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010d82:	2300      	movs	r3, #0
 8010d84:	9302      	str	r3, [sp, #8]
 8010d86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010d8a:	106d      	asrs	r5, r5, #1
 8010d8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010d90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010d94:	2200      	movs	r2, #0
 8010d96:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	4649      	mov	r1, r9
 8010d9e:	4614      	mov	r4, r2
 8010da0:	461d      	mov	r5, r3
 8010da2:	f7ef fc51 	bl	8000648 <__aeabi_dmul>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	4630      	mov	r0, r6
 8010dac:	4639      	mov	r1, r7
 8010dae:	f7ef fa93 	bl	80002d8 <__aeabi_dsub>
 8010db2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	4620      	mov	r0, r4
 8010dbc:	4629      	mov	r1, r5
 8010dbe:	f7ef fa8b 	bl	80002d8 <__aeabi_dsub>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010dca:	f7ef fa85 	bl	80002d8 <__aeabi_dsub>
 8010dce:	4642      	mov	r2, r8
 8010dd0:	464b      	mov	r3, r9
 8010dd2:	f7ef fc39 	bl	8000648 <__aeabi_dmul>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4630      	mov	r0, r6
 8010ddc:	4639      	mov	r1, r7
 8010dde:	f7ef fa7b 	bl	80002d8 <__aeabi_dsub>
 8010de2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010de6:	f7ef fc2f 	bl	8000648 <__aeabi_dmul>
 8010dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010df2:	4610      	mov	r0, r2
 8010df4:	4619      	mov	r1, r3
 8010df6:	f7ef fc27 	bl	8000648 <__aeabi_dmul>
 8010dfa:	a37b      	add	r3, pc, #492	; (adr r3, 8010fe8 <__ieee754_pow+0x6d0>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	4604      	mov	r4, r0
 8010e02:	460d      	mov	r5, r1
 8010e04:	f7ef fc20 	bl	8000648 <__aeabi_dmul>
 8010e08:	a379      	add	r3, pc, #484	; (adr r3, 8010ff0 <__ieee754_pow+0x6d8>)
 8010e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0e:	f7ef fa65 	bl	80002dc <__adddf3>
 8010e12:	4622      	mov	r2, r4
 8010e14:	462b      	mov	r3, r5
 8010e16:	f7ef fc17 	bl	8000648 <__aeabi_dmul>
 8010e1a:	a377      	add	r3, pc, #476	; (adr r3, 8010ff8 <__ieee754_pow+0x6e0>)
 8010e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e20:	f7ef fa5c 	bl	80002dc <__adddf3>
 8010e24:	4622      	mov	r2, r4
 8010e26:	462b      	mov	r3, r5
 8010e28:	f7ef fc0e 	bl	8000648 <__aeabi_dmul>
 8010e2c:	a374      	add	r3, pc, #464	; (adr r3, 8011000 <__ieee754_pow+0x6e8>)
 8010e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e32:	f7ef fa53 	bl	80002dc <__adddf3>
 8010e36:	4622      	mov	r2, r4
 8010e38:	462b      	mov	r3, r5
 8010e3a:	f7ef fc05 	bl	8000648 <__aeabi_dmul>
 8010e3e:	a372      	add	r3, pc, #456	; (adr r3, 8011008 <__ieee754_pow+0x6f0>)
 8010e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e44:	f7ef fa4a 	bl	80002dc <__adddf3>
 8010e48:	4622      	mov	r2, r4
 8010e4a:	462b      	mov	r3, r5
 8010e4c:	f7ef fbfc 	bl	8000648 <__aeabi_dmul>
 8010e50:	a36f      	add	r3, pc, #444	; (adr r3, 8011010 <__ieee754_pow+0x6f8>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	f7ef fa41 	bl	80002dc <__adddf3>
 8010e5a:	4622      	mov	r2, r4
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	460f      	mov	r7, r1
 8010e60:	462b      	mov	r3, r5
 8010e62:	4620      	mov	r0, r4
 8010e64:	4629      	mov	r1, r5
 8010e66:	f7ef fbef 	bl	8000648 <__aeabi_dmul>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	4630      	mov	r0, r6
 8010e70:	4639      	mov	r1, r7
 8010e72:	f7ef fbe9 	bl	8000648 <__aeabi_dmul>
 8010e76:	4642      	mov	r2, r8
 8010e78:	4604      	mov	r4, r0
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	464b      	mov	r3, r9
 8010e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e82:	f7ef fa2b 	bl	80002dc <__adddf3>
 8010e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e8a:	f7ef fbdd 	bl	8000648 <__aeabi_dmul>
 8010e8e:	4622      	mov	r2, r4
 8010e90:	462b      	mov	r3, r5
 8010e92:	f7ef fa23 	bl	80002dc <__adddf3>
 8010e96:	4642      	mov	r2, r8
 8010e98:	4606      	mov	r6, r0
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	464b      	mov	r3, r9
 8010e9e:	4640      	mov	r0, r8
 8010ea0:	4649      	mov	r1, r9
 8010ea2:	f7ef fbd1 	bl	8000648 <__aeabi_dmul>
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	4b68      	ldr	r3, [pc, #416]	; (801104c <__ieee754_pow+0x734>)
 8010eaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010eae:	f7ef fa15 	bl	80002dc <__adddf3>
 8010eb2:	4632      	mov	r2, r6
 8010eb4:	463b      	mov	r3, r7
 8010eb6:	f7ef fa11 	bl	80002dc <__adddf3>
 8010eba:	9802      	ldr	r0, [sp, #8]
 8010ebc:	460d      	mov	r5, r1
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	4640      	mov	r0, r8
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	f7ef fbbe 	bl	8000648 <__aeabi_dmul>
 8010ecc:	2200      	movs	r2, #0
 8010ece:	4680      	mov	r8, r0
 8010ed0:	4689      	mov	r9, r1
 8010ed2:	4b5e      	ldr	r3, [pc, #376]	; (801104c <__ieee754_pow+0x734>)
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	4629      	mov	r1, r5
 8010ed8:	f7ef f9fe 	bl	80002d8 <__aeabi_dsub>
 8010edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ee0:	f7ef f9fa 	bl	80002d8 <__aeabi_dsub>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef f9f4 	bl	80002d8 <__aeabi_dsub>
 8010ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ef4:	f7ef fba8 	bl	8000648 <__aeabi_dmul>
 8010ef8:	4622      	mov	r2, r4
 8010efa:	4606      	mov	r6, r0
 8010efc:	460f      	mov	r7, r1
 8010efe:	462b      	mov	r3, r5
 8010f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f04:	f7ef fba0 	bl	8000648 <__aeabi_dmul>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	4639      	mov	r1, r7
 8010f10:	f7ef f9e4 	bl	80002dc <__adddf3>
 8010f14:	4606      	mov	r6, r0
 8010f16:	460f      	mov	r7, r1
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	4649      	mov	r1, r9
 8010f20:	f7ef f9dc 	bl	80002dc <__adddf3>
 8010f24:	9802      	ldr	r0, [sp, #8]
 8010f26:	a33c      	add	r3, pc, #240	; (adr r3, 8011018 <__ieee754_pow+0x700>)
 8010f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	460d      	mov	r5, r1
 8010f30:	f7ef fb8a 	bl	8000648 <__aeabi_dmul>
 8010f34:	4642      	mov	r2, r8
 8010f36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f3a:	464b      	mov	r3, r9
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	4629      	mov	r1, r5
 8010f40:	f7ef f9ca 	bl	80002d8 <__aeabi_dsub>
 8010f44:	4602      	mov	r2, r0
 8010f46:	460b      	mov	r3, r1
 8010f48:	4630      	mov	r0, r6
 8010f4a:	4639      	mov	r1, r7
 8010f4c:	f7ef f9c4 	bl	80002d8 <__aeabi_dsub>
 8010f50:	a333      	add	r3, pc, #204	; (adr r3, 8011020 <__ieee754_pow+0x708>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	f7ef fb77 	bl	8000648 <__aeabi_dmul>
 8010f5a:	a333      	add	r3, pc, #204	; (adr r3, 8011028 <__ieee754_pow+0x710>)
 8010f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f60:	4606      	mov	r6, r0
 8010f62:	460f      	mov	r7, r1
 8010f64:	4620      	mov	r0, r4
 8010f66:	4629      	mov	r1, r5
 8010f68:	f7ef fb6e 	bl	8000648 <__aeabi_dmul>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	460b      	mov	r3, r1
 8010f70:	4630      	mov	r0, r6
 8010f72:	4639      	mov	r1, r7
 8010f74:	f7ef f9b2 	bl	80002dc <__adddf3>
 8010f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f7a:	4b35      	ldr	r3, [pc, #212]	; (8011050 <__ieee754_pow+0x738>)
 8010f7c:	4413      	add	r3, r2
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	f7ef f9ab 	bl	80002dc <__adddf3>
 8010f86:	4604      	mov	r4, r0
 8010f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f8a:	460d      	mov	r5, r1
 8010f8c:	f7ef faf2 	bl	8000574 <__aeabi_i2d>
 8010f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f92:	4b30      	ldr	r3, [pc, #192]	; (8011054 <__ieee754_pow+0x73c>)
 8010f94:	4413      	add	r3, r2
 8010f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f9a:	4606      	mov	r6, r0
 8010f9c:	460f      	mov	r7, r1
 8010f9e:	4622      	mov	r2, r4
 8010fa0:	462b      	mov	r3, r5
 8010fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fa6:	f7ef f999 	bl	80002dc <__adddf3>
 8010faa:	4642      	mov	r2, r8
 8010fac:	464b      	mov	r3, r9
 8010fae:	f7ef f995 	bl	80002dc <__adddf3>
 8010fb2:	4632      	mov	r2, r6
 8010fb4:	463b      	mov	r3, r7
 8010fb6:	f7ef f991 	bl	80002dc <__adddf3>
 8010fba:	9802      	ldr	r0, [sp, #8]
 8010fbc:	4632      	mov	r2, r6
 8010fbe:	463b      	mov	r3, r7
 8010fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fc4:	f7ef f988 	bl	80002d8 <__aeabi_dsub>
 8010fc8:	4642      	mov	r2, r8
 8010fca:	464b      	mov	r3, r9
 8010fcc:	f7ef f984 	bl	80002d8 <__aeabi_dsub>
 8010fd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010fd4:	e607      	b.n	8010be6 <__ieee754_pow+0x2ce>
 8010fd6:	f04f 0a01 	mov.w	sl, #1
 8010fda:	e6a5      	b.n	8010d28 <__ieee754_pow+0x410>
 8010fdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011030 <__ieee754_pow+0x718>
 8010fe0:	e613      	b.n	8010c0a <__ieee754_pow+0x2f2>
 8010fe2:	bf00      	nop
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	4a454eef 	.word	0x4a454eef
 8010fec:	3fca7e28 	.word	0x3fca7e28
 8010ff0:	93c9db65 	.word	0x93c9db65
 8010ff4:	3fcd864a 	.word	0x3fcd864a
 8010ff8:	a91d4101 	.word	0xa91d4101
 8010ffc:	3fd17460 	.word	0x3fd17460
 8011000:	518f264d 	.word	0x518f264d
 8011004:	3fd55555 	.word	0x3fd55555
 8011008:	db6fabff 	.word	0xdb6fabff
 801100c:	3fdb6db6 	.word	0x3fdb6db6
 8011010:	33333303 	.word	0x33333303
 8011014:	3fe33333 	.word	0x3fe33333
 8011018:	e0000000 	.word	0xe0000000
 801101c:	3feec709 	.word	0x3feec709
 8011020:	dc3a03fd 	.word	0xdc3a03fd
 8011024:	3feec709 	.word	0x3feec709
 8011028:	145b01f5 	.word	0x145b01f5
 801102c:	be3e2fe0 	.word	0xbe3e2fe0
 8011030:	00000000 	.word	0x00000000
 8011034:	3ff00000 	.word	0x3ff00000
 8011038:	43400000 	.word	0x43400000
 801103c:	0003988e 	.word	0x0003988e
 8011040:	000bb679 	.word	0x000bb679
 8011044:	08012e90 	.word	0x08012e90
 8011048:	3ff00000 	.word	0x3ff00000
 801104c:	40080000 	.word	0x40080000
 8011050:	08012eb0 	.word	0x08012eb0
 8011054:	08012ea0 	.word	0x08012ea0
 8011058:	a3b4      	add	r3, pc, #720	; (adr r3, 801132c <__ieee754_pow+0xa14>)
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	4640      	mov	r0, r8
 8011060:	4649      	mov	r1, r9
 8011062:	f7ef f93b 	bl	80002dc <__adddf3>
 8011066:	4622      	mov	r2, r4
 8011068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801106c:	462b      	mov	r3, r5
 801106e:	4630      	mov	r0, r6
 8011070:	4639      	mov	r1, r7
 8011072:	f7ef f931 	bl	80002d8 <__aeabi_dsub>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801107e:	f7ef fd73 	bl	8000b68 <__aeabi_dcmpgt>
 8011082:	2800      	cmp	r0, #0
 8011084:	f47f adfe 	bne.w	8010c84 <__ieee754_pow+0x36c>
 8011088:	4aa3      	ldr	r2, [pc, #652]	; (8011318 <__ieee754_pow+0xa00>)
 801108a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801108e:	4293      	cmp	r3, r2
 8011090:	f340 810a 	ble.w	80112a8 <__ieee754_pow+0x990>
 8011094:	151b      	asrs	r3, r3, #20
 8011096:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801109a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801109e:	fa4a f303 	asr.w	r3, sl, r3
 80110a2:	445b      	add	r3, fp
 80110a4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80110a8:	4e9c      	ldr	r6, [pc, #624]	; (801131c <__ieee754_pow+0xa04>)
 80110aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80110ae:	4116      	asrs	r6, r2
 80110b0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80110b4:	2000      	movs	r0, #0
 80110b6:	ea23 0106 	bic.w	r1, r3, r6
 80110ba:	f1c2 0214 	rsb	r2, r2, #20
 80110be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80110c2:	fa4a fa02 	asr.w	sl, sl, r2
 80110c6:	f1bb 0f00 	cmp.w	fp, #0
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	4620      	mov	r0, r4
 80110d0:	4629      	mov	r1, r5
 80110d2:	bfb8      	it	lt
 80110d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80110d8:	f7ef f8fe 	bl	80002d8 <__aeabi_dsub>
 80110dc:	e9cd 0100 	strd	r0, r1, [sp]
 80110e0:	4642      	mov	r2, r8
 80110e2:	464b      	mov	r3, r9
 80110e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110e8:	f7ef f8f8 	bl	80002dc <__adddf3>
 80110ec:	2000      	movs	r0, #0
 80110ee:	a378      	add	r3, pc, #480	; (adr r3, 80112d0 <__ieee754_pow+0x9b8>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	4604      	mov	r4, r0
 80110f6:	460d      	mov	r5, r1
 80110f8:	f7ef faa6 	bl	8000648 <__aeabi_dmul>
 80110fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011100:	4606      	mov	r6, r0
 8011102:	460f      	mov	r7, r1
 8011104:	4620      	mov	r0, r4
 8011106:	4629      	mov	r1, r5
 8011108:	f7ef f8e6 	bl	80002d8 <__aeabi_dsub>
 801110c:	4602      	mov	r2, r0
 801110e:	460b      	mov	r3, r1
 8011110:	4640      	mov	r0, r8
 8011112:	4649      	mov	r1, r9
 8011114:	f7ef f8e0 	bl	80002d8 <__aeabi_dsub>
 8011118:	a36f      	add	r3, pc, #444	; (adr r3, 80112d8 <__ieee754_pow+0x9c0>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	f7ef fa93 	bl	8000648 <__aeabi_dmul>
 8011122:	a36f      	add	r3, pc, #444	; (adr r3, 80112e0 <__ieee754_pow+0x9c8>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	4680      	mov	r8, r0
 801112a:	4689      	mov	r9, r1
 801112c:	4620      	mov	r0, r4
 801112e:	4629      	mov	r1, r5
 8011130:	f7ef fa8a 	bl	8000648 <__aeabi_dmul>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef f8ce 	bl	80002dc <__adddf3>
 8011140:	4604      	mov	r4, r0
 8011142:	460d      	mov	r5, r1
 8011144:	4602      	mov	r2, r0
 8011146:	460b      	mov	r3, r1
 8011148:	4630      	mov	r0, r6
 801114a:	4639      	mov	r1, r7
 801114c:	f7ef f8c6 	bl	80002dc <__adddf3>
 8011150:	4632      	mov	r2, r6
 8011152:	463b      	mov	r3, r7
 8011154:	4680      	mov	r8, r0
 8011156:	4689      	mov	r9, r1
 8011158:	f7ef f8be 	bl	80002d8 <__aeabi_dsub>
 801115c:	4602      	mov	r2, r0
 801115e:	460b      	mov	r3, r1
 8011160:	4620      	mov	r0, r4
 8011162:	4629      	mov	r1, r5
 8011164:	f7ef f8b8 	bl	80002d8 <__aeabi_dsub>
 8011168:	4642      	mov	r2, r8
 801116a:	4606      	mov	r6, r0
 801116c:	460f      	mov	r7, r1
 801116e:	464b      	mov	r3, r9
 8011170:	4640      	mov	r0, r8
 8011172:	4649      	mov	r1, r9
 8011174:	f7ef fa68 	bl	8000648 <__aeabi_dmul>
 8011178:	a35b      	add	r3, pc, #364	; (adr r3, 80112e8 <__ieee754_pow+0x9d0>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	4604      	mov	r4, r0
 8011180:	460d      	mov	r5, r1
 8011182:	f7ef fa61 	bl	8000648 <__aeabi_dmul>
 8011186:	a35a      	add	r3, pc, #360	; (adr r3, 80112f0 <__ieee754_pow+0x9d8>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	f7ef f8a4 	bl	80002d8 <__aeabi_dsub>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7ef fa58 	bl	8000648 <__aeabi_dmul>
 8011198:	a357      	add	r3, pc, #348	; (adr r3, 80112f8 <__ieee754_pow+0x9e0>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f89d 	bl	80002dc <__adddf3>
 80111a2:	4622      	mov	r2, r4
 80111a4:	462b      	mov	r3, r5
 80111a6:	f7ef fa4f 	bl	8000648 <__aeabi_dmul>
 80111aa:	a355      	add	r3, pc, #340	; (adr r3, 8011300 <__ieee754_pow+0x9e8>)
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f7ef f892 	bl	80002d8 <__aeabi_dsub>
 80111b4:	4622      	mov	r2, r4
 80111b6:	462b      	mov	r3, r5
 80111b8:	f7ef fa46 	bl	8000648 <__aeabi_dmul>
 80111bc:	a352      	add	r3, pc, #328	; (adr r3, 8011308 <__ieee754_pow+0x9f0>)
 80111be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c2:	f7ef f88b 	bl	80002dc <__adddf3>
 80111c6:	4622      	mov	r2, r4
 80111c8:	462b      	mov	r3, r5
 80111ca:	f7ef fa3d 	bl	8000648 <__aeabi_dmul>
 80111ce:	4602      	mov	r2, r0
 80111d0:	460b      	mov	r3, r1
 80111d2:	4640      	mov	r0, r8
 80111d4:	4649      	mov	r1, r9
 80111d6:	f7ef f87f 	bl	80002d8 <__aeabi_dsub>
 80111da:	4604      	mov	r4, r0
 80111dc:	460d      	mov	r5, r1
 80111de:	4602      	mov	r2, r0
 80111e0:	460b      	mov	r3, r1
 80111e2:	4640      	mov	r0, r8
 80111e4:	4649      	mov	r1, r9
 80111e6:	f7ef fa2f 	bl	8000648 <__aeabi_dmul>
 80111ea:	2200      	movs	r2, #0
 80111ec:	e9cd 0100 	strd	r0, r1, [sp]
 80111f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef f86e 	bl	80002d8 <__aeabi_dsub>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011204:	f7ef fb4a 	bl	800089c <__aeabi_ddiv>
 8011208:	4632      	mov	r2, r6
 801120a:	4604      	mov	r4, r0
 801120c:	460d      	mov	r5, r1
 801120e:	463b      	mov	r3, r7
 8011210:	4640      	mov	r0, r8
 8011212:	4649      	mov	r1, r9
 8011214:	f7ef fa18 	bl	8000648 <__aeabi_dmul>
 8011218:	4632      	mov	r2, r6
 801121a:	463b      	mov	r3, r7
 801121c:	f7ef f85e 	bl	80002dc <__adddf3>
 8011220:	4602      	mov	r2, r0
 8011222:	460b      	mov	r3, r1
 8011224:	4620      	mov	r0, r4
 8011226:	4629      	mov	r1, r5
 8011228:	f7ef f856 	bl	80002d8 <__aeabi_dsub>
 801122c:	4642      	mov	r2, r8
 801122e:	464b      	mov	r3, r9
 8011230:	f7ef f852 	bl	80002d8 <__aeabi_dsub>
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	2000      	movs	r0, #0
 801123a:	4939      	ldr	r1, [pc, #228]	; (8011320 <__ieee754_pow+0xa08>)
 801123c:	f7ef f84c 	bl	80002d8 <__aeabi_dsub>
 8011240:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011244:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011248:	4602      	mov	r2, r0
 801124a:	460b      	mov	r3, r1
 801124c:	da2f      	bge.n	80112ae <__ieee754_pow+0x996>
 801124e:	4650      	mov	r0, sl
 8011250:	ec43 2b10 	vmov	d0, r2, r3
 8011254:	f000 f9c0 	bl	80115d8 <scalbn>
 8011258:	ec51 0b10 	vmov	r0, r1, d0
 801125c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011260:	f7ff bbf1 	b.w	8010a46 <__ieee754_pow+0x12e>
 8011264:	4b2f      	ldr	r3, [pc, #188]	; (8011324 <__ieee754_pow+0xa0c>)
 8011266:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801126a:	429e      	cmp	r6, r3
 801126c:	f77f af0c 	ble.w	8011088 <__ieee754_pow+0x770>
 8011270:	4b2d      	ldr	r3, [pc, #180]	; (8011328 <__ieee754_pow+0xa10>)
 8011272:	440b      	add	r3, r1
 8011274:	4303      	orrs	r3, r0
 8011276:	d00b      	beq.n	8011290 <__ieee754_pow+0x978>
 8011278:	a325      	add	r3, pc, #148	; (adr r3, 8011310 <__ieee754_pow+0x9f8>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011282:	f7ef f9e1 	bl	8000648 <__aeabi_dmul>
 8011286:	a322      	add	r3, pc, #136	; (adr r3, 8011310 <__ieee754_pow+0x9f8>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	f7ff bbdb 	b.w	8010a46 <__ieee754_pow+0x12e>
 8011290:	4622      	mov	r2, r4
 8011292:	462b      	mov	r3, r5
 8011294:	f7ef f820 	bl	80002d8 <__aeabi_dsub>
 8011298:	4642      	mov	r2, r8
 801129a:	464b      	mov	r3, r9
 801129c:	f7ef fc5a 	bl	8000b54 <__aeabi_dcmpge>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	f43f aef1 	beq.w	8011088 <__ieee754_pow+0x770>
 80112a6:	e7e7      	b.n	8011278 <__ieee754_pow+0x960>
 80112a8:	f04f 0a00 	mov.w	sl, #0
 80112ac:	e718      	b.n	80110e0 <__ieee754_pow+0x7c8>
 80112ae:	4621      	mov	r1, r4
 80112b0:	e7d4      	b.n	801125c <__ieee754_pow+0x944>
 80112b2:	2000      	movs	r0, #0
 80112b4:	491a      	ldr	r1, [pc, #104]	; (8011320 <__ieee754_pow+0xa08>)
 80112b6:	f7ff bb8f 	b.w	80109d8 <__ieee754_pow+0xc0>
 80112ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112be:	f7ff bb8b 	b.w	80109d8 <__ieee754_pow+0xc0>
 80112c2:	4630      	mov	r0, r6
 80112c4:	4639      	mov	r1, r7
 80112c6:	f7ff bb87 	b.w	80109d8 <__ieee754_pow+0xc0>
 80112ca:	4693      	mov	fp, r2
 80112cc:	f7ff bb98 	b.w	8010a00 <__ieee754_pow+0xe8>
 80112d0:	00000000 	.word	0x00000000
 80112d4:	3fe62e43 	.word	0x3fe62e43
 80112d8:	fefa39ef 	.word	0xfefa39ef
 80112dc:	3fe62e42 	.word	0x3fe62e42
 80112e0:	0ca86c39 	.word	0x0ca86c39
 80112e4:	be205c61 	.word	0xbe205c61
 80112e8:	72bea4d0 	.word	0x72bea4d0
 80112ec:	3e663769 	.word	0x3e663769
 80112f0:	c5d26bf1 	.word	0xc5d26bf1
 80112f4:	3ebbbd41 	.word	0x3ebbbd41
 80112f8:	af25de2c 	.word	0xaf25de2c
 80112fc:	3f11566a 	.word	0x3f11566a
 8011300:	16bebd93 	.word	0x16bebd93
 8011304:	3f66c16c 	.word	0x3f66c16c
 8011308:	5555553e 	.word	0x5555553e
 801130c:	3fc55555 	.word	0x3fc55555
 8011310:	c2f8f359 	.word	0xc2f8f359
 8011314:	01a56e1f 	.word	0x01a56e1f
 8011318:	3fe00000 	.word	0x3fe00000
 801131c:	000fffff 	.word	0x000fffff
 8011320:	3ff00000 	.word	0x3ff00000
 8011324:	4090cbff 	.word	0x4090cbff
 8011328:	3f6f3400 	.word	0x3f6f3400
 801132c:	652b82fe 	.word	0x652b82fe
 8011330:	3c971547 	.word	0x3c971547

08011334 <__ieee754_sqrt>:
 8011334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011338:	4955      	ldr	r1, [pc, #340]	; (8011490 <__ieee754_sqrt+0x15c>)
 801133a:	ec55 4b10 	vmov	r4, r5, d0
 801133e:	43a9      	bics	r1, r5
 8011340:	462b      	mov	r3, r5
 8011342:	462a      	mov	r2, r5
 8011344:	d112      	bne.n	801136c <__ieee754_sqrt+0x38>
 8011346:	ee10 2a10 	vmov	r2, s0
 801134a:	ee10 0a10 	vmov	r0, s0
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f97a 	bl	8000648 <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4620      	mov	r0, r4
 801135a:	4629      	mov	r1, r5
 801135c:	f7ee ffbe 	bl	80002dc <__adddf3>
 8011360:	4604      	mov	r4, r0
 8011362:	460d      	mov	r5, r1
 8011364:	ec45 4b10 	vmov	d0, r4, r5
 8011368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136c:	2d00      	cmp	r5, #0
 801136e:	ee10 0a10 	vmov	r0, s0
 8011372:	4621      	mov	r1, r4
 8011374:	dc0f      	bgt.n	8011396 <__ieee754_sqrt+0x62>
 8011376:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801137a:	4330      	orrs	r0, r6
 801137c:	d0f2      	beq.n	8011364 <__ieee754_sqrt+0x30>
 801137e:	b155      	cbz	r5, 8011396 <__ieee754_sqrt+0x62>
 8011380:	ee10 2a10 	vmov	r2, s0
 8011384:	4620      	mov	r0, r4
 8011386:	4629      	mov	r1, r5
 8011388:	f7ee ffa6 	bl	80002d8 <__aeabi_dsub>
 801138c:	4602      	mov	r2, r0
 801138e:	460b      	mov	r3, r1
 8011390:	f7ef fa84 	bl	800089c <__aeabi_ddiv>
 8011394:	e7e4      	b.n	8011360 <__ieee754_sqrt+0x2c>
 8011396:	151b      	asrs	r3, r3, #20
 8011398:	d073      	beq.n	8011482 <__ieee754_sqrt+0x14e>
 801139a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801139e:	07dd      	lsls	r5, r3, #31
 80113a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80113a4:	bf48      	it	mi
 80113a6:	0fc8      	lsrmi	r0, r1, #31
 80113a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80113ac:	bf44      	itt	mi
 80113ae:	0049      	lslmi	r1, r1, #1
 80113b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80113b4:	2500      	movs	r5, #0
 80113b6:	1058      	asrs	r0, r3, #1
 80113b8:	0fcb      	lsrs	r3, r1, #31
 80113ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80113be:	0049      	lsls	r1, r1, #1
 80113c0:	2316      	movs	r3, #22
 80113c2:	462c      	mov	r4, r5
 80113c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80113c8:	19a7      	adds	r7, r4, r6
 80113ca:	4297      	cmp	r7, r2
 80113cc:	bfde      	ittt	le
 80113ce:	19bc      	addle	r4, r7, r6
 80113d0:	1bd2      	suble	r2, r2, r7
 80113d2:	19ad      	addle	r5, r5, r6
 80113d4:	0fcf      	lsrs	r7, r1, #31
 80113d6:	3b01      	subs	r3, #1
 80113d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80113dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80113e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80113e4:	d1f0      	bne.n	80113c8 <__ieee754_sqrt+0x94>
 80113e6:	f04f 0c20 	mov.w	ip, #32
 80113ea:	469e      	mov	lr, r3
 80113ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80113f0:	42a2      	cmp	r2, r4
 80113f2:	eb06 070e 	add.w	r7, r6, lr
 80113f6:	dc02      	bgt.n	80113fe <__ieee754_sqrt+0xca>
 80113f8:	d112      	bne.n	8011420 <__ieee754_sqrt+0xec>
 80113fa:	428f      	cmp	r7, r1
 80113fc:	d810      	bhi.n	8011420 <__ieee754_sqrt+0xec>
 80113fe:	2f00      	cmp	r7, #0
 8011400:	eb07 0e06 	add.w	lr, r7, r6
 8011404:	da42      	bge.n	801148c <__ieee754_sqrt+0x158>
 8011406:	f1be 0f00 	cmp.w	lr, #0
 801140a:	db3f      	blt.n	801148c <__ieee754_sqrt+0x158>
 801140c:	f104 0801 	add.w	r8, r4, #1
 8011410:	1b12      	subs	r2, r2, r4
 8011412:	428f      	cmp	r7, r1
 8011414:	bf88      	it	hi
 8011416:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801141a:	1bc9      	subs	r1, r1, r7
 801141c:	4433      	add	r3, r6
 801141e:	4644      	mov	r4, r8
 8011420:	0052      	lsls	r2, r2, #1
 8011422:	f1bc 0c01 	subs.w	ip, ip, #1
 8011426:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801142a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801142e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011432:	d1dd      	bne.n	80113f0 <__ieee754_sqrt+0xbc>
 8011434:	430a      	orrs	r2, r1
 8011436:	d006      	beq.n	8011446 <__ieee754_sqrt+0x112>
 8011438:	1c5c      	adds	r4, r3, #1
 801143a:	bf13      	iteet	ne
 801143c:	3301      	addne	r3, #1
 801143e:	3501      	addeq	r5, #1
 8011440:	4663      	moveq	r3, ip
 8011442:	f023 0301 	bicne.w	r3, r3, #1
 8011446:	106a      	asrs	r2, r5, #1
 8011448:	085b      	lsrs	r3, r3, #1
 801144a:	07e9      	lsls	r1, r5, #31
 801144c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011450:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011454:	bf48      	it	mi
 8011456:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801145a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801145e:	461c      	mov	r4, r3
 8011460:	e780      	b.n	8011364 <__ieee754_sqrt+0x30>
 8011462:	0aca      	lsrs	r2, r1, #11
 8011464:	3815      	subs	r0, #21
 8011466:	0549      	lsls	r1, r1, #21
 8011468:	2a00      	cmp	r2, #0
 801146a:	d0fa      	beq.n	8011462 <__ieee754_sqrt+0x12e>
 801146c:	02d6      	lsls	r6, r2, #11
 801146e:	d50a      	bpl.n	8011486 <__ieee754_sqrt+0x152>
 8011470:	f1c3 0420 	rsb	r4, r3, #32
 8011474:	fa21 f404 	lsr.w	r4, r1, r4
 8011478:	1e5d      	subs	r5, r3, #1
 801147a:	4099      	lsls	r1, r3
 801147c:	4322      	orrs	r2, r4
 801147e:	1b43      	subs	r3, r0, r5
 8011480:	e78b      	b.n	801139a <__ieee754_sqrt+0x66>
 8011482:	4618      	mov	r0, r3
 8011484:	e7f0      	b.n	8011468 <__ieee754_sqrt+0x134>
 8011486:	0052      	lsls	r2, r2, #1
 8011488:	3301      	adds	r3, #1
 801148a:	e7ef      	b.n	801146c <__ieee754_sqrt+0x138>
 801148c:	46a0      	mov	r8, r4
 801148e:	e7bf      	b.n	8011410 <__ieee754_sqrt+0xdc>
 8011490:	7ff00000 	.word	0x7ff00000

08011494 <fabs>:
 8011494:	ec51 0b10 	vmov	r0, r1, d0
 8011498:	ee10 2a10 	vmov	r2, s0
 801149c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114a0:	ec43 2b10 	vmov	d0, r2, r3
 80114a4:	4770      	bx	lr

080114a6 <finite>:
 80114a6:	ee10 3a90 	vmov	r3, s1
 80114aa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80114ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80114b2:	0fc0      	lsrs	r0, r0, #31
 80114b4:	4770      	bx	lr

080114b6 <matherr>:
 80114b6:	2000      	movs	r0, #0
 80114b8:	4770      	bx	lr
 80114ba:	0000      	movs	r0, r0
 80114bc:	0000      	movs	r0, r0
	...

080114c0 <nan>:
 80114c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114c8 <nan+0x8>
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop
 80114c8:	00000000 	.word	0x00000000
 80114cc:	7ff80000 	.word	0x7ff80000

080114d0 <rint>:
 80114d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114d2:	ec51 0b10 	vmov	r0, r1, d0
 80114d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80114de:	2e13      	cmp	r6, #19
 80114e0:	460b      	mov	r3, r1
 80114e2:	ee10 4a10 	vmov	r4, s0
 80114e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80114ea:	dc56      	bgt.n	801159a <rint+0xca>
 80114ec:	2e00      	cmp	r6, #0
 80114ee:	da2b      	bge.n	8011548 <rint+0x78>
 80114f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80114f4:	4302      	orrs	r2, r0
 80114f6:	d023      	beq.n	8011540 <rint+0x70>
 80114f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80114fc:	4302      	orrs	r2, r0
 80114fe:	4254      	negs	r4, r2
 8011500:	4314      	orrs	r4, r2
 8011502:	0c4b      	lsrs	r3, r1, #17
 8011504:	0b24      	lsrs	r4, r4, #12
 8011506:	045b      	lsls	r3, r3, #17
 8011508:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801150c:	ea44 0103 	orr.w	r1, r4, r3
 8011510:	460b      	mov	r3, r1
 8011512:	492f      	ldr	r1, [pc, #188]	; (80115d0 <rint+0x100>)
 8011514:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011518:	e9d1 6700 	ldrd	r6, r7, [r1]
 801151c:	4602      	mov	r2, r0
 801151e:	4639      	mov	r1, r7
 8011520:	4630      	mov	r0, r6
 8011522:	f7ee fedb 	bl	80002dc <__adddf3>
 8011526:	e9cd 0100 	strd	r0, r1, [sp]
 801152a:	463b      	mov	r3, r7
 801152c:	4632      	mov	r2, r6
 801152e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011532:	f7ee fed1 	bl	80002d8 <__aeabi_dsub>
 8011536:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801153a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801153e:	4639      	mov	r1, r7
 8011540:	ec41 0b10 	vmov	d0, r0, r1
 8011544:	b003      	add	sp, #12
 8011546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011548:	4a22      	ldr	r2, [pc, #136]	; (80115d4 <rint+0x104>)
 801154a:	4132      	asrs	r2, r6
 801154c:	ea01 0702 	and.w	r7, r1, r2
 8011550:	4307      	orrs	r7, r0
 8011552:	d0f5      	beq.n	8011540 <rint+0x70>
 8011554:	0852      	lsrs	r2, r2, #1
 8011556:	4011      	ands	r1, r2
 8011558:	430c      	orrs	r4, r1
 801155a:	d00b      	beq.n	8011574 <rint+0xa4>
 801155c:	ea23 0202 	bic.w	r2, r3, r2
 8011560:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011564:	2e13      	cmp	r6, #19
 8011566:	fa43 f306 	asr.w	r3, r3, r6
 801156a:	bf0c      	ite	eq
 801156c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011570:	2400      	movne	r4, #0
 8011572:	4313      	orrs	r3, r2
 8011574:	4916      	ldr	r1, [pc, #88]	; (80115d0 <rint+0x100>)
 8011576:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801157a:	4622      	mov	r2, r4
 801157c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011580:	4620      	mov	r0, r4
 8011582:	4629      	mov	r1, r5
 8011584:	f7ee feaa 	bl	80002dc <__adddf3>
 8011588:	e9cd 0100 	strd	r0, r1, [sp]
 801158c:	4622      	mov	r2, r4
 801158e:	462b      	mov	r3, r5
 8011590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011594:	f7ee fea0 	bl	80002d8 <__aeabi_dsub>
 8011598:	e7d2      	b.n	8011540 <rint+0x70>
 801159a:	2e33      	cmp	r6, #51	; 0x33
 801159c:	dd07      	ble.n	80115ae <rint+0xde>
 801159e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80115a2:	d1cd      	bne.n	8011540 <rint+0x70>
 80115a4:	ee10 2a10 	vmov	r2, s0
 80115a8:	f7ee fe98 	bl	80002dc <__adddf3>
 80115ac:	e7c8      	b.n	8011540 <rint+0x70>
 80115ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80115b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115b6:	40f2      	lsrs	r2, r6
 80115b8:	4210      	tst	r0, r2
 80115ba:	d0c1      	beq.n	8011540 <rint+0x70>
 80115bc:	0852      	lsrs	r2, r2, #1
 80115be:	4210      	tst	r0, r2
 80115c0:	bf1f      	itttt	ne
 80115c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80115c6:	ea20 0202 	bicne.w	r2, r0, r2
 80115ca:	4134      	asrne	r4, r6
 80115cc:	4314      	orrne	r4, r2
 80115ce:	e7d1      	b.n	8011574 <rint+0xa4>
 80115d0:	08012ec0 	.word	0x08012ec0
 80115d4:	000fffff 	.word	0x000fffff

080115d8 <scalbn>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	ec55 4b10 	vmov	r4, r5, d0
 80115de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80115e2:	4606      	mov	r6, r0
 80115e4:	462b      	mov	r3, r5
 80115e6:	b9aa      	cbnz	r2, 8011614 <scalbn+0x3c>
 80115e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80115ec:	4323      	orrs	r3, r4
 80115ee:	d03b      	beq.n	8011668 <scalbn+0x90>
 80115f0:	4b31      	ldr	r3, [pc, #196]	; (80116b8 <scalbn+0xe0>)
 80115f2:	4629      	mov	r1, r5
 80115f4:	2200      	movs	r2, #0
 80115f6:	ee10 0a10 	vmov	r0, s0
 80115fa:	f7ef f825 	bl	8000648 <__aeabi_dmul>
 80115fe:	4b2f      	ldr	r3, [pc, #188]	; (80116bc <scalbn+0xe4>)
 8011600:	429e      	cmp	r6, r3
 8011602:	4604      	mov	r4, r0
 8011604:	460d      	mov	r5, r1
 8011606:	da12      	bge.n	801162e <scalbn+0x56>
 8011608:	a327      	add	r3, pc, #156	; (adr r3, 80116a8 <scalbn+0xd0>)
 801160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160e:	f7ef f81b 	bl	8000648 <__aeabi_dmul>
 8011612:	e009      	b.n	8011628 <scalbn+0x50>
 8011614:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011618:	428a      	cmp	r2, r1
 801161a:	d10c      	bne.n	8011636 <scalbn+0x5e>
 801161c:	ee10 2a10 	vmov	r2, s0
 8011620:	4620      	mov	r0, r4
 8011622:	4629      	mov	r1, r5
 8011624:	f7ee fe5a 	bl	80002dc <__adddf3>
 8011628:	4604      	mov	r4, r0
 801162a:	460d      	mov	r5, r1
 801162c:	e01c      	b.n	8011668 <scalbn+0x90>
 801162e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011632:	460b      	mov	r3, r1
 8011634:	3a36      	subs	r2, #54	; 0x36
 8011636:	4432      	add	r2, r6
 8011638:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801163c:	428a      	cmp	r2, r1
 801163e:	dd0b      	ble.n	8011658 <scalbn+0x80>
 8011640:	ec45 4b11 	vmov	d1, r4, r5
 8011644:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80116b0 <scalbn+0xd8>
 8011648:	f000 f9f0 	bl	8011a2c <copysign>
 801164c:	a318      	add	r3, pc, #96	; (adr r3, 80116b0 <scalbn+0xd8>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	ec51 0b10 	vmov	r0, r1, d0
 8011656:	e7da      	b.n	801160e <scalbn+0x36>
 8011658:	2a00      	cmp	r2, #0
 801165a:	dd08      	ble.n	801166e <scalbn+0x96>
 801165c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011660:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011664:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011668:	ec45 4b10 	vmov	d0, r4, r5
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011672:	da0d      	bge.n	8011690 <scalbn+0xb8>
 8011674:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011678:	429e      	cmp	r6, r3
 801167a:	ec45 4b11 	vmov	d1, r4, r5
 801167e:	dce1      	bgt.n	8011644 <scalbn+0x6c>
 8011680:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80116a8 <scalbn+0xd0>
 8011684:	f000 f9d2 	bl	8011a2c <copysign>
 8011688:	a307      	add	r3, pc, #28	; (adr r3, 80116a8 <scalbn+0xd0>)
 801168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168e:	e7e0      	b.n	8011652 <scalbn+0x7a>
 8011690:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011694:	3236      	adds	r2, #54	; 0x36
 8011696:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801169a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801169e:	4620      	mov	r0, r4
 80116a0:	4629      	mov	r1, r5
 80116a2:	2200      	movs	r2, #0
 80116a4:	4b06      	ldr	r3, [pc, #24]	; (80116c0 <scalbn+0xe8>)
 80116a6:	e7b2      	b.n	801160e <scalbn+0x36>
 80116a8:	c2f8f359 	.word	0xc2f8f359
 80116ac:	01a56e1f 	.word	0x01a56e1f
 80116b0:	8800759c 	.word	0x8800759c
 80116b4:	7e37e43c 	.word	0x7e37e43c
 80116b8:	43500000 	.word	0x43500000
 80116bc:	ffff3cb0 	.word	0xffff3cb0
 80116c0:	3c900000 	.word	0x3c900000
 80116c4:	00000000 	.word	0x00000000

080116c8 <__ieee754_log>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	ec51 0b10 	vmov	r0, r1, d0
 80116d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80116d4:	b087      	sub	sp, #28
 80116d6:	460d      	mov	r5, r1
 80116d8:	da27      	bge.n	801172a <__ieee754_log+0x62>
 80116da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116de:	4303      	orrs	r3, r0
 80116e0:	ee10 2a10 	vmov	r2, s0
 80116e4:	d10a      	bne.n	80116fc <__ieee754_log+0x34>
 80116e6:	49cc      	ldr	r1, [pc, #816]	; (8011a18 <__ieee754_log+0x350>)
 80116e8:	2200      	movs	r2, #0
 80116ea:	2300      	movs	r3, #0
 80116ec:	2000      	movs	r0, #0
 80116ee:	f7ef f8d5 	bl	800089c <__aeabi_ddiv>
 80116f2:	ec41 0b10 	vmov	d0, r0, r1
 80116f6:	b007      	add	sp, #28
 80116f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fc:	2900      	cmp	r1, #0
 80116fe:	da05      	bge.n	801170c <__ieee754_log+0x44>
 8011700:	460b      	mov	r3, r1
 8011702:	f7ee fde9 	bl	80002d8 <__aeabi_dsub>
 8011706:	2200      	movs	r2, #0
 8011708:	2300      	movs	r3, #0
 801170a:	e7f0      	b.n	80116ee <__ieee754_log+0x26>
 801170c:	4bc3      	ldr	r3, [pc, #780]	; (8011a1c <__ieee754_log+0x354>)
 801170e:	2200      	movs	r2, #0
 8011710:	f7ee ff9a 	bl	8000648 <__aeabi_dmul>
 8011714:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8011718:	460d      	mov	r5, r1
 801171a:	4ac1      	ldr	r2, [pc, #772]	; (8011a20 <__ieee754_log+0x358>)
 801171c:	4295      	cmp	r5, r2
 801171e:	dd06      	ble.n	801172e <__ieee754_log+0x66>
 8011720:	4602      	mov	r2, r0
 8011722:	460b      	mov	r3, r1
 8011724:	f7ee fdda 	bl	80002dc <__adddf3>
 8011728:	e7e3      	b.n	80116f2 <__ieee754_log+0x2a>
 801172a:	2300      	movs	r3, #0
 801172c:	e7f5      	b.n	801171a <__ieee754_log+0x52>
 801172e:	152c      	asrs	r4, r5, #20
 8011730:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011734:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011738:	441c      	add	r4, r3
 801173a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801173e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8011742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011746:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801174a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801174e:	ea42 0105 	orr.w	r1, r2, r5
 8011752:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8011756:	2200      	movs	r2, #0
 8011758:	4bb2      	ldr	r3, [pc, #712]	; (8011a24 <__ieee754_log+0x35c>)
 801175a:	f7ee fdbd 	bl	80002d8 <__aeabi_dsub>
 801175e:	1cab      	adds	r3, r5, #2
 8011760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011764:	2b02      	cmp	r3, #2
 8011766:	4682      	mov	sl, r0
 8011768:	468b      	mov	fp, r1
 801176a:	f04f 0200 	mov.w	r2, #0
 801176e:	dc53      	bgt.n	8011818 <__ieee754_log+0x150>
 8011770:	2300      	movs	r3, #0
 8011772:	f7ef f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 8011776:	b1d0      	cbz	r0, 80117ae <__ieee754_log+0xe6>
 8011778:	2c00      	cmp	r4, #0
 801177a:	f000 8120 	beq.w	80119be <__ieee754_log+0x2f6>
 801177e:	4620      	mov	r0, r4
 8011780:	f7ee fef8 	bl	8000574 <__aeabi_i2d>
 8011784:	a390      	add	r3, pc, #576	; (adr r3, 80119c8 <__ieee754_log+0x300>)
 8011786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178a:	4606      	mov	r6, r0
 801178c:	460f      	mov	r7, r1
 801178e:	f7ee ff5b 	bl	8000648 <__aeabi_dmul>
 8011792:	a38f      	add	r3, pc, #572	; (adr r3, 80119d0 <__ieee754_log+0x308>)
 8011794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011798:	4604      	mov	r4, r0
 801179a:	460d      	mov	r5, r1
 801179c:	4630      	mov	r0, r6
 801179e:	4639      	mov	r1, r7
 80117a0:	f7ee ff52 	bl	8000648 <__aeabi_dmul>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	4620      	mov	r0, r4
 80117aa:	4629      	mov	r1, r5
 80117ac:	e7ba      	b.n	8011724 <__ieee754_log+0x5c>
 80117ae:	a38a      	add	r3, pc, #552	; (adr r3, 80119d8 <__ieee754_log+0x310>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4650      	mov	r0, sl
 80117b6:	4659      	mov	r1, fp
 80117b8:	f7ee ff46 	bl	8000648 <__aeabi_dmul>
 80117bc:	4602      	mov	r2, r0
 80117be:	460b      	mov	r3, r1
 80117c0:	2000      	movs	r0, #0
 80117c2:	4999      	ldr	r1, [pc, #612]	; (8011a28 <__ieee754_log+0x360>)
 80117c4:	f7ee fd88 	bl	80002d8 <__aeabi_dsub>
 80117c8:	4652      	mov	r2, sl
 80117ca:	4606      	mov	r6, r0
 80117cc:	460f      	mov	r7, r1
 80117ce:	465b      	mov	r3, fp
 80117d0:	4650      	mov	r0, sl
 80117d2:	4659      	mov	r1, fp
 80117d4:	f7ee ff38 	bl	8000648 <__aeabi_dmul>
 80117d8:	4602      	mov	r2, r0
 80117da:	460b      	mov	r3, r1
 80117dc:	4630      	mov	r0, r6
 80117de:	4639      	mov	r1, r7
 80117e0:	f7ee ff32 	bl	8000648 <__aeabi_dmul>
 80117e4:	4606      	mov	r6, r0
 80117e6:	460f      	mov	r7, r1
 80117e8:	b914      	cbnz	r4, 80117f0 <__ieee754_log+0x128>
 80117ea:	4632      	mov	r2, r6
 80117ec:	463b      	mov	r3, r7
 80117ee:	e0a0      	b.n	8011932 <__ieee754_log+0x26a>
 80117f0:	4620      	mov	r0, r4
 80117f2:	f7ee febf 	bl	8000574 <__aeabi_i2d>
 80117f6:	a374      	add	r3, pc, #464	; (adr r3, 80119c8 <__ieee754_log+0x300>)
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	4680      	mov	r8, r0
 80117fe:	4689      	mov	r9, r1
 8011800:	f7ee ff22 	bl	8000648 <__aeabi_dmul>
 8011804:	a372      	add	r3, pc, #456	; (adr r3, 80119d0 <__ieee754_log+0x308>)
 8011806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180a:	4604      	mov	r4, r0
 801180c:	460d      	mov	r5, r1
 801180e:	4640      	mov	r0, r8
 8011810:	4649      	mov	r1, r9
 8011812:	f7ee ff19 	bl	8000648 <__aeabi_dmul>
 8011816:	e0a5      	b.n	8011964 <__ieee754_log+0x29c>
 8011818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801181c:	f7ee fd5e 	bl	80002dc <__adddf3>
 8011820:	4602      	mov	r2, r0
 8011822:	460b      	mov	r3, r1
 8011824:	4650      	mov	r0, sl
 8011826:	4659      	mov	r1, fp
 8011828:	f7ef f838 	bl	800089c <__aeabi_ddiv>
 801182c:	e9cd 0100 	strd	r0, r1, [sp]
 8011830:	4620      	mov	r0, r4
 8011832:	f7ee fe9f 	bl	8000574 <__aeabi_i2d>
 8011836:	e9dd 2300 	ldrd	r2, r3, [sp]
 801183a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801183e:	4610      	mov	r0, r2
 8011840:	4619      	mov	r1, r3
 8011842:	f7ee ff01 	bl	8000648 <__aeabi_dmul>
 8011846:	4602      	mov	r2, r0
 8011848:	460b      	mov	r3, r1
 801184a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801184e:	f7ee fefb 	bl	8000648 <__aeabi_dmul>
 8011852:	a363      	add	r3, pc, #396	; (adr r3, 80119e0 <__ieee754_log+0x318>)
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	4680      	mov	r8, r0
 801185a:	4689      	mov	r9, r1
 801185c:	f7ee fef4 	bl	8000648 <__aeabi_dmul>
 8011860:	a361      	add	r3, pc, #388	; (adr r3, 80119e8 <__ieee754_log+0x320>)
 8011862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011866:	f7ee fd39 	bl	80002dc <__adddf3>
 801186a:	4642      	mov	r2, r8
 801186c:	464b      	mov	r3, r9
 801186e:	f7ee feeb 	bl	8000648 <__aeabi_dmul>
 8011872:	a35f      	add	r3, pc, #380	; (adr r3, 80119f0 <__ieee754_log+0x328>)
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	f7ee fd30 	bl	80002dc <__adddf3>
 801187c:	4642      	mov	r2, r8
 801187e:	464b      	mov	r3, r9
 8011880:	f7ee fee2 	bl	8000648 <__aeabi_dmul>
 8011884:	a35c      	add	r3, pc, #368	; (adr r3, 80119f8 <__ieee754_log+0x330>)
 8011886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188a:	f7ee fd27 	bl	80002dc <__adddf3>
 801188e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011892:	f7ee fed9 	bl	8000648 <__aeabi_dmul>
 8011896:	a35a      	add	r3, pc, #360	; (adr r3, 8011a00 <__ieee754_log+0x338>)
 8011898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118a0:	4640      	mov	r0, r8
 80118a2:	4649      	mov	r1, r9
 80118a4:	f7ee fed0 	bl	8000648 <__aeabi_dmul>
 80118a8:	a357      	add	r3, pc, #348	; (adr r3, 8011a08 <__ieee754_log+0x340>)
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	f7ee fd15 	bl	80002dc <__adddf3>
 80118b2:	4642      	mov	r2, r8
 80118b4:	464b      	mov	r3, r9
 80118b6:	f7ee fec7 	bl	8000648 <__aeabi_dmul>
 80118ba:	a355      	add	r3, pc, #340	; (adr r3, 8011a10 <__ieee754_log+0x348>)
 80118bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c0:	f7ee fd0c 	bl	80002dc <__adddf3>
 80118c4:	4642      	mov	r2, r8
 80118c6:	464b      	mov	r3, r9
 80118c8:	f7ee febe 	bl	8000648 <__aeabi_dmul>
 80118cc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80118d0:	4602      	mov	r2, r0
 80118d2:	460b      	mov	r3, r1
 80118d4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80118d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118dc:	f7ee fcfe 	bl	80002dc <__adddf3>
 80118e0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80118e4:	3551      	adds	r5, #81	; 0x51
 80118e6:	4335      	orrs	r5, r6
 80118e8:	2d00      	cmp	r5, #0
 80118ea:	4680      	mov	r8, r0
 80118ec:	4689      	mov	r9, r1
 80118ee:	dd48      	ble.n	8011982 <__ieee754_log+0x2ba>
 80118f0:	2200      	movs	r2, #0
 80118f2:	4b4d      	ldr	r3, [pc, #308]	; (8011a28 <__ieee754_log+0x360>)
 80118f4:	4650      	mov	r0, sl
 80118f6:	4659      	mov	r1, fp
 80118f8:	f7ee fea6 	bl	8000648 <__aeabi_dmul>
 80118fc:	4652      	mov	r2, sl
 80118fe:	465b      	mov	r3, fp
 8011900:	f7ee fea2 	bl	8000648 <__aeabi_dmul>
 8011904:	4602      	mov	r2, r0
 8011906:	460b      	mov	r3, r1
 8011908:	4606      	mov	r6, r0
 801190a:	460f      	mov	r7, r1
 801190c:	4640      	mov	r0, r8
 801190e:	4649      	mov	r1, r9
 8011910:	f7ee fce4 	bl	80002dc <__adddf3>
 8011914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011918:	f7ee fe96 	bl	8000648 <__aeabi_dmul>
 801191c:	4680      	mov	r8, r0
 801191e:	4689      	mov	r9, r1
 8011920:	b964      	cbnz	r4, 801193c <__ieee754_log+0x274>
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	4630      	mov	r0, r6
 8011928:	4639      	mov	r1, r7
 801192a:	f7ee fcd5 	bl	80002d8 <__aeabi_dsub>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4650      	mov	r0, sl
 8011934:	4659      	mov	r1, fp
 8011936:	f7ee fccf 	bl	80002d8 <__aeabi_dsub>
 801193a:	e6da      	b.n	80116f2 <__ieee754_log+0x2a>
 801193c:	a322      	add	r3, pc, #136	; (adr r3, 80119c8 <__ieee754_log+0x300>)
 801193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011946:	f7ee fe7f 	bl	8000648 <__aeabi_dmul>
 801194a:	a321      	add	r3, pc, #132	; (adr r3, 80119d0 <__ieee754_log+0x308>)
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	4604      	mov	r4, r0
 8011952:	460d      	mov	r5, r1
 8011954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011958:	f7ee fe76 	bl	8000648 <__aeabi_dmul>
 801195c:	4642      	mov	r2, r8
 801195e:	464b      	mov	r3, r9
 8011960:	f7ee fcbc 	bl	80002dc <__adddf3>
 8011964:	4602      	mov	r2, r0
 8011966:	460b      	mov	r3, r1
 8011968:	4630      	mov	r0, r6
 801196a:	4639      	mov	r1, r7
 801196c:	f7ee fcb4 	bl	80002d8 <__aeabi_dsub>
 8011970:	4652      	mov	r2, sl
 8011972:	465b      	mov	r3, fp
 8011974:	f7ee fcb0 	bl	80002d8 <__aeabi_dsub>
 8011978:	4602      	mov	r2, r0
 801197a:	460b      	mov	r3, r1
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	e7d9      	b.n	8011936 <__ieee754_log+0x26e>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4650      	mov	r0, sl
 8011988:	4659      	mov	r1, fp
 801198a:	f7ee fca5 	bl	80002d8 <__aeabi_dsub>
 801198e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011992:	f7ee fe59 	bl	8000648 <__aeabi_dmul>
 8011996:	4606      	mov	r6, r0
 8011998:	460f      	mov	r7, r1
 801199a:	2c00      	cmp	r4, #0
 801199c:	f43f af25 	beq.w	80117ea <__ieee754_log+0x122>
 80119a0:	a309      	add	r3, pc, #36	; (adr r3, 80119c8 <__ieee754_log+0x300>)
 80119a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119aa:	f7ee fe4d 	bl	8000648 <__aeabi_dmul>
 80119ae:	a308      	add	r3, pc, #32	; (adr r3, 80119d0 <__ieee754_log+0x308>)
 80119b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b4:	4604      	mov	r4, r0
 80119b6:	460d      	mov	r5, r1
 80119b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119bc:	e729      	b.n	8011812 <__ieee754_log+0x14a>
 80119be:	2000      	movs	r0, #0
 80119c0:	2100      	movs	r1, #0
 80119c2:	e696      	b.n	80116f2 <__ieee754_log+0x2a>
 80119c4:	f3af 8000 	nop.w
 80119c8:	fee00000 	.word	0xfee00000
 80119cc:	3fe62e42 	.word	0x3fe62e42
 80119d0:	35793c76 	.word	0x35793c76
 80119d4:	3dea39ef 	.word	0x3dea39ef
 80119d8:	55555555 	.word	0x55555555
 80119dc:	3fd55555 	.word	0x3fd55555
 80119e0:	df3e5244 	.word	0xdf3e5244
 80119e4:	3fc2f112 	.word	0x3fc2f112
 80119e8:	96cb03de 	.word	0x96cb03de
 80119ec:	3fc74664 	.word	0x3fc74664
 80119f0:	94229359 	.word	0x94229359
 80119f4:	3fd24924 	.word	0x3fd24924
 80119f8:	55555593 	.word	0x55555593
 80119fc:	3fe55555 	.word	0x3fe55555
 8011a00:	d078c69f 	.word	0xd078c69f
 8011a04:	3fc39a09 	.word	0x3fc39a09
 8011a08:	1d8e78af 	.word	0x1d8e78af
 8011a0c:	3fcc71c5 	.word	0x3fcc71c5
 8011a10:	9997fa04 	.word	0x9997fa04
 8011a14:	3fd99999 	.word	0x3fd99999
 8011a18:	c3500000 	.word	0xc3500000
 8011a1c:	43500000 	.word	0x43500000
 8011a20:	7fefffff 	.word	0x7fefffff
 8011a24:	3ff00000 	.word	0x3ff00000
 8011a28:	3fe00000 	.word	0x3fe00000

08011a2c <copysign>:
 8011a2c:	ec51 0b10 	vmov	r0, r1, d0
 8011a30:	ee11 0a90 	vmov	r0, s3
 8011a34:	ee10 2a10 	vmov	r2, s0
 8011a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011a40:	ea41 0300 	orr.w	r3, r1, r0
 8011a44:	ec43 2b10 	vmov	d0, r2, r3
 8011a48:	4770      	bx	lr
	...

08011a4c <_init>:
 8011a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4e:	bf00      	nop
 8011a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a52:	bc08      	pop	{r3}
 8011a54:	469e      	mov	lr, r3
 8011a56:	4770      	bx	lr

08011a58 <_fini>:
 8011a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5a:	bf00      	nop
 8011a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a5e:	bc08      	pop	{r3}
 8011a60:	469e      	mov	lr, r3
 8011a62:	4770      	bx	lr
