
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a924  0800a924  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a924  0800a924  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a924  0800a924  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a92c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc8  0800b4f4  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800b4f4  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028334  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005410  00000000  00000000  00048f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d50  00000000  00000000  0004e340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a28  00000000  00000000  00050090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ff1a  00000000  00000000  00051ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001faae  00000000  00000000  000819d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124230  00000000  00000000  000a1480  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c56b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d74  00000000  00000000  001c572c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a3bc 	.word	0x0800a3bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a3bc 	.word	0x0800a3bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fcb0 	bl	8008c28 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fc4f 	bl	8008b6c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fe5f 	bl	8008f94 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fb3a 	bl	800896c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fe28 	bl	8002f50 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb36 	bl	8000970 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f8ed 	bl	80094e4 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a3d4 	.word	0x0800a3d4
 8000314:	0800a3e4 	.word	0x0800a3e4

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	482e      	ldr	r0, [pc, #184]	; (80003e8 <DM_UpdateDisplay+0xd0>)
 8000330:	f008 fb1c 	bl	800896c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <DM_UpdateDisplay+0xd4>)
 8000346:	f008 fb11 	bl	800896c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4825      	ldr	r0, [pc, #148]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 800035c:	f008 fb06 	bl	800896c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	4820      	ldr	r0, [pc, #128]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 8000374:	f008 fafa 	bl	800896c <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f854 	bl	800042c <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <DM_UpdateDisplay+0xe4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 fa18 	bl	80007c0 <_DrawGainSelectMenu>

	if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <DM_UpdateDisplay+0xe8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <DM_UpdateDisplay+0x84>
		_DrawFreqSelectMenu();
 8000398:	f000 fa50 	bl	800083c <_DrawFreqSelectMenu>

	if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <DM_UpdateDisplay+0xec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <DM_UpdateDisplay+0x90>
		_DrawBiasSelectMenu();
 80003a4:	f000 fa8a 	bl	80008bc <_DrawBiasSelectMenu>

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <DM_UpdateDisplay+0xf0>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	4639      	mov	r1, r7
 80003b8:	2205      	movs	r2, #5
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fb1c 	bl	80009f8 <DM_AddDigitPadding>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10b      	bne.n	80003de <DM_UpdateDisplay+0xc6>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003c6:	4638      	mov	r0, r7
 80003c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2302      	movs	r3, #2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2232      	movs	r2, #50	; 0x32
 80003d6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003da:	f008 fac7 	bl	800896c <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800a3f4 	.word	0x0800a3f4
 80003ec:	0800a3fc 	.word	0x0800a3fc
 80003f0:	0800a404 	.word	0x0800a404
 80003f4:	0800a40c 	.word	0x0800a40c
 80003f8:	20000be4 	.word	0x20000be4
 80003fc:	20000be5 	.word	0x20000be5
 8000400:	20000be6 	.word	0x20000be6
 8000404:	20000be7 	.word	0x20000be7
 8000408:	40012c00 	.word	0x40012c00

0800040c <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <DM_ShowFuncSelectMenu+0x1c>)
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	7013      	strb	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	20000be4 	.word	0x20000be4

0800042c <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 8000432:	f000 fe43 	bl	80010bc <FuncO_GetOutputMode>
 8000436:	4603      	mov	r3, r0
 8000438:	2b05      	cmp	r3, #5
 800043a:	f200 81a1 	bhi.w	8000780 <_DrawFuncSelectMenu+0x354>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <_DrawFuncSelectMenu+0x18>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800045d 	.word	0x0800045d
 8000448:	080004e3 	.word	0x080004e3
 800044c:	08000569 	.word	0x08000569
 8000450:	080005ef 	.word	0x080005ef
 8000454:	08000675 	.word	0x08000675
 8000458:	080006fb 	.word	0x080006fb
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 800045c:	2300      	movs	r3, #0
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	2302      	movs	r3, #2
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000468:	221e      	movs	r2, #30
 800046a:	210a      	movs	r1, #10
 800046c:	48c6      	ldr	r0, [pc, #792]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 800046e:	f008 fa7d 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	2302      	movs	r3, #2
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2300      	movs	r3, #0
 800047e:	2232      	movs	r2, #50	; 0x32
 8000480:	210a      	movs	r1, #10
 8000482:	48c2      	ldr	r0, [pc, #776]	; (800078c <_DrawFuncSelectMenu+0x360>)
 8000484:	f008 fa72 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	2302      	movs	r3, #2
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2300      	movs	r3, #0
 8000494:	2246      	movs	r2, #70	; 0x46
 8000496:	210a      	movs	r1, #10
 8000498:	48bd      	ldr	r0, [pc, #756]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 800049a:	f008 fa67 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800049e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2302      	movs	r3, #2
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2300      	movs	r3, #0
 80004aa:	225a      	movs	r2, #90	; 0x5a
 80004ac:	210a      	movs	r1, #10
 80004ae:	48b9      	ldr	r0, [pc, #740]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 80004b0:	f008 fa5c 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2302      	movs	r3, #2
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2300      	movs	r3, #0
 80004c0:	226e      	movs	r2, #110	; 0x6e
 80004c2:	210a      	movs	r1, #10
 80004c4:	48b4      	ldr	r0, [pc, #720]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 80004c6:	f008 fa51 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2302      	movs	r3, #2
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	2300      	movs	r3, #0
 80004d6:	2282      	movs	r2, #130	; 0x82
 80004d8:	210a      	movs	r1, #10
 80004da:	48b0      	ldr	r0, [pc, #704]	; (800079c <_DrawFuncSelectMenu+0x370>)
 80004dc:	f008 fa46 	bl	800896c <ILI9341_Draw_Text>
			break;
 80004e0:	e14e      	b.n	8000780 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	221e      	movs	r2, #30
 80004f0:	210a      	movs	r1, #10
 80004f2:	48a5      	ldr	r0, [pc, #660]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 80004f4:	f008 fa3a 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80004f8:	2300      	movs	r3, #0
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000504:	2232      	movs	r2, #50	; 0x32
 8000506:	210a      	movs	r1, #10
 8000508:	48a0      	ldr	r0, [pc, #640]	; (800078c <_DrawFuncSelectMenu+0x360>)
 800050a:	f008 fa2f 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800050e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	2246      	movs	r2, #70	; 0x46
 800051c:	210a      	movs	r1, #10
 800051e:	489c      	ldr	r0, [pc, #624]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 8000520:	f008 fa24 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	225a      	movs	r2, #90	; 0x5a
 8000532:	210a      	movs	r1, #10
 8000534:	4897      	ldr	r0, [pc, #604]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 8000536:	f008 fa19 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2302      	movs	r3, #2
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	226e      	movs	r2, #110	; 0x6e
 8000548:	210a      	movs	r1, #10
 800054a:	4893      	ldr	r0, [pc, #588]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 800054c:	f008 fa0e 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2282      	movs	r2, #130	; 0x82
 800055e:	210a      	movs	r1, #10
 8000560:	488e      	ldr	r0, [pc, #568]	; (800079c <_DrawFuncSelectMenu+0x370>)
 8000562:	f008 fa03 	bl	800896c <ILI9341_Draw_Text>
			break;
 8000566:	e10b      	b.n	8000780 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2302      	movs	r3, #2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	221e      	movs	r2, #30
 8000576:	210a      	movs	r1, #10
 8000578:	4883      	ldr	r0, [pc, #524]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 800057a:	f008 f9f7 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2232      	movs	r2, #50	; 0x32
 800058c:	210a      	movs	r1, #10
 800058e:	487f      	ldr	r0, [pc, #508]	; (800078c <_DrawFuncSelectMenu+0x360>)
 8000590:	f008 f9ec 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000594:	2300      	movs	r3, #0
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	2246      	movs	r2, #70	; 0x46
 80005a2:	210a      	movs	r1, #10
 80005a4:	487a      	ldr	r0, [pc, #488]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 80005a6:	f008 f9e1 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	225a      	movs	r2, #90	; 0x5a
 80005b8:	210a      	movs	r1, #10
 80005ba:	4876      	ldr	r0, [pc, #472]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 80005bc:	f008 f9d6 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	226e      	movs	r2, #110	; 0x6e
 80005ce:	210a      	movs	r1, #10
 80005d0:	4871      	ldr	r0, [pc, #452]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 80005d2:	f008 f9cb 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2302      	movs	r3, #2
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	2282      	movs	r2, #130	; 0x82
 80005e4:	210a      	movs	r1, #10
 80005e6:	486d      	ldr	r0, [pc, #436]	; (800079c <_DrawFuncSelectMenu+0x370>)
 80005e8:	f008 f9c0 	bl	800896c <ILI9341_Draw_Text>
			break;
 80005ec:	e0c8      	b.n	8000780 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	221e      	movs	r2, #30
 80005fc:	210a      	movs	r1, #10
 80005fe:	4862      	ldr	r0, [pc, #392]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 8000600:	f008 f9b4 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2232      	movs	r2, #50	; 0x32
 8000612:	210a      	movs	r1, #10
 8000614:	485d      	ldr	r0, [pc, #372]	; (800078c <_DrawFuncSelectMenu+0x360>)
 8000616:	f008 f9a9 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2246      	movs	r2, #70	; 0x46
 8000628:	210a      	movs	r1, #10
 800062a:	4859      	ldr	r0, [pc, #356]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 800062c:	f008 f99e 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063c:	225a      	movs	r2, #90	; 0x5a
 800063e:	210a      	movs	r1, #10
 8000640:	4854      	ldr	r0, [pc, #336]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 8000642:	f008 f993 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2302      	movs	r3, #2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	226e      	movs	r2, #110	; 0x6e
 8000654:	210a      	movs	r1, #10
 8000656:	4850      	ldr	r0, [pc, #320]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 8000658:	f008 f988 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800065c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2282      	movs	r2, #130	; 0x82
 800066a:	210a      	movs	r1, #10
 800066c:	484b      	ldr	r0, [pc, #300]	; (800079c <_DrawFuncSelectMenu+0x370>)
 800066e:	f008 f97d 	bl	800896c <ILI9341_Draw_Text>
			break;
 8000672:	e085      	b.n	8000780 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	221e      	movs	r2, #30
 8000682:	210a      	movs	r1, #10
 8000684:	4840      	ldr	r0, [pc, #256]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 8000686:	f008 f971 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2302      	movs	r3, #2
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2232      	movs	r2, #50	; 0x32
 8000698:	210a      	movs	r1, #10
 800069a:	483c      	ldr	r0, [pc, #240]	; (800078c <_DrawFuncSelectMenu+0x360>)
 800069c:	f008 f966 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	2246      	movs	r2, #70	; 0x46
 80006ae:	210a      	movs	r1, #10
 80006b0:	4837      	ldr	r0, [pc, #220]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 80006b2:	f008 f95b 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	225a      	movs	r2, #90	; 0x5a
 80006c4:	210a      	movs	r1, #10
 80006c6:	4833      	ldr	r0, [pc, #204]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 80006c8:	f008 f950 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006cc:	2300      	movs	r3, #0
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2302      	movs	r3, #2
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d8:	226e      	movs	r2, #110	; 0x6e
 80006da:	210a      	movs	r1, #10
 80006dc:	482e      	ldr	r0, [pc, #184]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 80006de:	f008 f945 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2302      	movs	r3, #2
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2300      	movs	r3, #0
 80006ee:	2282      	movs	r2, #130	; 0x82
 80006f0:	210a      	movs	r1, #10
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <_DrawFuncSelectMenu+0x370>)
 80006f4:	f008 f93a 	bl	800896c <ILI9341_Draw_Text>
			break;
 80006f8:	e042      	b.n	8000780 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	221e      	movs	r2, #30
 8000708:	210a      	movs	r1, #10
 800070a:	481f      	ldr	r0, [pc, #124]	; (8000788 <_DrawFuncSelectMenu+0x35c>)
 800070c:	f008 f92e 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2302      	movs	r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2232      	movs	r2, #50	; 0x32
 800071e:	210a      	movs	r1, #10
 8000720:	481a      	ldr	r0, [pc, #104]	; (800078c <_DrawFuncSelectMenu+0x360>)
 8000722:	f008 f923 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2302      	movs	r3, #2
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2246      	movs	r2, #70	; 0x46
 8000734:	210a      	movs	r1, #10
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <_DrawFuncSelectMenu+0x364>)
 8000738:	f008 f918 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800073c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2302      	movs	r3, #2
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	225a      	movs	r2, #90	; 0x5a
 800074a:	210a      	movs	r1, #10
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <_DrawFuncSelectMenu+0x368>)
 800074e:	f008 f90d 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2302      	movs	r3, #2
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	226e      	movs	r2, #110	; 0x6e
 8000760:	210a      	movs	r1, #10
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <_DrawFuncSelectMenu+0x36c>)
 8000764:	f008 f902 	bl	800896c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 8000768:	2300      	movs	r3, #0
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2302      	movs	r3, #2
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000774:	2282      	movs	r2, #130	; 0x82
 8000776:	210a      	movs	r1, #10
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <_DrawFuncSelectMenu+0x370>)
 800077a:	f008 f8f7 	bl	800896c <ILI9341_Draw_Text>
			break;
 800077e:	bf00      	nop

	}

}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	0800a414 	.word	0x0800a414
 800078c:	0800a41c 	.word	0x0800a41c
 8000790:	0800a428 	.word	0x0800a428
 8000794:	0800a430 	.word	0x0800a430
 8000798:	0800a43c 	.word	0x0800a43c
 800079c:	0800a448 	.word	0x0800a448

080007a0 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <DM_ShowGainSelectMenu+0x1c>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	7013      	strb	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000be5 	.word	0x20000be5

080007c0 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2302      	movs	r3, #2
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2278      	movs	r2, #120	; 0x78
 80007d4:	210a      	movs	r1, #10
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <_DrawGainSelectMenu+0x58>)
 80007d8:	f008 f8c8 	bl	800896c <ILI9341_Draw_Text>

	char gain[4] = "";
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 80007e0:	f000 fd64 	bl	80012ac <GO_GetOutputGain>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	2204      	movs	r2, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f903 	bl	80009f8 <DM_AddDigitPadding>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10a      	bne.n	800080e <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 80007f8:	1d38      	adds	r0, r7, #4
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	2278      	movs	r2, #120	; 0x78
 8000808:	21fa      	movs	r1, #250	; 0xfa
 800080a:	f008 f8af 	bl	800896c <ILI9341_Draw_Text>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	0800a450 	.word	0x0800a450

0800081c <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <DM_ShowFreqSelectMenu+0x1c>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	7013      	strb	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000be6 	.word	0x20000be6

0800083c <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	2302      	movs	r3, #2
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	2278      	movs	r2, #120	; 0x78
 8000850:	210a      	movs	r1, #10
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <_DrawFreqSelectMenu+0x5c>)
 8000854:	f008 f88a 	bl	800896c <ILI9341_Draw_Text>

	char freq[6] = "";
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8000860:	f000 fb6e 	bl	8000f40 <FreqO_GetOutputFreq>
 8000864:	4603      	mov	r3, r0
 8000866:	b29b      	uxth	r3, r3
 8000868:	4639      	mov	r1, r7
 800086a:	2206      	movs	r2, #6
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f8c3 	bl	80009f8 <DM_AddDigitPadding>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <_DrawFreqSelectMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8000878:	4638      	mov	r0, r7
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	2302      	movs	r3, #2
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	2278      	movs	r2, #120	; 0x78
 8000888:	21fa      	movs	r1, #250	; 0xfa
 800088a:	f008 f86f 	bl	800896c <ILI9341_Draw_Text>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	0800a468 	.word	0x0800a468

0800089c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <DM_ShowBiasSelectMenu+0x1c>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7013      	strb	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000be7 	.word	0x20000be7

080008bc <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2302      	movs	r3, #2
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	2278      	movs	r2, #120	; 0x78
 80008d0:	210a      	movs	r1, #10
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <_DrawBiasSelectMenu+0x5c>)
 80008d4:	f008 f84a 	bl	800896c <ILI9341_Draw_Text>

	char bias[5] = "";
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	713b      	strb	r3, [r7, #4]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 80008e0:	f000 fb14 	bl	8000f0c <BO_GetOutputBias>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4639      	mov	r1, r7
 80008ea:	2205      	movs	r2, #5
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f883 	bl	80009f8 <DM_AddDigitPadding>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10a      	bne.n	800090e <_DrawBiasSelectMenu+0x52>
		ILI9341_Draw_Text(bias, 250, 120, WHITE, 2, BLACK);
 80008f8:	4638      	mov	r0, r7
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000906:	2278      	movs	r2, #120	; 0x78
 8000908:	21fa      	movs	r1, #250	; 0xfa
 800090a:	f008 f82f 	bl	800896c <ILI9341_Draw_Text>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	0800a480 	.word	0x0800a480

0800091c <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b09      	cmp	r3, #9
 8000928:	dc01      	bgt.n	800092e <DM_DigitCount+0x12>
		return 1;
 800092a:	2301      	movs	r3, #1
 800092c:	e018      	b.n	8000960 <DM_DigitCount+0x44>
	if(num < 100)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b63      	cmp	r3, #99	; 0x63
 8000932:	dc01      	bgt.n	8000938 <DM_DigitCount+0x1c>
		return 2;
 8000934:	2302      	movs	r3, #2
 8000936:	e013      	b.n	8000960 <DM_DigitCount+0x44>
	if(num < 1000)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800093e:	da01      	bge.n	8000944 <DM_DigitCount+0x28>
		return 3;
 8000940:	2303      	movs	r3, #3
 8000942:	e00d      	b.n	8000960 <DM_DigitCount+0x44>
	if(num < 10000)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f242 720f 	movw	r2, #9999	; 0x270f
 800094a:	4293      	cmp	r3, r2
 800094c:	dc01      	bgt.n	8000952 <DM_DigitCount+0x36>
		return 4;
 800094e:	2304      	movs	r3, #4
 8000950:	e006      	b.n	8000960 <DM_DigitCount+0x44>
	if(num < 100000)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a05      	ldr	r2, [pc, #20]	; (800096c <DM_DigitCount+0x50>)
 8000956:	4293      	cmp	r3, r2
 8000958:	dc01      	bgt.n	800095e <DM_DigitCount+0x42>
		return 5;
 800095a:	2305      	movs	r3, #5
 800095c:	e000      	b.n	8000960 <DM_DigitCount+0x44>
	else
		return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	0001869f 	.word	0x0001869f

08000970 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000976:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800097a:	f008 fb0b 	bl	8008f94 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <DM_RefreshBackgroundLayout+0x84>)
 8000980:	8818      	ldrh	r0, [r3, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2302      	movs	r3, #2
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2332      	movs	r3, #50	; 0x32
 8000992:	2250      	movs	r2, #80	; 0x50
 8000994:	21c8      	movs	r1, #200	; 0xc8
 8000996:	f007 fe7f 	bl	8008698 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <DM_RefreshBackgroundLayout+0x84>)
 800099c:	8858      	ldrh	r0, [r3, #2]
 800099e:	2300      	movs	r3, #0
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2302      	movs	r3, #2
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2332      	movs	r3, #50	; 0x32
 80009ae:	2250      	movs	r2, #80	; 0x50
 80009b0:	21c8      	movs	r1, #200	; 0xc8
 80009b2:	f007 fe71 	bl	8008698 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <DM_RefreshBackgroundLayout+0x84>)
 80009b8:	8898      	ldrh	r0, [r3, #4]
 80009ba:	2300      	movs	r3, #0
 80009bc:	9302      	str	r3, [sp, #8]
 80009be:	2302      	movs	r3, #2
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2332      	movs	r3, #50	; 0x32
 80009ca:	2250      	movs	r2, #80	; 0x50
 80009cc:	21c8      	movs	r1, #200	; 0xc8
 80009ce:	f007 fe63 	bl	8008698 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <DM_RefreshBackgroundLayout+0x84>)
 80009d4:	88d8      	ldrh	r0, [r3, #6]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2302      	movs	r3, #2
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2332      	movs	r3, #50	; 0x32
 80009e6:	2250      	movs	r2, #80	; 0x50
 80009e8:	21c8      	movs	r1, #200	; 0xc8
 80009ea:	f007 fe55 	bl	8008698 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000

080009f8 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	80fb      	strh	r3, [r7, #6]
 8000a04:	4613      	mov	r3, r2
 8000a06:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <DM_AddDigitPadding+0x1c>
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	2b06      	cmp	r3, #6
 8000a12:	d901      	bls.n	8000a18 <DM_AddDigitPadding+0x20>
		return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e048      	b.n	8000aaa <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000a1c:	89fb      	ldrh	r3, [r7, #14]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff7c 	bl	800091c <DM_DigitCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d83e      	bhi.n	8000aa8 <DM_AddDigitPadding+0xb0>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <DM_AddDigitPadding+0x38>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a59 	.word	0x08000a59
 8000a38:	08000a69 	.word	0x08000a69
 8000a3c:	08000a79 	.word	0x08000a79
 8000a40:	08000a89 	.word	0x08000a89
 8000a44:	08000a99 	.word	0x08000a99
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000a48:	88bb      	ldrh	r3, [r7, #4]
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <DM_AddDigitPadding+0xbc>)
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f008 fd50 	bl	80094f4 <sniprintf>
			return 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e028      	b.n	8000aaa <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000a58:	88b9      	ldrh	r1, [r7, #4]
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <DM_AddDigitPadding+0xc0>)
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f008 fd48 	bl	80094f4 <sniprintf>
			return 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e020      	b.n	8000aaa <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000a68:	88b9      	ldrh	r1, [r7, #4]
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <DM_AddDigitPadding+0xc4>)
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f008 fd40 	bl	80094f4 <sniprintf>
			return 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e018      	b.n	8000aaa <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000a78:	88b9      	ldrh	r1, [r7, #4]
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <DM_AddDigitPadding+0xc8>)
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f008 fd38 	bl	80094f4 <sniprintf>
			return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e010      	b.n	8000aaa <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000a88:	88b9      	ldrh	r1, [r7, #4]
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <DM_AddDigitPadding+0xcc>)
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f008 fd30 	bl	80094f4 <sniprintf>
			return 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e008      	b.n	8000aaa <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000a98:	88b9      	ldrh	r1, [r7, #4]
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <DM_AddDigitPadding+0xd0>)
 8000a9e:	6838      	ldr	r0, [r7, #0]
 8000aa0:	f008 fd28 	bl	80094f4 <sniprintf>
			return 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e000      	b.n	8000aaa <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000aa8:	2302      	movs	r3, #2


}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	0800a4d0 	.word	0x0800a4d0
 8000ab8:	0800a4d8 	.word	0x0800a4d8
 8000abc:	0800a4e0 	.word	0x0800a4e0
 8000ac0:	0800a4e8 	.word	0x0800a4e8
 8000ac4:	0800a4f0 	.word	0x0800a4f0
 8000ac8:	0800a4f4 	.word	0x0800a4f4

08000acc <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	f200 808a 	bhi.w	8000bee <EM_ProcessEvent+0x122>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <EM_ProcessEvent+0x14>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	08000b47 	.word	0x08000b47
 8000ae8:	08000b71 	.word	0x08000b71
 8000aec:	08000b9b 	.word	0x08000b9b
 8000af0:	08000bc5 	.word	0x08000bc5
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 8000af4:	4b45      	ldr	r3, [pc, #276]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8000afc:	f000 f888 	bl	8000c10 <_FuncMenuHandler>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 8000b08:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d105      	bne.n	8000b1c <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8000b10:	f000 f95e 	bl	8000dd0 <_FreqMenuHandler>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d105      	bne.n	8000b30 <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000b24:	f000 f8be 	bl	8000ca4 <_GainMenuHandler>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d15c      	bne.n	8000bf2 <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000b38:	f000 f8fe 	bl	8000d38 <_BiasMenuHandler>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b42:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000b44:	e055      	b.n	8000bf2 <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d105      	bne.n	8000b5a <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000b4e:	f000 f875 	bl	8000c3c <_FuncSetHandler>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b58:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d149      	bne.n	8000bf6 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000b62:	f000 f87d 	bl	8000c60 <_ExitFuncMenuHandler>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b6e:	e042      	b.n	8000bf6 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b05      	cmp	r3, #5
 8000b76:	d105      	bne.n	8000b84 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000b78:	f000 f8aa 	bl	8000cd0 <_GainSetHandler>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b82:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d136      	bne.n	8000bfa <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000b8c:	f000 f8b2 	bl	8000cf4 <_ExitGainMenuHandler>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000b96:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b98:	e02f      	b.n	8000bfa <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d105      	bne.n	8000bae <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000ba2:	f000 f92f 	bl	8000e04 <_FreqSetHandler>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000bac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d123      	bne.n	8000bfe <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000bb6:	f000 f937 	bl	8000e28 <_ExitFreqMenuHandler>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000bc0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bc2:	e01c      	b.n	8000bfe <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d105      	bne.n	8000bd8 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000bcc:	f000 f8cc 	bl	8000d68 <_BiasSetHandler>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000bd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <EM_ProcessEvent+0x140>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d110      	bne.n	8000c02 <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000be0:	f000 f8d4 	bl	8000d8c <_ExitBiasMenuHandler>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <EM_ProcessEvent+0x13c>)
 8000bea:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bec:	e009      	b.n	8000c02 <EM_ProcessEvent+0x136>

		default:
			break;
 8000bee:	bf00      	nop
 8000bf0:	e008      	b.n	8000c04 <EM_ProcessEvent+0x138>
			break;
 8000bf2:	bf00      	nop
 8000bf4:	e006      	b.n	8000c04 <EM_ProcessEvent+0x138>
			break;
 8000bf6:	bf00      	nop
 8000bf8:	e004      	b.n	8000c04 <EM_ProcessEvent+0x138>
			break;
 8000bfa:	bf00      	nop
 8000bfc:	e002      	b.n	8000c04 <EM_ProcessEvent+0x138>
			break;
 8000bfe:	bf00      	nop
 8000c00:	e000      	b.n	8000c04 <EM_ProcessEvent+0x138>
			break;
 8000c02:	bf00      	nop
	}

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000be8 	.word	0x20000be8
 8000c0c:	20000be9 	.word	0x20000be9

08000c10 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <_FuncMenuHandler+0x24>)
 8000c16:	f008 fc65 	bl	80094e4 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fbf6 	bl	800040c <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_FuncMenuHandler+0x28>)
 8000c22:	2214      	movs	r2, #20
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <_FuncMenuHandler+0x28>)
 8000c28:	2214      	movs	r2, #20
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800a4fc 	.word	0x0800a4fc
 8000c38:	40012c00 	.word	0x40012c00

08000c3c <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <_FuncSetHandler+0x1c>)
 8000c42:	f008 fc4f 	bl	80094e4 <puts>
#endif

	FuncO_ModifyOutput();
 8000c46:	f000 f987 	bl	8000f58 <FuncO_ModifyOutput>
	eNewEvent = evFuncMenu;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <_FuncSetHandler+0x20>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	0800a518 	.word	0x0800a518
 8000c5c:	20000be9 	.word	0x20000be9

08000c60 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <_ExitFuncMenuHandler+0x34>)
 8000c66:	f008 fc3d 	bl	80094e4 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fbce 	bl	800040c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <_ExitFuncMenuHandler+0x38>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <_ExitFuncMenuHandler+0x3c>)
 8000c7a:	f006 fa35 	bl	80070e8 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000c7e:	f7ff fe77 	bl	8000970 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <_ExitFuncMenuHandler+0x3c>)
 8000c84:	f006 f9fa 	bl	800707c <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <_ExitFuncMenuHandler+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800a538 	.word	0x0800a538
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	20000e98 	.word	0x20000e98
 8000ca0:	20000be9 	.word	0x20000be9

08000ca4 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <_GainMenuHandler+0x24>)
 8000caa:	f008 fc1b 	bl	80094e4 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fd76 	bl	80007a0 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 7;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <_GainMenuHandler+0x28>)
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <_GainMenuHandler+0x28>)
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000cc0:	2302      	movs	r3, #2
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	0800a554 	.word	0x0800a554
 8000ccc:	40012c00 	.word	0x40012c00

08000cd0 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <_GainSetHandler+0x1c>)
 8000cd6:	f008 fc05 	bl	80094e4 <puts>
#endif

	GO_ModifyOutput();
 8000cda:	f000 f9fb 	bl	80010d4 <GO_ModifyOutput>

	eNewEvent = evGainMenu;
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <_GainSetHandler+0x20>)
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000ce4:	2302      	movs	r3, #2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	0800a56c 	.word	0x0800a56c
 8000cf0:	20000be9 	.word	0x20000be9

08000cf4 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <_ExitGainMenuHandler+0x34>)
 8000cfa:	f008 fbf3 	bl	80094e4 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fd4e 	bl	80007a0 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_ExitGainMenuHandler+0x38>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <_ExitGainMenuHandler+0x3c>)
 8000d0e:	f006 f9eb 	bl	80070e8 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d12:	f7ff fe2d 	bl	8000970 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <_ExitGainMenuHandler+0x3c>)
 8000d18:	f006 f9b0 	bl	800707c <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <_ExitGainMenuHandler+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0800a584 	.word	0x0800a584
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	20000e98 	.word	0x20000e98
 8000d34:	20000be9 	.word	0x20000be9

08000d38 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <_BiasMenuHandler+0x28>)
 8000d3e:	f008 fbd1 	bl	80094e4 <puts>
#endif
	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fdaa 	bl	800089c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <_BiasMenuHandler+0x2c>)
 8000d4a:	f240 3229 	movw	r2, #809	; 0x329
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <_BiasMenuHandler+0x2c>)
 8000d52:	f240 1299 	movw	r2, #409	; 0x199
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000d58:	2304      	movs	r3, #4
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0800a5a0 	.word	0x0800a5a0
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <_BiasSetHandler+0x1c>)
 8000d6e:	f008 fbb9 	bl	80094e4 <puts>
#endif

	BO_ModifyOutput();
 8000d72:	f000 f88b 	bl	8000e8c <BO_ModifyOutput>

	eNewEvent = evBiasMenu;
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <_BiasSetHandler+0x20>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000d7c:	2304      	movs	r3, #4
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0800a5b8 	.word	0x0800a5b8
 8000d88:	20000be9 	.word	0x20000be9

08000d8c <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <_ExitBiasMenuHandler+0x34>)
 8000d92:	f008 fba7 	bl	80094e4 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fd80 	bl	800089c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <_ExitBiasMenuHandler+0x38>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <_ExitBiasMenuHandler+0x3c>)
 8000da6:	f006 f99f 	bl	80070e8 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000daa:	f7ff fde1 	bl	8000970 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <_ExitBiasMenuHandler+0x3c>)
 8000db0:	f006 f964 	bl	800707c <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <_ExitBiasMenuHandler+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	0800a5d0 	.word	0x0800a5d0
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	20000e98 	.word	0x20000e98
 8000dcc:	20000be9 	.word	0x20000be9

08000dd0 <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <_FreqMenuHandler+0x28>)
 8000dd6:	f008 fb85 	bl	80094e4 <puts>
#endif
	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fd1e 	bl	800081c <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <_FreqMenuHandler+0x2c>)
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_FreqMenuHandler+0x30>)
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = FREQ_ENCODER_MAX;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <_FreqMenuHandler+0x30>)
 8000dea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000df0:	2303      	movs	r3, #3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	0800a5ec 	.word	0x0800a5ec
 8000dfc:	40013400 	.word	0x40013400
 8000e00:	40012c00 	.word	0x40012c00

08000e04 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <_FreqSetHandler+0x1c>)
 8000e0a:	f008 fb6b 	bl	80094e4 <puts>
#endif

	FreqO_ModifyOutput();
 8000e0e:	f000 f889 	bl	8000f24 <FreqO_ModifyOutput>

	eNewEvent = evFreqMenu;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <_FreqSetHandler+0x20>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8000e18:	2303      	movs	r3, #3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	0800a604 	.word	0x0800a604
 8000e24:	20000be9 	.word	0x20000be9

08000e28 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <_ExitFreqMenuHandler+0x34>)
 8000e2e:	f008 fb59 	bl	80094e4 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fcf2 	bl	800081c <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <_ExitFreqMenuHandler+0x38>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <_ExitFreqMenuHandler+0x3c>)
 8000e42:	f006 f951 	bl	80070e8 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e46:	f7ff fd93 	bl	8000970 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <_ExitFreqMenuHandler+0x3c>)
 8000e4c:	f006 f916 	bl	800707c <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <_ExitFreqMenuHandler+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	0800a61c 	.word	0x0800a61c
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	20000e98 	.word	0x20000e98
 8000e68:	20000be9 	.word	0x20000be9

08000e6c <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <EM_SetNewEvent+0x1c>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	7013      	strb	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	20000be9 	.word	0x20000be9

08000e8c <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 fa17 	bl	80012c4 <SM_GetEncoderValue>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8000e9c:	d815      	bhi.n	8000eca <BO_ModifyOutput+0x3e>

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 fa10 	bl	80012c4 <SM_GetEncoderValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f5c3 72cc 	rsb	r2, r3, #408	; 0x198
 8000eaa:	3201      	adds	r2, #1
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <BO_ModifyOutput+0x7c>)
 8000eba:	f003 fe47 	bl	8004b4c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f004 fd2f 	bl	8005928 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 f9fa 	bl	80012c4 <SM_GetEncoderValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8000ed6:	d914      	bls.n	8000f02 <BO_ModifyOutput+0x76>

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 f9f3 	bl	80012c4 <SM_GetEncoderValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f2a3 1299 	subw	r2, r3, #409	; 0x199
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8000eec:	2200      	movs	r2, #0
 8000eee:	2110      	movs	r1, #16
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <BO_ModifyOutput+0x7c>)
 8000ef2:	f003 fe2b 	bl	8004b4c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f004 fd13 	bl	8005928 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000d14 	.word	0x20000d14

08000f0c <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8000f10:	2110      	movs	r1, #16
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <BO_GetOutputBias+0x14>)
 8000f14:	f003 fe56 	bl	8004bc4 <HAL_DAC_GetValue>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000d14 	.word	0x20000d14

08000f24 <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MAG;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 f9cb 	bl	80012c4 <SM_GetEncoderValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <FreqO_ModifyOutput+0x18>)
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013400 	.word	0x40013400

08000f40 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <FreqO_GetOutputFreq+0x14>)
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40013400 	.word	0x40013400

08000f58 <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 f9b0 	bl	80012c4 <SM_GetEncoderValue>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b17      	cmp	r3, #23
 8000f68:	f200 8094 	bhi.w	8001094 <FuncO_ModifyOutput+0x13c>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <FuncO_ModifyOutput+0x1c>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000fd5 	.word	0x08000fd5
 8000f78:	08000fd5 	.word	0x08000fd5
 8000f7c:	08000fd5 	.word	0x08000fd5
 8000f80:	08000ff5 	.word	0x08000ff5
 8000f84:	08000ff5 	.word	0x08000ff5
 8000f88:	08000ff5 	.word	0x08000ff5
 8000f8c:	08000ff5 	.word	0x08000ff5
 8000f90:	08001015 	.word	0x08001015
 8000f94:	08001015 	.word	0x08001015
 8000f98:	08001015 	.word	0x08001015
 8000f9c:	08001015 	.word	0x08001015
 8000fa0:	08001035 	.word	0x08001035
 8000fa4:	08001035 	.word	0x08001035
 8000fa8:	08001035 	.word	0x08001035
 8000fac:	08001035 	.word	0x08001035
 8000fb0:	08001055 	.word	0x08001055
 8000fb4:	08001055 	.word	0x08001055
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	08001055 	.word	0x08001055
 8000fc0:	08001075 	.word	0x08001075
 8000fc4:	08001075 	.word	0x08001075
 8000fc8:	08001075 	.word	0x08001075
 8000fcc:	08001075 	.word	0x08001075
 8000fd0:	08001075 	.word	0x08001075
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	; (800109c <FuncO_ModifyOutput+0x144>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4830      	ldr	r0, [pc, #192]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 8000fde:	f003 fd5f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2378      	movs	r3, #120	; 0x78
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <FuncO_ModifyOutput+0x14c>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 8000fee:	f003 fc95 	bl	800491c <HAL_DAC_Start_DMA>
			break;
 8000ff2:	e04f      	b.n	8001094 <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <FuncO_ModifyOutput+0x144>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 8000ffe:	f003 fd4f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2378      	movs	r3, #120	; 0x78
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <FuncO_ModifyOutput+0x150>)
 800100a:	2100      	movs	r1, #0
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800100e:	f003 fc85 	bl	800491c <HAL_DAC_Start_DMA>

			break;
 8001012:	e03f      	b.n	8001094 <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <FuncO_ModifyOutput+0x144>)
 8001016:	2202      	movs	r2, #2
 8001018:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	4820      	ldr	r0, [pc, #128]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800101e:	f003 fd3f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2378      	movs	r3, #120	; 0x78
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <FuncO_ModifyOutput+0x154>)
 800102a:	2100      	movs	r1, #0
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800102e:	f003 fc75 	bl	800491c <HAL_DAC_Start_DMA>
			break;
 8001032:	e02f      	b.n	8001094 <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <FuncO_ModifyOutput+0x144>)
 8001036:	2203      	movs	r2, #3
 8001038:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800103e:	f003 fd2f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8001042:	2300      	movs	r3, #0
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2378      	movs	r3, #120	; 0x78
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <FuncO_ModifyOutput+0x158>)
 800104a:	2100      	movs	r1, #0
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800104e:	f003 fc65 	bl	800491c <HAL_DAC_Start_DMA>
			break;
 8001052:	e01f      	b.n	8001094 <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <FuncO_ModifyOutput+0x144>)
 8001056:	2204      	movs	r2, #4
 8001058:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800105e:	f003 fd1f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2378      	movs	r3, #120	; 0x78
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <FuncO_ModifyOutput+0x15c>)
 800106a:	2100      	movs	r1, #0
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800106e:	f003 fc55 	bl	800491c <HAL_DAC_Start_DMA>
			break;
 8001072:	e00f      	b.n	8001094 <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <FuncO_ModifyOutput+0x144>)
 8001076:	2205      	movs	r2, #5
 8001078:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800107e:	f003 fd0f 	bl	8004aa0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001082:	2300      	movs	r3, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2378      	movs	r3, #120	; 0x78
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <FuncO_ModifyOutput+0x160>)
 800108a:	2100      	movs	r1, #0
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <FuncO_ModifyOutput+0x148>)
 800108e:	f003 fc45 	bl	800491c <HAL_DAC_Start_DMA>
			break;
 8001092:	bf00      	nop
	}
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000bea 	.word	0x20000bea
 80010a0:	20000d14 	.word	0x20000d14
 80010a4:	200003e4 	.word	0x200003e4
 80010a8:	200005c4 	.word	0x200005c4
 80010ac:	20000024 	.word	0x20000024
 80010b0:	20000204 	.word	0x20000204
 80010b4:	200007a4 	.word	0x200007a4
 80010b8:	20000984 	.word	0x20000984

080010bc <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <FuncO_GetOutputMode+0x14>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000bea 	.word	0x20000bea

080010d4 <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f8f3 	bl	80012c4 <SM_GetEncoderValue>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	f200 80db 	bhi.w	800129c <GO_ModifyOutput+0x1c8>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <GO_ModifyOutput+0x18>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	0800116d 	.word	0x0800116d
 80010f0:	0800116d 	.word	0x0800116d
 80010f4:	0800116d 	.word	0x0800116d
 80010f8:	0800116d 	.word	0x0800116d
 80010fc:	08001193 	.word	0x08001193
 8001100:	08001193 	.word	0x08001193
 8001104:	08001193 	.word	0x08001193
 8001108:	08001193 	.word	0x08001193
 800110c:	080011b9 	.word	0x080011b9
 8001110:	080011b9 	.word	0x080011b9
 8001114:	080011b9 	.word	0x080011b9
 8001118:	080011b9 	.word	0x080011b9
 800111c:	080011df 	.word	0x080011df
 8001120:	080011df 	.word	0x080011df
 8001124:	080011df 	.word	0x080011df
 8001128:	080011df 	.word	0x080011df
 800112c:	08001205 	.word	0x08001205
 8001130:	08001205 	.word	0x08001205
 8001134:	08001205 	.word	0x08001205
 8001138:	08001205 	.word	0x08001205
 800113c:	0800122b 	.word	0x0800122b
 8001140:	0800122b 	.word	0x0800122b
 8001144:	0800122b 	.word	0x0800122b
 8001148:	0800122b 	.word	0x0800122b
 800114c:	08001251 	.word	0x08001251
 8001150:	08001251 	.word	0x08001251
 8001154:	08001251 	.word	0x08001251
 8001158:	08001251 	.word	0x08001251
 800115c:	08001277 	.word	0x08001277
 8001160:	08001277 	.word	0x08001277
 8001164:	08001277 	.word	0x08001277
 8001168:	08001277 	.word	0x08001277
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2101      	movs	r1, #1
 8001170:	484b      	ldr	r0, [pc, #300]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 8001172:	f004 fbd9 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	484a      	ldr	r0, [pc, #296]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 800117c:	f004 fbd4 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4847      	ldr	r0, [pc, #284]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001186:	f004 fbcf 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
			break;
 8001190:	e084      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2101      	movs	r1, #1
 8001196:	4842      	ldr	r0, [pc, #264]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 8001198:	f004 fbc6 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4840      	ldr	r0, [pc, #256]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011a2:	f004 fbc1 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16
 80011aa:	483e      	ldr	r0, [pc, #248]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011ac:	f004 fbbc 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
			break;
 80011b6:	e071      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	4838      	ldr	r0, [pc, #224]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 80011be:	f004 fbb3 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2120      	movs	r1, #32
 80011c6:	4837      	ldr	r0, [pc, #220]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011c8:	f004 fbae 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2110      	movs	r1, #16
 80011d0:	4834      	ldr	r0, [pc, #208]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011d2:	f004 fba9 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 80011d8:	2202      	movs	r2, #2
 80011da:	701a      	strb	r2, [r3, #0]
			break;
 80011dc:	e05e      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2101      	movs	r1, #1
 80011e2:	482f      	ldr	r0, [pc, #188]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 80011e4:	f004 fba0 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	482d      	ldr	r0, [pc, #180]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011ee:	f004 fb9b 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2110      	movs	r1, #16
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 80011f8:	f004 fb96 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 80011fe:	2203      	movs	r2, #3
 8001200:	701a      	strb	r2, [r3, #0]
			break;
 8001202:	e04b      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 800120a:	f004 fb8d 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	4824      	ldr	r0, [pc, #144]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001214:	f004 fb88 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2110      	movs	r1, #16
 800121c:	4821      	ldr	r0, [pc, #132]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 800121e:	f004 fb83 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 8001224:	2204      	movs	r2, #4
 8001226:	701a      	strb	r2, [r3, #0]
			break;
 8001228:	e038      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2101      	movs	r1, #1
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 8001230:	f004 fb7a 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2120      	movs	r1, #32
 8001238:	481a      	ldr	r0, [pc, #104]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 800123a:	f004 fb75 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001244:	f004 fb70 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 800124a:	2205      	movs	r2, #5
 800124c:	701a      	strb	r2, [r3, #0]
			break;
 800124e:	e025      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2101      	movs	r1, #1
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 8001256:	f004 fb67 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2120      	movs	r1, #32
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001260:	f004 fb62 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 800126a:	f004 fb5d 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 8001270:	2206      	movs	r2, #6
 8001272:	701a      	strb	r2, [r3, #0]
			break;
 8001274:	e012      	b.n	800129c <GO_ModifyOutput+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2101      	movs	r1, #1
 800127a:	4809      	ldr	r0, [pc, #36]	; (80012a0 <GO_ModifyOutput+0x1cc>)
 800127c:	f004 fb54 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2120      	movs	r1, #32
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001286:	f004 fb4f 	bl	8005928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2110      	movs	r1, #16
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <GO_ModifyOutput+0x1d0>)
 8001290:	f004 fb4a 	bl	8005928 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <GO_ModifyOutput+0x1d4>)
 8001296:	2207      	movs	r2, #7
 8001298:	701a      	strb	r2, [r3, #0]
			break;
 800129a:	bf00      	nop
	}

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	20000008 	.word	0x20000008

080012ac <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <GO_GetOutputGain+0x14>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <SM_GetEncoderValue+0x34>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <SM_GetEncoderValue+0x34>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	b29b      	uxth	r3, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	e002      	b.n	80012ec <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SM_GetEncoderValue+0x34>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	b29b      	uxth	r3, r3
	}
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012c00 	.word	0x40012c00

080012fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f008 f881 	bl	800941c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800131c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001342:	2204      	movs	r2, #4
 8001344:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800134e:	2201      	movs	r2, #1
 8001350:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001354:	2201      	movs	r2, #1
 8001356:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_ADC1_Init+0xe8>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001384:	4817      	ldr	r0, [pc, #92]	; (80013e4 <MX_ADC1_Init+0xe8>)
 8001386:	f001 ffc7 	bl	8003318 <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001390:	f000 ff40 	bl	8002214 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_ADC1_Init+0xe8>)
 80013a0:	f002 fd50 	bl	8003e44 <HAL_ADCEx_MultiModeConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013aa:	f000 ff33 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_ADC1_Init+0xec>)
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b2:	2306      	movs	r3, #6
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ba:	237f      	movs	r3, #127	; 0x7f
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013be:	2304      	movs	r3, #4
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_ADC1_Init+0xe8>)
 80013cc:	f002 f964 	bl	8003698 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013d6:	f000 ff1d 	bl	8002214 <Error_Handler>
  }

}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000c10 	.word	0x20000c10
 80013e8:	0c900008 	.word	0x0c900008

080013ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800140c:	d14f      	bne.n	80014ae <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 8001414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_ADC_MspInit+0xcc>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800143e:	2304      	movs	r3, #4
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	2303      	movs	r3, #3
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001454:	f004 f8ce 	bl	80055f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_ADC_MspInit+0xd4>)
 800145c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001460:	2205      	movs	r2, #5
 8001462:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001484:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001488:	2220      	movs	r2, #32
 800148a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 8001494:	f003 fde2 	bl	800505c <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800149e:	f000 feb9 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_ADC_MspInit+0xd0>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	20000c7c 	.word	0x20000c7c
 80014c0:	40020008 	.word	0x40020008

080014c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_COMP1_Init+0x44>)
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <MX_COMP1_Init+0x48>)
 80014cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_COMP1_Init+0x44>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_COMP1_Init+0x44>)
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <MX_COMP1_Init+0x4c>)
 80014d8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_COMP1_Init+0x44>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_COMP1_Init+0x44>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_COMP1_Init+0x44>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_COMP1_Init+0x44>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_COMP1_Init+0x44>)
 80014f4:	f002 fefa 	bl	80042ec <HAL_COMP_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80014fe:	f000 fe89 	bl	8002214 <Error_Handler>
  }

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000cdc 	.word	0x20000cdc
 800150c:	40010200 	.word	0x40010200
 8001510:	00800030 	.word	0x00800030

08001514 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_COMP_MspInit+0x5c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d118      	bne.n	8001568 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_COMP_MspInit+0x60>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_COMP_MspInit+0x60>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_COMP_MspInit+0x60>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800154e:	2302      	movs	r3, #2
 8001550:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f004 f846 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40010200 	.word	0x40010200
 8001574:	40021000 	.word	0x40021000

08001578 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2230      	movs	r2, #48	; 0x30
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f007 ff49 	bl	800941c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_DAC1_Init+0x8c>)
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <MX_DAC1_Init+0x90>)
 800158e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_DAC1_Init+0x8c>)
 8001592:	f003 f94e 	bl	8004832 <HAL_DAC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800159c:	f000 fe3a 	bl	8002214 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80015a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_DAC1_Init+0x8c>)
 80015ce:	f003 fb0f 	bl	8004bf0 <HAL_DAC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80015d8:	f000 fe1c 	bl	8002214 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	2210      	movs	r2, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_DAC1_Init+0x8c>)
 80015ec:	f003 fb00 	bl	8004bf0 <HAL_DAC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80015f6:	f000 fe0d 	bl	8002214 <Error_Handler>
  }

}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000d14 	.word	0x20000d14
 8001608:	50000800 	.word	0x50000800

0800160c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2230      	movs	r2, #48	; 0x30
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f007 feff 	bl	800941c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_DAC2_Init+0x6c>)
 8001620:	4a16      	ldr	r2, [pc, #88]	; (800167c <MX_DAC2_Init+0x70>)
 8001622:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001624:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_DAC2_Init+0x6c>)
 8001626:	f003 f904 	bl	8004832 <HAL_DAC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001630:	f000 fdf0 	bl	8002214 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001638:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8001646:	2306      	movs	r3, #6
 8001648:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_DAC2_Init+0x6c>)
 8001662:	f003 fac5 	bl	8004bf0 <HAL_DAC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800166c:	f000 fdd2 	bl	8002214 <Error_Handler>
  }

}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	; 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000d00 	.word	0x20000d00
 800167c:	50000c00 	.word	0x50000c00

08001680 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <HAL_DAC_MspInit+0x178>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d150      	bne.n	8001744 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d2:	2330      	movs	r3, #48	; 0x30
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	2303      	movs	r3, #3
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f003 ff84 	bl	80055f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_DAC_MspInit+0x180>)
 80016ee:	4a45      	ldr	r2, [pc, #276]	; (8001804 <HAL_DAC_MspInit+0x184>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_DAC_MspInit+0x180>)
 80016f4:	2206      	movs	r2, #6
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f8:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_DAC_MspInit+0x180>)
 80016fa:	2210      	movs	r2, #16
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_DAC_MspInit+0x180>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <HAL_DAC_MspInit+0x180>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_DAC_MspInit+0x180>)
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_DAC_MspInit+0x180>)
 8001714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001718:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_DAC_MspInit+0x180>)
 800171c:	2220      	movs	r2, #32
 800171e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_DAC_MspInit+0x180>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001726:	4836      	ldr	r0, [pc, #216]	; (8001800 <HAL_DAC_MspInit+0x180>)
 8001728:	f003 fc98 	bl	800505c <HAL_DMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001732:	f000 fd6f 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a31      	ldr	r2, [pc, #196]	; (8001800 <HAL_DAC_MspInit+0x180>)
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	4a30      	ldr	r2, [pc, #192]	; (8001800 <HAL_DAC_MspInit+0x180>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001742:	e054      	b.n	80017ee <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_DAC_MspInit+0x188>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d14f      	bne.n	80017ee <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_DAC_MspInit+0x17c>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001794:	f003 ff2e 	bl	80055f4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_DAC_MspInit+0x18c>)
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_DAC_MspInit+0x190>)
 800179c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017a0:	2229      	movs	r2, #41	; 0x29
 80017a2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017a6:	2210      	movs	r2, #16
 80017a8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017c8:	2220      	movs	r2, #32
 80017ca:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017d4:	f003 fc42 	bl	800505c <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80017de:	f000 fd19 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_DAC_MspInit+0x18c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	50000800 	.word	0x50000800
 80017fc:	40021000 	.word	0x40021000
 8001800:	20000d28 	.word	0x20000d28
 8001804:	4002001c 	.word	0x4002001c
 8001808:	50000c00 	.word	0x50000c00
 800180c:	20000d88 	.word	0x20000d88
 8001810:	40020030 	.word	0x40020030

08001814 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_DMA_Init+0x70>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <MX_DMA_Init+0x70>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6493      	str	r3, [r2, #72]	; 0x48
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_DMA_Init+0x70>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_DMA_Init+0x70>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <MX_DMA_Init+0x70>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6493      	str	r3, [r2, #72]	; 0x48
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_DMA_Init+0x70>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	200b      	movs	r0, #11
 8001850:	f002 ffbb 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001854:	200b      	movs	r0, #11
 8001856:	f002 ffd2 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200c      	movs	r0, #12
 8001860:	f002 ffb3 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001864:	200c      	movs	r0, #12
 8001866:	f002 ffca 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200d      	movs	r0, #13
 8001870:	f002 ffab 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001874:	200d      	movs	r0, #13
 8001876:	f002 ffc2 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000

08001888 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <update_dc_bias_sweep+0x88>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <update_dc_bias_sweep+0x1a>
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <update_dc_bias_sweep+0x8c>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <update_dc_bias_sweep+0x8c>)
 800189e:	801a      	strh	r2, [r3, #0]
 80018a0:	e005      	b.n	80018ae <update_dc_bias_sweep+0x26>
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018ac:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <update_dc_bias_sweep+0x90>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <update_dc_bias_sweep+0x3e>
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <update_dc_bias_sweep+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e002      	b.n	80018cc <update_dc_bias_sweep+0x44>
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <update_dc_bias_sweep+0x90>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <update_dc_bias_sweep+0x52>
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <update_dc_bias_sweep+0x88>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e2:	d302      	bcc.n	80018ea <update_dc_bias_sweep+0x62>
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <update_dc_bias_sweep+0x88>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <update_dc_bias_sweep+0x90>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	2108      	movs	r1, #8
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f004 f816 	bl	8005928 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <update_dc_bias_sweep+0x8c>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	2110      	movs	r1, #16
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <update_dc_bias_sweep+0x94>)
 8001906:	f003 f921 	bl	8004b4c <HAL_DAC_SetValue>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	20000bec 	.word	0x20000bec
 8001918:	20000bf0 	.word	0x20000bf0
 800191c:	20000d14 	.word	0x20000d14

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	43db      	mvns	r3, r3
 8001a52:	ea02 0103 	and.w	r1, r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	409a      	lsls	r2, r3
 8001a74:	4806      	ldr	r0, [pc, #24]	; (8001a90 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40010000 	.word	0x40010000

08001a94 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	613b      	str	r3, [r7, #16]
  return result;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2103      	movs	r1, #3
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	61bb      	str	r3, [r7, #24]
  return result;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b089      	sub	sp, #36	; 0x24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	613b      	str	r3, [r7, #16]
  return result;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2103      	movs	r1, #3
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	401a      	ands	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	61bb      	str	r3, [r7, #24]
  return result;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	60da      	str	r2, [r3, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000

08001b9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001bbe:	2004      	movs	r0, #4
 8001bc0:	f7ff ffd4 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001bc4:	2020      	movs	r0, #32
 8001bc6:	f7ff ffd1 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff ffce 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f7ff ffcb 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	48d3      	ldr	r0, [pc, #844]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001bda:	f7ff ffb9 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001bde:	2108      	movs	r1, #8
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f7ff ffb4 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001be8:	2110      	movs	r1, #16
 8001bea:	48cf      	ldr	r0, [pc, #828]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001bec:	f7ff ffb0 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	48cd      	ldr	r0, [pc, #820]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001bf4:	f7ff ffac 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	48cc      	ldr	r0, [pc, #816]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001bfc:	f7ff ffa8 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c04:	48c8      	ldr	r0, [pc, #800]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001c06:	f7ff ffa3 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0e:	48c6      	ldr	r0, [pc, #792]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001c10:	f7ff ff9e 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	48c5      	ldr	r0, [pc, #788]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001c18:	f7ff ff9a 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	48c3      	ldr	r0, [pc, #780]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001c20:	f7ff ff96 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c28:	48c0      	ldr	r0, [pc, #768]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001c2a:	f7ff ff91 	bl	8001b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001c2e:	49c0      	ldr	r1, [pc, #768]	; (8001f30 <MX_GPIO_Init+0x394>)
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff feff 	bl	8001a34 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001c36:	49bf      	ldr	r1, [pc, #764]	; (8001f34 <MX_GPIO_Init+0x398>)
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7ff fefb 	bl	8001a34 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001c3e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001c42:	2005      	movs	r0, #5
 8001c44:	f7ff fef6 	bl	8001a34 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001c48:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001c4c:	2005      	movs	r0, #5
 8001c4e:	f7ff fef1 	bl	8001a34 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001c52:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7ff feec 	bl	8001a34 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001c5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c60:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 faab 	bl	80081d4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c82:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c90:	2302      	movs	r3, #2
 8001c92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fa9a 	bl	80081d4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f006 fa8a 	bl	80081d4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f006 fa7a 	bl	80081d4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 fa6a 	bl	80081d4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d06:	4888      	ldr	r0, [pc, #544]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d08:	f7ff fef3 	bl	8001af2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d12:	4885      	ldr	r0, [pc, #532]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d14:	f7ff feed 	bl	8001af2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4886      	ldr	r0, [pc, #536]	; (8001f38 <MX_GPIO_Init+0x39c>)
 8001d1e:	f7ff fee8 	bl	8001af2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2102      	movs	r1, #2
 8001d26:	4884      	ldr	r0, [pc, #528]	; (8001f38 <MX_GPIO_Init+0x39c>)
 8001d28:	f7ff fee3 	bl	8001af2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2104      	movs	r1, #4
 8001d30:	487d      	ldr	r0, [pc, #500]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d32:	f7ff fede 	bl	8001af2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3c:	487a      	ldr	r0, [pc, #488]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d3e:	f7ff fea9 	bl	8001a94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d48:	4877      	ldr	r0, [pc, #476]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d4a:	f7ff fea3 	bl	8001a94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2101      	movs	r1, #1
 8001d52:	4879      	ldr	r0, [pc, #484]	; (8001f38 <MX_GPIO_Init+0x39c>)
 8001d54:	f7ff fe9e 	bl	8001a94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4876      	ldr	r0, [pc, #472]	; (8001f38 <MX_GPIO_Init+0x39c>)
 8001d5e:	f7ff fe99 	bl	8001a94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2104      	movs	r1, #4
 8001d66:	4870      	ldr	r0, [pc, #448]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d68:	f7ff fe94 	bl	8001a94 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d70:	2301      	movs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4868      	ldr	r0, [pc, #416]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001d86:	f006 fc18 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da6:	f006 fc08 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001daa:	2310      	movs	r3, #16
 8001dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dae:	2301      	movs	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4859      	ldr	r0, [pc, #356]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001dc4:	f006 fbf9 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4851      	ldr	r0, [pc, #324]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001de2:	f006 fbea 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001de6:	2301      	movs	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dea:	2301      	movs	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	484b      	ldr	r0, [pc, #300]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001e00:	f006 fbdb 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4842      	ldr	r0, [pc, #264]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001e20:	f006 fbcb 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	483a      	ldr	r0, [pc, #232]	; (8001f28 <MX_GPIO_Init+0x38c>)
 8001e40:	f006 fbbb 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4833      	ldr	r0, [pc, #204]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001e5e:	f006 fbac 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	482c      	ldr	r0, [pc, #176]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001e7c:	f006 fb9d 	bl	80085ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e86:	2301      	movs	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4824      	ldr	r0, [pc, #144]	; (8001f2c <MX_GPIO_Init+0x390>)
 8001e9c:	f006 fb8d 	bl	80085ba <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ea0:	f7ff fd3e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fd8e 	bl	80019cc <NVIC_EncodePriority>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f7ff fd5f 	bl	8001978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f7ff fd3e 	bl	800193c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ec0:	f7ff fd2e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fd7e 	bl	80019cc <NVIC_EncodePriority>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2007      	movs	r0, #7
 8001ed6:	f7ff fd4f 	bl	8001978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001eda:	2007      	movs	r0, #7
 8001edc:	f7ff fd2e 	bl	800193c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ee0:	f7ff fd1e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd6e 	bl	80019cc <NVIC_EncodePriority>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2008      	movs	r0, #8
 8001ef6:	f7ff fd3f 	bl	8001978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001efa:	2008      	movs	r0, #8
 8001efc:	f7ff fd1e 	bl	800193c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f00:	f7ff fd0e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd5e 	bl	80019cc <NVIC_EncodePriority>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4619      	mov	r1, r3
 8001f14:	2028      	movs	r0, #40	; 0x28
 8001f16:	f7ff fd2f 	bl	8001978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f1a:	2028      	movs	r0, #40	; 0x28
 8001f1c:	f7ff fd0e 	bl	800193c <__NVIC_EnableIRQ>

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e009      	b.n	8001f3c <MX_GPIO_Init+0x3a0>
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	0f000003 	.word	0x0f000003
 8001f34:	f0000003 	.word	0xf0000003
 8001f38:	48001400 	.word	0x48001400
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop

08001f40 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f5c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001f60:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00b      	beq.n	8001f80 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f68:	e000      	b.n	8001f6c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f6a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f9      	beq.n	8001f6a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e009      	b.n	8001fb8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ffc7 	bl	8001f40 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf1      	blt.n	8001fa4 <_write+0x16>
  return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	// do something
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe6:	f000 ff42 	bl	8002e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fea:	f000 f8a5 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fee:	f7ff fdd5 	bl	8001b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff2:	f7ff fc0f 	bl	8001814 <MX_DMA_Init>
  MX_DAC1_Init();
 8001ff6:	f7ff fabf 	bl	8001578 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001ffa:	f7ff fb07 	bl	800160c <MX_DAC2_Init>
  MX_ADC1_Init();
 8001ffe:	f7ff f97d 	bl	80012fc <MX_ADC1_Init>
  MX_COMP1_Init();
 8002002:	f7ff fa5f 	bl	80014c4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8002006:	f000 fc29 	bl	800285c <MX_TIM2_Init>
  MX_TIM17_Init();
 800200a:	f000 fdc1 	bl	8002b90 <MX_TIM17_Init>
  MX_SPI3_Init();
 800200e:	f000 f93f 	bl	8002290 <MX_SPI3_Init>
  MX_RNG_Init();
 8002012:	f000 f92f 	bl	8002274 <MX_RNG_Init>
  MX_TIM1_Init();
 8002016:	f000 fbb1 	bl	800277c <MX_TIM1_Init>
  MX_TIM8_Init();
 800201a:	f000 fcd9 	bl	80029d0 <MX_TIM8_Init>
  MX_TIM16_Init();
 800201e:	f000 fd91 	bl	8002b44 <MX_TIM16_Init>
  MX_TIM15_Init();
 8002022:	f000 fd3d 	bl	8002aa0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8002026:	f000 fc83 	bl	8002930 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2378      	movs	r3, #120	; 0x78
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <main+0x124>)
 8002032:	2100      	movs	r1, #0
 8002034:	4834      	ldr	r0, [pc, #208]	; (8002108 <main+0x128>)
 8002036:	f002 fc71 	bl	800491c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800203a:	2110      	movs	r1, #16
 800203c:	4832      	ldr	r0, [pc, #200]	; (8002108 <main+0x128>)
 800203e:	f002 fc1a 	bl	8004876 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2378      	movs	r3, #120	; 0x78
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <main+0x12c>)
 800204a:	2100      	movs	r1, #0
 800204c:	4830      	ldr	r0, [pc, #192]	; (8002110 <main+0x130>)
 800204e:	f002 fc65 	bl	800491c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8002052:	4830      	ldr	r0, [pc, #192]	; (8002114 <main+0x134>)
 8002054:	f004 ffe4 	bl	8007020 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <main+0x138>)
 800205a:	f243 62bf 	movw	r2, #14015	; 0x36bf
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	2108      	movs	r1, #8
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f003 fc5e 	bl	8005928 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	482a      	ldr	r0, [pc, #168]	; (800211c <main+0x13c>)
 8002072:	f003 fc59 	bl	8005928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	2120      	movs	r1, #32
 800207a:	4829      	ldr	r0, [pc, #164]	; (8002120 <main+0x140>)
 800207c:	f003 fc54 	bl	8005928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2110      	movs	r1, #16
 8002084:	4826      	ldr	r0, [pc, #152]	; (8002120 <main+0x140>)
 8002086:	f003 fc4f 	bl	8005928 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002090:	4823      	ldr	r0, [pc, #140]	; (8002120 <main+0x140>)
 8002092:	f003 fc49 	bl	8005928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4820      	ldr	r0, [pc, #128]	; (8002120 <main+0x140>)
 800209e:	f003 fc43 	bl	8005928 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2108      	movs	r1, #8
 80020a6:	481e      	ldr	r0, [pc, #120]	; (8002120 <main+0x140>)
 80020a8:	f003 fc3e 	bl	8005928 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80020ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b6:	f023 0307 	bic.w	r3, r3, #7
 80020ba:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80020bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c6:	f043 0305 	orr.w	r3, r3, #5
 80020ca:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80020cc:	4815      	ldr	r0, [pc, #84]	; (8002124 <main+0x144>)
 80020ce:	f004 ffd5 	bl	800707c <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80020d2:	4815      	ldr	r0, [pc, #84]	; (8002128 <main+0x148>)
 80020d4:	f004 ffa4 	bl	8007020 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <main+0x14c>)
 80020da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <main+0x14c>)
 80020e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80020e8:	f7fe f8ea 	bl	80002c0 <DM_Init>
  DM_PostInit();
 80020ec:	f7fe f8f6 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <main+0x150>)
 80020f2:	f004 ffc3 	bl	800707c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <main+0x154>)
 80020f8:	f004 ff92 	bl	8007020 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80020fc:	f7fe fce6 	bl	8000acc <EM_ProcessEvent>
 8002100:	e7fc      	b.n	80020fc <main+0x11c>
 8002102:	bf00      	nop
 8002104:	200003e4 	.word	0x200003e4
 8002108:	20000d14 	.word	0x20000d14
 800210c:	200007a4 	.word	0x200007a4
 8002110:	20000d00 	.word	0x20000d00
 8002114:	20000e4c 	.word	0x20000e4c
 8002118:	40013400 	.word	0x40013400
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	20000fc8 	.word	0x20000fc8
 8002128:	20000f7c 	.word	0x20000f7c
 800212c:	40001000 	.word	0x40001000
 8002130:	20000e98 	.word	0x20000e98
 8002134:	20000f30 	.word	0x20000f30

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0a8      	sub	sp, #160	; 0xa0
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002142:	2238      	movs	r2, #56	; 0x38
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f007 f968 	bl	800941c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800215c:	463b      	mov	r3, r7
 800215e:	2254      	movs	r2, #84	; 0x54
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f007 f95a 	bl	800941c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002168:	2000      	movs	r0, #0
 800216a:	f003 fbf5 	bl	8005958 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800216e:	2322      	movs	r3, #34	; 0x22
 8002170:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002176:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800217c:	2301      	movs	r3, #1
 800217e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8002194:	232a      	movs	r3, #42	; 0x2a
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80021a0:	2304      	movs	r3, #4
 80021a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fc75 	bl	8005aa0 <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80021bc:	f000 f82a 	bl	8002214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2303      	movs	r3, #3
 80021c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80021d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d8:	2108      	movs	r1, #8
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 ff78 	bl	80060d0 <HAL_RCC_ClockConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80021e6:	f000 f815 	bl	8002214 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80021ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80021f0:	2300      	movs	r3, #0
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fa:	463b      	mov	r3, r7
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 f957 	bl	80064b0 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002208:	f000 f804 	bl	8002214 <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	37a0      	adds	r7, #160	; 0xa0
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <LL_AHB2_GRP1_EnableClock>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800224e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800225a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000

08002274 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8002278:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800227c:	f7ff ffe2 	bl	8002244 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <MX_RNG_Init+0x18>)
 8002282:	f7ff ffce 	bl	8002222 <LL_RNG_Enable>

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	50060800 	.word	0x50060800

08002290 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_SPI3_Init+0x74>)
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <MX_SPI3_Init+0x78>)
 8002298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_SPI3_Init+0x74>)
 800229c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <MX_SPI3_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_SPI3_Init+0x74>)
 80022aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_SPI3_Init+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_SPI3_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_SPI3_Init+0x74>)
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_SPI3_Init+0x74>)
 80022c6:	2210      	movs	r2, #16
 80022c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_SPI3_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_SPI3_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_SPI3_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_SPI3_Init+0x74>)
 80022de:	2207      	movs	r2, #7
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_SPI3_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_SPI3_Init+0x74>)
 80022ea:	2208      	movs	r2, #8
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_SPI3_Init+0x74>)
 80022f0:	f004 fb2a 	bl	8006948 <HAL_SPI_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80022fa:	f7ff ff8b 	bl	8002214 <Error_Handler>
  }

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000de8 	.word	0x20000de8
 8002308:	40003c00 	.word	0x40003c00

0800230c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_SPI_MspInit+0x7c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d128      	bne.n	8002380 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_SPI_MspInit+0x80>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	4a16      	ldr	r2, [pc, #88]	; (800238c <HAL_SPI_MspInit+0x80>)
 8002334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002338:	6593      	str	r3, [r2, #88]	; 0x58
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_SPI_MspInit+0x80>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_SPI_MspInit+0x80>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_SPI_MspInit+0x80>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_SPI_MspInit+0x80>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800235e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002370:	2306      	movs	r3, #6
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_SPI_MspInit+0x84>)
 800237c:	f003 f93a 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40003c00 	.word	0x40003c00
 800238c:	40021000 	.word	0x40021000
 8002390:	48000800 	.word	0x48000800

08002394 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800239e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a2:	6093      	str	r3, [r2, #8]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_MspInit+0x44>)
 80023bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_MspInit+0x44>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6613      	str	r3, [r2, #96]	; 0x60
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_MspInit+0x44>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_MspInit+0x44>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <HAL_MspInit+0x44>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_MspInit+0x44>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80023ea:	f7ff ffd3 	bl	8002394 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4013      	ands	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d101      	bne.n	8002416 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40010400 	.word	0x40010400

08002428 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6153      	str	r3, [r2, #20]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010400 	.word	0x40010400

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 fd3a 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 80024a8:	2004      	movs	r0, #4
 80024aa:	f7fe fcdf 	bl	8000e6c <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff ffa4 	bl	80023fc <LL_EXTI_IsActiveFlag_0_31>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff ffb4 	bl	8002428 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7fe fccf 	bl	8000e6c <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7ff ff94 	bl	80023fc <LL_EXTI_IsActiveFlag_0_31>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80024da:	2002      	movs	r0, #2
 80024dc:	f7ff ffa4 	bl	8002428 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 80024e8:	2006      	movs	r0, #6
 80024ea:	f7fe fcbf 	bl	8000e6c <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80024ee:	2004      	movs	r0, #4
 80024f0:	f7ff ff84 	bl	80023fc <LL_EXTI_IsActiveFlag_0_31>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80024fa:	2004      	movs	r0, #4
 80024fc:	f7ff ff94 	bl	8002428 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <DMA1_Channel1_IRQHandler+0x10>)
 800250a:	f002 ff23 	bl	8005354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000c7c 	.word	0x20000c7c

08002518 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA1_Channel2_IRQHandler+0x10>)
 800251e:	f002 ff19 	bl	8005354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000d28 	.word	0x20000d28

0800252c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <DMA1_Channel3_IRQHandler+0x10>)
 8002532:	f002 ff0f 	bl	8005354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000d88 	.word	0x20000d88

08002540 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8002544:	f7fd fee8 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	4293      	cmp	r3, r2
 8002552:	d305      	bcc.n	8002560 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	4293      	cmp	r3, r2
 800255e:	d902      	bls.n	8002566 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8002560:	2005      	movs	r0, #5
 8002562:	f7fe fc83 	bl	8000e6c <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800256e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8002572:	f004 fe8e 	bl	8007292 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8002578:	f004 fe8b 	bl	8007292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40012c00 	.word	0x40012c00
 8002584:	20000bf4 	.word	0x20000bf4
 8002588:	20000f7c 	.word	0x20000f7c
 800258c:	20000e98 	.word	0x20000e98

08002590 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800259e:	f004 fe78 	bl	8007292 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80025a4:	f004 fe75 	bl	8007292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000c04 	.word	0x20000c04
 80025b0:	0800a638 	.word	0x0800a638
 80025b4:	20000f7c 	.word	0x20000f7c
 80025b8:	20001014 	.word	0x20001014

080025bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80025c0:	f7ff f962 	bl	8001888 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80025c6:	f004 fe64 	bl	8007292 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80025ca:	4803      	ldr	r0, [pc, #12]	; (80025d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80025cc:	f004 fe61 	bl	8007292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000f7c 	.word	0x20000f7c
 80025d8:	20000ee4 	.word	0x20000ee4

080025dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM2_IRQHandler+0x10>)
 80025e2:	f004 fe56 	bl	8007292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000fc8 	.word	0x20000fc8

080025f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 80025f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f8:	4815      	ldr	r0, [pc, #84]	; (8002650 <EXTI15_10_IRQHandler+0x60>)
 80025fa:	f003 f97d 	bl	80058f8 <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002604:	2003      	movs	r0, #3
 8002606:	f7fe fc31 	bl	8000e6c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800260a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260e:	4810      	ldr	r0, [pc, #64]	; (8002650 <EXTI15_10_IRQHandler+0x60>)
 8002610:	f003 f972 	bl	80058f8 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 800261a:	2001      	movs	r0, #1
 800261c:	f7fe fc26 	bl	8000e6c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002620:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002624:	f7ff feea 	bl	80023fc <LL_EXTI_IsActiveFlag_0_31>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800262e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002632:	f7ff fef9 	bl	8002428 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800263a:	f7ff fedf 	bl	80023fc <LL_EXTI_IsActiveFlag_0_31>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002644:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002648:	f7ff feee 	bl	8002428 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	48000800 	.word	0x48000800

08002654 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e00a      	b.n	800267c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002666:	f3af 8000 	nop.w
 800266a:	4601      	mov	r1, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	dbf0      	blt.n	8002666 <_read+0x12>
	}

return len;
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_close>:
	}
	return len;
}

int _close(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b6:	605a      	str	r2, [r3, #4]
	return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_isatty>:

int _isatty(int file)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
	return 1;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	return 0;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <_sbrk+0x50>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x16>
		heap_end = &end;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <_sbrk+0x50>)
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <_sbrk+0x54>)
 800270c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <_sbrk+0x50>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <_sbrk+0x50>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	466a      	mov	r2, sp
 800271e:	4293      	cmp	r3, r2
 8002720:	d907      	bls.n	8002732 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002722:	f006 fe51 	bl	80093c8 <__errno>
 8002726:	4602      	mov	r2, r0
 8002728:	230c      	movs	r3, #12
 800272a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002730:	e006      	b.n	8002740 <_sbrk+0x48>
	}

	heap_end += incr;
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <_sbrk+0x50>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a03      	ldr	r2, [pc, #12]	; (8002748 <_sbrk+0x50>)
 800273c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000bf8 	.word	0x20000bf8
 800274c:	20001068 	.word	0x20001068

08002750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <SystemInit+0x28>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <SystemInit+0x28>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SystemInit+0x28>)
 8002766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800276a:	609a      	str	r2, [r3, #8]
#endif
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b09a      	sub	sp, #104	; 0x68
 8002780:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002782:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f006 fe46 	bl	800941c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002790:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2234      	movs	r2, #52	; 0x34
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f006 fe3a 	bl	800941c <memset>

  htim1.Instance = TIM1;
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027aa:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <MX_TIM1_Init+0xdc>)
 80027ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <MX_TIM1_Init+0xd8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027d4:	2303      	movs	r3, #3
 80027d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027d8:	2300      	movs	r3, #0
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027dc:	2301      	movs	r3, #1
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027e8:	2300      	movs	r3, #0
 80027ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ec:	2301      	movs	r3, #1
 80027ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027fc:	4619      	mov	r1, r3
 80027fe:	4815      	ldr	r0, [pc, #84]	; (8002854 <MX_TIM1_Init+0xd8>)
 8002800:	f004 fca1 	bl	8007146 <HAL_TIM_Encoder_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800280a:	f7ff fd03 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800281a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <MX_TIM1_Init+0xd8>)
 8002822:	f005 fa19 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800282c:	f7ff fcf2 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM1_Init+0xd8>)
 800283e:	f005 faa1 	bl	8007d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002848:	f7ff fce4 	bl	8002214 <Error_Handler>
  }

}
 800284c:	bf00      	nop
 800284e:	3768      	adds	r7, #104	; 0x68
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000f7c 	.word	0x20000f7c
 8002858:	40012c00 	.word	0x40012c00

0800285c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002880:	463b      	mov	r3, r7
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <MX_TIM2_Init+0xd0>)
 800288c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <MX_TIM2_Init+0xd0>)
 8002894:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <MX_TIM2_Init+0xd0>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <MX_TIM2_Init+0xd0>)
 80028a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_TIM2_Init+0xd0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <MX_TIM2_Init+0xd0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028b4:	481d      	ldr	r0, [pc, #116]	; (800292c <MX_TIM2_Init+0xd0>)
 80028b6:	f004 fb5c 	bl	8006f72 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80028c0:	f7ff fca8 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0320 	add.w	r3, r7, #32
 80028ce:	4619      	mov	r1, r3
 80028d0:	4816      	ldr	r0, [pc, #88]	; (800292c <MX_TIM2_Init+0xd0>)
 80028d2:	f004 fe5d 	bl	8007590 <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028dc:	f7ff fc9a 	bl	8002214 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80028e0:	2305      	movs	r3, #5
 80028e2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80028e4:	2350      	movs	r3, #80	; 0x50
 80028e6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	4619      	mov	r1, r3
 80028f6:	480d      	ldr	r0, [pc, #52]	; (800292c <MX_TIM2_Init+0xd0>)
 80028f8:	f004 ff3a 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002902:	f7ff fc87 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800290e:	463b      	mov	r3, r7
 8002910:	4619      	mov	r1, r3
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <MX_TIM2_Init+0xd0>)
 8002914:	f005 f9a0 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800291e:	f7ff fc79 	bl	8002214 <Error_Handler>
  }

}
 8002922:	bf00      	nop
 8002924:	3730      	adds	r7, #48	; 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000fc8 	.word	0x20000fc8

08002930 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM5_Init+0x98>)
 8002950:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <MX_TIM5_Init+0x9c>)
 8002952:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_TIM5_Init+0x98>)
 8002956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM5_Init+0x98>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_TIM5_Init+0x98>)
 8002964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002968:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_TIM5_Init+0x98>)
 800296c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002970:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_TIM5_Init+0x98>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002978:	4813      	ldr	r0, [pc, #76]	; (80029c8 <MX_TIM5_Init+0x98>)
 800297a:	f004 fafa 	bl	8006f72 <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002984:	f7ff fc46 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <MX_TIM5_Init+0x98>)
 8002996:	f004 fdfb 	bl	8007590 <HAL_TIM_ConfigClockSource>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80029a0:	f7ff fc38 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_TIM5_Init+0x98>)
 80029b2:	f005 f951 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80029bc:	f7ff fc2a 	bl	8002214 <Error_Handler>
  }

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000f30 	.word	0x20000f30
 80029cc:	40000c00 	.word	0x40000c00

080029d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029f0:	463b      	mov	r3, r7
 80029f2:	2234      	movs	r2, #52	; 0x34
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 fd10 	bl	800941c <memset>

  htim8.Instance = TIM8;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <MX_TIM8_Init+0xc8>)
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <MX_TIM8_Init+0xcc>)
 8002a00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a26:	481c      	ldr	r0, [pc, #112]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a28:	f004 faa3 	bl	8006f72 <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002a32:	f7ff fbef 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a40:	4619      	mov	r1, r3
 8002a42:	4815      	ldr	r0, [pc, #84]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a44:	f004 fda4 	bl	8007590 <HAL_TIM_ConfigClockSource>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002a4e:	f7ff fbe1 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a52:	2320      	movs	r3, #32
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a62:	4619      	mov	r1, r3
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a66:	f005 f8f7 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002a70:	f7ff fbd0 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_TIM8_Init+0xc8>)
 8002a82:	f005 f97f 	bl	8007d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002a8c:	f7ff fbc2 	bl	8002214 <Error_Handler>
  }

}
 8002a90:	bf00      	nop
 8002a92:	3750      	adds	r7, #80	; 0x50
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000e4c 	.word	0x20000e4c
 8002a9c:	40013400 	.word	0x40013400

08002aa0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <MX_TIM15_Init+0xa0>)
 8002ac2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002aec:	4813      	ldr	r0, [pc, #76]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002aee:	f004 fa40 	bl	8006f72 <HAL_TIM_Base_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002af8:	f7ff fb8c 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4619      	mov	r1, r3
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002b0a:	f004 fd41 	bl	8007590 <HAL_TIM_ConfigClockSource>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002b14:	f7ff fb7e 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_TIM15_Init+0x9c>)
 8002b26:	f005 f897 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002b30:	f7ff fb70 	bl	8002214 <Error_Handler>
  }

}
 8002b34:	bf00      	nop
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000e98 	.word	0x20000e98
 8002b40:	40014000 	.word	0x40014000

08002b44 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <MX_TIM16_Init+0x48>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b5c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002b60:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <MX_TIM16_Init+0x44>)
 8002b76:	f004 f9fc 	bl	8006f72 <HAL_TIM_Base_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002b80:	f7ff fb48 	bl	8002214 <Error_Handler>
  }

}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20001014 	.word	0x20001014
 8002b8c:	40014400 	.word	0x40014400

08002b90 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <MX_TIM17_Init+0x48>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002b9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002ba0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_TIM17_Init+0x44>)
 8002bc2:	f004 f9d6 	bl	8006f72 <HAL_TIM_Base_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002bcc:	f7ff fb22 	bl	8002214 <Error_Handler>
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000ee4 	.word	0x20000ee4
 8002bd8:	40014800 	.word	0x40014800

08002bdc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_TIM_Encoder_MspInit+0xac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d13f      	bne.n	8002c7e <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c08:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	4811      	ldr	r0, [pc, #68]	; (8002c90 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002c4a:	f002 fcd3 	bl	80055f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2018      	movs	r0, #24
 8002c54:	f001 fdb9 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c58:	2018      	movs	r0, #24
 8002c5a:	f001 fdd0 	bl	80047fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2101      	movs	r1, #1
 8002c62:	2019      	movs	r0, #25
 8002c64:	f001 fdb1 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c68:	2019      	movs	r0, #25
 8002c6a:	f001 fdc8 	bl	80047fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	201a      	movs	r0, #26
 8002c74:	f001 fda9 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c78:	201a      	movs	r0, #26
 8002c7a:	f001 fdc0 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	; 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800

08002c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d131      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d04:	f002 fc76 	bl	80055f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	201c      	movs	r0, #28
 8002d0e:	f001 fd5c 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d12:	201c      	movs	r0, #28
 8002d14:	f001 fd73 	bl	80047fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002d18:	e070      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_TIM_Base_MspInit+0x174>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10c      	bne.n	8002d3e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d24:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
}
 8002d3c:	e05e      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <HAL_TIM_Base_MspInit+0x178>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d48:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d52:	6613      	str	r3, [r2, #96]	; 0x60
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
}
 8002d60:	e04c      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_TIM_Base_MspInit+0x17c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d114      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6613      	str	r3, [r2, #96]	; 0x60
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2018      	movs	r0, #24
 8002d8a:	f001 fd1e 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d8e:	2018      	movs	r0, #24
 8002d90:	f001 fd35 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8002d94:	e032      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_TIM_Base_MspInit+0x180>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d114      	bne.n	8002dca <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	6613      	str	r3, [r2, #96]	; 0x60
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2019      	movs	r0, #25
 8002dbe:	f001 fd04 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002dc2:	2019      	movs	r0, #25
 8002dc4:	f001 fd1b 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8002dc8:	e018      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_TIM_Base_MspInit+0x184>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d113      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dde:	6613      	str	r3, [r2, #96]	; 0x60
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_TIM_Base_MspInit+0x170>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2101      	movs	r1, #1
 8002df0:	201a      	movs	r0, #26
 8002df2:	f001 fcea 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002df6:	201a      	movs	r0, #26
 8002df8:	f001 fd01 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3738      	adds	r7, #56	; 0x38
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800

08002e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e22:	490e      	ldr	r1, [pc, #56]	; (8002e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <LoopForever+0xe>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e38:	4c0b      	ldr	r4, [pc, #44]	; (8002e68 <LoopForever+0x16>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e46:	f7ff fc83 	bl	8002750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f006 fac3 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e4e:	f7ff f8c7 	bl	8001fe0 <main>

08002e52 <LoopForever>:

LoopForever:
    b LoopForever
 8002e52:	e7fe      	b.n	8002e52 <LoopForever>
  ldr   r0, =_estack
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002e60:	0800a92c 	.word	0x0800a92c
  ldr r2, =_sbss
 8002e64:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002e68:	20001068 	.word	0x20001068

08002e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC1_2_IRQHandler>

08002e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f001 fc9b 	bl	80047b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f80e 	bl	8002ea0 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	71fb      	strb	r3, [r7, #7]
 8002e8e:	e001      	b.n	8002e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e90:	f7ff fa90 	bl	80023b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e94:	79fb      	ldrb	r3, [r7, #7]

}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_InitTick+0x68>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d022      	beq.n	8002efa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_InitTick+0x6c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_InitTick+0x68>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fca6 	bl	800481a <HAL_SYSTICK_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	d809      	bhi.n	8002eee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eda:	2200      	movs	r2, #0
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee2:	f001 fc72 	bl	80047ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_InitTick+0x70>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e007      	b.n	8002efe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e004      	b.n	8002efe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e001      	b.n	8002efe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000018 	.word	0x20000018
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	20000014 	.word	0x20000014

08002f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_IncTick+0x1c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a03      	ldr	r2, [pc, #12]	; (8002f30 <HAL_IncTick+0x1c>)
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20001060 	.word	0x20001060
 8002f34:	20000018 	.word	0x20000018

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20001060 	.word	0x20001060

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f68:	d004      	beq.n	8002f74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_Delay+0x40>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f74:	bf00      	nop
 8002f76:	f7ff ffdf 	bl	8002f38 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d8f7      	bhi.n	8002f76 <HAL_Delay+0x26>
  {
  }
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000018 	.word	0x20000018

08002f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ffc:	b490      	push	{r4, r7}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3360      	adds	r3, #96	; 0x60
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003018:	6822      	ldr	r2, [r4, #0]
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <LL_ADC_SetOffset+0x40>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800302e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bc90      	pop	{r4, r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	03fff000 	.word	0x03fff000

08003040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003040:	b490      	push	{r4, r7}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3360      	adds	r3, #96	; 0x60
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bc90      	pop	{r4, r7}
 8003066:	4770      	bx	lr

08003068 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003068:	b490      	push	{r4, r7}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3360      	adds	r3, #96	; 0x60
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4313      	orrs	r3, r2
 800308c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bc90      	pop	{r4, r7}
 8003096:	4770      	bx	lr

08003098 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003098:	b490      	push	{r4, r7}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc90      	pop	{r4, r7}
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030c8:	b490      	push	{r4, r7}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc90      	pop	{r4, r7}
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	615a      	str	r2, [r3, #20]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800311e:	b490      	push	{r4, r7}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	4413      	add	r3, r2
 800313c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	211f      	movs	r1, #31
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	f003 011f 	and.w	r1, r3, #31
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bc90      	pop	{r4, r7}
 800316e:	4770      	bx	lr

08003170 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003170:	b490      	push	{r4, r7}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3314      	adds	r3, #20
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	0e5b      	lsrs	r3, r3, #25
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0d1b      	lsrs	r3, r3, #20
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2107      	movs	r1, #7
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	401a      	ands	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0d1b      	lsrs	r3, r3, #20
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc90      	pop	{r4, r7}
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0318 	and.w	r3, r3, #24
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031e4:	40d9      	lsrs	r1, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	400b      	ands	r3, r1
 80031ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	0007ffff 	.word	0x0007ffff

08003208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6093      	str	r3, [r2, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d101      	bne.n	8003246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003290:	d101      	bne.n	8003296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <LL_ADC_IsEnabled+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_IsEnabled+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d101      	bne.n	8003308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1ad      	b.n	800368e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fe f853 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff67 	bl	800322c <LL_ADC_IsDeepPowerDownEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff4d 	bl	8003208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff82 	bl	800327c <LL_ADC_IsInternalRegulatorEnabled>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff66 	bl	8003254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003388:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <HAL_ADC_Init+0x2ec>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	4a9e      	ldr	r2, [pc, #632]	; (8003608 <HAL_ADC_Init+0x2f0>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003398:	e002      	b.n	80033a0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff66 	bl	800327c <LL_ADC_IsInternalRegulatorEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff77 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 80033dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 8148 	bne.w	800367c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8144 	bne.w	800367c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033fc:	f043 0202 	orr.w	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff4b 	bl	80032a4 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d141      	bne.n	8003498 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341c:	d004      	beq.n	8003428 <HAL_ADC_Init+0x110>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7a      	ldr	r2, [pc, #488]	; (800360c <HAL_ADC_Init+0x2f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10f      	bne.n	8003448 <HAL_ADC_Init+0x130>
 8003428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800342c:	f7ff ff3a 	bl	80032a4 <LL_ADC_IsEnabled>
 8003430:	4604      	mov	r4, r0
 8003432:	4876      	ldr	r0, [pc, #472]	; (800360c <HAL_ADC_Init+0x2f4>)
 8003434:	f7ff ff36 	bl	80032a4 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_ADC_Init+0x156>
 8003448:	4871      	ldr	r0, [pc, #452]	; (8003610 <HAL_ADC_Init+0x2f8>)
 800344a:	f7ff ff2b 	bl	80032a4 <LL_ADC_IsEnabled>
 800344e:	4604      	mov	r4, r0
 8003450:	4870      	ldr	r0, [pc, #448]	; (8003614 <HAL_ADC_Init+0x2fc>)
 8003452:	f7ff ff27 	bl	80032a4 <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	431c      	orrs	r4, r3
 800345a:	486f      	ldr	r0, [pc, #444]	; (8003618 <HAL_ADC_Init+0x300>)
 800345c:	f7ff ff22 	bl	80032a4 <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347a:	d004      	beq.n	8003486 <HAL_ADC_Init+0x16e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a62      	ldr	r2, [pc, #392]	; (800360c <HAL_ADC_Init+0x2f4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_ADC_Init+0x172>
 8003486:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_ADC_Init+0x304>)
 8003488:	e000      	b.n	800348c <HAL_ADC_Init+0x174>
 800348a:	4a65      	ldr	r2, [pc, #404]	; (8003620 <HAL_ADC_Init+0x308>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f7ff fd7e 	bl	8002f94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7f5b      	ldrb	r3, [r3, #29]
 800349c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80034a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80034ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d106      	bne.n	80034d4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	045b      	lsls	r3, r3, #17
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_ADC_Init+0x30c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	430b      	orrs	r3, r1
 8003502:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fed3 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 8003524:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fee0 	bl	80032f0 <LL_ADC_INJ_IsConversionOngoing>
 8003530:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d17f      	bne.n	8003638 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d17c      	bne.n	8003638 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003542:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800354a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800355a:	f023 0302 	bic.w	r3, r3, #2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	430b      	orrs	r3, r1
 8003566:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d017      	beq.n	80035a0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800357e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003588:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800358c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6911      	ldr	r1, [r2, #16]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800359e:	e013      	b.n	80035c8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d12a      	bne.n	8003628 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035f4:	430a      	orrs	r2, r1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	e019      	b.n	8003638 <HAL_ADC_Init+0x320>
 8003604:	20000010 	.word	0x20000010
 8003608:	053e2d63 	.word	0x053e2d63
 800360c:	50000100 	.word	0x50000100
 8003610:	50000400 	.word	0x50000400
 8003614:	50000500 	.word	0x50000500
 8003618:	50000600 	.word	0x50000600
 800361c:	50000300 	.word	0x50000300
 8003620:	50000700 	.word	0x50000700
 8003624:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10c      	bne.n	800365a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f023 010f 	bic.w	r1, r3, #15
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
 8003658:	e007      	b.n	800366a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 020f 	bic.w	r2, r2, #15
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	65da      	str	r2, [r3, #92]	; 0x5c
 800367a:	e007      	b.n	800368c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800368c:	7ffb      	ldrb	r3, [r7, #31]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop

08003698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0a6      	sub	sp, #152	; 0x98
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x22>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e38e      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x740>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fdff 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 836f 	bne.w	8003db2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f7ff fd1c 	bl	800311e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fded 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 80036f0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fdf9 	bl	80032f0 <LL_ADC_INJ_IsConversionOngoing>
 80036fe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 817b 	bne.w	8003a02 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8176 	bne.w	8003a02 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371e:	d10f      	bne.n	8003740 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2200      	movs	r2, #0
 800372a:	4619      	mov	r1, r3
 800372c:	f7ff fd20 	bl	8003170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fcdd 	bl	80030f8 <LL_ADC_SetSamplingTimeCommonConfig>
 800373e:	e00e      	b.n	800375e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	461a      	mov	r2, r3
 800374e:	f7ff fd0f 	bl	8003170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fccd 	bl	80030f8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d022      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003790:	f7ff fc34 	bl	8002ffc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6919      	ldr	r1, [r3, #16]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f7ff fc79 	bl	8003098 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	7f1b      	ldrb	r3, [r3, #28]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x124>
 80037b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ba:	e000      	b.n	80037be <HAL_ADC_ConfigChannel+0x126>
 80037bc:	2300      	movs	r3, #0
 80037be:	461a      	mov	r2, r3
 80037c0:	f7ff fc82 	bl	80030c8 <LL_ADC_SetOffsetSaturation>
 80037c4:	e11d      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fc37 	bl	8003040 <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x15a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fc2c 	bl	8003040 <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	e012      	b.n	8003818 <HAL_ADC_ConfigChannel+0x180>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fc21 	bl	8003040 <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x198>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	e00a      	b.n	8003846 <HAL_ADC_ConfigChannel+0x1ae>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800383e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fc08 	bl	8003068 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fbee 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1ec>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fbe3 	bl	8003040 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	e010      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x20e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fbd8 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <HAL_ADC_ConfigChannel+0x226>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	e00a      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x23c>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d106      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	2101      	movs	r1, #1
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fbc1 	bl	8003068 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fba7 	bl	8003040 <LL_ADC_GetOffsetChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x27a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fb9c 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	0e9b      	lsrs	r3, r3, #26
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	e010      	b.n	8003934 <HAL_ADC_ConfigChannel+0x29c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fb91 	bl	8003040 <LL_ADC_GetOffsetChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800392a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_ADC_ConfigChannel+0x2b4>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	e00a      	b.n	8003962 <HAL_ADC_ConfigChannel+0x2ca>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800395a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	429a      	cmp	r2, r3
 8003964:	d106      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fb7a 	bl	8003068 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2103      	movs	r1, #3
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fb60 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x308>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2103      	movs	r1, #3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fb55 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	f003 021f 	and.w	r2, r3, #31
 800399e:	e010      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x32a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2103      	movs	r1, #3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fb4a 	bl	8003040 <LL_ADC_GetOffsetChannel>
 80039ac:	4603      	mov	r3, r0
 80039ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_ADC_ConfigChannel+0x342>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	0e9b      	lsrs	r3, r3, #26
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	e00a      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x358>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d106      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2103      	movs	r1, #3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb33 	bl	8003068 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fc4c 	bl	80032a4 <LL_ADC_IsEnabled>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 810c 	bne.w	8003c2c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7ff fbcd 	bl	80031c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4aaf      	ldr	r2, [pc, #700]	; (8003ce8 <HAL_ADC_ConfigChannel+0x650>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	f040 80fd 	bne.w	8003c2c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3c2>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	bf94      	ite	ls
 8003a52:	2301      	movls	r3, #1
 8003a54:	2300      	movhi	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e012      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x3e8>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2b09      	cmp	r3, #9
 8003a78:	bf94      	ite	ls
 8003a7a:	2301      	movls	r3, #1
 8003a7c:	2300      	movhi	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d064      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x408>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	069b      	lsls	r3, r3, #26
 8003a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	e00e      	b.n	8003abe <HAL_ADC_ConfigChannel+0x426>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	069b      	lsls	r3, r3, #26
 8003aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x446>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	e010      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x468>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x48e>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	051b      	lsls	r3, r3, #20
 8003b24:	e011      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x4b2>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 021f 	and.w	r2, r3, #31
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	e069      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x4d2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0e9b      	lsrs	r3, r3, #26
 8003b60:	3301      	adds	r3, #1
 8003b62:	069b      	lsls	r3, r3, #26
 8003b64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b68:	e00e      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x4f0>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
  return result;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	069b      	lsls	r3, r3, #26
 8003b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x510>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	e010      	b.n	8003bca <HAL_ADC_ConfigChannel+0x532>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	617b      	str	r3, [r7, #20]
  return result;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	ea42 0103 	orr.w	r1, r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x55e>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0e9b      	lsrs	r3, r3, #26
 8003be0:	3301      	adds	r3, #1
 8003be2:	f003 021f 	and.w	r2, r3, #31
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	3b1e      	subs	r3, #30
 8003bee:	051b      	lsls	r3, r3, #20
 8003bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	e014      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x588>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	60fb      	str	r3, [r7, #12]
  return result;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f003 021f 	and.w	r2, r3, #31
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	3b1e      	subs	r3, #30
 8003c1a:	051b      	lsls	r3, r3, #20
 8003c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c20:	430b      	orrs	r3, r1
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6892      	ldr	r2, [r2, #8]
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7ff faa2 	bl	8003170 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_ADC_ConfigChannel+0x654>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80c9 	beq.w	8003dcc <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_ConfigChannel+0x5b6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_ADC_ConfigChannel+0x658>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x5ba>
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_ADC_ConfigChannel+0x65c>)
 8003c50:	e000      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x5bc>
 8003c52:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <HAL_ADC_ConfigChannel+0x660>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f9c3 	bl	8002fe0 <LL_ADC_GetCommonPathInternalCh>
 8003c5a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <HAL_ADC_ConfigChannel+0x664>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0x5da>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_ADC_ConfigChannel+0x668>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d14e      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d148      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c86:	d005      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x5fc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_ADC_ConfigChannel+0x66c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f040 8099 	bne.w	8003dc6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x610>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_ADC_ConfigChannel+0x658>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x614>
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_ADC_ConfigChannel+0x65c>)
 8003caa:	e000      	b.n	8003cae <HAL_ADC_ConfigChannel+0x616>
 8003cac:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <HAL_ADC_ConfigChannel+0x660>)
 8003cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7ff f97e 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_ADC_ConfigChannel+0x670>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_ADC_ConfigChannel+0x674>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	099a      	lsrs	r2, r3, #6
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cd6:	e002      	b.n	8003cde <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f9      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce4:	e06f      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x72e>
 8003ce6:	bf00      	nop
 8003ce8:	407f0000 	.word	0x407f0000
 8003cec:	80080000 	.word	0x80080000
 8003cf0:	50000100 	.word	0x50000100
 8003cf4:	50000300 	.word	0x50000300
 8003cf8:	50000700 	.word	0x50000700
 8003cfc:	c3210000 	.word	0xc3210000
 8003d00:	90c00010 	.word	0x90c00010
 8003d04:	50000600 	.word	0x50000600
 8003d08:	20000010 	.word	0x20000010
 8003d0c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <HAL_ADC_ConfigChannel+0x748>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d125      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x6ce>
 8003d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11f      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2e      	ldr	r2, [pc, #184]	; (8003de4 <HAL_ADC_ConfigChannel+0x74c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d104      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x6a2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <HAL_ADC_ConfigChannel+0x750>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d047      	beq.n	8003dca <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x6b6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_ADC_ConfigChannel+0x74c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x6ba>
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_ADC_ConfigChannel+0x754>)
 8003d50:	e000      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x6bc>
 8003d52:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <HAL_ADC_ConfigChannel+0x758>)
 8003d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7ff f92b 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d64:	e031      	b.n	8003dca <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_ADC_ConfigChannel+0x75c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d12d      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d127      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_ADC_ConfigChannel+0x74c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d8e:	d004      	beq.n	8003d9a <HAL_ADC_ConfigChannel+0x702>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <HAL_ADC_ConfigChannel+0x74c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x706>
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_ADC_ConfigChannel+0x754>)
 8003d9c:	e000      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x708>
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_ADC_ConfigChannel+0x758>)
 8003da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7ff f905 	bl	8002fba <LL_ADC_SetCommonPathInternalCh>
 8003db0:	e00c      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003dc4:	e002      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dd4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3798      	adds	r7, #152	; 0x98
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	c7520000 	.word	0xc7520000
 8003de4:	50000100 	.word	0x50000100
 8003de8:	50000500 	.word	0x50000500
 8003dec:	50000300 	.word	0x50000300
 8003df0:	50000700 	.word	0x50000700
 8003df4:	cb840000 	.word	0xcb840000

08003df8 <LL_ADC_IsEnabled>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_IsEnabled+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_IsEnabled+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b0a1      	sub	sp, #132	; 0x84
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0e3      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e72:	d102      	bne.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	e009      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	; (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d102      	bne.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003e84:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	e001      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0be      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff ffb5 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8003eb4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ffaf 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80a0 	bne.w	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 809c 	bne.w	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a55      	ldr	r2, [pc, #340]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003ee4:	4b56      	ldr	r3, [pc, #344]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ee6:	e000      	b.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003ee8:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d04b      	beq.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f06:	035b      	lsls	r3, r3, #13
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f18:	d004      	beq.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a45      	ldr	r2, [pc, #276]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10f      	bne.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003f24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f28:	f7ff ff66 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	4841      	ldr	r0, [pc, #260]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003f30:	f7ff ff62 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4323      	orrs	r3, r4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e012      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003f44:	483c      	ldr	r0, [pc, #240]	; (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003f46:	f7ff ff57 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	483b      	ldr	r0, [pc, #236]	; (800403c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f4e:	f7ff ff53 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	431c      	orrs	r4, r3
 8003f56:	483c      	ldr	r0, [pc, #240]	; (8004048 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f58:	f7ff ff4e 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4323      	orrs	r3, r4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d056      	beq.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f76:	f023 030f 	bic.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	6892      	ldr	r2, [r2, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	431a      	orrs	r2, r3
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f8a:	e047      	b.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa0:	d004      	beq.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10f      	bne.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003fac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003fb0:	f7ff ff22 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	481f      	ldr	r0, [pc, #124]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003fb8:	f7ff ff1e 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4323      	orrs	r3, r4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e012      	b.n	8003ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003fcc:	481a      	ldr	r0, [pc, #104]	; (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003fce:	f7ff ff13 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4819      	ldr	r0, [pc, #100]	; (800403c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fd6:	f7ff ff0f 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	431c      	orrs	r4, r3
 8003fde:	481a      	ldr	r0, [pc, #104]	; (8004048 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003fe0:	f7ff ff0a 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ffe:	f023 030f 	bic.w	r3, r3, #15
 8004002:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004004:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004006:	e009      	b.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800401a:	e000      	b.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004026:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800402a:	4618      	mov	r0, r3
 800402c:	3784      	adds	r7, #132	; 0x84
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	bf00      	nop
 8004034:	50000100 	.word	0x50000100
 8004038:	50000400 	.word	0x50000400
 800403c:	50000500 	.word	0x50000500
 8004040:	50000300 	.word	0x50000300
 8004044:	50000700 	.word	0x50000700
 8004048:	50000600 	.word	0x50000600

0800404c <LL_EXTI_EnableIT_0_31>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <LL_EXTI_EnableIT_0_31+0x20>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <LL_EXTI_EnableIT_0_31+0x20>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40010400 	.word	0x40010400

08004070 <LL_EXTI_EnableIT_32_63>:
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <LL_EXTI_EnableIT_32_63+0x20>)
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <LL_EXTI_EnableIT_32_63+0x20>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4313      	orrs	r3, r2
 8004082:	620b      	str	r3, [r1, #32]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40010400 	.word	0x40010400

08004094 <LL_EXTI_DisableIT_0_31>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	4904      	ldr	r1, [pc, #16]	; (80040b8 <LL_EXTI_DisableIT_0_31+0x24>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010400 	.word	0x40010400

080040bc <LL_EXTI_DisableIT_32_63>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	620b      	str	r3, [r1, #32]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010400 	.word	0x40010400

080040e4 <LL_EXTI_EnableEvent_0_31>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40010400 	.word	0x40010400

08004108 <LL_EXTI_EnableEvent_32_63>:
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4313      	orrs	r3, r2
 800411a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40010400 	.word	0x40010400

0800412c <LL_EXTI_DisableEvent_0_31>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	43db      	mvns	r3, r3
 800413c:	4904      	ldr	r1, [pc, #16]	; (8004150 <LL_EXTI_DisableEvent_0_31+0x24>)
 800413e:	4013      	ands	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010400 	.word	0x40010400

08004154 <LL_EXTI_DisableEvent_32_63>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <LL_EXTI_DisableEvent_32_63+0x24>)
 800415e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	43db      	mvns	r3, r3
 8004164:	4904      	ldr	r1, [pc, #16]	; (8004178 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004166:	4013      	ands	r3, r2
 8004168:	624b      	str	r3, [r1, #36]	; 0x24
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010400 	.word	0x40010400

0800417c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40010400 	.word	0x40010400

080041a0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80041aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ac:	4904      	ldr	r1, [pc, #16]	; (80041c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40010400 	.word	0x40010400

080041c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	4904      	ldr	r1, [pc, #16]	; (80041e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010400 	.word	0x40010400

080041ec <LL_EXTI_DisableRisingTrig_32_63>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041fe:	4013      	ands	r3, r2
 8004200:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010400 	.word	0x40010400

08004214 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4904      	ldr	r1, [pc, #16]	; (8004234 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4313      	orrs	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010400 	.word	0x40010400

08004238 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4904      	ldr	r1, [pc, #16]	; (8004258 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40010400 	.word	0x40010400

0800425c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	43db      	mvns	r3, r3
 800426c:	4904      	ldr	r1, [pc, #16]	; (8004280 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800426e:	4013      	ands	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010400 	.word	0x40010400

08004284 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	43db      	mvns	r3, r3
 8004294:	4904      	ldr	r1, [pc, #16]	; (80042a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004296:	4013      	ands	r3, r2
 8004298:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010400 	.word	0x40010400

080042ac <LL_EXTI_ClearFlag_0_31>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6153      	str	r3, [r2, #20]
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010400 	.word	0x40010400

080042cc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40010400 	.word	0x40010400

080042ec <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e180      	b.n	800460a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004316:	d102      	bne.n	800431e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e175      	b.n	800460a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7f5b      	ldrb	r3, [r3, #29]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fd f8ed 	bl	8001514 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004344:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b98      	ldr	r3, [pc, #608]	; (80045cc <HAL_COMP_Init+0x2e0>)
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	430b      	orrs	r3, r1
 8004376:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d015      	beq.n	80043b2 <HAL_COMP_Init+0xc6>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d112      	bne.n	80043b2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800438c:	4b90      	ldr	r3, [pc, #576]	; (80045d0 <HAL_COMP_Init+0x2e4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	4a90      	ldr	r2, [pc, #576]	; (80045d4 <HAL_COMP_Init+0x2e8>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099a      	lsrs	r2, r3, #6
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80043a4:	e002      	b.n	80043ac <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f9      	bne.n	80043a6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a88      	ldr	r2, [pc, #544]	; (80045d8 <HAL_COMP_Init+0x2ec>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d028      	beq.n	800440e <HAL_COMP_Init+0x122>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a86      	ldr	r2, [pc, #536]	; (80045dc <HAL_COMP_Init+0x2f0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d020      	beq.n	8004408 <HAL_COMP_Init+0x11c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a85      	ldr	r2, [pc, #532]	; (80045e0 <HAL_COMP_Init+0x2f4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_COMP_Init+0x116>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <HAL_COMP_Init+0x2f8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d010      	beq.n	80043fc <HAL_COMP_Init+0x110>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a82      	ldr	r2, [pc, #520]	; (80045e8 <HAL_COMP_Init+0x2fc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d008      	beq.n	80043f6 <HAL_COMP_Init+0x10a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_COMP_Init+0x300>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_COMP_Init+0x106>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00f      	b.n	8004412 <HAL_COMP_Init+0x126>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00d      	b.n	8004412 <HAL_COMP_Init+0x126>
 80043f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043fa:	e00a      	b.n	8004412 <HAL_COMP_Init+0x126>
 80043fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004400:	e007      	b.n	8004412 <HAL_COMP_Init+0x126>
 8004402:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004406:	e004      	b.n	8004412 <HAL_COMP_Init+0x126>
 8004408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800440c:	e001      	b.n	8004412 <HAL_COMP_Init+0x126>
 800440e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004412:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80b6 	beq.w	800458e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_COMP_Init+0x300>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_COMP_Init+0x156>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6c      	ldr	r2, [pc, #432]	; (80045f0 <HAL_COMP_Init+0x304>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d103      	bne.n	800444a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff feac 	bl	80041a0 <LL_EXTI_EnableRisingTrig_32_63>
 8004448:	e014      	b.n	8004474 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f7ff fe96 	bl	800417c <LL_EXTI_EnableRisingTrig_0_31>
 8004450:	e010      	b.n	8004474 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a65      	ldr	r2, [pc, #404]	; (80045ec <HAL_COMP_Init+0x300>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_COMP_Init+0x17a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a63      	ldr	r2, [pc, #396]	; (80045f0 <HAL_COMP_Init+0x304>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d103      	bne.n	800446e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8004466:	6938      	ldr	r0, [r7, #16]
 8004468:	f7ff fec0 	bl	80041ec <LL_EXTI_DisableRisingTrig_32_63>
 800446c:	e002      	b.n	8004474 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800446e:	6938      	ldr	r0, [r7, #16]
 8004470:	f7ff fea8 	bl	80041c4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d011      	beq.n	80044a4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a59      	ldr	r2, [pc, #356]	; (80045ec <HAL_COMP_Init+0x300>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_COMP_Init+0x1a8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_COMP_Init+0x304>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004494:	6938      	ldr	r0, [r7, #16]
 8004496:	f7ff fecf 	bl	8004238 <LL_EXTI_EnableFallingTrig_32_63>
 800449a:	e014      	b.n	80044c6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800449c:	6938      	ldr	r0, [r7, #16]
 800449e:	f7ff feb9 	bl	8004214 <LL_EXTI_EnableFallingTrig_0_31>
 80044a2:	e010      	b.n	80044c6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a50      	ldr	r2, [pc, #320]	; (80045ec <HAL_COMP_Init+0x300>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_COMP_Init+0x1cc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4f      	ldr	r2, [pc, #316]	; (80045f0 <HAL_COMP_Init+0x304>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d103      	bne.n	80044c0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80044b8:	6938      	ldr	r0, [r7, #16]
 80044ba:	f7ff fee3 	bl	8004284 <LL_EXTI_DisableFallingTrig_32_63>
 80044be:	e002      	b.n	80044c6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80044c0:	6938      	ldr	r0, [r7, #16]
 80044c2:	f7ff fecb 	bl	800425c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_COMP_Init+0x300>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_COMP_Init+0x1ee>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a46      	ldr	r2, [pc, #280]	; (80045f0 <HAL_COMP_Init+0x304>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d103      	bne.n	80044e2 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80044da:	6938      	ldr	r0, [r7, #16]
 80044dc:	f7ff fef6 	bl	80042cc <LL_EXTI_ClearFlag_32_63>
 80044e0:	e002      	b.n	80044e8 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80044e2:	6938      	ldr	r0, [r7, #16]
 80044e4:	f7ff fee2 	bl	80042ac <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d011      	beq.n	8004518 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <HAL_COMP_Init+0x300>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_COMP_Init+0x21c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <HAL_COMP_Init+0x304>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004508:	6938      	ldr	r0, [r7, #16]
 800450a:	f7ff fdfd 	bl	8004108 <LL_EXTI_EnableEvent_32_63>
 800450e:	e014      	b.n	800453a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004510:	6938      	ldr	r0, [r7, #16]
 8004512:	f7ff fde7 	bl	80040e4 <LL_EXTI_EnableEvent_0_31>
 8004516:	e010      	b.n	800453a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a33      	ldr	r2, [pc, #204]	; (80045ec <HAL_COMP_Init+0x300>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_COMP_Init+0x240>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <HAL_COMP_Init+0x304>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800452c:	6938      	ldr	r0, [r7, #16]
 800452e:	f7ff fe11 	bl	8004154 <LL_EXTI_DisableEvent_32_63>
 8004532:	e002      	b.n	800453a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004534:	6938      	ldr	r0, [r7, #16]
 8004536:	f7ff fdf9 	bl	800412c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a28      	ldr	r2, [pc, #160]	; (80045ec <HAL_COMP_Init+0x300>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_COMP_Init+0x26e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_COMP_Init+0x304>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d103      	bne.n	8004562 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f7ff fd88 	bl	8004070 <LL_EXTI_EnableIT_32_63>
 8004560:	e04b      	b.n	80045fa <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004562:	6938      	ldr	r0, [r7, #16]
 8004564:	f7ff fd72 	bl	800404c <LL_EXTI_EnableIT_0_31>
 8004568:	e047      	b.n	80045fa <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_COMP_Init+0x300>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_COMP_Init+0x292>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_COMP_Init+0x304>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d103      	bne.n	8004586 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800457e:	6938      	ldr	r0, [r7, #16]
 8004580:	f7ff fd9c 	bl	80040bc <LL_EXTI_DisableIT_32_63>
 8004584:	e039      	b.n	80045fa <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f7ff fd84 	bl	8004094 <LL_EXTI_DisableIT_0_31>
 800458c:	e035      	b.n	80045fa <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_COMP_Init+0x300>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_COMP_Init+0x2b6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <HAL_COMP_Init+0x304>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d103      	bne.n	80045aa <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80045a2:	6938      	ldr	r0, [r7, #16]
 80045a4:	f7ff fdd6 	bl	8004154 <LL_EXTI_DisableEvent_32_63>
 80045a8:	e002      	b.n	80045b0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f7ff fdbe 	bl	800412c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_COMP_Init+0x300>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_COMP_Init+0x2d8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <HAL_COMP_Init+0x304>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d117      	bne.n	80045f4 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80045c4:	6938      	ldr	r0, [r7, #16]
 80045c6:	f7ff fd79 	bl	80040bc <LL_EXTI_DisableIT_32_63>
 80045ca:	e016      	b.n	80045fa <HAL_COMP_Init+0x30e>
 80045cc:	ff007e0f 	.word	0xff007e0f
 80045d0:	20000010 	.word	0x20000010
 80045d4:	053e2d63 	.word	0x053e2d63
 80045d8:	40010200 	.word	0x40010200
 80045dc:	40010204 	.word	0x40010204
 80045e0:	40010208 	.word	0x40010208
 80045e4:	4001020c 	.word	0x4001020c
 80045e8:	40010210 	.word	0x40010210
 80045ec:	40010214 	.word	0x40010214
 80045f0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f7ff fd4d 	bl	8004094 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7f5b      	ldrb	r3, [r3, #29]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800460a:	7ffb      	ldrb	r3, [r7, #31]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <__NVIC_SetPriorityGrouping>:
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800463c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_GetPriorityGrouping>:
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <__NVIC_GetPriorityGrouping+0x18>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 0307 	and.w	r3, r3, #7
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_EnableIRQ>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db0b      	blt.n	80046a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <__NVIC_EnableIRQ+0x38>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2001      	movs	r0, #1
 800469a:	fa00 f202 	lsl.w	r2, r0, r2
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <SysTick_Config>:
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004780:	d301      	bcc.n	8004786 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004782:	2301      	movs	r3, #1
 8004784:	e00f      	b.n	80047a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <SysTick_Config+0x40>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478e:	210f      	movs	r1, #15
 8004790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004794:	f7ff ff8e 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <SysTick_Config+0x40>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <SysTick_Config+0x40>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010

080047b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff29 	bl	8004614 <__NVIC_SetPriorityGrouping>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff40 	bl	800465c <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff33 	bl	8004678 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa4 	bl	8004770 <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e014      	b.n	800486e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fc ff13 	bl	8001680 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	795b      	ldrb	r3, [r3, #5]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_DAC_Start+0x16>
 8004888:	2302      	movs	r3, #2
 800488a:	e043      	b.n	8004914 <HAL_DAC_Start+0x9e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7fe fb4d 	bl	8002f50 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10f      	bne.n	80048dc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d11d      	bne.n	8004906 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	e014      	b.n	8004906 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2102      	movs	r1, #2
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d107      	bne.n	8004906 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0202 	orr.w	r2, r2, #2
 8004904:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	795b      	ldrb	r3, [r3, #5]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_DAC_Start_DMA+0x1e>
 8004936:	2302      	movs	r3, #2
 8004938:	e0a1      	b.n	8004a7e <HAL_DAC_Start_DMA+0x162>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2202      	movs	r2, #2
 8004944:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d12a      	bne.n	80049a2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a4d      	ldr	r2, [pc, #308]	; (8004a88 <HAL_DAC_Start_DMA+0x16c>)
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a4c      	ldr	r2, [pc, #304]	; (8004a8c <HAL_DAC_Start_DMA+0x170>)
 800495a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a4b      	ldr	r2, [pc, #300]	; (8004a90 <HAL_DAC_Start_DMA+0x174>)
 8004962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004972:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d009      	beq.n	800498e <HAL_DAC_Start_DMA+0x72>
 800497a:	2b08      	cmp	r3, #8
 800497c:	d00c      	beq.n	8004998 <HAL_DAC_Start_DMA+0x7c>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d000      	beq.n	8004984 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004982:	e039      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	613b      	str	r3, [r7, #16]
        break;
 800498c:	e034      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	613b      	str	r3, [r7, #16]
        break;
 8004996:	e02f      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3310      	adds	r3, #16
 800499e:	613b      	str	r3, [r7, #16]
        break;
 80049a0:	e02a      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <HAL_DAC_Start_DMA+0x178>)
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <HAL_DAC_Start_DMA+0x17c>)
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4a39      	ldr	r2, [pc, #228]	; (8004a9c <HAL_DAC_Start_DMA+0x180>)
 80049b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d009      	beq.n	80049e4 <HAL_DAC_Start_DMA+0xc8>
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d00c      	beq.n	80049ee <HAL_DAC_Start_DMA+0xd2>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d000      	beq.n	80049da <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80049d8:	e00e      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	613b      	str	r3, [r7, #16]
        break;
 80049e2:	e009      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3318      	adds	r3, #24
 80049ea:	613b      	str	r3, [r7, #16]
        break;
 80049ec:	e004      	b.n	80049f8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	331c      	adds	r3, #28
 80049f4:	613b      	str	r3, [r7, #16]
        break;
 80049f6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d111      	bne.n	8004a22 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6898      	ldr	r0, [r3, #8]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	f000 fbc8 	bl	80051ac <HAL_DMA_Start_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
 8004a20:	e010      	b.n	8004a44 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a30:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68d8      	ldr	r0, [r3, #12]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	f000 fbb6 	bl	80051ac <HAL_DMA_Start_IT>
 8004a40:	4603      	mov	r3, r0
 8004a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f7fe fa71 	bl	8002f50 <HAL_Delay>
 8004a6e:	e005      	b.n	8004a7c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08004f49 	.word	0x08004f49
 8004a8c:	08004f6b 	.word	0x08004f6b
 8004a90:	08004f87 	.word	0x08004f87
 8004a94:	08004ff1 	.word	0x08004ff1
 8004a98:	08005013 	.word	0x08005013
 8004a9c:	0800502f 	.word	0x0800502f

08004aa0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fe fa33 	bl	8002f50 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fbd4 	bl	80052a2 <HAL_DMA_Abort>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e00e      	b.n	8004b2e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fbc4 	bl	80052a2 <HAL_DMA_Abort>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2204      	movs	r2, #4
 8004b38:	711a      	strb	r2, [r3, #4]
 8004b3a:	e002      	b.n	8004b42 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	3308      	adds	r3, #8
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e004      	b.n	8004b86 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3314      	adds	r3, #20
 8004b84:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	e002      	b.n	8004be2 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	795b      	ldrb	r3, [r3, #5]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_DAC_ConfigChannel+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e194      	b.n	8004f36 <HAL_DAC_ConfigChannel+0x346>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2202      	movs	r2, #2
 8004c16:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d174      	bne.n	8004d0a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d137      	bne.n	8004c96 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004c26:	f7fe f987 	bl	8002f38 <HAL_GetTick>
 8004c2a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c2c:	e011      	b.n	8004c52 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c2e:	f7fe f983 	bl	8002f38 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d90a      	bls.n	8004c52 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f043 0208 	orr.w	r2, r3, #8
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e171      	b.n	8004f36 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004c60:	2001      	movs	r0, #1
 8004c62:	f7fe f975 	bl	8002f50 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8004c70:	e01e      	b.n	8004cb0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c72:	f7fe f961 	bl	8002f38 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d90a      	bls.n	8004c96 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f043 0208 	orr.w	r2, r3, #8
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e14f      	b.n	8004f36 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	dbe8      	blt.n	8004c72 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7fe f955 	bl	8002f50 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	ea02 0103 	and.w	r1, r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	21ff      	movs	r1, #255	; 0xff
 8004cec:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	ea02 0103 	and.w	r1, r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	409a      	lsls	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d11d      	bne.n	8004d4e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	221f      	movs	r2, #31
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	4013      	ands	r3, r2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e011      	b.n	8004da0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e008      	b.n	8004da0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004d96:	2301      	movs	r3, #1
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	e001      	b.n	8004da0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d102      	bne.n	8004dd4 <HAL_DAC_ConfigChannel+0x1e4>
 8004dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd2:	e000      	b.n	8004dd6 <HAL_DAC_ConfigChannel+0x1e6>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	4013      	ands	r3, r2
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	795b      	ldrb	r3, [r3, #5]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_DAC_ConfigChannel+0x210>
 8004dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dfe:	e000      	b.n	8004e02 <HAL_DAC_ConfigChannel+0x212>
 8004e00:	2300      	movs	r3, #0
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d114      	bne.n	8004e42 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004e18:	f001 faf8 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8004e1c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4a47      	ldr	r2, [pc, #284]	; (8004f40 <HAL_DAC_ConfigChannel+0x350>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d904      	bls.n	8004e30 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e00d      	b.n	8004e4c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4a44      	ldr	r2, [pc, #272]	; (8004f44 <HAL_DAC_ConfigChannel+0x354>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d909      	bls.n	8004e4c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e40:	e004      	b.n	8004e4c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6819      	ldr	r1, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	400a      	ands	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	22c0      	movs	r2, #192	; 0xc0
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	43da      	mvns	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	400a      	ands	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	43db      	mvns	r3, r3
 8004f12:	ea02 0103 	and.w	r1, r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	09896800 	.word	0x09896800
 8004f44:	04c4b400 	.word	0x04c4b400

08004f48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fe20 	bl	8004b9c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	711a      	strb	r2, [r3, #4]
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fe19 	bl	8004bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f043 0204 	orr.w	r2, r3, #4
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7fd f812 	bl	8001fca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	711a      	strb	r2, [r3, #4]
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff ffd8 	bl	8004fb4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	711a      	strb	r2, [r3, #4]
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff ffd1 	bl	8004fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ffc7 	bl	8004fdc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	711a      	strb	r2, [r3, #4]
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e08d      	b.n	800518a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_DMA_Init+0x138>)
 8005076:	429a      	cmp	r2, r3
 8005078:	d80f      	bhi.n	800509a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	4b45      	ldr	r3, [pc, #276]	; (8005198 <HAL_DMA_Init+0x13c>)
 8005082:	4413      	add	r3, r2
 8005084:	4a45      	ldr	r2, [pc, #276]	; (800519c <HAL_DMA_Init+0x140>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	009a      	lsls	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a42      	ldr	r2, [pc, #264]	; (80051a0 <HAL_DMA_Init+0x144>)
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
 8005098:	e00e      	b.n	80050b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	4b40      	ldr	r3, [pc, #256]	; (80051a4 <HAL_DMA_Init+0x148>)
 80050a2:	4413      	add	r3, r2
 80050a4:	4a3d      	ldr	r2, [pc, #244]	; (800519c <HAL_DMA_Init+0x140>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	009a      	lsls	r2, r3, #2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <HAL_DMA_Init+0x14c>)
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa10 	bl	8005530 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005118:	d102      	bne.n	8005120 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005134:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d010      	beq.n	8005160 <HAL_DMA_Init+0x104>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d80c      	bhi.n	8005160 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa30 	bl	80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e008      	b.n	8005172 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40020407 	.word	0x40020407
 8005198:	bffdfff8 	.word	0xbffdfff8
 800519c:	cccccccd 	.word	0xcccccccd
 80051a0:	40020000 	.word	0x40020000
 80051a4:	bffdfbf8 	.word	0xbffdfbf8
 80051a8:	40020400 	.word	0x40020400

080051ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_DMA_Start_IT+0x20>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e066      	b.n	800529a <HAL_DMA_Start_IT+0xee>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d155      	bne.n	800528c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f954 	bl	80054b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 020e 	orr.w	r2, r2, #14
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e00f      	b.n	8005244 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 020a 	orr.w	r2, r2, #10
 8005242:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005260:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005278:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e005      	b.n	8005298 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005294:	2302      	movs	r3, #2
 8005296:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d005      	beq.n	80052c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	e037      	b.n	8005336 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 020e 	bic.w	r2, r2, #14
 80052d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	f003 021f 	and.w	r2, r3, #31
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f202 	lsl.w	r2, r1, r2
 8005308:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005312:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005334:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	2204      	movs	r2, #4
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d026      	beq.n	80053ce <HAL_DMA_IRQHandler+0x7a>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d021      	beq.n	80053ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ac:	f003 021f 	and.w	r2, r3, #31
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2104      	movs	r1, #4
 80053b6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d071      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053cc:	e06c      	b.n	80054a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2202      	movs	r2, #2
 80053d8:	409a      	lsls	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d02e      	beq.n	8005440 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d029      	beq.n	8005440 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 020a 	bic.w	r2, r2, #10
 8005408:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f003 021f 	and.w	r2, r3, #31
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2102      	movs	r1, #2
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d038      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800543e:	e033      	b.n	80054a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2208      	movs	r2, #8
 800544a:	409a      	lsls	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02a      	beq.n	80054aa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d025      	beq.n	80054aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 020e 	bic.w	r2, r2, #14
 800546c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f003 021f 	and.w	r2, r3, #31
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f202 	lsl.w	r2, r1, r2
 8005480:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
}
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054c8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054da:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f202 	lsl.w	r2, r1, r2
 80054ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d108      	bne.n	8005512 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005510:	e007      	b.n	8005522 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	4b16      	ldr	r3, [pc, #88]	; (8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005540:	429a      	cmp	r2, r3
 8005542:	d802      	bhi.n	800554a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005544:	4b15      	ldr	r3, [pc, #84]	; (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e001      	b.n	800554e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800554c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	3b08      	subs	r3, #8
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	009a      	lsls	r2, r3, #2
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800557a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	651a      	str	r2, [r3, #80]	; 0x50
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40020407 	.word	0x40020407
 800559c:	40020800 	.word	0x40020800
 80055a0:	40020820 	.word	0x40020820
 80055a4:	cccccccd 	.word	0xcccccccd
 80055a8:	40020880 	.word	0x40020880

080055ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2201      	movs	r2, #1
 80055da:	409a      	lsls	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	1000823f 	.word	0x1000823f
 80055f0:	40020940 	.word	0x40020940

080055f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005602:	e15a      	b.n	80058ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 814c 	beq.w	80058b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d00b      	beq.n	800563c <HAL_GPIO_Init+0x48>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d007      	beq.n	800563c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005630:	2b11      	cmp	r3, #17
 8005632:	d003      	beq.n	800563c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b12      	cmp	r3, #18
 800563a:	d130      	bne.n	800569e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005672:	2201      	movs	r2, #1
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	2203      	movs	r2, #3
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0xea>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b12      	cmp	r3, #18
 80056dc:	d123      	bne.n	8005726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	2203      	movs	r2, #3
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80a6 	beq.w	80058b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <HAL_GPIO_Init+0x2e4>)
 800576a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576c:	4a5a      	ldr	r2, [pc, #360]	; (80058d8 <HAL_GPIO_Init+0x2e4>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6613      	str	r3, [r2, #96]	; 0x60
 8005774:	4b58      	ldr	r3, [pc, #352]	; (80058d8 <HAL_GPIO_Init+0x2e4>)
 8005776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005780:	4a56      	ldr	r2, [pc, #344]	; (80058dc <HAL_GPIO_Init+0x2e8>)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	3302      	adds	r3, #2
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057aa:	d01f      	beq.n	80057ec <HAL_GPIO_Init+0x1f8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a4c      	ldr	r2, [pc, #304]	; (80058e0 <HAL_GPIO_Init+0x2ec>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d019      	beq.n	80057e8 <HAL_GPIO_Init+0x1f4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a4b      	ldr	r2, [pc, #300]	; (80058e4 <HAL_GPIO_Init+0x2f0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_GPIO_Init+0x1f0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a4a      	ldr	r2, [pc, #296]	; (80058e8 <HAL_GPIO_Init+0x2f4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00d      	beq.n	80057e0 <HAL_GPIO_Init+0x1ec>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a49      	ldr	r2, [pc, #292]	; (80058ec <HAL_GPIO_Init+0x2f8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x1e8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a48      	ldr	r2, [pc, #288]	; (80058f0 <HAL_GPIO_Init+0x2fc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057d4:	2305      	movs	r3, #5
 80057d6:	e00a      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057d8:	2306      	movs	r3, #6
 80057da:	e008      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057dc:	2304      	movs	r3, #4
 80057de:	e006      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e0:	2303      	movs	r3, #3
 80057e2:	e004      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e002      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057ec:	2300      	movs	r3, #0
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	4093      	lsls	r3, r2
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fe:	4937      	ldr	r1, [pc, #220]	; (80058dc <HAL_GPIO_Init+0x2e8>)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800580c:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <HAL_GPIO_Init+0x300>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	43db      	mvns	r3, r3
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005830:	4a30      	ldr	r2, [pc, #192]	; (80058f4 <HAL_GPIO_Init+0x300>)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_GPIO_Init+0x300>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	43db      	mvns	r3, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800585a:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <HAL_GPIO_Init+0x300>)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005860:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_GPIO_Init+0x300>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	43db      	mvns	r3, r3
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4013      	ands	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <HAL_GPIO_Init+0x300>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_GPIO_Init+0x300>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	43db      	mvns	r3, r3
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4013      	ands	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058ae:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <HAL_GPIO_Init+0x300>)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f ae9d 	bne.w	8005604 <HAL_GPIO_Init+0x10>
  }
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40010000 	.word	0x40010000
 80058e0:	48000400 	.word	0x48000400
 80058e4:	48000800 	.word	0x48000800
 80058e8:	48000c00 	.word	0x48000c00
 80058ec:	48001000 	.word	0x48001000
 80058f0:	48001400 	.word	0x48001400
 80058f4:	40010400 	.word	0x40010400

080058f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e001      	b.n	800591a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	807b      	strh	r3, [r7, #2]
 8005934:	4613      	mov	r3, r2
 8005936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005938:	787b      	ldrb	r3, [r7, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005944:	e002      	b.n	800594c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d141      	bne.n	80059ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005966:	4b4b      	ldr	r3, [pc, #300]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d131      	bne.n	80059d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005974:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	4a46      	ldr	r2, [pc, #280]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005984:	4b43      	ldr	r3, [pc, #268]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800598c:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800598e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005992:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005994:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2232      	movs	r2, #50	; 0x32
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	0c9b      	lsrs	r3, r3, #18
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059aa:	e002      	b.n	80059b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059b2:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059be:	d102      	bne.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f2      	bne.n	80059ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059c6:	4b33      	ldr	r3, [pc, #204]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d2:	d158      	bne.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e057      	b.n	8005a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059d8:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059de:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80059e8:	e04d      	b.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f0:	d141      	bne.n	8005a76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059f2:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	d131      	bne.n	8005a64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a00:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a06:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a10:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a18:	4a1e      	ldr	r2, [pc, #120]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2232      	movs	r2, #50	; 0x32
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	0c9b      	lsrs	r3, r3, #18
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a36:	e002      	b.n	8005a3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d102      	bne.n	8005a52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f2      	bne.n	8005a38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5e:	d112      	bne.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e011      	b.n	8005a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a74:	e007      	b.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a76:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a7e:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40007000 	.word	0x40007000
 8005a98:	20000010 	.word	0x20000010
 8005a9c:	431bde83 	.word	0x431bde83

08005aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e308      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d075      	beq.n	8005baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005abe:	4ba3      	ldr	r3, [pc, #652]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac8:	4ba0      	ldr	r3, [pc, #640]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d102      	bne.n	8005ade <HAL_RCC_OscConfig+0x3e>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d002      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x44>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d10b      	bne.n	8005afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae4:	4b99      	ldr	r3, [pc, #612]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05b      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x108>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d157      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e2e3      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d106      	bne.n	8005b14 <HAL_RCC_OscConfig+0x74>
 8005b06:	4b91      	ldr	r3, [pc, #580]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a90      	ldr	r2, [pc, #576]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e01d      	b.n	8005b50 <HAL_RCC_OscConfig+0xb0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x98>
 8005b1e:	4b8b      	ldr	r3, [pc, #556]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a8a      	ldr	r2, [pc, #552]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	4b88      	ldr	r3, [pc, #544]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a87      	ldr	r2, [pc, #540]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e00b      	b.n	8005b50 <HAL_RCC_OscConfig+0xb0>
 8005b38:	4b84      	ldr	r3, [pc, #528]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a83      	ldr	r2, [pc, #524]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	4b81      	ldr	r3, [pc, #516]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a80      	ldr	r2, [pc, #512]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d013      	beq.n	8005b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd f9ee 	bl	8002f38 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b60:	f7fd f9ea 	bl	8002f38 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	; 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e2a8      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b72:	4b76      	ldr	r3, [pc, #472]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0xc0>
 8005b7e:	e014      	b.n	8005baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fd f9da 	bl	8002f38 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b88:	f7fd f9d6 	bl	8002f38 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	; 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e294      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b9a:	4b6c      	ldr	r3, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0xe8>
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d075      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb6:	4b65      	ldr	r3, [pc, #404]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc0:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x136>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_OscConfig+0x13c>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d11f      	bne.n	8005c1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bdc:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x154>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e267      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b55      	ldr	r3, [pc, #340]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	4952      	ldr	r1, [pc, #328]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c08:	4b51      	ldr	r3, [pc, #324]	; (8005d50 <HAL_RCC_OscConfig+0x2b0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd f947 	bl	8002ea0 <HAL_InitTick>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d043      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e253      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d023      	beq.n	8005c6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	4b49      	ldr	r3, [pc, #292]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a48      	ldr	r2, [pc, #288]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fd f982 	bl	8002f38 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c38:	f7fd f97e 	bl	8002f38 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e23c      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c4a:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c56:	4b3d      	ldr	r3, [pc, #244]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	4939      	ldr	r1, [pc, #228]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	604b      	str	r3, [r1, #4]
 8005c6a:	e01a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6c:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a36      	ldr	r2, [pc, #216]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fd f95e 	bl	8002f38 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c80:	f7fd f95a 	bl	8002f38 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e218      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c92:	4b2e      	ldr	r3, [pc, #184]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x1e0>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d03c      	beq.n	8005d28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01c      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb6:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cbc:	4a23      	ldr	r2, [pc, #140]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc6:	f7fd f937 	bl	8002f38 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cce:	f7fd f933 	bl	8002f38 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e1f1      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ef      	beq.n	8005cce <HAL_RCC_OscConfig+0x22e>
 8005cee:	e01b      	b.n	8005d28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf6:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fd f91a 	bl	8002f38 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d08:	f7fd f916 	bl	8002f38 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1d4      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ef      	bne.n	8005d08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80ab 	beq.w	8005e8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d36:	2300      	movs	r3, #0
 8005d38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d3a:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_RCC_OscConfig+0x2b4>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e005      	b.n	8005d56 <HAL_RCC_OscConfig+0x2b6>
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	20000014 	.word	0x20000014
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d5a:	4baf      	ldr	r3, [pc, #700]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	4aae      	ldr	r2, [pc, #696]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d64:	6593      	str	r3, [r2, #88]	; 0x58
 8005d66:	4bac      	ldr	r3, [pc, #688]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d72:	2301      	movs	r3, #1
 8005d74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d76:	4ba9      	ldr	r3, [pc, #676]	; (800601c <HAL_RCC_OscConfig+0x57c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d118      	bne.n	8005db4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d82:	4ba6      	ldr	r3, [pc, #664]	; (800601c <HAL_RCC_OscConfig+0x57c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4aa5      	ldr	r2, [pc, #660]	; (800601c <HAL_RCC_OscConfig+0x57c>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d8e:	f7fd f8d3 	bl	8002f38 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d96:	f7fd f8cf 	bl	8002f38 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e18d      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da8:	4b9c      	ldr	r3, [pc, #624]	; (800601c <HAL_RCC_OscConfig+0x57c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d108      	bne.n	8005dce <HAL_RCC_OscConfig+0x32e>
 8005dbc:	4b96      	ldr	r3, [pc, #600]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a95      	ldr	r2, [pc, #596]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dcc:	e024      	b.n	8005e18 <HAL_RCC_OscConfig+0x378>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d110      	bne.n	8005df8 <HAL_RCC_OscConfig+0x358>
 8005dd6:	4b90      	ldr	r3, [pc, #576]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	4a8e      	ldr	r2, [pc, #568]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dde:	f043 0304 	orr.w	r3, r3, #4
 8005de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005de6:	4b8c      	ldr	r3, [pc, #560]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	4a8a      	ldr	r2, [pc, #552]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df6:	e00f      	b.n	8005e18 <HAL_RCC_OscConfig+0x378>
 8005df8:	4b87      	ldr	r3, [pc, #540]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	4a86      	ldr	r2, [pc, #536]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e08:	4b83      	ldr	r3, [pc, #524]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	4a82      	ldr	r2, [pc, #520]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e10:	f023 0304 	bic.w	r3, r3, #4
 8005e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fd f88a 	bl	8002f38 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e28:	f7fd f886 	bl	8002f38 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e142      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3e:	4b76      	ldr	r3, [pc, #472]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0ed      	beq.n	8005e28 <HAL_RCC_OscConfig+0x388>
 8005e4c:	e015      	b.n	8005e7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7fd f873 	bl	8002f38 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e54:	e00a      	b.n	8005e6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e56:	f7fd f86f 	bl	8002f38 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e12b      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e6c:	4b6a      	ldr	r3, [pc, #424]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ed      	bne.n	8005e56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e80:	4b65      	ldr	r3, [pc, #404]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	4a64      	ldr	r2, [pc, #400]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d03c      	beq.n	8005f12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01c      	beq.n	8005eda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ea0:	4b5d      	ldr	r3, [pc, #372]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ea6:	4a5c      	ldr	r2, [pc, #368]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fd f842 	bl	8002f38 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eb8:	f7fd f83e 	bl	8002f38 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e0fc      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eca:	4b53      	ldr	r3, [pc, #332]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ef      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x418>
 8005ed8:	e01b      	b.n	8005f12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eda:	4b4f      	ldr	r3, [pc, #316]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee0:	4a4d      	ldr	r2, [pc, #308]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fd f825 	bl	8002f38 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ef2:	f7fd f821 	bl	8002f38 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0df      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f04:	4b44      	ldr	r3, [pc, #272]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1ef      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80d3 	beq.w	80060c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	f000 808d 	beq.w	8006044 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d15a      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f32:	4b39      	ldr	r3, [pc, #228]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a38      	ldr	r2, [pc, #224]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fc fffb 	bl	8002f38 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f46:	f7fc fff7 	bl	8002f38 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e0b5      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f58:	4b2f      	ldr	r3, [pc, #188]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f64:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_RCC_OscConfig+0x580>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6a11      	ldr	r1, [r2, #32]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f74:	3a01      	subs	r2, #1
 8005f76:	0112      	lsls	r2, r2, #4
 8005f78:	4311      	orrs	r1, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f7e:	0212      	lsls	r2, r2, #8
 8005f80:	4311      	orrs	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f86:	0852      	lsrs	r2, r2, #1
 8005f88:	3a01      	subs	r2, #1
 8005f8a:	0552      	lsls	r2, r2, #21
 8005f8c:	4311      	orrs	r1, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f92:	0852      	lsrs	r2, r2, #1
 8005f94:	3a01      	subs	r2, #1
 8005f96:	0652      	lsls	r2, r2, #25
 8005f98:	4311      	orrs	r1, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f9e:	06d2      	lsls	r2, r2, #27
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	491d      	ldr	r1, [pc, #116]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fb4:	4b18      	ldr	r3, [pc, #96]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fc ffba 	bl	8002f38 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc8:	f7fc ffb6 	bl	8002f38 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e074      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x528>
 8005fe6:	e06c      	b.n	80060c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a07      	ldr	r2, [pc, #28]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <HAL_RCC_OscConfig+0x578>)
 8006006:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800600a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc ff92 	bl	8002f38 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006016:	e00e      	b.n	8006036 <HAL_RCC_OscConfig+0x596>
 8006018:	40021000 	.word	0x40021000
 800601c:	40007000 	.word	0x40007000
 8006020:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fc ff88 	bl	8002f38 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e046      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCC_OscConfig+0x62c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x584>
 8006042:	e03e      	b.n	80060c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e039      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006050:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <HAL_RCC_OscConfig+0x62c>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0203 	and.w	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	429a      	cmp	r2, r3
 8006062:	d12c      	bne.n	80060be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	3b01      	subs	r3, #1
 8006070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d123      	bne.n	80060be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d11b      	bne.n	80060be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d113      	bne.n	80060be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	3b01      	subs	r3, #1
 80060a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d109      	bne.n	80060be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000

080060d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e11e      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060e8:	4b91      	ldr	r3, [pc, #580]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d910      	bls.n	8006118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f6:	4b8e      	ldr	r3, [pc, #568]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f023 020f 	bic.w	r2, r3, #15
 80060fe:	498c      	ldr	r1, [pc, #560]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	4b8a      	ldr	r3, [pc, #552]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d001      	beq.n	8006118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e106      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d073      	beq.n	800620c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d129      	bne.n	8006180 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800612c:	4b81      	ldr	r3, [pc, #516]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0f4      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800613c:	f000 f972 	bl	8006424 <RCC_GetSysClockFreqFromPLLSource>
 8006140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4a7c      	ldr	r2, [pc, #496]	; (8006338 <HAL_RCC_ClockConfig+0x268>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d93f      	bls.n	80061ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800614a:	4b7a      	ldr	r3, [pc, #488]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800615e:	2b00      	cmp	r3, #0
 8006160:	d033      	beq.n	80061ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006166:	2b00      	cmp	r3, #0
 8006168:	d12f      	bne.n	80061ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800616a:	4b72      	ldr	r3, [pc, #456]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006172:	4a70      	ldr	r2, [pc, #448]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e024      	b.n	80061ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d107      	bne.n	8006198 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006188:	4b6a      	ldr	r3, [pc, #424]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0c6      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006198:	4b66      	ldr	r3, [pc, #408]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0be      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80061a8:	f000 f8ce 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80061ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4a61      	ldr	r2, [pc, #388]	; (8006338 <HAL_RCC_ClockConfig+0x268>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d909      	bls.n	80061ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061be:	4a5d      	ldr	r2, [pc, #372]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061ca:	4b5a      	ldr	r3, [pc, #360]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f023 0203 	bic.w	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4957      	ldr	r1, [pc, #348]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061dc:	f7fc feac 	bl	8002f38 <HAL_GetTick>
 80061e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e4:	f7fc fea8 	bl	8002f38 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e095      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	4b4e      	ldr	r3, [pc, #312]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 020c 	and.w	r2, r3, #12
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	429a      	cmp	r2, r3
 800620a:	d1eb      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d023      	beq.n	8006260 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a42      	ldr	r2, [pc, #264]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800622a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800622e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800623c:	4b3d      	ldr	r3, [pc, #244]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006244:	4a3b      	ldr	r2, [pc, #236]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 8006246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800624a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800624c:	4b39      	ldr	r3, [pc, #228]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4936      	ldr	r1, [pc, #216]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800625a:	4313      	orrs	r3, r2
 800625c:	608b      	str	r3, [r1, #8]
 800625e:	e008      	b.n	8006272 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d105      	bne.n	8006272 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006266:	4b33      	ldr	r3, [pc, #204]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4a32      	ldr	r2, [pc, #200]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 800626c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006270:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006272:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d21d      	bcs.n	80062bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006280:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 020f 	bic.w	r2, r3, #15
 8006288:	4929      	ldr	r1, [pc, #164]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006290:	f7fc fe52 	bl	8002f38 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fc fe4e 	bl	8002f38 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e03b      	b.n	8006326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ae:	4b20      	ldr	r3, [pc, #128]	; (8006330 <HAL_RCC_ClockConfig+0x260>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1ed      	bne.n	8006298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c8:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4917      	ldr	r1, [pc, #92]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	490f      	ldr	r1, [pc, #60]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062fa:	f000 f825 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80062fe:	4601      	mov	r1, r0
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <HAL_RCC_ClockConfig+0x264>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <HAL_RCC_ClockConfig+0x26c>)
 800630c:	5cd3      	ldrb	r3, [r2, r3]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	fa21 f303 	lsr.w	r3, r1, r3
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x270>)
 8006318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_RCC_ClockConfig+0x274>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fc fdbe 	bl	8002ea0 <HAL_InitTick>
 8006324:	4603      	mov	r3, r0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40022000 	.word	0x40022000
 8006334:	40021000 	.word	0x40021000
 8006338:	04c4b400 	.word	0x04c4b400
 800633c:	0800a63c 	.word	0x0800a63c
 8006340:	20000010 	.word	0x20000010
 8006344:	20000014 	.word	0x20000014

08006348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800634e:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b04      	cmp	r3, #4
 8006358:	d102      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800635a:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	e047      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b08      	cmp	r3, #8
 800636a:	d102      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800636c:	4b26      	ldr	r3, [pc, #152]	; (8006408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	e03e      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006372:	4b23      	ldr	r3, [pc, #140]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b0c      	cmp	r3, #12
 800637c:	d136      	bne.n	80063ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	3301      	adds	r3, #1
 8006394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d10c      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800639c:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a6:	68d2      	ldr	r2, [r2, #12]
 80063a8:	0a12      	lsrs	r2, r2, #8
 80063aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	617b      	str	r3, [r7, #20]
      break;
 80063b4:	e00c      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063c0:	68d2      	ldr	r2, [r2, #12]
 80063c2:	0a12      	lsrs	r2, r2, #8
 80063c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
      break;
 80063ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	0e5b      	lsrs	r3, r3, #25
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e001      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063f0:	693b      	ldr	r3, [r7, #16]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	00f42400 	.word	0x00f42400
 8006408:	007a1200 	.word	0x007a1200

0800640c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <HAL_RCC_GetHCLKFreq+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000010 	.word	0x20000010

08006424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800642a:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10c      	bne.n	8006462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006448:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006452:	68d2      	ldr	r2, [r2, #12]
 8006454:	0a12      	lsrs	r2, r2, #8
 8006456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	617b      	str	r3, [r7, #20]
    break;
 8006460:	e00c      	b.n	800647c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800646c:	68d2      	ldr	r2, [r2, #12]
 800646e:	0a12      	lsrs	r2, r2, #8
 8006470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]
    break;
 800647a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	0e5b      	lsrs	r3, r3, #25
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	3301      	adds	r3, #1
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006496:	687b      	ldr	r3, [r7, #4]
}
 8006498:	4618      	mov	r0, r3
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40021000 	.word	0x40021000
 80064a8:	007a1200 	.word	0x007a1200
 80064ac:	00f42400 	.word	0x00f42400

080064b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064b8:	2300      	movs	r3, #0
 80064ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064bc:	2300      	movs	r3, #0
 80064be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8098 	beq.w	80065fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ce:	2300      	movs	r3, #0
 80064d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d2:	4b43      	ldr	r3, [pc, #268]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064de:	4b40      	ldr	r3, [pc, #256]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	4a3f      	ldr	r2, [pc, #252]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e8:	6593      	str	r3, [r2, #88]	; 0x58
 80064ea:	4b3d      	ldr	r3, [pc, #244]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064f6:	2301      	movs	r3, #1
 80064f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064fa:	4b3a      	ldr	r3, [pc, #232]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a39      	ldr	r2, [pc, #228]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006506:	f7fc fd17 	bl	8002f38 <HAL_GetTick>
 800650a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800650c:	e009      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650e:	f7fc fd13 	bl	8002f38 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d902      	bls.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	74fb      	strb	r3, [r7, #19]
        break;
 8006520:	e005      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ef      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d159      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006534:	4b2a      	ldr	r3, [pc, #168]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01e      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	429a      	cmp	r2, r3
 800654e:	d019      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006550:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800655c:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800656c:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006572:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fc fcd3 	bl	8002f38 <HAL_GetTick>
 8006592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006594:	e00b      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fc fccf 	bl	8002f38 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d902      	bls.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	74fb      	strb	r3, [r7, #19]
            break;
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ec      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065bc:	7cfb      	ldrb	r3, [r7, #19]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065d8:	e008      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	74bb      	strb	r3, [r7, #18]
 80065de:	e005      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ec:	7c7b      	ldrb	r3, [r7, #17]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d105      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f2:	4baf      	ldr	r3, [pc, #700]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f6:	4aae      	ldr	r2, [pc, #696]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800660a:	4ba9      	ldr	r3, [pc, #676]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006610:	f023 0203 	bic.w	r2, r3, #3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	49a5      	ldr	r1, [pc, #660]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800662c:	4ba0      	ldr	r3, [pc, #640]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006632:	f023 020c 	bic.w	r2, r3, #12
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	499d      	ldr	r1, [pc, #628]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800664e:	4b98      	ldr	r3, [pc, #608]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4994      	ldr	r1, [pc, #592]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006670:	4b8f      	ldr	r3, [pc, #572]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	498c      	ldr	r1, [pc, #560]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006692:	4b87      	ldr	r3, [pc, #540]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	4983      	ldr	r1, [pc, #524]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b4:	4b7e      	ldr	r3, [pc, #504]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	497b      	ldr	r1, [pc, #492]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066d6:	4b76      	ldr	r3, [pc, #472]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4972      	ldr	r1, [pc, #456]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066f8:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	496a      	ldr	r1, [pc, #424]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800671a:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	4961      	ldr	r1, [pc, #388]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800673c:	4b5c      	ldr	r3, [pc, #368]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800673e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006742:	f023 0203 	bic.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	4959      	ldr	r1, [pc, #356]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800675e:	4b54      	ldr	r3, [pc, #336]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4950      	ldr	r1, [pc, #320]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677c:	2b00      	cmp	r3, #0
 800677e:	d015      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006780:	4b4b      	ldr	r3, [pc, #300]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	4948      	ldr	r1, [pc, #288]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679e:	d105      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a0:	4b43      	ldr	r3, [pc, #268]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a42      	ldr	r2, [pc, #264]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067b8:	4b3d      	ldr	r3, [pc, #244]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	493a      	ldr	r1, [pc, #232]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d6:	d105      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d8:	4b35      	ldr	r3, [pc, #212]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a34      	ldr	r2, [pc, #208]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d015      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067f0:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	492c      	ldr	r1, [pc, #176]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800680e:	d105      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d015      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006828:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	491e      	ldr	r1, [pc, #120]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006846:	d105      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006848:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800684e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006852:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d015      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006860:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	4910      	ldr	r1, [pc, #64]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687e:	d105      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	4902      	ldr	r1, [pc, #8]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068ae:	e001      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80068b0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068bc:	d105      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068be:	4b21      	ldr	r3, [pc, #132]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	4a20      	ldr	r2, [pc, #128]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d015      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068d6:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e4:	4917      	ldr	r1, [pc, #92]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d105      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d015      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	4909      	ldr	r1, [pc, #36]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692c:	d105      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006938:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800693a:	7cbb      	ldrb	r3, [r7, #18]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40021000 	.word	0x40021000

08006948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e084      	b.n	8006a64 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fb fcc9 	bl	800230c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006990:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800699a:	d902      	bls.n	80069a2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e002      	b.n	80069a8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069b0:	d007      	beq.n	80069c2 <HAL_SPI_Init+0x7a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069ba:	d002      	beq.n	80069c2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d2:	d903      	bls.n	80069dc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30
 80069da:	e002      	b.n	80069e2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	ea42 0103 	orr.w	r1, r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	f003 0204 	and.w	r2, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	ea42 0103 	orr.w	r1, r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_Transmit+0x22>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e150      	b.n	8006d30 <HAL_SPI_Transmit+0x2c4>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a96:	f7fc fa4f 	bl	8002f38 <HAL_GetTick>
 8006a9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d002      	beq.n	8006ab2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
 8006aae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ab0:	e135      	b.n	8006d1e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_SPI_Transmit+0x52>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ac2:	e12c      	b.n	8006d1e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0e:	d107      	bne.n	8006b20 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d007      	beq.n	8006b3e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b46:	d94b      	bls.n	8006be0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_SPI_Transmit+0xea>
 8006b50:	8afb      	ldrh	r3, [r7, #22]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d13e      	bne.n	8006bd4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b7a:	e02b      	b.n	8006bd4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d112      	bne.n	8006bb0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bae:	e011      	b.n	8006bd4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb0:	f7fc f9c2 	bl	8002f38 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d803      	bhi.n	8006bc8 <HAL_SPI_Transmit+0x15c>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc6:	d102      	bne.n	8006bce <HAL_SPI_Transmit+0x162>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bd2:	e0a4      	b.n	8006d1e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1ce      	bne.n	8006b7c <HAL_SPI_Transmit+0x110>
 8006bde:	e07c      	b.n	8006cda <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_SPI_Transmit+0x182>
 8006be8:	8afb      	ldrh	r3, [r7, #22]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d170      	bne.n	8006cd0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d912      	bls.n	8006c1e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	881a      	ldrh	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	1c9a      	adds	r2, r3, #2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b02      	subs	r3, #2
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c1c:	e058      	b.n	8006cd0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c44:	e044      	b.n	8006cd0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d12b      	bne.n	8006cac <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d912      	bls.n	8006c84 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	881a      	ldrh	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b02      	subs	r3, #2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c82:	e025      	b.n	8006cd0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006caa:	e011      	b.n	8006cd0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cac:	f7fc f944 	bl	8002f38 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d803      	bhi.n	8006cc4 <HAL_SPI_Transmit+0x258>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Transmit+0x25e>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cce:	e026      	b.n	8006d1e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1b5      	bne.n	8006c46 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f901 	bl	8006ee6 <SPI_EndRxTxTransaction>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e000      	b.n	8006d1e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006d1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d48:	e04c      	b.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d50:	d048      	beq.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d52:	f7fc f8f1 	bl	8002f38 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d902      	bls.n	8006d68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d13d      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d80:	d111      	bne.n	8006da6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8a:	d004      	beq.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d94:	d107      	bne.n	8006da6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	d10f      	bne.n	8006dd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e00f      	b.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d1a3      	bne.n	8006d4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e1a:	e057      	b.n	8006ecc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e22:	d106      	bne.n	8006e32 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d048      	beq.n	8006ecc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e3a:	f7fc f87d 	bl	8002f38 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d902      	bls.n	8006e50 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d13d      	bne.n	8006ecc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e68:	d111      	bne.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0x82>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d004      	beq.n	8006e7e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7c:	d107      	bne.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e96:	d10f      	bne.n	8006eb8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e008      	b.n	8006ede <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d19f      	bne.n	8006e1c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af02      	add	r7, sp, #8
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff ff84 	bl	8006e0c <SPI_WaitFifoStateUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e027      	b.n	8006f6a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff ff07 	bl	8006d38 <SPI_WaitFlagStateUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e014      	b.n	8006f6a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff5d 	bl	8006e0c <SPI_WaitFifoStateUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e000      	b.n	8006f6a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e049      	b.n	8007018 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7fb fe7b 	bl	8002c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f000 fc51 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d001      	beq.n	8007038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e019      	b.n	800706c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <HAL_TIM_Base_Start+0x58>)
 8007048:	4013      	ands	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b06      	cmp	r3, #6
 8007050:	d00b      	beq.n	800706a <HAL_TIM_Base_Start+0x4a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007058:	d007      	beq.n	800706a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	00010007 	.word	0x00010007

0800707c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d001      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e021      	b.n	80070d8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <HAL_TIM_Base_Start_IT+0x68>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d00b      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x5a>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c4:	d007      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	00010007 	.word	0x00010007

080070e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	f241 1311 	movw	r3, #4369	; 0x1111
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10f      	bne.n	8007130 <HAL_TIM_Base_Stop_IT+0x48>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	f244 4344 	movw	r3, #17476	; 0x4444
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d107      	bne.n	8007130 <HAL_TIM_Base_Stop_IT+0x48>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e097      	b.n	800728a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fb fd34 	bl	8002bdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800718a:	f023 0307 	bic.w	r3, r3, #7
 800718e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f000 fb5c 	bl	8007858 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	4313      	orrs	r3, r2
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071e6:	f023 030c 	bic.w	r3, r3, #12
 80071ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	4313      	orrs	r3, r2
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	011a      	lsls	r2, r3, #4
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	031b      	lsls	r3, r3, #12
 8007216:	4313      	orrs	r3, r2
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007224:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800722c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	4313      	orrs	r3, r2
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d122      	bne.n	80072ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d11b      	bne.n	80072ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f06f 0202 	mvn.w	r2, #2
 80072be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 faa1 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 80072da:	e005      	b.n	80072e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa93 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 faa4 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d122      	bne.n	8007342 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b04      	cmp	r3, #4
 8007308:	d11b      	bne.n	8007342 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0204 	mvn.w	r2, #4
 8007312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa77 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 800732e:	e005      	b.n	800733c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa69 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa7a 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d122      	bne.n	8007396 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b08      	cmp	r3, #8
 800735c:	d11b      	bne.n	8007396 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0208 	mvn.w	r2, #8
 8007366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2204      	movs	r2, #4
 800736c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa4d 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 8007382:	e005      	b.n	8007390 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fa3f 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa50 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d122      	bne.n	80073ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d11b      	bne.n	80073ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f06f 0210 	mvn.w	r2, #16
 80073ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2208      	movs	r2, #8
 80073c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa23 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 80073d6:	e005      	b.n	80073e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa15 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa26 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d10e      	bne.n	8007416 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d107      	bne.n	8007416 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f06f 0201 	mvn.w	r2, #1
 800740e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9ef 	bl	80077f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d10e      	bne.n	8007442 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	2b80      	cmp	r3, #128	; 0x80
 8007430:	d107      	bne.n	8007442 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800743a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fd5d 	bl	8007efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007450:	d10e      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745c:	2b80      	cmp	r3, #128	; 0x80
 800745e:	d107      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fd50 	bl	8007f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d10e      	bne.n	800749c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d107      	bne.n	800749c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9d4 	bl	8007844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d10e      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d107      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0220 	mvn.w	r2, #32
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fd10 	bl	8007ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d6:	d10f      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e6:	d107      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80074f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fd16 	bl	8007f24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007506:	d10f      	bne.n	8007528 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd08 	bl	8007f38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007536:	d10f      	bne.n	8007558 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007546:	d107      	bne.n	8007558 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fcfa 	bl	8007f4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007562:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007566:	d10f      	bne.n	8007588 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007576:	d107      	bne.n	8007588 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fcec 	bl	8007f60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_TIM_ConfigClockSource+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e0d2      	b.n	800774e <HAL_TIM_ConfigClockSource+0x1be>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80075c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	f000 80a9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d81a      	bhi.n	8007624 <HAL_TIM_ConfigClockSource+0x94>
 80075ee:	2b30      	cmp	r3, #48	; 0x30
 80075f0:	f000 809a 	beq.w	8007728 <HAL_TIM_ConfigClockSource+0x198>
 80075f4:	2b30      	cmp	r3, #48	; 0x30
 80075f6:	d809      	bhi.n	800760c <HAL_TIM_ConfigClockSource+0x7c>
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	f000 8095 	beq.w	8007728 <HAL_TIM_ConfigClockSource+0x198>
 80075fe:	2b20      	cmp	r3, #32
 8007600:	f000 8092 	beq.w	8007728 <HAL_TIM_ConfigClockSource+0x198>
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 808f 	beq.w	8007728 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800760a:	e097      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800760c:	2b50      	cmp	r3, #80	; 0x50
 800760e:	d05b      	beq.n	80076c8 <HAL_TIM_ConfigClockSource+0x138>
 8007610:	2b50      	cmp	r3, #80	; 0x50
 8007612:	d802      	bhi.n	800761a <HAL_TIM_ConfigClockSource+0x8a>
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d077      	beq.n	8007708 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007618:	e090      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800761a:	2b60      	cmp	r3, #96	; 0x60
 800761c:	d064      	beq.n	80076e8 <HAL_TIM_ConfigClockSource+0x158>
 800761e:	2b70      	cmp	r3, #112	; 0x70
 8007620:	d028      	beq.n	8007674 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007622:	e08b      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007624:	4a4c      	ldr	r2, [pc, #304]	; (8007758 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d07e      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
 800762a:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <HAL_TIM_ConfigClockSource+0x1c8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d810      	bhi.n	8007652 <HAL_TIM_ConfigClockSource+0xc2>
 8007630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007634:	d078      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
 8007636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800763a:	d803      	bhi.n	8007644 <HAL_TIM_ConfigClockSource+0xb4>
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d02f      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8007642:	e07b      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007644:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007648:	d06e      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
 800764a:	4a44      	ldr	r2, [pc, #272]	; (800775c <HAL_TIM_ConfigClockSource+0x1cc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d06b      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007650:	e074      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007652:	4a43      	ldr	r2, [pc, #268]	; (8007760 <HAL_TIM_ConfigClockSource+0x1d0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d067      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
 8007658:	4a41      	ldr	r2, [pc, #260]	; (8007760 <HAL_TIM_ConfigClockSource+0x1d0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d803      	bhi.n	8007666 <HAL_TIM_ConfigClockSource+0xd6>
 800765e:	4a41      	ldr	r2, [pc, #260]	; (8007764 <HAL_TIM_ConfigClockSource+0x1d4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d061      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007664:	e06a      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d05d      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
 800766c:	4a3f      	ldr	r2, [pc, #252]	; (800776c <HAL_TIM_ConfigClockSource+0x1dc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d05a      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007672:	e063      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6899      	ldr	r1, [r3, #8]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f000 fac8 	bl	8007c18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007696:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	609a      	str	r2, [r3, #8]
      break;
 80076a0:	e04c      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f000 fab1 	bl	8007c18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c4:	609a      	str	r2, [r3, #8]
      break;
 80076c6:	e039      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6859      	ldr	r1, [r3, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f000 fa23 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2150      	movs	r1, #80	; 0x50
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fa7c 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 80076e6:	e029      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6859      	ldr	r1, [r3, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	461a      	mov	r2, r3
 80076f6:	f000 fa42 	bl	8007b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2160      	movs	r1, #96	; 0x60
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fa6c 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 8007706:	e019      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	461a      	mov	r2, r3
 8007716:	f000 fa03 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2140      	movs	r1, #64	; 0x40
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fa5c 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 8007726:	e009      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f000 fa53 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 8007738:	e000      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800773a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	00100030 	.word	0x00100030
 800775c:	00100020 	.word	0x00100020
 8007760:	00100050 	.word	0x00100050
 8007764:	00100040 	.word	0x00100040
 8007768:	00100060 	.word	0x00100060
 800776c:	00100070 	.word	0x00100070

08007770 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e031      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f904 	bl	80079a8 <TIM_SlaveTimer_SetConfig>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e018      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a46      	ldr	r2, [pc, #280]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d017      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d013      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a43      	ldr	r2, [pc, #268]	; (8007988 <TIM_Base_SetConfig+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00f      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a42      	ldr	r2, [pc, #264]	; (800798c <TIM_Base_SetConfig+0x134>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a41      	ldr	r2, [pc, #260]	; (8007990 <TIM_Base_SetConfig+0x138>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <TIM_Base_SetConfig+0x140>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a33      	ldr	r2, [pc, #204]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d023      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d01f      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a30      	ldr	r2, [pc, #192]	; (8007988 <TIM_Base_SetConfig+0x130>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01b      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2f      	ldr	r2, [pc, #188]	; (800798c <TIM_Base_SetConfig+0x134>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d017      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <TIM_Base_SetConfig+0x138>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2d      	ldr	r2, [pc, #180]	; (800799c <TIM_Base_SetConfig+0x144>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2c      	ldr	r2, [pc, #176]	; (80079a0 <TIM_Base_SetConfig+0x148>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2b      	ldr	r2, [pc, #172]	; (80079a4 <TIM_Base_SetConfig+0x14c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <TIM_Base_SetConfig+0x140>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a12      	ldr	r2, [pc, #72]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a14      	ldr	r2, [pc, #80]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a14      	ldr	r2, [pc, #80]	; (800799c <TIM_Base_SetConfig+0x144>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <TIM_Base_SetConfig+0x148>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <TIM_Base_SetConfig+0x14c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <TIM_Base_SetConfig+0x140>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40013400 	.word	0x40013400
 8007998:	40015000 	.word	0x40015000
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800

080079a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b70      	cmp	r3, #112	; 0x70
 80079f4:	d034      	beq.n	8007a60 <TIM_SlaveTimer_SetConfig+0xb8>
 80079f6:	2b70      	cmp	r3, #112	; 0x70
 80079f8:	d811      	bhi.n	8007a1e <TIM_SlaveTimer_SetConfig+0x76>
 80079fa:	2b30      	cmp	r3, #48	; 0x30
 80079fc:	d07d      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 80079fe:	2b30      	cmp	r3, #48	; 0x30
 8007a00:	d806      	bhi.n	8007a10 <TIM_SlaveTimer_SetConfig+0x68>
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d079      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d077      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d075      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007a0e:	e075      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a10:	2b50      	cmp	r3, #80	; 0x50
 8007a12:	d05e      	beq.n	8007ad2 <TIM_SlaveTimer_SetConfig+0x12a>
 8007a14:	2b60      	cmp	r3, #96	; 0x60
 8007a16:	d066      	beq.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d02c      	beq.n	8007a76 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007a1c:	e06e      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a1e:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <TIM_SlaveTimer_SetConfig+0x160>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d06a      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a24:	4a38      	ldr	r2, [pc, #224]	; (8007b08 <TIM_SlaveTimer_SetConfig+0x160>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d809      	bhi.n	8007a3e <TIM_SlaveTimer_SetConfig+0x96>
 8007a2a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a2e:	d064      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a30:	4a36      	ldr	r2, [pc, #216]	; (8007b0c <TIM_SlaveTimer_SetConfig+0x164>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d061      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3a:	d05e      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a3c:	e05e      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a3e:	4a34      	ldr	r2, [pc, #208]	; (8007b10 <TIM_SlaveTimer_SetConfig+0x168>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d05a      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a44:	4a32      	ldr	r2, [pc, #200]	; (8007b10 <TIM_SlaveTimer_SetConfig+0x168>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d803      	bhi.n	8007a52 <TIM_SlaveTimer_SetConfig+0xaa>
 8007a4a:	4a32      	ldr	r2, [pc, #200]	; (8007b14 <TIM_SlaveTimer_SetConfig+0x16c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d054      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a50:	e054      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a52:	4a31      	ldr	r2, [pc, #196]	; (8007b18 <TIM_SlaveTimer_SetConfig+0x170>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d050      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
 8007a58:	4a30      	ldr	r2, [pc, #192]	; (8007b1c <TIM_SlaveTimer_SetConfig+0x174>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d04d      	beq.n	8007afa <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a5e:	e04d      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f000 f8d2 	bl	8007c18 <TIM_ETR_SetConfig>
      break;
 8007a74:	e042      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d004      	beq.n	8007a88 <TIM_SlaveTimer_SetConfig+0xe0>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007a86:	d101      	bne.n	8007a8c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e038      	b.n	8007afe <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a1a      	ldr	r2, [r3, #32]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	621a      	str	r2, [r3, #32]
      break;
 8007ad0:	e014      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6899      	ldr	r1, [r3, #8]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f000 f81e 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      break;
 8007ae4:	e00a      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6899      	ldr	r1, [r3, #8]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f000 f843 	bl	8007b7e <TIM_TI2_ConfigInputStage>
      break;
 8007af8:	e000      	b.n	8007afc <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007afa:	bf00      	nop
  }
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	00100030 	.word	0x00100030
 8007b0c:	00100020 	.word	0x00100020
 8007b10:	00100050 	.word	0x00100050
 8007b14:	00100040 	.word	0x00100040
 8007b18:	00100060 	.word	0x00100060
 8007b1c:	00100070 	.word	0x00100070

08007b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 030a 	bic.w	r3, r3, #10
 8007b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f023 0210 	bic.w	r2, r3, #16
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	031b      	lsls	r3, r3, #12
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f043 0307 	orr.w	r3, r3, #7
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	609a      	str	r2, [r3, #8]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	021a      	lsls	r2, r3, #8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e074      	b.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a34      	ldr	r2, [pc, #208]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a33      	ldr	r2, [pc, #204]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a31      	ldr	r2, [pc, #196]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d108      	bne.n	8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d022      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf0:	d01d      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d018      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00e      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d009      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d004      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d10c      	bne.n	8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40015000 	.word	0x40015000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40014000 	.word	0x40014000

08007d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e096      	b.n	8007ece <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2f      	ldr	r2, [pc, #188]	; (8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2d      	ldr	r2, [pc, #180]	; (8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2c      	ldr	r2, [pc, #176]	; (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d106      	bne.n	8007e46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a24      	ldr	r2, [pc, #144]	; (8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a21      	ldr	r2, [pc, #132]	; (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d12b      	bne.n	8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	051b      	lsls	r3, r3, #20
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a11      	ldr	r2, [pc, #68]	; (8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a10      	ldr	r2, [pc, #64]	; (8007ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d004      	beq.n	8007eae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d106      	bne.n	8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40015000 	.word	0x40015000

08007ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <LL_EXTI_EnableIT_0_31>:
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <LL_EXTI_EnableIT_0_31+0x20>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4904      	ldr	r1, [pc, #16]	; (8007f94 <LL_EXTI_EnableIT_0_31+0x20>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	600b      	str	r3, [r1, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40010400 	.word	0x40010400

08007f98 <LL_EXTI_EnableIT_32_63>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <LL_EXTI_EnableIT_32_63+0x20>)
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	4904      	ldr	r1, [pc, #16]	; (8007fb8 <LL_EXTI_EnableIT_32_63+0x20>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	620b      	str	r3, [r1, #32]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	40010400 	.word	0x40010400

08007fbc <LL_EXTI_DisableIT_0_31>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <LL_EXTI_DisableIT_0_31+0x24>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	4904      	ldr	r1, [pc, #16]	; (8007fe0 <LL_EXTI_DisableIT_0_31+0x24>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010400 	.word	0x40010400

08007fe4 <LL_EXTI_DisableIT_32_63>:
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <LL_EXTI_DisableIT_32_63+0x24>)
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	4904      	ldr	r1, [pc, #16]	; (8008008 <LL_EXTI_DisableIT_32_63+0x24>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	620b      	str	r3, [r1, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010400 	.word	0x40010400

0800800c <LL_EXTI_EnableEvent_0_31>:
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <LL_EXTI_EnableEvent_0_31+0x20>)
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <LL_EXTI_EnableEvent_0_31+0x20>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4313      	orrs	r3, r2
 800801e:	604b      	str	r3, [r1, #4]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	40010400 	.word	0x40010400

08008030 <LL_EXTI_EnableEvent_32_63>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <LL_EXTI_EnableEvent_32_63+0x20>)
 800803a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800803c:	4904      	ldr	r1, [pc, #16]	; (8008050 <LL_EXTI_EnableEvent_32_63+0x20>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4313      	orrs	r3, r2
 8008042:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	40010400 	.word	0x40010400

08008054 <LL_EXTI_DisableEvent_0_31>:
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <LL_EXTI_DisableEvent_0_31+0x24>)
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	43db      	mvns	r3, r3
 8008064:	4904      	ldr	r1, [pc, #16]	; (8008078 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008066:	4013      	ands	r3, r2
 8008068:	604b      	str	r3, [r1, #4]
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010400 	.word	0x40010400

0800807c <LL_EXTI_DisableEvent_32_63>:
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	43db      	mvns	r3, r3
 800808c:	4904      	ldr	r1, [pc, #16]	; (80080a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800808e:	4013      	ands	r3, r2
 8008090:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40010400 	.word	0x40010400

080080a4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	4904      	ldr	r1, [pc, #16]	; (80080c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	608b      	str	r3, [r1, #8]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40010400 	.word	0x40010400

080080c8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80080d0:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d4:	4904      	ldr	r1, [pc, #16]	; (80080e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4313      	orrs	r3, r2
 80080da:	628b      	str	r3, [r1, #40]	; 0x28
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	40010400 	.word	0x40010400

080080ec <LL_EXTI_DisableRisingTrig_0_31>:
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	4904      	ldr	r1, [pc, #16]	; (8008110 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80080fe:	4013      	ands	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40010400 	.word	0x40010400

08008114 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800811e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	43db      	mvns	r3, r3
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008126:	4013      	ands	r3, r2
 8008128:	628b      	str	r3, [r1, #40]	; 0x28
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40010400 	.word	0x40010400

0800813c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	4904      	ldr	r1, [pc, #16]	; (800815c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4313      	orrs	r3, r2
 800814e:	60cb      	str	r3, [r1, #12]
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40010400 	.word	0x40010400

08008160 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	4904      	ldr	r1, [pc, #16]	; (8008180 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4313      	orrs	r3, r2
 8008172:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	40010400 	.word	0x40010400

08008184 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	43db      	mvns	r3, r3
 8008194:	4904      	ldr	r1, [pc, #16]	; (80081a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008196:	4013      	ands	r3, r2
 8008198:	60cb      	str	r3, [r1, #12]
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010400 	.word	0x40010400

080081ac <LL_EXTI_DisableFallingTrig_32_63>:
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	43db      	mvns	r3, r3
 80081bc:	4904      	ldr	r1, [pc, #16]	; (80081d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80081be:	4013      	ands	r3, r2
 80081c0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	40010400 	.word	0x40010400

080081d4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7a1b      	ldrb	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80c8 	beq.w	800837a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d05d      	beq.n	80082ae <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7a5b      	ldrb	r3, [r3, #9]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d00e      	beq.n	8008218 <LL_EXTI_Init+0x44>
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d017      	beq.n	800822e <LL_EXTI_Init+0x5a>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d120      	bne.n	8008244 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff ff24 	bl	8008054 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff feaf 	bl	8007f74 <LL_EXTI_EnableIT_0_31>
          break;
 8008216:	e018      	b.n	800824a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fecd 	bl	8007fbc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fef0 	bl	800800c <LL_EXTI_EnableEvent_0_31>
          break;
 800822c:	e00d      	b.n	800824a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fe9e 	bl	8007f74 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fee5 	bl	800800c <LL_EXTI_EnableEvent_0_31>
          break;
 8008242:	e002      	b.n	800824a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8008244:	2301      	movs	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
          break;
 8008248:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7a9b      	ldrb	r3, [r3, #10]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d02d      	beq.n	80082ae <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7a9b      	ldrb	r3, [r3, #10]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d00e      	beq.n	8008278 <LL_EXTI_Init+0xa4>
 800825a:	2b03      	cmp	r3, #3
 800825c:	d017      	beq.n	800828e <LL_EXTI_Init+0xba>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d120      	bne.n	80082a4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ff8c 	bl	8008184 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff17 	bl	80080a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8008276:	e01b      	b.n	80082b0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff35 	bl	80080ec <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff ff58 	bl	800813c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800828c:	e010      	b.n	80082b0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff ff06 	bl	80080a4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff4d 	bl	800813c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80082a2:	e005      	b.n	80082b0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f043 0302 	orr.w	r3, r3, #2
 80082aa:	60fb      	str	r3, [r7, #12]
            break;
 80082ac:	e000      	b.n	80082b0 <LL_EXTI_Init+0xdc>
        }
      }
 80082ae:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d075      	beq.n	80083a4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7a5b      	ldrb	r3, [r3, #9]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d00e      	beq.n	80082de <LL_EXTI_Init+0x10a>
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d017      	beq.n	80082f4 <LL_EXTI_Init+0x120>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d120      	bne.n	800830a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fed5 	bl	800807c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff fe5e 	bl	8007f98 <LL_EXTI_EnableIT_32_63>
          break;
 80082dc:	e01a      	b.n	8008314 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fe7e 	bl	8007fe4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fe9f 	bl	8008030 <LL_EXTI_EnableEvent_32_63>
          break;
 80082f2:	e00f      	b.n	8008314 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fe4d 	bl	8007f98 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fe94 	bl	8008030 <LL_EXTI_EnableEvent_32_63>
          break;
 8008308:	e004      	b.n	8008314 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f043 0304 	orr.w	r3, r3, #4
 8008310:	60fb      	str	r3, [r7, #12]
          break;
 8008312:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7a9b      	ldrb	r3, [r3, #10]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d043      	beq.n	80083a4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7a9b      	ldrb	r3, [r3, #10]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d00e      	beq.n	8008342 <LL_EXTI_Init+0x16e>
 8008324:	2b03      	cmp	r3, #3
 8008326:	d017      	beq.n	8008358 <LL_EXTI_Init+0x184>
 8008328:	2b01      	cmp	r3, #1
 800832a:	d120      	bne.n	800836e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff ff3b 	bl	80081ac <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fec4 	bl	80080c8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8008340:	e031      	b.n	80083a6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fee4 	bl	8008114 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ff05 	bl	8008160 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8008356:	e026      	b.n	80083a6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff feb3 	bl	80080c8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fefa 	bl	8008160 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800836c:	e01b      	b.n	80083a6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f043 0305 	orr.w	r3, r3, #5
 8008374:	60fb      	str	r3, [r7, #12]
            break;
 8008376:	bf00      	nop
 8008378:	e015      	b.n	80083a6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fe1c 	bl	8007fbc <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fe63 	bl	8008054 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fe26 	bl	8007fe4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fe6d 	bl	800807c <LL_EXTI_DisableEvent_32_63>
 80083a2:	e000      	b.n	80083a6 <LL_EXTI_Init+0x1d2>
      }
 80083a4:	bf00      	nop
  }

  return status;
 80083a6:	68fb      	ldr	r3, [r7, #12]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <LL_GPIO_SetPinMode>:
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	; 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	fa93 f3a3 	rbit	r3, r3
 80083ca:	613b      	str	r3, [r7, #16]
  return result;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	fab3 f383 	clz	r3, r3
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	2103      	movs	r1, #3
 80083d8:	fa01 f303 	lsl.w	r3, r1, r3
 80083dc:	43db      	mvns	r3, r3
 80083de:	401a      	ands	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	fa93 f3a3 	rbit	r3, r3
 80083ea:	61bb      	str	r3, [r7, #24]
  return result;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	fa01 f303 	lsl.w	r3, r1, r3
 80083fc:	431a      	orrs	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]
}
 8008402:	bf00      	nop
 8008404:	3724      	adds	r7, #36	; 0x24
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <LL_GPIO_SetPinOutputType>:
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	43db      	mvns	r3, r3
 8008422:	401a      	ands	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	431a      	orrs	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]
}
 8008432:	bf00      	nop
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <LL_GPIO_SetPinSpeed>:
{
 800843e:	b480      	push	{r7}
 8008440:	b089      	sub	sp, #36	; 0x24
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	fa93 f3a3 	rbit	r3, r3
 8008458:	613b      	str	r3, [r7, #16]
  return result;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	fab3 f383 	clz	r3, r3
 8008460:	b2db      	uxtb	r3, r3
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2103      	movs	r1, #3
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	401a      	ands	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	fa93 f3a3 	rbit	r3, r3
 8008478:	61bb      	str	r3, [r7, #24]
  return result;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	fab3 f383 	clz	r3, r3
 8008480:	b2db      	uxtb	r3, r3
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	431a      	orrs	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	609a      	str	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	3724      	adds	r7, #36	; 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <LL_GPIO_SetPinPull>:
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	; 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	fa93 f3a3 	rbit	r3, r3
 80084b6:	613b      	str	r3, [r7, #16]
  return result;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	fab3 f383 	clz	r3, r3
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	2103      	movs	r1, #3
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	401a      	ands	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	fa93 f3a3 	rbit	r3, r3
 80084d6:	61bb      	str	r3, [r7, #24]
  return result;
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	fab3 f383 	clz	r3, r3
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	fa01 f303 	lsl.w	r3, r1, r3
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	60da      	str	r2, [r3, #12]
}
 80084ee:	bf00      	nop
 80084f0:	3724      	adds	r7, #36	; 0x24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <LL_GPIO_SetAFPin_0_7>:
{
 80084fa:	b480      	push	{r7}
 80084fc:	b089      	sub	sp, #36	; 0x24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1a      	ldr	r2, [r3, #32]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	fa93 f3a3 	rbit	r3, r3
 8008514:	613b      	str	r3, [r7, #16]
  return result;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	fab3 f383 	clz	r3, r3
 800851c:	b2db      	uxtb	r3, r3
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	210f      	movs	r1, #15
 8008522:	fa01 f303 	lsl.w	r3, r1, r3
 8008526:	43db      	mvns	r3, r3
 8008528:	401a      	ands	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	fa93 f3a3 	rbit	r3, r3
 8008534:	61bb      	str	r3, [r7, #24]
  return result;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	fab3 f383 	clz	r3, r3
 800853c:	b2db      	uxtb	r3, r3
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	fa01 f303 	lsl.w	r3, r1, r3
 8008546:	431a      	orrs	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	3724      	adds	r7, #36	; 0x24
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <LL_GPIO_SetAFPin_8_15>:
{
 8008558:	b480      	push	{r7}
 800855a:	b089      	sub	sp, #36	; 0x24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	0a1b      	lsrs	r3, r3, #8
 800856c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	fa93 f3a3 	rbit	r3, r3
 8008574:	613b      	str	r3, [r7, #16]
  return result;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	fab3 f383 	clz	r3, r3
 800857c:	b2db      	uxtb	r3, r3
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	210f      	movs	r1, #15
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	401a      	ands	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	fa93 f3a3 	rbit	r3, r3
 8008596:	61bb      	str	r3, [r7, #24]
  return result;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	fab3 f383 	clz	r3, r3
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	431a      	orrs	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80085ae:	bf00      	nop
 80085b0:	3724      	adds	r7, #36	; 0x24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	fa93 f3a3 	rbit	r3, r3
 80085d0:	60bb      	str	r3, [r7, #8]
  return result;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	fab3 f383 	clz	r3, r3
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80085dc:	e040      	b.n	8008660 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	2101      	movs	r1, #1
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ea:	4013      	ands	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d032      	beq.n	800865a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6939      	ldr	r1, [r7, #16]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fed7 	bl	80083b0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d003      	beq.n	8008612 <LL_GPIO_Init+0x58>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d106      	bne.n	8008620 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	461a      	mov	r2, r3
 8008618:	6939      	ldr	r1, [r7, #16]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff ff0f 	bl	800843e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	461a      	mov	r2, r3
 8008626:	6939      	ldr	r1, [r7, #16]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff37 	bl	800849c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d111      	bne.n	800865a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2bff      	cmp	r3, #255	; 0xff
 800863a:	d807      	bhi.n	800864c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	461a      	mov	r2, r3
 8008642:	6939      	ldr	r1, [r7, #16]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff ff58 	bl	80084fa <LL_GPIO_SetAFPin_0_7>
 800864a:	e006      	b.n	800865a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	461a      	mov	r2, r3
 8008652:	6939      	ldr	r1, [r7, #16]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff ff7f 	bl	8008558 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	3301      	adds	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1b7      	bne.n	80085de <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d003      	beq.n	800867e <LL_GPIO_Init+0xc4>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d107      	bne.n	800868e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	461a      	mov	r2, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff fec0 	bl	800840e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b087      	sub	sp, #28
 800869c:	af02      	add	r7, sp, #8
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	461a      	mov	r2, r3
 80086a6:	4623      	mov	r3, r4
 80086a8:	80fb      	strh	r3, [r7, #6]
 80086aa:	4603      	mov	r3, r0
 80086ac:	80bb      	strh	r3, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	807b      	strh	r3, [r7, #2]
 80086b2:	4613      	mov	r3, r2
 80086b4:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80086ba:	7bfa      	ldrb	r2, [r7, #15]
 80086bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d93a      	bls.n	800873a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80086c4:	88ba      	ldrh	r2, [r7, #4]
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	441a      	add	r2, r3
 80086ca:	88b9      	ldrh	r1, [r7, #4]
 80086cc:	883b      	ldrh	r3, [r7, #0]
 80086ce:	4419      	add	r1, r3
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	1acb      	subs	r3, r1, r3
 80086d4:	429a      	cmp	r2, r3
 80086d6:	f000 8090 	beq.w	80087fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	441a      	add	r2, r3
 80086e0:	88f9      	ldrh	r1, [r7, #6]
 80086e2:	887b      	ldrh	r3, [r7, #2]
 80086e4:	4419      	add	r1, r3
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	1acb      	subs	r3, r1, r3
 80086ea:	429a      	cmp	r2, r3
 80086ec:	f000 8085 	beq.w	80087fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	4413      	add	r3, r2
 80086f8:	b298      	uxth	r0, r3
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	88bb      	ldrh	r3, [r7, #4]
 8008700:	4413      	add	r3, r2
 8008702:	b299      	uxth	r1, r3
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	b29b      	uxth	r3, r3
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	b29b      	uxth	r3, r3
 800870c:	887a      	ldrh	r2, [r7, #2]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	b29b      	uxth	r3, r3
 8008712:	3301      	adds	r3, #1
 8008714:	b29c      	uxth	r4, r3
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	b29b      	uxth	r3, r3
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	b29b      	uxth	r3, r3
 800871e:	883a      	ldrh	r2, [r7, #0]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	b29b      	uxth	r3, r3
 8008724:	3301      	adds	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	2304      	movs	r3, #4
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	8c3b      	ldrh	r3, [r7, #32]
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	4622      	mov	r2, r4
 8008734:	f000 fd32 	bl	800919c <ILI9341_Draw_Rectangle>
				goto finish;
 8008738:	e060      	b.n	80087fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	b29a      	uxth	r2, r3
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	4413      	add	r3, r2
 8008742:	b298      	uxth	r0, r3
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	b29a      	uxth	r2, r3
 8008748:	88bb      	ldrh	r3, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	b299      	uxth	r1, r3
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	b29b      	uxth	r3, r3
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	b29b      	uxth	r3, r3
 8008756:	887a      	ldrh	r2, [r7, #2]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	b29a      	uxth	r2, r3
 800875c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008760:	b29b      	uxth	r3, r3
 8008762:	f000 fda1 	bl	80092a8 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	b29a      	uxth	r2, r3
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	4413      	add	r3, r2
 800876e:	b298      	uxth	r0, r3
										(y + h) - b,
 8008770:	88ba      	ldrh	r2, [r7, #4]
 8008772:	883b      	ldrh	r3, [r7, #0]
 8008774:	4413      	add	r3, r2
 8008776:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	b29b      	uxth	r3, r3
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	b299      	uxth	r1, r3
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	b29b      	uxth	r3, r3
 8008784:	887a      	ldrh	r2, [r7, #2]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	b29a      	uxth	r2, r3
 800878a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800878e:	b29b      	uxth	r3, r3
 8008790:	f000 fd8a 	bl	80092a8 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	b29a      	uxth	r2, r3
 8008798:	88fb      	ldrh	r3, [r7, #6]
 800879a:	4413      	add	r3, r2
 800879c:	b298      	uxth	r0, r3
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	88bb      	ldrh	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	b299      	uxth	r1, r3
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	883a      	ldrh	r2, [r7, #0]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f000 fdbc 	bl	8009338 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	887b      	ldrh	r3, [r7, #2]
 80087c4:	4413      	add	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	b298      	uxth	r0, r3
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	88bb      	ldrh	r3, [r7, #4]
 80087d6:	4413      	add	r3, r2
 80087d8:	b299      	uxth	r1, r3
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	883a      	ldrh	r2, [r7, #0]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f000 fda3 	bl	8009338 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	3301      	adds	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80087f8:	e75f      	b.n	80086ba <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80087fa:	bf00      	nop
	// done
	return;
 80087fc:	bf00      	nop
}
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}

08008804 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b089      	sub	sp, #36	; 0x24
 8008808:	af02      	add	r7, sp, #8
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4623      	mov	r3, r4
 8008814:	71fb      	strb	r3, [r7, #7]
 8008816:	4603      	mov	r3, r0
 8008818:	80bb      	strh	r3, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	807b      	strh	r3, [r7, #2]
 800881e:	4613      	mov	r3, r2
 8008820:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b1f      	cmp	r3, #31
 800882a:	d802      	bhi.n	8008832 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	71fb      	strb	r3, [r7, #7]
 8008830:	e002      	b.n	8008838 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3b20      	subs	r3, #32
 8008836:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008838:	2300      	movs	r3, #0
 800883a:	753b      	strb	r3, [r7, #20]
 800883c:	e012      	b.n	8008864 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800883e:	7dfa      	ldrb	r2, [r7, #23]
 8008840:	7d38      	ldrb	r0, [r7, #20]
 8008842:	7d39      	ldrb	r1, [r7, #20]
 8008844:	4c48      	ldr	r4, [pc, #288]	; (8008968 <ILI9341_Draw_Char+0x164>)
 8008846:	4613      	mov	r3, r2
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	4413      	add	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4423      	add	r3, r4
 8008850:	4403      	add	r3, r0
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	f107 0318 	add.w	r3, r7, #24
 8008858:	440b      	add	r3, r1
 800885a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800885e:	7d3b      	ldrb	r3, [r7, #20]
 8008860:	3301      	adds	r3, #1
 8008862:	753b      	strb	r3, [r7, #20]
 8008864:	7d3b      	ldrb	r3, [r7, #20]
 8008866:	2b05      	cmp	r3, #5
 8008868:	d9e9      	bls.n	800883e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800886a:	2300      	movs	r3, #0
 800886c:	757b      	strb	r3, [r7, #21]
 800886e:	e074      	b.n	800895a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8008870:	2300      	movs	r3, #0
 8008872:	75bb      	strb	r3, [r7, #22]
 8008874:	e06b      	b.n	800894e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8008876:	7d7b      	ldrb	r3, [r7, #21]
 8008878:	f107 0218 	add.w	r2, r7, #24
 800887c:	4413      	add	r3, r2
 800887e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008882:	461a      	mov	r2, r3
 8008884:	7dbb      	ldrb	r3, [r7, #22]
 8008886:	fa42 f303 	asr.w	r3, r2, r3
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02d      	beq.n	80088ee <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008892:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10e      	bne.n	80088b6 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008898:	7d7b      	ldrb	r3, [r7, #21]
 800889a:	b29a      	uxth	r2, r3
 800889c:	88bb      	ldrh	r3, [r7, #4]
 800889e:	4413      	add	r3, r2
 80088a0:	b298      	uxth	r0, r3
 80088a2:	7dbb      	ldrb	r3, [r7, #22]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	887b      	ldrh	r3, [r7, #2]
 80088a8:	4413      	add	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	883a      	ldrh	r2, [r7, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	f000 fb9a 	bl	8008fe8 <ILI9341_Draw_Pixel>
 80088b4:	e048      	b.n	8008948 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80088b6:	7d7b      	ldrb	r3, [r7, #21]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088bc:	fb12 f303 	smulbb	r3, r2, r3
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	88bb      	ldrh	r3, [r7, #4]
 80088c4:	4413      	add	r3, r2
 80088c6:	b298      	uxth	r0, r3
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088ce:	fb12 f303 	smulbb	r3, r2, r3
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	887b      	ldrh	r3, [r7, #2]
 80088d6:	4413      	add	r3, r2
 80088d8:	b299      	uxth	r1, r3
 80088da:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80088dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088de:	2301      	movs	r3, #1
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	883b      	ldrh	r3, [r7, #0]
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4623      	mov	r3, r4
 80088e8:	f000 fc58 	bl	800919c <ILI9341_Draw_Rectangle>
 80088ec:	e02c      	b.n	8008948 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80088ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10e      	bne.n	8008912 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80088f4:	7d7b      	ldrb	r3, [r7, #21]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	88bb      	ldrh	r3, [r7, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	b298      	uxth	r0, r3
 80088fe:	7dbb      	ldrb	r3, [r7, #22]
 8008900:	b29a      	uxth	r2, r3
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	4413      	add	r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800890a:	4619      	mov	r1, r3
 800890c:	f000 fb6c 	bl	8008fe8 <ILI9341_Draw_Pixel>
 8008910:	e01a      	b.n	8008948 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008912:	7d7b      	ldrb	r3, [r7, #21]
 8008914:	b29b      	uxth	r3, r3
 8008916:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008918:	fb12 f303 	smulbb	r3, r2, r3
 800891c:	b29a      	uxth	r2, r3
 800891e:	88bb      	ldrh	r3, [r7, #4]
 8008920:	4413      	add	r3, r2
 8008922:	b298      	uxth	r0, r3
 8008924:	7dbb      	ldrb	r3, [r7, #22]
 8008926:	b29b      	uxth	r3, r3
 8008928:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800892a:	fb12 f303 	smulbb	r3, r2, r3
 800892e:	b29a      	uxth	r2, r3
 8008930:	887b      	ldrh	r3, [r7, #2]
 8008932:	4413      	add	r3, r2
 8008934:	b299      	uxth	r1, r3
 8008936:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008938:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800893a:	2301      	movs	r3, #1
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	4623      	mov	r3, r4
 8008944:	f000 fc2a 	bl	800919c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008948:	7dbb      	ldrb	r3, [r7, #22]
 800894a:	3301      	adds	r3, #1
 800894c:	75bb      	strb	r3, [r7, #22]
 800894e:	7dbb      	ldrb	r3, [r7, #22]
 8008950:	2b07      	cmp	r3, #7
 8008952:	d990      	bls.n	8008876 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008954:	7d7b      	ldrb	r3, [r7, #21]
 8008956:	3301      	adds	r3, #1
 8008958:	757b      	strb	r3, [r7, #21]
 800895a:	7d7b      	ldrb	r3, [r7, #21]
 800895c:	2b05      	cmp	r3, #5
 800895e:	d987      	bls.n	8008870 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	bd90      	pop	{r4, r7, pc}
 8008968:	0800a64c 	.word	0x0800a64c

0800896c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	461a      	mov	r2, r3
 800897a:	4603      	mov	r3, r0
 800897c:	817b      	strh	r3, [r7, #10]
 800897e:	460b      	mov	r3, r1
 8008980:	813b      	strh	r3, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008986:	e016      	b.n	80089b6 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	60fa      	str	r2, [r7, #12]
 800898e:	7818      	ldrb	r0, [r3, #0]
 8008990:	88fc      	ldrh	r4, [r7, #6]
 8008992:	893a      	ldrh	r2, [r7, #8]
 8008994:	8979      	ldrh	r1, [r7, #10]
 8008996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	8c3b      	ldrh	r3, [r7, #32]
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	4623      	mov	r3, r4
 80089a0:	f7ff ff30 	bl	8008804 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80089a4:	8c3b      	ldrh	r3, [r7, #32]
 80089a6:	461a      	mov	r2, r3
 80089a8:	0052      	lsls	r2, r2, #1
 80089aa:	4413      	add	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	897b      	ldrh	r3, [r7, #10]
 80089b2:	4413      	add	r3, r2
 80089b4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e4      	bne.n	8008988 <ILI9341_Draw_Text+0x1c>
    }


}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd90      	pop	{r4, r7, pc}
	...

080089c8 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <ILI9341_SPI_Init+0x1c>)
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	4a04      	ldr	r2, [pc, #16]	; (80089e4 <ILI9341_SPI_Init+0x1c>)
 80089d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d6:	6153      	str	r3, [r2, #20]
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	48000400 	.word	0x48000400

080089e8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 80089f2:	1df9      	adds	r1, r7, #7
 80089f4:	2301      	movs	r3, #1
 80089f6:	2201      	movs	r2, #1
 80089f8:	4804      	ldr	r0, [pc, #16]	; (8008a0c <ILI9341_SPI_Send+0x24>)
 80089fa:	f7fe f837 	bl	8006a6c <HAL_SPI_Transmit>
 80089fe:	4603      	mov	r3, r0
 8008a00:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000de8 	.word	0x20000de8

08008a10 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a24:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008a26:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a30:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff ffd7 	bl	80089e8 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <ILI9341_Write_Command+0x40>)
 8008a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a44:	6153      	str	r3, [r2, #20]
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	48000400 	.word	0x48000400

08008a54 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a68:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a74:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff ffb5 	bl	80089e8 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4a04      	ldr	r2, [pc, #16]	; (8008a94 <ILI9341_Write_Data+0x40>)
 8008a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a88:	6153      	str	r3, [r2, #20]
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	48000400 	.word	0x48000400

08008a98 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	80fb      	strh	r3, [r7, #6]
 8008aaa:	4603      	mov	r3, r0
 8008aac:	80bb      	strh	r3, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	807b      	strh	r3, [r7, #2]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008ab6:	202a      	movs	r0, #42	; 0x2a
 8008ab8:	f7ff ffaa 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8008abc:	88fb      	ldrh	r3, [r7, #6]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff ffc5 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff ffc0 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008ad4:	887b      	ldrh	r3, [r7, #2]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff ffb9 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8008ae2:	887b      	ldrh	r3, [r7, #2]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff ffb4 	bl	8008a54 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8008aec:	202b      	movs	r0, #43	; 0x2b
 8008aee:	f7ff ff8f 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8008af2:	88bb      	ldrh	r3, [r7, #4]
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ffaa 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008b00:	88bb      	ldrh	r3, [r7, #4]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff ffa5 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8008b0a:	883b      	ldrh	r3, [r7, #0]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ff9e 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008b18:	883b      	ldrh	r3, [r7, #0]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ff99 	bl	8008a54 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8008b22:	202c      	movs	r0, #44	; 0x2c
 8008b24:	f7ff ff74 	bl	8008a10 <ILI9341_Write_Command>
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd90      	pop	{r4, r7, pc}

08008b30 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	4a0b      	ldr	r2, [pc, #44]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b3e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008b40:	20c8      	movs	r0, #200	; 0xc8
 8008b42:	f7fa fa05 	bl	8002f50 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b46:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b50:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008b52:	20c8      	movs	r0, #200	; 0xc8
 8008b54:	f7fa f9fc 	bl	8002f50 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008b58:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	4a02      	ldr	r2, [pc, #8]	; (8008b68 <ILI9341_Reset+0x38>)
 8008b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b62:	6153      	str	r3, [r2, #20]
}
 8008b64:	bf00      	nop
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	48000400 	.word	0x48000400

08008b6c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8008b7a:	2036      	movs	r0, #54	; 0x36
 8008b7c:	f7ff ff48 	bl	8008a10 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d836      	bhi.n	8008bf4 <ILI9341_Set_Rotation+0x88>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <ILI9341_Set_Rotation+0x20>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008bb3 	.word	0x08008bb3
 8008b94:	08008bc9 	.word	0x08008bc9
 8008b98:	08008bdf 	.word	0x08008bdf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008b9c:	2048      	movs	r0, #72	; 0x48
 8008b9e:	f7ff ff59 	bl	8008a54 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008ba2:	4b17      	ldr	r3, [pc, #92]	; (8008c00 <ILI9341_Set_Rotation+0x94>)
 8008ba4:	22f0      	movs	r2, #240	; 0xf0
 8008ba6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008ba8:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <ILI9341_Set_Rotation+0x98>)
 8008baa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bae:	801a      	strh	r2, [r3, #0]
			break;
 8008bb0:	e021      	b.n	8008bf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008bb2:	2028      	movs	r0, #40	; 0x28
 8008bb4:	f7ff ff4e 	bl	8008a54 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008bb8:	4b11      	ldr	r3, [pc, #68]	; (8008c00 <ILI9341_Set_Rotation+0x94>)
 8008bba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bbe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008bc0:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <ILI9341_Set_Rotation+0x98>)
 8008bc2:	22f0      	movs	r2, #240	; 0xf0
 8008bc4:	801a      	strh	r2, [r3, #0]
			break;
 8008bc6:	e016      	b.n	8008bf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008bc8:	2088      	movs	r0, #136	; 0x88
 8008bca:	f7ff ff43 	bl	8008a54 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <ILI9341_Set_Rotation+0x94>)
 8008bd0:	22f0      	movs	r2, #240	; 0xf0
 8008bd2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <ILI9341_Set_Rotation+0x98>)
 8008bd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bda:	801a      	strh	r2, [r3, #0]
			break;
 8008bdc:	e00b      	b.n	8008bf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008bde:	20e8      	movs	r0, #232	; 0xe8
 8008be0:	f7ff ff38 	bl	8008a54 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008be4:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <ILI9341_Set_Rotation+0x94>)
 8008be6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <ILI9341_Set_Rotation+0x98>)
 8008bee:	22f0      	movs	r2, #240	; 0xf0
 8008bf0:	801a      	strh	r2, [r3, #0]
			break;
 8008bf2:	e000      	b.n	8008bf6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008bf4:	bf00      	nop
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000001e 	.word	0x2000001e
 8008c04:	2000001c 	.word	0x2000001c

08008c08 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <ILI9341_Enable+0x1c>)
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	4a04      	ldr	r2, [pc, #16]	; (8008c24 <ILI9341_Enable+0x1c>)
 8008c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c16:	6153      	str	r3, [r2, #20]
}
 8008c18:	bf00      	nop
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	48000400 	.word	0x48000400

08008c28 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008c2c:	f7ff ffec 	bl	8008c08 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008c30:	f7ff feca 	bl	80089c8 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008c34:	f7ff ff7c 	bl	8008b30 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008c38:	2001      	movs	r0, #1
 8008c3a:	f7ff fee9 	bl	8008a10 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008c3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c42:	f7fa f985 	bl	8002f50 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008c46:	20cb      	movs	r0, #203	; 0xcb
 8008c48:	f7ff fee2 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008c4c:	2039      	movs	r0, #57	; 0x39
 8008c4e:	f7ff ff01 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008c52:	202c      	movs	r0, #44	; 0x2c
 8008c54:	f7ff fefe 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7ff fefb 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008c5e:	2034      	movs	r0, #52	; 0x34
 8008c60:	f7ff fef8 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008c64:	2002      	movs	r0, #2
 8008c66:	f7ff fef5 	bl	8008a54 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008c6a:	20cf      	movs	r0, #207	; 0xcf
 8008c6c:	f7ff fed0 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c70:	2000      	movs	r0, #0
 8008c72:	f7ff feef 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008c76:	20c1      	movs	r0, #193	; 0xc1
 8008c78:	f7ff feec 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008c7c:	2030      	movs	r0, #48	; 0x30
 8008c7e:	f7ff fee9 	bl	8008a54 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008c82:	20e8      	movs	r0, #232	; 0xe8
 8008c84:	f7ff fec4 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008c88:	2085      	movs	r0, #133	; 0x85
 8008c8a:	f7ff fee3 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f7ff fee0 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008c94:	2078      	movs	r0, #120	; 0x78
 8008c96:	f7ff fedd 	bl	8008a54 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008c9a:	20ea      	movs	r0, #234	; 0xea
 8008c9c:	f7ff feb8 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	f7ff fed7 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f7ff fed4 	bl	8008a54 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008cac:	20ed      	movs	r0, #237	; 0xed
 8008cae:	f7ff feaf 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008cb2:	2064      	movs	r0, #100	; 0x64
 8008cb4:	f7ff fece 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008cb8:	2003      	movs	r0, #3
 8008cba:	f7ff fecb 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008cbe:	2012      	movs	r0, #18
 8008cc0:	f7ff fec8 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008cc4:	2081      	movs	r0, #129	; 0x81
 8008cc6:	f7ff fec5 	bl	8008a54 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008cca:	20f7      	movs	r0, #247	; 0xf7
 8008ccc:	f7ff fea0 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008cd0:	2020      	movs	r0, #32
 8008cd2:	f7ff febf 	bl	8008a54 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008cd6:	20c0      	movs	r0, #192	; 0xc0
 8008cd8:	f7ff fe9a 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008cdc:	2023      	movs	r0, #35	; 0x23
 8008cde:	f7ff feb9 	bl	8008a54 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008ce2:	20c1      	movs	r0, #193	; 0xc1
 8008ce4:	f7ff fe94 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008ce8:	2010      	movs	r0, #16
 8008cea:	f7ff feb3 	bl	8008a54 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008cee:	20c5      	movs	r0, #197	; 0xc5
 8008cf0:	f7ff fe8e 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008cf4:	203e      	movs	r0, #62	; 0x3e
 8008cf6:	f7ff fead 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008cfa:	2028      	movs	r0, #40	; 0x28
 8008cfc:	f7ff feaa 	bl	8008a54 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008d00:	20c7      	movs	r0, #199	; 0xc7
 8008d02:	f7ff fe85 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008d06:	2086      	movs	r0, #134	; 0x86
 8008d08:	f7ff fea4 	bl	8008a54 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008d0c:	2036      	movs	r0, #54	; 0x36
 8008d0e:	f7ff fe7f 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008d12:	2048      	movs	r0, #72	; 0x48
 8008d14:	f7ff fe9e 	bl	8008a54 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008d18:	203a      	movs	r0, #58	; 0x3a
 8008d1a:	f7ff fe79 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008d1e:	2055      	movs	r0, #85	; 0x55
 8008d20:	f7ff fe98 	bl	8008a54 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008d24:	20b1      	movs	r0, #177	; 0xb1
 8008d26:	f7ff fe73 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f7ff fe92 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008d30:	2018      	movs	r0, #24
 8008d32:	f7ff fe8f 	bl	8008a54 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008d36:	20b6      	movs	r0, #182	; 0xb6
 8008d38:	f7ff fe6a 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008d3c:	2008      	movs	r0, #8
 8008d3e:	f7ff fe89 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008d42:	2082      	movs	r0, #130	; 0x82
 8008d44:	f7ff fe86 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008d48:	2027      	movs	r0, #39	; 0x27
 8008d4a:	f7ff fe83 	bl	8008a54 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008d4e:	20f2      	movs	r0, #242	; 0xf2
 8008d50:	f7ff fe5e 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7ff fe7d 	bl	8008a54 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008d5a:	2026      	movs	r0, #38	; 0x26
 8008d5c:	f7ff fe58 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008d60:	2001      	movs	r0, #1
 8008d62:	f7ff fe77 	bl	8008a54 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008d66:	20e0      	movs	r0, #224	; 0xe0
 8008d68:	f7ff fe52 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008d6c:	200f      	movs	r0, #15
 8008d6e:	f7ff fe71 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008d72:	2031      	movs	r0, #49	; 0x31
 8008d74:	f7ff fe6e 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008d78:	202b      	movs	r0, #43	; 0x2b
 8008d7a:	f7ff fe6b 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008d7e:	200c      	movs	r0, #12
 8008d80:	f7ff fe68 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008d84:	200e      	movs	r0, #14
 8008d86:	f7ff fe65 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008d8a:	2008      	movs	r0, #8
 8008d8c:	f7ff fe62 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008d90:	204e      	movs	r0, #78	; 0x4e
 8008d92:	f7ff fe5f 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008d96:	20f1      	movs	r0, #241	; 0xf1
 8008d98:	f7ff fe5c 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008d9c:	2037      	movs	r0, #55	; 0x37
 8008d9e:	f7ff fe59 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008da2:	2007      	movs	r0, #7
 8008da4:	f7ff fe56 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7ff fe53 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008dae:	2003      	movs	r0, #3
 8008db0:	f7ff fe50 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008db4:	200e      	movs	r0, #14
 8008db6:	f7ff fe4d 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008dba:	2009      	movs	r0, #9
 8008dbc:	f7ff fe4a 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f7ff fe47 	bl	8008a54 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008dc6:	20e1      	movs	r0, #225	; 0xe1
 8008dc8:	f7ff fe22 	bl	8008a10 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f7ff fe41 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008dd2:	200e      	movs	r0, #14
 8008dd4:	f7ff fe3e 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008dd8:	2014      	movs	r0, #20
 8008dda:	f7ff fe3b 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008dde:	2003      	movs	r0, #3
 8008de0:	f7ff fe38 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008de4:	2011      	movs	r0, #17
 8008de6:	f7ff fe35 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008dea:	2007      	movs	r0, #7
 8008dec:	f7ff fe32 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008df0:	2031      	movs	r0, #49	; 0x31
 8008df2:	f7ff fe2f 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008df6:	20c1      	movs	r0, #193	; 0xc1
 8008df8:	f7ff fe2c 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008dfc:	2048      	movs	r0, #72	; 0x48
 8008dfe:	f7ff fe29 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008e02:	2008      	movs	r0, #8
 8008e04:	f7ff fe26 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008e08:	200f      	movs	r0, #15
 8008e0a:	f7ff fe23 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008e0e:	200c      	movs	r0, #12
 8008e10:	f7ff fe20 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008e14:	2031      	movs	r0, #49	; 0x31
 8008e16:	f7ff fe1d 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008e1a:	2036      	movs	r0, #54	; 0x36
 8008e1c:	f7ff fe1a 	bl	8008a54 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008e20:	200f      	movs	r0, #15
 8008e22:	f7ff fe17 	bl	8008a54 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008e26:	2011      	movs	r0, #17
 8008e28:	f7ff fdf2 	bl	8008a10 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008e2c:	20f0      	movs	r0, #240	; 0xf0
 8008e2e:	f7fa f88f 	bl	8002f50 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008e32:	2029      	movs	r0, #41	; 0x29
 8008e34:	f7ff fdec 	bl	8008a10 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7ff fe97 	bl	8008b6c <ILI9341_Set_Rotation>
}
 8008e3e:	bf00      	nop
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008e44:	b5b0      	push	{r4, r5, r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	607b      	str	r3, [r7, #4]
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	81fb      	strh	r3, [r7, #14]
 8008e50:	460b      	mov	r3, r1
 8008e52:	81bb      	strh	r3, [r7, #12]
 8008e54:	4613      	mov	r3, r2
 8008e56:	817b      	strh	r3, [r7, #10]
 8008e58:	466b      	mov	r3, sp
 8008e5a:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4a48      	ldr	r2, [pc, #288]	; (8008f88 <ILI9341_Draw_colour_Burst+0x144>)
 8008e66:	8812      	ldrh	r2, [r2, #0]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d202      	bcs.n	8008e72 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e70:	e002      	b.n	8008e78 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008e72:	4b45      	ldr	r3, [pc, #276]	; (8008f88 <ILI9341_Draw_colour_Burst+0x144>)
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008e78:	897b      	ldrh	r3, [r7, #10]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e84:	4603      	mov	r3, r0
 8008e86:	3b01      	subs	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	f04f 0400 	mov.w	r4, #0
 8008e98:	00d4      	lsls	r4, r2, #3
 8008e9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008e9e:	00cb      	lsls	r3, r1, #3
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	f04f 0400 	mov.w	r4, #0
 8008eae:	00d4      	lsls	r4, r2, #3
 8008eb0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008eb4:	00cb      	lsls	r3, r1, #3
 8008eb6:	1dc3      	adds	r3, r0, #7
 8008eb8:	08db      	lsrs	r3, r3, #3
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	ebad 0d03 	sub.w	sp, sp, r3
 8008ec0:	466b      	mov	r3, sp
 8008ec2:	3300      	adds	r3, #0
 8008ec4:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eca:	e00e      	b.n	8008eea <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008ed6:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	3301      	adds	r3, #1
 8008edc:	897a      	ldrh	r2, [r7, #10]
 8008ede:	b2d1      	uxtb	r1, r2
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d3ec      	bcc.n	8008ecc <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f14:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f1a:	fb01 f202 	mul.w	r2, r1, r2
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008f22:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f2e:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	4a16      	ldr	r2, [pc, #88]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f38:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d010      	beq.n	8008f62 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008f40:	2300      	movs	r3, #0
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
 8008f44:	e009      	b.n	8008f5a <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008f46:	69b9      	ldr	r1, [r7, #24]
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	4810      	ldr	r0, [pc, #64]	; (8008f90 <ILI9341_Draw_colour_Burst+0x14c>)
 8008f50:	f7fd fd8c 	bl	8006a6c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	3301      	adds	r3, #1
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d3f1      	bcc.n	8008f46 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008f62:	69b9      	ldr	r1, [r7, #24]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	2302      	movs	r3, #2
 8008f6a:	4809      	ldr	r0, [pc, #36]	; (8008f90 <ILI9341_Draw_colour_Burst+0x14c>)
 8008f6c:	f7fd fd7e 	bl	8006a6c <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	4a05      	ldr	r2, [pc, #20]	; (8008f8c <ILI9341_Draw_colour_Burst+0x148>)
 8008f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7a:	6153      	str	r3, [r2, #20]
 8008f7c:	46ad      	mov	sp, r5


}
 8008f7e:	bf00      	nop
 8008f80:	3738      	adds	r7, #56	; 0x38
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bdb0      	pop	{r4, r5, r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000020 	.word	0x20000020
 8008f8c:	48000400 	.word	0x48000400
 8008f90:	20000de8 	.word	0x20000de8

08008f94 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <ILI9341_Fill_Screen+0x4c>)
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <ILI9341_Fill_Screen+0x50>)
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2100      	movs	r1, #0
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7ff fd73 	bl	8008a98 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <ILI9341_Fill_Screen+0x4c>)
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <ILI9341_Fill_Screen+0x50>)
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	fb03 f302 	mul.w	r3, r3, r2
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	88fa      	ldrh	r2, [r7, #6]
 8008fc8:	2304      	movs	r3, #4
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	2100      	movs	r1, #0
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f7ff ff37 	bl	8008e44 <ILI9341_Draw_colour_Burst>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	2000001e 	.word	0x2000001e
 8008fe4:	2000001c 	.word	0x2000001c

08008fe8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	80fb      	strh	r3, [r7, #6]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	80bb      	strh	r3, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008ffa:	4b64      	ldr	r3, [pc, #400]	; (800918c <ILI9341_Draw_Pixel+0x1a4>)
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	88fa      	ldrh	r2, [r7, #6]
 8009002:	429a      	cmp	r2, r3
 8009004:	f080 80be 	bcs.w	8009184 <ILI9341_Draw_Pixel+0x19c>
 8009008:	4b61      	ldr	r3, [pc, #388]	; (8009190 <ILI9341_Draw_Pixel+0x1a8>)
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	88ba      	ldrh	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	f080 80b7 	bcs.w	8009184 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009016:	4b5f      	ldr	r3, [pc, #380]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	4a5e      	ldr	r2, [pc, #376]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009022:	4b5c      	ldr	r3, [pc, #368]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	4a5b      	ldr	r2, [pc, #364]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 800902e:	202a      	movs	r0, #42	; 0x2a
 8009030:	f7ff fcda 	bl	80089e8 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009034:	4b57      	ldr	r3, [pc, #348]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	4a56      	ldr	r2, [pc, #344]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800903a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009040:	4b54      	ldr	r3, [pc, #336]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	4a53      	ldr	r2, [pc, #332]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904a:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800904c:	4b51      	ldr	r3, [pc, #324]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	4a50      	ldr	r2, [pc, #320]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009056:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b29b      	uxth	r3, r3
 800905e:	b2db      	uxtb	r3, r3
 8009060:	753b      	strb	r3, [r7, #20]
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	757b      	strb	r3, [r7, #21]
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	3301      	adds	r3, #1
 800906c:	121b      	asrs	r3, r3, #8
 800906e:	b2db      	uxtb	r3, r3
 8009070:	75bb      	strb	r3, [r7, #22]
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	3301      	adds	r3, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800907c:	f107 0114 	add.w	r1, r7, #20
 8009080:	2301      	movs	r3, #1
 8009082:	2204      	movs	r2, #4
 8009084:	4844      	ldr	r0, [pc, #272]	; (8009198 <ILI9341_Draw_Pixel+0x1b0>)
 8009086:	f7fd fcf1 	bl	8006a6c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800908a:	4b42      	ldr	r3, [pc, #264]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	4a41      	ldr	r2, [pc, #260]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009096:	4b3f      	ldr	r3, [pc, #252]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	4a3e      	ldr	r2, [pc, #248]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800909c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090a2:	4b3c      	ldr	r3, [pc, #240]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	4a3b      	ldr	r2, [pc, #236]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ac:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 80090ae:	202b      	movs	r0, #43	; 0x2b
 80090b0:	f7ff fc9a 	bl	80089e8 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80090b4:	4b37      	ldr	r3, [pc, #220]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	4a36      	ldr	r2, [pc, #216]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090be:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80090c0:	4b34      	ldr	r3, [pc, #208]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	4a33      	ldr	r2, [pc, #204]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ca:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090cc:	4b31      	ldr	r3, [pc, #196]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	4a30      	ldr	r2, [pc, #192]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 80090d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80090d8:	88bb      	ldrh	r3, [r7, #4]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	b29b      	uxth	r3, r3
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	743b      	strb	r3, [r7, #16]
 80090e2:	88bb      	ldrh	r3, [r7, #4]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	747b      	strb	r3, [r7, #17]
 80090e8:	88bb      	ldrh	r3, [r7, #4]
 80090ea:	3301      	adds	r3, #1
 80090ec:	121b      	asrs	r3, r3, #8
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	74bb      	strb	r3, [r7, #18]
 80090f2:	88bb      	ldrh	r3, [r7, #4]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	3301      	adds	r3, #1
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80090fc:	f107 0110 	add.w	r1, r7, #16
 8009100:	2301      	movs	r3, #1
 8009102:	2204      	movs	r2, #4
 8009104:	4824      	ldr	r0, [pc, #144]	; (8009198 <ILI9341_Draw_Pixel+0x1b0>)
 8009106:	f7fd fcb1 	bl	8006a6c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	4a21      	ldr	r2, [pc, #132]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009114:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009116:	4b1f      	ldr	r3, [pc, #124]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800911c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009120:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009122:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 800912e:	202c      	movs	r0, #44	; 0x2c
 8009130:	f7ff fc5a 	bl	80089e8 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009134:	4b17      	ldr	r3, [pc, #92]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	4a16      	ldr	r2, [pc, #88]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800913a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009140:	4b14      	ldr	r3, [pc, #80]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	4a13      	ldr	r2, [pc, #76]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914a:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	4a10      	ldr	r2, [pc, #64]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009156:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8009158:	887b      	ldrh	r3, [r7, #2]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b29b      	uxth	r3, r3
 800915e:	b2db      	uxtb	r3, r3
 8009160:	733b      	strb	r3, [r7, #12]
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8009168:	f107 010c 	add.w	r1, r7, #12
 800916c:	2301      	movs	r3, #1
 800916e:	2202      	movs	r2, #2
 8009170:	4809      	ldr	r0, [pc, #36]	; (8009198 <ILI9341_Draw_Pixel+0x1b0>)
 8009172:	f7fd fc7b 	bl	8006a6c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009176:	4b07      	ldr	r3, [pc, #28]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	4a06      	ldr	r2, [pc, #24]	; (8009194 <ILI9341_Draw_Pixel+0x1ac>)
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	6153      	str	r3, [r2, #20]
 8009182:	e000      	b.n	8009186 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8009184:	bf00      	nop

	
}
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	2000001e 	.word	0x2000001e
 8009190:	2000001c 	.word	0x2000001c
 8009194:	48000400 	.word	0x48000400
 8009198:	20000de8 	.word	0x20000de8

0800919c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b087      	sub	sp, #28
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	461a      	mov	r2, r3
 80091aa:	4623      	mov	r3, r4
 80091ac:	80fb      	strh	r3, [r7, #6]
 80091ae:	4603      	mov	r3, r0
 80091b0:	80bb      	strh	r3, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	807b      	strh	r3, [r7, #2]
 80091b6:	4613      	mov	r3, r2
 80091b8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80091ba:	4b39      	ldr	r3, [pc, #228]	; (80092a0 <ILI9341_Draw_Rectangle+0x104>)
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d268      	bcs.n	8009298 <ILI9341_Draw_Rectangle+0xfc>
 80091c6:	4b37      	ldr	r3, [pc, #220]	; (80092a4 <ILI9341_Draw_Rectangle+0x108>)
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	88ba      	ldrh	r2, [r7, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d262      	bcs.n	8009298 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	887b      	ldrh	r3, [r7, #2]
 80091d6:	4413      	add	r3, r2
 80091d8:	3b01      	subs	r3, #1
 80091da:	4a31      	ldr	r2, [pc, #196]	; (80092a0 <ILI9341_Draw_Rectangle+0x104>)
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	b292      	uxth	r2, r2
 80091e0:	4293      	cmp	r3, r2
 80091e2:	db05      	blt.n	80091f0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 80091e4:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <ILI9341_Draw_Rectangle+0x104>)
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80091f0:	88ba      	ldrh	r2, [r7, #4]
 80091f2:	883b      	ldrh	r3, [r7, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4a2a      	ldr	r2, [pc, #168]	; (80092a4 <ILI9341_Draw_Rectangle+0x108>)
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	b292      	uxth	r2, r2
 80091fe:	4293      	cmp	r3, r2
 8009200:	db05      	blt.n	800920e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8009202:	4b28      	ldr	r3, [pc, #160]	; (80092a4 <ILI9341_Draw_Rectangle+0x108>)
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29a      	uxth	r2, r3
 8009208:	88bb      	ldrh	r3, [r7, #4]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	887b      	ldrh	r3, [r7, #2]
 8009212:	4413      	add	r3, r2
 8009214:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009216:	3b01      	subs	r3, #1
 8009218:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800921a:	88ba      	ldrh	r2, [r7, #4]
 800921c:	883b      	ldrh	r3, [r7, #0]
 800921e:	4413      	add	r3, r2
 8009220:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009222:	3b01      	subs	r3, #1
 8009224:	b29b      	uxth	r3, r3
 8009226:	88b9      	ldrh	r1, [r7, #4]
 8009228:	88f8      	ldrh	r0, [r7, #6]
 800922a:	4622      	mov	r2, r4
 800922c:	f7ff fc34 	bl	8008a98 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8009230:	883a      	ldrh	r2, [r7, #0]
 8009232:	887b      	ldrh	r3, [r7, #2]
 8009234:	fb12 f303 	smulbb	r3, r2, r3
 8009238:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <ILI9341_Draw_Rectangle+0xc0>
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d906      	bls.n	800925c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800924e:	2301      	movs	r3, #1
 8009250:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8009252:	89fb      	ldrh	r3, [r7, #14]
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	b29b      	uxth	r3, r3
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 800925c:	89fc      	ldrh	r4, [r7, #14]
 800925e:	8c3a      	ldrh	r2, [r7, #32]
 8009260:	88b9      	ldrh	r1, [r7, #4]
 8009262:	88f8      	ldrh	r0, [r7, #6]
 8009264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	4623      	mov	r3, r4
 800926c:	f7ff fdea 	bl	8008e44 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 8009270:	7b7b      	ldrb	r3, [r7, #13]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	887b      	ldrh	r3, [r7, #2]
 800927a:	4413      	add	r3, r2
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8009282:	88ba      	ldrh	r2, [r7, #4]
 8009284:	883b      	ldrh	r3, [r7, #0]
 8009286:	4413      	add	r3, r2
 8009288:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800928a:	3b01      	subs	r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	8c3a      	ldrh	r2, [r7, #32]
 8009290:	4619      	mov	r1, r3
 8009292:	f7ff fea9 	bl	8008fe8 <ILI9341_Draw_Pixel>
 8009296:	e000      	b.n	800929a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009298:	bf00      	nop
							colour);
	}
}
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}
 80092a0:	2000001e 	.word	0x2000001e
 80092a4:	2000001c 	.word	0x2000001c

080092a8 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4623      	mov	r3, r4
 80092b8:	80fb      	strh	r3, [r7, #6]
 80092ba:	4603      	mov	r3, r0
 80092bc:	80bb      	strh	r3, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	807b      	strh	r3, [r7, #2]
 80092c2:	4613      	mov	r3, r2
 80092c4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <ILI9341_Draw_Horizontal_Line+0x88>)
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d229      	bcs.n	8009326 <ILI9341_Draw_Horizontal_Line+0x7e>
 80092d2:	4b18      	ldr	r3, [pc, #96]	; (8009334 <ILI9341_Draw_Horizontal_Line+0x8c>)
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	88ba      	ldrh	r2, [r7, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d223      	bcs.n	8009326 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	887b      	ldrh	r3, [r7, #2]
 80092e2:	4413      	add	r3, r2
 80092e4:	3b01      	subs	r3, #1
 80092e6:	4a12      	ldr	r2, [pc, #72]	; (8009330 <ILI9341_Draw_Horizontal_Line+0x88>)
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	b292      	uxth	r2, r2
 80092ec:	4293      	cmp	r3, r2
 80092ee:	db05      	blt.n	80092fc <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 80092f0:	4b0f      	ldr	r3, [pc, #60]	; (8009330 <ILI9341_Draw_Horizontal_Line+0x88>)
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	887b      	ldrh	r3, [r7, #2]
 8009300:	4413      	add	r3, r2
 8009302:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	88bb      	ldrh	r3, [r7, #4]
 800930a:	88b9      	ldrh	r1, [r7, #4]
 800930c:	88f8      	ldrh	r0, [r7, #6]
 800930e:	f7ff fbc3 	bl	8008a98 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8009312:	887c      	ldrh	r4, [r7, #2]
 8009314:	883a      	ldrh	r2, [r7, #0]
 8009316:	88b9      	ldrh	r1, [r7, #4]
 8009318:	88f8      	ldrh	r0, [r7, #6]
 800931a:	2303      	movs	r3, #3
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4623      	mov	r3, r4
 8009320:	f7ff fd90 	bl	8008e44 <ILI9341_Draw_colour_Burst>
 8009324:	e000      	b.n	8009328 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009326:	bf00      	nop
}
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	bd90      	pop	{r4, r7, pc}
 800932e:	bf00      	nop
 8009330:	2000001e 	.word	0x2000001e
 8009334:	2000001c 	.word	0x2000001c

08009338 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b085      	sub	sp, #20
 800933c:	af02      	add	r7, sp, #8
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	80fb      	strh	r3, [r7, #6]
 800934a:	4603      	mov	r3, r0
 800934c:	80bb      	strh	r3, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	807b      	strh	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <ILI9341_Draw_Vertical_Line+0x88>)
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	88fa      	ldrh	r2, [r7, #6]
 800935e:	429a      	cmp	r2, r3
 8009360:	d229      	bcs.n	80093b6 <ILI9341_Draw_Vertical_Line+0x7e>
 8009362:	4b18      	ldr	r3, [pc, #96]	; (80093c4 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	88ba      	ldrh	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d223      	bcs.n	80093b6 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800936e:	88ba      	ldrh	r2, [r7, #4]
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	4413      	add	r3, r2
 8009374:	3b01      	subs	r3, #1
 8009376:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009378:	8812      	ldrh	r2, [r2, #0]
 800937a:	b292      	uxth	r2, r2
 800937c:	4293      	cmp	r3, r2
 800937e:	db05      	blt.n	800938c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8009380:	4b10      	ldr	r3, [pc, #64]	; (80093c4 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29a      	uxth	r2, r3
 8009386:	88bb      	ldrh	r3, [r7, #4]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 800938c:	88ba      	ldrh	r2, [r7, #4]
 800938e:	887b      	ldrh	r3, [r7, #2]
 8009390:	4413      	add	r3, r2
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29b      	uxth	r3, r3
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	88b9      	ldrh	r1, [r7, #4]
 800939c:	88f8      	ldrh	r0, [r7, #6]
 800939e:	f7ff fb7b 	bl	8008a98 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 80093a2:	887c      	ldrh	r4, [r7, #2]
 80093a4:	883a      	ldrh	r2, [r7, #0]
 80093a6:	88b9      	ldrh	r1, [r7, #4]
 80093a8:	88f8      	ldrh	r0, [r7, #6]
 80093aa:	2303      	movs	r3, #3
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4623      	mov	r3, r4
 80093b0:	f7ff fd48 	bl	8008e44 <ILI9341_Draw_colour_Burst>
 80093b4:	e000      	b.n	80093b8 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80093b6:	bf00      	nop
}
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd90      	pop	{r4, r7, pc}
 80093be:	bf00      	nop
 80093c0:	2000001e 	.word	0x2000001e
 80093c4:	2000001c 	.word	0x2000001c

080093c8 <__errno>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <__errno+0x8>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20000b64 	.word	0x20000b64

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4e0d      	ldr	r6, [pc, #52]	; (800940c <__libc_init_array+0x38>)
 80093d8:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093da:	1ba4      	subs	r4, r4, r6
 80093dc:	10a4      	asrs	r4, r4, #2
 80093de:	2500      	movs	r5, #0
 80093e0:	42a5      	cmp	r5, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	4e0b      	ldr	r6, [pc, #44]	; (8009414 <__libc_init_array+0x40>)
 80093e6:	4c0c      	ldr	r4, [pc, #48]	; (8009418 <__libc_init_array+0x44>)
 80093e8:	f000 ffe8 	bl	800a3bc <_init>
 80093ec:	1ba4      	subs	r4, r4, r6
 80093ee:	10a4      	asrs	r4, r4, #2
 80093f0:	2500      	movs	r5, #0
 80093f2:	42a5      	cmp	r5, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093fc:	4798      	blx	r3
 80093fe:	3501      	adds	r5, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009406:	4798      	blx	r3
 8009408:	3501      	adds	r5, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	0800a924 	.word	0x0800a924
 8009410:	0800a924 	.word	0x0800a924
 8009414:	0800a924 	.word	0x0800a924
 8009418:	0800a928 	.word	0x0800a928

0800941c <memset>:
 800941c:	4402      	add	r2, r0
 800941e:	4603      	mov	r3, r0
 8009420:	4293      	cmp	r3, r2
 8009422:	d100      	bne.n	8009426 <memset+0xa>
 8009424:	4770      	bx	lr
 8009426:	f803 1b01 	strb.w	r1, [r3], #1
 800942a:	e7f9      	b.n	8009420 <memset+0x4>

0800942c <_puts_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	460e      	mov	r6, r1
 8009430:	4605      	mov	r5, r0
 8009432:	b118      	cbz	r0, 800943c <_puts_r+0x10>
 8009434:	6983      	ldr	r3, [r0, #24]
 8009436:	b90b      	cbnz	r3, 800943c <_puts_r+0x10>
 8009438:	f000 fa40 	bl	80098bc <__sinit>
 800943c:	69ab      	ldr	r3, [r5, #24]
 800943e:	68ac      	ldr	r4, [r5, #8]
 8009440:	b913      	cbnz	r3, 8009448 <_puts_r+0x1c>
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fa3a 	bl	80098bc <__sinit>
 8009448:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <_puts_r+0xac>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d117      	bne.n	800947e <_puts_r+0x52>
 800944e:	686c      	ldr	r4, [r5, #4]
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	071b      	lsls	r3, r3, #28
 8009454:	d51d      	bpl.n	8009492 <_puts_r+0x66>
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	b1db      	cbz	r3, 8009492 <_puts_r+0x66>
 800945a:	3e01      	subs	r6, #1
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009462:	3b01      	subs	r3, #1
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	b9e9      	cbnz	r1, 80094a4 <_puts_r+0x78>
 8009468:	2b00      	cmp	r3, #0
 800946a:	da2e      	bge.n	80094ca <_puts_r+0x9e>
 800946c:	4622      	mov	r2, r4
 800946e:	210a      	movs	r1, #10
 8009470:	4628      	mov	r0, r5
 8009472:	f000 f873 	bl	800955c <__swbuf_r>
 8009476:	3001      	adds	r0, #1
 8009478:	d011      	beq.n	800949e <_puts_r+0x72>
 800947a:	200a      	movs	r0, #10
 800947c:	e011      	b.n	80094a2 <_puts_r+0x76>
 800947e:	4b17      	ldr	r3, [pc, #92]	; (80094dc <_puts_r+0xb0>)
 8009480:	429c      	cmp	r4, r3
 8009482:	d101      	bne.n	8009488 <_puts_r+0x5c>
 8009484:	68ac      	ldr	r4, [r5, #8]
 8009486:	e7e3      	b.n	8009450 <_puts_r+0x24>
 8009488:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <_puts_r+0xb4>)
 800948a:	429c      	cmp	r4, r3
 800948c:	bf08      	it	eq
 800948e:	68ec      	ldreq	r4, [r5, #12]
 8009490:	e7de      	b.n	8009450 <_puts_r+0x24>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f000 f8b3 	bl	8009600 <__swsetup_r>
 800949a:	2800      	cmp	r0, #0
 800949c:	d0dd      	beq.n	800945a <_puts_r+0x2e>
 800949e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	da04      	bge.n	80094b2 <_puts_r+0x86>
 80094a8:	69a2      	ldr	r2, [r4, #24]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	dc06      	bgt.n	80094bc <_puts_r+0x90>
 80094ae:	290a      	cmp	r1, #10
 80094b0:	d004      	beq.n	80094bc <_puts_r+0x90>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	6022      	str	r2, [r4, #0]
 80094b8:	7019      	strb	r1, [r3, #0]
 80094ba:	e7cf      	b.n	800945c <_puts_r+0x30>
 80094bc:	4622      	mov	r2, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f84c 	bl	800955c <__swbuf_r>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d1c9      	bne.n	800945c <_puts_r+0x30>
 80094c8:	e7e9      	b.n	800949e <_puts_r+0x72>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	200a      	movs	r0, #10
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	7018      	strb	r0, [r3, #0]
 80094d4:	e7e5      	b.n	80094a2 <_puts_r+0x76>
 80094d6:	bf00      	nop
 80094d8:	0800a8b0 	.word	0x0800a8b0
 80094dc:	0800a8d0 	.word	0x0800a8d0
 80094e0:	0800a890 	.word	0x0800a890

080094e4 <puts>:
 80094e4:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <puts+0xc>)
 80094e6:	4601      	mov	r1, r0
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f7ff bf9f 	b.w	800942c <_puts_r>
 80094ee:	bf00      	nop
 80094f0:	20000b64 	.word	0x20000b64

080094f4 <sniprintf>:
 80094f4:	b40c      	push	{r2, r3}
 80094f6:	b530      	push	{r4, r5, lr}
 80094f8:	4b17      	ldr	r3, [pc, #92]	; (8009558 <sniprintf+0x64>)
 80094fa:	1e0c      	subs	r4, r1, #0
 80094fc:	b09d      	sub	sp, #116	; 0x74
 80094fe:	681d      	ldr	r5, [r3, #0]
 8009500:	da08      	bge.n	8009514 <sniprintf+0x20>
 8009502:	238b      	movs	r3, #139	; 0x8b
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800950a:	b01d      	add	sp, #116	; 0x74
 800950c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009510:	b002      	add	sp, #8
 8009512:	4770      	bx	lr
 8009514:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009518:	f8ad 3014 	strh.w	r3, [sp, #20]
 800951c:	bf14      	ite	ne
 800951e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009522:	4623      	moveq	r3, r4
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	9006      	str	r0, [sp, #24]
 8009530:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009534:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009536:	ab21      	add	r3, sp, #132	; 0x84
 8009538:	a902      	add	r1, sp, #8
 800953a:	4628      	mov	r0, r5
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	f000 fbad 	bl	8009c9c <_svfiprintf_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	bfbc      	itt	lt
 8009546:	238b      	movlt	r3, #139	; 0x8b
 8009548:	602b      	strlt	r3, [r5, #0]
 800954a:	2c00      	cmp	r4, #0
 800954c:	d0dd      	beq.n	800950a <sniprintf+0x16>
 800954e:	9b02      	ldr	r3, [sp, #8]
 8009550:	2200      	movs	r2, #0
 8009552:	701a      	strb	r2, [r3, #0]
 8009554:	e7d9      	b.n	800950a <sniprintf+0x16>
 8009556:	bf00      	nop
 8009558:	20000b64 	.word	0x20000b64

0800955c <__swbuf_r>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	4614      	mov	r4, r2
 8009562:	4605      	mov	r5, r0
 8009564:	b118      	cbz	r0, 800956e <__swbuf_r+0x12>
 8009566:	6983      	ldr	r3, [r0, #24]
 8009568:	b90b      	cbnz	r3, 800956e <__swbuf_r+0x12>
 800956a:	f000 f9a7 	bl	80098bc <__sinit>
 800956e:	4b21      	ldr	r3, [pc, #132]	; (80095f4 <__swbuf_r+0x98>)
 8009570:	429c      	cmp	r4, r3
 8009572:	d12a      	bne.n	80095ca <__swbuf_r+0x6e>
 8009574:	686c      	ldr	r4, [r5, #4]
 8009576:	69a3      	ldr	r3, [r4, #24]
 8009578:	60a3      	str	r3, [r4, #8]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	071a      	lsls	r2, r3, #28
 800957e:	d52e      	bpl.n	80095de <__swbuf_r+0x82>
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	b363      	cbz	r3, 80095de <__swbuf_r+0x82>
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	1ac0      	subs	r0, r0, r3
 800958a:	6963      	ldr	r3, [r4, #20]
 800958c:	b2f6      	uxtb	r6, r6
 800958e:	4283      	cmp	r3, r0
 8009590:	4637      	mov	r7, r6
 8009592:	dc04      	bgt.n	800959e <__swbuf_r+0x42>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f926 	bl	80097e8 <_fflush_r>
 800959c:	bb28      	cbnz	r0, 80095ea <__swbuf_r+0x8e>
 800959e:	68a3      	ldr	r3, [r4, #8]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	6022      	str	r2, [r4, #0]
 80095aa:	701e      	strb	r6, [r3, #0]
 80095ac:	6963      	ldr	r3, [r4, #20]
 80095ae:	3001      	adds	r0, #1
 80095b0:	4283      	cmp	r3, r0
 80095b2:	d004      	beq.n	80095be <__swbuf_r+0x62>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	07db      	lsls	r3, r3, #31
 80095b8:	d519      	bpl.n	80095ee <__swbuf_r+0x92>
 80095ba:	2e0a      	cmp	r6, #10
 80095bc:	d117      	bne.n	80095ee <__swbuf_r+0x92>
 80095be:	4621      	mov	r1, r4
 80095c0:	4628      	mov	r0, r5
 80095c2:	f000 f911 	bl	80097e8 <_fflush_r>
 80095c6:	b190      	cbz	r0, 80095ee <__swbuf_r+0x92>
 80095c8:	e00f      	b.n	80095ea <__swbuf_r+0x8e>
 80095ca:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <__swbuf_r+0x9c>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d101      	bne.n	80095d4 <__swbuf_r+0x78>
 80095d0:	68ac      	ldr	r4, [r5, #8]
 80095d2:	e7d0      	b.n	8009576 <__swbuf_r+0x1a>
 80095d4:	4b09      	ldr	r3, [pc, #36]	; (80095fc <__swbuf_r+0xa0>)
 80095d6:	429c      	cmp	r4, r3
 80095d8:	bf08      	it	eq
 80095da:	68ec      	ldreq	r4, [r5, #12]
 80095dc:	e7cb      	b.n	8009576 <__swbuf_r+0x1a>
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 f80d 	bl	8009600 <__swsetup_r>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d0cc      	beq.n	8009584 <__swbuf_r+0x28>
 80095ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095ee:	4638      	mov	r0, r7
 80095f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f2:	bf00      	nop
 80095f4:	0800a8b0 	.word	0x0800a8b0
 80095f8:	0800a8d0 	.word	0x0800a8d0
 80095fc:	0800a890 	.word	0x0800a890

08009600 <__swsetup_r>:
 8009600:	4b32      	ldr	r3, [pc, #200]	; (80096cc <__swsetup_r+0xcc>)
 8009602:	b570      	push	{r4, r5, r6, lr}
 8009604:	681d      	ldr	r5, [r3, #0]
 8009606:	4606      	mov	r6, r0
 8009608:	460c      	mov	r4, r1
 800960a:	b125      	cbz	r5, 8009616 <__swsetup_r+0x16>
 800960c:	69ab      	ldr	r3, [r5, #24]
 800960e:	b913      	cbnz	r3, 8009616 <__swsetup_r+0x16>
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f953 	bl	80098bc <__sinit>
 8009616:	4b2e      	ldr	r3, [pc, #184]	; (80096d0 <__swsetup_r+0xd0>)
 8009618:	429c      	cmp	r4, r3
 800961a:	d10f      	bne.n	800963c <__swsetup_r+0x3c>
 800961c:	686c      	ldr	r4, [r5, #4]
 800961e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009622:	b29a      	uxth	r2, r3
 8009624:	0715      	lsls	r5, r2, #28
 8009626:	d42c      	bmi.n	8009682 <__swsetup_r+0x82>
 8009628:	06d0      	lsls	r0, r2, #27
 800962a:	d411      	bmi.n	8009650 <__swsetup_r+0x50>
 800962c:	2209      	movs	r2, #9
 800962e:	6032      	str	r2, [r6, #0]
 8009630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800963a:	e03e      	b.n	80096ba <__swsetup_r+0xba>
 800963c:	4b25      	ldr	r3, [pc, #148]	; (80096d4 <__swsetup_r+0xd4>)
 800963e:	429c      	cmp	r4, r3
 8009640:	d101      	bne.n	8009646 <__swsetup_r+0x46>
 8009642:	68ac      	ldr	r4, [r5, #8]
 8009644:	e7eb      	b.n	800961e <__swsetup_r+0x1e>
 8009646:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <__swsetup_r+0xd8>)
 8009648:	429c      	cmp	r4, r3
 800964a:	bf08      	it	eq
 800964c:	68ec      	ldreq	r4, [r5, #12]
 800964e:	e7e6      	b.n	800961e <__swsetup_r+0x1e>
 8009650:	0751      	lsls	r1, r2, #29
 8009652:	d512      	bpl.n	800967a <__swsetup_r+0x7a>
 8009654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009656:	b141      	cbz	r1, 800966a <__swsetup_r+0x6a>
 8009658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800965c:	4299      	cmp	r1, r3
 800965e:	d002      	beq.n	8009666 <__swsetup_r+0x66>
 8009660:	4630      	mov	r0, r6
 8009662:	f000 fa19 	bl	8009a98 <_free_r>
 8009666:	2300      	movs	r3, #0
 8009668:	6363      	str	r3, [r4, #52]	; 0x34
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	2300      	movs	r3, #0
 8009674:	6063      	str	r3, [r4, #4]
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f043 0308 	orr.w	r3, r3, #8
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	b94b      	cbnz	r3, 800969a <__swsetup_r+0x9a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800968c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009690:	d003      	beq.n	800969a <__swsetup_r+0x9a>
 8009692:	4621      	mov	r1, r4
 8009694:	4630      	mov	r0, r6
 8009696:	f000 f9bf 	bl	8009a18 <__smakebuf_r>
 800969a:	89a2      	ldrh	r2, [r4, #12]
 800969c:	f012 0301 	ands.w	r3, r2, #1
 80096a0:	d00c      	beq.n	80096bc <__swsetup_r+0xbc>
 80096a2:	2300      	movs	r3, #0
 80096a4:	60a3      	str	r3, [r4, #8]
 80096a6:	6963      	ldr	r3, [r4, #20]
 80096a8:	425b      	negs	r3, r3
 80096aa:	61a3      	str	r3, [r4, #24]
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	b953      	cbnz	r3, 80096c6 <__swsetup_r+0xc6>
 80096b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80096b8:	d1ba      	bne.n	8009630 <__swsetup_r+0x30>
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	0792      	lsls	r2, r2, #30
 80096be:	bf58      	it	pl
 80096c0:	6963      	ldrpl	r3, [r4, #20]
 80096c2:	60a3      	str	r3, [r4, #8]
 80096c4:	e7f2      	b.n	80096ac <__swsetup_r+0xac>
 80096c6:	2000      	movs	r0, #0
 80096c8:	e7f7      	b.n	80096ba <__swsetup_r+0xba>
 80096ca:	bf00      	nop
 80096cc:	20000b64 	.word	0x20000b64
 80096d0:	0800a8b0 	.word	0x0800a8b0
 80096d4:	0800a8d0 	.word	0x0800a8d0
 80096d8:	0800a890 	.word	0x0800a890

080096dc <__sflush_r>:
 80096dc:	898a      	ldrh	r2, [r1, #12]
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	4605      	mov	r5, r0
 80096e4:	0710      	lsls	r0, r2, #28
 80096e6:	460c      	mov	r4, r1
 80096e8:	d458      	bmi.n	800979c <__sflush_r+0xc0>
 80096ea:	684b      	ldr	r3, [r1, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dc05      	bgt.n	80096fc <__sflush_r+0x20>
 80096f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc02      	bgt.n	80096fc <__sflush_r+0x20>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d0f9      	beq.n	80096f6 <__sflush_r+0x1a>
 8009702:	2300      	movs	r3, #0
 8009704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009708:	682f      	ldr	r7, [r5, #0]
 800970a:	6a21      	ldr	r1, [r4, #32]
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	d032      	beq.n	8009776 <__sflush_r+0x9a>
 8009710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	075a      	lsls	r2, r3, #29
 8009716:	d505      	bpl.n	8009724 <__sflush_r+0x48>
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	1ac0      	subs	r0, r0, r3
 800971c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800971e:	b10b      	cbz	r3, 8009724 <__sflush_r+0x48>
 8009720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009722:	1ac0      	subs	r0, r0, r3
 8009724:	2300      	movs	r3, #0
 8009726:	4602      	mov	r2, r0
 8009728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800972a:	6a21      	ldr	r1, [r4, #32]
 800972c:	4628      	mov	r0, r5
 800972e:	47b0      	blx	r6
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	d106      	bne.n	8009744 <__sflush_r+0x68>
 8009736:	6829      	ldr	r1, [r5, #0]
 8009738:	291d      	cmp	r1, #29
 800973a:	d848      	bhi.n	80097ce <__sflush_r+0xf2>
 800973c:	4a29      	ldr	r2, [pc, #164]	; (80097e4 <__sflush_r+0x108>)
 800973e:	40ca      	lsrs	r2, r1
 8009740:	07d6      	lsls	r6, r2, #31
 8009742:	d544      	bpl.n	80097ce <__sflush_r+0xf2>
 8009744:	2200      	movs	r2, #0
 8009746:	6062      	str	r2, [r4, #4]
 8009748:	04d9      	lsls	r1, r3, #19
 800974a:	6922      	ldr	r2, [r4, #16]
 800974c:	6022      	str	r2, [r4, #0]
 800974e:	d504      	bpl.n	800975a <__sflush_r+0x7e>
 8009750:	1c42      	adds	r2, r0, #1
 8009752:	d101      	bne.n	8009758 <__sflush_r+0x7c>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b903      	cbnz	r3, 800975a <__sflush_r+0x7e>
 8009758:	6560      	str	r0, [r4, #84]	; 0x54
 800975a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800975c:	602f      	str	r7, [r5, #0]
 800975e:	2900      	cmp	r1, #0
 8009760:	d0c9      	beq.n	80096f6 <__sflush_r+0x1a>
 8009762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009766:	4299      	cmp	r1, r3
 8009768:	d002      	beq.n	8009770 <__sflush_r+0x94>
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f994 	bl	8009a98 <_free_r>
 8009770:	2000      	movs	r0, #0
 8009772:	6360      	str	r0, [r4, #52]	; 0x34
 8009774:	e7c0      	b.n	80096f8 <__sflush_r+0x1c>
 8009776:	2301      	movs	r3, #1
 8009778:	4628      	mov	r0, r5
 800977a:	47b0      	blx	r6
 800977c:	1c41      	adds	r1, r0, #1
 800977e:	d1c8      	bne.n	8009712 <__sflush_r+0x36>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0c5      	beq.n	8009712 <__sflush_r+0x36>
 8009786:	2b1d      	cmp	r3, #29
 8009788:	d001      	beq.n	800978e <__sflush_r+0xb2>
 800978a:	2b16      	cmp	r3, #22
 800978c:	d101      	bne.n	8009792 <__sflush_r+0xb6>
 800978e:	602f      	str	r7, [r5, #0]
 8009790:	e7b1      	b.n	80096f6 <__sflush_r+0x1a>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7ad      	b.n	80096f8 <__sflush_r+0x1c>
 800979c:	690f      	ldr	r7, [r1, #16]
 800979e:	2f00      	cmp	r7, #0
 80097a0:	d0a9      	beq.n	80096f6 <__sflush_r+0x1a>
 80097a2:	0793      	lsls	r3, r2, #30
 80097a4:	680e      	ldr	r6, [r1, #0]
 80097a6:	bf08      	it	eq
 80097a8:	694b      	ldreq	r3, [r1, #20]
 80097aa:	600f      	str	r7, [r1, #0]
 80097ac:	bf18      	it	ne
 80097ae:	2300      	movne	r3, #0
 80097b0:	eba6 0807 	sub.w	r8, r6, r7
 80097b4:	608b      	str	r3, [r1, #8]
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	dd9c      	ble.n	80096f6 <__sflush_r+0x1a>
 80097bc:	4643      	mov	r3, r8
 80097be:	463a      	mov	r2, r7
 80097c0:	6a21      	ldr	r1, [r4, #32]
 80097c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b0      	blx	r6
 80097c8:	2800      	cmp	r0, #0
 80097ca:	dc06      	bgt.n	80097da <__sflush_r+0xfe>
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d8:	e78e      	b.n	80096f8 <__sflush_r+0x1c>
 80097da:	4407      	add	r7, r0
 80097dc:	eba8 0800 	sub.w	r8, r8, r0
 80097e0:	e7e9      	b.n	80097b6 <__sflush_r+0xda>
 80097e2:	bf00      	nop
 80097e4:	20400001 	.word	0x20400001

080097e8 <_fflush_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b1db      	cbz	r3, 800982a <_fflush_r+0x42>
 80097f2:	b118      	cbz	r0, 80097fc <_fflush_r+0x14>
 80097f4:	6983      	ldr	r3, [r0, #24]
 80097f6:	b90b      	cbnz	r3, 80097fc <_fflush_r+0x14>
 80097f8:	f000 f860 	bl	80098bc <__sinit>
 80097fc:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <_fflush_r+0x48>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d109      	bne.n	8009816 <_fflush_r+0x2e>
 8009802:	686c      	ldr	r4, [r5, #4]
 8009804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009808:	b17b      	cbz	r3, 800982a <_fflush_r+0x42>
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009812:	f7ff bf63 	b.w	80096dc <__sflush_r>
 8009816:	4b07      	ldr	r3, [pc, #28]	; (8009834 <_fflush_r+0x4c>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d101      	bne.n	8009820 <_fflush_r+0x38>
 800981c:	68ac      	ldr	r4, [r5, #8]
 800981e:	e7f1      	b.n	8009804 <_fflush_r+0x1c>
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <_fflush_r+0x50>)
 8009822:	429c      	cmp	r4, r3
 8009824:	bf08      	it	eq
 8009826:	68ec      	ldreq	r4, [r5, #12]
 8009828:	e7ec      	b.n	8009804 <_fflush_r+0x1c>
 800982a:	2000      	movs	r0, #0
 800982c:	bd38      	pop	{r3, r4, r5, pc}
 800982e:	bf00      	nop
 8009830:	0800a8b0 	.word	0x0800a8b0
 8009834:	0800a8d0 	.word	0x0800a8d0
 8009838:	0800a890 	.word	0x0800a890

0800983c <std>:
 800983c:	2300      	movs	r3, #0
 800983e:	b510      	push	{r4, lr}
 8009840:	4604      	mov	r4, r0
 8009842:	e9c0 3300 	strd	r3, r3, [r0]
 8009846:	6083      	str	r3, [r0, #8]
 8009848:	8181      	strh	r1, [r0, #12]
 800984a:	6643      	str	r3, [r0, #100]	; 0x64
 800984c:	81c2      	strh	r2, [r0, #14]
 800984e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009852:	6183      	str	r3, [r0, #24]
 8009854:	4619      	mov	r1, r3
 8009856:	2208      	movs	r2, #8
 8009858:	305c      	adds	r0, #92	; 0x5c
 800985a:	f7ff fddf 	bl	800941c <memset>
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <std+0x38>)
 8009860:	6263      	str	r3, [r4, #36]	; 0x24
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x3c>)
 8009864:	62a3      	str	r3, [r4, #40]	; 0x28
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <std+0x40>)
 8009868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <std+0x44>)
 800986c:	6224      	str	r4, [r4, #32]
 800986e:	6323      	str	r3, [r4, #48]	; 0x30
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	0800a1bd 	.word	0x0800a1bd
 8009878:	0800a1df 	.word	0x0800a1df
 800987c:	0800a217 	.word	0x0800a217
 8009880:	0800a23b 	.word	0x0800a23b

08009884 <_cleanup_r>:
 8009884:	4901      	ldr	r1, [pc, #4]	; (800988c <_cleanup_r+0x8>)
 8009886:	f000 b885 	b.w	8009994 <_fwalk_reent>
 800988a:	bf00      	nop
 800988c:	080097e9 	.word	0x080097e9

08009890 <__sfmoreglue>:
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	1e4a      	subs	r2, r1, #1
 8009894:	2568      	movs	r5, #104	; 0x68
 8009896:	4355      	muls	r5, r2
 8009898:	460e      	mov	r6, r1
 800989a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800989e:	f000 f949 	bl	8009b34 <_malloc_r>
 80098a2:	4604      	mov	r4, r0
 80098a4:	b140      	cbz	r0, 80098b8 <__sfmoreglue+0x28>
 80098a6:	2100      	movs	r1, #0
 80098a8:	e9c0 1600 	strd	r1, r6, [r0]
 80098ac:	300c      	adds	r0, #12
 80098ae:	60a0      	str	r0, [r4, #8]
 80098b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098b4:	f7ff fdb2 	bl	800941c <memset>
 80098b8:	4620      	mov	r0, r4
 80098ba:	bd70      	pop	{r4, r5, r6, pc}

080098bc <__sinit>:
 80098bc:	6983      	ldr	r3, [r0, #24]
 80098be:	b510      	push	{r4, lr}
 80098c0:	4604      	mov	r4, r0
 80098c2:	bb33      	cbnz	r3, 8009912 <__sinit+0x56>
 80098c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80098c8:	6503      	str	r3, [r0, #80]	; 0x50
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <__sinit+0x58>)
 80098cc:	4a12      	ldr	r2, [pc, #72]	; (8009918 <__sinit+0x5c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6282      	str	r2, [r0, #40]	; 0x28
 80098d2:	4298      	cmp	r0, r3
 80098d4:	bf04      	itt	eq
 80098d6:	2301      	moveq	r3, #1
 80098d8:	6183      	streq	r3, [r0, #24]
 80098da:	f000 f81f 	bl	800991c <__sfp>
 80098de:	6060      	str	r0, [r4, #4]
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 f81b 	bl	800991c <__sfp>
 80098e6:	60a0      	str	r0, [r4, #8]
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 f817 	bl	800991c <__sfp>
 80098ee:	2200      	movs	r2, #0
 80098f0:	60e0      	str	r0, [r4, #12]
 80098f2:	2104      	movs	r1, #4
 80098f4:	6860      	ldr	r0, [r4, #4]
 80098f6:	f7ff ffa1 	bl	800983c <std>
 80098fa:	2201      	movs	r2, #1
 80098fc:	2109      	movs	r1, #9
 80098fe:	68a0      	ldr	r0, [r4, #8]
 8009900:	f7ff ff9c 	bl	800983c <std>
 8009904:	2202      	movs	r2, #2
 8009906:	2112      	movs	r1, #18
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	f7ff ff97 	bl	800983c <std>
 800990e:	2301      	movs	r3, #1
 8009910:	61a3      	str	r3, [r4, #24]
 8009912:	bd10      	pop	{r4, pc}
 8009914:	0800a88c 	.word	0x0800a88c
 8009918:	08009885 	.word	0x08009885

0800991c <__sfp>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	4b1b      	ldr	r3, [pc, #108]	; (800998c <__sfp+0x70>)
 8009920:	681e      	ldr	r6, [r3, #0]
 8009922:	69b3      	ldr	r3, [r6, #24]
 8009924:	4607      	mov	r7, r0
 8009926:	b913      	cbnz	r3, 800992e <__sfp+0x12>
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff ffc7 	bl	80098bc <__sinit>
 800992e:	3648      	adds	r6, #72	; 0x48
 8009930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009934:	3b01      	subs	r3, #1
 8009936:	d503      	bpl.n	8009940 <__sfp+0x24>
 8009938:	6833      	ldr	r3, [r6, #0]
 800993a:	b133      	cbz	r3, 800994a <__sfp+0x2e>
 800993c:	6836      	ldr	r6, [r6, #0]
 800993e:	e7f7      	b.n	8009930 <__sfp+0x14>
 8009940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009944:	b16d      	cbz	r5, 8009962 <__sfp+0x46>
 8009946:	3468      	adds	r4, #104	; 0x68
 8009948:	e7f4      	b.n	8009934 <__sfp+0x18>
 800994a:	2104      	movs	r1, #4
 800994c:	4638      	mov	r0, r7
 800994e:	f7ff ff9f 	bl	8009890 <__sfmoreglue>
 8009952:	6030      	str	r0, [r6, #0]
 8009954:	2800      	cmp	r0, #0
 8009956:	d1f1      	bne.n	800993c <__sfp+0x20>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	4604      	mov	r4, r0
 800995e:	4620      	mov	r0, r4
 8009960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009962:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <__sfp+0x74>)
 8009964:	6665      	str	r5, [r4, #100]	; 0x64
 8009966:	e9c4 5500 	strd	r5, r5, [r4]
 800996a:	60a5      	str	r5, [r4, #8]
 800996c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009970:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009974:	2208      	movs	r2, #8
 8009976:	4629      	mov	r1, r5
 8009978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800997c:	f7ff fd4e 	bl	800941c <memset>
 8009980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009988:	e7e9      	b.n	800995e <__sfp+0x42>
 800998a:	bf00      	nop
 800998c:	0800a88c 	.word	0x0800a88c
 8009990:	ffff0001 	.word	0xffff0001

08009994 <_fwalk_reent>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4680      	mov	r8, r0
 800999a:	4689      	mov	r9, r1
 800999c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099a0:	2600      	movs	r6, #0
 80099a2:	b914      	cbnz	r4, 80099aa <_fwalk_reent+0x16>
 80099a4:	4630      	mov	r0, r6
 80099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80099ae:	3f01      	subs	r7, #1
 80099b0:	d501      	bpl.n	80099b6 <_fwalk_reent+0x22>
 80099b2:	6824      	ldr	r4, [r4, #0]
 80099b4:	e7f5      	b.n	80099a2 <_fwalk_reent+0xe>
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d907      	bls.n	80099cc <_fwalk_reent+0x38>
 80099bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c0:	3301      	adds	r3, #1
 80099c2:	d003      	beq.n	80099cc <_fwalk_reent+0x38>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4640      	mov	r0, r8
 80099c8:	47c8      	blx	r9
 80099ca:	4306      	orrs	r6, r0
 80099cc:	3568      	adds	r5, #104	; 0x68
 80099ce:	e7ee      	b.n	80099ae <_fwalk_reent+0x1a>

080099d0 <__swhatbuf_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460e      	mov	r6, r1
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2900      	cmp	r1, #0
 80099da:	b096      	sub	sp, #88	; 0x58
 80099dc:	4614      	mov	r4, r2
 80099de:	461d      	mov	r5, r3
 80099e0:	da07      	bge.n	80099f2 <__swhatbuf_r+0x22>
 80099e2:	2300      	movs	r3, #0
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	89b3      	ldrh	r3, [r6, #12]
 80099e8:	061a      	lsls	r2, r3, #24
 80099ea:	d410      	bmi.n	8009a0e <__swhatbuf_r+0x3e>
 80099ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f0:	e00e      	b.n	8009a10 <__swhatbuf_r+0x40>
 80099f2:	466a      	mov	r2, sp
 80099f4:	f000 fc48 	bl	800a288 <_fstat_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	dbf2      	blt.n	80099e2 <__swhatbuf_r+0x12>
 80099fc:	9a01      	ldr	r2, [sp, #4]
 80099fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a06:	425a      	negs	r2, r3
 8009a08:	415a      	adcs	r2, r3
 8009a0a:	602a      	str	r2, [r5, #0]
 8009a0c:	e7ee      	b.n	80099ec <__swhatbuf_r+0x1c>
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	2000      	movs	r0, #0
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	b016      	add	sp, #88	; 0x58
 8009a16:	bd70      	pop	{r4, r5, r6, pc}

08009a18 <__smakebuf_r>:
 8009a18:	898b      	ldrh	r3, [r1, #12]
 8009a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a1c:	079d      	lsls	r5, r3, #30
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460c      	mov	r4, r1
 8009a22:	d507      	bpl.n	8009a34 <__smakebuf_r+0x1c>
 8009a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	6163      	str	r3, [r4, #20]
 8009a30:	b002      	add	sp, #8
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	ab01      	add	r3, sp, #4
 8009a36:	466a      	mov	r2, sp
 8009a38:	f7ff ffca 	bl	80099d0 <__swhatbuf_r>
 8009a3c:	9900      	ldr	r1, [sp, #0]
 8009a3e:	4605      	mov	r5, r0
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 f877 	bl	8009b34 <_malloc_r>
 8009a46:	b948      	cbnz	r0, 8009a5c <__smakebuf_r+0x44>
 8009a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4c:	059a      	lsls	r2, r3, #22
 8009a4e:	d4ef      	bmi.n	8009a30 <__smakebuf_r+0x18>
 8009a50:	f023 0303 	bic.w	r3, r3, #3
 8009a54:	f043 0302 	orr.w	r3, r3, #2
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	e7e3      	b.n	8009a24 <__smakebuf_r+0xc>
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <__smakebuf_r+0x7c>)
 8009a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	6163      	str	r3, [r4, #20]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	6120      	str	r0, [r4, #16]
 8009a72:	b15b      	cbz	r3, 8009a8c <__smakebuf_r+0x74>
 8009a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fc17 	bl	800a2ac <_isatty_r>
 8009a7e:	b128      	cbz	r0, 8009a8c <__smakebuf_r+0x74>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	431d      	orrs	r5, r3
 8009a90:	81a5      	strh	r5, [r4, #12]
 8009a92:	e7cd      	b.n	8009a30 <__smakebuf_r+0x18>
 8009a94:	08009885 	.word	0x08009885

08009a98 <_free_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d045      	beq.n	8009b2c <_free_r+0x94>
 8009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa4:	1f0c      	subs	r4, r1, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfb8      	it	lt
 8009aaa:	18e4      	addlt	r4, r4, r3
 8009aac:	f000 fc44 	bl	800a338 <__malloc_lock>
 8009ab0:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <_free_r+0x98>)
 8009ab2:	6813      	ldr	r3, [r2, #0]
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	b933      	cbnz	r3, 8009ac6 <_free_r+0x2e>
 8009ab8:	6063      	str	r3, [r4, #4]
 8009aba:	6014      	str	r4, [r2, #0]
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac2:	f000 bc3a 	b.w	800a33a <__malloc_unlock>
 8009ac6:	42a3      	cmp	r3, r4
 8009ac8:	d90c      	bls.n	8009ae4 <_free_r+0x4c>
 8009aca:	6821      	ldr	r1, [r4, #0]
 8009acc:	1862      	adds	r2, r4, r1
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	bf04      	itt	eq
 8009ad2:	681a      	ldreq	r2, [r3, #0]
 8009ad4:	685b      	ldreq	r3, [r3, #4]
 8009ad6:	6063      	str	r3, [r4, #4]
 8009ad8:	bf04      	itt	eq
 8009ada:	1852      	addeq	r2, r2, r1
 8009adc:	6022      	streq	r2, [r4, #0]
 8009ade:	6004      	str	r4, [r0, #0]
 8009ae0:	e7ec      	b.n	8009abc <_free_r+0x24>
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	b10a      	cbz	r2, 8009aec <_free_r+0x54>
 8009ae8:	42a2      	cmp	r2, r4
 8009aea:	d9fa      	bls.n	8009ae2 <_free_r+0x4a>
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	1858      	adds	r0, r3, r1
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d10b      	bne.n	8009b0c <_free_r+0x74>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	4401      	add	r1, r0
 8009af8:	1858      	adds	r0, r3, r1
 8009afa:	4282      	cmp	r2, r0
 8009afc:	6019      	str	r1, [r3, #0]
 8009afe:	d1dd      	bne.n	8009abc <_free_r+0x24>
 8009b00:	6810      	ldr	r0, [r2, #0]
 8009b02:	6852      	ldr	r2, [r2, #4]
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	4401      	add	r1, r0
 8009b08:	6019      	str	r1, [r3, #0]
 8009b0a:	e7d7      	b.n	8009abc <_free_r+0x24>
 8009b0c:	d902      	bls.n	8009b14 <_free_r+0x7c>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	e7d3      	b.n	8009abc <_free_r+0x24>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	1821      	adds	r1, r4, r0
 8009b18:	428a      	cmp	r2, r1
 8009b1a:	bf04      	itt	eq
 8009b1c:	6811      	ldreq	r1, [r2, #0]
 8009b1e:	6852      	ldreq	r2, [r2, #4]
 8009b20:	6062      	str	r2, [r4, #4]
 8009b22:	bf04      	itt	eq
 8009b24:	1809      	addeq	r1, r1, r0
 8009b26:	6021      	streq	r1, [r4, #0]
 8009b28:	605c      	str	r4, [r3, #4]
 8009b2a:	e7c7      	b.n	8009abc <_free_r+0x24>
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000bfc 	.word	0x20000bfc

08009b34 <_malloc_r>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	1ccd      	adds	r5, r1, #3
 8009b38:	f025 0503 	bic.w	r5, r5, #3
 8009b3c:	3508      	adds	r5, #8
 8009b3e:	2d0c      	cmp	r5, #12
 8009b40:	bf38      	it	cc
 8009b42:	250c      	movcc	r5, #12
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	4606      	mov	r6, r0
 8009b48:	db01      	blt.n	8009b4e <_malloc_r+0x1a>
 8009b4a:	42a9      	cmp	r1, r5
 8009b4c:	d903      	bls.n	8009b56 <_malloc_r+0x22>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	6033      	str	r3, [r6, #0]
 8009b52:	2000      	movs	r0, #0
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	f000 fbef 	bl	800a338 <__malloc_lock>
 8009b5a:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <_malloc_r+0xac>)
 8009b5c:	6814      	ldr	r4, [r2, #0]
 8009b5e:	4621      	mov	r1, r4
 8009b60:	b991      	cbnz	r1, 8009b88 <_malloc_r+0x54>
 8009b62:	4c20      	ldr	r4, [pc, #128]	; (8009be4 <_malloc_r+0xb0>)
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	b91b      	cbnz	r3, 8009b70 <_malloc_r+0x3c>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 fb17 	bl	800a19c <_sbrk_r>
 8009b6e:	6020      	str	r0, [r4, #0]
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 fb12 	bl	800a19c <_sbrk_r>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d124      	bne.n	8009bc6 <_malloc_r+0x92>
 8009b7c:	230c      	movs	r3, #12
 8009b7e:	6033      	str	r3, [r6, #0]
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 fbda 	bl	800a33a <__malloc_unlock>
 8009b86:	e7e4      	b.n	8009b52 <_malloc_r+0x1e>
 8009b88:	680b      	ldr	r3, [r1, #0]
 8009b8a:	1b5b      	subs	r3, r3, r5
 8009b8c:	d418      	bmi.n	8009bc0 <_malloc_r+0x8c>
 8009b8e:	2b0b      	cmp	r3, #11
 8009b90:	d90f      	bls.n	8009bb2 <_malloc_r+0x7e>
 8009b92:	600b      	str	r3, [r1, #0]
 8009b94:	50cd      	str	r5, [r1, r3]
 8009b96:	18cc      	adds	r4, r1, r3
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 fbce 	bl	800a33a <__malloc_unlock>
 8009b9e:	f104 000b 	add.w	r0, r4, #11
 8009ba2:	1d23      	adds	r3, r4, #4
 8009ba4:	f020 0007 	bic.w	r0, r0, #7
 8009ba8:	1ac3      	subs	r3, r0, r3
 8009baa:	d0d3      	beq.n	8009b54 <_malloc_r+0x20>
 8009bac:	425a      	negs	r2, r3
 8009bae:	50e2      	str	r2, [r4, r3]
 8009bb0:	e7d0      	b.n	8009b54 <_malloc_r+0x20>
 8009bb2:	428c      	cmp	r4, r1
 8009bb4:	684b      	ldr	r3, [r1, #4]
 8009bb6:	bf16      	itet	ne
 8009bb8:	6063      	strne	r3, [r4, #4]
 8009bba:	6013      	streq	r3, [r2, #0]
 8009bbc:	460c      	movne	r4, r1
 8009bbe:	e7eb      	b.n	8009b98 <_malloc_r+0x64>
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	6849      	ldr	r1, [r1, #4]
 8009bc4:	e7cc      	b.n	8009b60 <_malloc_r+0x2c>
 8009bc6:	1cc4      	adds	r4, r0, #3
 8009bc8:	f024 0403 	bic.w	r4, r4, #3
 8009bcc:	42a0      	cmp	r0, r4
 8009bce:	d005      	beq.n	8009bdc <_malloc_r+0xa8>
 8009bd0:	1a21      	subs	r1, r4, r0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f000 fae2 	bl	800a19c <_sbrk_r>
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d0cf      	beq.n	8009b7c <_malloc_r+0x48>
 8009bdc:	6025      	str	r5, [r4, #0]
 8009bde:	e7db      	b.n	8009b98 <_malloc_r+0x64>
 8009be0:	20000bfc 	.word	0x20000bfc
 8009be4:	20000c00 	.word	0x20000c00

08009be8 <__ssputs_r>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	688e      	ldr	r6, [r1, #8]
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4690      	mov	r8, r2
 8009bf6:	4699      	mov	r9, r3
 8009bf8:	d837      	bhi.n	8009c6a <__ssputs_r+0x82>
 8009bfa:	898a      	ldrh	r2, [r1, #12]
 8009bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c00:	d031      	beq.n	8009c66 <__ssputs_r+0x7e>
 8009c02:	6825      	ldr	r5, [r4, #0]
 8009c04:	6909      	ldr	r1, [r1, #16]
 8009c06:	1a6f      	subs	r7, r5, r1
 8009c08:	6965      	ldr	r5, [r4, #20]
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c14:	f109 0301 	add.w	r3, r9, #1
 8009c18:	443b      	add	r3, r7
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	bf38      	it	cc
 8009c1e:	461d      	movcc	r5, r3
 8009c20:	0553      	lsls	r3, r2, #21
 8009c22:	d530      	bpl.n	8009c86 <__ssputs_r+0x9e>
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7ff ff85 	bl	8009b34 <_malloc_r>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b950      	cbnz	r0, 8009c44 <__ssputs_r+0x5c>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	f8ca 3000 	str.w	r3, [sl]
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	463a      	mov	r2, r7
 8009c46:	6921      	ldr	r1, [r4, #16]
 8009c48:	f000 fb52 	bl	800a2f0 <memcpy>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	6126      	str	r6, [r4, #16]
 8009c5a:	6165      	str	r5, [r4, #20]
 8009c5c:	443e      	add	r6, r7
 8009c5e:	1bed      	subs	r5, r5, r7
 8009c60:	6026      	str	r6, [r4, #0]
 8009c62:	60a5      	str	r5, [r4, #8]
 8009c64:	464e      	mov	r6, r9
 8009c66:	454e      	cmp	r6, r9
 8009c68:	d900      	bls.n	8009c6c <__ssputs_r+0x84>
 8009c6a:	464e      	mov	r6, r9
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	4641      	mov	r1, r8
 8009c70:	6820      	ldr	r0, [r4, #0]
 8009c72:	f000 fb48 	bl	800a306 <memmove>
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	1b9b      	subs	r3, r3, r6
 8009c7a:	60a3      	str	r3, [r4, #8]
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	441e      	add	r6, r3
 8009c80:	6026      	str	r6, [r4, #0]
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7dc      	b.n	8009c40 <__ssputs_r+0x58>
 8009c86:	462a      	mov	r2, r5
 8009c88:	f000 fb58 	bl	800a33c <_realloc_r>
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1e2      	bne.n	8009c58 <__ssputs_r+0x70>
 8009c92:	6921      	ldr	r1, [r4, #16]
 8009c94:	4650      	mov	r0, sl
 8009c96:	f7ff feff 	bl	8009a98 <_free_r>
 8009c9a:	e7c8      	b.n	8009c2e <__ssputs_r+0x46>

08009c9c <_svfiprintf_r>:
 8009c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	461d      	mov	r5, r3
 8009ca2:	898b      	ldrh	r3, [r1, #12]
 8009ca4:	061f      	lsls	r7, r3, #24
 8009ca6:	b09d      	sub	sp, #116	; 0x74
 8009ca8:	4680      	mov	r8, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4616      	mov	r6, r2
 8009cae:	d50f      	bpl.n	8009cd0 <_svfiprintf_r+0x34>
 8009cb0:	690b      	ldr	r3, [r1, #16]
 8009cb2:	b96b      	cbnz	r3, 8009cd0 <_svfiprintf_r+0x34>
 8009cb4:	2140      	movs	r1, #64	; 0x40
 8009cb6:	f7ff ff3d 	bl	8009b34 <_malloc_r>
 8009cba:	6020      	str	r0, [r4, #0]
 8009cbc:	6120      	str	r0, [r4, #16]
 8009cbe:	b928      	cbnz	r0, 8009ccc <_svfiprintf_r+0x30>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	f8c8 3000 	str.w	r3, [r8]
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cca:	e0c8      	b.n	8009e5e <_svfiprintf_r+0x1c2>
 8009ccc:	2340      	movs	r3, #64	; 0x40
 8009cce:	6163      	str	r3, [r4, #20]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd4:	2320      	movs	r3, #32
 8009cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cda:	2330      	movs	r3, #48	; 0x30
 8009cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce0:	9503      	str	r5, [sp, #12]
 8009ce2:	f04f 0b01 	mov.w	fp, #1
 8009ce6:	4637      	mov	r7, r6
 8009ce8:	463d      	mov	r5, r7
 8009cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cee:	b10b      	cbz	r3, 8009cf4 <_svfiprintf_r+0x58>
 8009cf0:	2b25      	cmp	r3, #37	; 0x25
 8009cf2:	d13e      	bne.n	8009d72 <_svfiprintf_r+0xd6>
 8009cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009cf8:	d00b      	beq.n	8009d12 <_svfiprintf_r+0x76>
 8009cfa:	4653      	mov	r3, sl
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4640      	mov	r0, r8
 8009d02:	f7ff ff71 	bl	8009be8 <__ssputs_r>
 8009d06:	3001      	adds	r0, #1
 8009d08:	f000 80a4 	beq.w	8009e54 <_svfiprintf_r+0x1b8>
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	4453      	add	r3, sl
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	783b      	ldrb	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 809d 	beq.w	8009e54 <_svfiprintf_r+0x1b8>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2e:	462f      	mov	r7, r5
 8009d30:	2205      	movs	r2, #5
 8009d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d36:	4850      	ldr	r0, [pc, #320]	; (8009e78 <_svfiprintf_r+0x1dc>)
 8009d38:	f7f6 fa72 	bl	8000220 <memchr>
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	b9d0      	cbnz	r0, 8009d76 <_svfiprintf_r+0xda>
 8009d40:	06d9      	lsls	r1, r3, #27
 8009d42:	bf44      	itt	mi
 8009d44:	2220      	movmi	r2, #32
 8009d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d4a:	071a      	lsls	r2, r3, #28
 8009d4c:	bf44      	itt	mi
 8009d4e:	222b      	movmi	r2, #43	; 0x2b
 8009d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d54:	782a      	ldrb	r2, [r5, #0]
 8009d56:	2a2a      	cmp	r2, #42	; 0x2a
 8009d58:	d015      	beq.n	8009d86 <_svfiprintf_r+0xea>
 8009d5a:	9a07      	ldr	r2, [sp, #28]
 8009d5c:	462f      	mov	r7, r5
 8009d5e:	2000      	movs	r0, #0
 8009d60:	250a      	movs	r5, #10
 8009d62:	4639      	mov	r1, r7
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	; 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94d      	bls.n	8009e0a <_svfiprintf_r+0x16e>
 8009d6e:	b1b8      	cbz	r0, 8009da0 <_svfiprintf_r+0x104>
 8009d70:	e00f      	b.n	8009d92 <_svfiprintf_r+0xf6>
 8009d72:	462f      	mov	r7, r5
 8009d74:	e7b8      	b.n	8009ce8 <_svfiprintf_r+0x4c>
 8009d76:	4a40      	ldr	r2, [pc, #256]	; (8009e78 <_svfiprintf_r+0x1dc>)
 8009d78:	1a80      	subs	r0, r0, r2
 8009d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8009d7e:	4318      	orrs	r0, r3
 8009d80:	9004      	str	r0, [sp, #16]
 8009d82:	463d      	mov	r5, r7
 8009d84:	e7d3      	b.n	8009d2e <_svfiprintf_r+0x92>
 8009d86:	9a03      	ldr	r2, [sp, #12]
 8009d88:	1d11      	adds	r1, r2, #4
 8009d8a:	6812      	ldr	r2, [r2, #0]
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	db01      	blt.n	8009d96 <_svfiprintf_r+0xfa>
 8009d92:	9207      	str	r2, [sp, #28]
 8009d94:	e004      	b.n	8009da0 <_svfiprintf_r+0x104>
 8009d96:	4252      	negs	r2, r2
 8009d98:	f043 0302 	orr.w	r3, r3, #2
 8009d9c:	9207      	str	r2, [sp, #28]
 8009d9e:	9304      	str	r3, [sp, #16]
 8009da0:	783b      	ldrb	r3, [r7, #0]
 8009da2:	2b2e      	cmp	r3, #46	; 0x2e
 8009da4:	d10c      	bne.n	8009dc0 <_svfiprintf_r+0x124>
 8009da6:	787b      	ldrb	r3, [r7, #1]
 8009da8:	2b2a      	cmp	r3, #42	; 0x2a
 8009daa:	d133      	bne.n	8009e14 <_svfiprintf_r+0x178>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfb8      	it	lt
 8009db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009dbc:	3702      	adds	r7, #2
 8009dbe:	9305      	str	r3, [sp, #20]
 8009dc0:	4d2e      	ldr	r5, [pc, #184]	; (8009e7c <_svfiprintf_r+0x1e0>)
 8009dc2:	7839      	ldrb	r1, [r7, #0]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fa2a 	bl	8000220 <memchr>
 8009dcc:	b138      	cbz	r0, 8009dde <_svfiprintf_r+0x142>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	1b40      	subs	r0, r0, r5
 8009dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	4303      	orrs	r3, r0
 8009dda:	3701      	adds	r7, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	7839      	ldrb	r1, [r7, #0]
 8009de0:	4827      	ldr	r0, [pc, #156]	; (8009e80 <_svfiprintf_r+0x1e4>)
 8009de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009de6:	2206      	movs	r2, #6
 8009de8:	1c7e      	adds	r6, r7, #1
 8009dea:	f7f6 fa19 	bl	8000220 <memchr>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d038      	beq.n	8009e64 <_svfiprintf_r+0x1c8>
 8009df2:	4b24      	ldr	r3, [pc, #144]	; (8009e84 <_svfiprintf_r+0x1e8>)
 8009df4:	bb13      	cbnz	r3, 8009e3c <_svfiprintf_r+0x1a0>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	3307      	adds	r3, #7
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	3308      	adds	r3, #8
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e04:	444b      	add	r3, r9
 8009e06:	9309      	str	r3, [sp, #36]	; 0x24
 8009e08:	e76d      	b.n	8009ce6 <_svfiprintf_r+0x4a>
 8009e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8009e0e:	2001      	movs	r0, #1
 8009e10:	460f      	mov	r7, r1
 8009e12:	e7a6      	b.n	8009d62 <_svfiprintf_r+0xc6>
 8009e14:	2300      	movs	r3, #0
 8009e16:	3701      	adds	r7, #1
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	250a      	movs	r5, #10
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e24:	3a30      	subs	r2, #48	; 0x30
 8009e26:	2a09      	cmp	r2, #9
 8009e28:	d903      	bls.n	8009e32 <_svfiprintf_r+0x196>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0c8      	beq.n	8009dc0 <_svfiprintf_r+0x124>
 8009e2e:	9105      	str	r1, [sp, #20]
 8009e30:	e7c6      	b.n	8009dc0 <_svfiprintf_r+0x124>
 8009e32:	fb05 2101 	mla	r1, r5, r1, r2
 8009e36:	2301      	movs	r3, #1
 8009e38:	4607      	mov	r7, r0
 8009e3a:	e7f0      	b.n	8009e1e <_svfiprintf_r+0x182>
 8009e3c:	ab03      	add	r3, sp, #12
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	4622      	mov	r2, r4
 8009e42:	4b11      	ldr	r3, [pc, #68]	; (8009e88 <_svfiprintf_r+0x1ec>)
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	4640      	mov	r0, r8
 8009e48:	f3af 8000 	nop.w
 8009e4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009e50:	4681      	mov	r9, r0
 8009e52:	d1d6      	bne.n	8009e02 <_svfiprintf_r+0x166>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	065b      	lsls	r3, r3, #25
 8009e58:	f53f af35 	bmi.w	8009cc6 <_svfiprintf_r+0x2a>
 8009e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e5e:	b01d      	add	sp, #116	; 0x74
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	ab03      	add	r3, sp, #12
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <_svfiprintf_r+0x1ec>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f000 f882 	bl	8009f78 <_printf_i>
 8009e74:	e7ea      	b.n	8009e4c <_svfiprintf_r+0x1b0>
 8009e76:	bf00      	nop
 8009e78:	0800a8f0 	.word	0x0800a8f0
 8009e7c:	0800a8f6 	.word	0x0800a8f6
 8009e80:	0800a8fa 	.word	0x0800a8fa
 8009e84:	00000000 	.word	0x00000000
 8009e88:	08009be9 	.word	0x08009be9

08009e8c <_printf_common>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	4691      	mov	r9, r2
 8009e92:	461f      	mov	r7, r3
 8009e94:	688a      	ldr	r2, [r1, #8]
 8009e96:	690b      	ldr	r3, [r1, #16]
 8009e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfb8      	it	lt
 8009ea0:	4613      	movlt	r3, r2
 8009ea2:	f8c9 3000 	str.w	r3, [r9]
 8009ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eaa:	4606      	mov	r6, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	b112      	cbz	r2, 8009eb6 <_printf_common+0x2a>
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f8c9 3000 	str.w	r3, [r9]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	0699      	lsls	r1, r3, #26
 8009eba:	bf42      	ittt	mi
 8009ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ec0:	3302      	addmi	r3, #2
 8009ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	f015 0506 	ands.w	r5, r5, #6
 8009ecc:	d107      	bne.n	8009ede <_printf_common+0x52>
 8009ece:	f104 0a19 	add.w	sl, r4, #25
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ed8:	1a9b      	subs	r3, r3, r2
 8009eda:	42ab      	cmp	r3, r5
 8009edc:	dc28      	bgt.n	8009f30 <_printf_common+0xa4>
 8009ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	3300      	adds	r3, #0
 8009ee6:	bf18      	it	ne
 8009ee8:	2301      	movne	r3, #1
 8009eea:	0692      	lsls	r2, r2, #26
 8009eec:	d42d      	bmi.n	8009f4a <_printf_common+0xbe>
 8009eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	47c0      	blx	r8
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d020      	beq.n	8009f3e <_printf_common+0xb2>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	68e5      	ldr	r5, [r4, #12]
 8009f00:	f8d9 2000 	ldr.w	r2, [r9]
 8009f04:	f003 0306 	and.w	r3, r3, #6
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	bf08      	it	eq
 8009f0c:	1aad      	subeq	r5, r5, r2
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	6922      	ldr	r2, [r4, #16]
 8009f12:	bf0c      	ite	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	2500      	movne	r5, #0
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bfc4      	itt	gt
 8009f1e:	1a9b      	subgt	r3, r3, r2
 8009f20:	18ed      	addgt	r5, r5, r3
 8009f22:	f04f 0900 	mov.w	r9, #0
 8009f26:	341a      	adds	r4, #26
 8009f28:	454d      	cmp	r5, r9
 8009f2a:	d11a      	bne.n	8009f62 <_printf_common+0xd6>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e008      	b.n	8009f42 <_printf_common+0xb6>
 8009f30:	2301      	movs	r3, #1
 8009f32:	4652      	mov	r2, sl
 8009f34:	4639      	mov	r1, r7
 8009f36:	4630      	mov	r0, r6
 8009f38:	47c0      	blx	r8
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d103      	bne.n	8009f46 <_printf_common+0xba>
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f46:	3501      	adds	r5, #1
 8009f48:	e7c3      	b.n	8009ed2 <_printf_common+0x46>
 8009f4a:	18e1      	adds	r1, r4, r3
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	2030      	movs	r0, #48	; 0x30
 8009f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f54:	4422      	add	r2, r4
 8009f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f5e:	3302      	adds	r3, #2
 8009f60:	e7c5      	b.n	8009eee <_printf_common+0x62>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4622      	mov	r2, r4
 8009f66:	4639      	mov	r1, r7
 8009f68:	4630      	mov	r0, r6
 8009f6a:	47c0      	blx	r8
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d0e6      	beq.n	8009f3e <_printf_common+0xb2>
 8009f70:	f109 0901 	add.w	r9, r9, #1
 8009f74:	e7d8      	b.n	8009f28 <_printf_common+0x9c>
	...

08009f78 <_printf_i>:
 8009f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f80:	460c      	mov	r4, r1
 8009f82:	7e09      	ldrb	r1, [r1, #24]
 8009f84:	b085      	sub	sp, #20
 8009f86:	296e      	cmp	r1, #110	; 0x6e
 8009f88:	4617      	mov	r7, r2
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	4698      	mov	r8, r3
 8009f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f90:	f000 80b3 	beq.w	800a0fa <_printf_i+0x182>
 8009f94:	d822      	bhi.n	8009fdc <_printf_i+0x64>
 8009f96:	2963      	cmp	r1, #99	; 0x63
 8009f98:	d036      	beq.n	800a008 <_printf_i+0x90>
 8009f9a:	d80a      	bhi.n	8009fb2 <_printf_i+0x3a>
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	f000 80b9 	beq.w	800a114 <_printf_i+0x19c>
 8009fa2:	2958      	cmp	r1, #88	; 0x58
 8009fa4:	f000 8083 	beq.w	800a0ae <_printf_i+0x136>
 8009fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009fb0:	e032      	b.n	800a018 <_printf_i+0xa0>
 8009fb2:	2964      	cmp	r1, #100	; 0x64
 8009fb4:	d001      	beq.n	8009fba <_printf_i+0x42>
 8009fb6:	2969      	cmp	r1, #105	; 0x69
 8009fb8:	d1f6      	bne.n	8009fa8 <_printf_i+0x30>
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	6813      	ldr	r3, [r2, #0]
 8009fbe:	0605      	lsls	r5, r0, #24
 8009fc0:	f103 0104 	add.w	r1, r3, #4
 8009fc4:	d52a      	bpl.n	800a01c <_printf_i+0xa4>
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6011      	str	r1, [r2, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	da03      	bge.n	8009fd6 <_printf_i+0x5e>
 8009fce:	222d      	movs	r2, #45	; 0x2d
 8009fd0:	425b      	negs	r3, r3
 8009fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fd6:	486f      	ldr	r0, [pc, #444]	; (800a194 <_printf_i+0x21c>)
 8009fd8:	220a      	movs	r2, #10
 8009fda:	e039      	b.n	800a050 <_printf_i+0xd8>
 8009fdc:	2973      	cmp	r1, #115	; 0x73
 8009fde:	f000 809d 	beq.w	800a11c <_printf_i+0x1a4>
 8009fe2:	d808      	bhi.n	8009ff6 <_printf_i+0x7e>
 8009fe4:	296f      	cmp	r1, #111	; 0x6f
 8009fe6:	d020      	beq.n	800a02a <_printf_i+0xb2>
 8009fe8:	2970      	cmp	r1, #112	; 0x70
 8009fea:	d1dd      	bne.n	8009fa8 <_printf_i+0x30>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	e003      	b.n	8009ffe <_printf_i+0x86>
 8009ff6:	2975      	cmp	r1, #117	; 0x75
 8009ff8:	d017      	beq.n	800a02a <_printf_i+0xb2>
 8009ffa:	2978      	cmp	r1, #120	; 0x78
 8009ffc:	d1d4      	bne.n	8009fa8 <_printf_i+0x30>
 8009ffe:	2378      	movs	r3, #120	; 0x78
 800a000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a004:	4864      	ldr	r0, [pc, #400]	; (800a198 <_printf_i+0x220>)
 800a006:	e055      	b.n	800a0b4 <_printf_i+0x13c>
 800a008:	6813      	ldr	r3, [r2, #0]
 800a00a:	1d19      	adds	r1, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6011      	str	r1, [r2, #0]
 800a010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a018:	2301      	movs	r3, #1
 800a01a:	e08c      	b.n	800a136 <_printf_i+0x1be>
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6011      	str	r1, [r2, #0]
 800a020:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a024:	bf18      	it	ne
 800a026:	b21b      	sxthne	r3, r3
 800a028:	e7cf      	b.n	8009fca <_printf_i+0x52>
 800a02a:	6813      	ldr	r3, [r2, #0]
 800a02c:	6825      	ldr	r5, [r4, #0]
 800a02e:	1d18      	adds	r0, r3, #4
 800a030:	6010      	str	r0, [r2, #0]
 800a032:	0628      	lsls	r0, r5, #24
 800a034:	d501      	bpl.n	800a03a <_printf_i+0xc2>
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	e002      	b.n	800a040 <_printf_i+0xc8>
 800a03a:	0668      	lsls	r0, r5, #25
 800a03c:	d5fb      	bpl.n	800a036 <_printf_i+0xbe>
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	4854      	ldr	r0, [pc, #336]	; (800a194 <_printf_i+0x21c>)
 800a042:	296f      	cmp	r1, #111	; 0x6f
 800a044:	bf14      	ite	ne
 800a046:	220a      	movne	r2, #10
 800a048:	2208      	moveq	r2, #8
 800a04a:	2100      	movs	r1, #0
 800a04c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a050:	6865      	ldr	r5, [r4, #4]
 800a052:	60a5      	str	r5, [r4, #8]
 800a054:	2d00      	cmp	r5, #0
 800a056:	f2c0 8095 	blt.w	800a184 <_printf_i+0x20c>
 800a05a:	6821      	ldr	r1, [r4, #0]
 800a05c:	f021 0104 	bic.w	r1, r1, #4
 800a060:	6021      	str	r1, [r4, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d13d      	bne.n	800a0e2 <_printf_i+0x16a>
 800a066:	2d00      	cmp	r5, #0
 800a068:	f040 808e 	bne.w	800a188 <_printf_i+0x210>
 800a06c:	4665      	mov	r5, ip
 800a06e:	2a08      	cmp	r2, #8
 800a070:	d10b      	bne.n	800a08a <_printf_i+0x112>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	07db      	lsls	r3, r3, #31
 800a076:	d508      	bpl.n	800a08a <_printf_i+0x112>
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	bfde      	ittt	le
 800a080:	2330      	movle	r3, #48	; 0x30
 800a082:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a086:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a08a:	ebac 0305 	sub.w	r3, ip, r5
 800a08e:	6123      	str	r3, [r4, #16]
 800a090:	f8cd 8000 	str.w	r8, [sp]
 800a094:	463b      	mov	r3, r7
 800a096:	aa03      	add	r2, sp, #12
 800a098:	4621      	mov	r1, r4
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff fef6 	bl	8009e8c <_printf_common>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d14d      	bne.n	800a140 <_printf_i+0x1c8>
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0a8:	b005      	add	sp, #20
 800a0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ae:	4839      	ldr	r0, [pc, #228]	; (800a194 <_printf_i+0x21c>)
 800a0b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a0b4:	6813      	ldr	r3, [r2, #0]
 800a0b6:	6821      	ldr	r1, [r4, #0]
 800a0b8:	1d1d      	adds	r5, r3, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6015      	str	r5, [r2, #0]
 800a0be:	060a      	lsls	r2, r1, #24
 800a0c0:	d50b      	bpl.n	800a0da <_printf_i+0x162>
 800a0c2:	07ca      	lsls	r2, r1, #31
 800a0c4:	bf44      	itt	mi
 800a0c6:	f041 0120 	orrmi.w	r1, r1, #32
 800a0ca:	6021      	strmi	r1, [r4, #0]
 800a0cc:	b91b      	cbnz	r3, 800a0d6 <_printf_i+0x15e>
 800a0ce:	6822      	ldr	r2, [r4, #0]
 800a0d0:	f022 0220 	bic.w	r2, r2, #32
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	e7b7      	b.n	800a04a <_printf_i+0xd2>
 800a0da:	064d      	lsls	r5, r1, #25
 800a0dc:	bf48      	it	mi
 800a0de:	b29b      	uxthmi	r3, r3
 800a0e0:	e7ef      	b.n	800a0c2 <_printf_i+0x14a>
 800a0e2:	4665      	mov	r5, ip
 800a0e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0e8:	fb02 3311 	mls	r3, r2, r1, r3
 800a0ec:	5cc3      	ldrb	r3, [r0, r3]
 800a0ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d1f5      	bne.n	800a0e4 <_printf_i+0x16c>
 800a0f8:	e7b9      	b.n	800a06e <_printf_i+0xf6>
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	6825      	ldr	r5, [r4, #0]
 800a0fe:	6961      	ldr	r1, [r4, #20]
 800a100:	1d18      	adds	r0, r3, #4
 800a102:	6010      	str	r0, [r2, #0]
 800a104:	0628      	lsls	r0, r5, #24
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	d501      	bpl.n	800a10e <_printf_i+0x196>
 800a10a:	6019      	str	r1, [r3, #0]
 800a10c:	e002      	b.n	800a114 <_printf_i+0x19c>
 800a10e:	066a      	lsls	r2, r5, #25
 800a110:	d5fb      	bpl.n	800a10a <_printf_i+0x192>
 800a112:	8019      	strh	r1, [r3, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	4665      	mov	r5, ip
 800a11a:	e7b9      	b.n	800a090 <_printf_i+0x118>
 800a11c:	6813      	ldr	r3, [r2, #0]
 800a11e:	1d19      	adds	r1, r3, #4
 800a120:	6011      	str	r1, [r2, #0]
 800a122:	681d      	ldr	r5, [r3, #0]
 800a124:	6862      	ldr	r2, [r4, #4]
 800a126:	2100      	movs	r1, #0
 800a128:	4628      	mov	r0, r5
 800a12a:	f7f6 f879 	bl	8000220 <memchr>
 800a12e:	b108      	cbz	r0, 800a134 <_printf_i+0x1bc>
 800a130:	1b40      	subs	r0, r0, r5
 800a132:	6060      	str	r0, [r4, #4]
 800a134:	6863      	ldr	r3, [r4, #4]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	2300      	movs	r3, #0
 800a13a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13e:	e7a7      	b.n	800a090 <_printf_i+0x118>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	462a      	mov	r2, r5
 800a144:	4639      	mov	r1, r7
 800a146:	4630      	mov	r0, r6
 800a148:	47c0      	blx	r8
 800a14a:	3001      	adds	r0, #1
 800a14c:	d0aa      	beq.n	800a0a4 <_printf_i+0x12c>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	079b      	lsls	r3, r3, #30
 800a152:	d413      	bmi.n	800a17c <_printf_i+0x204>
 800a154:	68e0      	ldr	r0, [r4, #12]
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	4298      	cmp	r0, r3
 800a15a:	bfb8      	it	lt
 800a15c:	4618      	movlt	r0, r3
 800a15e:	e7a3      	b.n	800a0a8 <_printf_i+0x130>
 800a160:	2301      	movs	r3, #1
 800a162:	464a      	mov	r2, r9
 800a164:	4639      	mov	r1, r7
 800a166:	4630      	mov	r0, r6
 800a168:	47c0      	blx	r8
 800a16a:	3001      	adds	r0, #1
 800a16c:	d09a      	beq.n	800a0a4 <_printf_i+0x12c>
 800a16e:	3501      	adds	r5, #1
 800a170:	68e3      	ldr	r3, [r4, #12]
 800a172:	9a03      	ldr	r2, [sp, #12]
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	42ab      	cmp	r3, r5
 800a178:	dcf2      	bgt.n	800a160 <_printf_i+0x1e8>
 800a17a:	e7eb      	b.n	800a154 <_printf_i+0x1dc>
 800a17c:	2500      	movs	r5, #0
 800a17e:	f104 0919 	add.w	r9, r4, #25
 800a182:	e7f5      	b.n	800a170 <_printf_i+0x1f8>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1ac      	bne.n	800a0e2 <_printf_i+0x16a>
 800a188:	7803      	ldrb	r3, [r0, #0]
 800a18a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a18e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a192:	e76c      	b.n	800a06e <_printf_i+0xf6>
 800a194:	0800a901 	.word	0x0800a901
 800a198:	0800a912 	.word	0x0800a912

0800a19c <_sbrk_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4c06      	ldr	r4, [pc, #24]	; (800a1b8 <_sbrk_r+0x1c>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	f7f8 faa6 	bl	80026f8 <_sbrk>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_sbrk_r+0x1a>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_sbrk_r+0x1a>
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	20001064 	.word	0x20001064

0800a1bc <__sread>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	460c      	mov	r4, r1
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	f000 f8e0 	bl	800a388 <_read_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	bfab      	itete	ge
 800a1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d0:	181b      	addge	r3, r3, r0
 800a1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1d6:	bfac      	ite	ge
 800a1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1da:	81a3      	strhlt	r3, [r4, #12]
 800a1dc:	bd10      	pop	{r4, pc}

0800a1de <__swrite>:
 800a1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e2:	461f      	mov	r7, r3
 800a1e4:	898b      	ldrh	r3, [r1, #12]
 800a1e6:	05db      	lsls	r3, r3, #23
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	d505      	bpl.n	800a1fc <__swrite+0x1e>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	f000 f868 	bl	800a2cc <_lseek_r>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	4632      	mov	r2, r6
 800a20a:	463b      	mov	r3, r7
 800a20c:	4628      	mov	r0, r5
 800a20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a212:	f000 b817 	b.w	800a244 <_write_r>

0800a216 <__sseek>:
 800a216:	b510      	push	{r4, lr}
 800a218:	460c      	mov	r4, r1
 800a21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21e:	f000 f855 	bl	800a2cc <_lseek_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	bf15      	itete	ne
 800a228:	6560      	strne	r0, [r4, #84]	; 0x54
 800a22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a232:	81a3      	strheq	r3, [r4, #12]
 800a234:	bf18      	it	ne
 800a236:	81a3      	strhne	r3, [r4, #12]
 800a238:	bd10      	pop	{r4, pc}

0800a23a <__sclose>:
 800a23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23e:	f000 b813 	b.w	800a268 <_close_r>
	...

0800a244 <_write_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4c07      	ldr	r4, [pc, #28]	; (800a264 <_write_r+0x20>)
 800a248:	4605      	mov	r5, r0
 800a24a:	4608      	mov	r0, r1
 800a24c:	4611      	mov	r1, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	6022      	str	r2, [r4, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	f7f7 fe9b 	bl	8001f8e <_write>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_write_r+0x1e>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_write_r+0x1e>
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20001064 	.word	0x20001064

0800a268 <_close_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4c06      	ldr	r4, [pc, #24]	; (800a284 <_close_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4605      	mov	r5, r0
 800a270:	4608      	mov	r0, r1
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	f7f8 fa0b 	bl	800268e <_close>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_close_r+0x1a>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_close_r+0x1a>
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	20001064 	.word	0x20001064

0800a288 <_fstat_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4c07      	ldr	r4, [pc, #28]	; (800a2a8 <_fstat_r+0x20>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4605      	mov	r5, r0
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	f7f8 fa06 	bl	80026a6 <_fstat>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d102      	bne.n	800a2a4 <_fstat_r+0x1c>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	b103      	cbz	r3, 800a2a4 <_fstat_r+0x1c>
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20001064 	.word	0x20001064

0800a2ac <_isatty_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4c06      	ldr	r4, [pc, #24]	; (800a2c8 <_isatty_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	f7f8 fa05 	bl	80026c6 <_isatty>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_isatty_r+0x1a>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_isatty_r+0x1a>
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20001064 	.word	0x20001064

0800a2cc <_lseek_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4c07      	ldr	r4, [pc, #28]	; (800a2ec <_lseek_r+0x20>)
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7f8 f9fe 	bl	80026dc <_lseek>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_lseek_r+0x1e>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_lseek_r+0x1e>
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20001064 	.word	0x20001064

0800a2f0 <memcpy>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	1e43      	subs	r3, r0, #1
 800a2f4:	440a      	add	r2, r1
 800a2f6:	4291      	cmp	r1, r2
 800a2f8:	d100      	bne.n	800a2fc <memcpy+0xc>
 800a2fa:	bd10      	pop	{r4, pc}
 800a2fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a300:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a304:	e7f7      	b.n	800a2f6 <memcpy+0x6>

0800a306 <memmove>:
 800a306:	4288      	cmp	r0, r1
 800a308:	b510      	push	{r4, lr}
 800a30a:	eb01 0302 	add.w	r3, r1, r2
 800a30e:	d807      	bhi.n	800a320 <memmove+0x1a>
 800a310:	1e42      	subs	r2, r0, #1
 800a312:	4299      	cmp	r1, r3
 800a314:	d00a      	beq.n	800a32c <memmove+0x26>
 800a316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a31e:	e7f8      	b.n	800a312 <memmove+0xc>
 800a320:	4283      	cmp	r3, r0
 800a322:	d9f5      	bls.n	800a310 <memmove+0xa>
 800a324:	1881      	adds	r1, r0, r2
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	42d3      	cmn	r3, r2
 800a32a:	d100      	bne.n	800a32e <memmove+0x28>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a332:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a336:	e7f7      	b.n	800a328 <memmove+0x22>

0800a338 <__malloc_lock>:
 800a338:	4770      	bx	lr

0800a33a <__malloc_unlock>:
 800a33a:	4770      	bx	lr

0800a33c <_realloc_r>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	4607      	mov	r7, r0
 800a340:	4614      	mov	r4, r2
 800a342:	460e      	mov	r6, r1
 800a344:	b921      	cbnz	r1, 800a350 <_realloc_r+0x14>
 800a346:	4611      	mov	r1, r2
 800a348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a34c:	f7ff bbf2 	b.w	8009b34 <_malloc_r>
 800a350:	b922      	cbnz	r2, 800a35c <_realloc_r+0x20>
 800a352:	f7ff fba1 	bl	8009a98 <_free_r>
 800a356:	4625      	mov	r5, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	f000 f826 	bl	800a3ac <_malloc_usable_size_r>
 800a360:	42a0      	cmp	r0, r4
 800a362:	d20f      	bcs.n	800a384 <_realloc_r+0x48>
 800a364:	4621      	mov	r1, r4
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff fbe4 	bl	8009b34 <_malloc_r>
 800a36c:	4605      	mov	r5, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d0f2      	beq.n	800a358 <_realloc_r+0x1c>
 800a372:	4631      	mov	r1, r6
 800a374:	4622      	mov	r2, r4
 800a376:	f7ff ffbb 	bl	800a2f0 <memcpy>
 800a37a:	4631      	mov	r1, r6
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fb8b 	bl	8009a98 <_free_r>
 800a382:	e7e9      	b.n	800a358 <_realloc_r+0x1c>
 800a384:	4635      	mov	r5, r6
 800a386:	e7e7      	b.n	800a358 <_realloc_r+0x1c>

0800a388 <_read_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4c07      	ldr	r4, [pc, #28]	; (800a3a8 <_read_r+0x20>)
 800a38c:	4605      	mov	r5, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	6022      	str	r2, [r4, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f8 f95c 	bl	8002654 <_read>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_read_r+0x1e>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_read_r+0x1e>
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20001064 	.word	0x20001064

0800a3ac <_malloc_usable_size_r>:
 800a3ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b0:	1f18      	subs	r0, r3, #4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfbc      	itt	lt
 800a3b6:	580b      	ldrlt	r3, [r1, r0]
 800a3b8:	18c0      	addlt	r0, r0, r3
 800a3ba:	4770      	bx	lr

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
