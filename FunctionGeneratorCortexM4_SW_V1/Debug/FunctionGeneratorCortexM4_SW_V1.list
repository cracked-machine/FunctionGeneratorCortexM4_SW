
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001249c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001458  08012680  08012680  00022680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ad8  08013ad8  00031ab8  2**0
                  CONTENTS
  4 .ARM          00000000  08013ad8  08013ad8  00031ab8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013ad8  08013ad8  00031ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ad8  08013ad8  00023ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013adc  08013adc  00023adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ab8  20000000  08013ae0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20001ab8  08015598  00031ab8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002554  08015598  00032554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043a64  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007597  00000000  00000000  0007554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002178  00000000  00000000  0007cae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d90  00000000  00000000  0007ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034d26  00000000  00000000  000809f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002cf40  00000000  00000000  000b5716  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126186  00000000  00000000  000e2656  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002087dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094c4  00000000  00000000  00208858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ab8 	.word	0x20001ab8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012664 	.word	0x08012664

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001abc 	.word	0x20001abc
 800021c:	08012664 	.word	0x08012664

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00c fe9c 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012680 	.word	0x08012680

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00c fed1 	bl	800dace <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fb27 	bl	800e380 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d f909 	bl	800df4c <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00c fe78 	bl	800da4c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fc92 	bl	8008688 <HAL_Delay>

	  DM_RefreshScreen();
 8000d64:	f000 fa94 	bl	8001290 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fa0b 	bl	800f184 <puts>
#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0801268c 	.word	0x0801268c
 8000d78:	0801269c 	.word	0x0801269c

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fbef 	bl	8004564 <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00e f9f9 	bl	800f184 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fbe7 	bl	8004564 <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 faf4 	bl	8003394 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 faf0 	bl	8003394 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 faec 	bl	8003394 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 f9d1 	bl	8004164 <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00e f9db 	bl	800f184 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 f9c9 	bl	8004164 <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f802 	bl	8002dec <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f001 fffe 	bl	8002dec <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f001 fffa 	bl	8002dec <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fab5 	bl	8004368 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00e f9bd 	bl	800f184 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 faad 	bl	8004368 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fa2a 	bl	8003278 <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fa26 	bl	8003278 <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fa22 	bl	8003278 <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 f989 	bl	800414c <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00e f99f 	bl	800f184 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 f981 	bl	800414c <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fa69 	bl	8001340 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fa65 	bl	8001340 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fa61 	bl	8001340 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fa5d 	bl	8001340 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fb3e 	bl	8003508 <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00e f976 	bl	800f184 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00c fdcb 	bl	800da4c <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00c fdba 	bl	800da4c <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	080126ac 	.word	0x080126ac
 8000ee4:	080126c0 	.word	0x080126c0
 8000ee8:	080126d4 	.word	0x080126d4
 8000eec:	080126e8 	.word	0x080126e8
 8000ef0:	080126fc 	.word	0x080126fc
 8000ef4:	20001ad4 	.word	0x20001ad4

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
 8000f08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bbd      	ldr	r3, [pc, #756]	; (8001254 <DM_DisplayFormattedOutput+0x35c>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b0      	ldr	r0, [pc, #704]	; (8001258 <DM_DisplayFormattedOutput+0x360>)
 8000f98:	f00c fd58 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48a9      	ldr	r0, [pc, #676]	; (800125c <DM_DisplayFormattedOutput+0x364>)
 8000fb8:	f00c fd48 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a2      	ldr	r0, [pc, #648]	; (8001260 <DM_DisplayFormattedOutput+0x368>)
 8000fd8:	f00c fd38 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	489b      	ldr	r0, [pc, #620]	; (8001264 <DM_DisplayFormattedOutput+0x36c>)
 8000ff8:	f00c fd28 	bl	800da4c <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f004 fae8 	bl	80055d0 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a94      	ldr	r2, [pc, #592]	; (8001268 <DM_DisplayFormattedOutput+0x370>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00e f8bb 	bl	800f194 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00c fd04 	bl	800da4c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fa91 	bl	800556c <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a7f      	ldr	r2, [pc, #508]	; (800126c <DM_DisplayFormattedOutput+0x374>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00e f88f 	bl	800f194 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0018 	add.w	r0, r7, #24
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a78      	ldr	r2, [pc, #480]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00e f880 	bl	800f194 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00c fcc9 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0018 	add.w	r0, r7, #24
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00c fcb6 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	485c      	ldr	r0, [pc, #368]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8001104:	f00c fca2 	bl	800da4c <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f003 fc5c 	bl	80049c4 <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f003 fc53 	bl	80049c4 <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 000c 	add.w	r0, r7, #12
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00e f824 	bl	800f194 <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 fbda 	bl	8004904 <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d024      	beq.n	80011a0 <DM_DisplayFormattedOutput+0x2a8>
	{
		char symbol[3] = "+\0";
 8001156:	4a49      	ldr	r2, [pc, #292]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001168:	f107 020c 	add.w	r2, r7, #12
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f00e f842 	bl	800f1fc <strcat>
 8001178:	4604      	mov	r4, r0
 800117a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117e:	b299      	uxth	r1, r3
 8001180:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001184:	b298      	uxth	r0, r3
 8001186:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800118a:	b29b      	uxth	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001196:	4602      	mov	r2, r0
 8001198:	4620      	mov	r0, r4
 800119a:	f00c fc57 	bl	800da4c <ILI9341_Draw_Text>
 800119e:	e021      	b.n	80011e4 <DM_DisplayFormattedOutput+0x2ec>
	}
	else
	{
		char symbol[3] = "-\0";
 80011a0:	4a37      	ldr	r2, [pc, #220]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	8019      	strh	r1, [r3, #0]
 80011aa:	3302      	adds	r3, #2
 80011ac:	0c12      	lsrs	r2, r2, #16
 80011ae:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011b0:	f107 020c 	add.w	r2, r7, #12
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00e f81f 	bl	800f1fc <strcat>
 80011be:	4604      	mov	r4, r0
 80011c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c4:	b299      	uxth	r1, r3
 80011c6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ca:	b298      	uxth	r0, r3
 80011cc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2200      	movs	r2, #0
 80011d4:	9201      	str	r2, [sp, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011dc:	4602      	mov	r2, r0
 80011de:	4620      	mov	r0, r4
 80011e0:	f00c fc34 	bl	800da4c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f4:	22aa      	movs	r2, #170	; 0xaa
 80011f6:	2103      	movs	r1, #3
 80011f8:	4822      	ldr	r0, [pc, #136]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 80011fa:	f00c fc27 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Sine(80, 140, 3, BLUE, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80011fe:	233c      	movs	r3, #60	; 0x3c
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800120e:	2203      	movs	r2, #3
 8001210:	218c      	movs	r1, #140	; 0x8c
 8001212:	2050      	movs	r0, #80	; 0x50
 8001214:	f00c fa76 	bl	800d704 <ILI9341_Draw_Sine>

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001218:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800121c:	b29b      	uxth	r3, r3
 800121e:	2200      	movs	r2, #0
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001228:	22aa      	movs	r2, #170	; 0xaa
 800122a:	21b4      	movs	r1, #180	; 0xb4
 800122c:	4817      	ldr	r0, [pc, #92]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800122e:	f00c fc0d 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Sine(245, 140, 3, RED, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001232:	233c      	movs	r3, #60	; 0x3c
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001242:	2203      	movs	r2, #3
 8001244:	218c      	movs	r1, #140	; 0x8c
 8001246:	20f5      	movs	r0, #245	; 0xf5
 8001248:	f00c fa5c 	bl	800d704 <ILI9341_Draw_Sine>
}
 800124c:	bf00      	nop
 800124e:	376c      	adds	r7, #108	; 0x6c
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	3a449ba6 	.word	0x3a449ba6
 8001258:	08012720 	.word	0x08012720
 800125c:	08012730 	.word	0x08012730
 8001260:	08012740 	.word	0x08012740
 8001264:	08012750 	.word	0x08012750
 8001268:	08012760 	.word	0x08012760
 800126c:	08012770 	.word	0x08012770
 8001270:	0801277c 	.word	0x0801277c
 8001274:	08012788 	.word	0x08012788
 8001278:	08012790 	.word	0x08012790
 800127c:	080127ac 	.word	0x080127ac
 8001280:	080127b0 	.word	0x080127b0
 8001284:	0801279c 	.word	0x0801279c
 8001288:	20001254 	.word	0x20001254
 800128c:	080127a4 	.word	0x080127a4

08001290 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001296:	4820      	ldr	r0, [pc, #128]	; (8001318 <DM_RefreshScreen+0x88>)
 8001298:	f00b f85a 	bl	800c350 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 800129c:	2000      	movs	r0, #0
 800129e:	f00c fe55 	bl	800df4c <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80012a2:	2300      	movs	r3, #0
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2302      	movs	r3, #2
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2328      	movs	r3, #40	; 0x28
 80012b2:	2250      	movs	r2, #80	; 0x50
 80012b4:	21c8      	movs	r1, #200	; 0xc8
 80012b6:	2000      	movs	r0, #0
 80012b8:	f00c fa65 	bl	800d786 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80012bc:	2300      	movs	r3, #0
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	2302      	movs	r3, #2
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2328      	movs	r3, #40	; 0x28
 80012cc:	2250      	movs	r2, #80	; 0x50
 80012ce:	21c8      	movs	r1, #200	; 0xc8
 80012d0:	2050      	movs	r0, #80	; 0x50
 80012d2:	f00c fa58 	bl	800d786 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80012d6:	2300      	movs	r3, #0
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2302      	movs	r3, #2
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2328      	movs	r3, #40	; 0x28
 80012e6:	2250      	movs	r2, #80	; 0x50
 80012e8:	21c8      	movs	r1, #200	; 0xc8
 80012ea:	20a0      	movs	r0, #160	; 0xa0
 80012ec:	f00c fa4b 	bl	800d786 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80012f0:	2300      	movs	r3, #0
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2302      	movs	r3, #2
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2328      	movs	r3, #40	; 0x28
 8001300:	2250      	movs	r2, #80	; 0x50
 8001302:	21c8      	movs	r1, #200	; 0xc8
 8001304:	20f0      	movs	r0, #240	; 0xf0
 8001306:	f00c fa3e 	bl	800d786 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <DM_RefreshScreen+0x88>)
 800130c:	f00a ffea 	bl	800c2e4 <HAL_TIM_Base_Start_IT>


}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20002384 	.word	0x20002384

0800131c <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <DM_SetErrorDebugMsg+0x1c>)
 8001328:	212d      	movs	r1, #45	; 0x2d
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <DM_SetErrorDebugMsg+0x20>)
 800132c:	f00d ff32 	bl	800f194 <sniprintf>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08012830 	.word	0x08012830
 800133c:	20001ad4 	.word	0x20001ad4

08001340 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	3b01      	subs	r3, #1
 800134e:	2b03      	cmp	r3, #3
 8001350:	d816      	bhi.n	8001380 <FreqMenu_DrawMenu+0x40>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <FreqMenu_DrawMenu+0x18>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001369 	.word	0x08001369
 800135c:	0800136f 	.word	0x0800136f
 8001360:	08001375 	.word	0x08001375
 8001364:	0800137b 	.word	0x0800137b
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001368:	f000 f810 	bl	800138c <FreqMenu_DrawMainMenu>
			break;
 800136c:	e009      	b.n	8001382 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800136e:	f000 f849 	bl	8001404 <FreqMenu_DrawPresetMenu>
			break;
 8001372:	e006      	b.n	8001382 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001374:	f001 faf4 	bl	8002960 <FreqMenu_DrawAdjustMenu>
			break;
 8001378:	e003      	b.n	8001382 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800137a:	f001 fb07 	bl	800298c <FreqMenu_DrawSweepMenu>
			break;
 800137e:	e000      	b.n	8001382 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001380:	bf00      	nop

	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop

0800138c <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2302      	movs	r3, #2
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2300      	movs	r3, #0
 800139e:	220a      	movs	r2, #10
 80013a0:	2105      	movs	r1, #5
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <FreqMenu_DrawMainMenu+0x68>)
 80013a4:	f00c fb52 	bl	800da4c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80013a8:	f7ff fda6 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80013ac:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2302      	movs	r3, #2
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	22d2      	movs	r2, #210	; 0xd2
 80013ba:	2105      	movs	r1, #5
 80013bc:	480e      	ldr	r0, [pc, #56]	; (80013f8 <FreqMenu_DrawMainMenu+0x6c>)
 80013be:	f00c fb45 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80013c2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	22d2      	movs	r2, #210	; 0xd2
 80013d0:	2157      	movs	r1, #87	; 0x57
 80013d2:	480a      	ldr	r0, [pc, #40]	; (80013fc <FreqMenu_DrawMainMenu+0x70>)
 80013d4:	f00c fb3a 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80013d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2302      	movs	r3, #2
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	22d2      	movs	r2, #210	; 0xd2
 80013e6:	21ae      	movs	r1, #174	; 0xae
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <FreqMenu_DrawMainMenu+0x74>)
 80013ea:	f00c fb2f 	bl	800da4c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08012834 	.word	0x08012834
 80013f8:	08012840 	.word	0x08012840
 80013fc:	08012848 	.word	0x08012848
 8001400:	08012850 	.word	0x08012850

08001404 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	2302      	movs	r3, #2
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2300      	movs	r3, #0
 8001416:	220a      	movs	r2, #10
 8001418:	2105      	movs	r1, #5
 800141a:	4886      	ldr	r0, [pc, #536]	; (8001634 <FreqMenu_DrawPresetMenu+0x230>)
 800141c:	f00c fb16 	bl	800da4c <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001420:	2328      	movs	r3, #40	; 0x28
 8001422:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001428:	2350      	movs	r3, #80	; 0x50
 800142a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001430:	2378      	movs	r3, #120	; 0x78
 8001432:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001434:	238c      	movs	r3, #140	; 0x8c
 8001436:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800143c:	f003 fc78 	bl	8004d30 <FreqO_GetFPresetObject>
 8001440:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f001 825d 	beq.w	8002904 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001452:	4293      	cmp	r3, r2
 8001454:	f000 849a 	beq.w	8001d8c <FreqMenu_DrawPresetMenu+0x988>
 8001458:	f240 22ee 	movw	r2, #750	; 0x2ee
 800145c:	4293      	cmp	r3, r2
 800145e:	d817      	bhi.n	8001490 <FreqMenu_DrawPresetMenu+0x8c>
 8001460:	2b32      	cmp	r3, #50	; 0x32
 8001462:	f000 81b3 	beq.w	80017cc <FreqMenu_DrawPresetMenu+0x3c8>
 8001466:	2b32      	cmp	r3, #50	; 0x32
 8001468:	d806      	bhi.n	8001478 <FreqMenu_DrawPresetMenu+0x74>
 800146a:	2b01      	cmp	r3, #1
 800146c:	d038      	beq.n	80014e0 <FreqMenu_DrawPresetMenu+0xdc>
 800146e:	2b0a      	cmp	r3, #10
 8001470:	f000 8102 	beq.w	8001678 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001474:	f001 ba52 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001478:	2bfa      	cmp	r3, #250	; 0xfa
 800147a:	f000 8317 	beq.w	8001aac <FreqMenu_DrawPresetMenu+0x6a8>
 800147e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001482:	f000 83d9 	beq.w	8001c38 <FreqMenu_DrawPresetMenu+0x834>
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	f000 8266 	beq.w	8001958 <FreqMenu_DrawPresetMenu+0x554>
}
 800148c:	f001 ba46 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001490:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001494:	4293      	cmp	r3, r2
 8001496:	f000 8758 	beq.w	800234a <FreqMenu_DrawPresetMenu+0xf46>
 800149a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800149e:	4293      	cmp	r3, r2
 80014a0:	d80f      	bhi.n	80014c2 <FreqMenu_DrawPresetMenu+0xbe>
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f000 85e0 	beq.w	800206c <FreqMenu_DrawPresetMenu+0xc68>
 80014ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f000 86a1 	beq.w	80021f8 <FreqMenu_DrawPresetMenu+0xdf4>
 80014b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ba:	f000 852d 	beq.w	8001f18 <FreqMenu_DrawPresetMenu+0xb14>
}
 80014be:	f001 ba2d 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80014c2:	4a5d      	ldr	r2, [pc, #372]	; (8001638 <FreqMenu_DrawPresetMenu+0x234>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f001 80ae 	beq.w	8002626 <FreqMenu_DrawPresetMenu+0x1222>
 80014ca:	4a5c      	ldr	r2, [pc, #368]	; (800163c <FreqMenu_DrawPresetMenu+0x238>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f001 816f 	beq.w	80027b0 <FreqMenu_DrawPresetMenu+0x13ac>
 80014d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f000 87fc 	beq.w	80024d4 <FreqMenu_DrawPresetMenu+0x10d0>
}
 80014dc:	f001 ba1e 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	2302      	movs	r3, #2
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	4853      	ldr	r0, [pc, #332]	; (8001640 <FreqMenu_DrawPresetMenu+0x23c>)
 80014f4:	f00c faaa 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001508:	2105      	movs	r1, #5
 800150a:	484e      	ldr	r0, [pc, #312]	; (8001644 <FreqMenu_DrawPresetMenu+0x240>)
 800150c:	f00c fa9e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	b29a      	uxth	r2, r3
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2302      	movs	r3, #2
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001520:	2105      	movs	r1, #5
 8001522:	4849      	ldr	r0, [pc, #292]	; (8001648 <FreqMenu_DrawPresetMenu+0x244>)
 8001524:	f00c fa92 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	b29a      	uxth	r2, r3
 800152c:	2300      	movs	r3, #0
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2302      	movs	r3, #2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001538:	2105      	movs	r1, #5
 800153a:	4844      	ldr	r0, [pc, #272]	; (800164c <FreqMenu_DrawPresetMenu+0x248>)
 800153c:	f00c fa86 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	b29a      	uxth	r2, r3
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2302      	movs	r3, #2
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001550:	2105      	movs	r1, #5
 8001552:	483f      	ldr	r0, [pc, #252]	; (8001650 <FreqMenu_DrawPresetMenu+0x24c>)
 8001554:	f00c fa7a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	b29a      	uxth	r2, r3
 800155c:	2300      	movs	r3, #0
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001568:	2105      	movs	r1, #5
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <FreqMenu_DrawPresetMenu+0x250>)
 800156c:	f00c fa6e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001570:	7a7b      	ldrb	r3, [r7, #9]
 8001572:	b29a      	uxth	r2, r3
 8001574:	2300      	movs	r3, #0
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2302      	movs	r3, #2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001580:	2105      	movs	r1, #5
 8001582:	4835      	ldr	r0, [pc, #212]	; (8001658 <FreqMenu_DrawPresetMenu+0x254>)
 8001584:	f00c fa62 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	b29a      	uxth	r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001598:	2178      	movs	r1, #120	; 0x78
 800159a:	4830      	ldr	r0, [pc, #192]	; (800165c <FreqMenu_DrawPresetMenu+0x258>)
 800159c:	f00c fa56 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	2300      	movs	r3, #0
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2302      	movs	r3, #2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015b0:	2178      	movs	r1, #120	; 0x78
 80015b2:	482b      	ldr	r0, [pc, #172]	; (8001660 <FreqMenu_DrawPresetMenu+0x25c>)
 80015b4:	f00c fa4a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2302      	movs	r3, #2
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015c8:	2178      	movs	r1, #120	; 0x78
 80015ca:	4826      	ldr	r0, [pc, #152]	; (8001664 <FreqMenu_DrawPresetMenu+0x260>)
 80015cc:	f00c fa3e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015d0:	7b3b      	ldrb	r3, [r7, #12]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2302      	movs	r3, #2
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015e0:	2178      	movs	r1, #120	; 0x78
 80015e2:	4821      	ldr	r0, [pc, #132]	; (8001668 <FreqMenu_DrawPresetMenu+0x264>)
 80015e4:	f00c fa32 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2300      	movs	r3, #0
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2302      	movs	r3, #2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015f8:	2178      	movs	r1, #120	; 0x78
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <FreqMenu_DrawPresetMenu+0x268>)
 80015fc:	f00c fa26 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	b29a      	uxth	r2, r3
 8001604:	2300      	movs	r3, #0
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2302      	movs	r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001610:	2178      	movs	r1, #120	; 0x78
 8001612:	4817      	ldr	r0, [pc, #92]	; (8001670 <FreqMenu_DrawPresetMenu+0x26c>)
 8001614:	f00c fa1a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001618:	7a7b      	ldrb	r3, [r7, #9]
 800161a:	b29a      	uxth	r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2302      	movs	r3, #2
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001628:	2178      	movs	r1, #120	; 0x78
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <FreqMenu_DrawPresetMenu+0x270>)
 800162c:	f00c fa0e 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8001630:	f001 b974 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
 8001634:	08012858 	.word	0x08012858
 8001638:	000124f8 	.word	0x000124f8
 800163c:	000186a0 	.word	0x000186a0
 8001640:	0801286c 	.word	0x0801286c
 8001644:	08012874 	.word	0x08012874
 8001648:	0801287c 	.word	0x0801287c
 800164c:	08012884 	.word	0x08012884
 8001650:	0801288c 	.word	0x0801288c
 8001654:	08012894 	.word	0x08012894
 8001658:	0801289c 	.word	0x0801289c
 800165c:	080128a4 	.word	0x080128a4
 8001660:	080128ac 	.word	0x080128ac
 8001664:	080128b4 	.word	0x080128b4
 8001668:	080128bc 	.word	0x080128bc
 800166c:	080128c4 	.word	0x080128c4
 8001670:	080128cc 	.word	0x080128cc
 8001674:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	b29a      	uxth	r2, r3
 800167c:	2300      	movs	r3, #0
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2302      	movs	r3, #2
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001688:	2105      	movs	r1, #5
 800168a:	48a5      	ldr	r0, [pc, #660]	; (8001920 <FreqMenu_DrawPresetMenu+0x51c>)
 800168c:	f00c f9de 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001690:	7bbb      	ldrb	r3, [r7, #14]
 8001692:	b29a      	uxth	r2, r3
 8001694:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2302      	movs	r3, #2
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2105      	movs	r1, #5
 80016a2:	48a0      	ldr	r0, [pc, #640]	; (8001924 <FreqMenu_DrawPresetMenu+0x520>)
 80016a4:	f00c f9d2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016b8:	2105      	movs	r1, #5
 80016ba:	489b      	ldr	r0, [pc, #620]	; (8001928 <FreqMenu_DrawPresetMenu+0x524>)
 80016bc:	f00c f9c6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2300      	movs	r3, #0
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2302      	movs	r3, #2
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016d0:	2105      	movs	r1, #5
 80016d2:	4896      	ldr	r0, [pc, #600]	; (800192c <FreqMenu_DrawPresetMenu+0x528>)
 80016d4:	f00c f9ba 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	2300      	movs	r3, #0
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	2302      	movs	r3, #2
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016e8:	2105      	movs	r1, #5
 80016ea:	4891      	ldr	r0, [pc, #580]	; (8001930 <FreqMenu_DrawPresetMenu+0x52c>)
 80016ec:	f00c f9ae 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	2302      	movs	r3, #2
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001700:	2105      	movs	r1, #5
 8001702:	488c      	ldr	r0, [pc, #560]	; (8001934 <FreqMenu_DrawPresetMenu+0x530>)
 8001704:	f00c f9a2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001708:	7a7b      	ldrb	r3, [r7, #9]
 800170a:	b29a      	uxth	r2, r3
 800170c:	2300      	movs	r3, #0
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2302      	movs	r3, #2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001718:	2105      	movs	r1, #5
 800171a:	4887      	ldr	r0, [pc, #540]	; (8001938 <FreqMenu_DrawPresetMenu+0x534>)
 800171c:	f00c f996 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	b29a      	uxth	r2, r3
 8001724:	2300      	movs	r3, #0
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001730:	2178      	movs	r1, #120	; 0x78
 8001732:	4882      	ldr	r0, [pc, #520]	; (800193c <FreqMenu_DrawPresetMenu+0x538>)
 8001734:	f00c f98a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2302      	movs	r3, #2
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001748:	2178      	movs	r1, #120	; 0x78
 800174a:	487d      	ldr	r0, [pc, #500]	; (8001940 <FreqMenu_DrawPresetMenu+0x53c>)
 800174c:	f00c f97e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001750:	7b7b      	ldrb	r3, [r7, #13]
 8001752:	b29a      	uxth	r2, r3
 8001754:	2300      	movs	r3, #0
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2302      	movs	r3, #2
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001760:	2178      	movs	r1, #120	; 0x78
 8001762:	4878      	ldr	r0, [pc, #480]	; (8001944 <FreqMenu_DrawPresetMenu+0x540>)
 8001764:	f00c f972 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	b29a      	uxth	r2, r3
 800176c:	2300      	movs	r3, #0
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2302      	movs	r3, #2
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001778:	2178      	movs	r1, #120	; 0x78
 800177a:	4873      	ldr	r0, [pc, #460]	; (8001948 <FreqMenu_DrawPresetMenu+0x544>)
 800177c:	f00c f966 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	b29a      	uxth	r2, r3
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2302      	movs	r3, #2
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001790:	2178      	movs	r1, #120	; 0x78
 8001792:	486e      	ldr	r0, [pc, #440]	; (800194c <FreqMenu_DrawPresetMenu+0x548>)
 8001794:	f00c f95a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001798:	7abb      	ldrb	r3, [r7, #10]
 800179a:	b29a      	uxth	r2, r3
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a8:	2178      	movs	r1, #120	; 0x78
 80017aa:	4869      	ldr	r0, [pc, #420]	; (8001950 <FreqMenu_DrawPresetMenu+0x54c>)
 80017ac:	f00c f94e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b0:	7a7b      	ldrb	r3, [r7, #9]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2302      	movs	r3, #2
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c0:	2178      	movs	r1, #120	; 0x78
 80017c2:	4864      	ldr	r0, [pc, #400]	; (8001954 <FreqMenu_DrawPresetMenu+0x550>)
 80017c4:	f00c f942 	bl	800da4c <ILI9341_Draw_Text>
				break;
 80017c8:	f001 b8a8 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	2302      	movs	r3, #2
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017dc:	2105      	movs	r1, #5
 80017de:	4850      	ldr	r0, [pc, #320]	; (8001920 <FreqMenu_DrawPresetMenu+0x51c>)
 80017e0:	f00c f934 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	2300      	movs	r3, #0
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2302      	movs	r3, #2
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f4:	2105      	movs	r1, #5
 80017f6:	484b      	ldr	r0, [pc, #300]	; (8001924 <FreqMenu_DrawPresetMenu+0x520>)
 80017f8:	f00c f928 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80017fc:	7b7b      	ldrb	r3, [r7, #13]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2105      	movs	r1, #5
 800180e:	4846      	ldr	r0, [pc, #280]	; (8001928 <FreqMenu_DrawPresetMenu+0x524>)
 8001810:	f00c f91c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	b29a      	uxth	r2, r3
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001824:	2105      	movs	r1, #5
 8001826:	4841      	ldr	r0, [pc, #260]	; (800192c <FreqMenu_DrawPresetMenu+0x528>)
 8001828:	f00c f910 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	b29a      	uxth	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800183c:	2105      	movs	r1, #5
 800183e:	483c      	ldr	r0, [pc, #240]	; (8001930 <FreqMenu_DrawPresetMenu+0x52c>)
 8001840:	f00c f904 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001844:	7abb      	ldrb	r3, [r7, #10]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001854:	2105      	movs	r1, #5
 8001856:	4837      	ldr	r0, [pc, #220]	; (8001934 <FreqMenu_DrawPresetMenu+0x530>)
 8001858:	f00c f8f8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800185c:	7a7b      	ldrb	r3, [r7, #9]
 800185e:	b29a      	uxth	r2, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	2302      	movs	r3, #2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800186c:	2105      	movs	r1, #5
 800186e:	4832      	ldr	r0, [pc, #200]	; (8001938 <FreqMenu_DrawPresetMenu+0x534>)
 8001870:	f00c f8ec 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2302      	movs	r3, #2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001884:	2178      	movs	r1, #120	; 0x78
 8001886:	482d      	ldr	r0, [pc, #180]	; (800193c <FreqMenu_DrawPresetMenu+0x538>)
 8001888:	f00c f8e0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	2302      	movs	r3, #2
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800189c:	2178      	movs	r1, #120	; 0x78
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <FreqMenu_DrawPresetMenu+0x53c>)
 80018a0:	f00c f8d4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a4:	7b7b      	ldrb	r3, [r7, #13]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	2300      	movs	r3, #0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b4:	2178      	movs	r1, #120	; 0x78
 80018b6:	4823      	ldr	r0, [pc, #140]	; (8001944 <FreqMenu_DrawPresetMenu+0x540>)
 80018b8:	f00c f8c8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7b3b      	ldrb	r3, [r7, #12]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2178      	movs	r1, #120	; 0x78
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <FreqMenu_DrawPresetMenu+0x544>)
 80018d0:	f00c f8bc 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2178      	movs	r1, #120	; 0x78
 80018e6:	4819      	ldr	r0, [pc, #100]	; (800194c <FreqMenu_DrawPresetMenu+0x548>)
 80018e8:	f00c f8b0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7abb      	ldrb	r3, [r7, #10]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <FreqMenu_DrawPresetMenu+0x54c>)
 8001900:	f00c f8a4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001904:	7a7b      	ldrb	r3, [r7, #9]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2302      	movs	r3, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	480f      	ldr	r0, [pc, #60]	; (8001954 <FreqMenu_DrawPresetMenu+0x550>)
 8001918:	f00c f898 	bl	800da4c <ILI9341_Draw_Text>
				break;
 800191c:	f000 bffe 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
 8001920:	0801286c 	.word	0x0801286c
 8001924:	08012874 	.word	0x08012874
 8001928:	0801287c 	.word	0x0801287c
 800192c:	08012884 	.word	0x08012884
 8001930:	0801288c 	.word	0x0801288c
 8001934:	08012894 	.word	0x08012894
 8001938:	0801289c 	.word	0x0801289c
 800193c:	080128a4 	.word	0x080128a4
 8001940:	080128ac 	.word	0x080128ac
 8001944:	080128b4 	.word	0x080128b4
 8001948:	080128bc 	.word	0x080128bc
 800194c:	080128c4 	.word	0x080128c4
 8001950:	080128cc 	.word	0x080128cc
 8001954:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	b29a      	uxth	r2, r3
 800195c:	2300      	movs	r3, #0
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2302      	movs	r3, #2
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001968:	2105      	movs	r1, #5
 800196a:	48a5      	ldr	r0, [pc, #660]	; (8001c00 <FreqMenu_DrawPresetMenu+0x7fc>)
 800196c:	f00c f86e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	b29a      	uxth	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2302      	movs	r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001980:	2105      	movs	r1, #5
 8001982:	48a0      	ldr	r0, [pc, #640]	; (8001c04 <FreqMenu_DrawPresetMenu+0x800>)
 8001984:	f00c f862 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	b29a      	uxth	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2302      	movs	r3, #2
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001998:	2105      	movs	r1, #5
 800199a:	489b      	ldr	r0, [pc, #620]	; (8001c08 <FreqMenu_DrawPresetMenu+0x804>)
 800199c:	f00c f856 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2302      	movs	r3, #2
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	4896      	ldr	r0, [pc, #600]	; (8001c0c <FreqMenu_DrawPresetMenu+0x808>)
 80019b4:	f00c f84a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	2302      	movs	r3, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c8:	2105      	movs	r1, #5
 80019ca:	4891      	ldr	r0, [pc, #580]	; (8001c10 <FreqMenu_DrawPresetMenu+0x80c>)
 80019cc:	f00c f83e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2302      	movs	r3, #2
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e0:	2105      	movs	r1, #5
 80019e2:	488c      	ldr	r0, [pc, #560]	; (8001c14 <FreqMenu_DrawPresetMenu+0x810>)
 80019e4:	f00c f832 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019e8:	7a7b      	ldrb	r3, [r7, #9]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2302      	movs	r3, #2
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019f8:	2105      	movs	r1, #5
 80019fa:	4887      	ldr	r0, [pc, #540]	; (8001c18 <FreqMenu_DrawPresetMenu+0x814>)
 80019fc:	f00c f826 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a10:	2178      	movs	r1, #120	; 0x78
 8001a12:	4882      	ldr	r0, [pc, #520]	; (8001c1c <FreqMenu_DrawPresetMenu+0x818>)
 8001a14:	f00c f81a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2302      	movs	r3, #2
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a28:	2178      	movs	r1, #120	; 0x78
 8001a2a:	487d      	ldr	r0, [pc, #500]	; (8001c20 <FreqMenu_DrawPresetMenu+0x81c>)
 8001a2c:	f00c f80e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a30:	7b7b      	ldrb	r3, [r7, #13]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a40:	2178      	movs	r1, #120	; 0x78
 8001a42:	4878      	ldr	r0, [pc, #480]	; (8001c24 <FreqMenu_DrawPresetMenu+0x820>)
 8001a44:	f00c f802 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a58:	2178      	movs	r1, #120	; 0x78
 8001a5a:	4873      	ldr	r0, [pc, #460]	; (8001c28 <FreqMenu_DrawPresetMenu+0x824>)
 8001a5c:	f00b fff6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a70:	2178      	movs	r1, #120	; 0x78
 8001a72:	486e      	ldr	r0, [pc, #440]	; (8001c2c <FreqMenu_DrawPresetMenu+0x828>)
 8001a74:	f00b ffea 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a78:	7abb      	ldrb	r3, [r7, #10]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a88:	2178      	movs	r1, #120	; 0x78
 8001a8a:	4869      	ldr	r0, [pc, #420]	; (8001c30 <FreqMenu_DrawPresetMenu+0x82c>)
 8001a8c:	f00b ffde 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a90:	7a7b      	ldrb	r3, [r7, #9]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa0:	2178      	movs	r1, #120	; 0x78
 8001aa2:	4864      	ldr	r0, [pc, #400]	; (8001c34 <FreqMenu_DrawPresetMenu+0x830>)
 8001aa4:	f00b ffd2 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8001aa8:	f000 bf38 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001abc:	2105      	movs	r1, #5
 8001abe:	4850      	ldr	r0, [pc, #320]	; (8001c00 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ac0:	f00b ffc4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2302      	movs	r3, #2
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	484b      	ldr	r0, [pc, #300]	; (8001c04 <FreqMenu_DrawPresetMenu+0x800>)
 8001ad8:	f00b ffb8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001adc:	7b7b      	ldrb	r3, [r7, #13]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aec:	2105      	movs	r1, #5
 8001aee:	4846      	ldr	r0, [pc, #280]	; (8001c08 <FreqMenu_DrawPresetMenu+0x804>)
 8001af0:	f00b ffac 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	2302      	movs	r3, #2
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b04:	2105      	movs	r1, #5
 8001b06:	4841      	ldr	r0, [pc, #260]	; (8001c0c <FreqMenu_DrawPresetMenu+0x808>)
 8001b08:	f00b ffa0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	2302      	movs	r3, #2
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	483c      	ldr	r0, [pc, #240]	; (8001c10 <FreqMenu_DrawPresetMenu+0x80c>)
 8001b20:	f00b ff94 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b24:	7abb      	ldrb	r3, [r7, #10]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b34:	2105      	movs	r1, #5
 8001b36:	4837      	ldr	r0, [pc, #220]	; (8001c14 <FreqMenu_DrawPresetMenu+0x810>)
 8001b38:	f00b ff88 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b3c:	7a7b      	ldrb	r3, [r7, #9]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	4832      	ldr	r0, [pc, #200]	; (8001c18 <FreqMenu_DrawPresetMenu+0x814>)
 8001b50:	f00b ff7c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b64:	2178      	movs	r1, #120	; 0x78
 8001b66:	482d      	ldr	r0, [pc, #180]	; (8001c1c <FreqMenu_DrawPresetMenu+0x818>)
 8001b68:	f00b ff70 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	2300      	movs	r3, #0
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	2302      	movs	r3, #2
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b7c:	2178      	movs	r1, #120	; 0x78
 8001b7e:	4828      	ldr	r0, [pc, #160]	; (8001c20 <FreqMenu_DrawPresetMenu+0x81c>)
 8001b80:	f00b ff64 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b84:	7b7b      	ldrb	r3, [r7, #13]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b94:	2178      	movs	r1, #120	; 0x78
 8001b96:	4823      	ldr	r0, [pc, #140]	; (8001c24 <FreqMenu_DrawPresetMenu+0x820>)
 8001b98:	f00b ff58 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b9c:	7b3b      	ldrb	r3, [r7, #12]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bac:	2178      	movs	r1, #120	; 0x78
 8001bae:	481e      	ldr	r0, [pc, #120]	; (8001c28 <FreqMenu_DrawPresetMenu+0x824>)
 8001bb0:	f00b ff4c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc4:	2178      	movs	r1, #120	; 0x78
 8001bc6:	4819      	ldr	r0, [pc, #100]	; (8001c2c <FreqMenu_DrawPresetMenu+0x828>)
 8001bc8:	f00b ff40 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bcc:	7abb      	ldrb	r3, [r7, #10]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bdc:	2178      	movs	r1, #120	; 0x78
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <FreqMenu_DrawPresetMenu+0x82c>)
 8001be0:	f00b ff34 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf4:	2178      	movs	r1, #120	; 0x78
 8001bf6:	480f      	ldr	r0, [pc, #60]	; (8001c34 <FreqMenu_DrawPresetMenu+0x830>)
 8001bf8:	f00b ff28 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8001bfc:	f000 be8e 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
 8001c00:	0801286c 	.word	0x0801286c
 8001c04:	08012874 	.word	0x08012874
 8001c08:	0801287c 	.word	0x0801287c
 8001c0c:	08012884 	.word	0x08012884
 8001c10:	0801288c 	.word	0x0801288c
 8001c14:	08012894 	.word	0x08012894
 8001c18:	0801289c 	.word	0x0801289c
 8001c1c:	080128a4 	.word	0x080128a4
 8001c20:	080128ac 	.word	0x080128ac
 8001c24:	080128b4 	.word	0x080128b4
 8001c28:	080128bc 	.word	0x080128bc
 8001c2c:	080128c4 	.word	0x080128c4
 8001c30:	080128cc 	.word	0x080128cc
 8001c34:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2302      	movs	r3, #2
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	48a5      	ldr	r0, [pc, #660]	; (8001ee0 <FreqMenu_DrawPresetMenu+0xadc>)
 8001c4c:	f00b fefe 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2302      	movs	r3, #2
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c60:	2105      	movs	r1, #5
 8001c62:	48a0      	ldr	r0, [pc, #640]	; (8001ee4 <FreqMenu_DrawPresetMenu+0xae0>)
 8001c64:	f00b fef2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c68:	7b7b      	ldrb	r3, [r7, #13]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	489b      	ldr	r0, [pc, #620]	; (8001ee8 <FreqMenu_DrawPresetMenu+0xae4>)
 8001c7c:	f00b fee6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c80:	7b3b      	ldrb	r3, [r7, #12]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c90:	2105      	movs	r1, #5
 8001c92:	4896      	ldr	r0, [pc, #600]	; (8001eec <FreqMenu_DrawPresetMenu+0xae8>)
 8001c94:	f00b feda 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4891      	ldr	r0, [pc, #580]	; (8001ef0 <FreqMenu_DrawPresetMenu+0xaec>)
 8001cac:	f00b fece 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cb0:	7abb      	ldrb	r3, [r7, #10]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	488c      	ldr	r0, [pc, #560]	; (8001ef4 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001cc4:	f00b fec2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc8:	7a7b      	ldrb	r3, [r7, #9]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	4887      	ldr	r0, [pc, #540]	; (8001ef8 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001cdc:	f00b feb6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf0:	2178      	movs	r1, #120	; 0x78
 8001cf2:	4882      	ldr	r0, [pc, #520]	; (8001efc <FreqMenu_DrawPresetMenu+0xaf8>)
 8001cf4:	f00b feaa 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2302      	movs	r3, #2
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d08:	2178      	movs	r1, #120	; 0x78
 8001d0a:	487d      	ldr	r0, [pc, #500]	; (8001f00 <FreqMenu_DrawPresetMenu+0xafc>)
 8001d0c:	f00b fe9e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d10:	7b7b      	ldrb	r3, [r7, #13]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d20:	2178      	movs	r1, #120	; 0x78
 8001d22:	4878      	ldr	r0, [pc, #480]	; (8001f04 <FreqMenu_DrawPresetMenu+0xb00>)
 8001d24:	f00b fe92 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d28:	7b3b      	ldrb	r3, [r7, #12]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d38:	2178      	movs	r1, #120	; 0x78
 8001d3a:	4873      	ldr	r0, [pc, #460]	; (8001f08 <FreqMenu_DrawPresetMenu+0xb04>)
 8001d3c:	f00b fe86 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d50:	2178      	movs	r1, #120	; 0x78
 8001d52:	486e      	ldr	r0, [pc, #440]	; (8001f0c <FreqMenu_DrawPresetMenu+0xb08>)
 8001d54:	f00b fe7a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d58:	7abb      	ldrb	r3, [r7, #10]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d68:	2178      	movs	r1, #120	; 0x78
 8001d6a:	4869      	ldr	r0, [pc, #420]	; (8001f10 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001d6c:	f00b fe6e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d70:	7a7b      	ldrb	r3, [r7, #9]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	2300      	movs	r3, #0
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d80:	2178      	movs	r1, #120	; 0x78
 8001d82:	4864      	ldr	r0, [pc, #400]	; (8001f14 <FreqMenu_DrawPresetMenu+0xb10>)
 8001d84:	f00b fe62 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8001d88:	f000 bdc8 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	2302      	movs	r3, #2
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	4850      	ldr	r0, [pc, #320]	; (8001ee0 <FreqMenu_DrawPresetMenu+0xadc>)
 8001da0:	f00b fe54 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da4:	7bbb      	ldrb	r3, [r7, #14]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	2302      	movs	r3, #2
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db4:	2105      	movs	r1, #5
 8001db6:	484b      	ldr	r0, [pc, #300]	; (8001ee4 <FreqMenu_DrawPresetMenu+0xae0>)
 8001db8:	f00b fe48 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dbc:	7b7b      	ldrb	r3, [r7, #13]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dcc:	2105      	movs	r1, #5
 8001dce:	4846      	ldr	r0, [pc, #280]	; (8001ee8 <FreqMenu_DrawPresetMenu+0xae4>)
 8001dd0:	f00b fe3c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd4:	7b3b      	ldrb	r3, [r7, #12]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	2302      	movs	r3, #2
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de4:	2105      	movs	r1, #5
 8001de6:	4841      	ldr	r0, [pc, #260]	; (8001eec <FreqMenu_DrawPresetMenu+0xae8>)
 8001de8:	f00b fe30 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2302      	movs	r3, #2
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	483c      	ldr	r0, [pc, #240]	; (8001ef0 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e00:	f00b fe24 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e14:	2105      	movs	r1, #5
 8001e16:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001e18:	f00b fe18 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e1c:	7a7b      	ldrb	r3, [r7, #9]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	2302      	movs	r3, #2
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	4832      	ldr	r0, [pc, #200]	; (8001ef8 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001e30:	f00b fe0c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e44:	2178      	movs	r1, #120	; 0x78
 8001e46:	482d      	ldr	r0, [pc, #180]	; (8001efc <FreqMenu_DrawPresetMenu+0xaf8>)
 8001e48:	f00b fe00 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2302      	movs	r3, #2
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e5c:	2178      	movs	r1, #120	; 0x78
 8001e5e:	4828      	ldr	r0, [pc, #160]	; (8001f00 <FreqMenu_DrawPresetMenu+0xafc>)
 8001e60:	f00b fdf4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e74:	2178      	movs	r1, #120	; 0x78
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <FreqMenu_DrawPresetMenu+0xb00>)
 8001e78:	f00b fde8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e7c:	7b3b      	ldrb	r3, [r7, #12]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2302      	movs	r3, #2
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e8c:	2178      	movs	r1, #120	; 0x78
 8001e8e:	481e      	ldr	r0, [pc, #120]	; (8001f08 <FreqMenu_DrawPresetMenu+0xb04>)
 8001e90:	f00b fddc 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ea4:	2178      	movs	r1, #120	; 0x78
 8001ea6:	4819      	ldr	r0, [pc, #100]	; (8001f0c <FreqMenu_DrawPresetMenu+0xb08>)
 8001ea8:	f00b fdd0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eac:	7abb      	ldrb	r3, [r7, #10]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ebc:	2178      	movs	r1, #120	; 0x78
 8001ebe:	4814      	ldr	r0, [pc, #80]	; (8001f10 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001ec0:	f00b fdc4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec4:	7a7b      	ldrb	r3, [r7, #9]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed4:	2178      	movs	r1, #120	; 0x78
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <FreqMenu_DrawPresetMenu+0xb10>)
 8001ed8:	f00b fdb8 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8001edc:	f000 bd1e 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
 8001ee0:	0801286c 	.word	0x0801286c
 8001ee4:	08012874 	.word	0x08012874
 8001ee8:	0801287c 	.word	0x0801287c
 8001eec:	08012884 	.word	0x08012884
 8001ef0:	0801288c 	.word	0x0801288c
 8001ef4:	08012894 	.word	0x08012894
 8001ef8:	0801289c 	.word	0x0801289c
 8001efc:	080128a4 	.word	0x080128a4
 8001f00:	080128ac 	.word	0x080128ac
 8001f04:	080128b4 	.word	0x080128b4
 8001f08:	080128bc 	.word	0x080128bc
 8001f0c:	080128c4 	.word	0x080128c4
 8001f10:	080128cc 	.word	0x080128cc
 8001f14:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	2302      	movs	r3, #2
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f28:	2105      	movs	r1, #5
 8001f2a:	48a5      	ldr	r0, [pc, #660]	; (80021c0 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001f2c:	f00b fd8e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f30:	7bbb      	ldrb	r3, [r7, #14]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2302      	movs	r3, #2
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f40:	2105      	movs	r1, #5
 8001f42:	48a0      	ldr	r0, [pc, #640]	; (80021c4 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001f44:	f00b fd82 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f48:	7b7b      	ldrb	r3, [r7, #13]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	2302      	movs	r3, #2
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	489b      	ldr	r0, [pc, #620]	; (80021c8 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001f5c:	f00b fd76 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f60:	7b3b      	ldrb	r3, [r7, #12]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f70:	2105      	movs	r1, #5
 8001f72:	4896      	ldr	r0, [pc, #600]	; (80021cc <FreqMenu_DrawPresetMenu+0xdc8>)
 8001f74:	f00b fd6a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	2302      	movs	r3, #2
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4891      	ldr	r0, [pc, #580]	; (80021d0 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001f8c:	f00b fd5e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f90:	7abb      	ldrb	r3, [r7, #10]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa0:	2105      	movs	r1, #5
 8001fa2:	488c      	ldr	r0, [pc, #560]	; (80021d4 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001fa4:	f00b fd52 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	4887      	ldr	r0, [pc, #540]	; (80021d8 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001fbc:	f00b fd46 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2178      	movs	r1, #120	; 0x78
 8001fd2:	4882      	ldr	r0, [pc, #520]	; (80021dc <FreqMenu_DrawPresetMenu+0xdd8>)
 8001fd4:	f00b fd3a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe8:	2178      	movs	r1, #120	; 0x78
 8001fea:	487d      	ldr	r0, [pc, #500]	; (80021e0 <FreqMenu_DrawPresetMenu+0xddc>)
 8001fec:	f00b fd2e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff0:	7b7b      	ldrb	r3, [r7, #13]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002000:	2178      	movs	r1, #120	; 0x78
 8002002:	4878      	ldr	r0, [pc, #480]	; (80021e4 <FreqMenu_DrawPresetMenu+0xde0>)
 8002004:	f00b fd22 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b29a      	uxth	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002018:	2178      	movs	r1, #120	; 0x78
 800201a:	4873      	ldr	r0, [pc, #460]	; (80021e8 <FreqMenu_DrawPresetMenu+0xde4>)
 800201c:	f00b fd16 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002030:	2178      	movs	r1, #120	; 0x78
 8002032:	486e      	ldr	r0, [pc, #440]	; (80021ec <FreqMenu_DrawPresetMenu+0xde8>)
 8002034:	f00b fd0a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002038:	7abb      	ldrb	r3, [r7, #10]
 800203a:	b29a      	uxth	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002048:	2178      	movs	r1, #120	; 0x78
 800204a:	4869      	ldr	r0, [pc, #420]	; (80021f0 <FreqMenu_DrawPresetMenu+0xdec>)
 800204c:	f00b fcfe 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002050:	7a7b      	ldrb	r3, [r7, #9]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002060:	2178      	movs	r1, #120	; 0x78
 8002062:	4864      	ldr	r0, [pc, #400]	; (80021f4 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002064:	f00b fcf2 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8002068:	f000 bc58 	b.w	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	b29a      	uxth	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	2302      	movs	r3, #2
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800207c:	2105      	movs	r1, #5
 800207e:	4850      	ldr	r0, [pc, #320]	; (80021c0 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002080:	f00b fce4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002084:	7bbb      	ldrb	r3, [r7, #14]
 8002086:	b29a      	uxth	r2, r3
 8002088:	2300      	movs	r3, #0
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	2302      	movs	r3, #2
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002094:	2105      	movs	r1, #5
 8002096:	484b      	ldr	r0, [pc, #300]	; (80021c4 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002098:	f00b fcd8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2302      	movs	r3, #2
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020ac:	2105      	movs	r1, #5
 80020ae:	4846      	ldr	r0, [pc, #280]	; (80021c8 <FreqMenu_DrawPresetMenu+0xdc4>)
 80020b0:	f00b fccc 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b4:	7b3b      	ldrb	r3, [r7, #12]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	2300      	movs	r3, #0
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	2302      	movs	r3, #2
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c4:	2105      	movs	r1, #5
 80020c6:	4841      	ldr	r0, [pc, #260]	; (80021cc <FreqMenu_DrawPresetMenu+0xdc8>)
 80020c8:	f00b fcc0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	2300      	movs	r3, #0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	2302      	movs	r3, #2
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020dc:	2105      	movs	r1, #5
 80020de:	483c      	ldr	r0, [pc, #240]	; (80021d0 <FreqMenu_DrawPresetMenu+0xdcc>)
 80020e0:	f00b fcb4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e4:	7abb      	ldrb	r3, [r7, #10]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	2300      	movs	r3, #0
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2302      	movs	r3, #2
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f4:	2105      	movs	r1, #5
 80020f6:	4837      	ldr	r0, [pc, #220]	; (80021d4 <FreqMenu_DrawPresetMenu+0xdd0>)
 80020f8:	f00b fca8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020fc:	7a7b      	ldrb	r3, [r7, #9]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	2300      	movs	r3, #0
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	2302      	movs	r3, #2
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800210c:	2105      	movs	r1, #5
 800210e:	4832      	ldr	r0, [pc, #200]	; (80021d8 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002110:	f00b fc9c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	b29a      	uxth	r2, r3
 8002118:	2300      	movs	r3, #0
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	2302      	movs	r3, #2
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002124:	2178      	movs	r1, #120	; 0x78
 8002126:	482d      	ldr	r0, [pc, #180]	; (80021dc <FreqMenu_DrawPresetMenu+0xdd8>)
 8002128:	f00b fc90 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	b29a      	uxth	r2, r3
 8002130:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2302      	movs	r3, #2
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	2178      	movs	r1, #120	; 0x78
 800213e:	4828      	ldr	r0, [pc, #160]	; (80021e0 <FreqMenu_DrawPresetMenu+0xddc>)
 8002140:	f00b fc84 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	b29a      	uxth	r2, r3
 8002148:	2300      	movs	r3, #0
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	2302      	movs	r3, #2
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002154:	2178      	movs	r1, #120	; 0x78
 8002156:	4823      	ldr	r0, [pc, #140]	; (80021e4 <FreqMenu_DrawPresetMenu+0xde0>)
 8002158:	f00b fc78 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800215c:	7b3b      	ldrb	r3, [r7, #12]
 800215e:	b29a      	uxth	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800216c:	2178      	movs	r1, #120	; 0x78
 800216e:	481e      	ldr	r0, [pc, #120]	; (80021e8 <FreqMenu_DrawPresetMenu+0xde4>)
 8002170:	f00b fc6c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	b29a      	uxth	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002184:	2178      	movs	r1, #120	; 0x78
 8002186:	4819      	ldr	r0, [pc, #100]	; (80021ec <FreqMenu_DrawPresetMenu+0xde8>)
 8002188:	f00b fc60 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800218c:	7abb      	ldrb	r3, [r7, #10]
 800218e:	b29a      	uxth	r2, r3
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800219c:	2178      	movs	r1, #120	; 0x78
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <FreqMenu_DrawPresetMenu+0xdec>)
 80021a0:	f00b fc54 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021b4:	2178      	movs	r1, #120	; 0x78
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <FreqMenu_DrawPresetMenu+0xdf0>)
 80021b8:	f00b fc48 	bl	800da4c <ILI9341_Draw_Text>
				break;
 80021bc:	e3ae      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
 80021be:	bf00      	nop
 80021c0:	0801286c 	.word	0x0801286c
 80021c4:	08012874 	.word	0x08012874
 80021c8:	0801287c 	.word	0x0801287c
 80021cc:	08012884 	.word	0x08012884
 80021d0:	0801288c 	.word	0x0801288c
 80021d4:	08012894 	.word	0x08012894
 80021d8:	0801289c 	.word	0x0801289c
 80021dc:	080128a4 	.word	0x080128a4
 80021e0:	080128ac 	.word	0x080128ac
 80021e4:	080128b4 	.word	0x080128b4
 80021e8:	080128bc 	.word	0x080128bc
 80021ec:	080128c4 	.word	0x080128c4
 80021f0:	080128cc 	.word	0x080128cc
 80021f4:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2302      	movs	r3, #2
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002208:	2105      	movs	r1, #5
 800220a:	48a4      	ldr	r0, [pc, #656]	; (800249c <FreqMenu_DrawPresetMenu+0x1098>)
 800220c:	f00b fc1e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	b29a      	uxth	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2302      	movs	r3, #2
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002220:	2105      	movs	r1, #5
 8002222:	489f      	ldr	r0, [pc, #636]	; (80024a0 <FreqMenu_DrawPresetMenu+0x109c>)
 8002224:	f00b fc12 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002228:	7b7b      	ldrb	r3, [r7, #13]
 800222a:	b29a      	uxth	r2, r3
 800222c:	2300      	movs	r3, #0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2302      	movs	r3, #2
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002238:	2105      	movs	r1, #5
 800223a:	489a      	ldr	r0, [pc, #616]	; (80024a4 <FreqMenu_DrawPresetMenu+0x10a0>)
 800223c:	f00b fc06 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002240:	7b3b      	ldrb	r3, [r7, #12]
 8002242:	b29a      	uxth	r2, r3
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2302      	movs	r3, #2
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002250:	2105      	movs	r1, #5
 8002252:	4895      	ldr	r0, [pc, #596]	; (80024a8 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002254:	f00b fbfa 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	b29a      	uxth	r2, r3
 800225c:	2300      	movs	r3, #0
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	2302      	movs	r3, #2
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002268:	2105      	movs	r1, #5
 800226a:	4890      	ldr	r0, [pc, #576]	; (80024ac <FreqMenu_DrawPresetMenu+0x10a8>)
 800226c:	f00b fbee 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002270:	7abb      	ldrb	r3, [r7, #10]
 8002272:	b29a      	uxth	r2, r3
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	2302      	movs	r3, #2
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002280:	2105      	movs	r1, #5
 8002282:	488b      	ldr	r0, [pc, #556]	; (80024b0 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002284:	f00b fbe2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002288:	7a7b      	ldrb	r3, [r7, #9]
 800228a:	b29a      	uxth	r2, r3
 800228c:	2300      	movs	r3, #0
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	2302      	movs	r3, #2
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002298:	2105      	movs	r1, #5
 800229a:	4886      	ldr	r0, [pc, #536]	; (80024b4 <FreqMenu_DrawPresetMenu+0x10b0>)
 800229c:	f00b fbd6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b0:	2178      	movs	r1, #120	; 0x78
 80022b2:	4881      	ldr	r0, [pc, #516]	; (80024b8 <FreqMenu_DrawPresetMenu+0x10b4>)
 80022b4:	f00b fbca 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b8:	7bbb      	ldrb	r3, [r7, #14]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	2302      	movs	r3, #2
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c8:	2178      	movs	r1, #120	; 0x78
 80022ca:	487c      	ldr	r0, [pc, #496]	; (80024bc <FreqMenu_DrawPresetMenu+0x10b8>)
 80022cc:	f00b fbbe 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022d0:	7b7b      	ldrb	r3, [r7, #13]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2302      	movs	r3, #2
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2178      	movs	r1, #120	; 0x78
 80022e2:	4877      	ldr	r0, [pc, #476]	; (80024c0 <FreqMenu_DrawPresetMenu+0x10bc>)
 80022e4:	f00b fbb2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e8:	7b3b      	ldrb	r3, [r7, #12]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f8:	2178      	movs	r1, #120	; 0x78
 80022fa:	4872      	ldr	r0, [pc, #456]	; (80024c4 <FreqMenu_DrawPresetMenu+0x10c0>)
 80022fc:	f00b fba6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	b29a      	uxth	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2302      	movs	r3, #2
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002310:	2178      	movs	r1, #120	; 0x78
 8002312:	486d      	ldr	r0, [pc, #436]	; (80024c8 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002314:	f00b fb9a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002318:	7abb      	ldrb	r3, [r7, #10]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002328:	2178      	movs	r1, #120	; 0x78
 800232a:	4868      	ldr	r0, [pc, #416]	; (80024cc <FreqMenu_DrawPresetMenu+0x10c8>)
 800232c:	f00b fb8e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002330:	7a7b      	ldrb	r3, [r7, #9]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002340:	2178      	movs	r1, #120	; 0x78
 8002342:	4863      	ldr	r0, [pc, #396]	; (80024d0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002344:	f00b fb82 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8002348:	e2e8      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	b29a      	uxth	r2, r3
 800234e:	2300      	movs	r3, #0
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2302      	movs	r3, #2
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800235a:	2105      	movs	r1, #5
 800235c:	484f      	ldr	r0, [pc, #316]	; (800249c <FreqMenu_DrawPresetMenu+0x1098>)
 800235e:	f00b fb75 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002362:	7bbb      	ldrb	r3, [r7, #14]
 8002364:	b29a      	uxth	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2302      	movs	r3, #2
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002372:	2105      	movs	r1, #5
 8002374:	484a      	ldr	r0, [pc, #296]	; (80024a0 <FreqMenu_DrawPresetMenu+0x109c>)
 8002376:	f00b fb69 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	b29a      	uxth	r2, r3
 800237e:	2300      	movs	r3, #0
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	2302      	movs	r3, #2
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800238a:	2105      	movs	r1, #5
 800238c:	4845      	ldr	r0, [pc, #276]	; (80024a4 <FreqMenu_DrawPresetMenu+0x10a0>)
 800238e:	f00b fb5d 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002392:	7b3b      	ldrb	r3, [r7, #12]
 8002394:	b29a      	uxth	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a2:	2105      	movs	r1, #5
 80023a4:	4840      	ldr	r0, [pc, #256]	; (80024a8 <FreqMenu_DrawPresetMenu+0x10a4>)
 80023a6:	f00b fb51 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2302      	movs	r3, #2
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ba:	2105      	movs	r1, #5
 80023bc:	483b      	ldr	r0, [pc, #236]	; (80024ac <FreqMenu_DrawPresetMenu+0x10a8>)
 80023be:	f00b fb45 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c2:	7abb      	ldrb	r3, [r7, #10]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	2300      	movs	r3, #0
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2302      	movs	r3, #2
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d2:	2105      	movs	r1, #5
 80023d4:	4836      	ldr	r0, [pc, #216]	; (80024b0 <FreqMenu_DrawPresetMenu+0x10ac>)
 80023d6:	f00b fb39 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023da:	7a7b      	ldrb	r3, [r7, #9]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	2300      	movs	r3, #0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2302      	movs	r3, #2
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ea:	2105      	movs	r1, #5
 80023ec:	4831      	ldr	r0, [pc, #196]	; (80024b4 <FreqMenu_DrawPresetMenu+0x10b0>)
 80023ee:	f00b fb2d 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	2300      	movs	r3, #0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2302      	movs	r3, #2
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002402:	2178      	movs	r1, #120	; 0x78
 8002404:	482c      	ldr	r0, [pc, #176]	; (80024b8 <FreqMenu_DrawPresetMenu+0x10b4>)
 8002406:	f00b fb21 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	b29a      	uxth	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2302      	movs	r3, #2
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800241a:	2178      	movs	r1, #120	; 0x78
 800241c:	4827      	ldr	r0, [pc, #156]	; (80024bc <FreqMenu_DrawPresetMenu+0x10b8>)
 800241e:	f00b fb15 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002422:	7b7b      	ldrb	r3, [r7, #13]
 8002424:	b29a      	uxth	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2302      	movs	r3, #2
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002432:	2178      	movs	r1, #120	; 0x78
 8002434:	4822      	ldr	r0, [pc, #136]	; (80024c0 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002436:	f00b fb09 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800243a:	7b3b      	ldrb	r3, [r7, #12]
 800243c:	b29a      	uxth	r2, r3
 800243e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	2302      	movs	r3, #2
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	2178      	movs	r1, #120	; 0x78
 800244c:	481d      	ldr	r0, [pc, #116]	; (80024c4 <FreqMenu_DrawPresetMenu+0x10c0>)
 800244e:	f00b fafd 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	b29a      	uxth	r2, r3
 8002456:	2300      	movs	r3, #0
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2302      	movs	r3, #2
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002462:	2178      	movs	r1, #120	; 0x78
 8002464:	4818      	ldr	r0, [pc, #96]	; (80024c8 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002466:	f00b faf1 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800246a:	7abb      	ldrb	r3, [r7, #10]
 800246c:	b29a      	uxth	r2, r3
 800246e:	2300      	movs	r3, #0
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2302      	movs	r3, #2
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800247a:	2178      	movs	r1, #120	; 0x78
 800247c:	4813      	ldr	r0, [pc, #76]	; (80024cc <FreqMenu_DrawPresetMenu+0x10c8>)
 800247e:	f00b fae5 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002482:	7a7b      	ldrb	r3, [r7, #9]
 8002484:	b29a      	uxth	r2, r3
 8002486:	2300      	movs	r3, #0
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2302      	movs	r3, #2
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002492:	2178      	movs	r1, #120	; 0x78
 8002494:	480e      	ldr	r0, [pc, #56]	; (80024d0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002496:	f00b fad9 	bl	800da4c <ILI9341_Draw_Text>
				break;
 800249a:	e23f      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
 800249c:	0801286c 	.word	0x0801286c
 80024a0:	08012874 	.word	0x08012874
 80024a4:	0801287c 	.word	0x0801287c
 80024a8:	08012884 	.word	0x08012884
 80024ac:	0801288c 	.word	0x0801288c
 80024b0:	08012894 	.word	0x08012894
 80024b4:	0801289c 	.word	0x0801289c
 80024b8:	080128a4 	.word	0x080128a4
 80024bc:	080128ac 	.word	0x080128ac
 80024c0:	080128b4 	.word	0x080128b4
 80024c4:	080128bc 	.word	0x080128bc
 80024c8:	080128c4 	.word	0x080128c4
 80024cc:	080128cc 	.word	0x080128cc
 80024d0:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2105      	movs	r1, #5
 80024e6:	48a4      	ldr	r0, [pc, #656]	; (8002778 <FreqMenu_DrawPresetMenu+0x1374>)
 80024e8:	f00b fab0 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fc:	2105      	movs	r1, #5
 80024fe:	489f      	ldr	r0, [pc, #636]	; (800277c <FreqMenu_DrawPresetMenu+0x1378>)
 8002500:	f00b faa4 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002504:	7b7b      	ldrb	r3, [r7, #13]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2302      	movs	r3, #2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002514:	2105      	movs	r1, #5
 8002516:	489a      	ldr	r0, [pc, #616]	; (8002780 <FreqMenu_DrawPresetMenu+0x137c>)
 8002518:	f00b fa98 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251c:	7b3b      	ldrb	r3, [r7, #12]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252c:	2105      	movs	r1, #5
 800252e:	4895      	ldr	r0, [pc, #596]	; (8002784 <FreqMenu_DrawPresetMenu+0x1380>)
 8002530:	f00b fa8c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	b29a      	uxth	r2, r3
 8002538:	2300      	movs	r3, #0
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	2302      	movs	r3, #2
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002544:	2105      	movs	r1, #5
 8002546:	4890      	ldr	r0, [pc, #576]	; (8002788 <FreqMenu_DrawPresetMenu+0x1384>)
 8002548:	f00b fa80 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254c:	7abb      	ldrb	r3, [r7, #10]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255c:	2105      	movs	r1, #5
 800255e:	488b      	ldr	r0, [pc, #556]	; (800278c <FreqMenu_DrawPresetMenu+0x1388>)
 8002560:	f00b fa74 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002564:	7a7b      	ldrb	r3, [r7, #9]
 8002566:	b29a      	uxth	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2302      	movs	r3, #2
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002574:	2105      	movs	r1, #5
 8002576:	4886      	ldr	r0, [pc, #536]	; (8002790 <FreqMenu_DrawPresetMenu+0x138c>)
 8002578:	f00b fa68 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	b29a      	uxth	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2302      	movs	r3, #2
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258c:	2178      	movs	r1, #120	; 0x78
 800258e:	4881      	ldr	r0, [pc, #516]	; (8002794 <FreqMenu_DrawPresetMenu+0x1390>)
 8002590:	f00b fa5c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	b29a      	uxth	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	2302      	movs	r3, #2
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	487c      	ldr	r0, [pc, #496]	; (8002798 <FreqMenu_DrawPresetMenu+0x1394>)
 80025a8:	f00b fa50 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	2302      	movs	r3, #2
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025bc:	2178      	movs	r1, #120	; 0x78
 80025be:	4877      	ldr	r0, [pc, #476]	; (800279c <FreqMenu_DrawPresetMenu+0x1398>)
 80025c0:	f00b fa44 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	2300      	movs	r3, #0
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	2302      	movs	r3, #2
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d4:	2178      	movs	r1, #120	; 0x78
 80025d6:	4872      	ldr	r0, [pc, #456]	; (80027a0 <FreqMenu_DrawPresetMenu+0x139c>)
 80025d8:	f00b fa38 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	2178      	movs	r1, #120	; 0x78
 80025ee:	486d      	ldr	r0, [pc, #436]	; (80027a4 <FreqMenu_DrawPresetMenu+0x13a0>)
 80025f0:	f00b fa2c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f4:	7abb      	ldrb	r3, [r7, #10]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2302      	movs	r3, #2
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002604:	2178      	movs	r1, #120	; 0x78
 8002606:	4868      	ldr	r0, [pc, #416]	; (80027a8 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002608:	f00b fa20 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260c:	7a7b      	ldrb	r3, [r7, #9]
 800260e:	b29a      	uxth	r2, r3
 8002610:	2300      	movs	r3, #0
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2302      	movs	r3, #2
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261c:	2178      	movs	r1, #120	; 0x78
 800261e:	4863      	ldr	r0, [pc, #396]	; (80027ac <FreqMenu_DrawPresetMenu+0x13a8>)
 8002620:	f00b fa14 	bl	800da4c <ILI9341_Draw_Text>
			break;
 8002624:	e17a      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002636:	2105      	movs	r1, #5
 8002638:	484f      	ldr	r0, [pc, #316]	; (8002778 <FreqMenu_DrawPresetMenu+0x1374>)
 800263a:	f00b fa07 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	b29a      	uxth	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264e:	2105      	movs	r1, #5
 8002650:	484a      	ldr	r0, [pc, #296]	; (800277c <FreqMenu_DrawPresetMenu+0x1378>)
 8002652:	f00b f9fb 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002656:	7b7b      	ldrb	r3, [r7, #13]
 8002658:	b29a      	uxth	r2, r3
 800265a:	2300      	movs	r3, #0
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002666:	2105      	movs	r1, #5
 8002668:	4845      	ldr	r0, [pc, #276]	; (8002780 <FreqMenu_DrawPresetMenu+0x137c>)
 800266a:	f00b f9ef 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266e:	7b3b      	ldrb	r3, [r7, #12]
 8002670:	b29a      	uxth	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267e:	2105      	movs	r1, #5
 8002680:	4840      	ldr	r0, [pc, #256]	; (8002784 <FreqMenu_DrawPresetMenu+0x1380>)
 8002682:	f00b f9e3 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002696:	2105      	movs	r1, #5
 8002698:	483b      	ldr	r0, [pc, #236]	; (8002788 <FreqMenu_DrawPresetMenu+0x1384>)
 800269a:	f00b f9d7 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800269e:	7abb      	ldrb	r3, [r7, #10]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	2300      	movs	r3, #0
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2302      	movs	r3, #2
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ae:	2105      	movs	r1, #5
 80026b0:	4836      	ldr	r0, [pc, #216]	; (800278c <FreqMenu_DrawPresetMenu+0x1388>)
 80026b2:	f00b f9cb 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b6:	7a7b      	ldrb	r3, [r7, #9]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c6:	2105      	movs	r1, #5
 80026c8:	4831      	ldr	r0, [pc, #196]	; (8002790 <FreqMenu_DrawPresetMenu+0x138c>)
 80026ca:	f00b f9bf 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026de:	2178      	movs	r1, #120	; 0x78
 80026e0:	482c      	ldr	r0, [pc, #176]	; (8002794 <FreqMenu_DrawPresetMenu+0x1390>)
 80026e2:	f00b f9b3 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e6:	7bbb      	ldrb	r3, [r7, #14]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f6:	2178      	movs	r1, #120	; 0x78
 80026f8:	4827      	ldr	r0, [pc, #156]	; (8002798 <FreqMenu_DrawPresetMenu+0x1394>)
 80026fa:	f00b f9a7 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026fe:	7b7b      	ldrb	r3, [r7, #13]
 8002700:	b29a      	uxth	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2302      	movs	r3, #2
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800270e:	2178      	movs	r1, #120	; 0x78
 8002710:	4822      	ldr	r0, [pc, #136]	; (800279c <FreqMenu_DrawPresetMenu+0x1398>)
 8002712:	f00b f99b 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	b29a      	uxth	r2, r3
 800271a:	2300      	movs	r3, #0
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2302      	movs	r3, #2
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002726:	2178      	movs	r1, #120	; 0x78
 8002728:	481d      	ldr	r0, [pc, #116]	; (80027a0 <FreqMenu_DrawPresetMenu+0x139c>)
 800272a:	f00b f98f 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	b29a      	uxth	r2, r3
 8002732:	2300      	movs	r3, #0
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2302      	movs	r3, #2
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800273e:	2178      	movs	r1, #120	; 0x78
 8002740:	4818      	ldr	r0, [pc, #96]	; (80027a4 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002742:	f00b f983 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002746:	7abb      	ldrb	r3, [r7, #10]
 8002748:	b29a      	uxth	r2, r3
 800274a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	2302      	movs	r3, #2
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	2178      	movs	r1, #120	; 0x78
 8002758:	4813      	ldr	r0, [pc, #76]	; (80027a8 <FreqMenu_DrawPresetMenu+0x13a4>)
 800275a:	f00b f977 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800275e:	7a7b      	ldrb	r3, [r7, #9]
 8002760:	b29a      	uxth	r2, r3
 8002762:	2300      	movs	r3, #0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2302      	movs	r3, #2
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800276e:	2178      	movs	r1, #120	; 0x78
 8002770:	480e      	ldr	r0, [pc, #56]	; (80027ac <FreqMenu_DrawPresetMenu+0x13a8>)
 8002772:	f00b f96b 	bl	800da4c <ILI9341_Draw_Text>
			break;
 8002776:	e0d1      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
 8002778:	0801286c 	.word	0x0801286c
 800277c:	08012874 	.word	0x08012874
 8002780:	0801287c 	.word	0x0801287c
 8002784:	08012884 	.word	0x08012884
 8002788:	0801288c 	.word	0x0801288c
 800278c:	08012894 	.word	0x08012894
 8002790:	0801289c 	.word	0x0801289c
 8002794:	080128a4 	.word	0x080128a4
 8002798:	080128ac 	.word	0x080128ac
 800279c:	080128b4 	.word	0x080128b4
 80027a0:	080128bc 	.word	0x080128bc
 80027a4:	080128c4 	.word	0x080128c4
 80027a8:	080128cc 	.word	0x080128cc
 80027ac:	080128d4 	.word	0x080128d4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2105      	movs	r1, #5
 80027c2:	4858      	ldr	r0, [pc, #352]	; (8002924 <FreqMenu_DrawPresetMenu+0x1520>)
 80027c4:	f00b f942 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027c8:	7bbb      	ldrb	r3, [r7, #14]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2302      	movs	r3, #2
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027d8:	2105      	movs	r1, #5
 80027da:	4853      	ldr	r0, [pc, #332]	; (8002928 <FreqMenu_DrawPresetMenu+0x1524>)
 80027dc:	f00b f936 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f0:	2105      	movs	r1, #5
 80027f2:	484e      	ldr	r0, [pc, #312]	; (800292c <FreqMenu_DrawPresetMenu+0x1528>)
 80027f4:	f00b f92a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f8:	7b3b      	ldrb	r3, [r7, #12]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002808:	2105      	movs	r1, #5
 800280a:	4849      	ldr	r0, [pc, #292]	; (8002930 <FreqMenu_DrawPresetMenu+0x152c>)
 800280c:	f00b f91e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2302      	movs	r3, #2
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002820:	2105      	movs	r1, #5
 8002822:	4844      	ldr	r0, [pc, #272]	; (8002934 <FreqMenu_DrawPresetMenu+0x1530>)
 8002824:	f00b f912 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002828:	7abb      	ldrb	r3, [r7, #10]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002838:	2105      	movs	r1, #5
 800283a:	483f      	ldr	r0, [pc, #252]	; (8002938 <FreqMenu_DrawPresetMenu+0x1534>)
 800283c:	f00b f906 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002840:	7a7b      	ldrb	r3, [r7, #9]
 8002842:	b29a      	uxth	r2, r3
 8002844:	2300      	movs	r3, #0
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2302      	movs	r3, #2
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002850:	2105      	movs	r1, #5
 8002852:	483a      	ldr	r0, [pc, #232]	; (800293c <FreqMenu_DrawPresetMenu+0x1538>)
 8002854:	f00b f8fa 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2178      	movs	r1, #120	; 0x78
 800286a:	4835      	ldr	r0, [pc, #212]	; (8002940 <FreqMenu_DrawPresetMenu+0x153c>)
 800286c:	f00b f8ee 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2178      	movs	r1, #120	; 0x78
 8002882:	4830      	ldr	r0, [pc, #192]	; (8002944 <FreqMenu_DrawPresetMenu+0x1540>)
 8002884:	f00b f8e2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	b29a      	uxth	r2, r3
 800288c:	2300      	movs	r3, #0
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	2302      	movs	r3, #2
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002898:	2178      	movs	r1, #120	; 0x78
 800289a:	482b      	ldr	r0, [pc, #172]	; (8002948 <FreqMenu_DrawPresetMenu+0x1544>)
 800289c:	f00b f8d6 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a0:	7b3b      	ldrb	r3, [r7, #12]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2302      	movs	r3, #2
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b0:	2178      	movs	r1, #120	; 0x78
 80028b2:	4826      	ldr	r0, [pc, #152]	; (800294c <FreqMenu_DrawPresetMenu+0x1548>)
 80028b4:	f00b f8ca 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	2300      	movs	r3, #0
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2302      	movs	r3, #2
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c8:	2178      	movs	r1, #120	; 0x78
 80028ca:	4821      	ldr	r0, [pc, #132]	; (8002950 <FreqMenu_DrawPresetMenu+0x154c>)
 80028cc:	f00b f8be 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d0:	7abb      	ldrb	r3, [r7, #10]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	2300      	movs	r3, #0
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2302      	movs	r3, #2
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e0:	2178      	movs	r1, #120	; 0x78
 80028e2:	481c      	ldr	r0, [pc, #112]	; (8002954 <FreqMenu_DrawPresetMenu+0x1550>)
 80028e4:	f00b f8b2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2300      	movs	r3, #0
 80028f8:	2178      	movs	r1, #120	; 0x78
 80028fa:	4817      	ldr	r0, [pc, #92]	; (8002958 <FreqMenu_DrawPresetMenu+0x1554>)
 80028fc:	f00b f8a6 	bl	800da4c <ILI9341_Draw_Text>
			break;
 8002900:	bf00      	nop
 8002902:	e00b      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002904:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2301      	movs	r3, #1
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	22b4      	movs	r2, #180	; 0xb4
 8002912:	2105      	movs	r1, #5
 8002914:	4811      	ldr	r0, [pc, #68]	; (800295c <FreqMenu_DrawPresetMenu+0x1558>)
 8002916:	f00b f899 	bl	800da4c <ILI9341_Draw_Text>
}
 800291a:	e7ff      	b.n	800291c <FreqMenu_DrawPresetMenu+0x1518>
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	0801286c 	.word	0x0801286c
 8002928:	08012874 	.word	0x08012874
 800292c:	0801287c 	.word	0x0801287c
 8002930:	08012884 	.word	0x08012884
 8002934:	0801288c 	.word	0x0801288c
 8002938:	08012894 	.word	0x08012894
 800293c:	0801289c 	.word	0x0801289c
 8002940:	080128a4 	.word	0x080128a4
 8002944:	080128ac 	.word	0x080128ac
 8002948:	080128b4 	.word	0x080128b4
 800294c:	080128bc 	.word	0x080128bc
 8002950:	080128c4 	.word	0x080128c4
 8002954:	080128cc 	.word	0x080128cc
 8002958:	080128d4 	.word	0x080128d4
 800295c:	080128e0 	.word	0x080128e0

08002960 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2302      	movs	r3, #2
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	220a      	movs	r2, #10
 8002974:	2105      	movs	r1, #5
 8002976:	4804      	ldr	r0, [pc, #16]	; (8002988 <FreqMenu_DrawAdjustMenu+0x28>)
 8002978:	f00b f868 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800297c:	f7fe fabc 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08012910 	.word	0x08012910

0800298c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b0a0      	sub	sp, #128	; 0x80
 8002990:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2302      	movs	r3, #2
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2300      	movs	r3, #0
 800299e:	220a      	movs	r2, #10
 80029a0:	2105      	movs	r1, #5
 80029a2:	48a1      	ldr	r0, [pc, #644]	; (8002c28 <FreqMenu_DrawSweepMenu+0x29c>)
 80029a4:	f00b f852 	bl	800da4c <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 80029a8:	2300      	movs	r3, #0
 80029aa:	667b      	str	r3, [r7, #100]	; 0x64
 80029ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 80029ba:	4b9c      	ldr	r3, [pc, #624]	; (8002c2c <FreqMenu_DrawSweepMenu+0x2a0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d109      	bne.n	80029da <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 80029c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029ca:	4a99      	ldr	r2, [pc, #612]	; (8002c30 <FreqMenu_DrawSweepMenu+0x2a4>)
 80029cc:	461c      	mov	r4, r3
 80029ce:	4615      	mov	r5, r2
 80029d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	7023      	strb	r3, [r4, #0]
 80029d8:	e008      	b.n	80029ec <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 80029da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029de:	4a95      	ldr	r2, [pc, #596]	; (8002c34 <FreqMenu_DrawSweepMenu+0x2a8>)
 80029e0:	461c      	mov	r4, r3
 80029e2:	4615      	mov	r5, r2
 80029e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2228      	movs	r2, #40	; 0x28
 80029fe:	2105      	movs	r1, #5
 8002a00:	f00b f824 	bl	800da4c <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002a04:	2300      	movs	r3, #0
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002a1a:	f002 fdd9 	bl	80055d0 <SM_GetOutputInHertz>
 8002a1e:	ee10 3a10 	vmov	r3, s0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fdb8 	bl	8000598 <__aeabi_f2d>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002a30:	e9cd 3400 	strd	r3, r4, [sp]
 8002a34:	4a80      	ldr	r2, [pc, #512]	; (8002c38 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002a36:	2119      	movs	r1, #25
 8002a38:	f00c fbac 	bl	800f194 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a3c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002a40:	2300      	movs	r3, #0
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2302      	movs	r3, #2
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a4c:	223c      	movs	r2, #60	; 0x3c
 8002a4e:	2105      	movs	r1, #5
 8002a50:	f00a fffc 	bl	800da4c <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a54:	2300      	movs	r3, #0
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a60:	2264      	movs	r2, #100	; 0x64
 8002a62:	2105      	movs	r1, #5
 8002a64:	4875      	ldr	r0, [pc, #468]	; (8002c3c <FreqMenu_DrawSweepMenu+0x2b0>)
 8002a66:	f00a fff1 	bl	800da4c <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002a6a:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <FreqMenu_DrawSweepMenu+0x2a0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d117      	bne.n	8002aa6 <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a82:	2264      	movs	r2, #100	; 0x64
 8002a84:	21eb      	movs	r1, #235	; 0xeb
 8002a86:	486e      	ldr	r0, [pc, #440]	; (8002c40 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a88:	f00a ffe0 	bl	800da4c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2302      	movs	r3, #2
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2264      	movs	r2, #100	; 0x64
 8002a9a:	f240 1109 	movw	r1, #265	; 0x109
 8002a9e:	4869      	ldr	r0, [pc, #420]	; (8002c44 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002aa0:	f00a ffd4 	bl	800da4c <ILI9341_Draw_Text>
 8002aa4:	e016      	b.n	8002ad4 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab2:	2264      	movs	r2, #100	; 0x64
 8002ab4:	f240 1109 	movw	r1, #265	; 0x109
 8002ab8:	4862      	ldr	r0, [pc, #392]	; (8002c44 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002aba:	f00a ffc7 	bl	800da4c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002abe:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2264      	movs	r2, #100	; 0x64
 8002acc:	21eb      	movs	r1, #235	; 0xeb
 8002ace:	485c      	ldr	r0, [pc, #368]	; (8002c40 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002ad0:	f00a ffbc 	bl	800da4c <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002adc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2278      	movs	r2, #120	; 0x78
 8002aea:	2105      	movs	r1, #5
 8002aec:	4857      	ldr	r0, [pc, #348]	; (8002c4c <FreqMenu_DrawSweepMenu+0x2c0>)
 8002aee:	f00a ffad 	bl	800da4c <ILI9341_Draw_Text>
 8002af2:	e00a      	b.n	8002b0a <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2302      	movs	r3, #2
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b00:	2278      	movs	r2, #120	; 0x78
 8002b02:	2105      	movs	r1, #5
 8002b04:	4851      	ldr	r0, [pc, #324]	; (8002c4c <FreqMenu_DrawSweepMenu+0x2c0>)
 8002b06:	f00a ffa1 	bl	800da4c <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd37 	bl	8000598 <__aeabi_f2d>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002b32:	e9cd 3400 	strd	r3, r4, [sp]
 8002b36:	4a47      	ldr	r2, [pc, #284]	; (8002c54 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002b38:	2119      	movs	r1, #25
 8002b3a:	f00c fb2b 	bl	800f194 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002b42:	2300      	movs	r3, #0
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b4e:	2278      	movs	r2, #120	; 0x78
 8002b50:	21b6      	movs	r1, #182	; 0xb6
 8002b52:	f00a ff7b 	bl	800da4c <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10f      	bne.n	8002b7e <FreqMenu_DrawSweepMenu+0x1f2>
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002b66:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	228c      	movs	r2, #140	; 0x8c
 8002b74:	2105      	movs	r1, #5
 8002b76:	4839      	ldr	r0, [pc, #228]	; (8002c5c <FreqMenu_DrawSweepMenu+0x2d0>)
 8002b78:	f00a ff68 	bl	800da4c <ILI9341_Draw_Text>
 8002b7c:	e00a      	b.n	8002b94 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2302      	movs	r3, #2
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b8a:	228c      	movs	r2, #140	; 0x8c
 8002b8c:	2105      	movs	r1, #5
 8002b8e:	4833      	ldr	r0, [pc, #204]	; (8002c5c <FreqMenu_DrawSweepMenu+0x2d0>)
 8002b90:	f00a ff5c 	bl	800da4c <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	ee17 0a90 	vmov	r0, s15
 8002bbc:	f002 fd4c 	bl	8005658 <SM_ConvertPeriodToHertz>
 8002bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bc4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002c68 <FreqMenu_DrawSweepMenu+0x2dc>
 8002bc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bcc:	ee16 0a90 	vmov	r0, s13
 8002bd0:	f7fd fce2 	bl	8000598 <__aeabi_f2d>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	f107 0018 	add.w	r0, r7, #24
 8002bdc:	e9cd 3400 	strd	r3, r4, [sp]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <FreqMenu_DrawSweepMenu+0x2e0>)
 8002be2:	2114      	movs	r1, #20
 8002be4:	f00c fad6 	bl	800f194 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002be8:	f107 0018 	add.w	r0, r7, #24
 8002bec:	2300      	movs	r3, #0
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bf8:	228c      	movs	r2, #140	; 0x8c
 8002bfa:	219e      	movs	r1, #158	; 0x9e
 8002bfc:	f00a ff26 	bl	800da4c <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d135      	bne.n	8002c74 <FreqMenu_DrawSweepMenu+0x2e8>
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d131      	bne.n	8002c74 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002c10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2302      	movs	r3, #2
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	22a0      	movs	r2, #160	; 0xa0
 8002c1e:	2105      	movs	r1, #5
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002c22:	f00a ff13 	bl	800da4c <ILI9341_Draw_Text>
 8002c26:	e030      	b.n	8002c8a <FreqMenu_DrawSweepMenu+0x2fe>
 8002c28:	08012924 	.word	0x08012924
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	08012938 	.word	0x08012938
 8002c34:	0801294c 	.word	0x0801294c
 8002c38:	08012960 	.word	0x08012960
 8002c3c:	08012974 	.word	0x08012974
 8002c40:	08012980 	.word	0x08012980
 8002c44:	08012984 	.word	0x08012984
 8002c48:	20001b05 	.word	0x20001b05
 8002c4c:	0801298c 	.word	0x0801298c
 8002c50:	20001b20 	.word	0x20001b20
 8002c54:	0801299c 	.word	0x0801299c
 8002c58:	20001b04 	.word	0x20001b04
 8002c5c:	080129a8 	.word	0x080129a8
 8002c60:	20000000 	.word	0x20000000
 8002c64:	40013400 	.word	0x40013400
 8002c68:	42f00000 	.word	0x42f00000
 8002c6c:	080129b8 	.word	0x080129b8
 8002c70:	080129c4 	.word	0x080129c4
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c74:	2300      	movs	r3, #0
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2302      	movs	r3, #2
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c80:	22a0      	movs	r2, #160	; 0xa0
 8002c82:	2105      	movs	r1, #5
 8002c84:	484d      	ldr	r0, [pc, #308]	; (8002dbc <FreqMenu_DrawSweepMenu+0x430>)
 8002c86:	f00a fee1 	bl	800da4c <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <FreqMenu_DrawSweepMenu+0x434>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <FreqMenu_DrawSweepMenu+0x438>)
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4619      	mov	r1, r3
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f002 fcd1 	bl	8005658 <SM_ConvertPeriodToHertz>
 8002cb6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cba:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002dc8 <FreqMenu_DrawSweepMenu+0x43c>
 8002cbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cc2:	ee16 0a90 	vmov	r0, s13
 8002cc6:	f7fd fc67 	bl	8000598 <__aeabi_f2d>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	460c      	mov	r4, r1
 8002cce:	1d38      	adds	r0, r7, #4
 8002cd0:	e9cd 3400 	strd	r3, r4, [sp]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <FreqMenu_DrawSweepMenu+0x440>)
 8002cd6:	2114      	movs	r1, #20
 8002cd8:	f00c fa5c 	bl	800f194 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	1d38      	adds	r0, r7, #4
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cea:	22a0      	movs	r2, #160	; 0xa0
 8002cec:	21aa      	movs	r1, #170	; 0xaa
 8002cee:	f00a fead 	bl	800da4c <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <FreqMenu_DrawSweepMenu+0x444>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10b      	bne.n	8002d16 <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002cfe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	2302      	movs	r3, #2
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	22d5      	movs	r2, #213	; 0xd5
 8002d0c:	2106      	movs	r1, #6
 8002d0e:	4831      	ldr	r0, [pc, #196]	; (8002dd4 <FreqMenu_DrawSweepMenu+0x448>)
 8002d10:	f00a fe9c 	bl	800da4c <ILI9341_Draw_Text>
 8002d14:	e00a      	b.n	8002d2c <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002d16:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	22d5      	movs	r2, #213	; 0xd5
 8002d24:	2105      	movs	r1, #5
 8002d26:	482c      	ldr	r0, [pc, #176]	; (8002dd8 <FreqMenu_DrawSweepMenu+0x44c>)
 8002d28:	f00a fe90 	bl	800da4c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002d2c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2302      	movs	r3, #2
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	22cc      	movs	r2, #204	; 0xcc
 8002d3a:	2169      	movs	r1, #105	; 0x69
 8002d3c:	4827      	ldr	r0, [pc, #156]	; (8002ddc <FreqMenu_DrawSweepMenu+0x450>)
 8002d3e:	f00a fe85 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002d42:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	2302      	movs	r3, #2
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	22de      	movs	r2, #222	; 0xde
 8002d50:	2162      	movs	r1, #98	; 0x62
 8002d52:	4823      	ldr	r0, [pc, #140]	; (8002de0 <FreqMenu_DrawSweepMenu+0x454>)
 8002d54:	f00a fe7a 	bl	800da4c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002d58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	2302      	movs	r3, #2
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2300      	movs	r3, #0
 8002d64:	22cc      	movs	r2, #204	; 0xcc
 8002d66:	21b7      	movs	r1, #183	; 0xb7
 8002d68:	481c      	ldr	r0, [pc, #112]	; (8002ddc <FreqMenu_DrawSweepMenu+0x450>)
 8002d6a:	f00a fe6f 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002d6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2302      	movs	r3, #2
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	22de      	movs	r2, #222	; 0xde
 8002d7c:	21ad      	movs	r1, #173	; 0xad
 8002d7e:	4819      	ldr	r0, [pc, #100]	; (8002de4 <FreqMenu_DrawSweepMenu+0x458>)
 8002d80:	f00a fe64 	bl	800da4c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002d84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	22cc      	movs	r2, #204	; 0xcc
 8002d92:	f240 1107 	movw	r1, #263	; 0x107
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <FreqMenu_DrawSweepMenu+0x450>)
 8002d98:	f00a fe58 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002d9c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2302      	movs	r3, #2
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	22de      	movs	r2, #222	; 0xde
 8002daa:	21fc      	movs	r1, #252	; 0xfc
 8002dac:	480e      	ldr	r0, [pc, #56]	; (8002de8 <FreqMenu_DrawSweepMenu+0x45c>)
 8002dae:	f00a fe4d 	bl	800da4c <ILI9341_Draw_Text>
}
 8002db2:	bf00      	nop
 8002db4:	3778      	adds	r7, #120	; 0x78
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	080129c4 	.word	0x080129c4
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	40013400 	.word	0x40013400
 8002dc8:	42f00000 	.word	0x42f00000
 8002dcc:	080129d4 	.word	0x080129d4
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	080129e0 	.word	0x080129e0
 8002dd8:	080129e8 	.word	0x080129e8
 8002ddc:	080129f0 	.word	0x080129f0
 8002de0:	080129f4 	.word	0x080129f4
 8002de4:	080129fc 	.word	0x080129fc
 8002de8:	08012a04 	.word	0x08012a04

08002dec <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d007      	beq.n	8002e0c <FuncMenu_DrawMenu+0x20>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d009      	beq.n	8002e14 <FuncMenu_DrawMenu+0x28>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d000      	beq.n	8002e06 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002e04:	e00a      	b.n	8002e1c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002e06:	f000 f80d 	bl	8002e24 <FuncMenu_DrawMainMenu>
			break;
 8002e0a:	e007      	b.n	8002e1c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 f851 	bl	8002eb4 <FuncMenu_DrawOutputMenu>
			break;
 8002e12:	e003      	b.n	8002e1c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f000 f84d 	bl	8002eb4 <FuncMenu_DrawOutputMenu>
			break;
 8002e1a:	bf00      	nop

	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	2302      	movs	r3, #2
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2300      	movs	r3, #0
 8002e36:	220a      	movs	r2, #10
 8002e38:	210a      	movs	r1, #10
 8002e3a:	481a      	ldr	r0, [pc, #104]	; (8002ea4 <FuncMenu_DrawMainMenu+0x80>)
 8002e3c:	f00a fe06 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002e40:	f7fe f85a 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002e44:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	22d2      	movs	r2, #210	; 0xd2
 8002e52:	2105      	movs	r1, #5
 8002e54:	4814      	ldr	r0, [pc, #80]	; (8002ea8 <FuncMenu_DrawMainMenu+0x84>)
 8002e56:	f00a fdf9 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002e5a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	22d2      	movs	r2, #210	; 0xd2
 8002e68:	2161      	movs	r1, #97	; 0x61
 8002e6a:	4810      	ldr	r0, [pc, #64]	; (8002eac <FuncMenu_DrawMainMenu+0x88>)
 8002e6c:	f00a fdee 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002e70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2302      	movs	r3, #2
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	22d2      	movs	r2, #210	; 0xd2
 8002e7e:	21af      	movs	r1, #175	; 0xaf
 8002e80:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <FuncMenu_DrawMainMenu+0x8c>)
 8002e82:	f00a fde3 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002e86:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	22d2      	movs	r2, #210	; 0xd2
 8002e94:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <FuncMenu_DrawMainMenu+0x8c>)
 8002e9a:	f00a fdd7 	bl	800da4c <ILI9341_Draw_Text>
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08012a0c 	.word	0x08012a0c
 8002ea8:	08012a18 	.word	0x08012a18
 8002eac:	08012a20 	.word	0x08012a20
 8002eb0:	08012a28 	.word	0x08012a28

08002eb4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	220a      	movs	r2, #10
 8002ecc:	210a      	movs	r1, #10
 8002ece:	48b9      	ldr	r0, [pc, #740]	; (80031b4 <FuncMenu_DrawOutputMenu+0x300>)
 8002ed0:	f00a fdbc 	bl	800da4c <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fb48 	bl	800556c <SM_GetOutputChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002ee2:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 81b5 	beq.w	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
	{
		switch(func_profileTmp->func)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	f200 81b0 	bhi.w	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <FuncMenu_DrawOutputMenu+0x48>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f9b 	.word	0x08002f9b
 8002f04:	08003021 	.word	0x08003021
 8002f08:	080030a7 	.word	0x080030a7
 8002f0c:	0800312d 	.word	0x0800312d
 8002f10:	080031d1 	.word	0x080031d1
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002f14:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2232      	movs	r2, #50	; 0x32
 8002f22:	210a      	movs	r1, #10
 8002f24:	48a4      	ldr	r0, [pc, #656]	; (80031b8 <FuncMenu_DrawOutputMenu+0x304>)
 8002f26:	f00a fd91 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	2302      	movs	r3, #2
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f36:	2246      	movs	r2, #70	; 0x46
 8002f38:	210a      	movs	r1, #10
 8002f3a:	48a0      	ldr	r0, [pc, #640]	; (80031bc <FuncMenu_DrawOutputMenu+0x308>)
 8002f3c:	f00a fd86 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2302      	movs	r3, #2
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f4c:	225a      	movs	r2, #90	; 0x5a
 8002f4e:	210a      	movs	r1, #10
 8002f50:	489b      	ldr	r0, [pc, #620]	; (80031c0 <FuncMenu_DrawOutputMenu+0x30c>)
 8002f52:	f00a fd7b 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f56:	2300      	movs	r3, #0
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f62:	226e      	movs	r2, #110	; 0x6e
 8002f64:	210a      	movs	r1, #10
 8002f66:	4897      	ldr	r0, [pc, #604]	; (80031c4 <FuncMenu_DrawOutputMenu+0x310>)
 8002f68:	f00a fd70 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2302      	movs	r3, #2
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f78:	2282      	movs	r2, #130	; 0x82
 8002f7a:	210a      	movs	r1, #10
 8002f7c:	4892      	ldr	r0, [pc, #584]	; (80031c8 <FuncMenu_DrawOutputMenu+0x314>)
 8002f7e:	f00a fd65 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f82:	2300      	movs	r3, #0
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2302      	movs	r3, #2
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f8e:	2296      	movs	r2, #150	; 0x96
 8002f90:	210a      	movs	r1, #10
 8002f92:	488e      	ldr	r0, [pc, #568]	; (80031cc <FuncMenu_DrawOutputMenu+0x318>)
 8002f94:	f00a fd5a 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8002f98:	e15d      	b.n	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa6:	2232      	movs	r2, #50	; 0x32
 8002fa8:	210a      	movs	r1, #10
 8002faa:	4883      	ldr	r0, [pc, #524]	; (80031b8 <FuncMenu_DrawOutputMenu+0x304>)
 8002fac:	f00a fd4e 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002fb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2246      	movs	r2, #70	; 0x46
 8002fbe:	210a      	movs	r1, #10
 8002fc0:	487e      	ldr	r0, [pc, #504]	; (80031bc <FuncMenu_DrawOutputMenu+0x308>)
 8002fc2:	f00a fd43 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fd2:	225a      	movs	r2, #90	; 0x5a
 8002fd4:	210a      	movs	r1, #10
 8002fd6:	487a      	ldr	r0, [pc, #488]	; (80031c0 <FuncMenu_DrawOutputMenu+0x30c>)
 8002fd8:	f00a fd38 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fe8:	226e      	movs	r2, #110	; 0x6e
 8002fea:	210a      	movs	r1, #10
 8002fec:	4875      	ldr	r0, [pc, #468]	; (80031c4 <FuncMenu_DrawOutputMenu+0x310>)
 8002fee:	f00a fd2d 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ffe:	2282      	movs	r2, #130	; 0x82
 8003000:	210a      	movs	r1, #10
 8003002:	4871      	ldr	r0, [pc, #452]	; (80031c8 <FuncMenu_DrawOutputMenu+0x314>)
 8003004:	f00a fd22 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003008:	2300      	movs	r3, #0
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2302      	movs	r3, #2
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003014:	2296      	movs	r2, #150	; 0x96
 8003016:	210a      	movs	r1, #10
 8003018:	486c      	ldr	r0, [pc, #432]	; (80031cc <FuncMenu_DrawOutputMenu+0x318>)
 800301a:	f00a fd17 	bl	800da4c <ILI9341_Draw_Text>
				break;
 800301e:	e11a      	b.n	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003020:	2300      	movs	r3, #0
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800302c:	2232      	movs	r2, #50	; 0x32
 800302e:	210a      	movs	r1, #10
 8003030:	4861      	ldr	r0, [pc, #388]	; (80031b8 <FuncMenu_DrawOutputMenu+0x304>)
 8003032:	f00a fd0b 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003036:	2300      	movs	r3, #0
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2302      	movs	r3, #2
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003042:	2246      	movs	r2, #70	; 0x46
 8003044:	210a      	movs	r1, #10
 8003046:	485d      	ldr	r0, [pc, #372]	; (80031bc <FuncMenu_DrawOutputMenu+0x308>)
 8003048:	f00a fd00 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800304c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	225a      	movs	r2, #90	; 0x5a
 800305a:	210a      	movs	r1, #10
 800305c:	4858      	ldr	r0, [pc, #352]	; (80031c0 <FuncMenu_DrawOutputMenu+0x30c>)
 800305e:	f00a fcf5 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003062:	2300      	movs	r3, #0
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800306e:	226e      	movs	r2, #110	; 0x6e
 8003070:	210a      	movs	r1, #10
 8003072:	4854      	ldr	r0, [pc, #336]	; (80031c4 <FuncMenu_DrawOutputMenu+0x310>)
 8003074:	f00a fcea 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2302      	movs	r3, #2
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003084:	2282      	movs	r2, #130	; 0x82
 8003086:	210a      	movs	r1, #10
 8003088:	484f      	ldr	r0, [pc, #316]	; (80031c8 <FuncMenu_DrawOutputMenu+0x314>)
 800308a:	f00a fcdf 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800308e:	2300      	movs	r3, #0
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2302      	movs	r3, #2
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800309a:	2296      	movs	r2, #150	; 0x96
 800309c:	210a      	movs	r1, #10
 800309e:	484b      	ldr	r0, [pc, #300]	; (80031cc <FuncMenu_DrawOutputMenu+0x318>)
 80030a0:	f00a fcd4 	bl	800da4c <ILI9341_Draw_Text>
				break;
 80030a4:	e0d7      	b.n	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030a6:	2300      	movs	r3, #0
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030b2:	2232      	movs	r2, #50	; 0x32
 80030b4:	210a      	movs	r1, #10
 80030b6:	4840      	ldr	r0, [pc, #256]	; (80031b8 <FuncMenu_DrawOutputMenu+0x304>)
 80030b8:	f00a fcc8 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2302      	movs	r3, #2
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	210a      	movs	r1, #10
 80030cc:	483b      	ldr	r0, [pc, #236]	; (80031bc <FuncMenu_DrawOutputMenu+0x308>)
 80030ce:	f00a fcbd 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030d2:	2300      	movs	r3, #0
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2302      	movs	r3, #2
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030de:	225a      	movs	r2, #90	; 0x5a
 80030e0:	210a      	movs	r1, #10
 80030e2:	4837      	ldr	r0, [pc, #220]	; (80031c0 <FuncMenu_DrawOutputMenu+0x30c>)
 80030e4:	f00a fcb2 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	226e      	movs	r2, #110	; 0x6e
 80030f6:	210a      	movs	r1, #10
 80030f8:	4832      	ldr	r0, [pc, #200]	; (80031c4 <FuncMenu_DrawOutputMenu+0x310>)
 80030fa:	f00a fca7 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030fe:	2300      	movs	r3, #0
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800310a:	2282      	movs	r2, #130	; 0x82
 800310c:	210a      	movs	r1, #10
 800310e:	482e      	ldr	r0, [pc, #184]	; (80031c8 <FuncMenu_DrawOutputMenu+0x314>)
 8003110:	f00a fc9c 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003114:	2300      	movs	r3, #0
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	2302      	movs	r3, #2
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003120:	2296      	movs	r2, #150	; 0x96
 8003122:	210a      	movs	r1, #10
 8003124:	4829      	ldr	r0, [pc, #164]	; (80031cc <FuncMenu_DrawOutputMenu+0x318>)
 8003126:	f00a fc91 	bl	800da4c <ILI9341_Draw_Text>
				break;
 800312a:	e094      	b.n	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003138:	2232      	movs	r2, #50	; 0x32
 800313a:	210a      	movs	r1, #10
 800313c:	481e      	ldr	r0, [pc, #120]	; (80031b8 <FuncMenu_DrawOutputMenu+0x304>)
 800313e:	f00a fc85 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800314e:	2246      	movs	r2, #70	; 0x46
 8003150:	210a      	movs	r1, #10
 8003152:	481a      	ldr	r0, [pc, #104]	; (80031bc <FuncMenu_DrawOutputMenu+0x308>)
 8003154:	f00a fc7a 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003164:	225a      	movs	r2, #90	; 0x5a
 8003166:	210a      	movs	r1, #10
 8003168:	4815      	ldr	r0, [pc, #84]	; (80031c0 <FuncMenu_DrawOutputMenu+0x30c>)
 800316a:	f00a fc6f 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	226e      	movs	r2, #110	; 0x6e
 800317c:	210a      	movs	r1, #10
 800317e:	4811      	ldr	r0, [pc, #68]	; (80031c4 <FuncMenu_DrawOutputMenu+0x310>)
 8003180:	f00a fc64 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003184:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2302      	movs	r3, #2
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	2282      	movs	r2, #130	; 0x82
 8003192:	210a      	movs	r1, #10
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <FuncMenu_DrawOutputMenu+0x314>)
 8003196:	f00a fc59 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a6:	2296      	movs	r2, #150	; 0x96
 80031a8:	210a      	movs	r1, #10
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <FuncMenu_DrawOutputMenu+0x318>)
 80031ac:	f00a fc4e 	bl	800da4c <ILI9341_Draw_Text>
				break;
 80031b0:	e051      	b.n	8003256 <FuncMenu_DrawOutputMenu+0x3a2>
 80031b2:	bf00      	nop
 80031b4:	08012a30 	.word	0x08012a30
 80031b8:	08012a40 	.word	0x08012a40
 80031bc:	08012a48 	.word	0x08012a48
 80031c0:	08012a54 	.word	0x08012a54
 80031c4:	08012a5c 	.word	0x08012a5c
 80031c8:	08012a68 	.word	0x08012a68
 80031cc:	08012a74 	.word	0x08012a74
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031d0:	2300      	movs	r3, #0
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	2302      	movs	r3, #2
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031dc:	2232      	movs	r2, #50	; 0x32
 80031de:	210a      	movs	r1, #10
 80031e0:	481f      	ldr	r0, [pc, #124]	; (8003260 <FuncMenu_DrawOutputMenu+0x3ac>)
 80031e2:	f00a fc33 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e6:	2300      	movs	r3, #0
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2302      	movs	r3, #2
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031f2:	2246      	movs	r2, #70	; 0x46
 80031f4:	210a      	movs	r1, #10
 80031f6:	481b      	ldr	r0, [pc, #108]	; (8003264 <FuncMenu_DrawOutputMenu+0x3b0>)
 80031f8:	f00a fc28 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031fc:	2300      	movs	r3, #0
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2302      	movs	r3, #2
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003208:	225a      	movs	r2, #90	; 0x5a
 800320a:	210a      	movs	r1, #10
 800320c:	4816      	ldr	r0, [pc, #88]	; (8003268 <FuncMenu_DrawOutputMenu+0x3b4>)
 800320e:	f00a fc1d 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003212:	2300      	movs	r3, #0
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2302      	movs	r3, #2
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800321e:	226e      	movs	r2, #110	; 0x6e
 8003220:	210a      	movs	r1, #10
 8003222:	4812      	ldr	r0, [pc, #72]	; (800326c <FuncMenu_DrawOutputMenu+0x3b8>)
 8003224:	f00a fc12 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003228:	2300      	movs	r3, #0
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	2302      	movs	r3, #2
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003234:	2282      	movs	r2, #130	; 0x82
 8003236:	210a      	movs	r1, #10
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <FuncMenu_DrawOutputMenu+0x3bc>)
 800323a:	f00a fc07 	bl	800da4c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800323e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2302      	movs	r3, #2
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2296      	movs	r2, #150	; 0x96
 800324c:	210a      	movs	r1, #10
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <FuncMenu_DrawOutputMenu+0x3c0>)
 8003250:	f00a fbfc 	bl	800da4c <ILI9341_Draw_Text>
				break;
 8003254:	bf00      	nop
		}
	}
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	08012a40 	.word	0x08012a40
 8003264:	08012a48 	.word	0x08012a48
 8003268:	08012a54 	.word	0x08012a54
 800326c:	08012a5c 	.word	0x08012a5c
 8003270:	08012a68 	.word	0x08012a68
 8003274:	08012a74 	.word	0x08012a74

08003278 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d007      	beq.n	8003298 <GainMenu_DrawMenu+0x20>
 8003288:	2b03      	cmp	r3, #3
 800328a:	d008      	beq.n	800329e <GainMenu_DrawMenu+0x26>
 800328c:	2b01      	cmp	r3, #1
 800328e:	d000      	beq.n	8003292 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003290:	e008      	b.n	80032a4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003292:	f000 f80b 	bl	80032ac <GainMenu_DrawMainMenu>
			break;
 8003296:	e005      	b.n	80032a4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003298:	f000 f850 	bl	800333c <GainMenu_DrawSignalMenu>
			break;
 800329c:	e002      	b.n	80032a4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 800329e:	f000 f863 	bl	8003368 <GainMenu_DrawSyncMenu>
			break;
 80032a2:	bf00      	nop

	}
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2302      	movs	r3, #2
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	220a      	movs	r2, #10
 80032c0:	210a      	movs	r1, #10
 80032c2:	481a      	ldr	r0, [pc, #104]	; (800332c <GainMenu_DrawMainMenu+0x80>)
 80032c4:	f00a fbc2 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032c8:	f7fd fe16 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032cc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2302      	movs	r3, #2
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	22d2      	movs	r2, #210	; 0xd2
 80032da:	2105      	movs	r1, #5
 80032dc:	4814      	ldr	r0, [pc, #80]	; (8003330 <GainMenu_DrawMainMenu+0x84>)
 80032de:	f00a fbb5 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032e2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	22d2      	movs	r2, #210	; 0xd2
 80032f0:	2161      	movs	r1, #97	; 0x61
 80032f2:	4810      	ldr	r0, [pc, #64]	; (8003334 <GainMenu_DrawMainMenu+0x88>)
 80032f4:	f00a fbaa 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	22d2      	movs	r2, #210	; 0xd2
 8003306:	21af      	movs	r1, #175	; 0xaf
 8003308:	480b      	ldr	r0, [pc, #44]	; (8003338 <GainMenu_DrawMainMenu+0x8c>)
 800330a:	f00a fb9f 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800330e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	22d2      	movs	r2, #210	; 0xd2
 800331c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <GainMenu_DrawMainMenu+0x8c>)
 8003322:	f00a fb93 	bl	800da4c <ILI9341_Draw_Text>
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08012a7c 	.word	0x08012a7c
 8003330:	08012a88 	.word	0x08012a88
 8003334:	08012a90 	.word	0x08012a90
 8003338:	08012a98 	.word	0x08012a98

0800333c <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	2302      	movs	r3, #2
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	220a      	movs	r2, #10
 8003350:	210a      	movs	r1, #10
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <GainMenu_DrawSignalMenu+0x28>)
 8003354:	f00a fb7a 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003358:	f7fd fdce 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08012aa0 	.word	0x08012aa0

08003368 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800336e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	220a      	movs	r2, #10
 800337c:	210a      	movs	r1, #10
 800337e:	4804      	ldr	r0, [pc, #16]	; (8003390 <GainMenu_DrawSyncMenu+0x28>)
 8003380:	f00a fb64 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003384:	f7fd fdb8 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	08012ab0 	.word	0x08012ab0

08003394 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d007      	beq.n	80033b4 <ToplevelMenu_DrawMenu+0x20>
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d008      	beq.n	80033ba <ToplevelMenu_DrawMenu+0x26>
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d000      	beq.n	80033ae <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 80033ac:	e008      	b.n	80033c0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 80033ae:	f000 f80b 	bl	80033c8 <ToplevelMenu_DrawMainMenu>
			break;
 80033b2:	e005      	b.n	80033c0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 80033b4:	f000 f848 	bl	8003448 <ToplevelMenu_DrawOutputMenu>
			break;
 80033b8:	e002      	b.n	80033c0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 80033ba:	f000 f88f 	bl	80034dc <ToplevelMenu_DrawInputMenu>
			break;
 80033be:	bf00      	nop

	}
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 80033ce:	481a      	ldr	r0, [pc, #104]	; (8003438 <ToplevelMenu_DrawMainMenu+0x70>)
 80033d0:	f00b fed8 	bl	800f184 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 80033d4:	f7fd fd90 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033d8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2302      	movs	r3, #2
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	22d2      	movs	r2, #210	; 0xd2
 80033e6:	2106      	movs	r1, #6
 80033e8:	4814      	ldr	r0, [pc, #80]	; (800343c <ToplevelMenu_DrawMainMenu+0x74>)
 80033ea:	f00a fb2f 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033ee:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2302      	movs	r3, #2
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	22d2      	movs	r2, #210	; 0xd2
 80033fc:	215d      	movs	r1, #93	; 0x5d
 80033fe:	4810      	ldr	r0, [pc, #64]	; (8003440 <ToplevelMenu_DrawMainMenu+0x78>)
 8003400:	f00a fb24 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003404:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	22d2      	movs	r2, #210	; 0xd2
 8003412:	21af      	movs	r1, #175	; 0xaf
 8003414:	480b      	ldr	r0, [pc, #44]	; (8003444 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003416:	f00a fb19 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800341a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	22d2      	movs	r2, #210	; 0xd2
 8003428:	f44f 7182 	mov.w	r1, #260	; 0x104
 800342c:	4805      	ldr	r0, [pc, #20]	; (8003444 <ToplevelMenu_DrawMainMenu+0x7c>)
 800342e:	f00a fb0d 	bl	800da4c <ILI9341_Draw_Text>


}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08012ac0 	.word	0x08012ac0
 800343c:	08012ad4 	.word	0x08012ad4
 8003440:	08012adc 	.word	0x08012adc
 8003444:	08012ae4 	.word	0x08012ae4

08003448 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800344e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	2302      	movs	r3, #2
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2300      	movs	r3, #0
 800345a:	220a      	movs	r2, #10
 800345c:	210a      	movs	r1, #10
 800345e:	481a      	ldr	r0, [pc, #104]	; (80034c8 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003460:	f00a faf4 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003464:	f7fd fd48 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003468:	f240 23fd 	movw	r3, #765	; 0x2fd
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2302      	movs	r3, #2
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	22d2      	movs	r2, #210	; 0xd2
 8003476:	210d      	movs	r1, #13
 8003478:	4814      	ldr	r0, [pc, #80]	; (80034cc <ToplevelMenu_DrawOutputMenu+0x84>)
 800347a:	f00a fae7 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800347e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2302      	movs	r3, #2
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	22d2      	movs	r2, #210	; 0xd2
 800348c:	2163      	movs	r1, #99	; 0x63
 800348e:	4810      	ldr	r0, [pc, #64]	; (80034d0 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003490:	f00a fadc 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003494:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2302      	movs	r3, #2
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	22d2      	movs	r2, #210	; 0xd2
 80034a2:	21b0      	movs	r1, #176	; 0xb0
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <ToplevelMenu_DrawOutputMenu+0x8c>)
 80034a6:	f00a fad1 	bl	800da4c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034aa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2302      	movs	r3, #2
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2300      	movs	r3, #0
 80034b6:	22d2      	movs	r2, #210	; 0xd2
 80034b8:	21f5      	movs	r1, #245	; 0xf5
 80034ba:	4807      	ldr	r0, [pc, #28]	; (80034d8 <ToplevelMenu_DrawOutputMenu+0x90>)
 80034bc:	f00a fac6 	bl	800da4c <ILI9341_Draw_Text>
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08012aec 	.word	0x08012aec
 80034cc:	08012af4 	.word	0x08012af4
 80034d0:	08012afc 	.word	0x08012afc
 80034d4:	08012b04 	.word	0x08012b04
 80034d8:	08012b0c 	.word	0x08012b0c

080034dc <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80034e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2302      	movs	r3, #2
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	220a      	movs	r2, #10
 80034f0:	210a      	movs	r1, #10
 80034f2:	4804      	ldr	r0, [pc, #16]	; (8003504 <ToplevelMenu_DrawInputMenu+0x28>)
 80034f4:	f00a faaa 	bl	800da4c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80034f8:	f7fd fcfe 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	08012b14 	.word	0x08012b14

08003508 <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <BiasMenu_getStatus+0x14>)
 800350e:	781b      	ldrb	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20001b01 	.word	0x20001b01

08003520 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003524:	480b      	ldr	r0, [pc, #44]	; (8003554 <BiasMenuEntryHandler+0x34>)
 8003526:	f00b fe2d 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 800352a:	f7fd feb1 	bl	8001290 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <BiasMenuEntryHandler+0x38>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <BiasMenuEntryHandler+0x3c>)
 8003536:	f44f 7248 	mov.w	r2, #800	; 0x320
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800353c:	f001 f9ee 	bl	800491c <BO_GetDcBiasEncoderValue>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <BiasMenuEntryHandler+0x3c>)
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <BiasMenuEntryHandler+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800354e:	230e      	movs	r3, #14
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	08012b1c 	.word	0x08012b1c
 8003558:	20001b01 	.word	0x20001b01
 800355c:	40012c00 	.word	0x40012c00
 8003560:	20001b03 	.word	0x20001b03

08003564 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 8003568:	4807      	ldr	r0, [pc, #28]	; (8003588 <BiasMenuInputHandler+0x24>)
 800356a:	f00b fe0b 	bl	800f184 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800356e:	2001      	movs	r0, #1
 8003570:	f002 f812 	bl	8005598 <SM_GetEncoderValue>
 8003574:	4603      	mov	r3, r0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f9dc 	bl	8004934 <BO_ModifyOutput>

	eNewEvent = evIdle;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <BiasMenuInputHandler+0x28>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003582:	230e      	movs	r3, #14
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	08012b40 	.word	0x08012b40
 800358c:	20001b03 	.word	0x20001b03

08003590 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003594:	4808      	ldr	r0, [pc, #32]	; (80035b8 <BiasMenuExitHandler+0x28>)
 8003596:	f00b fdf5 	bl	800f184 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <BiasMenuExitHandler+0x2c>)
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80035a0:	f7fd fe76 	bl	8001290 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80035a4:	4806      	ldr	r0, [pc, #24]	; (80035c0 <BiasMenuExitHandler+0x30>)
 80035a6:	f00b fded 	bl	800f184 <puts>
#endif

	eNewEvent = evIdle;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <BiasMenuExitHandler+0x34>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08012b64 	.word	0x08012b64
 80035bc:	20001b01 	.word	0x20001b01
 80035c0:	08012b88 	.word	0x08012b88
 80035c4:	20001b03 	.word	0x20001b03

080035c8 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

	switch(eNextState)
 80035cc:	4bb8      	ldr	r3, [pc, #736]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b0e      	cmp	r3, #14
 80035d2:	f200 8216 	bhi.w	8003a02 <EM_ProcessEvent+0x43a>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <EM_ProcessEvent+0x14>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003619 	.word	0x08003619
 80035e0:	0800364b 	.word	0x0800364b
 80035e4:	080036d1 	.word	0x080036d1
 80035e8:	080036ef 	.word	0x080036ef
 80035ec:	0800373b 	.word	0x0800373b
 80035f0:	0800376d 	.word	0x0800376d
 80035f4:	0800379f 	.word	0x0800379f
 80035f8:	080037eb 	.word	0x080037eb
 80035fc:	0800381d 	.word	0x0800381d
 8003600:	08003a03 	.word	0x08003a03
 8003604:	0800384f 	.word	0x0800384f
 8003608:	080038e1 	.word	0x080038e1
 800360c:	08003913 	.word	0x08003913
 8003610:	08003943 	.word	0x08003943
 8003614:	080039cd 	.word	0x080039cd
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003618:	48a6      	ldr	r0, [pc, #664]	; (80038b4 <EM_ProcessEvent+0x2ec>)
 800361a:	f00b fdb3 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800361e:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003626:	f000 ffb9 	bl	800459c <ToplevelOutputMenuEntryHandler>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	4ba0      	ldr	r3, [pc, #640]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003630:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003632:	4ba1      	ldr	r3, [pc, #644]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	f040 81e5 	bne.w	8003a06 <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 800363c:	f000 ffda 	bl	80045f4 <ToplevelInputMenuEntryHandler>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b9a      	ldr	r3, [pc, #616]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003646:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003648:	e1dd      	b.n	8003a06 <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 800364a:	489c      	ldr	r0, [pc, #624]	; (80038bc <EM_ProcessEvent+0x2f4>)
 800364c:	f00b fd9a 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003650:	4b99      	ldr	r3, [pc, #612]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b06      	cmp	r3, #6
 8003656:	d105      	bne.n	8003664 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003658:	f000 ffb6 	bl	80045c8 <ToplevelOutputMenuExitHandler>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003662:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003664:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800366c:	2000      	movs	r0, #0
 800366e:	f000 ff85 	bl	800457c <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003672:	f000 fd83 	bl	800417c <FuncMainMenuEntryHandler>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4b8d      	ldr	r3, [pc, #564]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 800367c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800367e:	4b8e      	ldr	r3, [pc, #568]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d108      	bne.n	8003698 <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003686:	2000      	movs	r0, #0
 8003688:	f000 ff78 	bl	800457c <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 800368c:	f000 fb5c 	bl	8003d48 <FreqMainMenuEntryHandler>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4b86      	ldr	r3, [pc, #536]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003696:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003698:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d108      	bne.n	80036b2 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f000 ff6b 	bl	800457c <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 80036a6:	f000 fe6b 	bl	8004380 <GainMainMenuEntryHandler>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80036b0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	f040 81a7 	bne.w	8003a0a <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80036bc:	2000      	movs	r0, #0
 80036be:	f000 ff5d 	bl	800457c <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 80036c2:	f7ff ff2d 	bl	8003520 <BiasMenuEntryHandler>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80036cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036ce:	e19c      	b.n	8003a0a <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 80036d0:	487b      	ldr	r0, [pc, #492]	; (80038c0 <EM_ProcessEvent+0x2f8>)
 80036d2:	f00b fd57 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80036d6:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	f040 8197 	bne.w	8003a0e <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 80036e0:	f000 ff9e 	bl	8004620 <ToplevelInputMenuExitHandler>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b71      	ldr	r3, [pc, #452]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80036ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80036ec:	e18f      	b.n	8003a0e <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 80036ee:	4875      	ldr	r0, [pc, #468]	; (80038c4 <EM_ProcessEvent+0x2fc>)
 80036f0:	f00b fd48 	bl	800f184 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80036f4:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d108      	bne.n	800370e <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 80036fc:	f000 fd54 	bl	80041a8 <FuncMainMenuExitHandler>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003706:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003708:	2002      	movs	r0, #2
 800370a:	f000 ff37 	bl	800457c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800370e:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003716:	f000 fd63 	bl	80041e0 <FuncSignalMenuEntryHandler>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	4b64      	ldr	r3, [pc, #400]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003720:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b02      	cmp	r3, #2
 8003728:	f040 8173 	bne.w	8003a12 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 800372c:	f000 fdba 	bl	80042a4 <FuncSyncMenuEntryHandler>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	4b5e      	ldr	r3, [pc, #376]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003736:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003738:	e16b      	b.n	8003a12 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 800373a:	4863      	ldr	r0, [pc, #396]	; (80038c8 <EM_ProcessEvent+0x300>)
 800373c:	f00b fd22 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003740:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d105      	bne.n	8003754 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003748:	f000 fd80 	bl	800424c <FuncSignalMenuInputHandler>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003752:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003754:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b06      	cmp	r3, #6
 800375a:	f040 815c 	bne.w	8003a16 <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 800375e:	f000 fd8b 	bl	8004278 <FuncSignalMenuExitHandler>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003768:	701a      	strb	r2, [r3, #0]

			}

			break;
 800376a:	e154      	b.n	8003a16 <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 800376c:	4857      	ldr	r0, [pc, #348]	; (80038cc <EM_ProcessEvent+0x304>)
 800376e:	f00b fd09 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d105      	bne.n	8003786 <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 800377a:	f000 fdc9 	bl	8004310 <FuncSyncMenuInputHandler>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003784:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003786:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b06      	cmp	r3, #6
 800378c:	f040 8145 	bne.w	8003a1a <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003790:	f000 fdd4 	bl	800433c <FuncSyncMenuExitHandler>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 800379a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800379c:	e13d      	b.n	8003a1a <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 800379e:	484c      	ldr	r0, [pc, #304]	; (80038d0 <EM_ProcessEvent+0x308>)
 80037a0:	f00b fcf0 	bl	800f184 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80037a4:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d108      	bne.n	80037be <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 80037ac:	f000 fdfe 	bl	80043ac <GainMainMenuExitHandler>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80037b6:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80037b8:	2002      	movs	r0, #2
 80037ba:	f000 fedf 	bl	800457c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80037be:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 80037c6:	f000 fe0d 	bl	80043e4 <GainSignalMenuEntryHandler>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80037d0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	f040 8121 	bne.w	8003a1e <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 80037dc:	f000 fe62 	bl	80044a4 <GainSyncMenuEntryHandler>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80037e6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037e8:	e119      	b.n	8003a1e <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 80037ea:	483a      	ldr	r0, [pc, #232]	; (80038d4 <EM_ProcessEvent+0x30c>)
 80037ec:	f00b fcca 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80037f0:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d105      	bne.n	8003804 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 80037f8:	f000 fe28 	bl	800444c <GainSignalMenuInputHandler>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003802:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b06      	cmp	r3, #6
 800380a:	f040 810a 	bne.w	8003a22 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 800380e:	f000 fe33 	bl	8004478 <GainSignalMenuExitHandler>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003818:	701a      	strb	r2, [r3, #0]
			}

			break;
 800381a:	e102      	b.n	8003a22 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 800381c:	482e      	ldr	r0, [pc, #184]	; (80038d8 <EM_ProcessEvent+0x310>)
 800381e:	f00b fcb1 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d105      	bne.n	8003836 <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 800382a:	f000 fe6f 	bl	800450c <GainSyncMenuInputHandler>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003834:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b06      	cmp	r3, #6
 800383c:	f040 80f3 	bne.w	8003a26 <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003840:	f000 fe7a 	bl	8004538 <GainSyncMenuExitHandler>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 800384a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800384c:	e0eb      	b.n	8003a26 <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 800384e:	4823      	ldr	r0, [pc, #140]	; (80038dc <EM_ProcessEvent+0x314>)
 8003850:	f00b fc98 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d108      	bne.n	800386e <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 800385c:	f000 fa8a 	bl	8003d74 <FreqMainMenuExitHandler>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003866:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003868:	2002      	movs	r0, #2
 800386a:	f000 fe87 	bl	800457c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003876:	f000 fa9f 	bl	8003db8 <FreqPresetMenuEntryHandler>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003880:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d105      	bne.n	8003896 <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 800388a:	f000 faf3 	bl	8003e74 <FreqAdjustMenuEntryHandler>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 8003894:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <EM_ProcessEvent+0x2f0>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b03      	cmp	r3, #3
 800389c:	f040 80c5 	bne.w	8003a2a <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 80038a0:	f000 f8ea 	bl	8003a78 <FreqSweepMenuEntryHandler>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b01      	ldr	r3, [pc, #4]	; (80038b0 <EM_ProcessEvent+0x2e8>)
 80038aa:	701a      	strb	r2, [r3, #0]
			}

			break;
 80038ac:	e0bd      	b.n	8003a2a <EM_ProcessEvent+0x462>
 80038ae:	bf00      	nop
 80038b0:	20001b02 	.word	0x20001b02
 80038b4:	08012ba0 	.word	0x08012ba0
 80038b8:	20001b03 	.word	0x20001b03
 80038bc:	08012bac 	.word	0x08012bac
 80038c0:	08012bc8 	.word	0x08012bc8
 80038c4:	08012be4 	.word	0x08012be4
 80038c8:	08012bfc 	.word	0x08012bfc
 80038cc:	08012c14 	.word	0x08012c14
 80038d0:	08012c2c 	.word	0x08012c2c
 80038d4:	08012c44 	.word	0x08012c44
 80038d8:	08012c5c 	.word	0x08012c5c
 80038dc:	08012c74 	.word	0x08012c74

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 80038e0:	4857      	ldr	r0, [pc, #348]	; (8003a40 <EM_ProcessEvent+0x478>)
 80038e2:	f00b fc4f 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d105      	bne.n	80038fa <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 80038ee:	f000 fa95 	bl	8003e1c <FreqPresetMenuInputHandler>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <EM_ProcessEvent+0x480>)
 80038f8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80038fa:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b06      	cmp	r3, #6
 8003900:	f040 8095 	bne.w	8003a2e <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003904:	f000 faa0 	bl	8003e48 <FreqPresetMenuExitHandler>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	4b4e      	ldr	r3, [pc, #312]	; (8003a48 <EM_ProcessEvent+0x480>)
 800390e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003910:	e08d      	b.n	8003a2e <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003912:	484e      	ldr	r0, [pc, #312]	; (8003a4c <EM_ProcessEvent+0x484>)
 8003914:	f00b fc36 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003918:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <EM_ProcessEvent+0x47c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d105      	bne.n	800392c <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003920:	f000 faca 	bl	8003eb8 <FreqAdjustMenuInputHandler>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <EM_ProcessEvent+0x480>)
 800392a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800392c:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <EM_ProcessEvent+0x47c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d17e      	bne.n	8003a32 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003934:	f000 fad2 	bl	8003edc <FreqAdjustMenuExitHandler>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <EM_ProcessEvent+0x480>)
 800393e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003940:	e077      	b.n	8003a32 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003942:	4843      	ldr	r0, [pc, #268]	; (8003a50 <EM_ProcessEvent+0x488>)
 8003944:	f00b fc1e 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003948:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <EM_ProcessEvent+0x47c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003950:	2007      	movs	r0, #7
 8003952:	f000 f8ed 	bl	8003b30 <FreqSweepMenuInputHandler>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <EM_ProcessEvent+0x480>)
 800395c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <EM_ProcessEvent+0x47c>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d106      	bne.n	8003974 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003966:	2008      	movs	r0, #8
 8003968:	f000 f8e2 	bl	8003b30 <FreqSweepMenuInputHandler>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <EM_ProcessEvent+0x480>)
 8003972:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <EM_ProcessEvent+0x47c>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d106      	bne.n	800398a <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800397c:	2009      	movs	r0, #9
 800397e:	f000 f8d7 	bl	8003b30 <FreqSweepMenuInputHandler>
 8003982:	4603      	mov	r3, r0
 8003984:	461a      	mov	r2, r3
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <EM_ProcessEvent+0x480>)
 8003988:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 800398a:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <EM_ProcessEvent+0x47c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d106      	bne.n	80039a0 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003992:	200a      	movs	r0, #10
 8003994:	f000 f8cc 	bl	8003b30 <FreqSweepMenuInputHandler>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <EM_ProcessEvent+0x480>)
 800399e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d106      	bne.n	80039b6 <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80039a8:	200b      	movs	r0, #11
 80039aa:	f000 f8c1 	bl	8003b30 <FreqSweepMenuInputHandler>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <EM_ProcessEvent+0x480>)
 80039b4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d13b      	bne.n	8003a36 <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 80039be:	f000 f99f 	bl	8003d00 <FreqSweepMenuExitHandler>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <EM_ProcessEvent+0x480>)
 80039c8:	701a      	strb	r2, [r3, #0]
			}

			break;
 80039ca:	e034      	b.n	8003a36 <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 80039cc:	4821      	ldr	r0, [pc, #132]	; (8003a54 <EM_ProcessEvent+0x48c>)
 80039ce:	f00b fbd9 	bl	800f184 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d105      	bne.n	80039e6 <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 80039da:	f7ff fdc3 	bl	8003564 <BiasMenuInputHandler>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <EM_ProcessEvent+0x480>)
 80039e4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <EM_ProcessEvent+0x47c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d125      	bne.n	8003a3a <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 80039ee:	f7ff fdcf 	bl	8003590 <BiasMenuExitHandler>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <EM_ProcessEvent+0x480>)
 80039f8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80039fa:	2002      	movs	r0, #2
 80039fc:	f000 fdbe 	bl	800457c <ToplevelMenu_setStatus>
			}

			break;
 8003a00:	e01b      	b.n	8003a3a <EM_ProcessEvent+0x472>

		default:
			break;
 8003a02:	bf00      	nop
 8003a04:	e01a      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a06:	bf00      	nop
 8003a08:	e018      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a0a:	bf00      	nop
 8003a0c:	e016      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a0e:	bf00      	nop
 8003a10:	e014      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a12:	bf00      	nop
 8003a14:	e012      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a16:	bf00      	nop
 8003a18:	e010      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a1a:	bf00      	nop
 8003a1c:	e00e      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a1e:	bf00      	nop
 8003a20:	e00c      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a22:	bf00      	nop
 8003a24:	e00a      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a26:	bf00      	nop
 8003a28:	e008      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a2a:	bf00      	nop
 8003a2c:	e006      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a2e:	bf00      	nop
 8003a30:	e004      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <EM_ProcessEvent+0x474>
			break;
 8003a3a:	bf00      	nop
	}

}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08012c8c 	.word	0x08012c8c
 8003a44:	20001b03 	.word	0x20001b03
 8003a48:	20001b02 	.word	0x20001b02
 8003a4c:	08012ca4 	.word	0x08012ca4
 8003a50:	08012cbc 	.word	0x08012cbc
 8003a54:	08012cd4 	.word	0x08012cd4

08003a58 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <EM_SetNewEvent+0x1c>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	7013      	strb	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	20001b03 	.word	0x20001b03

08003a78 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003a7c:	4825      	ldr	r0, [pc, #148]	; (8003b14 <FreqSweepMenuEntryHandler+0x9c>)
 8003a7e:	f00b fb81 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003a82:	f7fd fc05 	bl	8001290 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <FreqSweepMenuEntryHandler+0xa0>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <FreqSweepMenuEntryHandler+0xa4>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	d008      	beq.n	8003ab4 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <FreqSweepMenuEntryHandler+0xa0>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <FreqSweepMenuEntryHandler+0xa4>)
 8003ab0:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <FreqSweepMenuEntryHandler+0xa4>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003abe:	eef4 7a47 	vcmp.f32	s15, s14
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	d101      	bne.n	8003acc <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003ac8:	f000 fa1e 	bl	8003f08 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f000 fa75 	bl	8003fbc <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f000 fad0 	bl	8004078 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003ad8:	f000 fb0a 	bl	80040f0 <_getCalculatedSweepFrequencyInHertz>
 8003adc:	eef0 7a40 	vmov.f32	s15, s0
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <FreqSweepMenuEntryHandler+0xa8>)
 8003ae2:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <FreqSweepMenuEntryHandler+0xac>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003aec:	2009      	movs	r0, #9
 8003aee:	f000 f81f 	bl	8003b30 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <FreqSweepMenuEntryHandler+0xac>)
 8003af4:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <FreqSweepMenuEntryHandler+0xac>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <FreqSweepMenuEntryHandler+0xb0>)
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <FreqSweepMenuEntryHandler+0xb4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003b0c:	230d      	movs	r3, #13
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	08012ce4 	.word	0x08012ce4
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	20000004 	.word	0x20000004
 8003b20:	20001b20 	.word	0x20001b20
 8003b24:	40000c00 	.word	0x40000c00
 8003b28:	20001b06 	.word	0x20001b06
 8003b2c:	20001b03 	.word	0x20001b03

08003b30 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003b3a:	4865      	ldr	r0, [pc, #404]	; (8003cd0 <FreqSweepMenuInputHandler+0x1a0>)
 8003b3c:	f00b fb22 	bl	800f184 <puts>
	#endif



	switch(pEvent)
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	3b07      	subs	r3, #7
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	f200 80ba 	bhi.w	8003cbe <FreqSweepMenuInputHandler+0x18e>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <FreqSweepMenuInputHandler+0x20>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003caf 	.word	0x08003caf
 8003b5c:	08003cb7 	.word	0x08003cb7
 8003b60:	08003bc5 	.word	0x08003bc5
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003b64:	485b      	ldr	r0, [pc, #364]	; (8003cd4 <FreqSweepMenuInputHandler+0x1a4>)
 8003b66:	f00b fb0d 	bl	800f184 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <FreqSweepMenuInputHandler+0x1a8>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <FreqSweepMenuInputHandler+0x1a8>)
 8003b70:	f083 0301 	eor.w	r3, r3, #1
 8003b74:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003b76:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <FreqSweepMenuInputHandler+0x1a8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <FreqSweepMenuInputHandler+0x1a8>)
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	6013      	str	r3, [r2, #0]
			break;
 8003b82:	e09d      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003b84:	4855      	ldr	r0, [pc, #340]	; (8003cdc <FreqSweepMenuInputHandler+0x1ac>)
 8003b86:	f00b fafd 	bl	800f184 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003b8a:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <FreqSweepMenuInputHandler+0x1b0>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <FreqSweepMenuInputHandler+0x1b0>)
 8003b96:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003b98:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <FreqSweepMenuInputHandler+0x1b0>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d004      	beq.n	8003baa <FreqSweepMenuInputHandler+0x7a>
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d008      	beq.n	8003bb6 <FreqSweepMenuInputHandler+0x86>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <FreqSweepMenuInputHandler+0x80>
 8003ba8:	e006      	b.n	8003bb8 <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 8003baa:	f000 f9ad 	bl	8003f08 <_setSweepModeDown>
					break;
 8003bae:	e003      	b.n	8003bb8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8003bb0:	f000 f9da 	bl	8003f68 <_setSweepModeUp>
					break;
 8003bb4:	e000      	b.n	8003bb8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8003bb6:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 8003bb8:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <FreqSweepMenuInputHandler+0x1b4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f9fd 	bl	8003fbc <_setEncoderControlMode>

			break;
 8003bc2:	e07d      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003bc4:	4848      	ldr	r0, [pc, #288]	; (8003ce8 <FreqSweepMenuInputHandler+0x1b8>)
 8003bc6:	f00b fadd 	bl	800f184 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <FreqSweepMenuInputHandler+0x1b4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <FreqSweepMenuInputHandler+0xa8>
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00b      	beq.n	8003bee <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003bd6:	e073      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f000 fa4d 	bl	8004078 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003bde:	f000 fa87 	bl	80040f0 <_getCalculatedSweepFrequencyInHertz>
 8003be2:	eef0 7a40 	vmov.f32	s15, s0
 8003be6:	4b41      	ldr	r3, [pc, #260]	; (8003cec <FreqSweepMenuInputHandler+0x1bc>)
 8003be8:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003bec:	e05e      	b.n	8003cac <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <FreqSweepMenuInputHandler+0x1b0>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <FreqSweepMenuInputHandler+0xcc>
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d02a      	beq.n	8003c50 <FreqSweepMenuInputHandler+0x120>
							break;
 8003bfa:	e056      	b.n	8003caa <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8003bfc:	4b3c      	ldr	r3, [pc, #240]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d803      	bhi.n	8003c0c <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c06:	220d      	movs	r2, #13
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c0a:	e04e      	b.n	8003caa <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <FreqSweepMenuInputHandler+0x1c4>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	dd09      	ble.n	8003c3c <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <FreqSweepMenuInputHandler+0x1c4>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c34:	ee17 2a90 	vmov	r2, s15
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c3a:	e036      	b.n	8003caa <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <FreqSweepMenuInputHandler+0x1c8>)
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003c4e:	e02c      	b.n	8003caa <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d904      	bls.n	8003c66 <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c64:	e020      	b.n	8003ca8 <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003c66:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <FreqSweepMenuInputHandler+0x1c8>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c80:	d509      	bpl.n	8003c96 <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <FreqSweepMenuInputHandler+0x1c8>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8e:	ee17 2a90 	vmov	r2, s15
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c94:	e008      	b.n	8003ca8 <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <FreqSweepMenuInputHandler+0x1c0>)
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <FreqSweepMenuInputHandler+0x1c4>)
 8003ca4:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003ca8:	bf00      	nop
					break;
 8003caa:	bf00      	nop
			break;
 8003cac:	e008      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f000 f984 	bl	8003fbc <_setEncoderControlMode>

			break;
 8003cb4:	e004      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f000 f980 	bl	8003fbc <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8003cbc:	e000      	b.n	8003cc0 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8003cbe:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <FreqSweepMenuInputHandler+0x1cc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003cc6:	230d      	movs	r3, #13
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08012d08 	.word	0x08012d08
 8003cd4:	08012d34 	.word	0x08012d34
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	08012d4c 	.word	0x08012d4c
 8003ce0:	20001b04 	.word	0x20001b04
 8003ce4:	20001b05 	.word	0x20001b05
 8003ce8:	08012d64 	.word	0x08012d64
 8003cec:	20001b20 	.word	0x20001b20
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	20000004 	.word	0x20000004
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20001b03 	.word	0x20001b03

08003d00 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <FreqSweepMenuExitHandler+0x38>)
 8003d06:	f00b fa3d 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003d0a:	f7fd fac1 	bl	8001290 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <FreqSweepMenuExitHandler+0x3c>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <FreqSweepMenuExitHandler+0x3c>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <FreqSweepMenuExitHandler+0x3c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <FreqSweepMenuExitHandler+0x3c>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <FreqSweepMenuExitHandler+0x40>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <FreqSweepMenuExitHandler+0x44>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003d32:	230a      	movs	r3, #10
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08012d7c 	.word	0x08012d7c
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	20001b06 	.word	0x20001b06
 8003d44:	20001b03 	.word	0x20001b03

08003d48 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003d4c:	4806      	ldr	r0, [pc, #24]	; (8003d68 <FreqMainMenuEntryHandler+0x20>)
 8003d4e:	f00b fa19 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003d52:	f7fd fa9d 	bl	8001290 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <FreqMainMenuEntryHandler+0x24>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <FreqMainMenuEntryHandler+0x28>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003d62:	230a      	movs	r3, #10
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	08012da4 	.word	0x08012da4
 8003d6c:	20001b06 	.word	0x20001b06
 8003d70:	20001b03 	.word	0x20001b03

08003d74 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003d78:	480a      	ldr	r0, [pc, #40]	; (8003da4 <FreqMainMenuExitHandler+0x30>)
 8003d7a:	f00b fa03 	bl	800f184 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <FreqMainMenuExitHandler+0x34>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <FreqMainMenuExitHandler+0x38>)
 8003d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003d8c:	f7fd fa80 	bl	8001290 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003d90:	4807      	ldr	r0, [pc, #28]	; (8003db0 <FreqMainMenuExitHandler+0x3c>)
 8003d92:	f00b f9f7 	bl	800f184 <puts>
	#endif

	eNewEvent = evIdle;
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <FreqMainMenuExitHandler+0x40>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08012df4 	.word	0x08012df4
 8003da8:	20001b06 	.word	0x20001b06
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	08012e1c 	.word	0x08012e1c
 8003db4:	20001b03 	.word	0x20001b03

08003db8 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003dbe:	4812      	ldr	r0, [pc, #72]	; (8003e08 <FreqPresetMenuEntryHandler+0x50>)
 8003dc0:	f00b f9e0 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003dc4:	f7fd fa64 	bl	8001290 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <FreqPresetMenuEntryHandler+0x54>)
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003dce:	f000 ffaf 	bl	8004d30 <FreqO_GetFPresetObject>
 8003dd2:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	791a      	ldrb	r2, [r3, #4]
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <FreqPresetMenuEntryHandler+0x58>)
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003de2:	f000 ffd7 	bl	8004d94 <FreqO_GetFreqPresetEncoderRange>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <FreqPresetMenuEntryHandler+0x58>)
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dee:	e002      	b.n	8003df6 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003df0:	4808      	ldr	r0, [pc, #32]	; (8003e14 <FreqPresetMenuEntryHandler+0x5c>)
 8003df2:	f7fd fa93 	bl	800131c <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <FreqPresetMenuEntryHandler+0x60>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003dfc:	230b      	movs	r3, #11
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	08012e34 	.word	0x08012e34
 8003e0c:	20001b06 	.word	0x20001b06
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	08012e60 	.word	0x08012e60
 8003e18:	20001b03 	.word	0x20001b03

08003e1c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <FreqPresetMenuInputHandler+0x24>)
 8003e22:	f00b f9af 	bl	800f184 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003e26:	2001      	movs	r0, #1
 8003e28:	f001 fbb6 	bl	8005598 <SM_GetEncoderValue>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fe8c 	bl	8004b4c <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <FreqPresetMenuInputHandler+0x28>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003e3a:	230b      	movs	r3, #11
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08012e9c 	.word	0x08012e9c
 8003e44:	20001b03 	.word	0x20001b03

08003e48 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <FreqPresetMenuExitHandler+0x20>)
 8003e4e:	f00b f999 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003e52:	f7fd fa1d 	bl	8001290 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <FreqPresetMenuExitHandler+0x24>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <FreqPresetMenuExitHandler+0x28>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003e62:	230a      	movs	r3, #10
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08012ec8 	.word	0x08012ec8
 8003e6c:	20001b06 	.word	0x20001b06
 8003e70:	20001b03 	.word	0x20001b03

08003e74 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003e78:	480a      	ldr	r0, [pc, #40]	; (8003ea4 <FreqAdjustMenuEntryHandler+0x30>)
 8003e7a:	f00b f983 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003e7e:	f7fd fa07 	bl	8001290 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <FreqAdjustMenuEntryHandler+0x34>)
 8003e84:	2203      	movs	r2, #3
 8003e86:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <FreqAdjustMenuEntryHandler+0x38>)
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <FreqAdjustMenuEntryHandler+0x3c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <FreqAdjustMenuEntryHandler+0x3c>)
 8003e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <FreqAdjustMenuEntryHandler+0x40>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e9e:	230c      	movs	r3, #12
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	08012ef4 	.word	0x08012ef4
 8003ea8:	20001b06 	.word	0x20001b06
 8003eac:	40013400 	.word	0x40013400
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	20001b03 	.word	0x20001b03

08003eb8 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003ebc:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <FreqAdjustMenuInputHandler+0x1c>)
 8003ebe:	f00b f961 	bl	800f184 <puts>
	#endif

	FreqO_AdjustFreq();
 8003ec2:	f000 fe35 	bl	8004b30 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <FreqAdjustMenuInputHandler+0x20>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003ecc:	230c      	movs	r3, #12
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	08012d08 	.word	0x08012d08
 8003ed8:	20001b03 	.word	0x20001b03

08003edc <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003ee0:	4806      	ldr	r0, [pc, #24]	; (8003efc <FreqAdjustMenuExitHandler+0x20>)
 8003ee2:	f00b f94f 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 8003ee6:	f7fd f9d3 	bl	8001290 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <FreqAdjustMenuExitHandler+0x24>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <FreqAdjustMenuExitHandler+0x28>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003ef6:	230a      	movs	r3, #10
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	08012f20 	.word	0x08012f20
 8003f00:	20001b06 	.word	0x20001b06
 8003f04:	20001b03 	.word	0x20001b03

08003f08 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <_setSweepModeDown+0x48>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <_setSweepModeDown+0x48>)
 8003f12:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003f16:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <_setSweepModeDown+0x48>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <_setSweepModeDown+0x48>)
 8003f1e:	f043 0310 	orr.w	r3, r3, #16
 8003f22:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <_setSweepModeDown+0x4c>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <_setSweepModeDown+0x50>)
 8003f32:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <_setSweepModeDown+0x54>)
 8003f38:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <_setSweepModeDown+0x58>)
 8003f3a:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <_setSweepModeDown+0x5c>)
 8003f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40013400 	.word	0x40013400
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	20000004 	.word	0x20000004
 8003f60:	477fff00 	.word	0x477fff00
 8003f64:	40012c00 	.word	0x40012c00

08003f68 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <_setSweepModeUp+0x40>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <_setSweepModeUp+0x40>)
 8003f72:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003f76:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <_setSweepModeUp+0x40>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <_setSweepModeUp+0x40>)
 8003f7e:	f023 0310 	bic.w	r3, r3, #16
 8003f82:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <_setSweepModeUp+0x44>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <_setSweepModeUp+0x48>)
 8003f92:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <_setSweepModeUp+0x4c>)
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <_setSweepModeUp+0x50>)
 8003f9a:	601a      	str	r2, [r3, #0]


}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40013400 	.word	0x40013400
 8003fb0:	20000004 	.word	0x20000004
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	41500000 	.word	0x41500000

08003fbc <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d038      	beq.n	800403e <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003fcc:	4a24      	ldr	r2, [pc, #144]	; (8004060 <_setEncoderControlMode+0xa4>)
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <_setEncoderControlMode+0xa8>)
 8003fd4:	220d      	movs	r2, #13
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <_setEncoderControlMode+0xa8>)
 8003fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <_setEncoderControlMode+0xac>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <_setEncoderControlMode+0x32>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d014      	beq.n	8004016 <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8003fec:	e031      	b.n	8004052 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <_setEncoderControlMode+0xa8>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <_setEncoderControlMode+0xb0>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004008:	dc00      	bgt.n	800400c <_setEncoderControlMode+0x50>
				break;
 800400a:	e022      	b.n	8004052 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <_setEncoderControlMode+0xb4>)
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <_setEncoderControlMode+0xa8>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004014:	e01d      	b.n	8004052 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <_setEncoderControlMode+0xa8>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <_setEncoderControlMode+0xb8>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004030:	d400      	bmi.n	8004034 <_setEncoderControlMode+0x78>
				break;
 8004032:	e00e      	b.n	8004052 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <_setEncoderControlMode+0xb4>)
 8004036:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <_setEncoderControlMode+0xa8>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800403c:	e009      	b.n	8004052 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800403e:	4a08      	ldr	r2, [pc, #32]	; (8004060 <_setEncoderControlMode+0xa4>)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <_setEncoderControlMode+0xa8>)
 8004046:	2201      	movs	r2, #1
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <_setEncoderControlMode+0xa8>)
 800404c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20001b05 	.word	0x20001b05
 8004064:	40012c00 	.word	0x40012c00
 8004068:	20001b04 	.word	0x20001b04
 800406c:	20000004 	.word	0x20000004
 8004070:	40013400 	.word	0x40013400
 8004074:	20000000 	.word	0x20000000

08004078 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d122      	bne.n	80040ce <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa61 	bl	8000554 <__aeabi_ui2d>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80040d8 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 800409a:	ec44 3b10 	vmov	d0, r3, r4
 800409e:	f00d f84b 	bl	8011138 <pow>
 80040a2:	ec51 0b10 	vmov	r0, r1, d0
 80040a6:	a30e      	add	r3, pc, #56	; (adr r3, 80040e0 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f7fc f916 	bl	80002dc <__adddf3>
 80040b0:	4603      	mov	r3, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4618      	mov	r0, r3
 80040b6:	4621      	mov	r1, r4
 80040b8:	f7fc fd9e 	bl	8000bf8 <__aeabi_d2uiz>
 80040bc:	4603      	mov	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c6:	d002      	beq.n	80040ce <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	00000000 	.word	0x00000000
 80040dc:	40080000 	.word	0x40080000
 80040e0:	00000000 	.word	0x00000000
 80040e4:	40d06800 	.word	0x40d06800
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000c00 	.word	0x40000c00

080040f0 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <_getCalculatedSweepFrequencyInHertz+0x54>)
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <_getCalculatedSweepFrequencyInHertz+0x54>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004108:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004148 <_getCalculatedSweepFrequencyInHertz+0x58>
 800410c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004110:	e011      	b.n	8004136 <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800412e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004148 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40000c00 	.word	0x40000c00
 8004148:	4d2037a0 	.word	0x4d2037a0

0800414c <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <FreqMenu_getStatus+0x14>)
 8004152:	781b      	ldrb	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20001b06 	.word	0x20001b06

08004164 <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <FuncMenu_getStatus+0x14>)
 800416a:	781b      	ldrb	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20001b07 	.word	0x20001b07

0800417c <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8004180:	4806      	ldr	r0, [pc, #24]	; (800419c <FuncMainMenuEntryHandler+0x20>)
 8004182:	f00a ffff 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 8004186:	f7fd f883 	bl	8001290 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <FuncMainMenuEntryHandler+0x24>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <FuncMainMenuEntryHandler+0x28>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004196:	2303      	movs	r3, #3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08012f4c 	.word	0x08012f4c
 80041a0:	20001b07 	.word	0x20001b07
 80041a4:	20001b03 	.word	0x20001b03

080041a8 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 80041ac:	4808      	ldr	r0, [pc, #32]	; (80041d0 <FuncMainMenuExitHandler+0x28>)
 80041ae:	f00a ffe9 	bl	800f184 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <FuncMainMenuExitHandler+0x2c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80041b8:	f7fd f86a 	bl	8001290 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80041bc:	4806      	ldr	r0, [pc, #24]	; (80041d8 <FuncMainMenuExitHandler+0x30>)
 80041be:	f00a ffe1 	bl	800f184 <puts>
#endif

	eNewEvent = evIdle;
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <FuncMainMenuExitHandler+0x34>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80041c8:	2301      	movs	r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	08012f9c 	.word	0x08012f9c
 80041d4:	20001b07 	.word	0x20001b07
 80041d8:	08012fc4 	.word	0x08012fc4
 80041dc:	20001b03 	.word	0x20001b03

080041e0 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 80041e6:	4814      	ldr	r0, [pc, #80]	; (8004238 <FuncSignalMenuEntryHandler+0x58>)
 80041e8:	f00a ffcc 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 80041ec:	f7fd f850 	bl	8001290 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <FuncSignalMenuEntryHandler+0x5c>)
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80041f6:	2000      	movs	r0, #0
 80041f8:	f001 f9b8 	bl	800556c <SM_GetOutputChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004202:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	785a      	ldrb	r2, [r3, #1]
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <FuncSignalMenuEntryHandler+0x60>)
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004212:	f000 ff3d 	bl	8005090 <FuncO_GetFuncPresetEncoderRange>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <FuncSignalMenuEntryHandler+0x60>)
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
 800421e:	e002      	b.n	8004226 <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004220:	4808      	ldr	r0, [pc, #32]	; (8004244 <FuncSignalMenuEntryHandler+0x64>)
 8004222:	f7fd f87b 	bl	800131c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <FuncSignalMenuEntryHandler+0x68>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800422c:	2304      	movs	r3, #4
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	08012fdc 	.word	0x08012fdc
 800423c:	20001b07 	.word	0x20001b07
 8004240:	40012c00 	.word	0x40012c00
 8004244:	08013008 	.word	0x08013008
 8004248:	20001b03 	.word	0x20001b03

0800424c <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8004250:	4807      	ldr	r0, [pc, #28]	; (8004270 <FuncSignalMenuInputHandler+0x24>)
 8004252:	f00a ff97 	bl	800f184 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004256:	2001      	movs	r0, #1
 8004258:	f001 f99e 	bl	8005598 <SM_GetEncoderValue>
 800425c:	4603      	mov	r3, r0
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fdac 	bl	8004dbc <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <FuncSignalMenuInputHandler+0x28>)
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800426a:	2304      	movs	r3, #4
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	0801303c 	.word	0x0801303c
 8004274:	20001b03 	.word	0x20001b03

08004278 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 800427c:	4806      	ldr	r0, [pc, #24]	; (8004298 <FuncSignalMenuExitHandler+0x20>)
 800427e:	f00a ff81 	bl	800f184 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <FuncSignalMenuExitHandler+0x24>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004288:	f7fd f802 	bl	8001290 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <FuncSignalMenuExitHandler+0x28>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004292:	2303      	movs	r3, #3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08013068 	.word	0x08013068
 800429c:	20001b07 	.word	0x20001b07
 80042a0:	20001b03 	.word	0x20001b03

080042a4 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 80042aa:	4814      	ldr	r0, [pc, #80]	; (80042fc <FuncSyncMenuEntryHandler+0x58>)
 80042ac:	f00a ff6a 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 80042b0:	f7fc ffee 	bl	8001290 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <FuncSyncMenuEntryHandler+0x5c>)
 80042b6:	2203      	movs	r2, #3
 80042b8:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 80042ba:	2001      	movs	r0, #1
 80042bc:	f001 f956 	bl	800556c <SM_GetOutputChannel>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80042c6:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	785a      	ldrb	r2, [r3, #1]
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <FuncSyncMenuEntryHandler+0x60>)
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80042d6:	f000 fedb 	bl	8005090 <FuncO_GetFuncPresetEncoderRange>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <FuncSyncMenuEntryHandler+0x60>)
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80042e2:	e002      	b.n	80042ea <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80042e4:	4808      	ldr	r0, [pc, #32]	; (8004308 <FuncSyncMenuEntryHandler+0x64>)
 80042e6:	f7fd f819 	bl	800131c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <FuncSyncMenuEntryHandler+0x68>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80042f0:	2305      	movs	r3, #5
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	08013094 	.word	0x08013094
 8004300:	20001b07 	.word	0x20001b07
 8004304:	40012c00 	.word	0x40012c00
 8004308:	08013008 	.word	0x08013008
 800430c:	20001b03 	.word	0x20001b03

08004310 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 8004314:	4807      	ldr	r0, [pc, #28]	; (8004334 <FuncSyncMenuInputHandler+0x24>)
 8004316:	f00a ff35 	bl	800f184 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800431a:	2001      	movs	r0, #1
 800431c:	f001 f93c 	bl	8005598 <SM_GetEncoderValue>
 8004320:	4603      	mov	r3, r0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fda2 	bl	8004e6c <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <FuncSyncMenuInputHandler+0x28>)
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 800432e:	2305      	movs	r3, #5
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080130bc 	.word	0x080130bc
 8004338:	20001b03 	.word	0x20001b03

0800433c <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8004340:	4806      	ldr	r0, [pc, #24]	; (800435c <FuncSyncMenuExitHandler+0x20>)
 8004342:	f00a ff1f 	bl	800f184 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <FuncSyncMenuExitHandler+0x24>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800434c:	f7fc ffa0 	bl	8001290 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <FuncSyncMenuExitHandler+0x28>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004356:	2303      	movs	r3, #3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	080130e4 	.word	0x080130e4
 8004360:	20001b07 	.word	0x20001b07
 8004364:	20001b03 	.word	0x20001b03

08004368 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <GainMenu_getStatus+0x14>)
 800436e:	781b      	ldrb	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20001b08 	.word	0x20001b08

08004380 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 8004384:	4806      	ldr	r0, [pc, #24]	; (80043a0 <GainMainMenuEntryHandler+0x20>)
 8004386:	f00a fefd 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 800438a:	f7fc ff81 	bl	8001290 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <GainMainMenuEntryHandler+0x24>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <GainMainMenuEntryHandler+0x28>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800439a:	2306      	movs	r3, #6
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	0801310c 	.word	0x0801310c
 80043a4:	20001b08 	.word	0x20001b08
 80043a8:	20001b03 	.word	0x20001b03

080043ac <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <GainMainMenuExitHandler+0x28>)
 80043b2:	f00a fee7 	bl	800f184 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <GainMainMenuExitHandler+0x2c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80043bc:	f7fc ff68 	bl	8001290 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80043c0:	4806      	ldr	r0, [pc, #24]	; (80043dc <GainMainMenuExitHandler+0x30>)
 80043c2:	f00a fedf 	bl	800f184 <puts>
#endif

	eNewEvent = evIdle;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <GainMainMenuExitHandler+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80043cc:	2301      	movs	r3, #1
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	0801315c 	.word	0x0801315c
 80043d8:	20001b08 	.word	0x20001b08
 80043dc:	08013184 	.word	0x08013184
 80043e0:	20001b03 	.word	0x20001b03

080043e4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 80043ea:	4813      	ldr	r0, [pc, #76]	; (8004438 <GainSignalMenuEntryHandler+0x54>)
 80043ec:	f00a feca 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 80043f0:	f7fc ff4e 	bl	8001290 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <GainSignalMenuEntryHandler+0x58>)
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80043fa:	2000      	movs	r0, #0
 80043fc:	f001 f8b6 	bl	800556c <SM_GetOutputChannel>
 8004400:	4603      	mov	r3, r0
 8004402:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004406:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8b1a      	ldrh	r2, [r3, #24]
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <GainSignalMenuEntryHandler+0x5c>)
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <GainSignalMenuEntryHandler+0x5c>)
 8004418:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c
 800441e:	e002      	b.n	8004426 <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004420:	4808      	ldr	r0, [pc, #32]	; (8004444 <GainSignalMenuEntryHandler+0x60>)
 8004422:	f7fc ff7b 	bl	800131c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <GainSignalMenuEntryHandler+0x64>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800442c:	2307      	movs	r3, #7
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	0801319c 	.word	0x0801319c
 800443c:	20001b08 	.word	0x20001b08
 8004440:	40012c00 	.word	0x40012c00
 8004444:	080131c8 	.word	0x080131c8
 8004448:	20001b03 	.word	0x20001b03

0800444c <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <GainSignalMenuInputHandler+0x24>)
 8004452:	f00a fe97 	bl	800f184 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004456:	2001      	movs	r0, #1
 8004458:	f001 f89e 	bl	8005598 <SM_GetEncoderValue>
 800445c:	4603      	mov	r3, r0
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fa78 	bl	8005954 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <GainSignalMenuInputHandler+0x28>)
 8004466:	2203      	movs	r2, #3
 8004468:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800446a:	2307      	movs	r3, #7
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08013200 	.word	0x08013200
 8004474:	20001b03 	.word	0x20001b03

08004478 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 800447c:	4806      	ldr	r0, [pc, #24]	; (8004498 <GainSignalMenuExitHandler+0x20>)
 800447e:	f00a fe81 	bl	800f184 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <GainSignalMenuExitHandler+0x24>)
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004488:	f7fc ff02 	bl	8001290 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <GainSignalMenuExitHandler+0x28>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004492:	2306      	movs	r3, #6
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0801322c 	.word	0x0801322c
 800449c:	20001b08 	.word	0x20001b08
 80044a0:	20001b03 	.word	0x20001b03

080044a4 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 80044aa:	4813      	ldr	r0, [pc, #76]	; (80044f8 <GainSyncMenuEntryHandler+0x54>)
 80044ac:	f00a fe6a 	bl	800f184 <puts>
#endif

	DM_RefreshScreen();
 80044b0:	f7fc feee 	bl	8001290 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <GainSyncMenuEntryHandler+0x58>)
 80044b6:	2203      	movs	r2, #3
 80044b8:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 80044ba:	2001      	movs	r0, #1
 80044bc:	f001 f856 	bl	800556c <SM_GetOutputChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80044c6:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8b1a      	ldrh	r2, [r3, #24]
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <GainSyncMenuEntryHandler+0x5c>)
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <GainSyncMenuEntryHandler+0x5c>)
 80044d8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80044de:	e002      	b.n	80044e6 <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80044e0:	4808      	ldr	r0, [pc, #32]	; (8004504 <GainSyncMenuEntryHandler+0x60>)
 80044e2:	f7fc ff1b 	bl	800131c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <GainSyncMenuEntryHandler+0x64>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 80044ec:	2308      	movs	r3, #8
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08013258 	.word	0x08013258
 80044fc:	20001b08 	.word	0x20001b08
 8004500:	40012c00 	.word	0x40012c00
 8004504:	080131c8 	.word	0x080131c8
 8004508:	20001b03 	.word	0x20001b03

0800450c <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004510:	4807      	ldr	r0, [pc, #28]	; (8004530 <GainSyncMenuInputHandler+0x24>)
 8004512:	f00a fe37 	bl	800f184 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004516:	2001      	movs	r0, #1
 8004518:	f001 f83e 	bl	8005598 <SM_GetEncoderValue>
 800451c:	4603      	mov	r3, r0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fec2 	bl	80062a8 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <GainSyncMenuInputHandler+0x28>)
 8004526:	2203      	movs	r2, #3
 8004528:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 800452a:	2308      	movs	r3, #8
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08013280 	.word	0x08013280
 8004534:	20001b03 	.word	0x20001b03

08004538 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 800453c:	4806      	ldr	r0, [pc, #24]	; (8004558 <GainSyncMenuExitHandler+0x20>)
 800453e:	f00a fe21 	bl	800f184 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <GainSyncMenuExitHandler+0x24>)
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004548:	f7fc fea2 	bl	8001290 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <GainSyncMenuExitHandler+0x28>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004552:	2306      	movs	r3, #6
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	080132a8 	.word	0x080132a8
 800455c:	20001b08 	.word	0x20001b08
 8004560:	20001b03 	.word	0x20001b03

08004564 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <ToplevelMenu_getStatus+0x14>)
 800456a:	781b      	ldrb	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000008 	.word	0x20000008

0800457c <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004586:	4a04      	ldr	r2, [pc, #16]	; (8004598 <ToplevelMenu_setStatus+0x1c>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	7013      	strb	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000008 	.word	0x20000008

0800459c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 80045a0:	4806      	ldr	r0, [pc, #24]	; (80045bc <ToplevelOutputMenuEntryHandler+0x20>)
 80045a2:	f00a fdef 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 80045a6:	f7fc fe73 	bl	8001290 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <ToplevelOutputMenuEntryHandler+0x24>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <ToplevelOutputMenuEntryHandler+0x28>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	0801336c 	.word	0x0801336c
 80045c0:	20000008 	.word	0x20000008
 80045c4:	20001b03 	.word	0x20001b03

080045c8 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 80045cc:	4806      	ldr	r0, [pc, #24]	; (80045e8 <ToplevelOutputMenuExitHandler+0x20>)
 80045ce:	f00a fdd9 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 80045d2:	f7fc fe5d 	bl	8001290 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <ToplevelOutputMenuExitHandler+0x24>)
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <ToplevelOutputMenuExitHandler+0x28>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	080133cc 	.word	0x080133cc
 80045ec:	20000008 	.word	0x20000008
 80045f0:	20001b03 	.word	0x20001b03

080045f4 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 80045f8:	4806      	ldr	r0, [pc, #24]	; (8004614 <ToplevelInputMenuEntryHandler+0x20>)
 80045fa:	f00a fdc3 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 80045fe:	f7fc fe47 	bl	8001290 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <ToplevelInputMenuEntryHandler+0x24>)
 8004604:	2203      	movs	r2, #3
 8004606:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <ToplevelInputMenuEntryHandler+0x28>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 800460e:	2302      	movs	r3, #2
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	080133fc 	.word	0x080133fc
 8004618:	20000008 	.word	0x20000008
 800461c:	20001b03 	.word	0x20001b03

08004620 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <ToplevelInputMenuExitHandler+0x20>)
 8004626:	f00a fdad 	bl	800f184 <puts>
	#endif

	DM_RefreshScreen();
 800462a:	f7fc fe31 	bl	8001290 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <ToplevelInputMenuExitHandler+0x24>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <ToplevelInputMenuExitHandler+0x28>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	0801345c 	.word	0x0801345c
 8004644:	20000008 	.word	0x20000008
 8004648:	20001b03 	.word	0x20001b03

0800464c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d101      	bne.n	8004666 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40010400 	.word	0x40010400

08004678 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <IM_Init+0x1c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <IM_Init+0x1c>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40014400 	.word	0x40014400

08004698 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800469c:	4b26      	ldr	r3, [pc, #152]	; (8004738 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d11c      	bne.n	80046e2 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80046a8:	4b24      	ldr	r3, [pc, #144]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b4:	4b22      	ldr	r3, [pc, #136]	; (8004740 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	db09      	blt.n	80046d8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d0:	ee17 2a90 	vmov	r2, s15
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80046d6:	e029      	b.n	800472c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	3201      	adds	r2, #1
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046e0:	e024      	b.n	800472c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d104      	bne.n	80046f4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046f2:	e01b      	b.n	800472c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004702:	edd3 7a00 	vldr	s15, [r3]
 8004706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	d809      	bhi.n	8004724 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471c:	ee17 2a90 	vmov	r2, s15
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004722:	e003      	b.n	800472c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	3a01      	subs	r2, #1
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40013400 	.word	0x40013400
 8004740:	20000004 	.word	0x20000004
 8004744:	20000000 	.word	0x20000000

08004748 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <IM_BTN1_EXTI14_Handler+0x44>)
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <IM_BTN1_EXTI14_Handler+0x48>)
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004760:	dd0c      	ble.n	800477c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004762:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004766:	f7ff ff71 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004770:	2001      	movs	r0, #1
 8004772:	f7ff f971 	bl	8003a58 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004776:	4807      	ldr	r0, [pc, #28]	; (8004794 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004778:	f00a fd04 	bl	800f184 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <IM_BTN1_EXTI14_Handler+0x48>)
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	8013      	strh	r3, [r2, #0]


}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40014400 	.word	0x40014400
 8004790:	20001b0a 	.word	0x20001b0a
 8004794:	08013488 	.word	0x08013488

08004798 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <IM_BTN2_EXTI15_Handler+0x44>)
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <IM_BTN2_EXTI15_Handler+0x48>)
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b0:	dd0c      	ble.n	80047cc <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80047b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047b6:	f7ff ff49 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80047c0:	2003      	movs	r0, #3
 80047c2:	f7ff f949 	bl	8003a58 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80047c6:	4807      	ldr	r0, [pc, #28]	; (80047e4 <IM_BTN2_EXTI15_Handler+0x4c>)
 80047c8:	f00a fcdc 	bl	800f184 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <IM_BTN2_EXTI15_Handler+0x48>)
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	8013      	strh	r3, [r2, #0]


}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40014400 	.word	0x40014400
 80047e0:	20001b0c 	.word	0x20001b0c
 80047e4:	080134a0 	.word	0x080134a0

080047e8 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <IM_BTN3_EXTI0_Handler+0x40>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	4a0d      	ldr	r2, [pc, #52]	; (800482c <IM_BTN3_EXTI0_Handler+0x44>)
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004800:	dd0b      	ble.n	800481a <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004802:	2001      	movs	r0, #1
 8004804:	f7ff ff22 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800480e:	2004      	movs	r0, #4
 8004810:	f7ff f922 	bl	8003a58 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004814:	4806      	ldr	r0, [pc, #24]	; (8004830 <IM_BTN3_EXTI0_Handler+0x48>)
 8004816:	f00a fcb5 	bl	800f184 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800481a:	4a04      	ldr	r2, [pc, #16]	; (800482c <IM_BTN3_EXTI0_Handler+0x44>)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	8013      	strh	r3, [r2, #0]


}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40014400 	.word	0x40014400
 800482c:	20001b0e 	.word	0x20001b0e
 8004830:	080134bc 	.word	0x080134bc

08004834 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <IM_BTN4_EXTI1_Handler+0x40>)
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <IM_BTN4_EXTI1_Handler+0x44>)
 8004844:	8812      	ldrh	r2, [r2, #0]
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484c:	dd0b      	ble.n	8004866 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800484e:	2002      	movs	r0, #2
 8004850:	f7ff fefc 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 800485a:	2002      	movs	r0, #2
 800485c:	f7ff f8fc 	bl	8003a58 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004860:	4806      	ldr	r0, [pc, #24]	; (800487c <IM_BTN4_EXTI1_Handler+0x48>)
 8004862:	f00a fc8f 	bl	800f184 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <IM_BTN4_EXTI1_Handler+0x44>)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	8013      	strh	r3, [r2, #0]


}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40014400 	.word	0x40014400
 8004878:	20001b10 	.word	0x20001b10
 800487c:	080134d4 	.word	0x080134d4

08004880 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004886:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <IM_ENC_EXTI2_Handler+0x40>)
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <IM_ENC_EXTI2_Handler+0x44>)
 8004890:	8812      	ldrh	r2, [r2, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004898:	dd0b      	ble.n	80048b2 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 800489a:	2004      	movs	r0, #4
 800489c:	f7ff fed6 	bl	800464c <LL_EXTI_IsActiveFlag_0_31>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80048a6:	2006      	movs	r0, #6
 80048a8:	f7ff f8d6 	bl	8003a58 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80048ac:	4806      	ldr	r0, [pc, #24]	; (80048c8 <IM_ENC_EXTI2_Handler+0x48>)
 80048ae:	f00a fc69 	bl	800f184 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80048b2:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <IM_ENC_EXTI2_Handler+0x44>)
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	8013      	strh	r3, [r2, #0]


}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40014400 	.word	0x40014400
 80048c4:	20001b12 	.word	0x20001b12
 80048c8:	080134ec 	.word	0x080134ec

080048cc <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <IM_ENC_DIRF_Handler+0x30>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048dc:	d10b      	bne.n	80048f6 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 80048de:	2005      	movs	r0, #5
 80048e0:	f7ff f8ba 	bl	8003a58 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80048e4:	4806      	ldr	r0, [pc, #24]	; (8004900 <IM_ENC_DIRF_Handler+0x34>)
 80048e6:	f00a fc4d 	bl	800f184 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <IM_ENC_DIRF_Handler+0x30>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4a03      	ldr	r2, [pc, #12]	; (80048fc <IM_ENC_DIRF_Handler+0x30>)
 80048f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f4:	6113      	str	r3, [r2, #16]

	}
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	08013508 	.word	0x08013508

08004904 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <BO_GetBiasPolarity+0x14>)
 800490a:	781b      	ldrb	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000009 	.word	0x20000009

0800491c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <BO_GetDcBiasEncoderValue+0x14>)
 8004922:	881b      	ldrh	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	2000000a 	.word	0x2000000a

08004934 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800493e:	2000      	movs	r0, #0
 8004940:	f000 fe2a 	bl	8005598 <SM_GetEncoderValue>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <BO_ModifyOutput+0x84>)
 800494a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004952:	d214      	bcs.n	800497e <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <BO_ModifyOutput+0x88>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004968:	2200      	movs	r2, #0
 800496a:	2110      	movs	r1, #16
 800496c:	4814      	ldr	r0, [pc, #80]	; (80049c0 <BO_ModifyOutput+0x8c>)
 800496e:	f005 fc89 	bl	800a284 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004972:	2201      	movs	r2, #1
 8004974:	2108      	movs	r1, #8
 8004976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800497a:	f006 fb63 	bl	800b044 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004984:	d314      	bcc.n	80049b0 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <BO_ModifyOutput+0x88>)
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800499a:	2200      	movs	r2, #0
 800499c:	2110      	movs	r1, #16
 800499e:	4808      	ldr	r0, [pc, #32]	; (80049c0 <BO_ModifyOutput+0x8c>)
 80049a0:	f005 fc70 	bl	800a284 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80049a4:	2200      	movs	r2, #0
 80049a6:	2108      	movs	r1, #8
 80049a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049ac:	f006 fb4a 	bl	800b044 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000000a 	.word	0x2000000a
 80049bc:	20000009 	.word	0x20000009
 80049c0:	20002200 	.word	0x20002200

080049c4 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80049c8:	2110      	movs	r1, #16
 80049ca:	4803      	ldr	r0, [pc, #12]	; (80049d8 <BO_GetOutputBias+0x14>)
 80049cc:	f005 fca0 	bl	800a310 <HAL_DAC_GetValue>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20002200 	.word	0x20002200

080049dc <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	e06b      	b.n	8004ac0 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80049e8:	493a      	ldr	r1, [pc, #232]	; (8004ad4 <DT_InitRegister+0xf8>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	3308      	adds	r3, #8
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d129      	bne.n	8004a52 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80049fe:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a31      	ldr	r2, [pc, #196]	; (8004ad8 <DT_InitRegister+0xfc>)
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a1e:	492d      	ldr	r1, [pc, #180]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3310      	adds	r3, #16
 8004a2e:	edd3 7a00 	vldr	s15, [r3]
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3a:	ee17 0a90 	vmov	r0, s15
 8004a3e:	4925      	ldr	r1, [pc, #148]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6018      	str	r0, [r3, #0]
 8004a50:	e033      	b.n	8004aba <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8004a52:	4920      	ldr	r1, [pc, #128]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3304      	adds	r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <DT_InitRegister+0xfc>)
 8004a66:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a6a:	481a      	ldr	r0, [pc, #104]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4403      	add	r3, r0
 8004a78:	3308      	adds	r3, #8
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a88:	4912      	ldr	r1, [pc, #72]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3310      	adds	r3, #16
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa4:	ee17 0a90 	vmov	r0, s15
 8004aa8:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <DT_InitRegister+0xf8>)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3301      	adds	r3, #1
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b0d      	cmp	r3, #13
 8004ac4:	dd90      	ble.n	80049e8 <DT_InitRegister+0xc>
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c
 8004ad8:	00155cc0 	.word	0x00155cc0

08004adc <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e016      	b.n	8004b18 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <DT_GetRegisterByEnum+0x50>)
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3304      	adds	r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d107      	bne.n	8004b12 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <DT_GetRegisterByEnum+0x50>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	e006      	b.n	8004b20 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b0d      	cmp	r3, #13
 8004b1c:	dde5      	ble.n	8004aea <DT_GetRegisterByEnum+0xe>

	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004b34:	2000      	movs	r0, #0
 8004b36:	f000 fd2f 	bl	8005598 <SM_GetEncoderValue>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <FreqO_AdjustFreq+0x18>)
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40013400 	.word	0x40013400

08004b4c <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b38      	cmp	r3, #56	; 0x38
 8004b5a:	f200 80b4 	bhi.w	8004cc6 <FreqO_ModifyOutput+0x17a>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <FreqO_ModifyOutput+0x18>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004c49 	.word	0x08004c49
 8004b68:	08004c49 	.word	0x08004c49
 8004b6c:	08004c49 	.word	0x08004c49
 8004b70:	08004c49 	.word	0x08004c49
 8004b74:	08004c51 	.word	0x08004c51
 8004b78:	08004c51 	.word	0x08004c51
 8004b7c:	08004c51 	.word	0x08004c51
 8004b80:	08004c51 	.word	0x08004c51
 8004b84:	08004c59 	.word	0x08004c59
 8004b88:	08004c59 	.word	0x08004c59
 8004b8c:	08004c59 	.word	0x08004c59
 8004b90:	08004c59 	.word	0x08004c59
 8004b94:	08004c61 	.word	0x08004c61
 8004b98:	08004c61 	.word	0x08004c61
 8004b9c:	08004c61 	.word	0x08004c61
 8004ba0:	08004c61 	.word	0x08004c61
 8004ba4:	08004c69 	.word	0x08004c69
 8004ba8:	08004c69 	.word	0x08004c69
 8004bac:	08004c69 	.word	0x08004c69
 8004bb0:	08004c69 	.word	0x08004c69
 8004bb4:	08004c71 	.word	0x08004c71
 8004bb8:	08004c71 	.word	0x08004c71
 8004bbc:	08004c71 	.word	0x08004c71
 8004bc0:	08004c71 	.word	0x08004c71
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004c7b 	.word	0x08004c7b
 8004bcc:	08004c7b 	.word	0x08004c7b
 8004bd0:	08004c7b 	.word	0x08004c7b
 8004bd4:	08004c85 	.word	0x08004c85
 8004bd8:	08004c85 	.word	0x08004c85
 8004bdc:	08004c85 	.word	0x08004c85
 8004be0:	08004cc7 	.word	0x08004cc7
 8004be4:	08004c85 	.word	0x08004c85
 8004be8:	08004c8f 	.word	0x08004c8f
 8004bec:	08004c8f 	.word	0x08004c8f
 8004bf0:	08004c8f 	.word	0x08004c8f
 8004bf4:	08004c8f 	.word	0x08004c8f
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c99 	.word	0x08004c99
 8004c04:	08004c99 	.word	0x08004c99
 8004c08:	08004ca3 	.word	0x08004ca3
 8004c0c:	08004ca3 	.word	0x08004ca3
 8004c10:	08004ca3 	.word	0x08004ca3
 8004c14:	08004ca3 	.word	0x08004ca3
 8004c18:	08004cad 	.word	0x08004cad
 8004c1c:	08004cad 	.word	0x08004cad
 8004c20:	08004cad 	.word	0x08004cad
 8004c24:	08004cad 	.word	0x08004cad
 8004c28:	08004cb7 	.word	0x08004cb7
 8004c2c:	08004cb7 	.word	0x08004cb7
 8004c30:	08004cb7 	.word	0x08004cb7
 8004c34:	08004cb7 	.word	0x08004cb7
 8004c38:	08004cbf 	.word	0x08004cbf
 8004c3c:	08004cbf 	.word	0x08004cbf
 8004c40:	08004cbf 	.word	0x08004cbf
 8004c44:	08004cbf 	.word	0x08004cbf
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f000 f845 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c4e:	e03a      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004c50:	200a      	movs	r0, #10
 8004c52:	f000 f841 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c56:	e036      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004c58:	2032      	movs	r0, #50	; 0x32
 8004c5a:	f000 f83d 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c5e:	e032      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004c60:	2064      	movs	r0, #100	; 0x64
 8004c62:	f000 f839 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c66:	e02e      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004c68:	20fa      	movs	r0, #250	; 0xfa
 8004c6a:	f000 f835 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c6e:	e02a      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c74:	f000 f830 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c78:	e025      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004c7a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004c7e:	f000 f82b 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c82:	e020      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c88:	f000 f826 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c8c:	e01b      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004c8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004c92:	f000 f821 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004c96:	e016      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004c98:	f242 7010 	movw	r0, #10000	; 0x2710
 8004c9c:	f000 f81c 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004ca0:	e011      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004ca2:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004ca6:	f000 f817 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004caa:	e00c      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cb0:	f000 f812 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004cb4:	e007      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004cb6:	4806      	ldr	r0, [pc, #24]	; (8004cd0 <FreqO_ModifyOutput+0x184>)
 8004cb8:	f000 f80e 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004cbc:	e003      	b.n	8004cc6 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004cbe:	4805      	ldr	r0, [pc, #20]	; (8004cd4 <FreqO_ModifyOutput+0x188>)
 8004cc0:	f000 f80a 	bl	8004cd8 <FreqO_ApplyPreset>
			break;
 8004cc4:	bf00      	nop
	}

}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	000124f8 	.word	0x000124f8
 8004cd4:	000186a0 	.word	0x000186a0

08004cd8 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fefb 	bl	8004adc <DT_GetRegisterByEnum>
 8004ce6:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d015      	beq.n	8004d1a <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004cee:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <FreqO_ApplyPreset+0x4c>)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <FreqO_ApplyPreset+0x4c>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f822 	bl	8004d48 <FreqO_FindFPresetObject>
 8004d04:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004d0c:	4a06      	ldr	r2, [pc, #24]	; (8004d28 <FreqO_ApplyPreset+0x50>)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004d12:	e002      	b.n	8004d1a <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004d14:	4805      	ldr	r0, [pc, #20]	; (8004d2c <FreqO_ApplyPreset+0x54>)
 8004d16:	f7fc fb01 	bl	800131c <DM_SetErrorDebugMsg>
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40013400 	.word	0x40013400
 8004d28:	20000198 	.word	0x20000198
 8004d2c:	08013520 	.word	0x08013520

08004d30 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	return freq_profile;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <FreqO_GetFPresetObject+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000198 	.word	0x20000198

08004d48 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e00e      	b.n	8004d74 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004d56:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <FreqO_FindFPresetObject+0x44>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d104      	bne.n	8004d6e <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <FreqO_FindFPresetObject+0x44>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	e009      	b.n	8004d82 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b0d      	cmp	r3, #13
 8004d78:	dded      	ble.n	8004d56 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004d7a:	4805      	ldr	r0, [pc, #20]	; (8004d90 <FreqO_FindFPresetObject+0x48>)
 8004d7c:	f7fc face 	bl	800131c <DM_SetErrorDebugMsg>
	return 0;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000128 	.word	0x20000128
 8004d90:	08013548 	.word	0x08013548

08004d94 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000124 	.word	0x20000124

08004dac <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	2b17      	cmp	r3, #23
 8004dca:	d84b      	bhi.n	8004e64 <FuncO_ModifySignalOutput+0xa8>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <FuncO_ModifySignalOutput+0x18>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004e35 	.word	0x08004e35
 8004dd8:	08004e35 	.word	0x08004e35
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e3d 	.word	0x08004e3d
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	08004e45 	.word	0x08004e45
 8004dfc:	08004e45 	.word	0x08004e45
 8004e00:	08004e4d 	.word	0x08004e4d
 8004e04:	08004e4d 	.word	0x08004e4d
 8004e08:	08004e4d 	.word	0x08004e4d
 8004e0c:	08004e4d 	.word	0x08004e4d
 8004e10:	08004e55 	.word	0x08004e55
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	08004e55 	.word	0x08004e55
 8004e20:	08004e5d 	.word	0x08004e5d
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e5d 	.word	0x08004e5d
 8004e2c:	08004e5d 	.word	0x08004e5d
 8004e30:	08004e5d 	.word	0x08004e5d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004e34:	2000      	movs	r0, #0
 8004e36:	f000 f871 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e3a:	e013      	b.n	8004e64 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f000 f86d 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e42:	e00f      	b.n	8004e64 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004e44:	2002      	movs	r0, #2
 8004e46:	f000 f869 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e4a:	e00b      	b.n	8004e64 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 f865 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e52:	e007      	b.n	8004e64 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004e54:	2004      	movs	r0, #4
 8004e56:	f000 f861 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e5a:	e003      	b.n	8004e64 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004e5c:	2005      	movs	r0, #5
 8004e5e:	f000 f85d 	bl	8004f1c <FuncO_ApplyPresetToSignal>
			break;
 8004e62:	bf00      	nop

	}
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b17      	cmp	r3, #23
 8004e7a:	d84b      	bhi.n	8004f14 <FuncO_ModifySyncOutput+0xa8>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <FuncO_ModifySyncOutput+0x18>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004eed 	.word	0x08004eed
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004eed 	.word	0x08004eed
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ef5 	.word	0x08004ef5
 8004eac:	08004ef5 	.word	0x08004ef5
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f0d 	.word	0x08004f0d
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f0d 	.word	0x08004f0d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f000 f873 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004eea:	e013      	b.n	8004f14 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8004eec:	2001      	movs	r0, #1
 8004eee:	f000 f86f 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004ef2:	e00f      	b.n	8004f14 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004ef4:	2002      	movs	r0, #2
 8004ef6:	f000 f86b 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004efa:	e00b      	b.n	8004f14 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8004efc:	2003      	movs	r0, #3
 8004efe:	f000 f867 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004f02:	e007      	b.n	8004f14 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004f04:	2004      	movs	r0, #4
 8004f06:	f000 f863 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004f0a:	e003      	b.n	8004f14 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8004f0c:	2005      	movs	r0, #5
 8004f0e:	f000 f85f 	bl	8004fd0 <FuncO_ApplyPresetToSync>
			break;
 8004f12:	bf00      	nop

	}
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004f26:	79fc      	ldrb	r4, [r7, #7]
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f000 fb1f 	bl	800556c <SM_GetOutputChannel>
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <FuncO_ApplyPresetToSignal+0xa4>)
 8004f32:	00e3      	lsls	r3, r4, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f000 fb16 	bl	800556c <SM_GetOutputChannel>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fba9 	bl	80056a4 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004f52:	79fc      	ldrb	r4, [r7, #7]
 8004f54:	2000      	movs	r0, #0
 8004f56:	f000 fb09 	bl	800556c <SM_GetOutputChannel>
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	00e3      	lsls	r3, r4, #3
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <FuncO_ApplyPresetToSignal+0xa4>)
 8004f60:	4413      	add	r3, r2
 8004f62:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8004f66:	4817      	ldr	r0, [pc, #92]	; (8004fc4 <FuncO_ApplyPresetToSignal+0xa8>)
 8004f68:	f007 f994 	bl	800c294 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4816      	ldr	r0, [pc, #88]	; (8004fc8 <FuncO_ApplyPresetToSignal+0xac>)
 8004f70:	f005 f932 	bl	800a1d8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f000 faf9 	bl	800556c <SM_GetOutputChannel>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f103 0208 	add.w	r2, r3, #8
 8004f80:	2300      	movs	r3, #0
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	2378      	movs	r3, #120	; 0x78
 8004f86:	2100      	movs	r1, #0
 8004f88:	480f      	ldr	r0, [pc, #60]	; (8004fc8 <FuncO_ApplyPresetToSignal+0xac>)
 8004f8a:	f005 f863 	bl	800a054 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	480e      	ldr	r0, [pc, #56]	; (8004fcc <FuncO_ApplyPresetToSignal+0xb0>)
 8004f92:	f005 f921 	bl	800a1d8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004f96:	2001      	movs	r0, #1
 8004f98:	f000 fae8 	bl	800556c <SM_GetOutputChannel>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2378      	movs	r3, #120	; 0x78
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4808      	ldr	r0, [pc, #32]	; (8004fcc <FuncO_ApplyPresetToSignal+0xb0>)
 8004fac:	f005 f852 	bl	800a054 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004fb0:	4804      	ldr	r0, [pc, #16]	; (8004fc4 <FuncO_ApplyPresetToSignal+0xa8>)
 8004fb2:	f007 f941 	bl	800c238 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200001a0 	.word	0x200001a0
 8004fc4:	20002338 	.word	0x20002338
 8004fc8:	20002200 	.word	0x20002200
 8004fcc:	200021ec 	.word	0x200021ec

08004fd0 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004fda:	79fc      	ldrb	r4, [r7, #7]
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f000 fac5 	bl	800556c <SM_GetOutputChannel>
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <FuncO_ApplyPresetToSync+0xb0>)
 8004fe6:	00e3      	lsls	r3, r4, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f000 fabc 	bl	800556c <SM_GetOutputChannel>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fb7d 	bl	8005700 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005006:	79fc      	ldrb	r4, [r7, #7]
 8005008:	2001      	movs	r0, #1
 800500a:	f000 faaf 	bl	800556c <SM_GetOutputChannel>
 800500e:	4601      	mov	r1, r0
 8005010:	00e3      	lsls	r3, r4, #3
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <FuncO_ApplyPresetToSync+0xb0>)
 8005014:	4413      	add	r3, r2
 8005016:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <FuncO_ApplyPresetToSync+0xb4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <FuncO_ApplyPresetToSync+0xb4>)
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005026:	2100      	movs	r1, #0
 8005028:	4817      	ldr	r0, [pc, #92]	; (8005088 <FuncO_ApplyPresetToSync+0xb8>)
 800502a:	f005 f8d5 	bl	800a1d8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800502e:	2001      	movs	r0, #1
 8005030:	f000 fa9c 	bl	800556c <SM_GetOutputChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2378      	movs	r3, #120	; 0x78
 8005040:	2100      	movs	r1, #0
 8005042:	4811      	ldr	r0, [pc, #68]	; (8005088 <FuncO_ApplyPresetToSync+0xb8>)
 8005044:	f005 f806 	bl	800a054 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005048:	2100      	movs	r1, #0
 800504a:	4810      	ldr	r0, [pc, #64]	; (800508c <FuncO_ApplyPresetToSync+0xbc>)
 800504c:	f005 f8c4 	bl	800a1d8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005050:	2000      	movs	r0, #0
 8005052:	f000 fa8b 	bl	800556c <SM_GetOutputChannel>
 8005056:	4603      	mov	r3, r0
 8005058:	f103 0208 	add.w	r2, r3, #8
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2378      	movs	r3, #120	; 0x78
 8005062:	2100      	movs	r1, #0
 8005064:	4809      	ldr	r0, [pc, #36]	; (800508c <FuncO_ApplyPresetToSync+0xbc>)
 8005066:	f004 fff5 	bl	800a054 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <FuncO_ApplyPresetToSync+0xb4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <FuncO_ApplyPresetToSync+0xb4>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6013      	str	r3, [r2, #0]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	bf00      	nop
 8005080:	200001a0 	.word	0x200001a0
 8005084:	40013400 	.word	0x40013400
 8005088:	200021ec 	.word	0x200021ec
 800508c:	20002200 	.word	0x20002200

08005090 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8005096:	781b      	ldrb	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000019c 	.word	0x2000019c

080050a8 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80050b2:	79fc      	ldrb	r4, [r7, #7]
 80050b4:	2000      	movs	r0, #0
 80050b6:	f000 fa59 	bl	800556c <SM_GetOutputChannel>
 80050ba:	4601      	mov	r1, r0
 80050bc:	4623      	mov	r3, r4
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4423      	add	r3, r4
 80050c2:	4a4f      	ldr	r2, [pc, #316]	; (8005200 <GO_ApplyPresetToSignal+0x158>)
 80050c4:	4413      	add	r3, r2
 80050c6:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	2b07      	cmp	r3, #7
 80050ce:	f200 8093 	bhi.w	80051f8 <GO_ApplyPresetToSignal+0x150>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <GO_ApplyPresetToSignal+0x30>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050f9 	.word	0x080050f9
 80050dc:	08005119 	.word	0x08005119
 80050e0:	08005139 	.word	0x08005139
 80050e4:	08005159 	.word	0x08005159
 80050e8:	08005179 	.word	0x08005179
 80050ec:	08005199 	.word	0x08005199
 80050f0:	080051b9 	.word	0x080051b9
 80050f4:	080051d9 	.word	0x080051d9
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80050f8:	2200      	movs	r2, #0
 80050fa:	2101      	movs	r1, #1
 80050fc:	4841      	ldr	r0, [pc, #260]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 80050fe:	f005 ffa1 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005102:	2200      	movs	r2, #0
 8005104:	2120      	movs	r1, #32
 8005106:	4840      	ldr	r0, [pc, #256]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005108:	f005 ff9c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800510c:	2200      	movs	r2, #0
 800510e:	2110      	movs	r1, #16
 8005110:	483d      	ldr	r0, [pc, #244]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005112:	f005 ff97 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 8005116:	e06f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005118:	2201      	movs	r2, #1
 800511a:	2101      	movs	r1, #1
 800511c:	4839      	ldr	r0, [pc, #228]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 800511e:	f005 ff91 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005122:	2200      	movs	r2, #0
 8005124:	2120      	movs	r1, #32
 8005126:	4838      	ldr	r0, [pc, #224]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005128:	f005 ff8c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800512c:	2200      	movs	r2, #0
 800512e:	2110      	movs	r1, #16
 8005130:	4835      	ldr	r0, [pc, #212]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005132:	f005 ff87 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 8005136:	e05f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005138:	2200      	movs	r2, #0
 800513a:	2101      	movs	r1, #1
 800513c:	4831      	ldr	r0, [pc, #196]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 800513e:	f005 ff81 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005142:	2201      	movs	r2, #1
 8005144:	2120      	movs	r1, #32
 8005146:	4830      	ldr	r0, [pc, #192]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005148:	f005 ff7c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800514c:	2200      	movs	r2, #0
 800514e:	2110      	movs	r1, #16
 8005150:	482d      	ldr	r0, [pc, #180]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005152:	f005 ff77 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 8005156:	e04f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005158:	2201      	movs	r2, #1
 800515a:	2101      	movs	r1, #1
 800515c:	4829      	ldr	r0, [pc, #164]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 800515e:	f005 ff71 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005162:	2201      	movs	r2, #1
 8005164:	2120      	movs	r1, #32
 8005166:	4828      	ldr	r0, [pc, #160]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005168:	f005 ff6c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800516c:	2200      	movs	r2, #0
 800516e:	2110      	movs	r1, #16
 8005170:	4825      	ldr	r0, [pc, #148]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005172:	f005 ff67 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 8005176:	e03f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005178:	2200      	movs	r2, #0
 800517a:	2101      	movs	r1, #1
 800517c:	4821      	ldr	r0, [pc, #132]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 800517e:	f005 ff61 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005182:	2200      	movs	r2, #0
 8005184:	2120      	movs	r1, #32
 8005186:	4820      	ldr	r0, [pc, #128]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005188:	f005 ff5c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800518c:	2201      	movs	r2, #1
 800518e:	2110      	movs	r1, #16
 8005190:	481d      	ldr	r0, [pc, #116]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 8005192:	f005 ff57 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 8005196:	e02f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005198:	2201      	movs	r2, #1
 800519a:	2101      	movs	r1, #1
 800519c:	4819      	ldr	r0, [pc, #100]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 800519e:	f005 ff51 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2120      	movs	r1, #32
 80051a6:	4818      	ldr	r0, [pc, #96]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051a8:	f005 ff4c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051ac:	2201      	movs	r2, #1
 80051ae:	2110      	movs	r1, #16
 80051b0:	4815      	ldr	r0, [pc, #84]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051b2:	f005 ff47 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80051b6:	e01f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051b8:	2200      	movs	r2, #0
 80051ba:	2101      	movs	r1, #1
 80051bc:	4811      	ldr	r0, [pc, #68]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 80051be:	f005 ff41 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80051c2:	2201      	movs	r2, #1
 80051c4:	2120      	movs	r1, #32
 80051c6:	4810      	ldr	r0, [pc, #64]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051c8:	f005 ff3c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051cc:	2201      	movs	r2, #1
 80051ce:	2110      	movs	r1, #16
 80051d0:	480d      	ldr	r0, [pc, #52]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051d2:	f005 ff37 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80051d6:	e00f      	b.n	80051f8 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80051d8:	2201      	movs	r2, #1
 80051da:	2101      	movs	r1, #1
 80051dc:	4809      	ldr	r0, [pc, #36]	; (8005204 <GO_ApplyPresetToSignal+0x15c>)
 80051de:	f005 ff31 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80051e2:	2201      	movs	r2, #1
 80051e4:	2120      	movs	r1, #32
 80051e6:	4808      	ldr	r0, [pc, #32]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051e8:	f005 ff2c 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051ec:	2201      	movs	r2, #1
 80051ee:	2110      	movs	r1, #16
 80051f0:	4805      	ldr	r0, [pc, #20]	; (8005208 <GO_ApplyPresetToSignal+0x160>)
 80051f2:	f005 ff27 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80051f6:	bf00      	nop
	}
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}
 8005200:	200001d0 	.word	0x200001d0
 8005204:	48000400 	.word	0x48000400
 8005208:	48000800 	.word	0x48000800

0800520c <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005216:	79fc      	ldrb	r4, [r7, #7]
 8005218:	2001      	movs	r0, #1
 800521a:	f000 f9a7 	bl	800556c <SM_GetOutputChannel>
 800521e:	4601      	mov	r1, r0
 8005220:	4623      	mov	r3, r4
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4423      	add	r3, r4
 8005226:	4a4f      	ldr	r2, [pc, #316]	; (8005364 <GO_ApplyPresetToSync+0x158>)
 8005228:	4413      	add	r3, r2
 800522a:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	2b07      	cmp	r3, #7
 8005232:	f200 8093 	bhi.w	800535c <GO_ApplyPresetToSync+0x150>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <GO_ApplyPresetToSync+0x30>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	0800525d 	.word	0x0800525d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052bd 	.word	0x080052bd
 800524c:	080052dd 	.word	0x080052dd
 8005250:	080052fd 	.word	0x080052fd
 8005254:	0800531d 	.word	0x0800531d
 8005258:	0800533d 	.word	0x0800533d
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800525c:	2200      	movs	r2, #0
 800525e:	2101      	movs	r1, #1
 8005260:	4841      	ldr	r0, [pc, #260]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 8005262:	f005 feef 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005266:	2200      	movs	r2, #0
 8005268:	2120      	movs	r1, #32
 800526a:	4840      	ldr	r0, [pc, #256]	; (800536c <GO_ApplyPresetToSync+0x160>)
 800526c:	f005 feea 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005270:	2200      	movs	r2, #0
 8005272:	2110      	movs	r1, #16
 8005274:	483d      	ldr	r0, [pc, #244]	; (800536c <GO_ApplyPresetToSync+0x160>)
 8005276:	f005 fee5 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 800527a:	e06f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	2101      	movs	r1, #1
 8005280:	4839      	ldr	r0, [pc, #228]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 8005282:	f005 fedf 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005286:	2200      	movs	r2, #0
 8005288:	2120      	movs	r1, #32
 800528a:	4838      	ldr	r0, [pc, #224]	; (800536c <GO_ApplyPresetToSync+0x160>)
 800528c:	f005 feda 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005290:	2200      	movs	r2, #0
 8005292:	2110      	movs	r1, #16
 8005294:	4835      	ldr	r0, [pc, #212]	; (800536c <GO_ApplyPresetToSync+0x160>)
 8005296:	f005 fed5 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 800529a:	e05f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800529c:	2200      	movs	r2, #0
 800529e:	2101      	movs	r1, #1
 80052a0:	4831      	ldr	r0, [pc, #196]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 80052a2:	f005 fecf 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052a6:	2201      	movs	r2, #1
 80052a8:	2120      	movs	r1, #32
 80052aa:	4830      	ldr	r0, [pc, #192]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052ac:	f005 feca 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052b0:	2200      	movs	r2, #0
 80052b2:	2110      	movs	r1, #16
 80052b4:	482d      	ldr	r0, [pc, #180]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052b6:	f005 fec5 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80052ba:	e04f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052bc:	2201      	movs	r2, #1
 80052be:	2101      	movs	r1, #1
 80052c0:	4829      	ldr	r0, [pc, #164]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 80052c2:	f005 febf 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052c6:	2201      	movs	r2, #1
 80052c8:	2120      	movs	r1, #32
 80052ca:	4828      	ldr	r0, [pc, #160]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052cc:	f005 feba 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052d0:	2200      	movs	r2, #0
 80052d2:	2110      	movs	r1, #16
 80052d4:	4825      	ldr	r0, [pc, #148]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052d6:	f005 feb5 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80052da:	e03f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80052dc:	2200      	movs	r2, #0
 80052de:	2101      	movs	r1, #1
 80052e0:	4821      	ldr	r0, [pc, #132]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 80052e2:	f005 feaf 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052e6:	2200      	movs	r2, #0
 80052e8:	2120      	movs	r1, #32
 80052ea:	4820      	ldr	r0, [pc, #128]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052ec:	f005 feaa 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80052f0:	2201      	movs	r2, #1
 80052f2:	2110      	movs	r1, #16
 80052f4:	481d      	ldr	r0, [pc, #116]	; (800536c <GO_ApplyPresetToSync+0x160>)
 80052f6:	f005 fea5 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 80052fa:	e02f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	4819      	ldr	r0, [pc, #100]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 8005302:	f005 fe9f 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005306:	2200      	movs	r2, #0
 8005308:	2120      	movs	r1, #32
 800530a:	4818      	ldr	r0, [pc, #96]	; (800536c <GO_ApplyPresetToSync+0x160>)
 800530c:	f005 fe9a 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005310:	2201      	movs	r2, #1
 8005312:	2110      	movs	r1, #16
 8005314:	4815      	ldr	r0, [pc, #84]	; (800536c <GO_ApplyPresetToSync+0x160>)
 8005316:	f005 fe95 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 800531a:	e01f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800531c:	2200      	movs	r2, #0
 800531e:	2101      	movs	r1, #1
 8005320:	4811      	ldr	r0, [pc, #68]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 8005322:	f005 fe8f 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005326:	2201      	movs	r2, #1
 8005328:	2120      	movs	r1, #32
 800532a:	4810      	ldr	r0, [pc, #64]	; (800536c <GO_ApplyPresetToSync+0x160>)
 800532c:	f005 fe8a 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005330:	2201      	movs	r2, #1
 8005332:	2110      	movs	r1, #16
 8005334:	480d      	ldr	r0, [pc, #52]	; (800536c <GO_ApplyPresetToSync+0x160>)
 8005336:	f005 fe85 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 800533a:	e00f      	b.n	800535c <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800533c:	2201      	movs	r2, #1
 800533e:	2101      	movs	r1, #1
 8005340:	4809      	ldr	r0, [pc, #36]	; (8005368 <GO_ApplyPresetToSync+0x15c>)
 8005342:	f005 fe7f 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005346:	2201      	movs	r2, #1
 8005348:	2120      	movs	r1, #32
 800534a:	4808      	ldr	r0, [pc, #32]	; (800536c <GO_ApplyPresetToSync+0x160>)
 800534c:	f005 fe7a 	bl	800b044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005350:	2201      	movs	r2, #1
 8005352:	2110      	movs	r1, #16
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <GO_ApplyPresetToSync+0x160>)
 8005356:	f005 fe75 	bl	800b044 <HAL_GPIO_WritePin>
			break;
 800535a:	bf00      	nop
	}
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	200001d0 	.word	0x200001d0
 8005368:	48000400 	.word	0x48000400
 800536c:	48000800 	.word	0x48000800

08005370 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 8005374:	f000 f89a 	bl	80054ac <_InitOutputChannels>
	_InitNegGainCoefficients();
 8005378:	f000 f850 	bl	800541c <_InitNegGainCoefficients>
	_InitGainInDecibels();
 800537c:	f000 f802 	bl	8005384 <_InitGainInDecibels>

}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}

08005384 <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e037      	b.n	8005400 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005390:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <_InitGainInDecibels+0x8c>)
 8005392:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005394:	491f      	ldr	r1, [pc, #124]	; (8005414 <_InitGainInDecibels+0x90>)
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3304      	adds	r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80053a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80053ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80053b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80053b4:	ee16 0a90 	vmov	r0, s13
 80053b8:	f7fb f8ee 	bl	8000598 <__aeabi_f2d>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	ec44 3b10 	vmov	d0, r3, r4
 80053c4:	f00b fe38 	bl	8011038 <log10>
 80053c8:	ec51 0b10 	vmov	r0, r1, d0
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <_InitGainInDecibels+0x94>)
 80053d2:	f7fb f939 	bl	8000648 <__aeabi_dmul>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	4618      	mov	r0, r3
 80053dc:	4621      	mov	r1, r4
 80053de:	f7fb fc2b 	bl	8000c38 <__aeabi_d2f>
 80053e2:	4603      	mov	r3, r0
 80053e4:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80053e6:	490b      	ldr	r1, [pc, #44]	; (8005414 <_InitGainInDecibels+0x90>)
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	330c      	adds	r3, #12
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b61      	cmp	r3, #97	; 0x61
 8005404:	ddc4      	ble.n	8005390 <_InitGainInDecibels+0xc>

	}
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bd90      	pop	{r4, r7, pc}
 800540e:	bf00      	nop
 8005410:	3a83126f 	.word	0x3a83126f
 8005414:	200001e8 	.word	0x200001e8
 8005418:	40340000 	.word	0x40340000

0800541c <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e033      	b.n	8005490 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005428:	491e      	ldr	r1, [pc, #120]	; (80054a4 <_InitNegGainCoefficients+0x88>)
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3304      	adds	r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <_InitNegGainCoefficients+0x8c>)
 800543e:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005440:	4918      	ldr	r1, [pc, #96]	; (80054a4 <_InitNegGainCoefficients+0x88>)
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	3308      	adds	r3, #8
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 800545e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005462:	edd7 7a03 	vldr	s15, [r7, #12]
 8005466:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800546a:	ed97 7a02 	vldr	s14, [r7, #8]
 800546e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005472:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005476:	490b      	ldr	r1, [pc, #44]	; (80054a4 <_InitNegGainCoefficients+0x88>)
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3310      	adds	r3, #16
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b61      	cmp	r3, #97	; 0x61
 8005494:	ddc8      	ble.n	8005428 <_InitNegGainCoefficients+0xc>
	}
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200001e8 	.word	0x200001e8
 80054a8:	402ccccd 	.word	0x402ccccd

080054ac <_InitOutputChannels>:

void _InitOutputChannels()
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <_InitOutputChannels+0xa8>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <_InitOutputChannels+0xac>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a25      	ldr	r2, [pc, #148]	; (8005554 <_InitOutputChannels+0xa8>)
 80054be:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80054c0:	4b24      	ldr	r3, [pc, #144]	; (8005554 <_InitOutputChannels+0xa8>)
 80054c2:	4a25      	ldr	r2, [pc, #148]	; (8005558 <_InitOutputChannels+0xac>)
 80054c4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	e00b      	b.n	80054e6 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80054ce:	4a23      	ldr	r2, [pc, #140]	; (800555c <_InitOutputChannels+0xb0>)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054d6:	491f      	ldr	r1, [pc, #124]	; (8005554 <_InitOutputChannels+0xa8>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3302      	adds	r3, #2
 80054dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3301      	adds	r3, #1
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b77      	cmp	r3, #119	; 0x77
 80054ea:	ddf0      	ble.n	80054ce <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <_InitOutputChannels+0xa8>)
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <_InitOutputChannels+0xb4>)
 80054f0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <_InitOutputChannels+0xa8>)
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <_InitOutputChannels+0xb8>)
 80054f8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <_InitOutputChannels+0xbc>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <_InitOutputChannels+0xac>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <_InitOutputChannels+0xbc>)
 8005508:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <_InitOutputChannels+0xbc>)
 800550c:	4a12      	ldr	r2, [pc, #72]	; (8005558 <_InitOutputChannels+0xac>)
 800550e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	e00b      	b.n	8005530 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <_InitOutputChannels+0xb0>)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005520:	4911      	ldr	r1, [pc, #68]	; (8005568 <_InitOutputChannels+0xbc>)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3302      	adds	r3, #2
 8005526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b77      	cmp	r3, #119	; 0x77
 8005534:	ddf0      	ble.n	8005518 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <_InitOutputChannels+0xbc>)
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <_InitOutputChannels+0xb4>)
 800553a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <_InitOutputChannels+0xbc>)
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <_InitOutputChannels+0xb8>)
 8005542:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20001d28 	.word	0x20001d28
 8005558:	200001a0 	.word	0x200001a0
 800555c:	20001074 	.word	0x20001074
 8005560:	20000ba4 	.word	0x20000ba4
 8005564:	200001d3 	.word	0x200001d3
 8005568:	20001b34 	.word	0x20001b34

0800556c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SM_GetOutputChannel+0x24>)
 800557e:	e000      	b.n	8005582 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <SM_GetOutputChannel+0x28>)
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20001d28 	.word	0x20001d28
 8005594:	20001b34 	.word	0x20001b34

08005598 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <SM_GetEncoderValue+0x34>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <SM_GetEncoderValue+0x34>)
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	e002      	b.n	80055c0 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <SM_GetEncoderValue+0x34>)
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b29b      	uxth	r3, r3
	}
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00

080055d0 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <SM_GetOutputInHertz+0x7c>)
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <SM_GetOutputInHertz+0x16>
 80055de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	e007      	b.n	80055f6 <SM_GetOutputInHertz+0x26>
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <SM_GetOutputInHertz+0x7c>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <SM_GetOutputInHertz+0x7c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <SM_GetOutputInHertz+0x36>
 80055fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	e007      	b.n	8005616 <SM_GetOutputInHertz+0x46>
 8005606:	4b11      	ldr	r3, [pc, #68]	; (800564c <SM_GetOutputInHertz+0x7c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005616:	ed97 7a02 	vldr	s14, [r7, #8]
 800561a:	edd7 7a01 	vldr	s15, [r7, #4]
 800561e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005622:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005650 <SM_GetOutputInHertz+0x80>
 8005626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562a:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800562e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005632:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005654 <SM_GetOutputInHertz+0x84>
 8005636:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800563a:	eef0 7a66 	vmov.f32	s15, s13
}
 800563e:	eeb0 0a67 	vmov.f32	s0, s15
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40013400 	.word	0x40013400
 8005650:	4d2037a0 	.word	0x4d2037a0
 8005654:	42f00000 	.word	0x42f00000

08005658 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <SM_ConvertPeriodToHertz+0x16>
 800566a:	2301      	movs	r3, #1
 800566c:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80056a0 <SM_ConvertPeriodToHertz+0x48>
 800568a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800568e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005692:	eeb0 0a67 	vmov.f32	s0, s15
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	4d2037a0 	.word	0x4d2037a0

080056a4 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80056ae:	79fa      	ldrb	r2, [r7, #7]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <VPP_ApplyPresetToSignal+0x58>)
 80056ba:	4413      	add	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80056be:	2000      	movs	r0, #0
 80056c0:	f7ff ff54 	bl	800556c <SM_GetOutputChannel>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7a1b      	ldrb	r3, [r3, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fce9 	bl	80050a8 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	ed93 7a05 	vldr	s14, [r3, #20]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8b1b      	ldrh	r3, [r3, #24]
 80056e6:	4618      	mov	r0, r3
 80056e8:	eef0 0a47 	vmov.f32	s1, s14
 80056ec:	eeb0 0a67 	vmov.f32	s0, s15
 80056f0:	f000 f834 	bl	800575c <_ProcessSignalDataTable>


}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200001e8 	.word	0x200001e8

08005700 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800570a:	79fa      	ldrb	r2, [r7, #7]
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a10      	ldr	r2, [pc, #64]	; (8005758 <VPP_ApplyPresetToSync+0x58>)
 8005716:	4413      	add	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 800571a:	2001      	movs	r0, #1
 800571c:	f7ff ff26 	bl	800556c <SM_GetOutputChannel>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	7a1b      	ldrb	r3, [r3, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fd6d 	bl	800520c <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	edd3 7a04 	vldr	s15, [r3, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	ed93 7a05 	vldr	s14, [r3, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8b1b      	ldrh	r3, [r3, #24]
 8005742:	4618      	mov	r0, r3
 8005744:	eef0 0a47 	vmov.f32	s1, s14
 8005748:	eeb0 0a67 	vmov.f32	s0, s15
 800574c:	f000 f884 	bl	8005858 <_ProcessSyncDataTable>



}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200001e8 	.word	0x200001e8

0800575c <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	ed87 0a03 	vstr	s0, [r7, #12]
 8005766:	edc7 0a02 	vstr	s1, [r7, #8]
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e00f      	b.n	8005794 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8005774:	2000      	movs	r0, #0
 8005776:	f7ff fef9 	bl	800556c <SM_GetOutputChannel>
 800577a:	4603      	mov	r3, r0
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4933      	ldr	r1, [pc, #204]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3301      	adds	r3, #1
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b77      	cmp	r3, #119	; 0x77
 8005798:	ddec      	ble.n	8005774 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 800579a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800579e:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b4:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e02e      	b.n	800581c <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80057be:	4a25      	ldr	r2, [pc, #148]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057da:	ee17 1a90 	vmov	r1, s15
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80057e6:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80057fa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80057fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580a:	ee17 1a90 	vmov	r1, s15
 800580e:	4a11      	ldr	r2, [pc, #68]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3301      	adds	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b77      	cmp	r3, #119	; 0x77
 8005820:	ddcd      	ble.n	80057be <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e00e      	b.n	8005846 <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005828:	2000      	movs	r0, #0
 800582a:	f7ff fe9f 	bl	800556c <SM_GetOutputChannel>
 800582e:	4601      	mov	r1, r0
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <_ProcessSignalDataTable+0xf8>)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3302      	adds	r3, #2
 800583c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	3301      	adds	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b77      	cmp	r3, #119	; 0x77
 800584a:	dded      	ble.n	8005828 <_ProcessSignalDataTable+0xcc>
	}
}
 800584c:	bf00      	nop
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20001f1c 	.word	0x20001f1c

08005858 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005862:	edc7 0a02 	vstr	s1, [r7, #8]
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e00f      	b.n	8005890 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005870:	2001      	movs	r0, #1
 8005872:	f7ff fe7b 	bl	800556c <SM_GetOutputChannel>
 8005876:	4603      	mov	r3, r0
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4933      	ldr	r1, [pc, #204]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b77      	cmp	r3, #119	; 0x77
 8005894:	ddec      	ble.n	8005870 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8005896:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800589a:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b0:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e02e      	b.n	8005918 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80058ba:	4a25      	ldr	r2, [pc, #148]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	ee17 1a90 	vmov	r1, s15
 80058da:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80058e2:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80058f6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80058fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80058fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 1a90 	vmov	r1, s15
 800590a:	4a11      	ldr	r2, [pc, #68]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	3301      	adds	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b77      	cmp	r3, #119	; 0x77
 800591c:	ddcd      	ble.n	80058ba <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e00e      	b.n	8005942 <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005924:	2001      	movs	r0, #1
 8005926:	f7ff fe21 	bl	800556c <SM_GetOutputChannel>
 800592a:	4601      	mov	r1, r0
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <_ProcessSyncDataTable+0xf8>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3302      	adds	r3, #2
 8005938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3301      	adds	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b77      	cmp	r3, #119	; 0x77
 8005946:	dded      	ble.n	8005924 <_ProcessSyncDataTable+0xcc>
	}
}
 8005948:	bf00      	nop
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20001f1c 	.word	0x20001f1c

08005954 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005964:	f200 849a 	bhi.w	800629c <VPP_ModifySignalOutput+0x948>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <VPP_ModifySignalOutput+0x1c>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005f8d 	.word	0x08005f8d
 8005974:	08005f8d 	.word	0x08005f8d
 8005978:	08005f8d 	.word	0x08005f8d
 800597c:	08005f95 	.word	0x08005f95
 8005980:	08005f95 	.word	0x08005f95
 8005984:	08005f95 	.word	0x08005f95
 8005988:	08005f95 	.word	0x08005f95
 800598c:	08005f9d 	.word	0x08005f9d
 8005990:	08005f9d 	.word	0x08005f9d
 8005994:	08005f9d 	.word	0x08005f9d
 8005998:	08005f9d 	.word	0x08005f9d
 800599c:	08005fa5 	.word	0x08005fa5
 80059a0:	08005fa5 	.word	0x08005fa5
 80059a4:	08005fa5 	.word	0x08005fa5
 80059a8:	08005fa5 	.word	0x08005fa5
 80059ac:	08005fad 	.word	0x08005fad
 80059b0:	08005fad 	.word	0x08005fad
 80059b4:	08005fad 	.word	0x08005fad
 80059b8:	08005fad 	.word	0x08005fad
 80059bc:	08005fb5 	.word	0x08005fb5
 80059c0:	08005fb5 	.word	0x08005fb5
 80059c4:	08005fb5 	.word	0x08005fb5
 80059c8:	08005fb5 	.word	0x08005fb5
 80059cc:	08005fbd 	.word	0x08005fbd
 80059d0:	08005fbd 	.word	0x08005fbd
 80059d4:	08005fbd 	.word	0x08005fbd
 80059d8:	08005fbd 	.word	0x08005fbd
 80059dc:	08005fc5 	.word	0x08005fc5
 80059e0:	08005fc5 	.word	0x08005fc5
 80059e4:	08005fc5 	.word	0x08005fc5
 80059e8:	08005fc5 	.word	0x08005fc5
 80059ec:	08005fcd 	.word	0x08005fcd
 80059f0:	08005fcd 	.word	0x08005fcd
 80059f4:	08005fcd 	.word	0x08005fcd
 80059f8:	08005fcd 	.word	0x08005fcd
 80059fc:	08005fd5 	.word	0x08005fd5
 8005a00:	08005fd5 	.word	0x08005fd5
 8005a04:	08005fd5 	.word	0x08005fd5
 8005a08:	08005fd5 	.word	0x08005fd5
 8005a0c:	08005fdd 	.word	0x08005fdd
 8005a10:	08005fdd 	.word	0x08005fdd
 8005a14:	08005fdd 	.word	0x08005fdd
 8005a18:	08005fdd 	.word	0x08005fdd
 8005a1c:	08005fe5 	.word	0x08005fe5
 8005a20:	08005fe5 	.word	0x08005fe5
 8005a24:	08005fe5 	.word	0x08005fe5
 8005a28:	08005fe5 	.word	0x08005fe5
 8005a2c:	08005fed 	.word	0x08005fed
 8005a30:	08005fed 	.word	0x08005fed
 8005a34:	08005fed 	.word	0x08005fed
 8005a38:	08005fed 	.word	0x08005fed
 8005a3c:	08005ff5 	.word	0x08005ff5
 8005a40:	08005ff5 	.word	0x08005ff5
 8005a44:	08005ff5 	.word	0x08005ff5
 8005a48:	08005ff5 	.word	0x08005ff5
 8005a4c:	08005ffd 	.word	0x08005ffd
 8005a50:	08005ffd 	.word	0x08005ffd
 8005a54:	08005ffd 	.word	0x08005ffd
 8005a58:	08005ffd 	.word	0x08005ffd
 8005a5c:	08006005 	.word	0x08006005
 8005a60:	08006005 	.word	0x08006005
 8005a64:	08006005 	.word	0x08006005
 8005a68:	08006005 	.word	0x08006005
 8005a6c:	0800600d 	.word	0x0800600d
 8005a70:	0800600d 	.word	0x0800600d
 8005a74:	0800600d 	.word	0x0800600d
 8005a78:	0800600d 	.word	0x0800600d
 8005a7c:	08006015 	.word	0x08006015
 8005a80:	08006015 	.word	0x08006015
 8005a84:	08006015 	.word	0x08006015
 8005a88:	08006015 	.word	0x08006015
 8005a8c:	0800601d 	.word	0x0800601d
 8005a90:	0800601d 	.word	0x0800601d
 8005a94:	0800601d 	.word	0x0800601d
 8005a98:	0800601d 	.word	0x0800601d
 8005a9c:	08006025 	.word	0x08006025
 8005aa0:	08006025 	.word	0x08006025
 8005aa4:	08006025 	.word	0x08006025
 8005aa8:	08006025 	.word	0x08006025
 8005aac:	0800602d 	.word	0x0800602d
 8005ab0:	0800602d 	.word	0x0800602d
 8005ab4:	0800602d 	.word	0x0800602d
 8005ab8:	0800602d 	.word	0x0800602d
 8005abc:	08006035 	.word	0x08006035
 8005ac0:	08006035 	.word	0x08006035
 8005ac4:	08006035 	.word	0x08006035
 8005ac8:	08006035 	.word	0x08006035
 8005acc:	0800603d 	.word	0x0800603d
 8005ad0:	0800603d 	.word	0x0800603d
 8005ad4:	0800603d 	.word	0x0800603d
 8005ad8:	0800603d 	.word	0x0800603d
 8005adc:	08006045 	.word	0x08006045
 8005ae0:	08006045 	.word	0x08006045
 8005ae4:	08006045 	.word	0x08006045
 8005ae8:	08006045 	.word	0x08006045
 8005aec:	0800604d 	.word	0x0800604d
 8005af0:	0800604d 	.word	0x0800604d
 8005af4:	0800604d 	.word	0x0800604d
 8005af8:	0800604d 	.word	0x0800604d
 8005afc:	08006055 	.word	0x08006055
 8005b00:	08006055 	.word	0x08006055
 8005b04:	08006055 	.word	0x08006055
 8005b08:	08006055 	.word	0x08006055
 8005b0c:	0800605d 	.word	0x0800605d
 8005b10:	0800605d 	.word	0x0800605d
 8005b14:	0800605d 	.word	0x0800605d
 8005b18:	0800605d 	.word	0x0800605d
 8005b1c:	08006065 	.word	0x08006065
 8005b20:	08006065 	.word	0x08006065
 8005b24:	08006065 	.word	0x08006065
 8005b28:	08006065 	.word	0x08006065
 8005b2c:	0800606d 	.word	0x0800606d
 8005b30:	0800606d 	.word	0x0800606d
 8005b34:	0800606d 	.word	0x0800606d
 8005b38:	0800606d 	.word	0x0800606d
 8005b3c:	08006075 	.word	0x08006075
 8005b40:	08006075 	.word	0x08006075
 8005b44:	08006075 	.word	0x08006075
 8005b48:	08006075 	.word	0x08006075
 8005b4c:	0800607d 	.word	0x0800607d
 8005b50:	0800607d 	.word	0x0800607d
 8005b54:	0800607d 	.word	0x0800607d
 8005b58:	0800607d 	.word	0x0800607d
 8005b5c:	08006085 	.word	0x08006085
 8005b60:	08006085 	.word	0x08006085
 8005b64:	08006085 	.word	0x08006085
 8005b68:	08006085 	.word	0x08006085
 8005b6c:	0800608d 	.word	0x0800608d
 8005b70:	0800608d 	.word	0x0800608d
 8005b74:	0800608d 	.word	0x0800608d
 8005b78:	0800608d 	.word	0x0800608d
 8005b7c:	08006095 	.word	0x08006095
 8005b80:	08006095 	.word	0x08006095
 8005b84:	08006095 	.word	0x08006095
 8005b88:	08006095 	.word	0x08006095
 8005b8c:	0800609d 	.word	0x0800609d
 8005b90:	0800609d 	.word	0x0800609d
 8005b94:	0800609d 	.word	0x0800609d
 8005b98:	0800609d 	.word	0x0800609d
 8005b9c:	080060a5 	.word	0x080060a5
 8005ba0:	080060a5 	.word	0x080060a5
 8005ba4:	080060a5 	.word	0x080060a5
 8005ba8:	080060a5 	.word	0x080060a5
 8005bac:	080060ad 	.word	0x080060ad
 8005bb0:	080060ad 	.word	0x080060ad
 8005bb4:	080060ad 	.word	0x080060ad
 8005bb8:	080060ad 	.word	0x080060ad
 8005bbc:	080060b5 	.word	0x080060b5
 8005bc0:	080060b5 	.word	0x080060b5
 8005bc4:	080060b5 	.word	0x080060b5
 8005bc8:	080060b5 	.word	0x080060b5
 8005bcc:	080060bd 	.word	0x080060bd
 8005bd0:	080060bd 	.word	0x080060bd
 8005bd4:	080060bd 	.word	0x080060bd
 8005bd8:	080060bd 	.word	0x080060bd
 8005bdc:	080060c5 	.word	0x080060c5
 8005be0:	080060c5 	.word	0x080060c5
 8005be4:	080060c5 	.word	0x080060c5
 8005be8:	080060c5 	.word	0x080060c5
 8005bec:	080060cd 	.word	0x080060cd
 8005bf0:	080060cd 	.word	0x080060cd
 8005bf4:	080060cd 	.word	0x080060cd
 8005bf8:	080060cd 	.word	0x080060cd
 8005bfc:	080060d5 	.word	0x080060d5
 8005c00:	080060d5 	.word	0x080060d5
 8005c04:	080060d5 	.word	0x080060d5
 8005c08:	080060d5 	.word	0x080060d5
 8005c0c:	080060dd 	.word	0x080060dd
 8005c10:	080060dd 	.word	0x080060dd
 8005c14:	080060dd 	.word	0x080060dd
 8005c18:	080060dd 	.word	0x080060dd
 8005c1c:	080060e5 	.word	0x080060e5
 8005c20:	080060e5 	.word	0x080060e5
 8005c24:	080060e5 	.word	0x080060e5
 8005c28:	080060e5 	.word	0x080060e5
 8005c2c:	080060ed 	.word	0x080060ed
 8005c30:	080060ed 	.word	0x080060ed
 8005c34:	080060ed 	.word	0x080060ed
 8005c38:	080060ed 	.word	0x080060ed
 8005c3c:	080060f5 	.word	0x080060f5
 8005c40:	080060f5 	.word	0x080060f5
 8005c44:	080060f5 	.word	0x080060f5
 8005c48:	080060f5 	.word	0x080060f5
 8005c4c:	080060fd 	.word	0x080060fd
 8005c50:	080060fd 	.word	0x080060fd
 8005c54:	080060fd 	.word	0x080060fd
 8005c58:	080060fd 	.word	0x080060fd
 8005c5c:	08006105 	.word	0x08006105
 8005c60:	08006105 	.word	0x08006105
 8005c64:	08006105 	.word	0x08006105
 8005c68:	08006105 	.word	0x08006105
 8005c6c:	0800610d 	.word	0x0800610d
 8005c70:	0800610d 	.word	0x0800610d
 8005c74:	0800610d 	.word	0x0800610d
 8005c78:	0800610d 	.word	0x0800610d
 8005c7c:	08006115 	.word	0x08006115
 8005c80:	08006115 	.word	0x08006115
 8005c84:	08006115 	.word	0x08006115
 8005c88:	08006115 	.word	0x08006115
 8005c8c:	0800611d 	.word	0x0800611d
 8005c90:	0800611d 	.word	0x0800611d
 8005c94:	0800611d 	.word	0x0800611d
 8005c98:	0800611d 	.word	0x0800611d
 8005c9c:	08006125 	.word	0x08006125
 8005ca0:	08006125 	.word	0x08006125
 8005ca4:	08006125 	.word	0x08006125
 8005ca8:	08006125 	.word	0x08006125
 8005cac:	0800612d 	.word	0x0800612d
 8005cb0:	0800612d 	.word	0x0800612d
 8005cb4:	0800612d 	.word	0x0800612d
 8005cb8:	0800612d 	.word	0x0800612d
 8005cbc:	08006135 	.word	0x08006135
 8005cc0:	08006135 	.word	0x08006135
 8005cc4:	08006135 	.word	0x08006135
 8005cc8:	08006135 	.word	0x08006135
 8005ccc:	0800613d 	.word	0x0800613d
 8005cd0:	0800613d 	.word	0x0800613d
 8005cd4:	0800613d 	.word	0x0800613d
 8005cd8:	0800613d 	.word	0x0800613d
 8005cdc:	08006145 	.word	0x08006145
 8005ce0:	08006145 	.word	0x08006145
 8005ce4:	08006145 	.word	0x08006145
 8005ce8:	08006145 	.word	0x08006145
 8005cec:	0800614d 	.word	0x0800614d
 8005cf0:	0800614d 	.word	0x0800614d
 8005cf4:	0800614d 	.word	0x0800614d
 8005cf8:	0800614d 	.word	0x0800614d
 8005cfc:	08006155 	.word	0x08006155
 8005d00:	08006155 	.word	0x08006155
 8005d04:	08006155 	.word	0x08006155
 8005d08:	08006155 	.word	0x08006155
 8005d0c:	0800615d 	.word	0x0800615d
 8005d10:	0800615d 	.word	0x0800615d
 8005d14:	0800615d 	.word	0x0800615d
 8005d18:	0800615d 	.word	0x0800615d
 8005d1c:	08006165 	.word	0x08006165
 8005d20:	08006165 	.word	0x08006165
 8005d24:	08006165 	.word	0x08006165
 8005d28:	08006165 	.word	0x08006165
 8005d2c:	0800616d 	.word	0x0800616d
 8005d30:	0800616d 	.word	0x0800616d
 8005d34:	0800616d 	.word	0x0800616d
 8005d38:	0800616d 	.word	0x0800616d
 8005d3c:	08006175 	.word	0x08006175
 8005d40:	08006175 	.word	0x08006175
 8005d44:	08006175 	.word	0x08006175
 8005d48:	08006175 	.word	0x08006175
 8005d4c:	0800617d 	.word	0x0800617d
 8005d50:	0800617d 	.word	0x0800617d
 8005d54:	0800617d 	.word	0x0800617d
 8005d58:	0800617d 	.word	0x0800617d
 8005d5c:	08006185 	.word	0x08006185
 8005d60:	08006185 	.word	0x08006185
 8005d64:	08006185 	.word	0x08006185
 8005d68:	08006185 	.word	0x08006185
 8005d6c:	0800618d 	.word	0x0800618d
 8005d70:	0800618d 	.word	0x0800618d
 8005d74:	0800618d 	.word	0x0800618d
 8005d78:	0800618d 	.word	0x0800618d
 8005d7c:	08006195 	.word	0x08006195
 8005d80:	08006195 	.word	0x08006195
 8005d84:	08006195 	.word	0x08006195
 8005d88:	08006195 	.word	0x08006195
 8005d8c:	0800619d 	.word	0x0800619d
 8005d90:	0800619d 	.word	0x0800619d
 8005d94:	0800619d 	.word	0x0800619d
 8005d98:	0800619d 	.word	0x0800619d
 8005d9c:	080061a5 	.word	0x080061a5
 8005da0:	080061a5 	.word	0x080061a5
 8005da4:	080061a5 	.word	0x080061a5
 8005da8:	080061a5 	.word	0x080061a5
 8005dac:	080061ad 	.word	0x080061ad
 8005db0:	080061ad 	.word	0x080061ad
 8005db4:	080061ad 	.word	0x080061ad
 8005db8:	080061ad 	.word	0x080061ad
 8005dbc:	080061b5 	.word	0x080061b5
 8005dc0:	080061b5 	.word	0x080061b5
 8005dc4:	080061b5 	.word	0x080061b5
 8005dc8:	080061b5 	.word	0x080061b5
 8005dcc:	080061bd 	.word	0x080061bd
 8005dd0:	080061bd 	.word	0x080061bd
 8005dd4:	080061bd 	.word	0x080061bd
 8005dd8:	080061bd 	.word	0x080061bd
 8005ddc:	080061c5 	.word	0x080061c5
 8005de0:	080061c5 	.word	0x080061c5
 8005de4:	080061c5 	.word	0x080061c5
 8005de8:	080061c5 	.word	0x080061c5
 8005dec:	080061cd 	.word	0x080061cd
 8005df0:	080061cd 	.word	0x080061cd
 8005df4:	080061cd 	.word	0x080061cd
 8005df8:	080061cd 	.word	0x080061cd
 8005dfc:	080061d5 	.word	0x080061d5
 8005e00:	080061d5 	.word	0x080061d5
 8005e04:	080061d5 	.word	0x080061d5
 8005e08:	080061d5 	.word	0x080061d5
 8005e0c:	080061dd 	.word	0x080061dd
 8005e10:	080061dd 	.word	0x080061dd
 8005e14:	080061dd 	.word	0x080061dd
 8005e18:	080061dd 	.word	0x080061dd
 8005e1c:	080061e5 	.word	0x080061e5
 8005e20:	080061e5 	.word	0x080061e5
 8005e24:	080061e5 	.word	0x080061e5
 8005e28:	080061e5 	.word	0x080061e5
 8005e2c:	080061ed 	.word	0x080061ed
 8005e30:	080061ed 	.word	0x080061ed
 8005e34:	080061ed 	.word	0x080061ed
 8005e38:	080061ed 	.word	0x080061ed
 8005e3c:	080061f5 	.word	0x080061f5
 8005e40:	080061f5 	.word	0x080061f5
 8005e44:	080061f5 	.word	0x080061f5
 8005e48:	080061f5 	.word	0x080061f5
 8005e4c:	080061fd 	.word	0x080061fd
 8005e50:	080061fd 	.word	0x080061fd
 8005e54:	080061fd 	.word	0x080061fd
 8005e58:	080061fd 	.word	0x080061fd
 8005e5c:	08006205 	.word	0x08006205
 8005e60:	08006205 	.word	0x08006205
 8005e64:	08006205 	.word	0x08006205
 8005e68:	08006205 	.word	0x08006205
 8005e6c:	0800620d 	.word	0x0800620d
 8005e70:	0800620d 	.word	0x0800620d
 8005e74:	0800620d 	.word	0x0800620d
 8005e78:	0800620d 	.word	0x0800620d
 8005e7c:	08006215 	.word	0x08006215
 8005e80:	08006215 	.word	0x08006215
 8005e84:	08006215 	.word	0x08006215
 8005e88:	08006215 	.word	0x08006215
 8005e8c:	0800621d 	.word	0x0800621d
 8005e90:	0800621d 	.word	0x0800621d
 8005e94:	0800621d 	.word	0x0800621d
 8005e98:	0800621d 	.word	0x0800621d
 8005e9c:	08006225 	.word	0x08006225
 8005ea0:	08006225 	.word	0x08006225
 8005ea4:	08006225 	.word	0x08006225
 8005ea8:	08006225 	.word	0x08006225
 8005eac:	0800622d 	.word	0x0800622d
 8005eb0:	0800622d 	.word	0x0800622d
 8005eb4:	0800622d 	.word	0x0800622d
 8005eb8:	0800622d 	.word	0x0800622d
 8005ebc:	08006235 	.word	0x08006235
 8005ec0:	08006235 	.word	0x08006235
 8005ec4:	08006235 	.word	0x08006235
 8005ec8:	08006235 	.word	0x08006235
 8005ecc:	0800623d 	.word	0x0800623d
 8005ed0:	0800623d 	.word	0x0800623d
 8005ed4:	0800623d 	.word	0x0800623d
 8005ed8:	0800623d 	.word	0x0800623d
 8005edc:	08006245 	.word	0x08006245
 8005ee0:	08006245 	.word	0x08006245
 8005ee4:	08006245 	.word	0x08006245
 8005ee8:	08006245 	.word	0x08006245
 8005eec:	0800624d 	.word	0x0800624d
 8005ef0:	0800624d 	.word	0x0800624d
 8005ef4:	0800624d 	.word	0x0800624d
 8005ef8:	0800624d 	.word	0x0800624d
 8005efc:	08006255 	.word	0x08006255
 8005f00:	08006255 	.word	0x08006255
 8005f04:	08006255 	.word	0x08006255
 8005f08:	08006255 	.word	0x08006255
 8005f0c:	0800625d 	.word	0x0800625d
 8005f10:	0800625d 	.word	0x0800625d
 8005f14:	0800625d 	.word	0x0800625d
 8005f18:	0800625d 	.word	0x0800625d
 8005f1c:	08006265 	.word	0x08006265
 8005f20:	08006265 	.word	0x08006265
 8005f24:	08006265 	.word	0x08006265
 8005f28:	08006265 	.word	0x08006265
 8005f2c:	0800626d 	.word	0x0800626d
 8005f30:	0800626d 	.word	0x0800626d
 8005f34:	0800626d 	.word	0x0800626d
 8005f38:	0800626d 	.word	0x0800626d
 8005f3c:	08006275 	.word	0x08006275
 8005f40:	08006275 	.word	0x08006275
 8005f44:	08006275 	.word	0x08006275
 8005f48:	08006275 	.word	0x08006275
 8005f4c:	0800627d 	.word	0x0800627d
 8005f50:	0800627d 	.word	0x0800627d
 8005f54:	0800627d 	.word	0x0800627d
 8005f58:	0800627d 	.word	0x0800627d
 8005f5c:	08006285 	.word	0x08006285
 8005f60:	08006285 	.word	0x08006285
 8005f64:	08006285 	.word	0x08006285
 8005f68:	08006285 	.word	0x08006285
 8005f6c:	0800628d 	.word	0x0800628d
 8005f70:	0800628d 	.word	0x0800628d
 8005f74:	0800628d 	.word	0x0800628d
 8005f78:	0800628d 	.word	0x0800628d
 8005f7c:	08006295 	.word	0x08006295
 8005f80:	08006295 	.word	0x08006295
 8005f84:	08006295 	.word	0x08006295
 8005f88:	08006295 	.word	0x08006295
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7ff fb89 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005f92:	e184      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7ff fb85 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005f9a:	e180      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005f9c:	2002      	movs	r0, #2
 8005f9e:	f7ff fb81 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fa2:	e17c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005fa4:	2003      	movs	r0, #3
 8005fa6:	f7ff fb7d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005faa:	e178      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005fac:	2004      	movs	r0, #4
 8005fae:	f7ff fb79 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fb2:	e174      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005fb4:	2005      	movs	r0, #5
 8005fb6:	f7ff fb75 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fba:	e170      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005fbc:	2006      	movs	r0, #6
 8005fbe:	f7ff fb71 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fc2:	e16c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005fc4:	2007      	movs	r0, #7
 8005fc6:	f7ff fb6d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fca:	e168      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005fcc:	2008      	movs	r0, #8
 8005fce:	f7ff fb69 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fd2:	e164      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005fd4:	2009      	movs	r0, #9
 8005fd6:	f7ff fb65 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fda:	e160      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005fdc:	200a      	movs	r0, #10
 8005fde:	f7ff fb61 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fe2:	e15c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005fe4:	200b      	movs	r0, #11
 8005fe6:	f7ff fb5d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005fea:	e158      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005fec:	200c      	movs	r0, #12
 8005fee:	f7ff fb59 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005ff2:	e154      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8005ff4:	200d      	movs	r0, #13
 8005ff6:	f7ff fb55 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8005ffa:	e150      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005ffc:	200e      	movs	r0, #14
 8005ffe:	f7ff fb51 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006002:	e14c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8006004:	200f      	movs	r0, #15
 8006006:	f7ff fb4d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800600a:	e148      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 800600c:	2010      	movs	r0, #16
 800600e:	f7ff fb49 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006012:	e144      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8006014:	2011      	movs	r0, #17
 8006016:	f7ff fb45 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800601a:	e140      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 800601c:	2012      	movs	r0, #18
 800601e:	f7ff fb41 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006022:	e13c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8006024:	2013      	movs	r0, #19
 8006026:	f7ff fb3d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800602a:	e138      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 800602c:	2014      	movs	r0, #20
 800602e:	f7ff fb39 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006032:	e134      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8006034:	2015      	movs	r0, #21
 8006036:	f7ff fb35 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800603a:	e130      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 800603c:	2016      	movs	r0, #22
 800603e:	f7ff fb31 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006042:	e12c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8006044:	2017      	movs	r0, #23
 8006046:	f7ff fb2d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800604a:	e128      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 800604c:	2018      	movs	r0, #24
 800604e:	f7ff fb29 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006052:	e124      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8006054:	2019      	movs	r0, #25
 8006056:	f7ff fb25 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800605a:	e120      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 800605c:	201a      	movs	r0, #26
 800605e:	f7ff fb21 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006062:	e11c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8006064:	201b      	movs	r0, #27
 8006066:	f7ff fb1d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800606a:	e118      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 800606c:	201c      	movs	r0, #28
 800606e:	f7ff fb19 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006072:	e114      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8006074:	201d      	movs	r0, #29
 8006076:	f7ff fb15 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800607a:	e110      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 800607c:	201e      	movs	r0, #30
 800607e:	f7ff fb11 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006082:	e10c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8006084:	201f      	movs	r0, #31
 8006086:	f7ff fb0d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800608a:	e108      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 800608c:	2020      	movs	r0, #32
 800608e:	f7ff fb09 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006092:	e104      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8006094:	2021      	movs	r0, #33	; 0x21
 8006096:	f7ff fb05 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800609a:	e100      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 800609c:	2022      	movs	r0, #34	; 0x22
 800609e:	f7ff fb01 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060a2:	e0fc      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 80060a4:	2023      	movs	r0, #35	; 0x23
 80060a6:	f7ff fafd 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060aa:	e0f8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 80060ac:	2024      	movs	r0, #36	; 0x24
 80060ae:	f7ff faf9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060b2:	e0f4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 80060b4:	2025      	movs	r0, #37	; 0x25
 80060b6:	f7ff faf5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060ba:	e0f0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 80060bc:	2026      	movs	r0, #38	; 0x26
 80060be:	f7ff faf1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060c2:	e0ec      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 80060c4:	2027      	movs	r0, #39	; 0x27
 80060c6:	f7ff faed 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060ca:	e0e8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 80060cc:	2028      	movs	r0, #40	; 0x28
 80060ce:	f7ff fae9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060d2:	e0e4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 80060d4:	2029      	movs	r0, #41	; 0x29
 80060d6:	f7ff fae5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060da:	e0e0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 80060dc:	202a      	movs	r0, #42	; 0x2a
 80060de:	f7ff fae1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060e2:	e0dc      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 80060e4:	202b      	movs	r0, #43	; 0x2b
 80060e6:	f7ff fadd 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060ea:	e0d8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 80060ec:	202c      	movs	r0, #44	; 0x2c
 80060ee:	f7ff fad9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060f2:	e0d4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 80060f4:	202d      	movs	r0, #45	; 0x2d
 80060f6:	f7ff fad5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80060fa:	e0d0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 80060fc:	202e      	movs	r0, #46	; 0x2e
 80060fe:	f7ff fad1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006102:	e0cc      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8006104:	202f      	movs	r0, #47	; 0x2f
 8006106:	f7ff facd 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800610a:	e0c8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f7ff fac9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006112:	e0c4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8006114:	2031      	movs	r0, #49	; 0x31
 8006116:	f7ff fac5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800611a:	e0c0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 800611c:	2032      	movs	r0, #50	; 0x32
 800611e:	f7ff fac1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006122:	e0bc      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8006124:	2033      	movs	r0, #51	; 0x33
 8006126:	f7ff fabd 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800612a:	e0b8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 800612c:	2034      	movs	r0, #52	; 0x34
 800612e:	f7ff fab9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006132:	e0b4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8006134:	2035      	movs	r0, #53	; 0x35
 8006136:	f7ff fab5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800613a:	e0b0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 800613c:	2036      	movs	r0, #54	; 0x36
 800613e:	f7ff fab1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006142:	e0ac      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8006144:	2037      	movs	r0, #55	; 0x37
 8006146:	f7ff faad 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800614a:	e0a8      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 800614c:	2038      	movs	r0, #56	; 0x38
 800614e:	f7ff faa9 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006152:	e0a4      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8006154:	2039      	movs	r0, #57	; 0x39
 8006156:	f7ff faa5 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800615a:	e0a0      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 800615c:	203a      	movs	r0, #58	; 0x3a
 800615e:	f7ff faa1 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006162:	e09c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8006164:	203b      	movs	r0, #59	; 0x3b
 8006166:	f7ff fa9d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800616a:	e098      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 800616c:	203c      	movs	r0, #60	; 0x3c
 800616e:	f7ff fa99 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006172:	e094      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8006174:	203d      	movs	r0, #61	; 0x3d
 8006176:	f7ff fa95 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800617a:	e090      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 800617c:	203e      	movs	r0, #62	; 0x3e
 800617e:	f7ff fa91 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006182:	e08c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8006184:	203f      	movs	r0, #63	; 0x3f
 8006186:	f7ff fa8d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800618a:	e088      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 800618c:	2040      	movs	r0, #64	; 0x40
 800618e:	f7ff fa89 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006192:	e084      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8006194:	2041      	movs	r0, #65	; 0x41
 8006196:	f7ff fa85 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800619a:	e080      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 800619c:	2042      	movs	r0, #66	; 0x42
 800619e:	f7ff fa81 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061a2:	e07c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 80061a4:	2043      	movs	r0, #67	; 0x43
 80061a6:	f7ff fa7d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061aa:	e078      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 80061ac:	2044      	movs	r0, #68	; 0x44
 80061ae:	f7ff fa79 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061b2:	e074      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 80061b4:	2045      	movs	r0, #69	; 0x45
 80061b6:	f7ff fa75 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061ba:	e070      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 80061bc:	2046      	movs	r0, #70	; 0x46
 80061be:	f7ff fa71 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061c2:	e06c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 80061c4:	2047      	movs	r0, #71	; 0x47
 80061c6:	f7ff fa6d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061ca:	e068      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 80061cc:	2048      	movs	r0, #72	; 0x48
 80061ce:	f7ff fa69 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061d2:	e064      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 80061d4:	2049      	movs	r0, #73	; 0x49
 80061d6:	f7ff fa65 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061da:	e060      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 80061dc:	204a      	movs	r0, #74	; 0x4a
 80061de:	f7ff fa61 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061e2:	e05c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 80061e4:	204b      	movs	r0, #75	; 0x4b
 80061e6:	f7ff fa5d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061ea:	e058      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 80061ec:	204c      	movs	r0, #76	; 0x4c
 80061ee:	f7ff fa59 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061f2:	e054      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 80061f4:	204d      	movs	r0, #77	; 0x4d
 80061f6:	f7ff fa55 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 80061fa:	e050      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 80061fc:	204e      	movs	r0, #78	; 0x4e
 80061fe:	f7ff fa51 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006202:	e04c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8006204:	204f      	movs	r0, #79	; 0x4f
 8006206:	f7ff fa4d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800620a:	e048      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 800620c:	2050      	movs	r0, #80	; 0x50
 800620e:	f7ff fa49 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006212:	e044      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8006214:	2051      	movs	r0, #81	; 0x51
 8006216:	f7ff fa45 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800621a:	e040      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 800621c:	2052      	movs	r0, #82	; 0x52
 800621e:	f7ff fa41 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006222:	e03c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8006224:	2053      	movs	r0, #83	; 0x53
 8006226:	f7ff fa3d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800622a:	e038      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 800622c:	2054      	movs	r0, #84	; 0x54
 800622e:	f7ff fa39 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006232:	e034      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8006234:	2055      	movs	r0, #85	; 0x55
 8006236:	f7ff fa35 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800623a:	e030      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 800623c:	2056      	movs	r0, #86	; 0x56
 800623e:	f7ff fa31 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006242:	e02c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8006244:	2057      	movs	r0, #87	; 0x57
 8006246:	f7ff fa2d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800624a:	e028      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 800624c:	2058      	movs	r0, #88	; 0x58
 800624e:	f7ff fa29 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006252:	e024      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8006254:	2059      	movs	r0, #89	; 0x59
 8006256:	f7ff fa25 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800625a:	e020      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 800625c:	205a      	movs	r0, #90	; 0x5a
 800625e:	f7ff fa21 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006262:	e01c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8006264:	205b      	movs	r0, #91	; 0x5b
 8006266:	f7ff fa1d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800626a:	e018      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 800626c:	205c      	movs	r0, #92	; 0x5c
 800626e:	f7ff fa19 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006272:	e014      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8006274:	205d      	movs	r0, #93	; 0x5d
 8006276:	f7ff fa15 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800627a:	e010      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 800627c:	205e      	movs	r0, #94	; 0x5e
 800627e:	f7ff fa11 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006282:	e00c      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8006284:	205f      	movs	r0, #95	; 0x5f
 8006286:	f7ff fa0d 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800628a:	e008      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 800628c:	2060      	movs	r0, #96	; 0x60
 800628e:	f7ff fa09 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 8006292:	e004      	b.n	800629e <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 8006294:	2061      	movs	r0, #97	; 0x61
 8006296:	f7ff fa05 	bl	80056a4 <VPP_ApplyPresetToSignal>
			break;
 800629a:	e000      	b.n	800629e <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 800629c:	bf00      	nop
	}
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80062b8:	f200 849a 	bhi.w	8006bf0 <VPP_ModifySyncOutput+0x948>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <VPP_ModifySyncOutput+0x1c>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080068e1 	.word	0x080068e1
 80062c8:	080068e1 	.word	0x080068e1
 80062cc:	080068e1 	.word	0x080068e1
 80062d0:	080068e9 	.word	0x080068e9
 80062d4:	080068e9 	.word	0x080068e9
 80062d8:	080068e9 	.word	0x080068e9
 80062dc:	080068e9 	.word	0x080068e9
 80062e0:	080068f1 	.word	0x080068f1
 80062e4:	080068f1 	.word	0x080068f1
 80062e8:	080068f1 	.word	0x080068f1
 80062ec:	080068f1 	.word	0x080068f1
 80062f0:	080068f9 	.word	0x080068f9
 80062f4:	080068f9 	.word	0x080068f9
 80062f8:	080068f9 	.word	0x080068f9
 80062fc:	080068f9 	.word	0x080068f9
 8006300:	08006901 	.word	0x08006901
 8006304:	08006901 	.word	0x08006901
 8006308:	08006901 	.word	0x08006901
 800630c:	08006901 	.word	0x08006901
 8006310:	08006909 	.word	0x08006909
 8006314:	08006909 	.word	0x08006909
 8006318:	08006909 	.word	0x08006909
 800631c:	08006909 	.word	0x08006909
 8006320:	08006911 	.word	0x08006911
 8006324:	08006911 	.word	0x08006911
 8006328:	08006911 	.word	0x08006911
 800632c:	08006911 	.word	0x08006911
 8006330:	08006919 	.word	0x08006919
 8006334:	08006919 	.word	0x08006919
 8006338:	08006919 	.word	0x08006919
 800633c:	08006919 	.word	0x08006919
 8006340:	08006921 	.word	0x08006921
 8006344:	08006921 	.word	0x08006921
 8006348:	08006921 	.word	0x08006921
 800634c:	08006921 	.word	0x08006921
 8006350:	08006929 	.word	0x08006929
 8006354:	08006929 	.word	0x08006929
 8006358:	08006929 	.word	0x08006929
 800635c:	08006929 	.word	0x08006929
 8006360:	08006931 	.word	0x08006931
 8006364:	08006931 	.word	0x08006931
 8006368:	08006931 	.word	0x08006931
 800636c:	08006931 	.word	0x08006931
 8006370:	08006939 	.word	0x08006939
 8006374:	08006939 	.word	0x08006939
 8006378:	08006939 	.word	0x08006939
 800637c:	08006939 	.word	0x08006939
 8006380:	08006941 	.word	0x08006941
 8006384:	08006941 	.word	0x08006941
 8006388:	08006941 	.word	0x08006941
 800638c:	08006941 	.word	0x08006941
 8006390:	08006949 	.word	0x08006949
 8006394:	08006949 	.word	0x08006949
 8006398:	08006949 	.word	0x08006949
 800639c:	08006949 	.word	0x08006949
 80063a0:	08006951 	.word	0x08006951
 80063a4:	08006951 	.word	0x08006951
 80063a8:	08006951 	.word	0x08006951
 80063ac:	08006951 	.word	0x08006951
 80063b0:	08006959 	.word	0x08006959
 80063b4:	08006959 	.word	0x08006959
 80063b8:	08006959 	.word	0x08006959
 80063bc:	08006959 	.word	0x08006959
 80063c0:	08006961 	.word	0x08006961
 80063c4:	08006961 	.word	0x08006961
 80063c8:	08006961 	.word	0x08006961
 80063cc:	08006961 	.word	0x08006961
 80063d0:	08006969 	.word	0x08006969
 80063d4:	08006969 	.word	0x08006969
 80063d8:	08006969 	.word	0x08006969
 80063dc:	08006969 	.word	0x08006969
 80063e0:	08006971 	.word	0x08006971
 80063e4:	08006971 	.word	0x08006971
 80063e8:	08006971 	.word	0x08006971
 80063ec:	08006971 	.word	0x08006971
 80063f0:	08006979 	.word	0x08006979
 80063f4:	08006979 	.word	0x08006979
 80063f8:	08006979 	.word	0x08006979
 80063fc:	08006979 	.word	0x08006979
 8006400:	08006981 	.word	0x08006981
 8006404:	08006981 	.word	0x08006981
 8006408:	08006981 	.word	0x08006981
 800640c:	08006981 	.word	0x08006981
 8006410:	08006989 	.word	0x08006989
 8006414:	08006989 	.word	0x08006989
 8006418:	08006989 	.word	0x08006989
 800641c:	08006989 	.word	0x08006989
 8006420:	08006991 	.word	0x08006991
 8006424:	08006991 	.word	0x08006991
 8006428:	08006991 	.word	0x08006991
 800642c:	08006991 	.word	0x08006991
 8006430:	08006999 	.word	0x08006999
 8006434:	08006999 	.word	0x08006999
 8006438:	08006999 	.word	0x08006999
 800643c:	08006999 	.word	0x08006999
 8006440:	080069a1 	.word	0x080069a1
 8006444:	080069a1 	.word	0x080069a1
 8006448:	080069a1 	.word	0x080069a1
 800644c:	080069a1 	.word	0x080069a1
 8006450:	080069a9 	.word	0x080069a9
 8006454:	080069a9 	.word	0x080069a9
 8006458:	080069a9 	.word	0x080069a9
 800645c:	080069a9 	.word	0x080069a9
 8006460:	080069b1 	.word	0x080069b1
 8006464:	080069b1 	.word	0x080069b1
 8006468:	080069b1 	.word	0x080069b1
 800646c:	080069b1 	.word	0x080069b1
 8006470:	080069b9 	.word	0x080069b9
 8006474:	080069b9 	.word	0x080069b9
 8006478:	080069b9 	.word	0x080069b9
 800647c:	080069b9 	.word	0x080069b9
 8006480:	080069c1 	.word	0x080069c1
 8006484:	080069c1 	.word	0x080069c1
 8006488:	080069c1 	.word	0x080069c1
 800648c:	080069c1 	.word	0x080069c1
 8006490:	080069c9 	.word	0x080069c9
 8006494:	080069c9 	.word	0x080069c9
 8006498:	080069c9 	.word	0x080069c9
 800649c:	080069c9 	.word	0x080069c9
 80064a0:	080069d1 	.word	0x080069d1
 80064a4:	080069d1 	.word	0x080069d1
 80064a8:	080069d1 	.word	0x080069d1
 80064ac:	080069d1 	.word	0x080069d1
 80064b0:	080069d9 	.word	0x080069d9
 80064b4:	080069d9 	.word	0x080069d9
 80064b8:	080069d9 	.word	0x080069d9
 80064bc:	080069d9 	.word	0x080069d9
 80064c0:	080069e1 	.word	0x080069e1
 80064c4:	080069e1 	.word	0x080069e1
 80064c8:	080069e1 	.word	0x080069e1
 80064cc:	080069e1 	.word	0x080069e1
 80064d0:	080069e9 	.word	0x080069e9
 80064d4:	080069e9 	.word	0x080069e9
 80064d8:	080069e9 	.word	0x080069e9
 80064dc:	080069e9 	.word	0x080069e9
 80064e0:	080069f1 	.word	0x080069f1
 80064e4:	080069f1 	.word	0x080069f1
 80064e8:	080069f1 	.word	0x080069f1
 80064ec:	080069f1 	.word	0x080069f1
 80064f0:	080069f9 	.word	0x080069f9
 80064f4:	080069f9 	.word	0x080069f9
 80064f8:	080069f9 	.word	0x080069f9
 80064fc:	080069f9 	.word	0x080069f9
 8006500:	08006a01 	.word	0x08006a01
 8006504:	08006a01 	.word	0x08006a01
 8006508:	08006a01 	.word	0x08006a01
 800650c:	08006a01 	.word	0x08006a01
 8006510:	08006a09 	.word	0x08006a09
 8006514:	08006a09 	.word	0x08006a09
 8006518:	08006a09 	.word	0x08006a09
 800651c:	08006a09 	.word	0x08006a09
 8006520:	08006a11 	.word	0x08006a11
 8006524:	08006a11 	.word	0x08006a11
 8006528:	08006a11 	.word	0x08006a11
 800652c:	08006a11 	.word	0x08006a11
 8006530:	08006a19 	.word	0x08006a19
 8006534:	08006a19 	.word	0x08006a19
 8006538:	08006a19 	.word	0x08006a19
 800653c:	08006a19 	.word	0x08006a19
 8006540:	08006a21 	.word	0x08006a21
 8006544:	08006a21 	.word	0x08006a21
 8006548:	08006a21 	.word	0x08006a21
 800654c:	08006a21 	.word	0x08006a21
 8006550:	08006a29 	.word	0x08006a29
 8006554:	08006a29 	.word	0x08006a29
 8006558:	08006a29 	.word	0x08006a29
 800655c:	08006a29 	.word	0x08006a29
 8006560:	08006a31 	.word	0x08006a31
 8006564:	08006a31 	.word	0x08006a31
 8006568:	08006a31 	.word	0x08006a31
 800656c:	08006a31 	.word	0x08006a31
 8006570:	08006a39 	.word	0x08006a39
 8006574:	08006a39 	.word	0x08006a39
 8006578:	08006a39 	.word	0x08006a39
 800657c:	08006a39 	.word	0x08006a39
 8006580:	08006a41 	.word	0x08006a41
 8006584:	08006a41 	.word	0x08006a41
 8006588:	08006a41 	.word	0x08006a41
 800658c:	08006a41 	.word	0x08006a41
 8006590:	08006a49 	.word	0x08006a49
 8006594:	08006a49 	.word	0x08006a49
 8006598:	08006a49 	.word	0x08006a49
 800659c:	08006a49 	.word	0x08006a49
 80065a0:	08006a51 	.word	0x08006a51
 80065a4:	08006a51 	.word	0x08006a51
 80065a8:	08006a51 	.word	0x08006a51
 80065ac:	08006a51 	.word	0x08006a51
 80065b0:	08006a59 	.word	0x08006a59
 80065b4:	08006a59 	.word	0x08006a59
 80065b8:	08006a59 	.word	0x08006a59
 80065bc:	08006a59 	.word	0x08006a59
 80065c0:	08006a61 	.word	0x08006a61
 80065c4:	08006a61 	.word	0x08006a61
 80065c8:	08006a61 	.word	0x08006a61
 80065cc:	08006a61 	.word	0x08006a61
 80065d0:	08006a69 	.word	0x08006a69
 80065d4:	08006a69 	.word	0x08006a69
 80065d8:	08006a69 	.word	0x08006a69
 80065dc:	08006a69 	.word	0x08006a69
 80065e0:	08006a71 	.word	0x08006a71
 80065e4:	08006a71 	.word	0x08006a71
 80065e8:	08006a71 	.word	0x08006a71
 80065ec:	08006a71 	.word	0x08006a71
 80065f0:	08006a79 	.word	0x08006a79
 80065f4:	08006a79 	.word	0x08006a79
 80065f8:	08006a79 	.word	0x08006a79
 80065fc:	08006a79 	.word	0x08006a79
 8006600:	08006a81 	.word	0x08006a81
 8006604:	08006a81 	.word	0x08006a81
 8006608:	08006a81 	.word	0x08006a81
 800660c:	08006a81 	.word	0x08006a81
 8006610:	08006a89 	.word	0x08006a89
 8006614:	08006a89 	.word	0x08006a89
 8006618:	08006a89 	.word	0x08006a89
 800661c:	08006a89 	.word	0x08006a89
 8006620:	08006a91 	.word	0x08006a91
 8006624:	08006a91 	.word	0x08006a91
 8006628:	08006a91 	.word	0x08006a91
 800662c:	08006a91 	.word	0x08006a91
 8006630:	08006a99 	.word	0x08006a99
 8006634:	08006a99 	.word	0x08006a99
 8006638:	08006a99 	.word	0x08006a99
 800663c:	08006a99 	.word	0x08006a99
 8006640:	08006aa1 	.word	0x08006aa1
 8006644:	08006aa1 	.word	0x08006aa1
 8006648:	08006aa1 	.word	0x08006aa1
 800664c:	08006aa1 	.word	0x08006aa1
 8006650:	08006aa9 	.word	0x08006aa9
 8006654:	08006aa9 	.word	0x08006aa9
 8006658:	08006aa9 	.word	0x08006aa9
 800665c:	08006aa9 	.word	0x08006aa9
 8006660:	08006ab1 	.word	0x08006ab1
 8006664:	08006ab1 	.word	0x08006ab1
 8006668:	08006ab1 	.word	0x08006ab1
 800666c:	08006ab1 	.word	0x08006ab1
 8006670:	08006ab9 	.word	0x08006ab9
 8006674:	08006ab9 	.word	0x08006ab9
 8006678:	08006ab9 	.word	0x08006ab9
 800667c:	08006ab9 	.word	0x08006ab9
 8006680:	08006ac1 	.word	0x08006ac1
 8006684:	08006ac1 	.word	0x08006ac1
 8006688:	08006ac1 	.word	0x08006ac1
 800668c:	08006ac1 	.word	0x08006ac1
 8006690:	08006ac9 	.word	0x08006ac9
 8006694:	08006ac9 	.word	0x08006ac9
 8006698:	08006ac9 	.word	0x08006ac9
 800669c:	08006ac9 	.word	0x08006ac9
 80066a0:	08006ad1 	.word	0x08006ad1
 80066a4:	08006ad1 	.word	0x08006ad1
 80066a8:	08006ad1 	.word	0x08006ad1
 80066ac:	08006ad1 	.word	0x08006ad1
 80066b0:	08006ad9 	.word	0x08006ad9
 80066b4:	08006ad9 	.word	0x08006ad9
 80066b8:	08006ad9 	.word	0x08006ad9
 80066bc:	08006ad9 	.word	0x08006ad9
 80066c0:	08006ae1 	.word	0x08006ae1
 80066c4:	08006ae1 	.word	0x08006ae1
 80066c8:	08006ae1 	.word	0x08006ae1
 80066cc:	08006ae1 	.word	0x08006ae1
 80066d0:	08006ae9 	.word	0x08006ae9
 80066d4:	08006ae9 	.word	0x08006ae9
 80066d8:	08006ae9 	.word	0x08006ae9
 80066dc:	08006ae9 	.word	0x08006ae9
 80066e0:	08006af1 	.word	0x08006af1
 80066e4:	08006af1 	.word	0x08006af1
 80066e8:	08006af1 	.word	0x08006af1
 80066ec:	08006af1 	.word	0x08006af1
 80066f0:	08006af9 	.word	0x08006af9
 80066f4:	08006af9 	.word	0x08006af9
 80066f8:	08006af9 	.word	0x08006af9
 80066fc:	08006af9 	.word	0x08006af9
 8006700:	08006b01 	.word	0x08006b01
 8006704:	08006b01 	.word	0x08006b01
 8006708:	08006b01 	.word	0x08006b01
 800670c:	08006b01 	.word	0x08006b01
 8006710:	08006b09 	.word	0x08006b09
 8006714:	08006b09 	.word	0x08006b09
 8006718:	08006b09 	.word	0x08006b09
 800671c:	08006b09 	.word	0x08006b09
 8006720:	08006b11 	.word	0x08006b11
 8006724:	08006b11 	.word	0x08006b11
 8006728:	08006b11 	.word	0x08006b11
 800672c:	08006b11 	.word	0x08006b11
 8006730:	08006b19 	.word	0x08006b19
 8006734:	08006b19 	.word	0x08006b19
 8006738:	08006b19 	.word	0x08006b19
 800673c:	08006b19 	.word	0x08006b19
 8006740:	08006b21 	.word	0x08006b21
 8006744:	08006b21 	.word	0x08006b21
 8006748:	08006b21 	.word	0x08006b21
 800674c:	08006b21 	.word	0x08006b21
 8006750:	08006b29 	.word	0x08006b29
 8006754:	08006b29 	.word	0x08006b29
 8006758:	08006b29 	.word	0x08006b29
 800675c:	08006b29 	.word	0x08006b29
 8006760:	08006b31 	.word	0x08006b31
 8006764:	08006b31 	.word	0x08006b31
 8006768:	08006b31 	.word	0x08006b31
 800676c:	08006b31 	.word	0x08006b31
 8006770:	08006b39 	.word	0x08006b39
 8006774:	08006b39 	.word	0x08006b39
 8006778:	08006b39 	.word	0x08006b39
 800677c:	08006b39 	.word	0x08006b39
 8006780:	08006b41 	.word	0x08006b41
 8006784:	08006b41 	.word	0x08006b41
 8006788:	08006b41 	.word	0x08006b41
 800678c:	08006b41 	.word	0x08006b41
 8006790:	08006b49 	.word	0x08006b49
 8006794:	08006b49 	.word	0x08006b49
 8006798:	08006b49 	.word	0x08006b49
 800679c:	08006b49 	.word	0x08006b49
 80067a0:	08006b51 	.word	0x08006b51
 80067a4:	08006b51 	.word	0x08006b51
 80067a8:	08006b51 	.word	0x08006b51
 80067ac:	08006b51 	.word	0x08006b51
 80067b0:	08006b59 	.word	0x08006b59
 80067b4:	08006b59 	.word	0x08006b59
 80067b8:	08006b59 	.word	0x08006b59
 80067bc:	08006b59 	.word	0x08006b59
 80067c0:	08006b61 	.word	0x08006b61
 80067c4:	08006b61 	.word	0x08006b61
 80067c8:	08006b61 	.word	0x08006b61
 80067cc:	08006b61 	.word	0x08006b61
 80067d0:	08006b69 	.word	0x08006b69
 80067d4:	08006b69 	.word	0x08006b69
 80067d8:	08006b69 	.word	0x08006b69
 80067dc:	08006b69 	.word	0x08006b69
 80067e0:	08006b71 	.word	0x08006b71
 80067e4:	08006b71 	.word	0x08006b71
 80067e8:	08006b71 	.word	0x08006b71
 80067ec:	08006b71 	.word	0x08006b71
 80067f0:	08006b79 	.word	0x08006b79
 80067f4:	08006b79 	.word	0x08006b79
 80067f8:	08006b79 	.word	0x08006b79
 80067fc:	08006b79 	.word	0x08006b79
 8006800:	08006b81 	.word	0x08006b81
 8006804:	08006b81 	.word	0x08006b81
 8006808:	08006b81 	.word	0x08006b81
 800680c:	08006b81 	.word	0x08006b81
 8006810:	08006b89 	.word	0x08006b89
 8006814:	08006b89 	.word	0x08006b89
 8006818:	08006b89 	.word	0x08006b89
 800681c:	08006b89 	.word	0x08006b89
 8006820:	08006b91 	.word	0x08006b91
 8006824:	08006b91 	.word	0x08006b91
 8006828:	08006b91 	.word	0x08006b91
 800682c:	08006b91 	.word	0x08006b91
 8006830:	08006b99 	.word	0x08006b99
 8006834:	08006b99 	.word	0x08006b99
 8006838:	08006b99 	.word	0x08006b99
 800683c:	08006b99 	.word	0x08006b99
 8006840:	08006ba1 	.word	0x08006ba1
 8006844:	08006ba1 	.word	0x08006ba1
 8006848:	08006ba1 	.word	0x08006ba1
 800684c:	08006ba1 	.word	0x08006ba1
 8006850:	08006ba9 	.word	0x08006ba9
 8006854:	08006ba9 	.word	0x08006ba9
 8006858:	08006ba9 	.word	0x08006ba9
 800685c:	08006ba9 	.word	0x08006ba9
 8006860:	08006bb1 	.word	0x08006bb1
 8006864:	08006bb1 	.word	0x08006bb1
 8006868:	08006bb1 	.word	0x08006bb1
 800686c:	08006bb1 	.word	0x08006bb1
 8006870:	08006bb9 	.word	0x08006bb9
 8006874:	08006bb9 	.word	0x08006bb9
 8006878:	08006bb9 	.word	0x08006bb9
 800687c:	08006bb9 	.word	0x08006bb9
 8006880:	08006bc1 	.word	0x08006bc1
 8006884:	08006bc1 	.word	0x08006bc1
 8006888:	08006bc1 	.word	0x08006bc1
 800688c:	08006bc1 	.word	0x08006bc1
 8006890:	08006bc9 	.word	0x08006bc9
 8006894:	08006bc9 	.word	0x08006bc9
 8006898:	08006bc9 	.word	0x08006bc9
 800689c:	08006bc9 	.word	0x08006bc9
 80068a0:	08006bd1 	.word	0x08006bd1
 80068a4:	08006bd1 	.word	0x08006bd1
 80068a8:	08006bd1 	.word	0x08006bd1
 80068ac:	08006bd1 	.word	0x08006bd1
 80068b0:	08006bd9 	.word	0x08006bd9
 80068b4:	08006bd9 	.word	0x08006bd9
 80068b8:	08006bd9 	.word	0x08006bd9
 80068bc:	08006bd9 	.word	0x08006bd9
 80068c0:	08006be1 	.word	0x08006be1
 80068c4:	08006be1 	.word	0x08006be1
 80068c8:	08006be1 	.word	0x08006be1
 80068cc:	08006be1 	.word	0x08006be1
 80068d0:	08006be9 	.word	0x08006be9
 80068d4:	08006be9 	.word	0x08006be9
 80068d8:	08006be9 	.word	0x08006be9
 80068dc:	08006be9 	.word	0x08006be9
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 80068e0:	2000      	movs	r0, #0
 80068e2:	f7fe ff0d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80068e6:	e184      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 80068e8:	2001      	movs	r0, #1
 80068ea:	f7fe ff09 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80068ee:	e180      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 80068f0:	2002      	movs	r0, #2
 80068f2:	f7fe ff05 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80068f6:	e17c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 80068f8:	2003      	movs	r0, #3
 80068fa:	f7fe ff01 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80068fe:	e178      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006900:	2004      	movs	r0, #4
 8006902:	f7fe fefd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006906:	e174      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006908:	2005      	movs	r0, #5
 800690a:	f7fe fef9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800690e:	e170      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006910:	2006      	movs	r0, #6
 8006912:	f7fe fef5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006916:	e16c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006918:	2007      	movs	r0, #7
 800691a:	f7fe fef1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800691e:	e168      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006920:	2008      	movs	r0, #8
 8006922:	f7fe feed 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006926:	e164      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006928:	2009      	movs	r0, #9
 800692a:	f7fe fee9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800692e:	e160      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006930:	200a      	movs	r0, #10
 8006932:	f7fe fee5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006936:	e15c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006938:	200b      	movs	r0, #11
 800693a:	f7fe fee1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800693e:	e158      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006940:	200c      	movs	r0, #12
 8006942:	f7fe fedd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006946:	e154      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006948:	200d      	movs	r0, #13
 800694a:	f7fe fed9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800694e:	e150      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006950:	200e      	movs	r0, #14
 8006952:	f7fe fed5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006956:	e14c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006958:	200f      	movs	r0, #15
 800695a:	f7fe fed1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800695e:	e148      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006960:	2010      	movs	r0, #16
 8006962:	f7fe fecd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006966:	e144      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006968:	2011      	movs	r0, #17
 800696a:	f7fe fec9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800696e:	e140      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006970:	2012      	movs	r0, #18
 8006972:	f7fe fec5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006976:	e13c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8006978:	2013      	movs	r0, #19
 800697a:	f7fe fec1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800697e:	e138      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8006980:	2014      	movs	r0, #20
 8006982:	f7fe febd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006986:	e134      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8006988:	2015      	movs	r0, #21
 800698a:	f7fe feb9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800698e:	e130      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8006990:	2016      	movs	r0, #22
 8006992:	f7fe feb5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006996:	e12c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8006998:	2017      	movs	r0, #23
 800699a:	f7fe feb1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 800699e:	e128      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80069a0:	2018      	movs	r0, #24
 80069a2:	f7fe fead 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069a6:	e124      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80069a8:	2019      	movs	r0, #25
 80069aa:	f7fe fea9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069ae:	e120      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80069b0:	201a      	movs	r0, #26
 80069b2:	f7fe fea5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069b6:	e11c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80069b8:	201b      	movs	r0, #27
 80069ba:	f7fe fea1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069be:	e118      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80069c0:	201c      	movs	r0, #28
 80069c2:	f7fe fe9d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069c6:	e114      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 80069c8:	201d      	movs	r0, #29
 80069ca:	f7fe fe99 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069ce:	e110      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 80069d0:	201e      	movs	r0, #30
 80069d2:	f7fe fe95 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069d6:	e10c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 80069d8:	201f      	movs	r0, #31
 80069da:	f7fe fe91 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069de:	e108      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 80069e0:	2020      	movs	r0, #32
 80069e2:	f7fe fe8d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069e6:	e104      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 80069e8:	2021      	movs	r0, #33	; 0x21
 80069ea:	f7fe fe89 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069ee:	e100      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 80069f0:	2022      	movs	r0, #34	; 0x22
 80069f2:	f7fe fe85 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069f6:	e0fc      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 80069f8:	2023      	movs	r0, #35	; 0x23
 80069fa:	f7fe fe81 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 80069fe:	e0f8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006a00:	2024      	movs	r0, #36	; 0x24
 8006a02:	f7fe fe7d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a06:	e0f4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006a08:	2025      	movs	r0, #37	; 0x25
 8006a0a:	f7fe fe79 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a0e:	e0f0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006a10:	2026      	movs	r0, #38	; 0x26
 8006a12:	f7fe fe75 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a16:	e0ec      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006a18:	2027      	movs	r0, #39	; 0x27
 8006a1a:	f7fe fe71 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a1e:	e0e8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006a20:	2028      	movs	r0, #40	; 0x28
 8006a22:	f7fe fe6d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a26:	e0e4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006a28:	2029      	movs	r0, #41	; 0x29
 8006a2a:	f7fe fe69 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a2e:	e0e0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006a30:	202a      	movs	r0, #42	; 0x2a
 8006a32:	f7fe fe65 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a36:	e0dc      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006a38:	202b      	movs	r0, #43	; 0x2b
 8006a3a:	f7fe fe61 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a3e:	e0d8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006a40:	202c      	movs	r0, #44	; 0x2c
 8006a42:	f7fe fe5d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a46:	e0d4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006a48:	202d      	movs	r0, #45	; 0x2d
 8006a4a:	f7fe fe59 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a4e:	e0d0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006a50:	202e      	movs	r0, #46	; 0x2e
 8006a52:	f7fe fe55 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a56:	e0cc      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006a58:	202f      	movs	r0, #47	; 0x2f
 8006a5a:	f7fe fe51 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a5e:	e0c8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006a60:	2030      	movs	r0, #48	; 0x30
 8006a62:	f7fe fe4d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a66:	e0c4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006a68:	2031      	movs	r0, #49	; 0x31
 8006a6a:	f7fe fe49 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a6e:	e0c0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006a70:	2032      	movs	r0, #50	; 0x32
 8006a72:	f7fe fe45 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a76:	e0bc      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8006a78:	2033      	movs	r0, #51	; 0x33
 8006a7a:	f7fe fe41 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a7e:	e0b8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006a80:	2034      	movs	r0, #52	; 0x34
 8006a82:	f7fe fe3d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a86:	e0b4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8006a88:	2035      	movs	r0, #53	; 0x35
 8006a8a:	f7fe fe39 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a8e:	e0b0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006a90:	2036      	movs	r0, #54	; 0x36
 8006a92:	f7fe fe35 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a96:	e0ac      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8006a98:	2037      	movs	r0, #55	; 0x37
 8006a9a:	f7fe fe31 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006a9e:	e0a8      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006aa0:	2038      	movs	r0, #56	; 0x38
 8006aa2:	f7fe fe2d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006aa6:	e0a4      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8006aa8:	2039      	movs	r0, #57	; 0x39
 8006aaa:	f7fe fe29 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006aae:	e0a0      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006ab0:	203a      	movs	r0, #58	; 0x3a
 8006ab2:	f7fe fe25 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ab6:	e09c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8006ab8:	203b      	movs	r0, #59	; 0x3b
 8006aba:	f7fe fe21 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006abe:	e098      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006ac0:	203c      	movs	r0, #60	; 0x3c
 8006ac2:	f7fe fe1d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ac6:	e094      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006ac8:	203d      	movs	r0, #61	; 0x3d
 8006aca:	f7fe fe19 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ace:	e090      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006ad0:	203e      	movs	r0, #62	; 0x3e
 8006ad2:	f7fe fe15 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ad6:	e08c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006ad8:	203f      	movs	r0, #63	; 0x3f
 8006ada:	f7fe fe11 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ade:	e088      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006ae0:	2040      	movs	r0, #64	; 0x40
 8006ae2:	f7fe fe0d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ae6:	e084      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006ae8:	2041      	movs	r0, #65	; 0x41
 8006aea:	f7fe fe09 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006aee:	e080      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006af0:	2042      	movs	r0, #66	; 0x42
 8006af2:	f7fe fe05 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006af6:	e07c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006af8:	2043      	movs	r0, #67	; 0x43
 8006afa:	f7fe fe01 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006afe:	e078      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006b00:	2044      	movs	r0, #68	; 0x44
 8006b02:	f7fe fdfd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b06:	e074      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006b08:	2045      	movs	r0, #69	; 0x45
 8006b0a:	f7fe fdf9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b0e:	e070      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006b10:	2046      	movs	r0, #70	; 0x46
 8006b12:	f7fe fdf5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b16:	e06c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006b18:	2047      	movs	r0, #71	; 0x47
 8006b1a:	f7fe fdf1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b1e:	e068      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006b20:	2048      	movs	r0, #72	; 0x48
 8006b22:	f7fe fded 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b26:	e064      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006b28:	2049      	movs	r0, #73	; 0x49
 8006b2a:	f7fe fde9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b2e:	e060      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006b30:	204a      	movs	r0, #74	; 0x4a
 8006b32:	f7fe fde5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b36:	e05c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006b38:	204b      	movs	r0, #75	; 0x4b
 8006b3a:	f7fe fde1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b3e:	e058      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006b40:	204c      	movs	r0, #76	; 0x4c
 8006b42:	f7fe fddd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b46:	e054      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006b48:	204d      	movs	r0, #77	; 0x4d
 8006b4a:	f7fe fdd9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b4e:	e050      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006b50:	204e      	movs	r0, #78	; 0x4e
 8006b52:	f7fe fdd5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b56:	e04c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006b58:	204f      	movs	r0, #79	; 0x4f
 8006b5a:	f7fe fdd1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b5e:	e048      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006b60:	2050      	movs	r0, #80	; 0x50
 8006b62:	f7fe fdcd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b66:	e044      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006b68:	2051      	movs	r0, #81	; 0x51
 8006b6a:	f7fe fdc9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b6e:	e040      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006b70:	2052      	movs	r0, #82	; 0x52
 8006b72:	f7fe fdc5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b76:	e03c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8006b78:	2053      	movs	r0, #83	; 0x53
 8006b7a:	f7fe fdc1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b7e:	e038      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006b80:	2054      	movs	r0, #84	; 0x54
 8006b82:	f7fe fdbd 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b86:	e034      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8006b88:	2055      	movs	r0, #85	; 0x55
 8006b8a:	f7fe fdb9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b8e:	e030      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006b90:	2056      	movs	r0, #86	; 0x56
 8006b92:	f7fe fdb5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b96:	e02c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8006b98:	2057      	movs	r0, #87	; 0x57
 8006b9a:	f7fe fdb1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006b9e:	e028      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006ba0:	2058      	movs	r0, #88	; 0x58
 8006ba2:	f7fe fdad 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006ba6:	e024      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8006ba8:	2059      	movs	r0, #89	; 0x59
 8006baa:	f7fe fda9 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bae:	e020      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006bb0:	205a      	movs	r0, #90	; 0x5a
 8006bb2:	f7fe fda5 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bb6:	e01c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8006bb8:	205b      	movs	r0, #91	; 0x5b
 8006bba:	f7fe fda1 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bbe:	e018      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006bc0:	205c      	movs	r0, #92	; 0x5c
 8006bc2:	f7fe fd9d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bc6:	e014      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006bc8:	205d      	movs	r0, #93	; 0x5d
 8006bca:	f7fe fd99 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bce:	e010      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006bd0:	205e      	movs	r0, #94	; 0x5e
 8006bd2:	f7fe fd95 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bd6:	e00c      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006bd8:	205f      	movs	r0, #95	; 0x5f
 8006bda:	f7fe fd91 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bde:	e008      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006be0:	2060      	movs	r0, #96	; 0x60
 8006be2:	f7fe fd8d 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006be6:	e004      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006be8:	2061      	movs	r0, #97	; 0x61
 8006bea:	f7fe fd89 	bl	8005700 <VPP_ApplyPresetToSync>
			break;
 8006bee:	e000      	b.n	8006bf2 <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006bf0:	bf00      	nop
	}
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop

08006bfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	; 0x30
 8006c00:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	2220      	movs	r2, #32
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f007 fdf5 	bl	800e804 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006c22:	4b30      	ldr	r3, [pc, #192]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c30:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006c36:	4b2b      	ldr	r3, [pc, #172]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c42:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c44:	2204      	movs	r2, #4
 8006c46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006c48:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006c4e:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006c54:	4b23      	ldr	r3, [pc, #140]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c5a:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c62:	4b20      	ldr	r3, [pc, #128]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c68:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006c76:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006c86:	4817      	ldr	r0, [pc, #92]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006c88:	f001 fee2 	bl	8008a50 <HAL_ADC_Init>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006c92:	f000 feaf 	bl	80079f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006c96:	2300      	movs	r3, #0
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4810      	ldr	r0, [pc, #64]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006ca2:	f002 fc6b 	bl	800957c <HAL_ADCEx_MultiModeConfigChannel>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006cac:	f000 fea2 	bl	80079f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006cb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <MX_ADC1_Init+0xec>)
 8006cb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cb4:	2306      	movs	r3, #6
 8006cb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006cbc:	237f      	movs	r3, #127	; 0x7f
 8006cbe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cc8:	1d3b      	adds	r3, r7, #4
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <MX_ADC1_Init+0xe8>)
 8006cce:	f002 f87f 	bl	8008dd0 <HAL_ADC_ConfigChannel>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006cd8:	f000 fe8c 	bl	80079f4 <Error_Handler>
  }

}
 8006cdc:	bf00      	nop
 8006cde:	3730      	adds	r7, #48	; 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	200020fc 	.word	0x200020fc
 8006ce8:	0c900008 	.word	0x0c900008

08006cec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0c:	d14f      	bne.n	8006dae <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006d0e:	4b2a      	ldr	r3, [pc, #168]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d12:	4a29      	ldr	r2, [pc, #164]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d1a:	4b27      	ldr	r3, [pc, #156]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2a:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d32:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <HAL_ADC_MspInit+0xcc>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d3e:	2304      	movs	r3, #4
 8006d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d42:	2303      	movs	r3, #3
 8006d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d54:	f003 fff4 	bl	800ad40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d5a:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <HAL_ADC_MspInit+0xd4>)
 8006d5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d60:	2205      	movs	r2, #5
 8006d62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6a:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d72:	2280      	movs	r2, #128	; 0x80
 8006d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d88:	2220      	movs	r2, #32
 8006d8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006d92:	480a      	ldr	r0, [pc, #40]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006d94:	f003 fd08 	bl	800a7a8 <HAL_DMA_Init>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006d9e:	f000 fe29 	bl	80079f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54
 8006da8:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <HAL_ADC_MspInit+0xd0>)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dae:	bf00      	nop
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	20002168 	.word	0x20002168
 8006dc0:	40020008 	.word	0x40020008

08006dc4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <MX_COMP1_Init+0x48>)
 8006dcc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006dd6:	4a0e      	ldr	r2, [pc, #56]	; (8006e10 <MX_COMP1_Init+0x4c>)
 8006dd8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006de0:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006de6:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006df2:	4805      	ldr	r0, [pc, #20]	; (8006e08 <MX_COMP1_Init+0x44>)
 8006df4:	f002 fe16 	bl	8009a24 <HAL_COMP_Init>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006dfe:	f000 fdf9 	bl	80079f4 <Error_Handler>
  }

}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200021c8 	.word	0x200021c8
 8006e0c:	40010200 	.word	0x40010200
 8006e10:	00800030 	.word	0x00800030

08006e14 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1c:	f107 030c 	add.w	r3, r7, #12
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <HAL_COMP_MspInit+0x5c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d118      	bne.n	8006e68 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e36:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <HAL_COMP_MspInit+0x60>)
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	; (8006e74 <HAL_COMP_MspInit+0x60>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <HAL_COMP_MspInit+0x60>)
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e52:	2303      	movs	r3, #3
 8006e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e64:	f003 ff6c 	bl	800ad40 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40010200 	.word	0x40010200
 8006e74:	40021000 	.word	0x40021000

08006e78 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08c      	sub	sp, #48	; 0x30
 8006e7c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006e7e:	463b      	mov	r3, r7
 8006e80:	2230      	movs	r2, #48	; 0x30
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f007 fcbd 	bl	800e804 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006e8a:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <MX_DAC1_Init+0x8c>)
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <MX_DAC1_Init+0x90>)
 8006e8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006e90:	481c      	ldr	r0, [pc, #112]	; (8006f04 <MX_DAC1_Init+0x8c>)
 8006e92:	f003 f86a 	bl	8009f6a <HAL_DAC_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006e9c:	f000 fdaa 	bl	80079f4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ea4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006eb2:	2306      	movs	r3, #6
 8006eb4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4619      	mov	r1, r3
 8006ecc:	480d      	ldr	r0, [pc, #52]	; (8006f04 <MX_DAC1_Init+0x8c>)
 8006ece:	f003 fa35 	bl	800a33c <HAL_DAC_ConfigChannel>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006ed8:	f000 fd8c 	bl	80079f4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4806      	ldr	r0, [pc, #24]	; (8006f04 <MX_DAC1_Init+0x8c>)
 8006eec:	f003 fa26 	bl	800a33c <HAL_DAC_ConfigChannel>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006ef6:	f000 fd7d 	bl	80079f4 <Error_Handler>
  }

}
 8006efa:	bf00      	nop
 8006efc:	3730      	adds	r7, #48	; 0x30
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20002200 	.word	0x20002200
 8006f08:	50000800 	.word	0x50000800

08006f0c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08c      	sub	sp, #48	; 0x30
 8006f10:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006f12:	463b      	mov	r3, r7
 8006f14:	2230      	movs	r2, #48	; 0x30
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f007 fc73 	bl	800e804 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <MX_DAC2_Init+0x6c>)
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <MX_DAC2_Init+0x70>)
 8006f22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006f24:	4814      	ldr	r0, [pc, #80]	; (8006f78 <MX_DAC2_Init+0x6c>)
 8006f26:	f003 f820 	bl	8009f6a <HAL_DAC_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006f30:	f000 fd60 	bl	80079f4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006f34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f38:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006f46:	2306      	movs	r3, #6
 8006f48:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4805      	ldr	r0, [pc, #20]	; (8006f78 <MX_DAC2_Init+0x6c>)
 8006f62:	f003 f9eb 	bl	800a33c <HAL_DAC_ConfigChannel>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006f6c:	f000 fd42 	bl	80079f4 <Error_Handler>
  }

}
 8006f70:	bf00      	nop
 8006f72:	3730      	adds	r7, #48	; 0x30
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200021ec 	.word	0x200021ec
 8006f7c:	50000c00 	.word	0x50000c00

08006f80 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f88:	f107 031c 	add.w	r3, r7, #28
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a56      	ldr	r2, [pc, #344]	; (80070f8 <HAL_DAC_MspInit+0x178>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d150      	bne.n	8007044 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006fa2:	4b56      	ldr	r3, [pc, #344]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4a55      	ldr	r2, [pc, #340]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fae:	4b53      	ldr	r3, [pc, #332]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fba:	4b50      	ldr	r3, [pc, #320]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	4a4f      	ldr	r2, [pc, #316]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fc6:	4b4d      	ldr	r3, [pc, #308]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fd2:	2330      	movs	r3, #48	; 0x30
 8006fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fde:	f107 031c 	add.w	r3, r7, #28
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fe8:	f003 feaa 	bl	800ad40 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006fec:	4b44      	ldr	r3, [pc, #272]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8006fee:	4a45      	ldr	r2, [pc, #276]	; (8007104 <HAL_DAC_MspInit+0x184>)
 8006ff0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006ff2:	4b43      	ldr	r3, [pc, #268]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8006ff4:	2206      	movs	r2, #6
 8006ff6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ff8:	4b41      	ldr	r3, [pc, #260]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ffe:	4b40      	ldr	r3, [pc, #256]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8007000:	2200      	movs	r2, #0
 8007002:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007004:	4b3e      	ldr	r3, [pc, #248]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8007006:	2280      	movs	r2, #128	; 0x80
 8007008:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800700a:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <HAL_DAC_MspInit+0x180>)
 800700c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007010:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8007014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007018:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <HAL_DAC_MspInit+0x180>)
 800701c:	2220      	movs	r2, #32
 800701e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007020:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8007022:	2200      	movs	r2, #0
 8007024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007026:	4836      	ldr	r0, [pc, #216]	; (8007100 <HAL_DAC_MspInit+0x180>)
 8007028:	f003 fbbe 	bl	800a7a8 <HAL_DMA_Init>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007032:	f000 fcdf 	bl	80079f4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a31      	ldr	r2, [pc, #196]	; (8007100 <HAL_DAC_MspInit+0x180>)
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	4a30      	ldr	r2, [pc, #192]	; (8007100 <HAL_DAC_MspInit+0x180>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8007042:	e054      	b.n	80070ee <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2f      	ldr	r2, [pc, #188]	; (8007108 <HAL_DAC_MspInit+0x188>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d14f      	bne.n	80070ee <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800704e:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	4a2a      	ldr	r2, [pc, #168]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8007054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800705a:	4b28      	ldr	r3, [pc, #160]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007066:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	4a24      	ldr	r2, [pc, #144]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_DAC_MspInit+0x17c>)
 8007074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007082:	2303      	movs	r3, #3
 8007084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007086:	2300      	movs	r3, #0
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800708a:	f107 031c 	add.w	r3, r7, #28
 800708e:	4619      	mov	r1, r3
 8007090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007094:	f003 fe54 	bl	800ad40 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007098:	4b1c      	ldr	r3, [pc, #112]	; (800710c <HAL_DAC_MspInit+0x18c>)
 800709a:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <HAL_DAC_MspInit+0x190>)
 800709c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800709e:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070a0:	2229      	movs	r2, #41	; 0x29
 80070a2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070a4:	4b19      	ldr	r3, [pc, #100]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070a6:	2210      	movs	r2, #16
 80070a8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070aa:	4b18      	ldr	r3, [pc, #96]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80070b0:	4b16      	ldr	r3, [pc, #88]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070b2:	2280      	movs	r2, #128	; 0x80
 80070b4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070bc:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80070c6:	4b11      	ldr	r3, [pc, #68]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070c8:	2220      	movs	r2, #32
 80070ca:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80070d2:	480e      	ldr	r0, [pc, #56]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070d4:	f003 fb68 	bl	800a7a8 <HAL_DMA_Init>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80070de:	f000 fc89 	bl	80079f4 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a09      	ldr	r2, [pc, #36]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	4a08      	ldr	r2, [pc, #32]	; (800710c <HAL_DAC_MspInit+0x18c>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6293      	str	r3, [r2, #40]	; 0x28
}
 80070ee:	bf00      	nop
 80070f0:	3730      	adds	r7, #48	; 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	50000800 	.word	0x50000800
 80070fc:	40021000 	.word	0x40021000
 8007100:	20002214 	.word	0x20002214
 8007104:	4002001c 	.word	0x4002001c
 8007108:	50000c00 	.word	0x50000c00
 800710c:	20002274 	.word	0x20002274
 8007110:	40020030 	.word	0x40020030

08007114 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <MX_DMA_Init+0x70>)
 800711c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711e:	4a19      	ldr	r2, [pc, #100]	; (8007184 <MX_DMA_Init+0x70>)
 8007120:	f043 0304 	orr.w	r3, r3, #4
 8007124:	6493      	str	r3, [r2, #72]	; 0x48
 8007126:	4b17      	ldr	r3, [pc, #92]	; (8007184 <MX_DMA_Init+0x70>)
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007132:	4b14      	ldr	r3, [pc, #80]	; (8007184 <MX_DMA_Init+0x70>)
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	4a13      	ldr	r2, [pc, #76]	; (8007184 <MX_DMA_Init+0x70>)
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	6493      	str	r3, [r2, #72]	; 0x48
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <MX_DMA_Init+0x70>)
 8007140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800714a:	2200      	movs	r2, #0
 800714c:	2101      	movs	r1, #1
 800714e:	200b      	movs	r0, #11
 8007150:	f002 fed7 	bl	8009f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007154:	200b      	movs	r0, #11
 8007156:	f002 feee 	bl	8009f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	200c      	movs	r0, #12
 8007160:	f002 fecf 	bl	8009f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007164:	200c      	movs	r0, #12
 8007166:	f002 fee6 	bl	8009f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	200d      	movs	r0, #13
 8007170:	f002 fec7 	bl	8009f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007174:	200d      	movs	r0, #13
 8007176:	f002 fede 	bl	8009f36 <HAL_NVIC_EnableIRQ>

}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40021000 	.word	0x40021000

08007188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <__NVIC_GetPriorityGrouping+0x18>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	f003 0307 	and.w	r3, r3, #7
}
 8007196:	4618      	mov	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	e000ed00 	.word	0xe000ed00

080071a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	db0b      	blt.n	80071ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	f003 021f 	and.w	r2, r3, #31
 80071bc:	4907      	ldr	r1, [pc, #28]	; (80071dc <__NVIC_EnableIRQ+0x38>)
 80071be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	2001      	movs	r0, #1
 80071c6:	fa00 f202 	lsl.w	r2, r0, r2
 80071ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	e000e100 	.word	0xe000e100

080071e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db0a      	blt.n	800720a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	490c      	ldr	r1, [pc, #48]	; (800722c <__NVIC_SetPriority+0x4c>)
 80071fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fe:	0112      	lsls	r2, r2, #4
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	440b      	add	r3, r1
 8007204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007208:	e00a      	b.n	8007220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	4908      	ldr	r1, [pc, #32]	; (8007230 <__NVIC_SetPriority+0x50>)
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	3b04      	subs	r3, #4
 8007218:	0112      	lsls	r2, r2, #4
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	440b      	add	r3, r1
 800721e:	761a      	strb	r2, [r3, #24]
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	e000e100 	.word	0xe000e100
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007234:	b480      	push	{r7}
 8007236:	b089      	sub	sp, #36	; 0x24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f1c3 0307 	rsb	r3, r3, #7
 800724e:	2b04      	cmp	r3, #4
 8007250:	bf28      	it	cs
 8007252:	2304      	movcs	r3, #4
 8007254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3304      	adds	r3, #4
 800725a:	2b06      	cmp	r3, #6
 800725c:	d902      	bls.n	8007264 <NVIC_EncodePriority+0x30>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	3b03      	subs	r3, #3
 8007262:	e000      	b.n	8007266 <NVIC_EncodePriority+0x32>
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	43da      	mvns	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	401a      	ands	r2, r3
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800727c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	43d9      	mvns	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800728c:	4313      	orrs	r3, r2
         );
}
 800728e:	4618      	mov	r0, r3
 8007290:	3724      	adds	r7, #36	; 0x24
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80072a6:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	3302      	adds	r3, #2
 80072b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	43db      	mvns	r3, r3
 80072ba:	ea02 0103 	and.w	r1, r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	fab3 f383 	clz	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	409a      	lsls	r2, r3
 80072dc:	4806      	ldr	r0, [pc, #24]	; (80072f8 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	430a      	orrs	r2, r1
 80072e6:	3302      	adds	r3, #2
 80072e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80072ec:	bf00      	nop
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40010000 	.word	0x40010000

080072fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	fa93 f3a3 	rbit	r3, r3
 8007316:	613b      	str	r3, [r7, #16]
  return result;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	fab3 f383 	clz	r3, r3
 800731e:	b2db      	uxtb	r3, r3
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	2103      	movs	r1, #3
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	61bb      	str	r3, [r7, #24]
  return result;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]
}
 800734e:	bf00      	nop
 8007350:	3724      	adds	r7, #36	; 0x24
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800735a:	b480      	push	{r7}
 800735c:	b089      	sub	sp, #36	; 0x24
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	fa93 f3a3 	rbit	r3, r3
 8007374:	613b      	str	r3, [r7, #16]
  return result;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	fab3 f383 	clz	r3, r3
 800737c:	b2db      	uxtb	r3, r3
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	2103      	movs	r1, #3
 8007382:	fa01 f303 	lsl.w	r3, r1, r3
 8007386:	43db      	mvns	r3, r3
 8007388:	401a      	ands	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	fa93 f3a3 	rbit	r3, r3
 8007394:	61bb      	str	r3, [r7, #24]
  return result;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	fab3 f383 	clz	r3, r3
 800739c:	b2db      	uxtb	r3, r3
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	431a      	orrs	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	60da      	str	r2, [r3, #12]
}
 80073ac:	bf00      	nop
 80073ae:	3724      	adds	r7, #36	; 0x24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80073dc:	4b08      	ldr	r3, [pc, #32]	; (8007400 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e0:	4907      	ldr	r1, [pc, #28]	; (8007400 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4013      	ands	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80073f2:	68fb      	ldr	r3, [r7, #12]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40021000 	.word	0x40021000

08007404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800740a:	f107 031c 	add.w	r3, r7, #28
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	611a      	str	r2, [r3, #16]
 8007424:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007426:	2004      	movs	r0, #4
 8007428:	f7ff ffd4 	bl	80073d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800742c:	2020      	movs	r0, #32
 800742e:	f7ff ffd1 	bl	80073d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007432:	2001      	movs	r0, #1
 8007434:	f7ff ffce 	bl	80073d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007438:	2002      	movs	r0, #2
 800743a:	f7ff ffcb 	bl	80073d4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800743e:	2108      	movs	r1, #8
 8007440:	48d3      	ldr	r0, [pc, #844]	; (8007790 <MX_GPIO_Init+0x38c>)
 8007442:	f7ff ffb9 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8007446:	2108      	movs	r1, #8
 8007448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800744c:	f7ff ffb4 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8007450:	2110      	movs	r1, #16
 8007452:	48cf      	ldr	r0, [pc, #828]	; (8007790 <MX_GPIO_Init+0x38c>)
 8007454:	f7ff ffb0 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007458:	2120      	movs	r1, #32
 800745a:	48cd      	ldr	r0, [pc, #820]	; (8007790 <MX_GPIO_Init+0x38c>)
 800745c:	f7ff ffac 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8007460:	2101      	movs	r1, #1
 8007462:	48cc      	ldr	r0, [pc, #816]	; (8007794 <MX_GPIO_Init+0x390>)
 8007464:	f7ff ffa8 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800746c:	48c8      	ldr	r0, [pc, #800]	; (8007790 <MX_GPIO_Init+0x38c>)
 800746e:	f7ff ffa3 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007476:	48c6      	ldr	r0, [pc, #792]	; (8007790 <MX_GPIO_Init+0x38c>)
 8007478:	f7ff ff9e 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 800747c:	2140      	movs	r1, #64	; 0x40
 800747e:	48c5      	ldr	r0, [pc, #788]	; (8007794 <MX_GPIO_Init+0x390>)
 8007480:	f7ff ff9a 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	48c3      	ldr	r0, [pc, #780]	; (8007794 <MX_GPIO_Init+0x390>)
 8007488:	f7ff ff96 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 800748c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007490:	48c0      	ldr	r0, [pc, #768]	; (8007794 <MX_GPIO_Init+0x390>)
 8007492:	f7ff ff91 	bl	80073b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007496:	49c0      	ldr	r1, [pc, #768]	; (8007798 <MX_GPIO_Init+0x394>)
 8007498:	2002      	movs	r0, #2
 800749a:	f7ff feff 	bl	800729c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800749e:	49bf      	ldr	r1, [pc, #764]	; (800779c <MX_GPIO_Init+0x398>)
 80074a0:	2002      	movs	r0, #2
 80074a2:	f7ff fefb 	bl	800729c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80074a6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80074aa:	2005      	movs	r0, #5
 80074ac:	f7ff fef6 	bl	800729c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80074b0:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80074b4:	2005      	movs	r0, #5
 80074b6:	f7ff fef1 	bl	800729c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80074ba:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80074be:	2002      	movs	r0, #2
 80074c0:	f7ff feec 	bl	800729c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80074c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074c8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074d6:	2302      	movs	r3, #2
 80074d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80074dc:	f107 031c 	add.w	r3, r7, #28
 80074e0:	4618      	mov	r0, r3
 80074e2:	f005 fead 	bl	800d240 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80074fe:	f107 031c 	add.w	r3, r7, #28
 8007502:	4618      	mov	r0, r3
 8007504:	f005 fe9c 	bl	800d240 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007508:	2301      	movs	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007512:	2300      	movs	r3, #0
 8007514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007518:	2302      	movs	r3, #2
 800751a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800751e:	f107 031c 	add.w	r3, r7, #28
 8007522:	4618      	mov	r0, r3
 8007524:	f005 fe8c 	bl	800d240 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007528:	2302      	movs	r3, #2
 800752a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007538:	2302      	movs	r3, #2
 800753a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800753e:	f107 031c 	add.w	r3, r7, #28
 8007542:	4618      	mov	r0, r3
 8007544:	f005 fe7c 	bl	800d240 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007548:	2304      	movs	r3, #4
 800754a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007552:	2300      	movs	r3, #0
 8007554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007558:	2302      	movs	r3, #2
 800755a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800755e:	f107 031c 	add.w	r3, r7, #28
 8007562:	4618      	mov	r0, r3
 8007564:	f005 fe6c 	bl	800d240 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007568:	2201      	movs	r2, #1
 800756a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800756e:	4888      	ldr	r0, [pc, #544]	; (8007790 <MX_GPIO_Init+0x38c>)
 8007570:	f7ff fef3 	bl	800735a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007574:	2201      	movs	r2, #1
 8007576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800757a:	4885      	ldr	r0, [pc, #532]	; (8007790 <MX_GPIO_Init+0x38c>)
 800757c:	f7ff feed 	bl	800735a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007580:	2201      	movs	r2, #1
 8007582:	2101      	movs	r1, #1
 8007584:	4886      	ldr	r0, [pc, #536]	; (80077a0 <MX_GPIO_Init+0x39c>)
 8007586:	f7ff fee8 	bl	800735a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800758a:	2201      	movs	r2, #1
 800758c:	2102      	movs	r1, #2
 800758e:	4884      	ldr	r0, [pc, #528]	; (80077a0 <MX_GPIO_Init+0x39c>)
 8007590:	f7ff fee3 	bl	800735a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8007594:	2201      	movs	r2, #1
 8007596:	2104      	movs	r1, #4
 8007598:	487d      	ldr	r0, [pc, #500]	; (8007790 <MX_GPIO_Init+0x38c>)
 800759a:	f7ff fede 	bl	800735a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800759e:	2200      	movs	r2, #0
 80075a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075a4:	487a      	ldr	r0, [pc, #488]	; (8007790 <MX_GPIO_Init+0x38c>)
 80075a6:	f7ff fea9 	bl	80072fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075b0:	4877      	ldr	r0, [pc, #476]	; (8007790 <MX_GPIO_Init+0x38c>)
 80075b2:	f7ff fea3 	bl	80072fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2101      	movs	r1, #1
 80075ba:	4879      	ldr	r0, [pc, #484]	; (80077a0 <MX_GPIO_Init+0x39c>)
 80075bc:	f7ff fe9e 	bl	80072fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80075c0:	2200      	movs	r2, #0
 80075c2:	2102      	movs	r1, #2
 80075c4:	4876      	ldr	r0, [pc, #472]	; (80077a0 <MX_GPIO_Init+0x39c>)
 80075c6:	f7ff fe99 	bl	80072fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80075ca:	2200      	movs	r2, #0
 80075cc:	2104      	movs	r1, #4
 80075ce:	4870      	ldr	r0, [pc, #448]	; (8007790 <MX_GPIO_Init+0x38c>)
 80075d0:	f7ff fe94 	bl	80072fc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80075d4:	2308      	movs	r3, #8
 80075d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075d8:	2301      	movs	r3, #1
 80075da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80075e4:	2302      	movs	r3, #2
 80075e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4868      	ldr	r0, [pc, #416]	; (8007790 <MX_GPIO_Init+0x38c>)
 80075ee:	f006 f81a 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80075f2:	2308      	movs	r3, #8
 80075f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075f6:	2301      	movs	r3, #1
 80075f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	4619      	mov	r1, r3
 800760a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800760e:	f006 f80a 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8007612:	2310      	movs	r3, #16
 8007614:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007616:	2301      	movs	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4859      	ldr	r0, [pc, #356]	; (8007790 <MX_GPIO_Init+0x38c>)
 800762c:	f005 fffb 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007630:	2320      	movs	r3, #32
 8007632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007634:	2301      	movs	r3, #1
 8007636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007640:	2300      	movs	r3, #0
 8007642:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4851      	ldr	r0, [pc, #324]	; (8007790 <MX_GPIO_Init+0x38c>)
 800764a:	f005 ffec 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800764e:	2301      	movs	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007652:	2301      	movs	r3, #1
 8007654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800765a:	2300      	movs	r3, #0
 800765c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8007662:	1d3b      	adds	r3, r7, #4
 8007664:	4619      	mov	r1, r3
 8007666:	484b      	ldr	r0, [pc, #300]	; (8007794 <MX_GPIO_Init+0x390>)
 8007668:	f005 ffdd 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 800766c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007670:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007672:	2301      	movs	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4842      	ldr	r0, [pc, #264]	; (8007790 <MX_GPIO_Init+0x38c>)
 8007688:	f005 ffcd 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 800768c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007692:	2301      	movs	r3, #1
 8007694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	483a      	ldr	r0, [pc, #232]	; (8007790 <MX_GPIO_Init+0x38c>)
 80076a8:	f005 ffbd 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80076ac:	2340      	movs	r3, #64	; 0x40
 80076ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076b0:	2301      	movs	r3, #1
 80076b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076b4:	2303      	movs	r3, #3
 80076b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4833      	ldr	r0, [pc, #204]	; (8007794 <MX_GPIO_Init+0x390>)
 80076c6:	f005 ffae 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ce:	2301      	movs	r3, #1
 80076d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2303      	movs	r3, #3
 80076d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	482c      	ldr	r0, [pc, #176]	; (8007794 <MX_GPIO_Init+0x390>)
 80076e4:	f005 ff9f 	bl	800d626 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80076e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ee:	2301      	movs	r3, #1
 80076f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076f2:	2303      	movs	r3, #3
 80076f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4824      	ldr	r0, [pc, #144]	; (8007794 <MX_GPIO_Init+0x390>)
 8007704:	f005 ff8f 	bl	800d626 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007708:	f7ff fd3e 	bl	8007188 <__NVIC_GetPriorityGrouping>
 800770c:	4603      	mov	r3, r0
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fd8e 	bl	8007234 <NVIC_EncodePriority>
 8007718:	4603      	mov	r3, r0
 800771a:	4619      	mov	r1, r3
 800771c:	2006      	movs	r0, #6
 800771e:	f7ff fd5f 	bl	80071e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007722:	2006      	movs	r0, #6
 8007724:	f7ff fd3e 	bl	80071a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007728:	f7ff fd2e 	bl	8007188 <__NVIC_GetPriorityGrouping>
 800772c:	4603      	mov	r3, r0
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fd7e 	bl	8007234 <NVIC_EncodePriority>
 8007738:	4603      	mov	r3, r0
 800773a:	4619      	mov	r1, r3
 800773c:	2007      	movs	r0, #7
 800773e:	f7ff fd4f 	bl	80071e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007742:	2007      	movs	r0, #7
 8007744:	f7ff fd2e 	bl	80071a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007748:	f7ff fd1e 	bl	8007188 <__NVIC_GetPriorityGrouping>
 800774c:	4603      	mov	r3, r0
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fd6e 	bl	8007234 <NVIC_EncodePriority>
 8007758:	4603      	mov	r3, r0
 800775a:	4619      	mov	r1, r3
 800775c:	2008      	movs	r0, #8
 800775e:	f7ff fd3f 	bl	80071e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007762:	2008      	movs	r0, #8
 8007764:	f7ff fd1e 	bl	80071a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007768:	f7ff fd0e 	bl	8007188 <__NVIC_GetPriorityGrouping>
 800776c:	4603      	mov	r3, r0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff fd5e 	bl	8007234 <NVIC_EncodePriority>
 8007778:	4603      	mov	r3, r0
 800777a:	4619      	mov	r1, r3
 800777c:	2028      	movs	r0, #40	; 0x28
 800777e:	f7ff fd2f 	bl	80071e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007782:	2028      	movs	r0, #40	; 0x28
 8007784:	f7ff fd0e 	bl	80071a4 <__NVIC_EnableIRQ>

}
 8007788:	bf00      	nop
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	e009      	b.n	80077a4 <MX_GPIO_Init+0x3a0>
 8007790:	48000800 	.word	0x48000800
 8007794:	48000400 	.word	0x48000400
 8007798:	0f000003 	.word	0x0f000003
 800779c:	f0000003 	.word	0xf0000003
 80077a0:	48001400 	.word	0x48001400
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop

080077a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d013      	beq.n	80077e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80077c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80077c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80077d0:	e000      	b.n	80077d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80077d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80077d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f9      	beq.n	80077d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80077de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80077e8:	687b      	ldr	r3, [r7, #4]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
  int i=0;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e009      	b.n	8007820 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	60ba      	str	r2, [r7, #8]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ffc7 	bl	80077a8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	3301      	adds	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	dbf1      	blt.n	800780c <_write+0x16>
  return len;
 8007828:	687b      	ldr	r3, [r7, #4]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007838:	f000 feb5 	bl	80085a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800783c:	f000 f86c 	bl	8007918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007840:	f7ff fde0 	bl	8007404 <MX_GPIO_Init>
  MX_DMA_Init();
 8007844:	f7ff fc66 	bl	8007114 <MX_DMA_Init>
  MX_DAC1_Init();
 8007848:	f7ff fb16 	bl	8006e78 <MX_DAC1_Init>
  MX_DAC2_Init();
 800784c:	f7ff fb5e 	bl	8006f0c <MX_DAC2_Init>
  MX_ADC1_Init();
 8007850:	f7ff f9d4 	bl	8006bfc <MX_ADC1_Init>
  MX_COMP1_Init();
 8007854:	f7ff fab6 	bl	8006dc4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007858:	f000 fbaa 	bl	8007fb0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800785c:	f000 f908 	bl	8007a70 <MX_SPI3_Init>
  MX_RNG_Init();
 8007860:	f000 f8f8 	bl	8007a54 <MX_RNG_Init>
  MX_TIM1_Init();
 8007864:	f000 fb34 	bl	8007ed0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007868:	f000 fc8a 	bl	8008180 <MX_TIM8_Init>
  MX_TIM16_Init();
 800786c:	f000 fd42 	bl	80082f4 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007870:	f000 fcee 	bl	8008250 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007874:	f000 fc36 	bl	80080e4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007878:	f000 fbe6 	bl	8008048 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  DT_InitRegister();
 800787c:	f7fd f8ae 	bl	80049dc <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8007880:	f7fd fd76 	bl	8005370 <SM_Init>
  FuncO_Init();
 8007884:	f7fd fa92 	bl	8004dac <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007888:	2000      	movs	r0, #0
 800788a:	f7fd fb47 	bl	8004f1c <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 800788e:	2000      	movs	r0, #0
 8007890:	f7fd fb9e 	bl	8004fd0 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007894:	2110      	movs	r1, #16
 8007896:	481b      	ldr	r0, [pc, #108]	; (8007904 <main+0xd0>)
 8007898:	f002 fb89 	bl	8009fae <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <main+0xd4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <main+0xd4>)
 80078a2:	f043 0301 	orr.w	r3, r3, #1
 80078a6:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80078a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078ac:	f7fd fa14 	bl	8004cd8 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80078b0:	2201      	movs	r2, #1
 80078b2:	2108      	movs	r1, #8
 80078b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078b8:	f003 fbc4 	bl	800b044 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 80078bc:	2059      	movs	r0, #89	; 0x59
 80078be:	f7fd fef1 	bl	80056a4 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80078c2:	2200      	movs	r2, #0
 80078c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078c8:	4810      	ldr	r0, [pc, #64]	; (800790c <main+0xd8>)
 80078ca:	f003 fbbb 	bl	800b044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80078ce:	2200      	movs	r2, #0
 80078d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078d4:	480d      	ldr	r0, [pc, #52]	; (800790c <main+0xd8>)
 80078d6:	f003 fbb5 	bl	800b044 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80078da:	480d      	ldr	r0, [pc, #52]	; (8007910 <main+0xdc>)
 80078dc:	f004 fcac 	bl	800c238 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <main+0xe0>)
 80078e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <main+0xe0>)
 80078ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80078f0:	f7f9 fa18 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80078f4:	f7f9 fa24 	bl	8000d40 <DM_PostInit>

  IM_Init();
 80078f8:	f7fc febe 	bl	8004678 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80078fc:	f7fb fe64 	bl	80035c8 <EM_ProcessEvent>
 8007900:	e7fc      	b.n	80078fc <main+0xc8>
 8007902:	bf00      	nop
 8007904:	20002200 	.word	0x20002200
 8007908:	40013400 	.word	0x40013400
 800790c:	48000800 	.word	0x48000800
 8007910:	20002468 	.word	0x20002468
 8007914:	40001000 	.word	0x40001000

08007918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b0a8      	sub	sp, #160	; 0xa0
 800791c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800791e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007922:	2238      	movs	r2, #56	; 0x38
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f006 ff6c 	bl	800e804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800792c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	605a      	str	r2, [r3, #4]
 8007936:	609a      	str	r2, [r3, #8]
 8007938:	60da      	str	r2, [r3, #12]
 800793a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800793c:	463b      	mov	r3, r7
 800793e:	2254      	movs	r2, #84	; 0x54
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f006 ff5e 	bl	800e804 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007948:	2000      	movs	r0, #0
 800794a:	f003 fb93 	bl	800b074 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800794e:	2322      	movs	r3, #34	; 0x22
 8007950:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007956:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800795c:	2301      	movs	r3, #1
 800795e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007962:	2302      	movs	r3, #2
 8007964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007968:	2302      	movs	r3, #2
 800796a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800796e:	2302      	movs	r3, #2
 8007970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007974:	232a      	movs	r3, #42	; 0x2a
 8007976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800797a:	231e      	movs	r3, #30
 800797c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007980:	2304      	movs	r3, #4
 8007982:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007986:	2302      	movs	r3, #2
 8007988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800798c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007990:	4618      	mov	r0, r3
 8007992:	f003 fc13 	bl	800b1bc <HAL_RCC_OscConfig>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800799c:	f000 f82a 	bl	80079f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079a0:	230f      	movs	r3, #15
 80079a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079a4:	2303      	movs	r3, #3
 80079a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079a8:	2300      	movs	r3, #0
 80079aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079ac:	2300      	movs	r3, #0
 80079ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079b0:	2300      	movs	r3, #0
 80079b2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80079b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079b8:	2108      	movs	r1, #8
 80079ba:	4618      	mov	r0, r3
 80079bc:	f003 ff16 	bl	800b7ec <HAL_RCC_ClockConfig>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80079c6:	f000 f815 	bl	80079f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80079ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80079ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80079d0:	2300      	movs	r3, #0
 80079d2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80079d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079da:	463b      	mov	r3, r7
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 f8f5 	bl	800bbcc <HAL_RCCEx_PeriphCLKConfig>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80079e8:	f000 f804 	bl	80079f4 <Error_Handler>
  }
}
 80079ec:	bf00      	nop
 80079ee:	37a0      	adds	r7, #160	; 0xa0
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <LL_AHB2_GRP1_EnableClock>:
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a2c:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a30:	4907      	ldr	r1, [pc, #28]	; (8007a50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	40021000 	.word	0x40021000

08007a54 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007a58:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007a5c:	f7ff ffe2 	bl	8007a24 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <MX_RNG_Init+0x18>)
 8007a62:	f7ff ffce 	bl	8007a02 <LL_RNG_Enable>

}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	50060800 	.word	0x50060800

08007a70 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a76:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <MX_SPI3_Init+0x78>)
 8007a78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007a82:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a88:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a8e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a90:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007a9c:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007abe:	2207      	movs	r2, #7
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007aca:	2208      	movs	r2, #8
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <MX_SPI3_Init+0x74>)
 8007ad0:	f004 fac8 	bl	800c064 <HAL_SPI_Init>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007ada:	f7ff ff8b 	bl	80079f4 <Error_Handler>
  }

}
 8007ade:	bf00      	nop
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200022d4 	.word	0x200022d4
 8007ae8:	40003c00 	.word	0x40003c00

08007aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	; 0x28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <HAL_SPI_MspInit+0x7c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d128      	bne.n	8007b60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b18:	6593      	str	r3, [r2, #88]	; 0x58
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b26:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b2c:	f043 0304 	orr.w	r3, r3, #4
 8007b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b32:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <HAL_SPI_MspInit+0x80>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007b3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b44:	2302      	movs	r3, #2
 8007b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b50:	2306      	movs	r3, #6
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4805      	ldr	r0, [pc, #20]	; (8007b70 <HAL_SPI_MspInit+0x84>)
 8007b5c:	f003 f8f0 	bl	800ad40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007b60:	bf00      	nop
 8007b62:	3728      	adds	r7, #40	; 0x28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40003c00 	.word	0x40003c00
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	48000800 	.word	0x48000800

08007b74 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b82:	6093      	str	r3, [r2, #8]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40007000 	.word	0x40007000

08007b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <HAL_MspInit+0x44>)
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <HAL_MspInit+0x44>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <HAL_MspInit+0x44>)
 8007ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	607b      	str	r3, [r7, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <HAL_MspInit+0x44>)
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <HAL_MspInit+0x44>)
 8007bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_MspInit+0x44>)
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007bca:	f7ff ffd3 	bl	8007b74 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40021000 	.word	0x40021000

08007bdc <LL_EXTI_IsActiveFlag_0_31>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007be6:	695a      	ldr	r2, [r3, #20]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4013      	ands	r3, r2
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d101      	bne.n	8007bf6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	40010400 	.word	0x40010400

08007c08 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c10:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6153      	str	r3, [r2, #20]
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40010400 	.word	0x40010400

08007c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c2c:	bf00      	nop
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c36:	b480      	push	{r7}
 8007c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c3a:	e7fe      	b.n	8007c3a <HardFault_Handler+0x4>

08007c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c40:	e7fe      	b.n	8007c40 <MemManage_Handler+0x4>

08007c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c46:	e7fe      	b.n	8007c46 <BusFault_Handler+0x4>

08007c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c4c:	e7fe      	b.n	8007c4c <UsageFault_Handler+0x4>

08007c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c60:	bf00      	nop
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c6e:	bf00      	nop
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c7c:	f000 fce6 	bl	800864c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c80:	bf00      	nop
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007c88:	f7fc fdae 	bl	80047e8 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f7ff ffa5 	bl	8007bdc <LL_EXTI_IsActiveFlag_0_31>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f7ff ffb5 	bl	8007c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007ca6:	f7fc fdc5 	bl	8004834 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007caa:	2002      	movs	r0, #2
 8007cac:	f7ff ff96 	bl	8007bdc <LL_EXTI_IsActiveFlag_0_31>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	f7ff ffa6 	bl	8007c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007cbc:	bf00      	nop
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007cc4:	f7fc fddc 	bl	8004880 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007cc8:	2004      	movs	r0, #4
 8007cca:	f7ff ff87 	bl	8007bdc <LL_EXTI_IsActiveFlag_0_31>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	f7ff ff97 	bl	8007c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ce4:	4802      	ldr	r0, [pc, #8]	; (8007cf0 <DMA1_Channel1_IRQHandler+0x10>)
 8007ce6:	f002 fedb 	bl	800aaa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007cea:	bf00      	nop
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20002168 	.word	0x20002168

08007cf4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007cf8:	4802      	ldr	r0, [pc, #8]	; (8007d04 <DMA1_Channel2_IRQHandler+0x10>)
 8007cfa:	f002 fed1 	bl	800aaa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007cfe:	bf00      	nop
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20002214 	.word	0x20002214

08007d08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007d0c:	4802      	ldr	r0, [pc, #8]	; (8007d18 <DMA1_Channel3_IRQHandler+0x10>)
 8007d0e:	f002 fec7 	bl	800aaa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20002274 	.word	0x20002274

08007d1c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007d20:	f7f9 f82c 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007d24:	f7fc fdd2 	bl	80048cc <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d28:	4803      	ldr	r0, [pc, #12]	; (8007d38 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007d2a:	f004 fbe6 	bl	800c4fa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007d2e:	4803      	ldr	r0, [pc, #12]	; (8007d3c <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007d30:	f004 fbe3 	bl	800c4fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007d34:	bf00      	nop
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20002468 	.word	0x20002468
 8007d3c:	20002384 	.word	0x20002384

08007d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d44:	4802      	ldr	r0, [pc, #8]	; (8007d50 <TIM3_IRQHandler+0x10>)
 8007d46:	f004 fbd8 	bl	800c4fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	2000241c 	.word	0x2000241c

08007d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007d58:	f7fc fcf6 	bl	8004748 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007d5c:	f7fc fd1c 	bl	8004798 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007d60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d64:	f7ff ff3a 	bl	8007bdc <LL_EXTI_IsActiveFlag_0_31>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007d6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d72:	f7ff ff49 	bl	8007c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007d76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d7a:	f7ff ff2f 	bl	8007bdc <LL_EXTI_IsActiveFlag_0_31>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007d84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d88:	f7ff ff3e 	bl	8007c08 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007d94:	f7fc fc80 	bl	8004698 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007d98:	4802      	ldr	r0, [pc, #8]	; (8007da4 <TIM5_IRQHandler+0x14>)
 8007d9a:	f004 fbae 	bl	800c4fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200023d0 	.word	0x200023d0

08007da8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e00a      	b.n	8007dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007dba:	f3af 8000 	nop.w
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	60ba      	str	r2, [r7, #8]
 8007dc6:	b2ca      	uxtb	r2, r1
 8007dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	dbf0      	blt.n	8007dba <_read+0x12>
	}

return len;
 8007dd8:	687b      	ldr	r3, [r7, #4]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
	return -1;
 8007dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <_isatty>:

int _isatty(int file)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
	return 1;
 8007e22:	2301      	movs	r3, #1
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
	...

08007e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e54:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <_sbrk+0x50>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <_sbrk+0x16>
		heap_end = &end;
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <_sbrk+0x50>)
 8007e5e:	4a10      	ldr	r2, [pc, #64]	; (8007ea0 <_sbrk+0x54>)
 8007e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e62:	4b0e      	ldr	r3, [pc, #56]	; (8007e9c <_sbrk+0x50>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e68:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <_sbrk+0x50>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	466a      	mov	r2, sp
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d907      	bls.n	8007e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e76:	f006 fc9b 	bl	800e7b0 <__errno>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	230c      	movs	r3, #12
 8007e7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e84:	e006      	b.n	8007e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <_sbrk+0x50>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <_sbrk+0x50>)
 8007e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20001b14 	.word	0x20001b14
 8007ea0:	20002558 	.word	0x20002558

08007ea4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ea8:	4b08      	ldr	r3, [pc, #32]	; (8007ecc <SystemInit+0x28>)
 8007eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eae:	4a07      	ldr	r2, [pc, #28]	; (8007ecc <SystemInit+0x28>)
 8007eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007eb8:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <SystemInit+0x28>)
 8007eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8007ec0:	bf00      	nop
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	e000ed00 	.word	0xe000ed00

08007ed0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b09a      	sub	sp, #104	; 0x68
 8007ed4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f006 fc90 	bl	800e804 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ee4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007ef0:	1d3b      	adds	r3, r7, #4
 8007ef2:	2234      	movs	r2, #52	; 0x34
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f006 fc84 	bl	800e804 <memset>

  htim1.Instance = TIM1;
 8007efc:	4b2a      	ldr	r3, [pc, #168]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007efe:	4a2b      	ldr	r2, [pc, #172]	; (8007fac <MX_TIM1_Init+0xdc>)
 8007f00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007f02:	4b29      	ldr	r3, [pc, #164]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007f08:	4b27      	ldr	r3, [pc, #156]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f0a:	2240      	movs	r2, #64	; 0x40
 8007f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f16:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f1c:	4b22      	ldr	r3, [pc, #136]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f22:	4b21      	ldr	r3, [pc, #132]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f24:	2280      	movs	r2, #128	; 0x80
 8007f26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f30:	2301      	movs	r3, #1
 8007f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f34:	2300      	movs	r3, #0
 8007f36:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f40:	2301      	movs	r3, #1
 8007f42:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f44:	2300      	movs	r3, #0
 8007f46:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007f4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f50:	4619      	mov	r1, r3
 8007f52:	4815      	ldr	r0, [pc, #84]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f54:	f004 fa2b 	bl	800c3ae <HAL_TIM_Encoder_Init>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007f5e:	f7ff fd49 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f62:	2320      	movs	r3, #32
 8007f64:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f72:	4619      	mov	r1, r3
 8007f74:	480c      	ldr	r0, [pc, #48]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f76:	f004 fea5 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007f80:	f7ff fd38 	bl	80079f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f84:	2300      	movs	r3, #0
 8007f86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4805      	ldr	r0, [pc, #20]	; (8007fa8 <MX_TIM1_Init+0xd8>)
 8007f92:	f004 ff2d 	bl	800cdf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007f9c:	f7ff fd2a 	bl	80079f4 <Error_Handler>
  }

}
 8007fa0:	bf00      	nop
 8007fa2:	3768      	adds	r7, #104	; 0x68
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20002468 	.word	0x20002468
 8007fac:	40012c00 	.word	0x40012c00

08007fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fb6:	f107 0310 	add.w	r3, r7, #16
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fc4:	1d3b      	adds	r3, r7, #4
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007fce:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <MX_TIM2_Init+0x94>)
 8007fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007fd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <MX_TIM2_Init+0x94>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fdc:	4b19      	ldr	r3, [pc, #100]	; (8008044 <MX_TIM2_Init+0x94>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <MX_TIM2_Init+0x94>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe8:	4b16      	ldr	r3, [pc, #88]	; (8008044 <MX_TIM2_Init+0x94>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007fee:	4b15      	ldr	r3, [pc, #84]	; (8008044 <MX_TIM2_Init+0x94>)
 8007ff0:	2280      	movs	r2, #128	; 0x80
 8007ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ff4:	4813      	ldr	r0, [pc, #76]	; (8008044 <MX_TIM2_Init+0x94>)
 8007ff6:	f004 f8c7 	bl	800c188 <HAL_TIM_Base_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008000:	f7ff fcf8 	bl	80079f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800800a:	f107 0310 	add.w	r3, r7, #16
 800800e:	4619      	mov	r1, r3
 8008010:	480c      	ldr	r0, [pc, #48]	; (8008044 <MX_TIM2_Init+0x94>)
 8008012:	f004 fbf1 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800801c:	f7ff fcea 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008020:	2320      	movs	r3, #32
 8008022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	4619      	mov	r1, r3
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <MX_TIM2_Init+0x94>)
 800802e:	f004 fe49 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008038:	f7ff fcdc 	bl	80079f4 <Error_Handler>
  }

}
 800803c:	bf00      	nop
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	200024b4 	.word	0x200024b4

08008048 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800804e:	f107 0310 	add.w	r3, r7, #16
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	609a      	str	r2, [r3, #8]
 800805a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800805c:	1d3b      	adds	r3, r7, #4
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	605a      	str	r2, [r3, #4]
 8008064:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <MX_TIM3_Init+0x94>)
 8008068:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <MX_TIM3_Init+0x98>)
 800806a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <MX_TIM3_Init+0x94>)
 800806e:	2200      	movs	r2, #0
 8008070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008072:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <MX_TIM3_Init+0x94>)
 8008074:	2210      	movs	r2, #16
 8008076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008078:	4b18      	ldr	r3, [pc, #96]	; (80080dc <MX_TIM3_Init+0x94>)
 800807a:	2201      	movs	r2, #1
 800807c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800807e:	4b17      	ldr	r3, [pc, #92]	; (80080dc <MX_TIM3_Init+0x94>)
 8008080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <MX_TIM3_Init+0x94>)
 8008088:	2200      	movs	r2, #0
 800808a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <MX_TIM3_Init+0x94>)
 800808e:	f004 f87b 	bl	800c188 <HAL_TIM_Base_Init>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008098:	f7ff fcac 	bl	80079f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800809c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080a2:	f107 0310 	add.w	r3, r7, #16
 80080a6:	4619      	mov	r1, r3
 80080a8:	480c      	ldr	r0, [pc, #48]	; (80080dc <MX_TIM3_Init+0x94>)
 80080aa:	f004 fba5 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80080b4:	f7ff fc9e 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080b8:	2300      	movs	r3, #0
 80080ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080c0:	1d3b      	adds	r3, r7, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4805      	ldr	r0, [pc, #20]	; (80080dc <MX_TIM3_Init+0x94>)
 80080c6:	f004 fdfd 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80080d0:	f7ff fc90 	bl	80079f4 <Error_Handler>
  }

}
 80080d4:	bf00      	nop
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	2000241c 	.word	0x2000241c
 80080e0:	40000400 	.word	0x40000400

080080e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080ea:	f107 0310 	add.w	r3, r7, #16
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	609a      	str	r2, [r3, #8]
 80080f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080f8:	1d3b      	adds	r3, r7, #4
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008102:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <MX_TIM5_Init+0x94>)
 8008104:	4a1d      	ldr	r2, [pc, #116]	; (800817c <MX_TIM5_Init+0x98>)
 8008106:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008108:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <MX_TIM5_Init+0x94>)
 800810a:	2200      	movs	r2, #0
 800810c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800810e:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <MX_TIM5_Init+0x94>)
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008114:	4b18      	ldr	r3, [pc, #96]	; (8008178 <MX_TIM5_Init+0x94>)
 8008116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800811a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800811c:	4b16      	ldr	r3, [pc, #88]	; (8008178 <MX_TIM5_Init+0x94>)
 800811e:	2200      	movs	r2, #0
 8008120:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <MX_TIM5_Init+0x94>)
 8008124:	2280      	movs	r2, #128	; 0x80
 8008126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008128:	4813      	ldr	r0, [pc, #76]	; (8008178 <MX_TIM5_Init+0x94>)
 800812a:	f004 f82d 	bl	800c188 <HAL_TIM_Base_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008134:	f7ff fc5e 	bl	80079f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800813c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800813e:	f107 0310 	add.w	r3, r7, #16
 8008142:	4619      	mov	r1, r3
 8008144:	480c      	ldr	r0, [pc, #48]	; (8008178 <MX_TIM5_Init+0x94>)
 8008146:	f004 fb57 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008150:	f7ff fc50 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008154:	2300      	movs	r3, #0
 8008156:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800815c:	1d3b      	adds	r3, r7, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4805      	ldr	r0, [pc, #20]	; (8008178 <MX_TIM5_Init+0x94>)
 8008162:	f004 fdaf 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800816c:	f7ff fc42 	bl	80079f4 <Error_Handler>
  }

}
 8008170:	bf00      	nop
 8008172:	3720      	adds	r7, #32
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	200023d0 	.word	0x200023d0
 800817c:	40000c00 	.word	0x40000c00

08008180 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b094      	sub	sp, #80	; 0x50
 8008184:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	605a      	str	r2, [r3, #4]
 8008190:	609a      	str	r2, [r3, #8]
 8008192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80081a0:	463b      	mov	r3, r7
 80081a2:	2234      	movs	r2, #52	; 0x34
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f006 fb2c 	bl	800e804 <memset>

  htim8.Instance = TIM8;
 80081ac:	4b26      	ldr	r3, [pc, #152]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081ae:	4a27      	ldr	r2, [pc, #156]	; (800824c <MX_TIM8_Init+0xcc>)
 80081b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80081b2:	4b25      	ldr	r3, [pc, #148]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081b8:	4b23      	ldr	r3, [pc, #140]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80081be:	4b22      	ldr	r3, [pc, #136]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081c4:	4b20      	ldr	r3, [pc, #128]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80081ca:	4b1f      	ldr	r3, [pc, #124]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081d2:	2280      	movs	r2, #128	; 0x80
 80081d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80081d6:	481c      	ldr	r0, [pc, #112]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081d8:	f003 ffd6 	bl	800c188 <HAL_TIM_Base_Init>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80081e2:	f7ff fc07 	bl	80079f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80081ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081f0:	4619      	mov	r1, r3
 80081f2:	4815      	ldr	r0, [pc, #84]	; (8008248 <MX_TIM8_Init+0xc8>)
 80081f4:	f004 fb00 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80081fe:	f7ff fbf9 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008202:	2320      	movs	r3, #32
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008206:	2300      	movs	r3, #0
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800820a:	2300      	movs	r3, #0
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800820e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008212:	4619      	mov	r1, r3
 8008214:	480c      	ldr	r0, [pc, #48]	; (8008248 <MX_TIM8_Init+0xc8>)
 8008216:	f004 fd55 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008220:	f7ff fbe8 	bl	80079f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800822c:	463b      	mov	r3, r7
 800822e:	4619      	mov	r1, r3
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <MX_TIM8_Init+0xc8>)
 8008232:	f004 fddd 	bl	800cdf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800823c:	f7ff fbda 	bl	80079f4 <Error_Handler>
  }

}
 8008240:	bf00      	nop
 8008242:	3750      	adds	r7, #80	; 0x50
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20002338 	.word	0x20002338
 800824c:	40013400 	.word	0x40013400

08008250 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	609a      	str	r2, [r3, #8]
 8008262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800826e:	4b1f      	ldr	r3, [pc, #124]	; (80082ec <MX_TIM15_Init+0x9c>)
 8008270:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <MX_TIM15_Init+0xa0>)
 8008272:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <MX_TIM15_Init+0x9c>)
 8008276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800827a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <MX_TIM15_Init+0x9c>)
 800827e:	2200      	movs	r2, #0
 8008280:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008282:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <MX_TIM15_Init+0x9c>)
 8008284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008288:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800828a:	4b18      	ldr	r3, [pc, #96]	; (80082ec <MX_TIM15_Init+0x9c>)
 800828c:	2200      	movs	r2, #0
 800828e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008290:	4b16      	ldr	r3, [pc, #88]	; (80082ec <MX_TIM15_Init+0x9c>)
 8008292:	2200      	movs	r2, #0
 8008294:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008296:	4b15      	ldr	r3, [pc, #84]	; (80082ec <MX_TIM15_Init+0x9c>)
 8008298:	2200      	movs	r2, #0
 800829a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800829c:	4813      	ldr	r0, [pc, #76]	; (80082ec <MX_TIM15_Init+0x9c>)
 800829e:	f003 ff73 	bl	800c188 <HAL_TIM_Base_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80082a8:	f7ff fba4 	bl	80079f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80082b2:	f107 0310 	add.w	r3, r7, #16
 80082b6:	4619      	mov	r1, r3
 80082b8:	480c      	ldr	r0, [pc, #48]	; (80082ec <MX_TIM15_Init+0x9c>)
 80082ba:	f004 fa9d 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80082c4:	f7ff fb96 	bl	80079f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082c8:	2300      	movs	r3, #0
 80082ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80082d0:	1d3b      	adds	r3, r7, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <MX_TIM15_Init+0x9c>)
 80082d6:	f004 fcf5 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80082e0:	f7ff fb88 	bl	80079f4 <Error_Handler>
  }

}
 80082e4:	bf00      	nop
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20002384 	.word	0x20002384
 80082f0:	40014000 	.word	0x40014000

080082f4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <MX_TIM16_Init+0x48>)
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <MX_TIM16_Init+0x4c>)
 80082fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <MX_TIM16_Init+0x48>)
 8008300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008304:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008306:	4b0d      	ldr	r3, [pc, #52]	; (800833c <MX_TIM16_Init+0x48>)
 8008308:	2200      	movs	r2, #0
 800830a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <MX_TIM16_Init+0x48>)
 800830e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008312:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <MX_TIM16_Init+0x48>)
 8008316:	2200      	movs	r2, #0
 8008318:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800831a:	4b08      	ldr	r3, [pc, #32]	; (800833c <MX_TIM16_Init+0x48>)
 800831c:	2200      	movs	r2, #0
 800831e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <MX_TIM16_Init+0x48>)
 8008322:	2200      	movs	r2, #0
 8008324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008326:	4805      	ldr	r0, [pc, #20]	; (800833c <MX_TIM16_Init+0x48>)
 8008328:	f003 ff2e 	bl	800c188 <HAL_TIM_Base_Init>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008332:	f7ff fb5f 	bl	80079f4 <Error_Handler>
  }

}
 8008336:	bf00      	nop
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20002500 	.word	0x20002500
 8008340:	40014400 	.word	0x40014400

08008344 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d12f      	bne.n	80083c6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008366:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8008368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836a:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800836c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008370:	6613      	str	r3, [r2, #96]	; 0x60
 8008372:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8008374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8008380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008382:	4a14      	ldr	r2, [pc, #80]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8008384:	f043 0304 	orr.w	r3, r3, #4
 8008388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800838c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008396:	2303      	movs	r3, #3
 8008398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800839a:	2302      	movs	r3, #2
 800839c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083a2:	2300      	movs	r3, #0
 80083a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80083a6:	2302      	movs	r3, #2
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083aa:	f107 0314 	add.w	r3, r7, #20
 80083ae:	4619      	mov	r1, r3
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <HAL_TIM_Encoder_MspInit+0x94>)
 80083b2:	f002 fcc5 	bl	800ad40 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80083b6:	2200      	movs	r2, #0
 80083b8:	2100      	movs	r1, #0
 80083ba:	2018      	movs	r0, #24
 80083bc:	f001 fda1 	bl	8009f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80083c0:	2018      	movs	r0, #24
 80083c2:	f001 fdb8 	bl	8009f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80083c6:	bf00      	nop
 80083c8:	3728      	adds	r7, #40	; 0x28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40021000 	.word	0x40021000
 80083d8:	48000800 	.word	0x48000800

080083dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	; 0x38
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	60da      	str	r2, [r3, #12]
 80083f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fc:	d10c      	bne.n	8008418 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80083fe:	4b4f      	ldr	r3, [pc, #316]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	4a4e      	ldr	r2, [pc, #312]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	6593      	str	r3, [r2, #88]	; 0x58
 800840a:	4b4c      	ldr	r3, [pc, #304]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	623b      	str	r3, [r7, #32]
 8008414:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8008416:	e08d      	b.n	8008534 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a48      	ldr	r2, [pc, #288]	; (8008540 <HAL_TIM_Base_MspInit+0x164>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d114      	bne.n	800844c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008422:	4b46      	ldr	r3, [pc, #280]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008426:	4a45      	ldr	r2, [pc, #276]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	6593      	str	r3, [r2, #88]	; 0x58
 800842e:	4b43      	ldr	r3, [pc, #268]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	201d      	movs	r0, #29
 8008440:	f001 fd5f 	bl	8009f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008444:	201d      	movs	r0, #29
 8008446:	f001 fd76 	bl	8009f36 <HAL_NVIC_EnableIRQ>
}
 800844a:	e073      	b.n	8008534 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a3c      	ldr	r2, [pc, #240]	; (8008544 <HAL_TIM_Base_MspInit+0x168>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d131      	bne.n	80084ba <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008456:	4b39      	ldr	r3, [pc, #228]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845a:	4a38      	ldr	r2, [pc, #224]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 800845c:	f043 0308 	orr.w	r3, r3, #8
 8008460:	6593      	str	r3, [r2, #88]	; 0x58
 8008462:	4b36      	ldr	r3, [pc, #216]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	61bb      	str	r3, [r7, #24]
 800846c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800846e:	4b33      	ldr	r3, [pc, #204]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008472:	4a32      	ldr	r2, [pc, #200]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008474:	f043 0301 	orr.w	r3, r3, #1
 8008478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800847a:	4b30      	ldr	r3, [pc, #192]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008486:	2301      	movs	r3, #1
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800848a:	2302      	movs	r3, #2
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800848e:	2300      	movs	r3, #0
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008492:	2300      	movs	r3, #0
 8008494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008496:	2302      	movs	r3, #2
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800849a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800849e:	4619      	mov	r1, r3
 80084a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084a4:	f002 fc4c 	bl	800ad40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80084a8:	2200      	movs	r2, #0
 80084aa:	2102      	movs	r1, #2
 80084ac:	2032      	movs	r0, #50	; 0x32
 80084ae:	f001 fd28 	bl	8009f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80084b2:	2032      	movs	r0, #50	; 0x32
 80084b4:	f001 fd3f 	bl	8009f36 <HAL_NVIC_EnableIRQ>
}
 80084b8:	e03c      	b.n	8008534 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a22      	ldr	r2, [pc, #136]	; (8008548 <HAL_TIM_Base_MspInit+0x16c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10c      	bne.n	80084de <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80084c4:	4b1d      	ldr	r3, [pc, #116]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	4a1c      	ldr	r2, [pc, #112]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084ce:	6613      	str	r3, [r2, #96]	; 0x60
 80084d0:	4b1a      	ldr	r3, [pc, #104]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	693b      	ldr	r3, [r7, #16]
}
 80084dc:	e02a      	b.n	8008534 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1a      	ldr	r2, [pc, #104]	; (800854c <HAL_TIM_Base_MspInit+0x170>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d114      	bne.n	8008512 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80084e8:	4b14      	ldr	r3, [pc, #80]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ec:	4a13      	ldr	r2, [pc, #76]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f2:	6613      	str	r3, [r2, #96]	; 0x60
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 80084f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	2018      	movs	r0, #24
 8008506:	f001 fcfc 	bl	8009f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800850a:	2018      	movs	r0, #24
 800850c:	f001 fd13 	bl	8009f36 <HAL_NVIC_EnableIRQ>
}
 8008510:	e010      	b.n	8008534 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a0e      	ldr	r2, [pc, #56]	; (8008550 <HAL_TIM_Base_MspInit+0x174>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d10b      	bne.n	8008534 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 800851e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008520:	4a06      	ldr	r2, [pc, #24]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008526:	6613      	str	r3, [r2, #96]	; 0x60
 8008528:	4b04      	ldr	r3, [pc, #16]	; (800853c <HAL_TIM_Base_MspInit+0x160>)
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]
}
 8008534:	bf00      	nop
 8008536:	3738      	adds	r7, #56	; 0x38
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	40021000 	.word	0x40021000
 8008540:	40000400 	.word	0x40000400
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40013400 	.word	0x40013400
 800854c:	40014000 	.word	0x40014000
 8008550:	40014400 	.word	0x40014400

08008554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008554:	480d      	ldr	r0, [pc, #52]	; (800858c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008556:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008558:	480d      	ldr	r0, [pc, #52]	; (8008590 <LoopForever+0x6>)
  ldr r1, =_edata
 800855a:	490e      	ldr	r1, [pc, #56]	; (8008594 <LoopForever+0xa>)
  ldr r2, =_sidata
 800855c:	4a0e      	ldr	r2, [pc, #56]	; (8008598 <LoopForever+0xe>)
  movs r3, #0
 800855e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008560:	e002      	b.n	8008568 <LoopCopyDataInit>

08008562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008566:	3304      	adds	r3, #4

08008568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800856a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800856c:	d3f9      	bcc.n	8008562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800856e:	4a0b      	ldr	r2, [pc, #44]	; (800859c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008570:	4c0b      	ldr	r4, [pc, #44]	; (80085a0 <LoopForever+0x16>)
  movs r3, #0
 8008572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008574:	e001      	b.n	800857a <LoopFillZerobss>

08008576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008578:	3204      	adds	r2, #4

0800857a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800857a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800857c:	d3fb      	bcc.n	8008576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800857e:	f7ff fc91 	bl	8007ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008582:	f006 f91b 	bl	800e7bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008586:	f7ff f955 	bl	8007834 <main>

0800858a <LoopForever>:

LoopForever:
    b LoopForever
 800858a:	e7fe      	b.n	800858a <LoopForever>
  ldr   r0, =_estack
 800858c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008594:	20001ab8 	.word	0x20001ab8
  ldr r2, =_sidata
 8008598:	08013ae0 	.word	0x08013ae0
  ldr r2, =_sbss
 800859c:	20001ab8 	.word	0x20001ab8
  ldr r4, =_ebss
 80085a0:	20002554 	.word	0x20002554

080085a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80085a4:	e7fe      	b.n	80085a4 <ADC1_2_IRQHandler>

080085a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085b0:	2003      	movs	r0, #3
 80085b2:	f001 fc9b 	bl	8009eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085b6:	2000      	movs	r0, #0
 80085b8:	f000 f80e 	bl	80085d8 <HAL_InitTick>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	71fb      	strb	r3, [r7, #7]
 80085c6:	e001      	b.n	80085cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085c8:	f7ff fae4 	bl	8007b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085cc:	79fb      	ldrb	r3, [r7, #7]

}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <HAL_InitTick+0x68>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d022      	beq.n	8008632 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <HAL_InitTick+0x6c>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b13      	ldr	r3, [pc, #76]	; (8008640 <HAL_InitTick+0x68>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80085f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fca6 	bl	8009f52 <HAL_SYSTICK_Config>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10f      	bne.n	800862c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d809      	bhi.n	8008626 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008612:	2200      	movs	r2, #0
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861a:	f001 fc72 	bl	8009f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800861e:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <HAL_InitTick+0x70>)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	e007      	b.n	8008636 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
 800862a:	e004      	b.n	8008636 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	e001      	b.n	8008636 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000ca8 	.word	0x20000ca8
 8008644:	20000ca0 	.word	0x20000ca0
 8008648:	20000ca4 	.word	0x20000ca4

0800864c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <HAL_IncTick+0x1c>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_IncTick+0x20>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4413      	add	r3, r2
 800865a:	4a03      	ldr	r2, [pc, #12]	; (8008668 <HAL_IncTick+0x1c>)
 800865c:	6013      	str	r3, [r2, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	2000254c 	.word	0x2000254c
 800866c:	20000ca8 	.word	0x20000ca8

08008670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  return uwTick;
 8008674:	4b03      	ldr	r3, [pc, #12]	; (8008684 <HAL_GetTick+0x14>)
 8008676:	681b      	ldr	r3, [r3, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000254c 	.word	0x2000254c

08008688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008690:	f7ff ffee 	bl	8008670 <HAL_GetTick>
 8008694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a0:	d004      	beq.n	80086ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <HAL_Delay+0x40>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086ac:	bf00      	nop
 80086ae:	f7ff ffdf 	bl	8008670 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d8f7      	bhi.n	80086ae <HAL_Delay+0x26>
  {
  }
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000ca8 	.word	0x20000ca8

080086cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	609a      	str	r2, [r3, #8]
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008734:	b490      	push	{r4, r7}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3360      	adds	r3, #96	; 0x60
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <LL_ADC_SetOffset+0x40>)
 8008754:	4013      	ands	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	4313      	orrs	r3, r2
 8008762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008766:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bc90      	pop	{r4, r7}
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	03fff000 	.word	0x03fff000

08008778 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008778:	b490      	push	{r4, r7}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3360      	adds	r3, #96	; 0x60
 8008786:	461a      	mov	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bc90      	pop	{r4, r7}
 800879e:	4770      	bx	lr

080087a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80087a0:	b490      	push	{r4, r7}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3360      	adds	r3, #96	; 0x60
 80087b0:	461a      	mov	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc90      	pop	{r4, r7}
 80087ce:	4770      	bx	lr

080087d0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80087d0:	b490      	push	{r4, r7}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3360      	adds	r3, #96	; 0x60
 80087e0:	461a      	mov	r2, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc90      	pop	{r4, r7}
 80087fe:	4770      	bx	lr

08008800 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008800:	b490      	push	{r4, r7}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3360      	adds	r3, #96	; 0x60
 8008810:	461a      	mov	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4313      	orrs	r3, r2
 8008824:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bc90      	pop	{r4, r7}
 800882e:	4770      	bx	lr

08008830 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	615a      	str	r2, [r3, #20]
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008856:	b490      	push	{r4, r7}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3330      	adds	r3, #48	; 0x30
 8008866:	461a      	mov	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	4413      	add	r3, r2
 8008874:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008876:	6822      	ldr	r2, [r4, #0]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f003 031f 	and.w	r3, r3, #31
 800887e:	211f      	movs	r1, #31
 8008880:	fa01 f303 	lsl.w	r3, r1, r3
 8008884:	43db      	mvns	r3, r3
 8008886:	401a      	ands	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0e9b      	lsrs	r3, r3, #26
 800888c:	f003 011f 	and.w	r1, r3, #31
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f003 031f 	and.w	r3, r3, #31
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc90      	pop	{r4, r7}
 80088a6:	4770      	bx	lr

080088a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80088a8:	b490      	push	{r4, r7}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3314      	adds	r3, #20
 80088b8:	461a      	mov	r2, r3
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0e5b      	lsrs	r3, r3, #25
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	4413      	add	r3, r2
 80088c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088c8:	6822      	ldr	r2, [r4, #0]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	0d1b      	lsrs	r3, r3, #20
 80088ce:	f003 031f 	and.w	r3, r3, #31
 80088d2:	2107      	movs	r1, #7
 80088d4:	fa01 f303 	lsl.w	r3, r1, r3
 80088d8:	43db      	mvns	r3, r3
 80088da:	401a      	ands	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	0d1b      	lsrs	r3, r3, #20
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc90      	pop	{r4, r7}
 80088f6:	4770      	bx	lr

080088f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008910:	43db      	mvns	r3, r3
 8008912:	401a      	ands	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0318 	and.w	r3, r3, #24
 800891a:	4908      	ldr	r1, [pc, #32]	; (800893c <LL_ADC_SetChannelSingleDiff+0x44>)
 800891c:	40d9      	lsrs	r1, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	400b      	ands	r3, r1
 8008922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008926:	431a      	orrs	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	0007ffff 	.word	0x0007ffff

08008940 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6093      	str	r3, [r2, #8]
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008978:	d101      	bne.n	800897e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800897a:	2301      	movs	r3, #1
 800897c:	e000      	b.n	8008980 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800899c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80089a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c8:	d101      	bne.n	80089ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <LL_ADC_IsEnabled+0x18>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <LL_ADC_IsEnabled+0x1a>
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d101      	bne.n	8008a1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d101      	bne.n	8008a40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e1ad      	b.n	8008dc6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fe f937 	bl	8006cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff ff67 	bl	8008964 <LL_ADC_IsDeepPowerDownEnabled>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff ff4d 	bl	8008940 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff ff82 	bl	80089b4 <LL_ADC_IsInternalRegulatorEnabled>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d113      	bne.n	8008ade <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff ff66 	bl	800898c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008ac0:	4b9e      	ldr	r3, [pc, #632]	; (8008d3c <HAL_ADC_Init+0x2ec>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	099b      	lsrs	r3, r3, #6
 8008ac6:	4a9e      	ldr	r2, [pc, #632]	; (8008d40 <HAL_ADC_Init+0x2f0>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	099b      	lsrs	r3, r3, #6
 8008ace:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ad0:	e002      	b.n	8008ad8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f9      	bne.n	8008ad2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff ff66 	bl	80089b4 <LL_ADC_IsInternalRegulatorEnabled>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af2:	f043 0210 	orr.w	r2, r3, #16
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afe:	f043 0201 	orr.w	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff ff77 	bl	8008a02 <LL_ADC_REG_IsConversionOngoing>
 8008b14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f040 8148 	bne.w	8008db4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f040 8144 	bne.w	8008db4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008b34:	f043 0202 	orr.w	r2, r3, #2
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff ff4b 	bl	80089dc <LL_ADC_IsEnabled>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d141      	bne.n	8008bd0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b54:	d004      	beq.n	8008b60 <HAL_ADC_Init+0x110>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a7a      	ldr	r2, [pc, #488]	; (8008d44 <HAL_ADC_Init+0x2f4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10f      	bne.n	8008b80 <HAL_ADC_Init+0x130>
 8008b60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008b64:	f7ff ff3a 	bl	80089dc <LL_ADC_IsEnabled>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	4876      	ldr	r0, [pc, #472]	; (8008d44 <HAL_ADC_Init+0x2f4>)
 8008b6c:	f7ff ff36 	bl	80089dc <LL_ADC_IsEnabled>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4323      	orrs	r3, r4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bf0c      	ite	eq
 8008b78:	2301      	moveq	r3, #1
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	e012      	b.n	8008ba6 <HAL_ADC_Init+0x156>
 8008b80:	4871      	ldr	r0, [pc, #452]	; (8008d48 <HAL_ADC_Init+0x2f8>)
 8008b82:	f7ff ff2b 	bl	80089dc <LL_ADC_IsEnabled>
 8008b86:	4604      	mov	r4, r0
 8008b88:	4870      	ldr	r0, [pc, #448]	; (8008d4c <HAL_ADC_Init+0x2fc>)
 8008b8a:	f7ff ff27 	bl	80089dc <LL_ADC_IsEnabled>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	431c      	orrs	r4, r3
 8008b92:	486f      	ldr	r0, [pc, #444]	; (8008d50 <HAL_ADC_Init+0x300>)
 8008b94:	f7ff ff22 	bl	80089dc <LL_ADC_IsEnabled>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4323      	orrs	r3, r4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d012      	beq.n	8008bd0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb2:	d004      	beq.n	8008bbe <HAL_ADC_Init+0x16e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a62      	ldr	r2, [pc, #392]	; (8008d44 <HAL_ADC_Init+0x2f4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d101      	bne.n	8008bc2 <HAL_ADC_Init+0x172>
 8008bbe:	4a65      	ldr	r2, [pc, #404]	; (8008d54 <HAL_ADC_Init+0x304>)
 8008bc0:	e000      	b.n	8008bc4 <HAL_ADC_Init+0x174>
 8008bc2:	4a65      	ldr	r2, [pc, #404]	; (8008d58 <HAL_ADC_Init+0x308>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7ff fd7e 	bl	80086cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7f5b      	ldrb	r3, [r3, #29]
 8008bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d106      	bne.n	8008c0c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	045b      	lsls	r3, r3, #17
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	4b4b      	ldr	r3, [pc, #300]	; (8008d5c <HAL_ADC_Init+0x30c>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	69b9      	ldr	r1, [r7, #24]
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fed3 	bl	8008a02 <LL_ADC_REG_IsConversionOngoing>
 8008c5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fee0 	bl	8008a28 <LL_ADC_INJ_IsConversionOngoing>
 8008c68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d17f      	bne.n	8008d70 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d17c      	bne.n	8008d70 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008c7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c92:	f023 0302 	bic.w	r3, r3, #2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	69b9      	ldr	r1, [r7, #24]
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d017      	beq.n	8008cd8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691a      	ldr	r2, [r3, #16]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008cc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6911      	ldr	r1, [r2, #16]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008cd6:	e013      	b.n	8008d00 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ce6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d12a      	bne.n	8008d60 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d14:	f023 0304 	bic.w	r3, r3, #4
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d20:	4311      	orrs	r1, r2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d26:	4311      	orrs	r1, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0201 	orr.w	r2, r2, #1
 8008d38:	611a      	str	r2, [r3, #16]
 8008d3a:	e019      	b.n	8008d70 <HAL_ADC_Init+0x320>
 8008d3c:	20000ca0 	.word	0x20000ca0
 8008d40:	053e2d63 	.word	0x053e2d63
 8008d44:	50000100 	.word	0x50000100
 8008d48:	50000400 	.word	0x50000400
 8008d4c:	50000500 	.word	0x50000500
 8008d50:	50000600 	.word	0x50000600
 8008d54:	50000300 	.word	0x50000300
 8008d58:	50000700 	.word	0x50000700
 8008d5c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d10c      	bne.n	8008d92 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f023 010f 	bic.w	r1, r3, #15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	1e5a      	subs	r2, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d90:	e007      	b.n	8008da2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 020f 	bic.w	r2, r2, #15
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	f043 0201 	orr.w	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008db2:	e007      	b.n	8008dc4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	f043 0210 	orr.w	r2, r3, #16
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3724      	adds	r7, #36	; 0x24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd90      	pop	{r4, r7, pc}
 8008dce:	bf00      	nop

08008dd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b0a6      	sub	sp, #152	; 0x98
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_ADC_ConfigChannel+0x22>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e38e      	b.n	8009510 <HAL_ADC_ConfigChannel+0x740>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fdff 	bl	8008a02 <LL_ADC_REG_IsConversionOngoing>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 836f 	bne.w	80094ea <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	6859      	ldr	r1, [r3, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f7ff fd1c 	bl	8008856 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fded 	bl	8008a02 <LL_ADC_REG_IsConversionOngoing>
 8008e28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff fdf9 	bl	8008a28 <LL_ADC_INJ_IsConversionOngoing>
 8008e36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f040 817b 	bne.w	800913a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 8176 	bne.w	800913a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e56:	d10f      	bne.n	8008e78 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	4619      	mov	r1, r3
 8008e64:	f7ff fd20 	bl	80088a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff fcdd 	bl	8008830 <LL_ADC_SetSamplingTimeCommonConfig>
 8008e76:	e00e      	b.n	8008e96 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	461a      	mov	r2, r3
 8008e86:	f7ff fd0f 	bl	80088a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fccd 	bl	8008830 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d022      	beq.n	8008efe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	6919      	ldr	r1, [r3, #16]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ec8:	f7ff fc34 	bl	8008734 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6919      	ldr	r1, [r3, #16]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f7ff fc79 	bl	80087d0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	6919      	ldr	r1, [r3, #16]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	7f1b      	ldrb	r3, [r3, #28]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d102      	bne.n	8008ef4 <HAL_ADC_ConfigChannel+0x124>
 8008eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ef2:	e000      	b.n	8008ef6 <HAL_ADC_ConfigChannel+0x126>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7ff fc82 	bl	8008800 <LL_ADC_SetOffsetSaturation>
 8008efc:	e11d      	b.n	800913a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff fc37 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <HAL_ADC_ConfigChannel+0x15a>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fc2c 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008f20:	4603      	mov	r3, r0
 8008f22:	0e9b      	lsrs	r3, r3, #26
 8008f24:	f003 021f 	and.w	r2, r3, #31
 8008f28:	e012      	b.n	8008f50 <HAL_ADC_ConfigChannel+0x180>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fc21 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f40:	fa93 f3a3 	rbit	r3, r3
 8008f44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f48:	fab3 f383 	clz	r3, r3
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d105      	bne.n	8008f68 <HAL_ADC_ConfigChannel+0x198>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	0e9b      	lsrs	r3, r3, #26
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	e00a      	b.n	8008f7e <HAL_ADC_ConfigChannel+0x1ae>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f70:	fa93 f3a3 	rbit	r3, r3
 8008f74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f78:	fab3 f383 	clz	r3, r3
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d106      	bne.n	8008f90 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fc08 	bl	80087a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2101      	movs	r1, #1
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fbee 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <HAL_ADC_ConfigChannel+0x1ec>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2101      	movs	r1, #1
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff fbe3 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	0e9b      	lsrs	r3, r3, #26
 8008fb6:	f003 021f 	and.w	r2, r3, #31
 8008fba:	e010      	b.n	8008fde <HAL_ADC_ConfigChannel+0x20e>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff fbd8 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fce:	fa93 f3a3 	rbit	r3, r3
 8008fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd6:	fab3 f383 	clz	r3, r3
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <HAL_ADC_ConfigChannel+0x226>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	0e9b      	lsrs	r3, r3, #26
 8008ff0:	f003 031f 	and.w	r3, r3, #31
 8008ff4:	e00a      	b.n	800900c <HAL_ADC_ConfigChannel+0x23c>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ffe:	fa93 f3a3 	rbit	r3, r3
 8009002:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009006:	fab3 f383 	clz	r3, r3
 800900a:	b2db      	uxtb	r3, r3
 800900c:	429a      	cmp	r2, r3
 800900e:	d106      	bne.n	800901e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	2101      	movs	r1, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fbc1 	bl	80087a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2102      	movs	r1, #2
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff fba7 	bl	8008778 <LL_ADC_GetOffsetChannel>
 800902a:	4603      	mov	r3, r0
 800902c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <HAL_ADC_ConfigChannel+0x27a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2102      	movs	r1, #2
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fb9c 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8009040:	4603      	mov	r3, r0
 8009042:	0e9b      	lsrs	r3, r3, #26
 8009044:	f003 021f 	and.w	r2, r3, #31
 8009048:	e010      	b.n	800906c <HAL_ADC_ConfigChannel+0x29c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2102      	movs	r1, #2
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fb91 	bl	8008778 <LL_ADC_GetOffsetChannel>
 8009056:	4603      	mov	r3, r0
 8009058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905c:	fa93 f3a3 	rbit	r3, r3
 8009060:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009064:	fab3 f383 	clz	r3, r3
 8009068:	b2db      	uxtb	r3, r3
 800906a:	461a      	mov	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009074:	2b00      	cmp	r3, #0
 8009076:	d105      	bne.n	8009084 <HAL_ADC_ConfigChannel+0x2b4>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	0e9b      	lsrs	r3, r3, #26
 800907e:	f003 031f 	and.w	r3, r3, #31
 8009082:	e00a      	b.n	800909a <HAL_ADC_ConfigChannel+0x2ca>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800908c:	fa93 f3a3 	rbit	r3, r3
 8009090:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009094:	fab3 f383 	clz	r3, r3
 8009098:	b2db      	uxtb	r3, r3
 800909a:	429a      	cmp	r2, r3
 800909c:	d106      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fb7a 	bl	80087a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2103      	movs	r1, #3
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fb60 	bl	8008778 <LL_ADC_GetOffsetChannel>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <HAL_ADC_ConfigChannel+0x308>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2103      	movs	r1, #3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff fb55 	bl	8008778 <LL_ADC_GetOffsetChannel>
 80090ce:	4603      	mov	r3, r0
 80090d0:	0e9b      	lsrs	r3, r3, #26
 80090d2:	f003 021f 	and.w	r2, r3, #31
 80090d6:	e010      	b.n	80090fa <HAL_ADC_ConfigChannel+0x32a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2103      	movs	r1, #3
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fb4a 	bl	8008778 <LL_ADC_GetOffsetChannel>
 80090e4:	4603      	mov	r3, r0
 80090e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ea:	fa93 f3a3 	rbit	r3, r3
 80090ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80090f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f2:	fab3 f383 	clz	r3, r3
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <HAL_ADC_ConfigChannel+0x342>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	0e9b      	lsrs	r3, r3, #26
 800910c:	f003 031f 	and.w	r3, r3, #31
 8009110:	e00a      	b.n	8009128 <HAL_ADC_ConfigChannel+0x358>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911a:	fa93 f3a3 	rbit	r3, r3
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009122:	fab3 f383 	clz	r3, r3
 8009126:	b2db      	uxtb	r3, r3
 8009128:	429a      	cmp	r2, r3
 800912a:	d106      	bne.n	800913a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	2103      	movs	r1, #3
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fb33 	bl	80087a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fc4c 	bl	80089dc <LL_ADC_IsEnabled>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 810c 	bne.w	8009364 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	6819      	ldr	r1, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	461a      	mov	r2, r3
 800915a:	f7ff fbcd 	bl	80088f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	4aaf      	ldr	r2, [pc, #700]	; (8009420 <HAL_ADC_ConfigChannel+0x650>)
 8009164:	4293      	cmp	r3, r2
 8009166:	f040 80fd 	bne.w	8009364 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10b      	bne.n	8009192 <HAL_ADC_ConfigChannel+0x3c2>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	0e9b      	lsrs	r3, r3, #26
 8009180:	3301      	adds	r3, #1
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	2b09      	cmp	r3, #9
 8009188:	bf94      	ite	ls
 800918a:	2301      	movls	r3, #1
 800918c:	2300      	movhi	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	e012      	b.n	80091b8 <HAL_ADC_ConfigChannel+0x3e8>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919a:	fa93 f3a3 	rbit	r3, r3
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80091a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a2:	fab3 f383 	clz	r3, r3
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	3301      	adds	r3, #1
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b09      	cmp	r3, #9
 80091b0:	bf94      	ite	ls
 80091b2:	2301      	movls	r3, #1
 80091b4:	2300      	movhi	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d064      	beq.n	8009286 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d107      	bne.n	80091d8 <HAL_ADC_ConfigChannel+0x408>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	0e9b      	lsrs	r3, r3, #26
 80091ce:	3301      	adds	r3, #1
 80091d0:	069b      	lsls	r3, r3, #26
 80091d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091d6:	e00e      	b.n	80091f6 <HAL_ADC_ConfigChannel+0x426>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	fa93 f3a3 	rbit	r3, r3
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	fab3 f383 	clz	r3, r3
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	3301      	adds	r3, #1
 80091f0:	069b      	lsls	r3, r3, #26
 80091f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <HAL_ADC_ConfigChannel+0x446>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	0e9b      	lsrs	r3, r3, #26
 8009208:	3301      	adds	r3, #1
 800920a:	f003 031f 	and.w	r3, r3, #31
 800920e:	2101      	movs	r1, #1
 8009210:	fa01 f303 	lsl.w	r3, r1, r3
 8009214:	e010      	b.n	8009238 <HAL_ADC_ConfigChannel+0x468>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	fa93 f3a3 	rbit	r3, r3
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	fab3 f383 	clz	r3, r3
 800922a:	b2db      	uxtb	r3, r3
 800922c:	3301      	adds	r3, #1
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	2101      	movs	r1, #1
 8009234:	fa01 f303 	lsl.w	r3, r1, r3
 8009238:	ea42 0103 	orr.w	r1, r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <HAL_ADC_ConfigChannel+0x48e>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	0e9b      	lsrs	r3, r3, #26
 800924e:	3301      	adds	r3, #1
 8009250:	f003 021f 	and.w	r2, r3, #31
 8009254:	4613      	mov	r3, r2
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	4413      	add	r3, r2
 800925a:	051b      	lsls	r3, r3, #20
 800925c:	e011      	b.n	8009282 <HAL_ADC_ConfigChannel+0x4b2>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	fa93 f3a3 	rbit	r3, r3
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	fab3 f383 	clz	r3, r3
 8009272:	b2db      	uxtb	r3, r3
 8009274:	3301      	adds	r3, #1
 8009276:	f003 021f 	and.w	r2, r3, #31
 800927a:	4613      	mov	r3, r2
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	4413      	add	r3, r2
 8009280:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009282:	430b      	orrs	r3, r1
 8009284:	e069      	b.n	800935a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928e:	2b00      	cmp	r3, #0
 8009290:	d107      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x4d2>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	0e9b      	lsrs	r3, r3, #26
 8009298:	3301      	adds	r3, #1
 800929a:	069b      	lsls	r3, r3, #26
 800929c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092a0:	e00e      	b.n	80092c0 <HAL_ADC_ConfigChannel+0x4f0>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	fa93 f3a3 	rbit	r3, r3
 80092ae:	61fb      	str	r3, [r7, #28]
  return result;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	3301      	adds	r3, #1
 80092ba:	069b      	lsls	r3, r3, #26
 80092bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d109      	bne.n	80092e0 <HAL_ADC_ConfigChannel+0x510>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	0e9b      	lsrs	r3, r3, #26
 80092d2:	3301      	adds	r3, #1
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f303 	lsl.w	r3, r1, r3
 80092de:	e010      	b.n	8009302 <HAL_ADC_ConfigChannel+0x532>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	fa93 f3a3 	rbit	r3, r3
 80092ec:	617b      	str	r3, [r7, #20]
  return result;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	fab3 f383 	clz	r3, r3
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	3301      	adds	r3, #1
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009302:	ea42 0103 	orr.w	r1, r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10d      	bne.n	800932e <HAL_ADC_ConfigChannel+0x55e>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	0e9b      	lsrs	r3, r3, #26
 8009318:	3301      	adds	r3, #1
 800931a:	f003 021f 	and.w	r2, r3, #31
 800931e:	4613      	mov	r3, r2
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	3b1e      	subs	r3, #30
 8009326:	051b      	lsls	r3, r3, #20
 8009328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800932c:	e014      	b.n	8009358 <HAL_ADC_ConfigChannel+0x588>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	fa93 f3a3 	rbit	r3, r3
 800933a:	60fb      	str	r3, [r7, #12]
  return result;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	fab3 f383 	clz	r3, r3
 8009342:	b2db      	uxtb	r3, r3
 8009344:	3301      	adds	r3, #1
 8009346:	f003 021f 	and.w	r2, r3, #31
 800934a:	4613      	mov	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	4413      	add	r3, r2
 8009350:	3b1e      	subs	r3, #30
 8009352:	051b      	lsls	r3, r3, #20
 8009354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009358:	430b      	orrs	r3, r1
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	6892      	ldr	r2, [r2, #8]
 800935e:	4619      	mov	r1, r3
 8009360:	f7ff faa2 	bl	80088a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <HAL_ADC_ConfigChannel+0x654>)
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80c9 	beq.w	8009504 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800937a:	d004      	beq.n	8009386 <HAL_ADC_ConfigChannel+0x5b6>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a29      	ldr	r2, [pc, #164]	; (8009428 <HAL_ADC_ConfigChannel+0x658>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d101      	bne.n	800938a <HAL_ADC_ConfigChannel+0x5ba>
 8009386:	4b29      	ldr	r3, [pc, #164]	; (800942c <HAL_ADC_ConfigChannel+0x65c>)
 8009388:	e000      	b.n	800938c <HAL_ADC_ConfigChannel+0x5bc>
 800938a:	4b29      	ldr	r3, [pc, #164]	; (8009430 <HAL_ADC_ConfigChannel+0x660>)
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff f9c3 	bl	8008718 <LL_ADC_GetCommonPathInternalCh>
 8009392:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a26      	ldr	r2, [pc, #152]	; (8009434 <HAL_ADC_ConfigChannel+0x664>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_ADC_ConfigChannel+0x5da>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a24      	ldr	r2, [pc, #144]	; (8009438 <HAL_ADC_ConfigChannel+0x668>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d14e      	bne.n	8009448 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80093aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d148      	bne.n	8009448 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093be:	d005      	beq.n	80093cc <HAL_ADC_ConfigChannel+0x5fc>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a1d      	ldr	r2, [pc, #116]	; (800943c <HAL_ADC_ConfigChannel+0x66c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f040 8099 	bne.w	80094fe <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093d4:	d004      	beq.n	80093e0 <HAL_ADC_ConfigChannel+0x610>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a13      	ldr	r2, [pc, #76]	; (8009428 <HAL_ADC_ConfigChannel+0x658>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d101      	bne.n	80093e4 <HAL_ADC_ConfigChannel+0x614>
 80093e0:	4a12      	ldr	r2, [pc, #72]	; (800942c <HAL_ADC_ConfigChannel+0x65c>)
 80093e2:	e000      	b.n	80093e6 <HAL_ADC_ConfigChannel+0x616>
 80093e4:	4a12      	ldr	r2, [pc, #72]	; (8009430 <HAL_ADC_ConfigChannel+0x660>)
 80093e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7ff f97e 	bl	80086f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80093f6:	4b12      	ldr	r3, [pc, #72]	; (8009440 <HAL_ADC_ConfigChannel+0x670>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	099b      	lsrs	r3, r3, #6
 80093fc:	4a11      	ldr	r2, [pc, #68]	; (8009444 <HAL_ADC_ConfigChannel+0x674>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	099a      	lsrs	r2, r3, #6
 8009404:	4613      	mov	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800940e:	e002      	b.n	8009416 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3b01      	subs	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f9      	bne.n	8009410 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800941c:	e06f      	b.n	80094fe <HAL_ADC_ConfigChannel+0x72e>
 800941e:	bf00      	nop
 8009420:	407f0000 	.word	0x407f0000
 8009424:	80080000 	.word	0x80080000
 8009428:	50000100 	.word	0x50000100
 800942c:	50000300 	.word	0x50000300
 8009430:	50000700 	.word	0x50000700
 8009434:	c3210000 	.word	0xc3210000
 8009438:	90c00010 	.word	0x90c00010
 800943c:	50000600 	.word	0x50000600
 8009440:	20000ca0 	.word	0x20000ca0
 8009444:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a32      	ldr	r2, [pc, #200]	; (8009518 <HAL_ADC_ConfigChannel+0x748>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d125      	bne.n	800949e <HAL_ADC_ConfigChannel+0x6ce>
 8009452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11f      	bne.n	800949e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a2e      	ldr	r2, [pc, #184]	; (800951c <HAL_ADC_ConfigChannel+0x74c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d104      	bne.n	8009472 <HAL_ADC_ConfigChannel+0x6a2>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a2c      	ldr	r2, [pc, #176]	; (8009520 <HAL_ADC_ConfigChannel+0x750>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d047      	beq.n	8009502 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800947a:	d004      	beq.n	8009486 <HAL_ADC_ConfigChannel+0x6b6>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a26      	ldr	r2, [pc, #152]	; (800951c <HAL_ADC_ConfigChannel+0x74c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d101      	bne.n	800948a <HAL_ADC_ConfigChannel+0x6ba>
 8009486:	4a27      	ldr	r2, [pc, #156]	; (8009524 <HAL_ADC_ConfigChannel+0x754>)
 8009488:	e000      	b.n	800948c <HAL_ADC_ConfigChannel+0x6bc>
 800948a:	4a27      	ldr	r2, [pc, #156]	; (8009528 <HAL_ADC_ConfigChannel+0x758>)
 800948c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7ff f92b 	bl	80086f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800949c:	e031      	b.n	8009502 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a22      	ldr	r2, [pc, #136]	; (800952c <HAL_ADC_ConfigChannel+0x75c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d12d      	bne.n	8009504 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80094a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d127      	bne.n	8009504 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a18      	ldr	r2, [pc, #96]	; (800951c <HAL_ADC_ConfigChannel+0x74c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d022      	beq.n	8009504 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094c6:	d004      	beq.n	80094d2 <HAL_ADC_ConfigChannel+0x702>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a13      	ldr	r2, [pc, #76]	; (800951c <HAL_ADC_ConfigChannel+0x74c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d101      	bne.n	80094d6 <HAL_ADC_ConfigChannel+0x706>
 80094d2:	4a14      	ldr	r2, [pc, #80]	; (8009524 <HAL_ADC_ConfigChannel+0x754>)
 80094d4:	e000      	b.n	80094d8 <HAL_ADC_ConfigChannel+0x708>
 80094d6:	4a14      	ldr	r2, [pc, #80]	; (8009528 <HAL_ADC_ConfigChannel+0x758>)
 80094d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7ff f905 	bl	80086f2 <LL_ADC_SetCommonPathInternalCh>
 80094e8:	e00c      	b.n	8009504 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	f043 0220 	orr.w	r2, r3, #32
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80094fc:	e002      	b.n	8009504 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009502:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800950c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009510:	4618      	mov	r0, r3
 8009512:	3798      	adds	r7, #152	; 0x98
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	c7520000 	.word	0xc7520000
 800951c:	50000100 	.word	0x50000100
 8009520:	50000500 	.word	0x50000500
 8009524:	50000300 	.word	0x50000300
 8009528:	50000700 	.word	0x50000700
 800952c:	cb840000 	.word	0xcb840000

08009530 <LL_ADC_IsEnabled>:
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <LL_ADC_IsEnabled+0x18>
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <LL_ADC_IsEnabled+0x1a>
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <LL_ADC_REG_IsConversionOngoing>:
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b04      	cmp	r3, #4
 8009568:	d101      	bne.n	800956e <LL_ADC_REG_IsConversionOngoing+0x18>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800957c:	b590      	push	{r4, r7, lr}
 800957e:	b0a1      	sub	sp, #132	; 0x84
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009596:	2302      	movs	r3, #2
 8009598:	e0e3      	b.n	8009762 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095aa:	d102      	bne.n	80095b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80095ac:	4b6f      	ldr	r3, [pc, #444]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80095ae:	60bb      	str	r3, [r7, #8]
 80095b0:	e009      	b.n	80095c6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a6e      	ldr	r2, [pc, #440]	; (8009770 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d102      	bne.n	80095c2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80095bc:	4b6d      	ldr	r3, [pc, #436]	; (8009774 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095be:	60bb      	str	r3, [r7, #8]
 80095c0:	e001      	b.n	80095c6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d0:	f043 0220 	orr.w	r2, r3, #32
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0be      	b.n	8009762 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff ffb5 	bl	8009556 <LL_ADC_REG_IsConversionOngoing>
 80095ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ffaf 	bl	8009556 <LL_ADC_REG_IsConversionOngoing>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 80a0 	bne.w	8009740 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 809c 	bne.w	8009740 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009610:	d004      	beq.n	800961c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a55      	ldr	r2, [pc, #340]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d101      	bne.n	8009620 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800961c:	4b56      	ldr	r3, [pc, #344]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800961e:	e000      	b.n	8009622 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009620:	4b56      	ldr	r3, [pc, #344]	; (800977c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009622:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d04b      	beq.n	80096c4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800962c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	6859      	ldr	r1, [r3, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800963e:	035b      	lsls	r3, r3, #13
 8009640:	430b      	orrs	r3, r1
 8009642:	431a      	orrs	r2, r3
 8009644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009646:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009650:	d004      	beq.n	800965c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a45      	ldr	r2, [pc, #276]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d10f      	bne.n	800967c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800965c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009660:	f7ff ff66 	bl	8009530 <LL_ADC_IsEnabled>
 8009664:	4604      	mov	r4, r0
 8009666:	4841      	ldr	r0, [pc, #260]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009668:	f7ff ff62 	bl	8009530 <LL_ADC_IsEnabled>
 800966c:	4603      	mov	r3, r0
 800966e:	4323      	orrs	r3, r4
 8009670:	2b00      	cmp	r3, #0
 8009672:	bf0c      	ite	eq
 8009674:	2301      	moveq	r3, #1
 8009676:	2300      	movne	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	e012      	b.n	80096a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800967c:	483c      	ldr	r0, [pc, #240]	; (8009770 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800967e:	f7ff ff57 	bl	8009530 <LL_ADC_IsEnabled>
 8009682:	4604      	mov	r4, r0
 8009684:	483b      	ldr	r0, [pc, #236]	; (8009774 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009686:	f7ff ff53 	bl	8009530 <LL_ADC_IsEnabled>
 800968a:	4603      	mov	r3, r0
 800968c:	431c      	orrs	r4, r3
 800968e:	483c      	ldr	r0, [pc, #240]	; (8009780 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009690:	f7ff ff4e 	bl	8009530 <LL_ADC_IsEnabled>
 8009694:	4603      	mov	r3, r0
 8009696:	4323      	orrs	r3, r4
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf0c      	ite	eq
 800969c:	2301      	moveq	r3, #1
 800969e:	2300      	movne	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d056      	beq.n	8009754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80096a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80096ae:	f023 030f 	bic.w	r3, r3, #15
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	6811      	ldr	r1, [r2, #0]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	6892      	ldr	r2, [r2, #8]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	431a      	orrs	r2, r3
 80096be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096c2:	e047      	b.n	8009754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80096c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096d8:	d004      	beq.n	80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a23      	ldr	r2, [pc, #140]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d10f      	bne.n	8009704 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80096e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80096e8:	f7ff ff22 	bl	8009530 <LL_ADC_IsEnabled>
 80096ec:	4604      	mov	r4, r0
 80096ee:	481f      	ldr	r0, [pc, #124]	; (800976c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80096f0:	f7ff ff1e 	bl	8009530 <LL_ADC_IsEnabled>
 80096f4:	4603      	mov	r3, r0
 80096f6:	4323      	orrs	r3, r4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	e012      	b.n	800972a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009704:	481a      	ldr	r0, [pc, #104]	; (8009770 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009706:	f7ff ff13 	bl	8009530 <LL_ADC_IsEnabled>
 800970a:	4604      	mov	r4, r0
 800970c:	4819      	ldr	r0, [pc, #100]	; (8009774 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800970e:	f7ff ff0f 	bl	8009530 <LL_ADC_IsEnabled>
 8009712:	4603      	mov	r3, r0
 8009714:	431c      	orrs	r4, r3
 8009716:	481a      	ldr	r0, [pc, #104]	; (8009780 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009718:	f7ff ff0a 	bl	8009530 <LL_ADC_IsEnabled>
 800971c:	4603      	mov	r3, r0
 800971e:	4323      	orrs	r3, r4
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf0c      	ite	eq
 8009724:	2301      	moveq	r3, #1
 8009726:	2300      	movne	r3, #0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d012      	beq.n	8009754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800972e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009736:	f023 030f 	bic.w	r3, r3, #15
 800973a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800973c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800973e:	e009      	b.n	8009754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009752:	e000      	b.n	8009756 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009754:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800975e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009762:	4618      	mov	r0, r3
 8009764:	3784      	adds	r7, #132	; 0x84
 8009766:	46bd      	mov	sp, r7
 8009768:	bd90      	pop	{r4, r7, pc}
 800976a:	bf00      	nop
 800976c:	50000100 	.word	0x50000100
 8009770:	50000400 	.word	0x50000400
 8009774:	50000500 	.word	0x50000500
 8009778:	50000300 	.word	0x50000300
 800977c:	50000700 	.word	0x50000700
 8009780:	50000600 	.word	0x50000600

08009784 <LL_EXTI_EnableIT_0_31>:
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	; (80097a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4313      	orrs	r3, r2
 8009796:	600b      	str	r3, [r1, #0]
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40010400 	.word	0x40010400

080097a8 <LL_EXTI_EnableIT_32_63>:
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80097b2:	6a1a      	ldr	r2, [r3, #32]
 80097b4:	4904      	ldr	r1, [pc, #16]	; (80097c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	620b      	str	r3, [r1, #32]
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	40010400 	.word	0x40010400

080097cc <LL_EXTI_DisableIT_0_31>:
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	43db      	mvns	r3, r3
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80097de:	4013      	ands	r3, r2
 80097e0:	600b      	str	r3, [r1, #0]
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40010400 	.word	0x40010400

080097f4 <LL_EXTI_DisableIT_32_63>:
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <LL_EXTI_DisableIT_32_63+0x24>)
 80097fe:	6a1a      	ldr	r2, [r3, #32]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	43db      	mvns	r3, r3
 8009804:	4904      	ldr	r1, [pc, #16]	; (8009818 <LL_EXTI_DisableIT_32_63+0x24>)
 8009806:	4013      	ands	r3, r2
 8009808:	620b      	str	r3, [r1, #32]
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40010400 	.word	0x40010400

0800981c <LL_EXTI_EnableEvent_0_31>:
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <LL_EXTI_EnableEvent_0_31+0x20>)
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <LL_EXTI_EnableEvent_0_31+0x20>)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4313      	orrs	r3, r2
 800982e:	604b      	str	r3, [r1, #4]
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	40010400 	.word	0x40010400

08009840 <LL_EXTI_EnableEvent_32_63>:
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800984a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800984c:	4904      	ldr	r1, [pc, #16]	; (8009860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4313      	orrs	r3, r2
 8009852:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	40010400 	.word	0x40010400

08009864 <LL_EXTI_DisableEvent_0_31>:
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <LL_EXTI_DisableEvent_0_31+0x24>)
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	43db      	mvns	r3, r3
 8009874:	4904      	ldr	r1, [pc, #16]	; (8009888 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009876:	4013      	ands	r3, r2
 8009878:	604b      	str	r3, [r1, #4]
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010400 	.word	0x40010400

0800988c <LL_EXTI_DisableEvent_32_63>:
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	43db      	mvns	r3, r3
 800989c:	4904      	ldr	r1, [pc, #16]	; (80098b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800989e:	4013      	ands	r3, r2
 80098a0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40010400 	.word	0x40010400

080098b4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	4904      	ldr	r1, [pc, #16]	; (80098d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	608b      	str	r3, [r1, #8]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	40010400 	.word	0x40010400

080098d8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80098e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098e4:	4904      	ldr	r1, [pc, #16]	; (80098f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	628b      	str	r3, [r1, #40]	; 0x28
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	40010400 	.word	0x40010400

080098fc <LL_EXTI_DisableRisingTrig_0_31>:
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	43db      	mvns	r3, r3
 800990c:	4904      	ldr	r1, [pc, #16]	; (8009920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800990e:	4013      	ands	r3, r2
 8009910:	608b      	str	r3, [r1, #8]
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	40010400 	.word	0x40010400

08009924 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800992e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	43db      	mvns	r3, r3
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009936:	4013      	ands	r3, r2
 8009938:	628b      	str	r3, [r1, #40]	; 0x28
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40010400 	.word	0x40010400

0800994c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	4904      	ldr	r1, [pc, #16]	; (800996c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4313      	orrs	r3, r2
 800995e:	60cb      	str	r3, [r1, #12]
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	40010400 	.word	0x40010400

08009970 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800997a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997c:	4904      	ldr	r1, [pc, #16]	; (8009990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4313      	orrs	r3, r2
 8009982:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	40010400 	.word	0x40010400

08009994 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	43db      	mvns	r3, r3
 80099a4:	4904      	ldr	r1, [pc, #16]	; (80099b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80099a6:	4013      	ands	r3, r2
 80099a8:	60cb      	str	r3, [r1, #12]
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	40010400 	.word	0x40010400

080099bc <LL_EXTI_DisableFallingTrig_32_63>:
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	43db      	mvns	r3, r3
 80099cc:	4904      	ldr	r1, [pc, #16]	; (80099e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	40010400 	.word	0x40010400

080099e4 <LL_EXTI_ClearFlag_0_31>:
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80099ec:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6153      	str	r3, [r2, #20]
}
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40010400 	.word	0x40010400

08009a04 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009a0c:	4a04      	ldr	r2, [pc, #16]	; (8009a20 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40010400 	.word	0x40010400

08009a24 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b088      	sub	sp, #32
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	77fb      	strb	r3, [r7, #31]
 8009a3e:	e180      	b.n	8009d42 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a4e:	d102      	bne.n	8009a56 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e175      	b.n	8009d42 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7f5b      	ldrb	r3, [r3, #29]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d108      	bne.n	8009a72 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fd f9d1 	bl	8006e14 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a7c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b98      	ldr	r3, [pc, #608]	; (8009d04 <HAL_COMP_Init+0x2e0>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	6979      	ldr	r1, [r7, #20]
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d015      	beq.n	8009aea <HAL_COMP_Init+0xc6>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d112      	bne.n	8009aea <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009ac4:	4b90      	ldr	r3, [pc, #576]	; (8009d08 <HAL_COMP_Init+0x2e4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	099b      	lsrs	r3, r3, #6
 8009aca:	4a90      	ldr	r2, [pc, #576]	; (8009d0c <HAL_COMP_Init+0x2e8>)
 8009acc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad0:	099a      	lsrs	r2, r3, #6
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009adc:	e002      	b.n	8009ae4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f9      	bne.n	8009ade <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a88      	ldr	r2, [pc, #544]	; (8009d10 <HAL_COMP_Init+0x2ec>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d028      	beq.n	8009b46 <HAL_COMP_Init+0x122>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a86      	ldr	r2, [pc, #536]	; (8009d14 <HAL_COMP_Init+0x2f0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d020      	beq.n	8009b40 <HAL_COMP_Init+0x11c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a85      	ldr	r2, [pc, #532]	; (8009d18 <HAL_COMP_Init+0x2f4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d018      	beq.n	8009b3a <HAL_COMP_Init+0x116>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_COMP_Init+0x2f8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d010      	beq.n	8009b34 <HAL_COMP_Init+0x110>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a82      	ldr	r2, [pc, #520]	; (8009d20 <HAL_COMP_Init+0x2fc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d008      	beq.n	8009b2e <HAL_COMP_Init+0x10a>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a80      	ldr	r2, [pc, #512]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d101      	bne.n	8009b2a <HAL_COMP_Init+0x106>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e00f      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e00d      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b32:	e00a      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b38:	e007      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009b3e:	e004      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b44:	e001      	b.n	8009b4a <HAL_COMP_Init+0x126>
 8009b46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b4a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80b6 	beq.w	8009cc6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0310 	and.w	r3, r3, #16
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d011      	beq.n	8009b8a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a6e      	ldr	r2, [pc, #440]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d004      	beq.n	8009b7a <HAL_COMP_Init+0x156>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a6c      	ldr	r2, [pc, #432]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d103      	bne.n	8009b82 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009b7a:	6938      	ldr	r0, [r7, #16]
 8009b7c:	f7ff feac 	bl	80098d8 <LL_EXTI_EnableRisingTrig_32_63>
 8009b80:	e014      	b.n	8009bac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009b82:	6938      	ldr	r0, [r7, #16]
 8009b84:	f7ff fe96 	bl	80098b4 <LL_EXTI_EnableRisingTrig_0_31>
 8009b88:	e010      	b.n	8009bac <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a65      	ldr	r2, [pc, #404]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_COMP_Init+0x17a>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a63      	ldr	r2, [pc, #396]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d103      	bne.n	8009ba6 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009b9e:	6938      	ldr	r0, [r7, #16]
 8009ba0:	f7ff fec0 	bl	8009924 <LL_EXTI_DisableRisingTrig_32_63>
 8009ba4:	e002      	b.n	8009bac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009ba6:	6938      	ldr	r0, [r7, #16]
 8009ba8:	f7ff fea8 	bl	80098fc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	f003 0320 	and.w	r3, r3, #32
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d011      	beq.n	8009bdc <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a59      	ldr	r2, [pc, #356]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d004      	beq.n	8009bcc <HAL_COMP_Init+0x1a8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a58      	ldr	r2, [pc, #352]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d103      	bne.n	8009bd4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009bcc:	6938      	ldr	r0, [r7, #16]
 8009bce:	f7ff fecf 	bl	8009970 <LL_EXTI_EnableFallingTrig_32_63>
 8009bd2:	e014      	b.n	8009bfe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009bd4:	6938      	ldr	r0, [r7, #16]
 8009bd6:	f7ff feb9 	bl	800994c <LL_EXTI_EnableFallingTrig_0_31>
 8009bda:	e010      	b.n	8009bfe <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a50      	ldr	r2, [pc, #320]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d004      	beq.n	8009bf0 <HAL_COMP_Init+0x1cc>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a4f      	ldr	r2, [pc, #316]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d103      	bne.n	8009bf8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009bf0:	6938      	ldr	r0, [r7, #16]
 8009bf2:	f7ff fee3 	bl	80099bc <LL_EXTI_DisableFallingTrig_32_63>
 8009bf6:	e002      	b.n	8009bfe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009bf8:	6938      	ldr	r0, [r7, #16]
 8009bfa:	f7ff fecb 	bl	8009994 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a48      	ldr	r2, [pc, #288]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d004      	beq.n	8009c12 <HAL_COMP_Init+0x1ee>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a46      	ldr	r2, [pc, #280]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d103      	bne.n	8009c1a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009c12:	6938      	ldr	r0, [r7, #16]
 8009c14:	f7ff fef6 	bl	8009a04 <LL_EXTI_ClearFlag_32_63>
 8009c18:	e002      	b.n	8009c20 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009c1a:	6938      	ldr	r0, [r7, #16]
 8009c1c:	f7ff fee2 	bl	80099e4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d011      	beq.n	8009c50 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a3c      	ldr	r2, [pc, #240]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_COMP_Init+0x21c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a3b      	ldr	r2, [pc, #236]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d103      	bne.n	8009c48 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009c40:	6938      	ldr	r0, [r7, #16]
 8009c42:	f7ff fdfd 	bl	8009840 <LL_EXTI_EnableEvent_32_63>
 8009c46:	e014      	b.n	8009c72 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009c48:	6938      	ldr	r0, [r7, #16]
 8009c4a:	f7ff fde7 	bl	800981c <LL_EXTI_EnableEvent_0_31>
 8009c4e:	e010      	b.n	8009c72 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a33      	ldr	r2, [pc, #204]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d004      	beq.n	8009c64 <HAL_COMP_Init+0x240>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a32      	ldr	r2, [pc, #200]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d103      	bne.n	8009c6c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009c64:	6938      	ldr	r0, [r7, #16]
 8009c66:	f7ff fe11 	bl	800988c <LL_EXTI_DisableEvent_32_63>
 8009c6a:	e002      	b.n	8009c72 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009c6c:	6938      	ldr	r0, [r7, #16]
 8009c6e:	f7ff fdf9 	bl	8009864 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d011      	beq.n	8009ca2 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a28      	ldr	r2, [pc, #160]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d004      	beq.n	8009c92 <HAL_COMP_Init+0x26e>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a26      	ldr	r2, [pc, #152]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d103      	bne.n	8009c9a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009c92:	6938      	ldr	r0, [r7, #16]
 8009c94:	f7ff fd88 	bl	80097a8 <LL_EXTI_EnableIT_32_63>
 8009c98:	e04b      	b.n	8009d32 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009c9a:	6938      	ldr	r0, [r7, #16]
 8009c9c:	f7ff fd72 	bl	8009784 <LL_EXTI_EnableIT_0_31>
 8009ca0:	e047      	b.n	8009d32 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1f      	ldr	r2, [pc, #124]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d004      	beq.n	8009cb6 <HAL_COMP_Init+0x292>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d103      	bne.n	8009cbe <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009cb6:	6938      	ldr	r0, [r7, #16]
 8009cb8:	f7ff fd9c 	bl	80097f4 <LL_EXTI_DisableIT_32_63>
 8009cbc:	e039      	b.n	8009d32 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009cbe:	6938      	ldr	r0, [r7, #16]
 8009cc0:	f7ff fd84 	bl	80097cc <LL_EXTI_DisableIT_0_31>
 8009cc4:	e035      	b.n	8009d32 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d004      	beq.n	8009cda <HAL_COMP_Init+0x2b6>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a14      	ldr	r2, [pc, #80]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d103      	bne.n	8009ce2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f7ff fdd6 	bl	800988c <LL_EXTI_DisableEvent_32_63>
 8009ce0:	e002      	b.n	8009ce8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009ce2:	6938      	ldr	r0, [r7, #16]
 8009ce4:	f7ff fdbe 	bl	8009864 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a0d      	ldr	r2, [pc, #52]	; (8009d24 <HAL_COMP_Init+0x300>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_COMP_Init+0x2d8>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <HAL_COMP_Init+0x304>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d117      	bne.n	8009d2c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009cfc:	6938      	ldr	r0, [r7, #16]
 8009cfe:	f7ff fd79 	bl	80097f4 <LL_EXTI_DisableIT_32_63>
 8009d02:	e016      	b.n	8009d32 <HAL_COMP_Init+0x30e>
 8009d04:	ff007e0f 	.word	0xff007e0f
 8009d08:	20000ca0 	.word	0x20000ca0
 8009d0c:	053e2d63 	.word	0x053e2d63
 8009d10:	40010200 	.word	0x40010200
 8009d14:	40010204 	.word	0x40010204
 8009d18:	40010208 	.word	0x40010208
 8009d1c:	4001020c 	.word	0x4001020c
 8009d20:	40010210 	.word	0x40010210
 8009d24:	40010214 	.word	0x40010214
 8009d28:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009d2c:	6938      	ldr	r0, [r7, #16]
 8009d2e:	f7ff fd4d 	bl	80097cc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7f5b      	ldrb	r3, [r3, #29]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3720      	adds	r7, #32
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <__NVIC_SetPriorityGrouping>:
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <__NVIC_SetPriorityGrouping+0x44>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d68:	4013      	ands	r3, r2
 8009d6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d7e:	4a04      	ldr	r2, [pc, #16]	; (8009d90 <__NVIC_SetPriorityGrouping+0x44>)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	60d3      	str	r3, [r2, #12]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	e000ed00 	.word	0xe000ed00

08009d94 <__NVIC_GetPriorityGrouping>:
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <__NVIC_GetPriorityGrouping+0x18>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	f003 0307 	and.w	r3, r3, #7
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	e000ed00 	.word	0xe000ed00

08009db0 <__NVIC_EnableIRQ>:
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	db0b      	blt.n	8009dda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	f003 021f 	and.w	r2, r3, #31
 8009dc8:	4907      	ldr	r1, [pc, #28]	; (8009de8 <__NVIC_EnableIRQ+0x38>)
 8009dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8009dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	e000e100 	.word	0xe000e100

08009dec <__NVIC_SetPriority>:
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	db0a      	blt.n	8009e16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	490c      	ldr	r1, [pc, #48]	; (8009e38 <__NVIC_SetPriority+0x4c>)
 8009e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e0a:	0112      	lsls	r2, r2, #4
 8009e0c:	b2d2      	uxtb	r2, r2
 8009e0e:	440b      	add	r3, r1
 8009e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e14:	e00a      	b.n	8009e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	4908      	ldr	r1, [pc, #32]	; (8009e3c <__NVIC_SetPriority+0x50>)
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	f003 030f 	and.w	r3, r3, #15
 8009e22:	3b04      	subs	r3, #4
 8009e24:	0112      	lsls	r2, r2, #4
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	440b      	add	r3, r1
 8009e2a:	761a      	strb	r2, [r3, #24]
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	e000e100 	.word	0xe000e100
 8009e3c:	e000ed00 	.word	0xe000ed00

08009e40 <NVIC_EncodePriority>:
{
 8009e40:	b480      	push	{r7}
 8009e42:	b089      	sub	sp, #36	; 0x24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	f1c3 0307 	rsb	r3, r3, #7
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	bf28      	it	cs
 8009e5e:	2304      	movcs	r3, #4
 8009e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	3304      	adds	r3, #4
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	d902      	bls.n	8009e70 <NVIC_EncodePriority+0x30>
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	3b03      	subs	r3, #3
 8009e6e:	e000      	b.n	8009e72 <NVIC_EncodePriority+0x32>
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7e:	43da      	mvns	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	401a      	ands	r2, r3
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e92:	43d9      	mvns	r1, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e98:	4313      	orrs	r3, r2
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3724      	adds	r7, #36	; 0x24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <SysTick_Config>:
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eb8:	d301      	bcc.n	8009ebe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e00f      	b.n	8009ede <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ebe:	4a0a      	ldr	r2, [pc, #40]	; (8009ee8 <SysTick_Config+0x40>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ec6:	210f      	movs	r1, #15
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ecc:	f7ff ff8e 	bl	8009dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <SysTick_Config+0x40>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009ed6:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <SysTick_Config+0x40>)
 8009ed8:	2207      	movs	r2, #7
 8009eda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	e000e010 	.word	0xe000e010

08009eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ff29 	bl	8009d4c <__NVIC_SetPriorityGrouping>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b086      	sub	sp, #24
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	4603      	mov	r3, r0
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
 8009f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009f10:	f7ff ff40 	bl	8009d94 <__NVIC_GetPriorityGrouping>
 8009f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	6978      	ldr	r0, [r7, #20]
 8009f1c:	f7ff ff90 	bl	8009e40 <NVIC_EncodePriority>
 8009f20:	4602      	mov	r2, r0
 8009f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff ff5f 	bl	8009dec <__NVIC_SetPriority>
}
 8009f2e:	bf00      	nop
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff ff33 	bl	8009db0 <__NVIC_EnableIRQ>
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff ffa4 	bl	8009ea8 <SysTick_Config>
 8009f60:	4603      	mov	r3, r0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e014      	b.n	8009fa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	791b      	ldrb	r3, [r3, #4]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7fc fff7 	bl	8006f80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	795b      	ldrb	r3, [r3, #5]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_DAC_Start+0x16>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e043      	b.n	800a04c <HAL_DAC_Start+0x9e>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2201      	movs	r2, #1
 8009fde:	409a      	lsls	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009fe8:	2001      	movs	r0, #1
 8009fea:	f7fe fb4d 	bl	8008688 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10f      	bne.n	800a014 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d11d      	bne.n	800a03e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0201 	orr.w	r2, r2, #1
 800a010:	605a      	str	r2, [r3, #4]
 800a012:	e014      	b.n	800a03e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2102      	movs	r1, #2
 800a026:	fa01 f303 	lsl.w	r3, r1, r3
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d107      	bne.n	800a03e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0202 	orr.w	r2, r2, #2
 800a03c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	795b      	ldrb	r3, [r3, #5]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_DAC_Start_DMA+0x1e>
 800a06e:	2302      	movs	r3, #2
 800a070:	e0a1      	b.n	800a1b6 <HAL_DAC_Start_DMA+0x162>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2202      	movs	r2, #2
 800a07c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d12a      	bne.n	800a0da <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	4a4d      	ldr	r2, [pc, #308]	; (800a1c0 <HAL_DAC_Start_DMA+0x16c>)
 800a08a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	4a4c      	ldr	r2, [pc, #304]	; (800a1c4 <HAL_DAC_Start_DMA+0x170>)
 800a092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	4a4b      	ldr	r2, [pc, #300]	; (800a1c8 <HAL_DAC_Start_DMA+0x174>)
 800a09a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0aa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d009      	beq.n	800a0c6 <HAL_DAC_Start_DMA+0x72>
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d00c      	beq.n	800a0d0 <HAL_DAC_Start_DMA+0x7c>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d000      	beq.n	800a0bc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a0ba:	e039      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	613b      	str	r3, [r7, #16]
        break;
 800a0c4:	e034      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	613b      	str	r3, [r7, #16]
        break;
 800a0ce:	e02f      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3310      	adds	r3, #16
 800a0d6:	613b      	str	r3, [r7, #16]
        break;
 800a0d8:	e02a      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	4a3b      	ldr	r2, [pc, #236]	; (800a1cc <HAL_DAC_Start_DMA+0x178>)
 800a0e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	4a3a      	ldr	r2, [pc, #232]	; (800a1d0 <HAL_DAC_Start_DMA+0x17c>)
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	4a39      	ldr	r2, [pc, #228]	; (800a1d4 <HAL_DAC_Start_DMA+0x180>)
 800a0f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a100:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	2b04      	cmp	r3, #4
 800a106:	d009      	beq.n	800a11c <HAL_DAC_Start_DMA+0xc8>
 800a108:	2b08      	cmp	r3, #8
 800a10a:	d00c      	beq.n	800a126 <HAL_DAC_Start_DMA+0xd2>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d000      	beq.n	800a112 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a110:	e00e      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3314      	adds	r3, #20
 800a118:	613b      	str	r3, [r7, #16]
        break;
 800a11a:	e009      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3318      	adds	r3, #24
 800a122:	613b      	str	r3, [r7, #16]
        break;
 800a124:	e004      	b.n	800a130 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	331c      	adds	r3, #28
 800a12c:	613b      	str	r3, [r7, #16]
        break;
 800a12e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d111      	bne.n	800a15a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a144:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6898      	ldr	r0, [r3, #8]
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	f000 fbd2 	bl	800a8f8 <HAL_DMA_Start_IT>
 800a154:	4603      	mov	r3, r0
 800a156:	75fb      	strb	r3, [r7, #23]
 800a158:	e010      	b.n	800a17c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a168:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68d8      	ldr	r0, [r3, #12]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	f000 fbc0 	bl	800a8f8 <HAL_DMA_Start_IT>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10f      	bne.n	800a1a8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6819      	ldr	r1, [r3, #0]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2201      	movs	r2, #1
 800a196:	409a      	lsls	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	f7fe fa71 	bl	8008688 <HAL_Delay>
 800a1a6:	e005      	b.n	800a1b4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	f043 0204 	orr.w	r2, r3, #4
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	0800a695 	.word	0x0800a695
 800a1c4:	0800a6b7 	.word	0x0800a6b7
 800a1c8:	0800a6d3 	.word	0x0800a6d3
 800a1cc:	0800a73d 	.word	0x0800a73d
 800a1d0:	0800a75f 	.word	0x0800a75f
 800a1d4:	0800a77b 	.word	0x0800a77b

0800a1d8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6819      	ldr	r1, [r3, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f003 0310 	and.w	r3, r3, #16
 800a1ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	43da      	mvns	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	400a      	ands	r2, r1
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2201      	movs	r2, #1
 800a20e:	fa02 f303 	lsl.w	r3, r2, r3
 800a212:	43da      	mvns	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	400a      	ands	r2, r1
 800a21a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a21c:	2001      	movs	r0, #1
 800a21e:	f7fe fa33 	bl	8008688 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10f      	bne.n	800a248 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fbde 	bl	800a9ee <HAL_DMA_Abort>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	e00e      	b.n	800a266 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fbce 	bl	800a9ee <HAL_DMA_Abort>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a264:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2204      	movs	r2, #4
 800a270:	711a      	strb	r2, [r3, #4]
 800a272:	e002      	b.n	800a27a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d105      	bne.n	800a2b4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	617b      	str	r3, [r7, #20]
 800a2b2:	e004      	b.n	800a2be <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3314      	adds	r3, #20
 800a2bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d103      	bne.n	800a328 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	e002      	b.n	800a32e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
	...

0800a33c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	; 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	795b      	ldrb	r3, [r3, #5]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_DAC_ConfigChannel+0x1c>
 800a354:	2302      	movs	r3, #2
 800a356:	e194      	b.n	800a682 <HAL_DAC_ConfigChannel+0x346>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2202      	movs	r2, #2
 800a362:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d174      	bne.n	800a456 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d137      	bne.n	800a3e2 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a372:	f7fe f97d 	bl	8008670 <HAL_GetTick>
 800a376:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a378:	e011      	b.n	800a39e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a37a:	f7fe f979 	bl	8008670 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d90a      	bls.n	800a39e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	f043 0208 	orr.w	r2, r3, #8
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2203      	movs	r2, #3
 800a398:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e171      	b.n	800a682 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e6      	bne.n	800a37a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	f7fe f96b 	bl	8008688 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3ba:	641a      	str	r2, [r3, #64]	; 0x40
 800a3bc:	e01e      	b.n	800a3fc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a3be:	f7fe f957 	bl	8008670 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d90a      	bls.n	800a3e2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	f043 0208 	orr.w	r2, r3, #8
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e14f      	b.n	800a682 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dbe8      	blt.n	800a3be <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	f7fe f94b 	bl	8008688 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a40c:	fa01 f303 	lsl.w	r3, r1, r3
 800a410:	43db      	mvns	r3, r3
 800a412:	ea02 0103 	and.w	r1, r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	409a      	lsls	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f003 0310 	and.w	r3, r3, #16
 800a436:	21ff      	movs	r1, #255	; 0xff
 800a438:	fa01 f303 	lsl.w	r3, r1, r3
 800a43c:	43db      	mvns	r3, r3
 800a43e:	ea02 0103 	and.w	r1, r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	409a      	lsls	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d11d      	bne.n	800a49a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	221f      	movs	r2, #31
 800a46e:	fa02 f303 	lsl.w	r3, r2, r3
 800a472:	43db      	mvns	r3, r3
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	4013      	ands	r3, r2
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f003 0310 	and.w	r3, r3, #16
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48e:	4313      	orrs	r3, r2
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a498:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ae:	43db      	mvns	r3, r3
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	e011      	b.n	800a4ec <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	623b      	str	r3, [r7, #32]
 800a4d8:	e008      	b.n	800a4ec <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	623b      	str	r3, [r7, #32]
 800a4e6:	e001      	b.n	800a4ec <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	6a3a      	ldr	r2, [r7, #32]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a506:	fa02 f303 	lsl.w	r3, r2, r3
 800a50a:	43db      	mvns	r3, r3
 800a50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50e:	4013      	ands	r3, r2
 800a510:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	791b      	ldrb	r3, [r3, #4]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d102      	bne.n	800a520 <HAL_DAC_ConfigChannel+0x1e4>
 800a51a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a51e:	e000      	b.n	800a522 <HAL_DAC_ConfigChannel+0x1e6>
 800a520:	2300      	movs	r3, #0
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	4313      	orrs	r3, r2
 800a526:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f003 0310 	and.w	r3, r3, #16
 800a52e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	43db      	mvns	r3, r3
 800a538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a53a:	4013      	ands	r3, r2
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	795b      	ldrb	r3, [r3, #5]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d102      	bne.n	800a54c <HAL_DAC_ConfigChannel+0x210>
 800a546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54a:	e000      	b.n	800a54e <HAL_DAC_ConfigChannel+0x212>
 800a54c:	2300      	movs	r3, #0
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	4313      	orrs	r3, r2
 800a552:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d114      	bne.n	800a58e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a564:	f001 fae0 	bl	800bb28 <HAL_RCC_GetHCLKFreq>
 800a568:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	4a47      	ldr	r2, [pc, #284]	; (800a68c <HAL_DAC_ConfigChannel+0x350>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d904      	bls.n	800a57c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
 800a57a:	e00d      	b.n	800a598 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	4a44      	ldr	r2, [pc, #272]	; (800a690 <HAL_DAC_ConfigChannel+0x354>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d909      	bls.n	800a598 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
 800a58c:	e004      	b.n	800a598 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a594:	4313      	orrs	r3, r2
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6819      	ldr	r1, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f003 0310 	and.w	r3, r3, #16
 800a5be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	43da      	mvns	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	400a      	ands	r2, r1
 800a5ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f003 0310 	and.w	r3, r3, #16
 800a5de:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e6:	43db      	mvns	r3, r3
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f003 0310 	and.w	r3, r3, #16
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a602:	4313      	orrs	r3, r2
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6819      	ldr	r1, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	22c0      	movs	r2, #192	; 0xc0
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	43da      	mvns	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	400a      	ands	r2, r1
 800a628:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	089b      	lsrs	r3, r3, #2
 800a630:	f003 030f 	and.w	r3, r3, #15
 800a634:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	089b      	lsrs	r3, r3, #2
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	4313      	orrs	r3, r2
 800a646:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a658:	fa01 f303 	lsl.w	r3, r1, r3
 800a65c:	43db      	mvns	r3, r3
 800a65e:	ea02 0103 	and.w	r1, r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	409a      	lsls	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	430a      	orrs	r2, r1
 800a672:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3728      	adds	r7, #40	; 0x28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	09896800 	.word	0x09896800
 800a690:	04c4b400 	.word	0x04c4b400

0800a694 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff fe16 	bl	800a2d4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	711a      	strb	r2, [r3, #4]
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f7ff fe0f 	bl	800a2e8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	f043 0204 	orr.w	r2, r3, #4
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7ff fe05 	bl	800a2fc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	711a      	strb	r2, [r3, #4]
}
 800a6f8:	bf00      	nop
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff ffd8 	bl	800a700 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	711a      	strb	r2, [r3, #4]
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff ffd1 	bl	800a714 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f043 0204 	orr.w	r2, r3, #4
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff ffc7 	bl	800a728 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2201      	movs	r2, #1
 800a79e:	711a      	strb	r2, [r3, #4]
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e08d      	b.n	800a8d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4b47      	ldr	r3, [pc, #284]	; (800a8e0 <HAL_DMA_Init+0x138>)
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d80f      	bhi.n	800a7e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4b45      	ldr	r3, [pc, #276]	; (800a8e4 <HAL_DMA_Init+0x13c>)
 800a7ce:	4413      	add	r3, r2
 800a7d0:	4a45      	ldr	r2, [pc, #276]	; (800a8e8 <HAL_DMA_Init+0x140>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	091b      	lsrs	r3, r3, #4
 800a7d8:	009a      	lsls	r2, r3, #2
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a42      	ldr	r2, [pc, #264]	; (800a8ec <HAL_DMA_Init+0x144>)
 800a7e2:	641a      	str	r2, [r3, #64]	; 0x40
 800a7e4:	e00e      	b.n	800a804 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4b40      	ldr	r3, [pc, #256]	; (800a8f0 <HAL_DMA_Init+0x148>)
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4a3d      	ldr	r2, [pc, #244]	; (800a8e8 <HAL_DMA_Init+0x140>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	091b      	lsrs	r3, r3, #4
 800a7f8:	009a      	lsls	r2, r3, #2
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a3c      	ldr	r2, [pc, #240]	; (800a8f4 <HAL_DMA_Init+0x14c>)
 800a802:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa10 	bl	800ac7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a864:	d102      	bne.n	800a86c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a880:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d010      	beq.n	800a8ac <HAL_DMA_Init+0x104>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d80c      	bhi.n	800a8ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa30 	bl	800acf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8a8:	605a      	str	r2, [r3, #4]
 800a8aa:	e008      	b.n	800a8be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40020407 	.word	0x40020407
 800a8e4:	bffdfff8 	.word	0xbffdfff8
 800a8e8:	cccccccd 	.word	0xcccccccd
 800a8ec:	40020000 	.word	0x40020000
 800a8f0:	bffdfbf8 	.word	0xbffdfbf8
 800a8f4:	40020400 	.word	0x40020400

0800a8f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_DMA_Start_IT+0x20>
 800a914:	2302      	movs	r3, #2
 800a916:	e066      	b.n	800a9e6 <HAL_DMA_Start_IT+0xee>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d155      	bne.n	800a9d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 f954 	bl	800abfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d008      	beq.n	800a970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 020e 	orr.w	r2, r2, #14
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e00f      	b.n	800a990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f022 0204 	bic.w	r2, r2, #4
 800a97e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f042 020a 	orr.w	r2, r2, #10
 800a98e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d007      	beq.n	800a9ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f042 0201 	orr.w	r2, r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	e005      	b.n	800a9e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d005      	beq.n	800aa12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2204      	movs	r2, #4
 800aa0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	73fb      	strb	r3, [r7, #15]
 800aa10:	e037      	b.n	800aa82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f022 020e 	bic.w	r2, r2, #14
 800aa20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 0201 	bic.w	r2, r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa46:	f003 021f 	and.w	r2, r3, #31
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	2101      	movs	r1, #1
 800aa50:	fa01 f202 	lsl.w	r2, r1, r2
 800aa54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00c      	beq.n	800aa82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabc:	f003 031f 	and.w	r3, r3, #31
 800aac0:	2204      	movs	r2, #4
 800aac2:	409a      	lsls	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4013      	ands	r3, r2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d026      	beq.n	800ab1a <HAL_DMA_IRQHandler+0x7a>
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d021      	beq.n	800ab1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d107      	bne.n	800aaf4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0204 	bic.w	r2, r2, #4
 800aaf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf8:	f003 021f 	and.w	r2, r3, #31
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab00:	2104      	movs	r1, #4
 800ab02:	fa01 f202 	lsl.w	r2, r1, r2
 800ab06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d071      	beq.n	800abf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ab18:	e06c      	b.n	800abf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1e:	f003 031f 	and.w	r3, r3, #31
 800ab22:	2202      	movs	r2, #2
 800ab24:	409a      	lsls	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	4013      	ands	r3, r2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d02e      	beq.n	800ab8c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d029      	beq.n	800ab8c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10b      	bne.n	800ab5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 020a 	bic.w	r2, r2, #10
 800ab54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab62:	f003 021f 	and.w	r2, r3, #31
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	2102      	movs	r1, #2
 800ab6c:	fa01 f202 	lsl.w	r2, r1, r2
 800ab70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d038      	beq.n	800abf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ab8a:	e033      	b.n	800abf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	2208      	movs	r2, #8
 800ab96:	409a      	lsls	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d02a      	beq.n	800abf6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f003 0308 	and.w	r3, r3, #8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d025      	beq.n	800abf6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 020e 	bic.w	r2, r2, #14
 800abb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbe:	f003 021f 	and.w	r2, r3, #31
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	2101      	movs	r1, #1
 800abc8:	fa01 f202 	lsl.w	r2, r1, r2
 800abcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
}
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b085      	sub	sp, #20
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac14:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ac26:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2c:	f003 021f 	and.w	r2, r3, #31
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2101      	movs	r1, #1
 800ac36:	fa01 f202 	lsl.w	r2, r1, r2
 800ac3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	2b10      	cmp	r3, #16
 800ac4a:	d108      	bne.n	800ac5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ac5c:	e007      	b.n	800ac6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	60da      	str	r2, [r3, #12]
}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
	...

0800ac7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d802      	bhi.n	800ac96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ac90:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e001      	b.n	800ac9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ac96:	4b15      	ldr	r3, [pc, #84]	; (800acec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ac98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	3b08      	subs	r3, #8
 800aca6:	4a12      	ldr	r2, [pc, #72]	; (800acf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aca8:	fba2 2303 	umull	r2, r3, r2, r3
 800acac:	091b      	lsrs	r3, r3, #4
 800acae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb4:	089b      	lsrs	r3, r3, #2
 800acb6:	009a      	lsls	r2, r3, #2
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	4413      	add	r3, r2
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a0b      	ldr	r2, [pc, #44]	; (800acf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800acc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f003 031f 	and.w	r3, r3, #31
 800acce:	2201      	movs	r2, #1
 800acd0:	409a      	lsls	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800acd6:	bf00      	nop
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	40020407 	.word	0x40020407
 800ace8:	40020800 	.word	0x40020800
 800acec:	40020820 	.word	0x40020820
 800acf0:	cccccccd 	.word	0xcccccccd
 800acf4:	40020880 	.word	0x40020880

0800acf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4b0b      	ldr	r3, [pc, #44]	; (800ad38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	461a      	mov	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a08      	ldr	r2, [pc, #32]	; (800ad3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ad1a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	f003 031f 	and.w	r3, r3, #31
 800ad24:	2201      	movs	r2, #1
 800ad26:	409a      	lsls	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	1000823f 	.word	0x1000823f
 800ad3c:	40020940 	.word	0x40020940

0800ad40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ad4e:	e15a      	b.n	800b006 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	2101      	movs	r1, #1
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 814c 	beq.w	800b000 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d00b      	beq.n	800ad88 <HAL_GPIO_Init+0x48>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d007      	beq.n	800ad88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad7c:	2b11      	cmp	r3, #17
 800ad7e:	d003      	beq.n	800ad88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2b12      	cmp	r3, #18
 800ad86:	d130      	bne.n	800adea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	2203      	movs	r2, #3
 800ad94:	fa02 f303 	lsl.w	r3, r2, r3
 800ad98:	43db      	mvns	r3, r3
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	fa02 f303 	lsl.w	r3, r2, r3
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adbe:	2201      	movs	r2, #1
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	fa02 f303 	lsl.w	r3, r2, r3
 800adc6:	43db      	mvns	r3, r3
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	4013      	ands	r3, r2
 800adcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	091b      	lsrs	r3, r3, #4
 800add4:	f003 0201 	and.w	r2, r3, #1
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	fa02 f303 	lsl.w	r3, r2, r3
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	2203      	movs	r2, #3
 800adf6:	fa02 f303 	lsl.w	r3, r2, r3
 800adfa:	43db      	mvns	r3, r3
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	4013      	ands	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d003      	beq.n	800ae2a <HAL_GPIO_Init+0xea>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b12      	cmp	r3, #18
 800ae28:	d123      	bne.n	800ae72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	08da      	lsrs	r2, r3, #3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3208      	adds	r2, #8
 800ae32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	220f      	movs	r2, #15
 800ae42:	fa02 f303 	lsl.w	r3, r2, r3
 800ae46:	43db      	mvns	r3, r3
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	691a      	ldr	r2, [r3, #16]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	08da      	lsrs	r2, r3, #3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3208      	adds	r2, #8
 800ae6c:	6939      	ldr	r1, [r7, #16]
 800ae6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae82:	43db      	mvns	r3, r3
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	4013      	ands	r3, r2
 800ae88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f003 0203 	and.w	r2, r3, #3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80a6 	beq.w	800b000 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aeb4:	4b5b      	ldr	r3, [pc, #364]	; (800b024 <HAL_GPIO_Init+0x2e4>)
 800aeb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb8:	4a5a      	ldr	r2, [pc, #360]	; (800b024 <HAL_GPIO_Init+0x2e4>)
 800aeba:	f043 0301 	orr.w	r3, r3, #1
 800aebe:	6613      	str	r3, [r2, #96]	; 0x60
 800aec0:	4b58      	ldr	r3, [pc, #352]	; (800b024 <HAL_GPIO_Init+0x2e4>)
 800aec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	60bb      	str	r3, [r7, #8]
 800aeca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aecc:	4a56      	ldr	r2, [pc, #344]	; (800b028 <HAL_GPIO_Init+0x2e8>)
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	089b      	lsrs	r3, r3, #2
 800aed2:	3302      	adds	r3, #2
 800aed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	220f      	movs	r2, #15
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	43db      	mvns	r3, r3
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	4013      	ands	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800aef6:	d01f      	beq.n	800af38 <HAL_GPIO_Init+0x1f8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a4c      	ldr	r2, [pc, #304]	; (800b02c <HAL_GPIO_Init+0x2ec>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d019      	beq.n	800af34 <HAL_GPIO_Init+0x1f4>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a4b      	ldr	r2, [pc, #300]	; (800b030 <HAL_GPIO_Init+0x2f0>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d013      	beq.n	800af30 <HAL_GPIO_Init+0x1f0>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a4a      	ldr	r2, [pc, #296]	; (800b034 <HAL_GPIO_Init+0x2f4>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00d      	beq.n	800af2c <HAL_GPIO_Init+0x1ec>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a49      	ldr	r2, [pc, #292]	; (800b038 <HAL_GPIO_Init+0x2f8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d007      	beq.n	800af28 <HAL_GPIO_Init+0x1e8>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a48      	ldr	r2, [pc, #288]	; (800b03c <HAL_GPIO_Init+0x2fc>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d101      	bne.n	800af24 <HAL_GPIO_Init+0x1e4>
 800af20:	2305      	movs	r3, #5
 800af22:	e00a      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af24:	2306      	movs	r3, #6
 800af26:	e008      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af28:	2304      	movs	r3, #4
 800af2a:	e006      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af2c:	2303      	movs	r3, #3
 800af2e:	e004      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af30:	2302      	movs	r3, #2
 800af32:	e002      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <HAL_GPIO_Init+0x1fa>
 800af38:	2300      	movs	r3, #0
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	f002 0203 	and.w	r2, r2, #3
 800af40:	0092      	lsls	r2, r2, #2
 800af42:	4093      	lsls	r3, r2
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af4a:	4937      	ldr	r1, [pc, #220]	; (800b028 <HAL_GPIO_Init+0x2e8>)
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	089b      	lsrs	r3, r3, #2
 800af50:	3302      	adds	r3, #2
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800af58:	4b39      	ldr	r3, [pc, #228]	; (800b040 <HAL_GPIO_Init+0x300>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	43db      	mvns	r3, r3
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	4013      	ands	r3, r2
 800af66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d003      	beq.n	800af7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4313      	orrs	r3, r2
 800af7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800af7c:	4a30      	ldr	r2, [pc, #192]	; (800b040 <HAL_GPIO_Init+0x300>)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800af82:	4b2f      	ldr	r3, [pc, #188]	; (800b040 <HAL_GPIO_Init+0x300>)
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	43db      	mvns	r3, r3
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	4013      	ands	r3, r2
 800af90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800afa6:	4a26      	ldr	r2, [pc, #152]	; (800b040 <HAL_GPIO_Init+0x300>)
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800afac:	4b24      	ldr	r3, [pc, #144]	; (800b040 <HAL_GPIO_Init+0x300>)
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	43db      	mvns	r3, r3
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4013      	ands	r3, r2
 800afba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800afd0:	4a1b      	ldr	r2, [pc, #108]	; (800b040 <HAL_GPIO_Init+0x300>)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800afd6:	4b1a      	ldr	r3, [pc, #104]	; (800b040 <HAL_GPIO_Init+0x300>)
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	43db      	mvns	r3, r3
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	4013      	ands	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800affa:	4a11      	ldr	r2, [pc, #68]	; (800b040 <HAL_GPIO_Init+0x300>)
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3301      	adds	r3, #1
 800b004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	fa22 f303 	lsr.w	r3, r2, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	f47f ae9d 	bne.w	800ad50 <HAL_GPIO_Init+0x10>
  }
}
 800b016:	bf00      	nop
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	40021000 	.word	0x40021000
 800b028:	40010000 	.word	0x40010000
 800b02c:	48000400 	.word	0x48000400
 800b030:	48000800 	.word	0x48000800
 800b034:	48000c00 	.word	0x48000c00
 800b038:	48001000 	.word	0x48001000
 800b03c:	48001400 	.word	0x48001400
 800b040:	40010400 	.word	0x40010400

0800b044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	807b      	strh	r3, [r7, #2]
 800b050:	4613      	mov	r3, r2
 800b052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b054:	787b      	ldrb	r3, [r7, #1]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b05a:	887a      	ldrh	r2, [r7, #2]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b060:	e002      	b.n	800b068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b062:	887a      	ldrh	r2, [r7, #2]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d141      	bne.n	800b106 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b082:	4b4b      	ldr	r3, [pc, #300]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b08e:	d131      	bne.n	800b0f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b090:	4b47      	ldr	r3, [pc, #284]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b096:	4a46      	ldr	r2, [pc, #280]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b09c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0a0:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0a8:	4a41      	ldr	r2, [pc, #260]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0b0:	4b40      	ldr	r3, [pc, #256]	; (800b1b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2232      	movs	r2, #50	; 0x32
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	4a3f      	ldr	r2, [pc, #252]	; (800b1b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c0:	0c9b      	lsrs	r3, r3, #18
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0c6:	e002      	b.n	800b0ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0ce:	4b38      	ldr	r3, [pc, #224]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0da:	d102      	bne.n	800b0e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f2      	bne.n	800b0c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b0e2:	4b33      	ldr	r3, [pc, #204]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ee:	d158      	bne.n	800b1a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e057      	b.n	800b1a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0f4:	4b2e      	ldr	r3, [pc, #184]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0fa:	4a2d      	ldr	r2, [pc, #180]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b104:	e04d      	b.n	800b1a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b10c:	d141      	bne.n	800b192 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b10e:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b11a:	d131      	bne.n	800b180 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b11c:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b122:	4a23      	ldr	r2, [pc, #140]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b12c:	4b20      	ldr	r3, [pc, #128]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b134:	4a1e      	ldr	r2, [pc, #120]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b13a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b13c:	4b1d      	ldr	r3, [pc, #116]	; (800b1b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2232      	movs	r2, #50	; 0x32
 800b142:	fb02 f303 	mul.w	r3, r2, r3
 800b146:	4a1c      	ldr	r2, [pc, #112]	; (800b1b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b148:	fba2 2303 	umull	r2, r3, r2, r3
 800b14c:	0c9b      	lsrs	r3, r3, #18
 800b14e:	3301      	adds	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b152:	e002      	b.n	800b15a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3b01      	subs	r3, #1
 800b158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b15a:	4b15      	ldr	r3, [pc, #84]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b166:	d102      	bne.n	800b16e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f2      	bne.n	800b154 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b16e:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17a:	d112      	bne.n	800b1a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e011      	b.n	800b1a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b186:	4a0a      	ldr	r2, [pc, #40]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b18c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b190:	e007      	b.n	800b1a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b192:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b19a:	4a05      	ldr	r2, [pc, #20]	; (800b1b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b19c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	40007000 	.word	0x40007000
 800b1b4:	20000ca0 	.word	0x20000ca0
 800b1b8:	431bde83 	.word	0x431bde83

0800b1bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e308      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d075      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1da:	4ba3      	ldr	r3, [pc, #652]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f003 030c 	and.w	r3, r3, #12
 800b1e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1e4:	4ba0      	ldr	r3, [pc, #640]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0303 	and.w	r3, r3, #3
 800b1ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	2b0c      	cmp	r3, #12
 800b1f2:	d102      	bne.n	800b1fa <HAL_RCC_OscConfig+0x3e>
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d002      	beq.n	800b200 <HAL_RCC_OscConfig+0x44>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d10b      	bne.n	800b218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b200:	4b99      	ldr	r3, [pc, #612]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d05b      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x108>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d157      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e2e3      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b220:	d106      	bne.n	800b230 <HAL_RCC_OscConfig+0x74>
 800b222:	4b91      	ldr	r3, [pc, #580]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a90      	ldr	r2, [pc, #576]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	e01d      	b.n	800b26c <HAL_RCC_OscConfig+0xb0>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b238:	d10c      	bne.n	800b254 <HAL_RCC_OscConfig+0x98>
 800b23a:	4b8b      	ldr	r3, [pc, #556]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a8a      	ldr	r2, [pc, #552]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	4b88      	ldr	r3, [pc, #544]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a87      	ldr	r2, [pc, #540]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e00b      	b.n	800b26c <HAL_RCC_OscConfig+0xb0>
 800b254:	4b84      	ldr	r3, [pc, #528]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a83      	ldr	r2, [pc, #524]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b25a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	4b81      	ldr	r3, [pc, #516]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a80      	ldr	r2, [pc, #512]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b26a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d013      	beq.n	800b29c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7fd f9fc 	bl	8008670 <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b27c:	f7fd f9f8 	bl	8008670 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b64      	cmp	r3, #100	; 0x64
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e2a8      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b28e:	4b76      	ldr	r3, [pc, #472]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0f0      	beq.n	800b27c <HAL_RCC_OscConfig+0xc0>
 800b29a:	e014      	b.n	800b2c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29c:	f7fd f9e8 	bl	8008670 <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2a4:	f7fd f9e4 	bl	8008670 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b64      	cmp	r3, #100	; 0x64
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e294      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2b6:	4b6c      	ldr	r3, [pc, #432]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f0      	bne.n	800b2a4 <HAL_RCC_OscConfig+0xe8>
 800b2c2:	e000      	b.n	800b2c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d075      	beq.n	800b3be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2d2:	4b65      	ldr	r3, [pc, #404]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f003 030c 	and.w	r3, r3, #12
 800b2da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2dc:	4b62      	ldr	r3, [pc, #392]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2b0c      	cmp	r3, #12
 800b2ea:	d102      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x136>
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d002      	beq.n	800b2f8 <HAL_RCC_OscConfig+0x13c>
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d11f      	bne.n	800b338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2f8:	4b5b      	ldr	r3, [pc, #364]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <HAL_RCC_OscConfig+0x154>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e267      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b310:	4b55      	ldr	r3, [pc, #340]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	061b      	lsls	r3, r3, #24
 800b31e:	4952      	ldr	r1, [pc, #328]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b320:	4313      	orrs	r3, r2
 800b322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b324:	4b51      	ldr	r3, [pc, #324]	; (800b46c <HAL_RCC_OscConfig+0x2b0>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fd f955 	bl	80085d8 <HAL_InitTick>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d043      	beq.n	800b3bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e253      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d023      	beq.n	800b388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b340:	4b49      	ldr	r3, [pc, #292]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a48      	ldr	r2, [pc, #288]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b34c:	f7fd f990 	bl	8008670 <HAL_GetTick>
 800b350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b352:	e008      	b.n	800b366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b354:	f7fd f98c 	bl	8008670 <HAL_GetTick>
 800b358:	4602      	mov	r2, r0
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d901      	bls.n	800b366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e23c      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b366:	4b40      	ldr	r3, [pc, #256]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0f0      	beq.n	800b354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b372:	4b3d      	ldr	r3, [pc, #244]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	061b      	lsls	r3, r3, #24
 800b380:	4939      	ldr	r1, [pc, #228]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b382:	4313      	orrs	r3, r2
 800b384:	604b      	str	r3, [r1, #4]
 800b386:	e01a      	b.n	800b3be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b388:	4b37      	ldr	r3, [pc, #220]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a36      	ldr	r2, [pc, #216]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b38e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b394:	f7fd f96c 	bl	8008670 <HAL_GetTick>
 800b398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b39a:	e008      	b.n	800b3ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b39c:	f7fd f968 	bl	8008670 <HAL_GetTick>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d901      	bls.n	800b3ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e218      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3ae:	4b2e      	ldr	r3, [pc, #184]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1f0      	bne.n	800b39c <HAL_RCC_OscConfig+0x1e0>
 800b3ba:	e000      	b.n	800b3be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0308 	and.w	r3, r3, #8
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d03c      	beq.n	800b444 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d01c      	beq.n	800b40c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3d2:	4b25      	ldr	r3, [pc, #148]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3d8:	4a23      	ldr	r2, [pc, #140]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b3da:	f043 0301 	orr.w	r3, r3, #1
 800b3de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e2:	f7fd f945 	bl	8008670 <HAL_GetTick>
 800b3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3e8:	e008      	b.n	800b3fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3ea:	f7fd f941 	bl	8008670 <HAL_GetTick>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d901      	bls.n	800b3fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e1f1      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b402:	f003 0302 	and.w	r3, r3, #2
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0ef      	beq.n	800b3ea <HAL_RCC_OscConfig+0x22e>
 800b40a:	e01b      	b.n	800b444 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b40c:	4b16      	ldr	r3, [pc, #88]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b412:	4a15      	ldr	r2, [pc, #84]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b414:	f023 0301 	bic.w	r3, r3, #1
 800b418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b41c:	f7fd f928 	bl	8008670 <HAL_GetTick>
 800b420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b422:	e008      	b.n	800b436 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b424:	f7fd f924 	bl	8008670 <HAL_GetTick>
 800b428:	4602      	mov	r2, r0
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d901      	bls.n	800b436 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e1d4      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b436:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1ef      	bne.n	800b424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 80ab 	beq.w	800b5a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b452:	2300      	movs	r3, #0
 800b454:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b456:	4b04      	ldr	r3, [pc, #16]	; (800b468 <HAL_RCC_OscConfig+0x2ac>)
 800b458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <HAL_RCC_OscConfig+0x2b4>
 800b462:	2301      	movs	r3, #1
 800b464:	e005      	b.n	800b472 <HAL_RCC_OscConfig+0x2b6>
 800b466:	bf00      	nop
 800b468:	40021000 	.word	0x40021000
 800b46c:	20000ca4 	.word	0x20000ca4
 800b470:	2300      	movs	r3, #0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00d      	beq.n	800b492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b476:	4baf      	ldr	r3, [pc, #700]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47a:	4aae      	ldr	r2, [pc, #696]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b480:	6593      	str	r3, [r2, #88]	; 0x58
 800b482:	4bac      	ldr	r3, [pc, #688]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b48e:	2301      	movs	r3, #1
 800b490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b492:	4ba9      	ldr	r3, [pc, #676]	; (800b738 <HAL_RCC_OscConfig+0x57c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d118      	bne.n	800b4d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b49e:	4ba6      	ldr	r3, [pc, #664]	; (800b738 <HAL_RCC_OscConfig+0x57c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4aa5      	ldr	r2, [pc, #660]	; (800b738 <HAL_RCC_OscConfig+0x57c>)
 800b4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4aa:	f7fd f8e1 	bl	8008670 <HAL_GetTick>
 800b4ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4b0:	e008      	b.n	800b4c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4b2:	f7fd f8dd 	bl	8008670 <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d901      	bls.n	800b4c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e18d      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4c4:	4b9c      	ldr	r3, [pc, #624]	; (800b738 <HAL_RCC_OscConfig+0x57c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0f0      	beq.n	800b4b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d108      	bne.n	800b4ea <HAL_RCC_OscConfig+0x32e>
 800b4d8:	4b96      	ldr	r3, [pc, #600]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4de:	4a95      	ldr	r2, [pc, #596]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b4e0:	f043 0301 	orr.w	r3, r3, #1
 800b4e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4e8:	e024      	b.n	800b534 <HAL_RCC_OscConfig+0x378>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	2b05      	cmp	r3, #5
 800b4f0:	d110      	bne.n	800b514 <HAL_RCC_OscConfig+0x358>
 800b4f2:	4b90      	ldr	r3, [pc, #576]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f8:	4a8e      	ldr	r2, [pc, #568]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b4fa:	f043 0304 	orr.w	r3, r3, #4
 800b4fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b502:	4b8c      	ldr	r3, [pc, #560]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b508:	4a8a      	ldr	r2, [pc, #552]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b512:	e00f      	b.n	800b534 <HAL_RCC_OscConfig+0x378>
 800b514:	4b87      	ldr	r3, [pc, #540]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51a:	4a86      	ldr	r2, [pc, #536]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b524:	4b83      	ldr	r3, [pc, #524]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52a:	4a82      	ldr	r2, [pc, #520]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b52c:	f023 0304 	bic.w	r3, r3, #4
 800b530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d016      	beq.n	800b56a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b53c:	f7fd f898 	bl	8008670 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b542:	e00a      	b.n	800b55a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b544:	f7fd f894 	bl	8008670 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b552:	4293      	cmp	r3, r2
 800b554:	d901      	bls.n	800b55a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e142      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b55a:	4b76      	ldr	r3, [pc, #472]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0ed      	beq.n	800b544 <HAL_RCC_OscConfig+0x388>
 800b568:	e015      	b.n	800b596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b56a:	f7fd f881 	bl	8008670 <HAL_GetTick>
 800b56e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b570:	e00a      	b.n	800b588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b572:	f7fd f87d 	bl	8008670 <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b580:	4293      	cmp	r3, r2
 800b582:	d901      	bls.n	800b588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e12b      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b588:	4b6a      	ldr	r3, [pc, #424]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1ed      	bne.n	800b572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b596:	7ffb      	ldrb	r3, [r7, #31]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d105      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b59c:	4b65      	ldr	r3, [pc, #404]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	4a64      	ldr	r2, [pc, #400]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d03c      	beq.n	800b62e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01c      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b5bc:	4b5d      	ldr	r3, [pc, #372]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5c2:	4a5c      	ldr	r2, [pc, #368]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5c4:	f043 0301 	orr.w	r3, r3, #1
 800b5c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5cc:	f7fd f850 	bl	8008670 <HAL_GetTick>
 800b5d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5d4:	f7fd f84c 	bl	8008670 <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e0fc      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5e6:	4b53      	ldr	r3, [pc, #332]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0ef      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x418>
 800b5f4:	e01b      	b.n	800b62e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b5f6:	4b4f      	ldr	r3, [pc, #316]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5fc:	4a4d      	ldr	r2, [pc, #308]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b5fe:	f023 0301 	bic.w	r3, r3, #1
 800b602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b606:	f7fd f833 	bl	8008670 <HAL_GetTick>
 800b60a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b60c:	e008      	b.n	800b620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b60e:	f7fd f82f 	bl	8008670 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e0df      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b620:	4b44      	ldr	r3, [pc, #272]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1ef      	bne.n	800b60e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 80d3 	beq.w	800b7de <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b638:	4b3e      	ldr	r3, [pc, #248]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f003 030c 	and.w	r3, r3, #12
 800b640:	2b0c      	cmp	r3, #12
 800b642:	f000 808d 	beq.w	800b760 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d15a      	bne.n	800b704 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b64e:	4b39      	ldr	r3, [pc, #228]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a38      	ldr	r2, [pc, #224]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b65a:	f7fd f809 	bl	8008670 <HAL_GetTick>
 800b65e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b660:	e008      	b.n	800b674 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b662:	f7fd f805 	bl	8008670 <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d901      	bls.n	800b674 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e0b5      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b674:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f0      	bne.n	800b662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b680:	4b2c      	ldr	r3, [pc, #176]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	4b2d      	ldr	r3, [pc, #180]	; (800b73c <HAL_RCC_OscConfig+0x580>)
 800b686:	4013      	ands	r3, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6a11      	ldr	r1, [r2, #32]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b690:	3a01      	subs	r2, #1
 800b692:	0112      	lsls	r2, r2, #4
 800b694:	4311      	orrs	r1, r2
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b69a:	0212      	lsls	r2, r2, #8
 800b69c:	4311      	orrs	r1, r2
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6a2:	0852      	lsrs	r2, r2, #1
 800b6a4:	3a01      	subs	r2, #1
 800b6a6:	0552      	lsls	r2, r2, #21
 800b6a8:	4311      	orrs	r1, r2
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b6ae:	0852      	lsrs	r2, r2, #1
 800b6b0:	3a01      	subs	r2, #1
 800b6b2:	0652      	lsls	r2, r2, #25
 800b6b4:	4311      	orrs	r1, r2
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6ba:	06d2      	lsls	r2, r2, #27
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	491d      	ldr	r1, [pc, #116]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6c4:	4b1b      	ldr	r3, [pc, #108]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6d0:	4b18      	ldr	r3, [pc, #96]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	4a17      	ldr	r2, [pc, #92]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6dc:	f7fc ffc8 	bl	8008670 <HAL_GetTick>
 800b6e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6e2:	e008      	b.n	800b6f6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6e4:	f7fc ffc4 	bl	8008670 <HAL_GetTick>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e074      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0f0      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x528>
 800b702:	e06c      	b.n	800b7de <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b704:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a0a      	ldr	r2, [pc, #40]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b70a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b70e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b710:	4b08      	ldr	r3, [pc, #32]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	4a07      	ldr	r2, [pc, #28]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	4a04      	ldr	r2, [pc, #16]	; (800b734 <HAL_RCC_OscConfig+0x578>)
 800b722:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b72a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b72c:	f7fc ffa0 	bl	8008670 <HAL_GetTick>
 800b730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b732:	e00e      	b.n	800b752 <HAL_RCC_OscConfig+0x596>
 800b734:	40021000 	.word	0x40021000
 800b738:	40007000 	.word	0x40007000
 800b73c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b740:	f7fc ff96 	bl	8008670 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d901      	bls.n	800b752 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e046      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b752:	4b25      	ldr	r3, [pc, #148]	; (800b7e8 <HAL_RCC_OscConfig+0x62c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1f0      	bne.n	800b740 <HAL_RCC_OscConfig+0x584>
 800b75e:	e03e      	b.n	800b7de <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e039      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b76c:	4b1e      	ldr	r3, [pc, #120]	; (800b7e8 <HAL_RCC_OscConfig+0x62c>)
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f003 0203 	and.w	r2, r3, #3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d12c      	bne.n	800b7da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	3b01      	subs	r3, #1
 800b78c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b78e:	429a      	cmp	r2, r3
 800b790:	d123      	bne.n	800b7da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d11b      	bne.n	800b7da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d113      	bne.n	800b7da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d109      	bne.n	800b7da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d001      	beq.n	800b7de <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	40021000 	.word	0x40021000

0800b7ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e11e      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b804:	4b91      	ldr	r3, [pc, #580]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 030f 	and.w	r3, r3, #15
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d910      	bls.n	800b834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b812:	4b8e      	ldr	r3, [pc, #568]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f023 020f 	bic.w	r2, r3, #15
 800b81a:	498c      	ldr	r1, [pc, #560]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	4313      	orrs	r3, r2
 800b820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b822:	4b8a      	ldr	r3, [pc, #552]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d001      	beq.n	800b834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e106      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d073      	beq.n	800b928 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d129      	bne.n	800b89c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b848:	4b81      	ldr	r3, [pc, #516]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	e0f4      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b858:	f000 f972 	bl	800bb40 <RCC_GetSysClockFreqFromPLLSource>
 800b85c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	4a7c      	ldr	r2, [pc, #496]	; (800ba54 <HAL_RCC_ClockConfig+0x268>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d93f      	bls.n	800b8e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b866:	4b7a      	ldr	r3, [pc, #488]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d033      	beq.n	800b8e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b882:	2b00      	cmp	r3, #0
 800b884:	d12f      	bne.n	800b8e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b886:	4b72      	ldr	r3, [pc, #456]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b88e:	4a70      	ldr	r2, [pc, #448]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b896:	2380      	movs	r3, #128	; 0x80
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e024      	b.n	800b8e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d107      	bne.n	800b8b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8a4:	4b6a      	ldr	r3, [pc, #424]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d109      	bne.n	800b8c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e0c6      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8b4:	4b66      	ldr	r3, [pc, #408]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e0be      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b8c4:	f000 f8ce 	bl	800ba64 <HAL_RCC_GetSysClockFreq>
 800b8c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	4a61      	ldr	r2, [pc, #388]	; (800ba54 <HAL_RCC_ClockConfig+0x268>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d909      	bls.n	800b8e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b8d2:	4b5f      	ldr	r3, [pc, #380]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8da:	4a5d      	ldr	r2, [pc, #372]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b8e2:	2380      	movs	r3, #128	; 0x80
 800b8e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8e6:	4b5a      	ldr	r3, [pc, #360]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f023 0203 	bic.w	r2, r3, #3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	4957      	ldr	r1, [pc, #348]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8f8:	f7fc feba 	bl	8008670 <HAL_GetTick>
 800b8fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8fe:	e00a      	b.n	800b916 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b900:	f7fc feb6 	bl	8008670 <HAL_GetTick>
 800b904:	4602      	mov	r2, r0
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b90e:	4293      	cmp	r3, r2
 800b910:	d901      	bls.n	800b916 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b912:	2303      	movs	r3, #3
 800b914:	e095      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b916:	4b4e      	ldr	r3, [pc, #312]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 020c 	and.w	r2, r3, #12
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	429a      	cmp	r2, r3
 800b926:	d1eb      	bne.n	800b900 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d023      	beq.n	800b97c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d005      	beq.n	800b94c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b940:	4b43      	ldr	r3, [pc, #268]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	4a42      	ldr	r2, [pc, #264]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b94a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	2b00      	cmp	r3, #0
 800b956:	d007      	beq.n	800b968 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b958:	4b3d      	ldr	r3, [pc, #244]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b960:	4a3b      	ldr	r2, [pc, #236]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b968:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	4936      	ldr	r1, [pc, #216]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b976:	4313      	orrs	r3, r2
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	e008      	b.n	800b98e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b80      	cmp	r3, #128	; 0x80
 800b980:	d105      	bne.n	800b98e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b982:	4b33      	ldr	r3, [pc, #204]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	4a32      	ldr	r2, [pc, #200]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b98c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b98e:	4b2f      	ldr	r3, [pc, #188]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d21d      	bcs.n	800b9d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b99c:	4b2b      	ldr	r3, [pc, #172]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f023 020f 	bic.w	r2, r3, #15
 800b9a4:	4929      	ldr	r1, [pc, #164]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b9ac:	f7fc fe60 	bl	8008670 <HAL_GetTick>
 800b9b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9b2:	e00a      	b.n	800b9ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9b4:	f7fc fe5c 	bl	8008670 <HAL_GetTick>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d901      	bls.n	800b9ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e03b      	b.n	800ba42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9ca:	4b20      	ldr	r3, [pc, #128]	; (800ba4c <HAL_RCC_ClockConfig+0x260>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 030f 	and.w	r3, r3, #15
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d1ed      	bne.n	800b9b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0304 	and.w	r3, r3, #4
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d008      	beq.n	800b9f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	4917      	ldr	r1, [pc, #92]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0308 	and.w	r3, r3, #8
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba02:	4b13      	ldr	r3, [pc, #76]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	490f      	ldr	r1, [pc, #60]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800ba12:	4313      	orrs	r3, r2
 800ba14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ba16:	f000 f825 	bl	800ba64 <HAL_RCC_GetSysClockFreq>
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <HAL_RCC_ClockConfig+0x264>)
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	091b      	lsrs	r3, r3, #4
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	4a0c      	ldr	r2, [pc, #48]	; (800ba58 <HAL_RCC_ClockConfig+0x26c>)
 800ba28:	5cd3      	ldrb	r3, [r2, r3]
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	fa21 f303 	lsr.w	r3, r1, r3
 800ba32:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <HAL_RCC_ClockConfig+0x270>)
 800ba34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ba36:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <HAL_RCC_ClockConfig+0x274>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fc fdcc 	bl	80085d8 <HAL_InitTick>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	40022000 	.word	0x40022000
 800ba50:	40021000 	.word	0x40021000
 800ba54:	04c4b400 	.word	0x04c4b400
 800ba58:	08013578 	.word	0x08013578
 800ba5c:	20000ca0 	.word	0x20000ca0
 800ba60:	20000ca4 	.word	0x20000ca4

0800ba64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba6a:	4b2c      	ldr	r3, [pc, #176]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f003 030c 	and.w	r3, r3, #12
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d102      	bne.n	800ba7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba76:	4b2a      	ldr	r3, [pc, #168]	; (800bb20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	e047      	b.n	800bb0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba7c:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f003 030c 	and.w	r3, r3, #12
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d102      	bne.n	800ba8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba88:	4b26      	ldr	r3, [pc, #152]	; (800bb24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	e03e      	b.n	800bb0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ba8e:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 030c 	and.w	r3, r3, #12
 800ba96:	2b0c      	cmp	r3, #12
 800ba98:	d136      	bne.n	800bb08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba9a:	4b20      	ldr	r3, [pc, #128]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f003 0303 	and.w	r3, r3, #3
 800baa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800baa4:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	091b      	lsrs	r3, r3, #4
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	3301      	adds	r3, #1
 800bab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d10c      	bne.n	800bad2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bab8:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac0:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bac2:	68d2      	ldr	r2, [r2, #12]
 800bac4:	0a12      	lsrs	r2, r2, #8
 800bac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baca:	fb02 f303 	mul.w	r3, r2, r3
 800bace:	617b      	str	r3, [r7, #20]
      break;
 800bad0:	e00c      	b.n	800baec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bad2:	4a13      	ldr	r2, [pc, #76]	; (800bb20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bada:	4a10      	ldr	r2, [pc, #64]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800badc:	68d2      	ldr	r2, [r2, #12]
 800bade:	0a12      	lsrs	r2, r2, #8
 800bae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bae4:	fb02 f303 	mul.w	r3, r2, r3
 800bae8:	617b      	str	r3, [r7, #20]
      break;
 800baea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	0e5b      	lsrs	r3, r3, #25
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	3301      	adds	r3, #1
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e001      	b.n	800bb0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bb0c:	693b      	ldr	r3, [r7, #16]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	40021000 	.word	0x40021000
 800bb20:	00f42400 	.word	0x00f42400
 800bb24:	007a1200 	.word	0x007a1200

0800bb28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <HAL_RCC_GetHCLKFreq+0x14>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20000ca0 	.word	0x20000ca0

0800bb40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb46:	4b1e      	ldr	r3, [pc, #120]	; (800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb50:	4b1b      	ldr	r3, [pc, #108]	; (800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	091b      	lsrs	r3, r3, #4
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d10c      	bne.n	800bb7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb64:	4a17      	ldr	r2, [pc, #92]	; (800bbc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb6c:	4a14      	ldr	r2, [pc, #80]	; (800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb6e:	68d2      	ldr	r2, [r2, #12]
 800bb70:	0a12      	lsrs	r2, r2, #8
 800bb72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb76:	fb02 f303 	mul.w	r3, r2, r3
 800bb7a:	617b      	str	r3, [r7, #20]
    break;
 800bb7c:	e00c      	b.n	800bb98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb7e:	4a12      	ldr	r2, [pc, #72]	; (800bbc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb86:	4a0e      	ldr	r2, [pc, #56]	; (800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb88:	68d2      	ldr	r2, [r2, #12]
 800bb8a:	0a12      	lsrs	r2, r2, #8
 800bb8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb90:	fb02 f303 	mul.w	r3, r2, r3
 800bb94:	617b      	str	r3, [r7, #20]
    break;
 800bb96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	0e5b      	lsrs	r3, r3, #25
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	3301      	adds	r3, #1
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbb2:	687b      	ldr	r3, [r7, #4]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	007a1200 	.word	0x007a1200
 800bbc8:	00f42400 	.word	0x00f42400

0800bbcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbd8:	2300      	movs	r3, #0
 800bbda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 8098 	beq.w	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbea:	2300      	movs	r3, #0
 800bbec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbee:	4b43      	ldr	r3, [pc, #268]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10d      	bne.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbfa:	4b40      	ldr	r3, [pc, #256]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfe:	4a3f      	ldr	r2, [pc, #252]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc04:	6593      	str	r3, [r2, #88]	; 0x58
 800bc06:	4b3d      	ldr	r3, [pc, #244]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0e:	60bb      	str	r3, [r7, #8]
 800bc10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc12:	2301      	movs	r3, #1
 800bc14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc16:	4b3a      	ldr	r3, [pc, #232]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a39      	ldr	r2, [pc, #228]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc22:	f7fc fd25 	bl	8008670 <HAL_GetTick>
 800bc26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc28:	e009      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc2a:	f7fc fd21 	bl	8008670 <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d902      	bls.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	74fb      	strb	r3, [r7, #19]
        break;
 800bc3c:	e005      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc3e:	4b30      	ldr	r3, [pc, #192]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0ef      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc4a:	7cfb      	ldrb	r3, [r7, #19]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d159      	bne.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc50:	4b2a      	ldr	r3, [pc, #168]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d01e      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d019      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc6c:	4b23      	ldr	r3, [pc, #140]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc78:	4b20      	ldr	r3, [pc, #128]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7e:	4a1f      	ldr	r2, [pc, #124]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc88:	4b1c      	ldr	r3, [pc, #112]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	4a1b      	ldr	r2, [pc, #108]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc98:	4a18      	ldr	r2, [pc, #96]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d016      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcaa:	f7fc fce1 	bl	8008670 <HAL_GetTick>
 800bcae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcb0:	e00b      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcb2:	f7fc fcdd 	bl	8008670 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d902      	bls.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	74fb      	strb	r3, [r7, #19]
            break;
 800bcc8:	e006      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcca:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd0:	f003 0302 	and.w	r3, r3, #2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0ec      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bcd8:	7cfb      	ldrb	r3, [r7, #19]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10b      	bne.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcde:	4b07      	ldr	r3, [pc, #28]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcec:	4903      	ldr	r1, [pc, #12]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bcf4:	e008      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcf6:	7cfb      	ldrb	r3, [r7, #19]
 800bcf8:	74bb      	strb	r3, [r7, #18]
 800bcfa:	e005      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bcfc:	40021000 	.word	0x40021000
 800bd00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd04:	7cfb      	ldrb	r3, [r7, #19]
 800bd06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd08:	7c7b      	ldrb	r3, [r7, #17]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d105      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd0e:	4baf      	ldr	r3, [pc, #700]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd12:	4aae      	ldr	r2, [pc, #696]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd26:	4ba9      	ldr	r3, [pc, #676]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2c:	f023 0203 	bic.w	r2, r3, #3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	49a5      	ldr	r1, [pc, #660]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00a      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd48:	4ba0      	ldr	r3, [pc, #640]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd4e:	f023 020c 	bic.w	r2, r3, #12
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	499d      	ldr	r1, [pc, #628]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd6a:	4b98      	ldr	r3, [pc, #608]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	4994      	ldr	r1, [pc, #592]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00a      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd8c:	4b8f      	ldr	r3, [pc, #572]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	498c      	ldr	r1, [pc, #560]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0310 	and.w	r3, r3, #16
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdae:	4b87      	ldr	r3, [pc, #540]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	4983      	ldr	r1, [pc, #524]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0320 	and.w	r3, r3, #32
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdd0:	4b7e      	ldr	r3, [pc, #504]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	497b      	ldr	r1, [pc, #492]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdf2:	4b76      	ldr	r3, [pc, #472]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	4972      	ldr	r1, [pc, #456]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be02:	4313      	orrs	r3, r2
 800be04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be14:	4b6d      	ldr	r3, [pc, #436]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	496a      	ldr	r1, [pc, #424]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be36:	4b65      	ldr	r3, [pc, #404]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	4961      	ldr	r1, [pc, #388]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be46:	4313      	orrs	r3, r2
 800be48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be58:	4b5c      	ldr	r3, [pc, #368]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be5e:	f023 0203 	bic.w	r2, r3, #3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be66:	4959      	ldr	r1, [pc, #356]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be7a:	4b54      	ldr	r3, [pc, #336]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	4950      	ldr	r1, [pc, #320]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be8a:	4313      	orrs	r3, r2
 800be8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d015      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be9c:	4b4b      	ldr	r3, [pc, #300]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beaa:	4948      	ldr	r1, [pc, #288]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beac:	4313      	orrs	r3, r2
 800beae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800beba:	d105      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bebc:	4b43      	ldr	r3, [pc, #268]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	4a42      	ldr	r2, [pc, #264]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bec6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d015      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bed4:	4b3d      	ldr	r3, [pc, #244]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee2:	493a      	ldr	r1, [pc, #232]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bef2:	d105      	bne.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef4:	4b35      	ldr	r3, [pc, #212]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	4a34      	ldr	r2, [pc, #208]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800befa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800befe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d015      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf0c:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1a:	492c      	ldr	r1, [pc, #176]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf2a:	d105      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf2c:	4b27      	ldr	r3, [pc, #156]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	4a26      	ldr	r2, [pc, #152]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d015      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf44:	4b21      	ldr	r3, [pc, #132]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf52:	491e      	ldr	r1, [pc, #120]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf62:	d105      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf64:	4b19      	ldr	r3, [pc, #100]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d015      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf7c:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8a:	4910      	ldr	r1, [pc, #64]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf9a:	d105      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf9c:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	4a0a      	ldr	r2, [pc, #40]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d018      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc2:	4902      	ldr	r1, [pc, #8]	; (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bfca:	e001      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bfcc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd8:	d105      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfda:	4b21      	ldr	r3, [pc, #132]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	4a20      	ldr	r2, [pc, #128]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfe4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d015      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bff2:	4b1b      	ldr	r3, [pc, #108]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c000:	4917      	ldr	r1, [pc, #92]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c002:	4313      	orrs	r3, r2
 800c004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c010:	d105      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	4a12      	ldr	r2, [pc, #72]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c01c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d015      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c02a:	4b0d      	ldr	r3, [pc, #52]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c02c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c038:	4909      	ldr	r1, [pc, #36]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c048:	d105      	bne.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c04a:	4b05      	ldr	r3, [pc, #20]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	4a04      	ldr	r2, [pc, #16]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c054:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c056:	7cbb      	ldrb	r3, [r7, #18]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	40021000 	.word	0x40021000

0800c064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e084      	b.n	800c180 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d106      	bne.n	800c096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7fb fd2b 	bl	8007aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2202      	movs	r2, #2
 800c09a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0b6:	d902      	bls.n	800c0be <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	e002      	b.n	800c0c4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c0cc:	d007      	beq.n	800c0de <HAL_SPI_Init+0x7a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0d6:	d002      	beq.n	800c0de <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0ee:	d903      	bls.n	800c0f8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	631a      	str	r2, [r3, #48]	; 0x30
 800c0f6:	e002      	b.n	800c0fe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	431a      	orrs	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c11c:	431a      	orrs	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	431a      	orrs	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	ea42 0103 	orr.w	r1, r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	430a      	orrs	r2, r1
 800c136:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	0c1b      	lsrs	r3, r3, #16
 800c13e:	f003 0204 	and.w	r2, r3, #4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	431a      	orrs	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c14c:	431a      	orrs	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	ea42 0103 	orr.w	r1, r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	69da      	ldr	r2, [r3, #28]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c16e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e049      	b.n	800c22e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7fc f914 	bl	80083dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	f000 fc38 	bl	800ca3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d001      	beq.n	800c250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e019      	b.n	800c284 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689a      	ldr	r2, [r3, #8]
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <HAL_TIM_Base_Start+0x58>)
 800c260:	4013      	ands	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b06      	cmp	r3, #6
 800c268:	d00b      	beq.n	800c282 <HAL_TIM_Base_Start+0x4a>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c270:	d007      	beq.n	800c282 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f042 0201 	orr.w	r2, r2, #1
 800c280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	00010007 	.word	0x00010007

0800c294 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6a1a      	ldr	r2, [r3, #32]
 800c2a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10f      	bne.n	800c2cc <HAL_TIM_Base_Stop+0x38>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6a1a      	ldr	r2, [r3, #32]
 800c2b2:	f244 4344 	movw	r3, #17476	; 0x4444
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <HAL_TIM_Base_Stop+0x38>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f022 0201 	bic.w	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
	...

0800c2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d001      	beq.n	800c2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e021      	b.n	800c340 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0201 	orr.w	r2, r2, #1
 800c312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <HAL_TIM_Base_Start_IT+0x68>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2b06      	cmp	r3, #6
 800c324:	d00b      	beq.n	800c33e <HAL_TIM_Base_Start_IT+0x5a>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c32c:	d007      	beq.n	800c33e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f042 0201 	orr.w	r2, r2, #1
 800c33c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	00010007 	.word	0x00010007

0800c350 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 0201 	bic.w	r2, r2, #1
 800c366:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	6a1a      	ldr	r2, [r3, #32]
 800c36e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c372:	4013      	ands	r3, r2
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10f      	bne.n	800c398 <HAL_TIM_Base_Stop_IT+0x48>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6a1a      	ldr	r2, [r3, #32]
 800c37e:	f244 4344 	movw	r3, #17476	; 0x4444
 800c382:	4013      	ands	r3, r2
 800c384:	2b00      	cmp	r3, #0
 800c386:	d107      	bne.n	800c398 <HAL_TIM_Base_Stop_IT+0x48>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f022 0201 	bic.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b086      	sub	sp, #24
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e097      	b.n	800c4f2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7fb ffb4 	bl	8008344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6812      	ldr	r2, [r2, #0]
 800c3ee:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c3f2:	f023 0307 	bic.w	r3, r3, #7
 800c3f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f000 fb1a 	bl	800ca3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	4313      	orrs	r3, r2
 800c428:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c430:	f023 0303 	bic.w	r3, r3, #3
 800c434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	689a      	ldr	r2, [r3, #8]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	021b      	lsls	r3, r3, #8
 800c440:	4313      	orrs	r3, r2
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	4313      	orrs	r3, r2
 800c446:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c44e:	f023 030c 	bic.w	r3, r3, #12
 800c452:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c45a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c45e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	021b      	lsls	r3, r3, #8
 800c46a:	4313      	orrs	r3, r2
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	011a      	lsls	r2, r3, #4
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	031b      	lsls	r3, r3, #12
 800c47e:	4313      	orrs	r3, r2
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	4313      	orrs	r3, r2
 800c484:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c48c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c494:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	685a      	ldr	r2, [r3, #4]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	011b      	lsls	r3, r3, #4
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	f003 0302 	and.w	r3, r3, #2
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d122      	bne.n	800c556 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d11b      	bne.n	800c556 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f06f 0202 	mvn.w	r2, #2
 800c526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fa5f 	bl	800ca00 <HAL_TIM_IC_CaptureCallback>
 800c542:	e005      	b.n	800c550 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa51 	bl	800c9ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fa62 	bl	800ca14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b04      	cmp	r3, #4
 800c562:	d122      	bne.n	800c5aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d11b      	bne.n	800c5aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f06f 0204 	mvn.w	r2, #4
 800c57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2202      	movs	r2, #2
 800c580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa35 	bl	800ca00 <HAL_TIM_IC_CaptureCallback>
 800c596:	e005      	b.n	800c5a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fa27 	bl	800c9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa38 	bl	800ca14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	f003 0308 	and.w	r3, r3, #8
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d122      	bne.n	800c5fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f003 0308 	and.w	r3, r3, #8
 800c5c2:	2b08      	cmp	r3, #8
 800c5c4:	d11b      	bne.n	800c5fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f06f 0208 	mvn.w	r2, #8
 800c5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	69db      	ldr	r3, [r3, #28]
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa0b 	bl	800ca00 <HAL_TIM_IC_CaptureCallback>
 800c5ea:	e005      	b.n	800c5f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f9fd 	bl	800c9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa0e 	bl	800ca14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	f003 0310 	and.w	r3, r3, #16
 800c608:	2b10      	cmp	r3, #16
 800c60a:	d122      	bne.n	800c652 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f003 0310 	and.w	r3, r3, #16
 800c616:	2b10      	cmp	r3, #16
 800c618:	d11b      	bne.n	800c652 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f06f 0210 	mvn.w	r2, #16
 800c622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2208      	movs	r2, #8
 800c628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c634:	2b00      	cmp	r3, #0
 800c636:	d003      	beq.n	800c640 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f9e1 	bl	800ca00 <HAL_TIM_IC_CaptureCallback>
 800c63e:	e005      	b.n	800c64c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f9d3 	bl	800c9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f9e4 	bl	800ca14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	691b      	ldr	r3, [r3, #16]
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d10e      	bne.n	800c67e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d107      	bne.n	800c67e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f06f 0201 	mvn.w	r2, #1
 800c676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f9ad 	bl	800c9d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c688:	2b80      	cmp	r3, #128	; 0x80
 800c68a:	d10e      	bne.n	800c6aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c696:	2b80      	cmp	r3, #128	; 0x80
 800c698:	d107      	bne.n	800c6aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fc5f 	bl	800cf68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6b8:	d10e      	bne.n	800c6d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6c4:	2b80      	cmp	r3, #128	; 0x80
 800c6c6:	d107      	bne.n	800c6d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fc52 	bl	800cf7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e2:	2b40      	cmp	r3, #64	; 0x40
 800c6e4:	d10e      	bne.n	800c704 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f0:	2b40      	cmp	r3, #64	; 0x40
 800c6f2:	d107      	bne.n	800c704 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f992 	bl	800ca28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0320 	and.w	r3, r3, #32
 800c70e:	2b20      	cmp	r3, #32
 800c710:	d10e      	bne.n	800c730 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0320 	and.w	r3, r3, #32
 800c71c:	2b20      	cmp	r3, #32
 800c71e:	d107      	bne.n	800c730 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0220 	mvn.w	r2, #32
 800c728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fc12 	bl	800cf54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c73a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c73e:	d10f      	bne.n	800c760 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c74a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c74e:	d107      	bne.n	800c760 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fc18 	bl	800cf90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c76a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c76e:	d10f      	bne.n	800c790 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c77a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c77e:	d107      	bne.n	800c790 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fc0a 	bl	800cfa4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	691b      	ldr	r3, [r3, #16]
 800c796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c79a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c79e:	d10f      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ae:	d107      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fbfc 	bl	800cfb8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7ce:	d10f      	bne.n	800c7f0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7de:	d107      	bne.n	800c7f0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c7e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fbee 	bl	800cfcc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d101      	bne.n	800c810 <HAL_TIM_ConfigClockSource+0x18>
 800c80c:	2302      	movs	r3, #2
 800c80e:	e0d2      	b.n	800c9b6 <HAL_TIM_ConfigClockSource+0x1be>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2202      	movs	r2, #2
 800c81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c82e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c83a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c84c:	f000 80a9 	beq.w	800c9a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c854:	d81a      	bhi.n	800c88c <HAL_TIM_ConfigClockSource+0x94>
 800c856:	2b30      	cmp	r3, #48	; 0x30
 800c858:	f000 809a 	beq.w	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c85c:	2b30      	cmp	r3, #48	; 0x30
 800c85e:	d809      	bhi.n	800c874 <HAL_TIM_ConfigClockSource+0x7c>
 800c860:	2b10      	cmp	r3, #16
 800c862:	f000 8095 	beq.w	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c866:	2b20      	cmp	r3, #32
 800c868:	f000 8092 	beq.w	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 808f 	beq.w	800c990 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c872:	e097      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c874:	2b50      	cmp	r3, #80	; 0x50
 800c876:	d05b      	beq.n	800c930 <HAL_TIM_ConfigClockSource+0x138>
 800c878:	2b50      	cmp	r3, #80	; 0x50
 800c87a:	d802      	bhi.n	800c882 <HAL_TIM_ConfigClockSource+0x8a>
 800c87c:	2b40      	cmp	r3, #64	; 0x40
 800c87e:	d077      	beq.n	800c970 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c880:	e090      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c882:	2b60      	cmp	r3, #96	; 0x60
 800c884:	d064      	beq.n	800c950 <HAL_TIM_ConfigClockSource+0x158>
 800c886:	2b70      	cmp	r3, #112	; 0x70
 800c888:	d028      	beq.n	800c8dc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c88a:	e08b      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c88c:	4a4c      	ldr	r2, [pc, #304]	; (800c9c0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d07e      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c892:	4a4b      	ldr	r2, [pc, #300]	; (800c9c0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d810      	bhi.n	800c8ba <HAL_TIM_ConfigClockSource+0xc2>
 800c898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c89c:	d078      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8a2:	d803      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0xb4>
 800c8a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8a8:	d02f      	beq.n	800c90a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c8aa:	e07b      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c8b0:	d06e      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c8b2:	4a44      	ldr	r2, [pc, #272]	; (800c9c4 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d06b      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8b8:	e074      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8ba:	4a43      	ldr	r2, [pc, #268]	; (800c9c8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d067      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c8c0:	4a41      	ldr	r2, [pc, #260]	; (800c9c8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d803      	bhi.n	800c8ce <HAL_TIM_ConfigClockSource+0xd6>
 800c8c6:	4a41      	ldr	r2, [pc, #260]	; (800c9cc <HAL_TIM_ConfigClockSource+0x1d4>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d061      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8cc:	e06a      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8ce:	4a40      	ldr	r2, [pc, #256]	; (800c9d0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d05d      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
 800c8d4:	4a3f      	ldr	r2, [pc, #252]	; (800c9d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d05a      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8da:	e063      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	6899      	ldr	r1, [r3, #8]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	f000 f9ca 	bl	800cc84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	609a      	str	r2, [r3, #8]
      break;
 800c908:	e04c      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6818      	ldr	r0, [r3, #0]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	6899      	ldr	r1, [r3, #8]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	f000 f9b3 	bl	800cc84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	689a      	ldr	r2, [r3, #8]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c92c:	609a      	str	r2, [r3, #8]
      break;
 800c92e:	e039      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	6859      	ldr	r1, [r3, #4]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	461a      	mov	r2, r3
 800c93e:	f000 f925 	bl	800cb8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2150      	movs	r1, #80	; 0x50
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f97e 	bl	800cc4a <TIM_ITRx_SetConfig>
      break;
 800c94e:	e029      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6818      	ldr	r0, [r3, #0]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	6859      	ldr	r1, [r3, #4]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	461a      	mov	r2, r3
 800c95e:	f000 f944 	bl	800cbea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2160      	movs	r1, #96	; 0x60
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 f96e 	bl	800cc4a <TIM_ITRx_SetConfig>
      break;
 800c96e:	e019      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6818      	ldr	r0, [r3, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	6859      	ldr	r1, [r3, #4]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	461a      	mov	r2, r3
 800c97e:	f000 f905 	bl	800cb8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2140      	movs	r1, #64	; 0x40
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 f95e 	bl	800cc4a <TIM_ITRx_SetConfig>
      break;
 800c98e:	e009      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4619      	mov	r1, r3
 800c99a:	4610      	mov	r0, r2
 800c99c:	f000 f955 	bl	800cc4a <TIM_ITRx_SetConfig>
      break;
 800c9a0:	e000      	b.n	800c9a4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c9a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	00100030 	.word	0x00100030
 800c9c4:	00100020 	.word	0x00100020
 800c9c8:	00100050 	.word	0x00100050
 800c9cc:	00100040 	.word	0x00100040
 800c9d0:	00100060 	.word	0x00100060
 800c9d4:	00100070 	.word	0x00100070

0800c9d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a46      	ldr	r2, [pc, #280]	; (800cb68 <TIM_Base_SetConfig+0x12c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d017      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca5a:	d013      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a43      	ldr	r2, [pc, #268]	; (800cb6c <TIM_Base_SetConfig+0x130>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d00f      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a42      	ldr	r2, [pc, #264]	; (800cb70 <TIM_Base_SetConfig+0x134>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00b      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a41      	ldr	r2, [pc, #260]	; (800cb74 <TIM_Base_SetConfig+0x138>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d007      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a40      	ldr	r2, [pc, #256]	; (800cb78 <TIM_Base_SetConfig+0x13c>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d003      	beq.n	800ca84 <TIM_Base_SetConfig+0x48>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a3f      	ldr	r2, [pc, #252]	; (800cb7c <TIM_Base_SetConfig+0x140>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d108      	bne.n	800ca96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a33      	ldr	r2, [pc, #204]	; (800cb68 <TIM_Base_SetConfig+0x12c>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d023      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caa4:	d01f      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a30      	ldr	r2, [pc, #192]	; (800cb6c <TIM_Base_SetConfig+0x130>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d01b      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a2f      	ldr	r2, [pc, #188]	; (800cb70 <TIM_Base_SetConfig+0x134>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d017      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a2e      	ldr	r2, [pc, #184]	; (800cb74 <TIM_Base_SetConfig+0x138>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d013      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a2d      	ldr	r2, [pc, #180]	; (800cb78 <TIM_Base_SetConfig+0x13c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00f      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a2d      	ldr	r2, [pc, #180]	; (800cb80 <TIM_Base_SetConfig+0x144>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d00b      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a2c      	ldr	r2, [pc, #176]	; (800cb84 <TIM_Base_SetConfig+0x148>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d007      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a2b      	ldr	r2, [pc, #172]	; (800cb88 <TIM_Base_SetConfig+0x14c>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d003      	beq.n	800cae6 <TIM_Base_SetConfig+0xaa>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a26      	ldr	r2, [pc, #152]	; (800cb7c <TIM_Base_SetConfig+0x140>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d108      	bne.n	800caf8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	689a      	ldr	r2, [r3, #8]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a12      	ldr	r2, [pc, #72]	; (800cb68 <TIM_Base_SetConfig+0x12c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d013      	beq.n	800cb4c <TIM_Base_SetConfig+0x110>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <TIM_Base_SetConfig+0x13c>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d00f      	beq.n	800cb4c <TIM_Base_SetConfig+0x110>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a14      	ldr	r2, [pc, #80]	; (800cb80 <TIM_Base_SetConfig+0x144>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d00b      	beq.n	800cb4c <TIM_Base_SetConfig+0x110>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <TIM_Base_SetConfig+0x148>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d007      	beq.n	800cb4c <TIM_Base_SetConfig+0x110>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a12      	ldr	r2, [pc, #72]	; (800cb88 <TIM_Base_SetConfig+0x14c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d003      	beq.n	800cb4c <TIM_Base_SetConfig+0x110>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a0d      	ldr	r2, [pc, #52]	; (800cb7c <TIM_Base_SetConfig+0x140>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d103      	bne.n	800cb54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	691a      	ldr	r2, [r3, #16]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	615a      	str	r2, [r3, #20]
}
 800cb5a:	bf00      	nop
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	40012c00 	.word	0x40012c00
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40000c00 	.word	0x40000c00
 800cb78:	40013400 	.word	0x40013400
 800cb7c:	40015000 	.word	0x40015000
 800cb80:	40014000 	.word	0x40014000
 800cb84:	40014400 	.word	0x40014400
 800cb88:	40014800 	.word	0x40014800

0800cb8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b087      	sub	sp, #28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	f023 0201 	bic.w	r2, r3, #1
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f023 030a 	bic.w	r3, r3, #10
 800cbc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbca:	697a      	ldr	r2, [r7, #20]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	621a      	str	r2, [r3, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	371c      	adds	r7, #28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b087      	sub	sp, #28
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	f023 0210 	bic.w	r2, r3, #16
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	031b      	lsls	r3, r3, #12
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	011b      	lsls	r3, r3, #4
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	621a      	str	r2, [r3, #32]
}
 800cc3e:	bf00      	nop
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	f043 0307 	orr.w	r3, r3, #7
 800cc70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	609a      	str	r2, [r3, #8]
}
 800cc78:	bf00      	nop
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	021a      	lsls	r2, r3, #8
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	431a      	orrs	r2, r3
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	609a      	str	r2, [r3, #8]
}
 800ccb8:	bf00      	nop
 800ccba:	371c      	adds	r7, #28
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d101      	bne.n	800ccdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e074      	b.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a34      	ldr	r2, [pc, #208]	; (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d009      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a33      	ldr	r2, [pc, #204]	; (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d004      	beq.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a31      	ldr	r2, [pc, #196]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d108      	bne.n	800cd2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cd32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a21      	ldr	r2, [pc, #132]	; (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d022      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd5c:	d01d      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a1f      	ldr	r2, [pc, #124]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d018      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a1d      	ldr	r2, [pc, #116]	; (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d013      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a1c      	ldr	r2, [pc, #112]	; (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d00e      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a15      	ldr	r2, [pc, #84]	; (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d009      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a18      	ldr	r2, [pc, #96]	; (800cdec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d004      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a11      	ldr	r2, [pc, #68]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d10c      	bne.n	800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cda0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	40012c00 	.word	0x40012c00
 800cdd8:	40013400 	.word	0x40013400
 800cddc:	40015000 	.word	0x40015000
 800cde0:	40000400 	.word	0x40000400
 800cde4:	40000800 	.word	0x40000800
 800cde8:	40000c00 	.word	0x40000c00
 800cdec:	40014000 	.word	0x40014000

0800cdf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d101      	bne.n	800ce0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e096      	b.n	800cf3a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	4313      	orrs	r3, r2
 800ce74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	041b      	lsls	r3, r3, #16
 800ce82:	4313      	orrs	r3, r2
 800ce84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a2f      	ldr	r2, [pc, #188]	; (800cf48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d009      	beq.n	800cea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2d      	ldr	r2, [pc, #180]	; (800cf4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d004      	beq.n	800cea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a2c      	ldr	r2, [pc, #176]	; (800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d106      	bne.n	800ceb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a24      	ldr	r2, [pc, #144]	; (800cf48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d009      	beq.n	800ced0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a22      	ldr	r2, [pc, #136]	; (800cf4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d004      	beq.n	800ced0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a21      	ldr	r2, [pc, #132]	; (800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d12b      	bne.n	800cf28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceda:	051b      	lsls	r3, r3, #20
 800cedc:	4313      	orrs	r3, r2
 800cede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	4313      	orrs	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a11      	ldr	r2, [pc, #68]	; (800cf48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d009      	beq.n	800cf1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a10      	ldr	r2, [pc, #64]	; (800cf4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d004      	beq.n	800cf1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a0e      	ldr	r2, [pc, #56]	; (800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d106      	bne.n	800cf28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	4313      	orrs	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	40012c00 	.word	0x40012c00
 800cf4c:	40013400 	.word	0x40013400
 800cf50:	40015000 	.word	0x40015000

0800cf54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <LL_EXTI_EnableIT_0_31>:
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800cfe8:	4b05      	ldr	r3, [pc, #20]	; (800d000 <LL_EXTI_EnableIT_0_31+0x20>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	4904      	ldr	r1, [pc, #16]	; (800d000 <LL_EXTI_EnableIT_0_31+0x20>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	600b      	str	r3, [r1, #0]
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	40010400 	.word	0x40010400

0800d004 <LL_EXTI_EnableIT_32_63>:
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d00c:	4b05      	ldr	r3, [pc, #20]	; (800d024 <LL_EXTI_EnableIT_32_63+0x20>)
 800d00e:	6a1a      	ldr	r2, [r3, #32]
 800d010:	4904      	ldr	r1, [pc, #16]	; (800d024 <LL_EXTI_EnableIT_32_63+0x20>)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4313      	orrs	r3, r2
 800d016:	620b      	str	r3, [r1, #32]
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	40010400 	.word	0x40010400

0800d028 <LL_EXTI_DisableIT_0_31>:
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d030:	4b06      	ldr	r3, [pc, #24]	; (800d04c <LL_EXTI_DisableIT_0_31+0x24>)
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	43db      	mvns	r3, r3
 800d038:	4904      	ldr	r1, [pc, #16]	; (800d04c <LL_EXTI_DisableIT_0_31+0x24>)
 800d03a:	4013      	ands	r3, r2
 800d03c:	600b      	str	r3, [r1, #0]
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	40010400 	.word	0x40010400

0800d050 <LL_EXTI_DisableIT_32_63>:
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d058:	4b06      	ldr	r3, [pc, #24]	; (800d074 <LL_EXTI_DisableIT_32_63+0x24>)
 800d05a:	6a1a      	ldr	r2, [r3, #32]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	43db      	mvns	r3, r3
 800d060:	4904      	ldr	r1, [pc, #16]	; (800d074 <LL_EXTI_DisableIT_32_63+0x24>)
 800d062:	4013      	ands	r3, r2
 800d064:	620b      	str	r3, [r1, #32]
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	40010400 	.word	0x40010400

0800d078 <LL_EXTI_EnableEvent_0_31>:
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	4904      	ldr	r1, [pc, #16]	; (800d098 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4313      	orrs	r3, r2
 800d08a:	604b      	str	r3, [r1, #4]
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	40010400 	.word	0x40010400

0800d09c <LL_EXTI_EnableEvent_32_63>:
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0a8:	4904      	ldr	r1, [pc, #16]	; (800d0bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	40010400 	.word	0x40010400

0800d0c0 <LL_EXTI_DisableEvent_0_31>:
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d0c8:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	43db      	mvns	r3, r3
 800d0d0:	4904      	ldr	r1, [pc, #16]	; (800d0e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	604b      	str	r3, [r1, #4]
}
 800d0d6:	bf00      	nop
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	40010400 	.word	0x40010400

0800d0e8 <LL_EXTI_DisableEvent_32_63>:
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d0f0:	4b06      	ldr	r3, [pc, #24]	; (800d10c <LL_EXTI_DisableEvent_32_63+0x24>)
 800d0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	43db      	mvns	r3, r3
 800d0f8:	4904      	ldr	r1, [pc, #16]	; (800d10c <LL_EXTI_DisableEvent_32_63+0x24>)
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d0fe:	bf00      	nop
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	40010400 	.word	0x40010400

0800d110 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	4904      	ldr	r1, [pc, #16]	; (800d130 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4313      	orrs	r3, r2
 800d122:	608b      	str	r3, [r1, #8]
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	40010400 	.word	0x40010400

0800d134 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d13c:	4b05      	ldr	r3, [pc, #20]	; (800d154 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d13e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d140:	4904      	ldr	r1, [pc, #16]	; (800d154 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4313      	orrs	r3, r2
 800d146:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	40010400 	.word	0x40010400

0800d158 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d160:	4b06      	ldr	r3, [pc, #24]	; (800d17c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d162:	689a      	ldr	r2, [r3, #8]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	43db      	mvns	r3, r3
 800d168:	4904      	ldr	r1, [pc, #16]	; (800d17c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d16a:	4013      	ands	r3, r2
 800d16c:	608b      	str	r3, [r1, #8]
}
 800d16e:	bf00      	nop
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	40010400 	.word	0x40010400

0800d180 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d188:	4b06      	ldr	r3, [pc, #24]	; (800d1a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d18a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	43db      	mvns	r3, r3
 800d190:	4904      	ldr	r1, [pc, #16]	; (800d1a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d192:	4013      	ands	r3, r2
 800d194:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d196:	bf00      	nop
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40010400 	.word	0x40010400

0800d1a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d1b0:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	4904      	ldr	r1, [pc, #16]	; (800d1c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60cb      	str	r3, [r1, #12]
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	40010400 	.word	0x40010400

0800d1cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d8:	4904      	ldr	r1, [pc, #16]	; (800d1ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	40010400 	.word	0x40010400

0800d1f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d1f8:	4b06      	ldr	r3, [pc, #24]	; (800d214 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	43db      	mvns	r3, r3
 800d200:	4904      	ldr	r1, [pc, #16]	; (800d214 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d202:	4013      	ands	r3, r2
 800d204:	60cb      	str	r3, [r1, #12]
}
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	40010400 	.word	0x40010400

0800d218 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d220:	4b06      	ldr	r3, [pc, #24]	; (800d23c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	43db      	mvns	r3, r3
 800d228:	4904      	ldr	r1, [pc, #16]	; (800d23c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d22a:	4013      	ands	r3, r2
 800d22c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d22e:	bf00      	nop
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	40010400 	.word	0x40010400

0800d240 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7a1b      	ldrb	r3, [r3, #8]
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 80c8 	beq.w	800d3e6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d05d      	beq.n	800d31a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7a5b      	ldrb	r3, [r3, #9]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d00e      	beq.n	800d284 <LL_EXTI_Init+0x44>
 800d266:	2b02      	cmp	r3, #2
 800d268:	d017      	beq.n	800d29a <LL_EXTI_Init+0x5a>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d120      	bne.n	800d2b0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff ff24 	bl	800d0c0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff feaf 	bl	800cfe0 <LL_EXTI_EnableIT_0_31>
          break;
 800d282:	e018      	b.n	800d2b6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff fecd 	bl	800d028 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fef0 	bl	800d078 <LL_EXTI_EnableEvent_0_31>
          break;
 800d298:	e00d      	b.n	800d2b6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fe9e 	bl	800cfe0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fee5 	bl	800d078 <LL_EXTI_EnableEvent_0_31>
          break;
 800d2ae:	e002      	b.n	800d2b6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]
          break;
 800d2b4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7a9b      	ldrb	r3, [r3, #10]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d02d      	beq.n	800d31a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7a9b      	ldrb	r3, [r3, #10]
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d00e      	beq.n	800d2e4 <LL_EXTI_Init+0xa4>
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d017      	beq.n	800d2fa <LL_EXTI_Init+0xba>
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d120      	bne.n	800d310 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff ff8c 	bl	800d1f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff ff17 	bl	800d110 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d2e2:	e01b      	b.n	800d31c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff ff35 	bl	800d158 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff ff58 	bl	800d1a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d2f8:	e010      	b.n	800d31c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7ff ff06 	bl	800d110 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff ff4d 	bl	800d1a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d30e:	e005      	b.n	800d31c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f043 0302 	orr.w	r3, r3, #2
 800d316:	60fb      	str	r3, [r7, #12]
            break;
 800d318:	e000      	b.n	800d31c <LL_EXTI_Init+0xdc>
        }
      }
 800d31a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d075      	beq.n	800d410 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7a5b      	ldrb	r3, [r3, #9]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d00e      	beq.n	800d34a <LL_EXTI_Init+0x10a>
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d017      	beq.n	800d360 <LL_EXTI_Init+0x120>
 800d330:	2b00      	cmp	r3, #0
 800d332:	d120      	bne.n	800d376 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fed5 	bl	800d0e8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fe5e 	bl	800d004 <LL_EXTI_EnableIT_32_63>
          break;
 800d348:	e01a      	b.n	800d380 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fe7e 	bl	800d050 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fe9f 	bl	800d09c <LL_EXTI_EnableEvent_32_63>
          break;
 800d35e:	e00f      	b.n	800d380 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fe4d 	bl	800d004 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff fe94 	bl	800d09c <LL_EXTI_EnableEvent_32_63>
          break;
 800d374:	e004      	b.n	800d380 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f043 0304 	orr.w	r3, r3, #4
 800d37c:	60fb      	str	r3, [r7, #12]
          break;
 800d37e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7a9b      	ldrb	r3, [r3, #10]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d043      	beq.n	800d410 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7a9b      	ldrb	r3, [r3, #10]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d00e      	beq.n	800d3ae <LL_EXTI_Init+0x16e>
 800d390:	2b03      	cmp	r3, #3
 800d392:	d017      	beq.n	800d3c4 <LL_EXTI_Init+0x184>
 800d394:	2b01      	cmp	r3, #1
 800d396:	d120      	bne.n	800d3da <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff ff3b 	bl	800d218 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7ff fec4 	bl	800d134 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d3ac:	e031      	b.n	800d412 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fee4 	bl	800d180 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ff05 	bl	800d1cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d3c2:	e026      	b.n	800d412 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff feb3 	bl	800d134 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff fefa 	bl	800d1cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d3d8:	e01b      	b.n	800d412 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f043 0305 	orr.w	r3, r3, #5
 800d3e0:	60fb      	str	r3, [r7, #12]
            break;
 800d3e2:	bf00      	nop
 800d3e4:	e015      	b.n	800d412 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff fe1c 	bl	800d028 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fe63 	bl	800d0c0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fe26 	bl	800d050 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fe6d 	bl	800d0e8 <LL_EXTI_DisableEvent_32_63>
 800d40e:	e000      	b.n	800d412 <LL_EXTI_Init+0x1d2>
      }
 800d410:	bf00      	nop
  }

  return status;
 800d412:	68fb      	ldr	r3, [r7, #12]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <LL_GPIO_SetPinMode>:
{
 800d41c:	b480      	push	{r7}
 800d41e:	b089      	sub	sp, #36	; 0x24
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	fa93 f3a3 	rbit	r3, r3
 800d436:	613b      	str	r3, [r7, #16]
  return result;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	fab3 f383 	clz	r3, r3
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	2103      	movs	r1, #3
 800d444:	fa01 f303 	lsl.w	r3, r1, r3
 800d448:	43db      	mvns	r3, r3
 800d44a:	401a      	ands	r2, r3
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	fa93 f3a3 	rbit	r3, r3
 800d456:	61bb      	str	r3, [r7, #24]
  return result;
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	fab3 f383 	clz	r3, r3
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	fa01 f303 	lsl.w	r3, r1, r3
 800d468:	431a      	orrs	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	601a      	str	r2, [r3, #0]
}
 800d46e:	bf00      	nop
 800d470:	3724      	adds	r7, #36	; 0x24
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <LL_GPIO_SetPinOutputType>:
{
 800d47a:	b480      	push	{r7}
 800d47c:	b085      	sub	sp, #20
 800d47e:	af00      	add	r7, sp, #0
 800d480:	60f8      	str	r0, [r7, #12]
 800d482:	60b9      	str	r1, [r7, #8]
 800d484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	685a      	ldr	r2, [r3, #4]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	43db      	mvns	r3, r3
 800d48e:	401a      	ands	r2, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	fb01 f303 	mul.w	r3, r1, r3
 800d498:	431a      	orrs	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	605a      	str	r2, [r3, #4]
}
 800d49e:	bf00      	nop
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <LL_GPIO_SetPinSpeed>:
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b089      	sub	sp, #36	; 0x24
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689a      	ldr	r2, [r3, #8]
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	fa93 f3a3 	rbit	r3, r3
 800d4c4:	613b      	str	r3, [r7, #16]
  return result;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	fab3 f383 	clz	r3, r3
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	2103      	movs	r1, #3
 800d4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4d6:	43db      	mvns	r3, r3
 800d4d8:	401a      	ands	r2, r3
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	fa93 f3a3 	rbit	r3, r3
 800d4e4:	61bb      	str	r3, [r7, #24]
  return result;
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	fab3 f383 	clz	r3, r3
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	609a      	str	r2, [r3, #8]
}
 800d4fc:	bf00      	nop
 800d4fe:	3724      	adds	r7, #36	; 0x24
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <LL_GPIO_SetPinPull>:
{
 800d508:	b480      	push	{r7}
 800d50a:	b089      	sub	sp, #36	; 0x24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	fa93 f3a3 	rbit	r3, r3
 800d522:	613b      	str	r3, [r7, #16]
  return result;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	fab3 f383 	clz	r3, r3
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	2103      	movs	r1, #3
 800d530:	fa01 f303 	lsl.w	r3, r1, r3
 800d534:	43db      	mvns	r3, r3
 800d536:	401a      	ands	r2, r3
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	fa93 f3a3 	rbit	r3, r3
 800d542:	61bb      	str	r3, [r7, #24]
  return result;
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	fab3 f383 	clz	r3, r3
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	6879      	ldr	r1, [r7, #4]
 800d550:	fa01 f303 	lsl.w	r3, r1, r3
 800d554:	431a      	orrs	r2, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	60da      	str	r2, [r3, #12]
}
 800d55a:	bf00      	nop
 800d55c:	3724      	adds	r7, #36	; 0x24
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <LL_GPIO_SetAFPin_0_7>:
{
 800d566:	b480      	push	{r7}
 800d568:	b089      	sub	sp, #36	; 0x24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6a1a      	ldr	r2, [r3, #32]
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	fa93 f3a3 	rbit	r3, r3
 800d580:	613b      	str	r3, [r7, #16]
  return result;
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	fab3 f383 	clz	r3, r3
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	210f      	movs	r1, #15
 800d58e:	fa01 f303 	lsl.w	r3, r1, r3
 800d592:	43db      	mvns	r3, r3
 800d594:	401a      	ands	r2, r3
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	fa93 f3a3 	rbit	r3, r3
 800d5a0:	61bb      	str	r3, [r7, #24]
  return result;
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	fab3 f383 	clz	r3, r3
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	6879      	ldr	r1, [r7, #4]
 800d5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	621a      	str	r2, [r3, #32]
}
 800d5b8:	bf00      	nop
 800d5ba:	3724      	adds	r7, #36	; 0x24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <LL_GPIO_SetAFPin_8_15>:
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b089      	sub	sp, #36	; 0x24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	0a1b      	lsrs	r3, r3, #8
 800d5d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	fa93 f3a3 	rbit	r3, r3
 800d5e0:	613b      	str	r3, [r7, #16]
  return result;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	fab3 f383 	clz	r3, r3
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	210f      	movs	r1, #15
 800d5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f2:	43db      	mvns	r3, r3
 800d5f4:	401a      	ands	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	0a1b      	lsrs	r3, r3, #8
 800d5fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	fa93 f3a3 	rbit	r3, r3
 800d602:	61bb      	str	r3, [r7, #24]
  return result;
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	fab3 f383 	clz	r3, r3
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	fa01 f303 	lsl.w	r3, r1, r3
 800d614:	431a      	orrs	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d61a:	bf00      	nop
 800d61c:	3724      	adds	r7, #36	; 0x24
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b086      	sub	sp, #24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	fa93 f3a3 	rbit	r3, r3
 800d63c:	60bb      	str	r3, [r7, #8]
  return result;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	fab3 f383 	clz	r3, r3
 800d644:	b2db      	uxtb	r3, r3
 800d646:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d648:	e040      	b.n	800d6cc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	2101      	movs	r1, #1
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	fa01 f303 	lsl.w	r3, r1, r3
 800d656:	4013      	ands	r3, r2
 800d658:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d032      	beq.n	800d6c6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	461a      	mov	r2, r3
 800d666:	6939      	ldr	r1, [r7, #16]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fed7 	bl	800d41c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d003      	beq.n	800d67e <LL_GPIO_Init+0x58>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d106      	bne.n	800d68c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	461a      	mov	r2, r3
 800d684:	6939      	ldr	r1, [r7, #16]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff ff0f 	bl	800d4aa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	461a      	mov	r2, r3
 800d692:	6939      	ldr	r1, [r7, #16]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff37 	bl	800d508 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d111      	bne.n	800d6c6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	2bff      	cmp	r3, #255	; 0xff
 800d6a6:	d807      	bhi.n	800d6b8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	695b      	ldr	r3, [r3, #20]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	6939      	ldr	r1, [r7, #16]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ff58 	bl	800d566 <LL_GPIO_SetAFPin_0_7>
 800d6b6:	e006      	b.n	800d6c6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6939      	ldr	r1, [r7, #16]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff ff7f 	bl	800d5c4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1b7      	bne.n	800d64a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d003      	beq.n	800d6ea <LL_GPIO_Init+0xc4>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d107      	bne.n	800d6fa <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	6819      	ldr	r1, [r3, #0]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff fec0 	bl	800d47a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <ILI9341_Draw_Sine>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Sine(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	4604      	mov	r4, r0
 800d70c:	4608      	mov	r0, r1
 800d70e:	4611      	mov	r1, r2
 800d710:	461a      	mov	r2, r3
 800d712:	4623      	mov	r3, r4
 800d714:	80fb      	strh	r3, [r7, #6]
 800d716:	4603      	mov	r3, r0
 800d718:	80bb      	strh	r3, [r7, #4]
 800d71a:	460b      	mov	r3, r1
 800d71c:	70fb      	strb	r3, [r7, #3]
 800d71e:	4613      	mov	r3, r2
 800d720:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800d722:	2300      	movs	r3, #0
 800d724:	60fb      	str	r3, [r7, #12]
 800d726:	e026      	b.n	800d776 <ILI9341_Draw_Sine+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800d728:	2300      	movs	r3, #0
 800d72a:	60bb      	str	r3, [r7, #8]
 800d72c:	e01c      	b.n	800d768 <ILI9341_Draw_Sine+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	b29a      	uxth	r2, r3
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	4413      	add	r3, r2
 800d736:	b298      	uxth	r0, r3
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d73e:	4413      	add	r3, r2
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d746:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	88bb      	ldrh	r3, [r7, #4]
 800d74e:	4413      	add	r3, r2
 800d750:	b29a      	uxth	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	b29b      	uxth	r3, r3
 800d756:	4413      	add	r3, r2
 800d758:	b29b      	uxth	r3, r3
 800d75a:	883a      	ldrh	r2, [r7, #0]
 800d75c:	4619      	mov	r1, r3
 800d75e:	f000 fc1f 	bl	800dfa0 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	3301      	adds	r3, #1
 800d766:	60bb      	str	r3, [r7, #8]
 800d768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	dbde      	blt.n	800d72e <ILI9341_Draw_Sine+0x2a>
	for(int w = 0; w < weight; w++ )
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	78fb      	ldrb	r3, [r7, #3]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	dbd4      	blt.n	800d728 <ILI9341_Draw_Sine+0x24>

		}
	}

}
 800d77e:	bf00      	nop
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	bd90      	pop	{r4, r7, pc}

0800d786 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800d786:	b590      	push	{r4, r7, lr}
 800d788:	b087      	sub	sp, #28
 800d78a:	af02      	add	r7, sp, #8
 800d78c:	4604      	mov	r4, r0
 800d78e:	4608      	mov	r0, r1
 800d790:	4611      	mov	r1, r2
 800d792:	461a      	mov	r2, r3
 800d794:	4623      	mov	r3, r4
 800d796:	80fb      	strh	r3, [r7, #6]
 800d798:	4603      	mov	r3, r0
 800d79a:	80bb      	strh	r3, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	807b      	strh	r3, [r7, #2]
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d7a8:	7bfa      	ldrb	r2, [r7, #15]
 800d7aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d939      	bls.n	800d826 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d7b2:	88ba      	ldrh	r2, [r7, #4]
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	441a      	add	r2, r3
 800d7b8:	88b9      	ldrh	r1, [r7, #4]
 800d7ba:	883b      	ldrh	r3, [r7, #0]
 800d7bc:	4419      	add	r1, r3
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	1acb      	subs	r3, r1, r3
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	f000 8089 	beq.w	800d8da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	441a      	add	r2, r3
 800d7ce:	88f9      	ldrh	r1, [r7, #6]
 800d7d0:	887b      	ldrh	r3, [r7, #2]
 800d7d2:	4419      	add	r1, r3
 800d7d4:	7bfb      	ldrb	r3, [r7, #15]
 800d7d6:	1acb      	subs	r3, r1, r3
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d07e      	beq.n	800d8da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	88fb      	ldrh	r3, [r7, #6]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	b298      	uxth	r0, r3
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	88bb      	ldrh	r3, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	b299      	uxth	r1, r3
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	887a      	ldrh	r2, [r7, #2]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	3301      	adds	r3, #1
 800d800:	b29c      	uxth	r4, r3
 800d802:	7bfb      	ldrb	r3, [r7, #15]
 800d804:	b29b      	uxth	r3, r3
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	b29b      	uxth	r3, r3
 800d80a:	883a      	ldrh	r2, [r7, #0]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	3301      	adds	r3, #1
 800d812:	b29a      	uxth	r2, r3
 800d814:	2304      	movs	r3, #4
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	8c3b      	ldrh	r3, [r7, #32]
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	4613      	mov	r3, r2
 800d81e:	4622      	mov	r2, r4
 800d820:	f000 fd18 	bl	800e254 <ILI9341_Draw_Rectangle>
				goto finish;
 800d824:	e05a      	b.n	800d8dc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d826:	7bfb      	ldrb	r3, [r7, #15]
 800d828:	b29a      	uxth	r2, r3
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	4413      	add	r3, r2
 800d82e:	b298      	uxth	r0, r3
 800d830:	7bfb      	ldrb	r3, [r7, #15]
 800d832:	b29a      	uxth	r2, r3
 800d834:	88bb      	ldrh	r3, [r7, #4]
 800d836:	4413      	add	r3, r2
 800d838:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	887a      	ldrh	r2, [r7, #2]
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d844:	3301      	adds	r3, #1
 800d846:	b29a      	uxth	r2, r3
 800d848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d84a:	f000 fa6b 	bl	800dd24 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	b29a      	uxth	r2, r3
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	4413      	add	r3, r2
 800d856:	b298      	uxth	r0, r3
										(y + h) - b,
 800d858:	88ba      	ldrh	r2, [r7, #4]
 800d85a:	883b      	ldrh	r3, [r7, #0]
 800d85c:	4413      	add	r3, r2
 800d85e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	b29b      	uxth	r3, r3
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	b299      	uxth	r1, r3
										(w - b)+1,
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	887a      	ldrh	r2, [r7, #2]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d872:	3301      	adds	r3, #1
 800d874:	b29a      	uxth	r2, r3
 800d876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d878:	f000 fa54 	bl	800dd24 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	b29a      	uxth	r2, r3
 800d880:	88fb      	ldrh	r3, [r7, #6]
 800d882:	4413      	add	r3, r2
 800d884:	b298      	uxth	r0, r3
 800d886:	7bfb      	ldrb	r3, [r7, #15]
 800d888:	b29a      	uxth	r2, r3
 800d88a:	88bb      	ldrh	r3, [r7, #4]
 800d88c:	4413      	add	r3, r2
 800d88e:	b299      	uxth	r1, r3
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	b29b      	uxth	r3, r3
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	b29b      	uxth	r3, r3
 800d898:	883a      	ldrh	r2, [r7, #0]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8a0:	f000 faa4 	bl	800ddec <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800d8a4:	88fa      	ldrh	r2, [r7, #6]
 800d8a6:	887b      	ldrh	r3, [r7, #2]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	b298      	uxth	r0, r3
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	88bb      	ldrh	r3, [r7, #4]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	b299      	uxth	r1, r3
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	883a      	ldrh	r2, [r7, #0]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8ce:	f000 fa8d 	bl	800ddec <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d8d8:	e766      	b.n	800d7a8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d8da:	bf00      	nop
	// done
	return;
 800d8dc:	bf00      	nop
}
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}

0800d8e4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b089      	sub	sp, #36	; 0x24
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4623      	mov	r3, r4
 800d8f4:	71fb      	strb	r3, [r7, #7]
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	80bb      	strh	r3, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	807b      	strh	r3, [r7, #2]
 800d8fe:	4613      	mov	r3, r2
 800d900:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d902:	79fb      	ldrb	r3, [r7, #7]
 800d904:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	2b1f      	cmp	r3, #31
 800d90a:	d802      	bhi.n	800d912 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	71fb      	strb	r3, [r7, #7]
 800d910:	e002      	b.n	800d918 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	3b20      	subs	r3, #32
 800d916:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d918:	2300      	movs	r3, #0
 800d91a:	753b      	strb	r3, [r7, #20]
 800d91c:	e012      	b.n	800d944 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d91e:	7dfa      	ldrb	r2, [r7, #23]
 800d920:	7d38      	ldrb	r0, [r7, #20]
 800d922:	7d39      	ldrb	r1, [r7, #20]
 800d924:	4c48      	ldr	r4, [pc, #288]	; (800da48 <ILI9341_Draw_Char+0x164>)
 800d926:	4613      	mov	r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4413      	add	r3, r2
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	4423      	add	r3, r4
 800d930:	4403      	add	r3, r0
 800d932:	781a      	ldrb	r2, [r3, #0]
 800d934:	f107 0318 	add.w	r3, r7, #24
 800d938:	440b      	add	r3, r1
 800d93a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d93e:	7d3b      	ldrb	r3, [r7, #20]
 800d940:	3301      	adds	r3, #1
 800d942:	753b      	strb	r3, [r7, #20]
 800d944:	7d3b      	ldrb	r3, [r7, #20]
 800d946:	2b05      	cmp	r3, #5
 800d948:	d9e9      	bls.n	800d91e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d94a:	2300      	movs	r3, #0
 800d94c:	757b      	strb	r3, [r7, #21]
 800d94e:	e074      	b.n	800da3a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d950:	2300      	movs	r3, #0
 800d952:	75bb      	strb	r3, [r7, #22]
 800d954:	e06b      	b.n	800da2e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d956:	7d7b      	ldrb	r3, [r7, #21]
 800d958:	f107 0218 	add.w	r2, r7, #24
 800d95c:	4413      	add	r3, r2
 800d95e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d962:	461a      	mov	r2, r3
 800d964:	7dbb      	ldrb	r3, [r7, #22]
 800d966:	fa42 f303 	asr.w	r3, r2, r3
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d02d      	beq.n	800d9ce <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d972:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d974:	2b01      	cmp	r3, #1
 800d976:	d10e      	bne.n	800d996 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d978:	7d7b      	ldrb	r3, [r7, #21]
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	88bb      	ldrh	r3, [r7, #4]
 800d97e:	4413      	add	r3, r2
 800d980:	b298      	uxth	r0, r3
 800d982:	7dbb      	ldrb	r3, [r7, #22]
 800d984:	b29a      	uxth	r2, r3
 800d986:	887b      	ldrh	r3, [r7, #2]
 800d988:	4413      	add	r3, r2
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	883a      	ldrh	r2, [r7, #0]
 800d98e:	4619      	mov	r1, r3
 800d990:	f000 fb06 	bl	800dfa0 <ILI9341_Draw_Pixel>
 800d994:	e048      	b.n	800da28 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d996:	7d7b      	ldrb	r3, [r7, #21]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d99c:	fb12 f303 	smulbb	r3, r2, r3
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	88bb      	ldrh	r3, [r7, #4]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	b298      	uxth	r0, r3
 800d9a8:	7dbb      	ldrb	r3, [r7, #22]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d9ae:	fb12 f303 	smulbb	r3, r2, r3
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	887b      	ldrh	r3, [r7, #2]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	b299      	uxth	r1, r3
 800d9ba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d9bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d9be:	2301      	movs	r3, #1
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	883b      	ldrh	r3, [r7, #0]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4623      	mov	r3, r4
 800d9c8:	f000 fc44 	bl	800e254 <ILI9341_Draw_Rectangle>
 800d9cc:	e02c      	b.n	800da28 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d9ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d10e      	bne.n	800d9f2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d9d4:	7d7b      	ldrb	r3, [r7, #21]
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	88bb      	ldrh	r3, [r7, #4]
 800d9da:	4413      	add	r3, r2
 800d9dc:	b298      	uxth	r0, r3
 800d9de:	7dbb      	ldrb	r3, [r7, #22]
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	887b      	ldrh	r3, [r7, #2]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f000 fad8 	bl	800dfa0 <ILI9341_Draw_Pixel>
 800d9f0:	e01a      	b.n	800da28 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d9f2:	7d7b      	ldrb	r3, [r7, #21]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d9f8:	fb12 f303 	smulbb	r3, r2, r3
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	88bb      	ldrh	r3, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	b298      	uxth	r0, r3
 800da04:	7dbb      	ldrb	r3, [r7, #22]
 800da06:	b29b      	uxth	r3, r3
 800da08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da0a:	fb12 f303 	smulbb	r3, r2, r3
 800da0e:	b29a      	uxth	r2, r3
 800da10:	887b      	ldrh	r3, [r7, #2]
 800da12:	4413      	add	r3, r2
 800da14:	b299      	uxth	r1, r3
 800da16:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800da18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da1a:	2301      	movs	r3, #1
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	4623      	mov	r3, r4
 800da24:	f000 fc16 	bl	800e254 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800da28:	7dbb      	ldrb	r3, [r7, #22]
 800da2a:	3301      	adds	r3, #1
 800da2c:	75bb      	strb	r3, [r7, #22]
 800da2e:	7dbb      	ldrb	r3, [r7, #22]
 800da30:	2b07      	cmp	r3, #7
 800da32:	d990      	bls.n	800d956 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800da34:	7d7b      	ldrb	r3, [r7, #21]
 800da36:	3301      	adds	r3, #1
 800da38:	757b      	strb	r3, [r7, #21]
 800da3a:	7d7b      	ldrb	r3, [r7, #21]
 800da3c:	2b05      	cmp	r3, #5
 800da3e:	d987      	bls.n	800d950 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800da40:	bf00      	nop
 800da42:	371c      	adds	r7, #28
 800da44:	46bd      	mov	sp, r7
 800da46:	bd90      	pop	{r4, r7, pc}
 800da48:	08013588 	.word	0x08013588

0800da4c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800da4c:	b590      	push	{r4, r7, lr}
 800da4e:	b087      	sub	sp, #28
 800da50:	af02      	add	r7, sp, #8
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	4608      	mov	r0, r1
 800da56:	4611      	mov	r1, r2
 800da58:	461a      	mov	r2, r3
 800da5a:	4603      	mov	r3, r0
 800da5c:	817b      	strh	r3, [r7, #10]
 800da5e:	460b      	mov	r3, r1
 800da60:	813b      	strh	r3, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800da66:	897b      	ldrh	r3, [r7, #10]
 800da68:	3b01      	subs	r3, #1
 800da6a:	b298      	uxth	r0, r3
 800da6c:	8c3b      	ldrh	r3, [r7, #32]
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	b29a      	uxth	r2, r3
 800da72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da74:	8939      	ldrh	r1, [r7, #8]
 800da76:	f000 f9b9 	bl	800ddec <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800da7a:	897b      	ldrh	r3, [r7, #10]
 800da7c:	3b02      	subs	r3, #2
 800da7e:	b298      	uxth	r0, r3
 800da80:	8c3b      	ldrh	r3, [r7, #32]
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	b29a      	uxth	r2, r3
 800da86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da88:	8939      	ldrh	r1, [r7, #8]
 800da8a:	f000 f9af 	bl	800ddec <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800da8e:	e016      	b.n	800dabe <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	60fa      	str	r2, [r7, #12]
 800da96:	7818      	ldrb	r0, [r3, #0]
 800da98:	88fc      	ldrh	r4, [r7, #6]
 800da9a:	893a      	ldrh	r2, [r7, #8]
 800da9c:	8979      	ldrh	r1, [r7, #10]
 800da9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daa0:	9301      	str	r3, [sp, #4]
 800daa2:	8c3b      	ldrh	r3, [r7, #32]
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	4623      	mov	r3, r4
 800daa8:	f7ff ff1c 	bl	800d8e4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800daac:	8c3b      	ldrh	r3, [r7, #32]
 800daae:	461a      	mov	r2, r3
 800dab0:	0052      	lsls	r2, r2, #1
 800dab2:	4413      	add	r3, r2
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	897b      	ldrh	r3, [r7, #10]
 800daba:	4413      	add	r3, r2
 800dabc:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e4      	bne.n	800da90 <ILI9341_Draw_Text+0x44>
    }


}
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd90      	pop	{r4, r7, pc}

0800dace <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800dad2:	f000 fca3 	bl	800e41c <_LCD_Enable>
	ILI9341_SPI_Init();
 800dad6:	f000 f907 	bl	800dce8 <ILI9341_SPI_Init>
	_LCD_Reset();
 800dada:	f000 fcaf 	bl	800e43c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800dade:	2001      	movs	r0, #1
 800dae0:	f000 fd7a 	bl	800e5d8 <_LCD_SendCommand>
	HAL_Delay(2000);
 800dae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dae8:	f7fa fdce 	bl	8008688 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800daec:	20cb      	movs	r0, #203	; 0xcb
 800daee:	f000 fd73 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800daf2:	2039      	movs	r0, #57	; 0x39
 800daf4:	f000 fda2 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800daf8:	202c      	movs	r0, #44	; 0x2c
 800dafa:	f000 fd9f 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dafe:	2000      	movs	r0, #0
 800db00:	f000 fd9c 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x34);
 800db04:	2034      	movs	r0, #52	; 0x34
 800db06:	f000 fd99 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x02);
 800db0a:	2002      	movs	r0, #2
 800db0c:	f000 fd96 	bl	800e63c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800db10:	20cf      	movs	r0, #207	; 0xcf
 800db12:	f000 fd61 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800db16:	2000      	movs	r0, #0
 800db18:	f000 fd90 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800db1c:	20c1      	movs	r0, #193	; 0xc1
 800db1e:	f000 fd8d 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x30);
 800db22:	2030      	movs	r0, #48	; 0x30
 800db24:	f000 fd8a 	bl	800e63c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800db28:	20e8      	movs	r0, #232	; 0xe8
 800db2a:	f000 fd55 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800db2e:	2085      	movs	r0, #133	; 0x85
 800db30:	f000 fd84 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x00);
 800db34:	2000      	movs	r0, #0
 800db36:	f000 fd81 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x78);
 800db3a:	2078      	movs	r0, #120	; 0x78
 800db3c:	f000 fd7e 	bl	800e63c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800db40:	20ea      	movs	r0, #234	; 0xea
 800db42:	f000 fd49 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800db46:	2000      	movs	r0, #0
 800db48:	f000 fd78 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x00);
 800db4c:	2000      	movs	r0, #0
 800db4e:	f000 fd75 	bl	800e63c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800db52:	20ed      	movs	r0, #237	; 0xed
 800db54:	f000 fd40 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800db58:	2064      	movs	r0, #100	; 0x64
 800db5a:	f000 fd6f 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x03);
 800db5e:	2003      	movs	r0, #3
 800db60:	f000 fd6c 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x12);
 800db64:	2012      	movs	r0, #18
 800db66:	f000 fd69 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x81);
 800db6a:	2081      	movs	r0, #129	; 0x81
 800db6c:	f000 fd66 	bl	800e63c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800db70:	20f7      	movs	r0, #247	; 0xf7
 800db72:	f000 fd31 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800db76:	2020      	movs	r0, #32
 800db78:	f000 fd60 	bl	800e63c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800db7c:	20c0      	movs	r0, #192	; 0xc0
 800db7e:	f000 fd2b 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800db82:	2023      	movs	r0, #35	; 0x23
 800db84:	f000 fd5a 	bl	800e63c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800db88:	20c1      	movs	r0, #193	; 0xc1
 800db8a:	f000 fd25 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800db8e:	2010      	movs	r0, #16
 800db90:	f000 fd54 	bl	800e63c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800db94:	20c5      	movs	r0, #197	; 0xc5
 800db96:	f000 fd1f 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800db9a:	203e      	movs	r0, #62	; 0x3e
 800db9c:	f000 fd4e 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x28);
 800dba0:	2028      	movs	r0, #40	; 0x28
 800dba2:	f000 fd4b 	bl	800e63c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800dba6:	20c7      	movs	r0, #199	; 0xc7
 800dba8:	f000 fd16 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800dbac:	2086      	movs	r0, #134	; 0x86
 800dbae:	f000 fd45 	bl	800e63c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800dbb2:	2036      	movs	r0, #54	; 0x36
 800dbb4:	f000 fd10 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800dbb8:	2048      	movs	r0, #72	; 0x48
 800dbba:	f000 fd3f 	bl	800e63c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800dbbe:	203a      	movs	r0, #58	; 0x3a
 800dbc0:	f000 fd0a 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800dbc4:	2055      	movs	r0, #85	; 0x55
 800dbc6:	f000 fd39 	bl	800e63c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800dbca:	20b1      	movs	r0, #177	; 0xb1
 800dbcc:	f000 fd04 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	f000 fd33 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x18);
 800dbd6:	2018      	movs	r0, #24
 800dbd8:	f000 fd30 	bl	800e63c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800dbdc:	20b6      	movs	r0, #182	; 0xb6
 800dbde:	f000 fcfb 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800dbe2:	2008      	movs	r0, #8
 800dbe4:	f000 fd2a 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x82);
 800dbe8:	2082      	movs	r0, #130	; 0x82
 800dbea:	f000 fd27 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x27);
 800dbee:	2027      	movs	r0, #39	; 0x27
 800dbf0:	f000 fd24 	bl	800e63c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800dbf4:	20f2      	movs	r0, #242	; 0xf2
 800dbf6:	f000 fcef 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	f000 fd1e 	bl	800e63c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800dc00:	2026      	movs	r0, #38	; 0x26
 800dc02:	f000 fce9 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800dc06:	2001      	movs	r0, #1
 800dc08:	f000 fd18 	bl	800e63c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800dc0c:	20e0      	movs	r0, #224	; 0xe0
 800dc0e:	f000 fce3 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800dc12:	200f      	movs	r0, #15
 800dc14:	f000 fd12 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x31);
 800dc18:	2031      	movs	r0, #49	; 0x31
 800dc1a:	f000 fd0f 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800dc1e:	202b      	movs	r0, #43	; 0x2b
 800dc20:	f000 fd0c 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dc24:	200c      	movs	r0, #12
 800dc26:	f000 fd09 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dc2a:	200e      	movs	r0, #14
 800dc2c:	f000 fd06 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x08);
 800dc30:	2008      	movs	r0, #8
 800dc32:	f000 fd03 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800dc36:	204e      	movs	r0, #78	; 0x4e
 800dc38:	f000 fd00 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800dc3c:	20f1      	movs	r0, #241	; 0xf1
 800dc3e:	f000 fcfd 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x37);
 800dc42:	2037      	movs	r0, #55	; 0x37
 800dc44:	f000 fcfa 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x07);
 800dc48:	2007      	movs	r0, #7
 800dc4a:	f000 fcf7 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x10);
 800dc4e:	2010      	movs	r0, #16
 800dc50:	f000 fcf4 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc54:	2003      	movs	r0, #3
 800dc56:	f000 fcf1 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dc5a:	200e      	movs	r0, #14
 800dc5c:	f000 fcee 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x09);
 800dc60:	2009      	movs	r0, #9
 800dc62:	f000 fceb 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc66:	2000      	movs	r0, #0
 800dc68:	f000 fce8 	bl	800e63c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800dc6c:	20e1      	movs	r0, #225	; 0xe1
 800dc6e:	f000 fcb3 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dc72:	2000      	movs	r0, #0
 800dc74:	f000 fce2 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dc78:	200e      	movs	r0, #14
 800dc7a:	f000 fcdf 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x14);
 800dc7e:	2014      	movs	r0, #20
 800dc80:	f000 fcdc 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc84:	2003      	movs	r0, #3
 800dc86:	f000 fcd9 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x11);
 800dc8a:	2011      	movs	r0, #17
 800dc8c:	f000 fcd6 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x07);
 800dc90:	2007      	movs	r0, #7
 800dc92:	f000 fcd3 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x31);
 800dc96:	2031      	movs	r0, #49	; 0x31
 800dc98:	f000 fcd0 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dc9c:	20c1      	movs	r0, #193	; 0xc1
 800dc9e:	f000 fccd 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x48);
 800dca2:	2048      	movs	r0, #72	; 0x48
 800dca4:	f000 fcca 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x08);
 800dca8:	2008      	movs	r0, #8
 800dcaa:	f000 fcc7 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dcae:	200f      	movs	r0, #15
 800dcb0:	f000 fcc4 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dcb4:	200c      	movs	r0, #12
 800dcb6:	f000 fcc1 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x31);
 800dcba:	2031      	movs	r0, #49	; 0x31
 800dcbc:	f000 fcbe 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x36);
 800dcc0:	2036      	movs	r0, #54	; 0x36
 800dcc2:	f000 fcbb 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dcc6:	200f      	movs	r0, #15
 800dcc8:	f000 fcb8 	bl	800e63c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800dccc:	2011      	movs	r0, #17
 800dcce:	f000 fc83 	bl	800e5d8 <_LCD_SendCommand>
	HAL_Delay(240);
 800dcd2:	20f0      	movs	r0, #240	; 0xf0
 800dcd4:	f7fa fcd8 	bl	8008688 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800dcd8:	2029      	movs	r0, #41	; 0x29
 800dcda:	f000 fc7d 	bl	800e5d8 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800dcde:	2000      	movs	r0, #0
 800dce0:	f000 fb4e 	bl	800e380 <ILI9341_Set_Rotation>
}
 800dce4:	bf00      	nop
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dcec:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <ILI9341_SPI_Init+0x34>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf4:	2b40      	cmp	r3, #64	; 0x40
 800dcf6:	d005      	beq.n	800dd04 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800dcf8:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <ILI9341_SPI_Init+0x34>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a07      	ldr	r2, [pc, #28]	; (800dd1c <ILI9341_SPI_Init+0x34>)
 800dcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd02:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd04:	4b06      	ldr	r3, [pc, #24]	; (800dd20 <ILI9341_SPI_Init+0x38>)
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	4a05      	ldr	r2, [pc, #20]	; (800dd20 <ILI9341_SPI_Init+0x38>)
 800dd0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd0e:	6153      	str	r3, [r2, #20]
}
 800dd10:	bf00      	nop
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	40003c00 	.word	0x40003c00
 800dd20:	48000400 	.word	0x48000400

0800dd24 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800dd24:	b590      	push	{r4, r7, lr}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	461a      	mov	r2, r3
 800dd32:	4623      	mov	r3, r4
 800dd34:	80fb      	strh	r3, [r7, #6]
 800dd36:	4603      	mov	r3, r0
 800dd38:	80bb      	strh	r3, [r7, #4]
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	807b      	strh	r3, [r7, #2]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dd42:	4b28      	ldr	r3, [pc, #160]	; (800dde4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	88fa      	ldrh	r2, [r7, #6]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d246      	bcs.n	800dddc <ILI9341_Draw_Horizontal_Line+0xb8>
 800dd4e:	4b26      	ldr	r3, [pc, #152]	; (800dde8 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	88ba      	ldrh	r2, [r7, #4]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d240      	bcs.n	800dddc <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800dd5a:	88fa      	ldrh	r2, [r7, #6]
 800dd5c:	887b      	ldrh	r3, [r7, #2]
 800dd5e:	4413      	add	r3, r2
 800dd60:	3b01      	subs	r3, #1
 800dd62:	4a20      	ldr	r2, [pc, #128]	; (800dde4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800dd64:	8812      	ldrh	r2, [r2, #0]
 800dd66:	b292      	uxth	r2, r2
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	db05      	blt.n	800dd78 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800dd6c:	4b1d      	ldr	r3, [pc, #116]	; (800dde4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	88fb      	ldrh	r3, [r7, #6]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800dd78:	88fa      	ldrh	r2, [r7, #6]
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	88bb      	ldrh	r3, [r7, #4]
 800dd86:	88b9      	ldrh	r1, [r7, #4]
 800dd88:	88f8      	ldrh	r0, [r7, #6]
 800dd8a:	f000 f893 	bl	800deb4 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800dd92:	887b      	ldrh	r3, [r7, #2]
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d009      	beq.n	800ddb0 <ILI9341_Draw_Horizontal_Line+0x8c>
 800dd9c:	887b      	ldrh	r3, [r7, #2]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d906      	bls.n	800ddb0 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800dda2:	2301      	movs	r3, #1
 800dda4:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800dda6:	887b      	ldrh	r3, [r7, #2]
 800dda8:	085b      	lsrs	r3, r3, #1
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800ddb0:	887c      	ldrh	r4, [r7, #2]
 800ddb2:	883a      	ldrh	r2, [r7, #0]
 800ddb4:	88b9      	ldrh	r1, [r7, #4]
 800ddb6:	88f8      	ldrh	r0, [r7, #6]
 800ddb8:	2303      	movs	r3, #3
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4623      	mov	r3, r4
 800ddbe:	f000 fb5b 	bl	800e478 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00a      	beq.n	800ddde <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800ddc8:	88fa      	ldrh	r2, [r7, #6]
 800ddca:	887b      	ldrh	r3, [r7, #2]
 800ddcc:	4413      	add	r3, r2
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	883a      	ldrh	r2, [r7, #0]
 800ddd2:	88b9      	ldrh	r1, [r7, #4]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f8e3 	bl	800dfa0 <ILI9341_Draw_Pixel>
 800ddda:	e000      	b.n	800ddde <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dddc:	bf00      	nop
							(ypos),
							colour);
	}


}
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd90      	pop	{r4, r7, pc}
 800dde4:	20000cae 	.word	0x20000cae
 800dde8:	20000cac 	.word	0x20000cac

0800ddec <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	af02      	add	r7, sp, #8
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4623      	mov	r3, r4
 800ddfc:	80fb      	strh	r3, [r7, #6]
 800ddfe:	4603      	mov	r3, r0
 800de00:	80bb      	strh	r3, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	807b      	strh	r3, [r7, #2]
 800de06:	4613      	mov	r3, r2
 800de08:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800de0a:	4b28      	ldr	r3, [pc, #160]	; (800deac <ILI9341_Draw_Vertical_Line+0xc0>)
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	88fa      	ldrh	r2, [r7, #6]
 800de12:	429a      	cmp	r2, r3
 800de14:	d246      	bcs.n	800dea4 <ILI9341_Draw_Vertical_Line+0xb8>
 800de16:	4b26      	ldr	r3, [pc, #152]	; (800deb0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	88ba      	ldrh	r2, [r7, #4]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d240      	bcs.n	800dea4 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800de22:	88ba      	ldrh	r2, [r7, #4]
 800de24:	887b      	ldrh	r3, [r7, #2]
 800de26:	4413      	add	r3, r2
 800de28:	3b01      	subs	r3, #1
 800de2a:	4a21      	ldr	r2, [pc, #132]	; (800deb0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800de2c:	8812      	ldrh	r2, [r2, #0]
 800de2e:	b292      	uxth	r2, r2
 800de30:	4293      	cmp	r3, r2
 800de32:	db05      	blt.n	800de40 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800de34:	4b1e      	ldr	r3, [pc, #120]	; (800deb0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	b29a      	uxth	r2, r3
 800de3a:	88bb      	ldrh	r3, [r7, #4]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800de40:	88ba      	ldrh	r2, [r7, #4]
 800de42:	887b      	ldrh	r3, [r7, #2]
 800de44:	4413      	add	r3, r2
 800de46:	b29b      	uxth	r3, r3
 800de48:	3b01      	subs	r3, #1
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	88fa      	ldrh	r2, [r7, #6]
 800de4e:	88b9      	ldrh	r1, [r7, #4]
 800de50:	88f8      	ldrh	r0, [r7, #6]
 800de52:	f000 f82f 	bl	800deb4 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800de5a:	887b      	ldrh	r3, [r7, #2]
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	d009      	beq.n	800de78 <ILI9341_Draw_Vertical_Line+0x8c>
 800de64:	887b      	ldrh	r3, [r7, #2]
 800de66:	2b01      	cmp	r3, #1
 800de68:	d906      	bls.n	800de78 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800de6a:	2301      	movs	r3, #1
 800de6c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800de6e:	887b      	ldrh	r3, [r7, #2]
 800de70:	085b      	lsrs	r3, r3, #1
 800de72:	b29b      	uxth	r3, r3
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d008      	beq.n	800de90 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800de7e:	88ba      	ldrh	r2, [r7, #4]
 800de80:	887b      	ldrh	r3, [r7, #2]
 800de82:	4413      	add	r3, r2
 800de84:	b299      	uxth	r1, r3
 800de86:	883a      	ldrh	r2, [r7, #0]
 800de88:	88fb      	ldrh	r3, [r7, #6]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f888 	bl	800dfa0 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800de90:	887c      	ldrh	r4, [r7, #2]
 800de92:	883a      	ldrh	r2, [r7, #0]
 800de94:	88b9      	ldrh	r1, [r7, #4]
 800de96:	88f8      	ldrh	r0, [r7, #6]
 800de98:	2303      	movs	r3, #3
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	4623      	mov	r3, r4
 800de9e:	f000 faeb 	bl	800e478 <_LCD_Write_Frame>
 800dea2:	e000      	b.n	800dea6 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dea4:	bf00      	nop
}
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd90      	pop	{r4, r7, pc}
 800deac:	20000cae 	.word	0x20000cae
 800deb0:	20000cac 	.word	0x20000cac

0800deb4 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	4611      	mov	r1, r2
 800dec0:	461a      	mov	r2, r3
 800dec2:	4623      	mov	r3, r4
 800dec4:	80fb      	strh	r3, [r7, #6]
 800dec6:	4603      	mov	r3, r0
 800dec8:	80bb      	strh	r3, [r7, #4]
 800deca:	460b      	mov	r3, r1
 800decc:	807b      	strh	r3, [r7, #2]
 800dece:	4613      	mov	r3, r2
 800ded0:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800ded2:	202a      	movs	r0, #42	; 0x2a
 800ded4:	f000 fb80 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800ded8:	88fb      	ldrh	r3, [r7, #6]
 800deda:	0a1b      	lsrs	r3, r3, #8
 800dedc:	b29b      	uxth	r3, r3
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fbab 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(sc);
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fba6 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800def0:	887b      	ldrh	r3, [r7, #2]
 800def2:	0a1b      	lsrs	r3, r3, #8
 800def4:	b29b      	uxth	r3, r3
 800def6:	b2db      	uxtb	r3, r3
 800def8:	4618      	mov	r0, r3
 800defa:	f000 fb9f 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(ec);
 800defe:	887b      	ldrh	r3, [r7, #2]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fb9a 	bl	800e63c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800df08:	202b      	movs	r0, #43	; 0x2b
 800df0a:	f000 fb65 	bl	800e5d8 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800df0e:	88bb      	ldrh	r3, [r7, #4]
 800df10:	0a1b      	lsrs	r3, r3, #8
 800df12:	b29b      	uxth	r3, r3
 800df14:	b2db      	uxtb	r3, r3
 800df16:	4618      	mov	r0, r3
 800df18:	f000 fb90 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(sp);
 800df1c:	88bb      	ldrh	r3, [r7, #4]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fb8b 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800df26:	883b      	ldrh	r3, [r7, #0]
 800df28:	0a1b      	lsrs	r3, r3, #8
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fb84 	bl	800e63c <_LCD_SendData>
	_LCD_SendData(ep);
 800df34:	883b      	ldrh	r3, [r7, #0]
 800df36:	b2db      	uxtb	r3, r3
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fb7f 	bl	800e63c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800df3e:	202c      	movs	r0, #44	; 0x2c
 800df40:	f000 fb4a 	bl	800e5d8 <_LCD_SendCommand>
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd90      	pop	{r4, r7, pc}

0800df4c <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af02      	add	r7, sp, #8
 800df52:	4603      	mov	r3, r0
 800df54:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800df56:	4b10      	ldr	r3, [pc, #64]	; (800df98 <ILI9341_Fill_Screen+0x4c>)
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	4b0f      	ldr	r3, [pc, #60]	; (800df9c <ILI9341_Fill_Screen+0x50>)
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	b29b      	uxth	r3, r3
 800df62:	2100      	movs	r1, #0
 800df64:	2000      	movs	r0, #0
 800df66:	f7ff ffa5 	bl	800deb4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800df6a:	4b0b      	ldr	r3, [pc, #44]	; (800df98 <ILI9341_Fill_Screen+0x4c>)
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	461a      	mov	r2, r3
 800df72:	4b0a      	ldr	r3, [pc, #40]	; (800df9c <ILI9341_Fill_Screen+0x50>)
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	b29b      	uxth	r3, r3
 800df78:	fb03 f302 	mul.w	r3, r3, r2
 800df7c:	4619      	mov	r1, r3
 800df7e:	88fa      	ldrh	r2, [r7, #6]
 800df80:	2304      	movs	r3, #4
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	460b      	mov	r3, r1
 800df86:	2100      	movs	r1, #0
 800df88:	2000      	movs	r0, #0
 800df8a:	f000 fa75 	bl	800e478 <_LCD_Write_Frame>
}
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20000cae 	.word	0x20000cae
 800df9c:	20000cac 	.word	0x20000cac

0800dfa0 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	; 0x38
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	80fb      	strh	r3, [r7, #6]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	80bb      	strh	r3, [r7, #4]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dfb2:	4b98      	ldr	r3, [pc, #608]	; (800e214 <ILI9341_Draw_Pixel+0x274>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	88fa      	ldrh	r2, [r7, #6]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	f080 8143 	bcs.w	800e246 <ILI9341_Draw_Pixel+0x2a6>
 800dfc0:	4b95      	ldr	r3, [pc, #596]	; (800e218 <ILI9341_Draw_Pixel+0x278>)
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	88ba      	ldrh	r2, [r7, #4]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	f080 813c 	bcs.w	800e246 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800dfce:	4b93      	ldr	r3, [pc, #588]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	4a92      	ldr	r2, [pc, #584]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dfd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfd8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dfda:	4b90      	ldr	r3, [pc, #576]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	4a8f      	ldr	r2, [pc, #572]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dfe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfe4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800dfe6:	220a      	movs	r2, #10
 800dfe8:	2100      	movs	r1, #0
 800dfea:	202a      	movs	r0, #42	; 0x2a
 800dfec:	f000 fb58 	bl	800e6a0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dff0:	2300      	movs	r3, #0
 800dff2:	637b      	str	r3, [r7, #52]	; 0x34
 800dff4:	e008      	b.n	800e008 <ILI9341_Draw_Pixel+0x68>
 800dff6:	4b89      	ldr	r3, [pc, #548]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	4a88      	ldr	r2, [pc, #544]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800dffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e000:	6153      	str	r3, [r2, #20]
 800e002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e004:	3301      	adds	r3, #1
 800e006:	637b      	str	r3, [r7, #52]	; 0x34
 800e008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	ddf3      	ble.n	800dff6 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e00e:	4b83      	ldr	r3, [pc, #524]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	4a82      	ldr	r2, [pc, #520]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e018:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e01a:	4b80      	ldr	r3, [pc, #512]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	4a7f      	ldr	r2, [pc, #508]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e024:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e026:	4b7d      	ldr	r3, [pc, #500]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	4a7c      	ldr	r2, [pc, #496]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e02c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e030:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	b29b      	uxth	r3, r3
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	753b      	strb	r3, [r7, #20]
 800e03c:	88fb      	ldrh	r3, [r7, #6]
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	757b      	strb	r3, [r7, #21]
 800e042:	88fb      	ldrh	r3, [r7, #6]
 800e044:	3301      	adds	r3, #1
 800e046:	121b      	asrs	r3, r3, #8
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	75bb      	strb	r3, [r7, #22]
 800e04c:	88fb      	ldrh	r3, [r7, #6]
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	3301      	adds	r3, #1
 800e052:	b2db      	uxtb	r3, r3
 800e054:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e056:	f107 0014 	add.w	r0, r7, #20
 800e05a:	230a      	movs	r3, #10
 800e05c:	2200      	movs	r2, #0
 800e05e:	2104      	movs	r1, #4
 800e060:	f000 fb50 	bl	800e704 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e064:	2300      	movs	r3, #0
 800e066:	633b      	str	r3, [r7, #48]	; 0x30
 800e068:	e008      	b.n	800e07c <ILI9341_Draw_Pixel+0xdc>
 800e06a:	4b6c      	ldr	r3, [pc, #432]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	4a6b      	ldr	r2, [pc, #428]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e074:	6153      	str	r3, [r2, #20]
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	3301      	adds	r3, #1
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	2b02      	cmp	r3, #2
 800e080:	ddf3      	ble.n	800e06a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e082:	4b66      	ldr	r3, [pc, #408]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	4a65      	ldr	r2, [pc, #404]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e08c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e08e:	4b63      	ldr	r3, [pc, #396]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	4a62      	ldr	r2, [pc, #392]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e098:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e09a:	4b60      	ldr	r3, [pc, #384]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	4a5f      	ldr	r2, [pc, #380]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0a4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e0a6:	220a      	movs	r2, #10
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	202b      	movs	r0, #43	; 0x2b
 800e0ac:	f000 faf8 	bl	800e6a0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0b4:	e008      	b.n	800e0c8 <ILI9341_Draw_Pixel+0x128>
 800e0b6:	4b59      	ldr	r3, [pc, #356]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0b8:	695b      	ldr	r3, [r3, #20]
 800e0ba:	4a58      	ldr	r2, [pc, #352]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0c0:	6153      	str	r3, [r2, #20]
 800e0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	ddf3      	ble.n	800e0b6 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e0ce:	4b53      	ldr	r3, [pc, #332]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	4a52      	ldr	r2, [pc, #328]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e0da:	4b50      	ldr	r3, [pc, #320]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	4a4f      	ldr	r2, [pc, #316]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e4:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0e6:	4b4d      	ldr	r3, [pc, #308]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	4a4c      	ldr	r2, [pc, #304]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e0ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0f0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e0f2:	88bb      	ldrh	r3, [r7, #4]
 800e0f4:	0a1b      	lsrs	r3, r3, #8
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	743b      	strb	r3, [r7, #16]
 800e0fc:	88bb      	ldrh	r3, [r7, #4]
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	747b      	strb	r3, [r7, #17]
 800e102:	88bb      	ldrh	r3, [r7, #4]
 800e104:	3301      	adds	r3, #1
 800e106:	121b      	asrs	r3, r3, #8
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	74bb      	strb	r3, [r7, #18]
 800e10c:	88bb      	ldrh	r3, [r7, #4]
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	3301      	adds	r3, #1
 800e112:	b2db      	uxtb	r3, r3
 800e114:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e116:	f107 0010 	add.w	r0, r7, #16
 800e11a:	230a      	movs	r3, #10
 800e11c:	2200      	movs	r2, #0
 800e11e:	2104      	movs	r1, #4
 800e120:	f000 faf0 	bl	800e704 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e124:	2300      	movs	r3, #0
 800e126:	62bb      	str	r3, [r7, #40]	; 0x28
 800e128:	e008      	b.n	800e13c <ILI9341_Draw_Pixel+0x19c>
 800e12a:	4b3c      	ldr	r3, [pc, #240]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	4a3b      	ldr	r2, [pc, #236]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e134:	6153      	str	r3, [r2, #20]
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	3301      	adds	r3, #1
 800e13a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	2b02      	cmp	r3, #2
 800e140:	ddf3      	ble.n	800e12a <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e142:	4b36      	ldr	r3, [pc, #216]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	4a35      	ldr	r2, [pc, #212]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e14c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e14e:	4b33      	ldr	r3, [pc, #204]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	4a32      	ldr	r2, [pc, #200]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e158:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e15a:	4b30      	ldr	r3, [pc, #192]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	4a2f      	ldr	r2, [pc, #188]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e164:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e166:	220a      	movs	r2, #10
 800e168:	2100      	movs	r1, #0
 800e16a:	202c      	movs	r0, #44	; 0x2c
 800e16c:	f000 fa98 	bl	800e6a0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e170:	2300      	movs	r3, #0
 800e172:	627b      	str	r3, [r7, #36]	; 0x24
 800e174:	e008      	b.n	800e188 <ILI9341_Draw_Pixel+0x1e8>
 800e176:	4b29      	ldr	r3, [pc, #164]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	4a28      	ldr	r2, [pc, #160]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e17c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e180:	6153      	str	r3, [r2, #20]
 800e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e184:	3301      	adds	r3, #1
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	ddf3      	ble.n	800e176 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e18e:	4b23      	ldr	r3, [pc, #140]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e190:	695b      	ldr	r3, [r3, #20]
 800e192:	4a22      	ldr	r2, [pc, #136]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e198:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e19a:	4b20      	ldr	r3, [pc, #128]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	4a1f      	ldr	r2, [pc, #124]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a4:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1a6:	4b1d      	ldr	r3, [pc, #116]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	4a1c      	ldr	r2, [pc, #112]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1b0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e1b2:	887b      	ldrh	r3, [r7, #2]
 800e1b4:	0a1b      	lsrs	r3, r3, #8
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	733b      	strb	r3, [r7, #12]
 800e1bc:	887b      	ldrh	r3, [r7, #2]
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e1c2:	f107 000c 	add.w	r0, r7, #12
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2102      	movs	r1, #2
 800e1cc:	f000 fa9a 	bl	800e704 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	623b      	str	r3, [r7, #32]
 800e1d4:	e008      	b.n	800e1e8 <ILI9341_Draw_Pixel+0x248>
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	4a10      	ldr	r2, [pc, #64]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1e0:	6153      	str	r3, [r2, #20]
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	623b      	str	r3, [r7, #32]
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	ddf3      	ble.n	800e1d6 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
 800e1f2:	e008      	b.n	800e206 <ILI9341_Draw_Pixel+0x266>
 800e1f4:	4b09      	ldr	r3, [pc, #36]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	4a08      	ldr	r2, [pc, #32]	; (800e21c <ILI9341_Draw_Pixel+0x27c>)
 800e1fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1fe:	6153      	str	r3, [r2, #20]
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	3301      	adds	r3, #1
 800e204:	61fb      	str	r3, [r7, #28]
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	ddf3      	ble.n	800e1f4 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e20c:	2300      	movs	r3, #0
 800e20e:	61bb      	str	r3, [r7, #24]
 800e210:	e00f      	b.n	800e232 <ILI9341_Draw_Pixel+0x292>
 800e212:	bf00      	nop
 800e214:	20000cae 	.word	0x20000cae
 800e218:	20000cac 	.word	0x20000cac
 800e21c:	48000400 	.word	0x48000400
 800e220:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <ILI9341_Draw_Pixel+0x2b0>)
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	4a0a      	ldr	r2, [pc, #40]	; (800e250 <ILI9341_Draw_Pixel+0x2b0>)
 800e226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e22a:	6153      	str	r3, [r2, #20]
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	3301      	adds	r3, #1
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	2b02      	cmp	r3, #2
 800e236:	ddf3      	ble.n	800e220 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e238:	4b05      	ldr	r3, [pc, #20]	; (800e250 <ILI9341_Draw_Pixel+0x2b0>)
 800e23a:	695b      	ldr	r3, [r3, #20]
 800e23c:	4a04      	ldr	r2, [pc, #16]	; (800e250 <ILI9341_Draw_Pixel+0x2b0>)
 800e23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e242:	6153      	str	r3, [r2, #20]
 800e244:	e000      	b.n	800e248 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e246:	bf00      	nop


}
 800e248:	3738      	adds	r7, #56	; 0x38
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	48000400 	.word	0x48000400

0800e254 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e254:	b590      	push	{r4, r7, lr}
 800e256:	b087      	sub	sp, #28
 800e258:	af02      	add	r7, sp, #8
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	4611      	mov	r1, r2
 800e260:	461a      	mov	r2, r3
 800e262:	4623      	mov	r3, r4
 800e264:	80fb      	strh	r3, [r7, #6]
 800e266:	4603      	mov	r3, r0
 800e268:	80bb      	strh	r3, [r7, #4]
 800e26a:	460b      	mov	r3, r1
 800e26c:	807b      	strh	r3, [r7, #2]
 800e26e:	4613      	mov	r3, r2
 800e270:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e272:	4b41      	ldr	r3, [pc, #260]	; (800e378 <ILI9341_Draw_Rectangle+0x124>)
 800e274:	881b      	ldrh	r3, [r3, #0]
 800e276:	b29b      	uxth	r3, r3
 800e278:	88fa      	ldrh	r2, [r7, #6]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d278      	bcs.n	800e370 <ILI9341_Draw_Rectangle+0x11c>
 800e27e:	4b3f      	ldr	r3, [pc, #252]	; (800e37c <ILI9341_Draw_Rectangle+0x128>)
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	b29b      	uxth	r3, r3
 800e284:	88ba      	ldrh	r2, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d272      	bcs.n	800e370 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e28a:	88fa      	ldrh	r2, [r7, #6]
 800e28c:	887b      	ldrh	r3, [r7, #2]
 800e28e:	4413      	add	r3, r2
 800e290:	3b01      	subs	r3, #1
 800e292:	4a39      	ldr	r2, [pc, #228]	; (800e378 <ILI9341_Draw_Rectangle+0x124>)
 800e294:	8812      	ldrh	r2, [r2, #0]
 800e296:	b292      	uxth	r2, r2
 800e298:	4293      	cmp	r3, r2
 800e29a:	db05      	blt.n	800e2a8 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e29c:	4b36      	ldr	r3, [pc, #216]	; (800e378 <ILI9341_Draw_Rectangle+0x124>)
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e2a8:	88ba      	ldrh	r2, [r7, #4]
 800e2aa:	883b      	ldrh	r3, [r7, #0]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	4a32      	ldr	r2, [pc, #200]	; (800e37c <ILI9341_Draw_Rectangle+0x128>)
 800e2b2:	8812      	ldrh	r2, [r2, #0]
 800e2b4:	b292      	uxth	r2, r2
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	db05      	blt.n	800e2c6 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e2ba:	4b30      	ldr	r3, [pc, #192]	; (800e37c <ILI9341_Draw_Rectangle+0x128>)
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	88bb      	ldrh	r3, [r7, #4]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e2c6:	88fa      	ldrh	r2, [r7, #6]
 800e2c8:	887b      	ldrh	r3, [r7, #2]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e2d2:	88ba      	ldrh	r2, [r7, #4]
 800e2d4:	883b      	ldrh	r3, [r7, #0]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	88b9      	ldrh	r1, [r7, #4]
 800e2e0:	88f8      	ldrh	r0, [r7, #6]
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	f7ff fde6 	bl	800deb4 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e2e8:	883a      	ldrh	r2, [r7, #0]
 800e2ea:	887b      	ldrh	r3, [r7, #2]
 800e2ec:	fb12 f303 	smulbb	r3, r2, r3
 800e2f0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e2f6:	89fb      	ldrh	r3, [r7, #14]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <ILI9341_Draw_Rectangle+0xc0>
 800e300:	89fb      	ldrh	r3, [r7, #14]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d906      	bls.n	800e314 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e306:	2301      	movs	r3, #1
 800e308:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e30a:	89fb      	ldrh	r3, [r7, #14]
 800e30c:	085b      	lsrs	r3, r3, #1
 800e30e:	b29b      	uxth	r3, r3
 800e310:	005b      	lsls	r3, r3, #1
 800e312:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e314:	89fc      	ldrh	r4, [r7, #14]
 800e316:	8c3a      	ldrh	r2, [r7, #32]
 800e318:	88b9      	ldrh	r1, [r7, #4]
 800e31a:	88f8      	ldrh	r0, [r7, #6]
 800e31c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	4623      	mov	r3, r4
 800e324:	f000 f8a8 	bl	800e478 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e328:	7b7b      	ldrb	r3, [r7, #13]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d021      	beq.n	800e372 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e32e:	88fa      	ldrh	r2, [r7, #6]
 800e330:	887b      	ldrh	r3, [r7, #2]
 800e332:	4413      	add	r3, r2
 800e334:	b29b      	uxth	r3, r3
 800e336:	3b02      	subs	r3, #2
 800e338:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e33a:	88ba      	ldrh	r2, [r7, #4]
 800e33c:	883b      	ldrh	r3, [r7, #0]
 800e33e:	4413      	add	r3, r2
 800e340:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e342:	3b01      	subs	r3, #1
 800e344:	b29b      	uxth	r3, r3
 800e346:	8c3a      	ldrh	r2, [r7, #32]
 800e348:	4619      	mov	r1, r3
 800e34a:	f7ff fe29 	bl	800dfa0 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e34e:	88fa      	ldrh	r2, [r7, #6]
 800e350:	887b      	ldrh	r3, [r7, #2]
 800e352:	4413      	add	r3, r2
 800e354:	b29b      	uxth	r3, r3
 800e356:	3b01      	subs	r3, #1
 800e358:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e35a:	88ba      	ldrh	r2, [r7, #4]
 800e35c:	883b      	ldrh	r3, [r7, #0]
 800e35e:	4413      	add	r3, r2
 800e360:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e362:	3b01      	subs	r3, #1
 800e364:	b29b      	uxth	r3, r3
 800e366:	8c3a      	ldrh	r2, [r7, #32]
 800e368:	4619      	mov	r1, r3
 800e36a:	f7ff fe19 	bl	800dfa0 <ILI9341_Draw_Pixel>
 800e36e:	e000      	b.n	800e372 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e370:	bf00      	nop
							colour);
	}
}
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	bd90      	pop	{r4, r7, pc}
 800e378:	20000cae 	.word	0x20000cae
 800e37c:	20000cac 	.word	0x20000cac

0800e380 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e38e:	2036      	movs	r0, #54	; 0x36
 800e390:	f000 f922 	bl	800e5d8 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	2b03      	cmp	r3, #3
 800e398:	d836      	bhi.n	800e408 <ILI9341_Set_Rotation+0x88>
 800e39a:	a201      	add	r2, pc, #4	; (adr r2, 800e3a0 <ILI9341_Set_Rotation+0x20>)
 800e39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a0:	0800e3b1 	.word	0x0800e3b1
 800e3a4:	0800e3c7 	.word	0x0800e3c7
 800e3a8:	0800e3dd 	.word	0x0800e3dd
 800e3ac:	0800e3f3 	.word	0x0800e3f3
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e3b0:	2048      	movs	r0, #72	; 0x48
 800e3b2:	f000 f943 	bl	800e63c <_LCD_SendData>
			LCD_WIDTH = 240;
 800e3b6:	4b17      	ldr	r3, [pc, #92]	; (800e414 <ILI9341_Set_Rotation+0x94>)
 800e3b8:	22f0      	movs	r2, #240	; 0xf0
 800e3ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e3bc:	4b16      	ldr	r3, [pc, #88]	; (800e418 <ILI9341_Set_Rotation+0x98>)
 800e3be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e3c2:	801a      	strh	r2, [r3, #0]
			break;
 800e3c4:	e021      	b.n	800e40a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e3c6:	2028      	movs	r0, #40	; 0x28
 800e3c8:	f000 f938 	bl	800e63c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e3cc:	4b11      	ldr	r3, [pc, #68]	; (800e414 <ILI9341_Set_Rotation+0x94>)
 800e3ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e3d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e3d4:	4b10      	ldr	r3, [pc, #64]	; (800e418 <ILI9341_Set_Rotation+0x98>)
 800e3d6:	22f0      	movs	r2, #240	; 0xf0
 800e3d8:	801a      	strh	r2, [r3, #0]
			break;
 800e3da:	e016      	b.n	800e40a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e3dc:	2088      	movs	r0, #136	; 0x88
 800e3de:	f000 f92d 	bl	800e63c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e3e2:	4b0c      	ldr	r3, [pc, #48]	; (800e414 <ILI9341_Set_Rotation+0x94>)
 800e3e4:	22f0      	movs	r2, #240	; 0xf0
 800e3e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e3e8:	4b0b      	ldr	r3, [pc, #44]	; (800e418 <ILI9341_Set_Rotation+0x98>)
 800e3ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e3ee:	801a      	strh	r2, [r3, #0]
			break;
 800e3f0:	e00b      	b.n	800e40a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e3f2:	20e8      	movs	r0, #232	; 0xe8
 800e3f4:	f000 f922 	bl	800e63c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e3f8:	4b06      	ldr	r3, [pc, #24]	; (800e414 <ILI9341_Set_Rotation+0x94>)
 800e3fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e3fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e400:	4b05      	ldr	r3, [pc, #20]	; (800e418 <ILI9341_Set_Rotation+0x98>)
 800e402:	22f0      	movs	r2, #240	; 0xf0
 800e404:	801a      	strh	r2, [r3, #0]
			break;
 800e406:	e000      	b.n	800e40a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e408:	bf00      	nop
	}
}
 800e40a:	bf00      	nop
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000cae 	.word	0x20000cae
 800e418:	20000cac 	.word	0x20000cac

0800e41c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e420:	4b05      	ldr	r3, [pc, #20]	; (800e438 <_LCD_Enable+0x1c>)
 800e422:	695b      	ldr	r3, [r3, #20]
 800e424:	4a04      	ldr	r2, [pc, #16]	; (800e438 <_LCD_Enable+0x1c>)
 800e426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e42a:	6153      	str	r3, [r2, #20]
}
 800e42c:	bf00      	nop
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	48000400 	.word	0x48000400

0800e43c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e440:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <_LCD_Reset+0x38>)
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	4a0b      	ldr	r2, [pc, #44]	; (800e474 <_LCD_Reset+0x38>)
 800e446:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e44a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e44c:	20c8      	movs	r0, #200	; 0xc8
 800e44e:	f7fa f91b 	bl	8008688 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <_LCD_Reset+0x38>)
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	4a07      	ldr	r2, [pc, #28]	; (800e474 <_LCD_Reset+0x38>)
 800e458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e45c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e45e:	20c8      	movs	r0, #200	; 0xc8
 800e460:	f7fa f912 	bl	8008688 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e464:	4b03      	ldr	r3, [pc, #12]	; (800e474 <_LCD_Reset+0x38>)
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	4a02      	ldr	r2, [pc, #8]	; (800e474 <_LCD_Reset+0x38>)
 800e46a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e46e:	6153      	str	r3, [r2, #20]
}
 800e470:	bf00      	nop
 800e472:	bd80      	pop	{r7, pc}
 800e474:	48000400 	.word	0x48000400

0800e478 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e478:	b5b0      	push	{r4, r5, r7, lr}
 800e47a:	b08e      	sub	sp, #56	; 0x38
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	607b      	str	r3, [r7, #4]
 800e480:	4603      	mov	r3, r0
 800e482:	81fb      	strh	r3, [r7, #14]
 800e484:	460b      	mov	r3, r1
 800e486:	81bb      	strh	r3, [r7, #12]
 800e488:	4613      	mov	r3, r2
 800e48a:	817b      	strh	r3, [r7, #10]
 800e48c:	466b      	mov	r3, sp
 800e48e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	4a4d      	ldr	r2, [pc, #308]	; (800e5d0 <_LCD_Write_Frame+0x158>)
 800e49a:	8812      	ldrh	r2, [r2, #0]
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d202      	bcs.n	800e4a6 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4a4:	e002      	b.n	800e4ac <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e4a6:	4b4a      	ldr	r3, [pc, #296]	; (800e5d0 <_LCD_Write_Frame+0x158>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e4ac:	897b      	ldrh	r3, [r7, #10]
 800e4ae:	0a1b      	lsrs	r3, r3, #8
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e4b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	61bb      	str	r3, [r7, #24]
 800e4bc:	4601      	mov	r1, r0
 800e4be:	f04f 0200 	mov.w	r2, #0
 800e4c2:	f04f 0300 	mov.w	r3, #0
 800e4c6:	f04f 0400 	mov.w	r4, #0
 800e4ca:	00d4      	lsls	r4, r2, #3
 800e4cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e4d0:	00cb      	lsls	r3, r1, #3
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	f04f 0200 	mov.w	r2, #0
 800e4d8:	f04f 0300 	mov.w	r3, #0
 800e4dc:	f04f 0400 	mov.w	r4, #0
 800e4e0:	00d4      	lsls	r4, r2, #3
 800e4e2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e4e6:	00cb      	lsls	r3, r1, #3
 800e4e8:	1dc3      	adds	r3, r0, #7
 800e4ea:	08db      	lsrs	r3, r3, #3
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	ebad 0d03 	sub.w	sp, sp, r3
 800e4f2:	466b      	mov	r3, sp
 800e4f4:	3300      	adds	r3, #0
 800e4f6:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	633b      	str	r3, [r7, #48]	; 0x30
 800e4fc:	e00d      	b.n	800e51a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e502:	4413      	add	r3, r2
 800e504:	7ffa      	ldrb	r2, [r7, #31]
 800e506:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50a:	3301      	adds	r3, #1
 800e50c:	897a      	ldrh	r2, [r7, #10]
 800e50e:	b2d1      	uxtb	r1, r2
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	3302      	adds	r3, #2
 800e518:	633b      	str	r3, [r7, #48]	; 0x30
 800e51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	429a      	cmp	r2, r3
 800e520:	d3ed      	bcc.n	800e4fe <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e528:	2301      	movs	r3, #1
 800e52a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00d      	beq.n	800e552 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e536:	693a      	ldr	r2, [r7, #16]
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e53e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e544:	fbb3 f2f2 	udiv	r2, r3, r2
 800e548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e54a:	fb01 f202 	mul.w	r2, r1, r2
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e552:	4b20      	ldr	r3, [pc, #128]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	4a1f      	ldr	r2, [pc, #124]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e55e:	4b1d      	ldr	r3, [pc, #116]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e560:	695b      	ldr	r3, [r3, #20]
 800e562:	4a1c      	ldr	r2, [pc, #112]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e568:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800e56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00f      	beq.n	800e590 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e570:	2300      	movs	r3, #0
 800e572:	627b      	str	r3, [r7, #36]	; 0x24
 800e574:	e008      	b.n	800e588 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	230a      	movs	r3, #10
 800e57a:	2200      	movs	r2, #0
 800e57c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e57e:	f000 f8c1 	bl	800e704 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	3301      	adds	r3, #1
 800e586:	627b      	str	r3, [r7, #36]	; 0x24
 800e588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d3f2      	bcc.n	800e576 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e590:	6978      	ldr	r0, [r7, #20]
 800e592:	230a      	movs	r3, #10
 800e594:	2200      	movs	r2, #0
 800e596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e598:	f000 f8b4 	bl	800e704 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e59c:	2300      	movs	r3, #0
 800e59e:	623b      	str	r3, [r7, #32]
 800e5a0:	e008      	b.n	800e5b4 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5a2:	4b0c      	ldr	r3, [pc, #48]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	4a0b      	ldr	r2, [pc, #44]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e5a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ac:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	623b      	str	r3, [r7, #32]
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	ddf3      	ble.n	800e5a2 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e5ba:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e5bc:	695b      	ldr	r3, [r3, #20]
 800e5be:	4a05      	ldr	r2, [pc, #20]	; (800e5d4 <_LCD_Write_Frame+0x15c>)
 800e5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c4:	6153      	str	r3, [r2, #20]
 800e5c6:	46ad      	mov	sp, r5

}
 800e5c8:	bf00      	nop
 800e5ca:	3738      	adds	r7, #56	; 0x38
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bdb0      	pop	{r4, r5, r7, pc}
 800e5d0:	20000cb0 	.word	0x20000cb0
 800e5d4:	48000400 	.word	0x48000400

0800e5d8 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5e2:	4b15      	ldr	r3, [pc, #84]	; (800e638 <_LCD_SendCommand+0x60>)
 800e5e4:	695b      	ldr	r3, [r3, #20]
 800e5e6:	4a14      	ldr	r2, [pc, #80]	; (800e638 <_LCD_SendCommand+0x60>)
 800e5e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ec:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e5ee:	4b12      	ldr	r3, [pc, #72]	; (800e638 <_LCD_SendCommand+0x60>)
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	4a11      	ldr	r2, [pc, #68]	; (800e638 <_LCD_SendCommand+0x60>)
 800e5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5f8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	2100      	movs	r1, #0
 800e600:	4618      	mov	r0, r3
 800e602:	f000 f84d 	bl	800e6a0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
 800e60a:	e008      	b.n	800e61e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <_LCD_SendCommand+0x60>)
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	4a09      	ldr	r2, [pc, #36]	; (800e638 <_LCD_SendCommand+0x60>)
 800e612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e616:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	3301      	adds	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b02      	cmp	r3, #2
 800e622:	ddf3      	ble.n	800e60c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e624:	4b04      	ldr	r3, [pc, #16]	; (800e638 <_LCD_SendCommand+0x60>)
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	4a03      	ldr	r2, [pc, #12]	; (800e638 <_LCD_SendCommand+0x60>)
 800e62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e62e:	6153      	str	r3, [r2, #20]
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	48000400 	.word	0x48000400

0800e63c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	4603      	mov	r3, r0
 800e644:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e646:	4b15      	ldr	r3, [pc, #84]	; (800e69c <_LCD_SendData+0x60>)
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	4a14      	ldr	r2, [pc, #80]	; (800e69c <_LCD_SendData+0x60>)
 800e64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e650:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e652:	4b12      	ldr	r3, [pc, #72]	; (800e69c <_LCD_SendData+0x60>)
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	4a11      	ldr	r2, [pc, #68]	; (800e69c <_LCD_SendData+0x60>)
 800e658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e65c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	2200      	movs	r2, #0
 800e662:	2100      	movs	r1, #0
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f81b 	bl	800e6a0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e66a:	2300      	movs	r3, #0
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e008      	b.n	800e682 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e670:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <_LCD_SendData+0x60>)
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	4a09      	ldr	r2, [pc, #36]	; (800e69c <_LCD_SendData+0x60>)
 800e676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e67a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	3301      	adds	r3, #1
 800e680:	60fb      	str	r3, [r7, #12]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2b02      	cmp	r3, #2
 800e686:	ddf3      	ble.n	800e670 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e688:	4b04      	ldr	r3, [pc, #16]	; (800e69c <_LCD_SendData+0x60>)
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	4a03      	ldr	r2, [pc, #12]	; (800e69c <_LCD_SendData+0x60>)
 800e68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e692:	6153      	str	r3, [r2, #20]
}
 800e694:	bf00      	nop
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	48000400 	.word	0x48000400

0800e6a0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	71fb      	strb	r3, [r7, #7]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	71bb      	strb	r3, [r7, #6]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	e003      	b.n	800e6c0 <_SPI_SendByte+0x20>
   		asm("nop");
 800e6b8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	79bb      	ldrb	r3, [r7, #6]
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	dbf7      	blt.n	800e6b8 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e6c8:	4b0c      	ldr	r3, [pc, #48]	; (800e6fc <_SPI_SendByte+0x5c>)
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	f003 0302 	and.w	r3, r3, #2
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d102      	bne.n	800e6da <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e6d4:	4a0a      	ldr	r2, [pc, #40]	; (800e700 <_SPI_SendByte+0x60>)
 800e6d6:	79fb      	ldrb	r3, [r7, #7]
 800e6d8:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60bb      	str	r3, [r7, #8]
 800e6de:	e003      	b.n	800e6e8 <_SPI_SendByte+0x48>
   		asm("nop");
 800e6e0:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	60bb      	str	r3, [r7, #8]
 800e6e8:	797b      	ldrb	r3, [r7, #5]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	dbf7      	blt.n	800e6e0 <_SPI_SendByte+0x40>

#endif

}
 800e6f0:	bf00      	nop
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	40003c00 	.word	0x40003c00
 800e700:	40003c0c 	.word	0x40003c0c

0800e704 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e704:	b480      	push	{r7}
 800e706:	b089      	sub	sp, #36	; 0x24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	4611      	mov	r1, r2
 800e710:	461a      	mov	r2, r3
 800e712:	460b      	mov	r3, r1
 800e714:	71fb      	strb	r3, [r7, #7]
 800e716:	4613      	mov	r3, r2
 800e718:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e71a:	2300      	movs	r3, #0
 800e71c:	61fb      	str	r3, [r7, #28]
 800e71e:	e003      	b.n	800e728 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e720:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	3301      	adds	r3, #1
 800e726:	61fb      	str	r3, [r7, #28]
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	69fa      	ldr	r2, [r7, #28]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	dbf7      	blt.n	800e720 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e734:	e01d      	b.n	800e772 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e736:	4b1c      	ldr	r3, [pc, #112]	; (800e7a8 <_SPI_SendByteMultiByte+0xa4>)
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d117      	bne.n	800e772 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d90a      	bls.n	800e75e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	881a      	ldrh	r2, [r3, #0]
 800e74c:	4b16      	ldr	r3, [pc, #88]	; (800e7a8 <_SPI_SendByteMultiByte+0xa4>)
 800e74e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	3302      	adds	r3, #2
 800e754:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	3b02      	subs	r3, #2
 800e75a:	60bb      	str	r3, [r7, #8]
 800e75c:	e009      	b.n	800e772 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e75e:	4a13      	ldr	r2, [pc, #76]	; (800e7ac <_SPI_SendByteMultiByte+0xa8>)
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	3301      	adds	r3, #1
 800e76a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	3b01      	subs	r3, #1
 800e770:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1de      	bne.n	800e736 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e778:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <_SPI_SendByteMultiByte+0xa4>)
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	4a0a      	ldr	r2, [pc, #40]	; (800e7a8 <_SPI_SendByteMultiByte+0xa4>)
 800e77e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e782:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	e003      	b.n	800e792 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e78a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	3301      	adds	r3, #1
 800e790:	617b      	str	r3, [r7, #20]
 800e792:	79bb      	ldrb	r3, [r7, #6]
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	429a      	cmp	r2, r3
 800e798:	dbf7      	blt.n	800e78a <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e79a:	bf00      	nop
 800e79c:	3724      	adds	r7, #36	; 0x24
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	40003c00 	.word	0x40003c00
 800e7ac:	40003c0c 	.word	0x40003c0c

0800e7b0 <__errno>:
 800e7b0:	4b01      	ldr	r3, [pc, #4]	; (800e7b8 <__errno+0x8>)
 800e7b2:	6818      	ldr	r0, [r3, #0]
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	200018e4 	.word	0x200018e4

0800e7bc <__libc_init_array>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	4e0d      	ldr	r6, [pc, #52]	; (800e7f4 <__libc_init_array+0x38>)
 800e7c0:	4c0d      	ldr	r4, [pc, #52]	; (800e7f8 <__libc_init_array+0x3c>)
 800e7c2:	1ba4      	subs	r4, r4, r6
 800e7c4:	10a4      	asrs	r4, r4, #2
 800e7c6:	2500      	movs	r5, #0
 800e7c8:	42a5      	cmp	r5, r4
 800e7ca:	d109      	bne.n	800e7e0 <__libc_init_array+0x24>
 800e7cc:	4e0b      	ldr	r6, [pc, #44]	; (800e7fc <__libc_init_array+0x40>)
 800e7ce:	4c0c      	ldr	r4, [pc, #48]	; (800e800 <__libc_init_array+0x44>)
 800e7d0:	f003 ff48 	bl	8012664 <_init>
 800e7d4:	1ba4      	subs	r4, r4, r6
 800e7d6:	10a4      	asrs	r4, r4, #2
 800e7d8:	2500      	movs	r5, #0
 800e7da:	42a5      	cmp	r5, r4
 800e7dc:	d105      	bne.n	800e7ea <__libc_init_array+0x2e>
 800e7de:	bd70      	pop	{r4, r5, r6, pc}
 800e7e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e7e4:	4798      	blx	r3
 800e7e6:	3501      	adds	r5, #1
 800e7e8:	e7ee      	b.n	800e7c8 <__libc_init_array+0xc>
 800e7ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e7ee:	4798      	blx	r3
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	e7f2      	b.n	800e7da <__libc_init_array+0x1e>
 800e7f4:	08013ad8 	.word	0x08013ad8
 800e7f8:	08013ad8 	.word	0x08013ad8
 800e7fc:	08013ad8 	.word	0x08013ad8
 800e800:	08013adc 	.word	0x08013adc

0800e804 <memset>:
 800e804:	4402      	add	r2, r0
 800e806:	4603      	mov	r3, r0
 800e808:	4293      	cmp	r3, r2
 800e80a:	d100      	bne.n	800e80e <memset+0xa>
 800e80c:	4770      	bx	lr
 800e80e:	f803 1b01 	strb.w	r1, [r3], #1
 800e812:	e7f9      	b.n	800e808 <memset+0x4>

0800e814 <__cvt>:
 800e814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e818:	ec55 4b10 	vmov	r4, r5, d0
 800e81c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e81e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e822:	2d00      	cmp	r5, #0
 800e824:	460e      	mov	r6, r1
 800e826:	4691      	mov	r9, r2
 800e828:	4619      	mov	r1, r3
 800e82a:	bfb8      	it	lt
 800e82c:	4622      	movlt	r2, r4
 800e82e:	462b      	mov	r3, r5
 800e830:	f027 0720 	bic.w	r7, r7, #32
 800e834:	bfbb      	ittet	lt
 800e836:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e83a:	461d      	movlt	r5, r3
 800e83c:	2300      	movge	r3, #0
 800e83e:	232d      	movlt	r3, #45	; 0x2d
 800e840:	bfb8      	it	lt
 800e842:	4614      	movlt	r4, r2
 800e844:	2f46      	cmp	r7, #70	; 0x46
 800e846:	700b      	strb	r3, [r1, #0]
 800e848:	d004      	beq.n	800e854 <__cvt+0x40>
 800e84a:	2f45      	cmp	r7, #69	; 0x45
 800e84c:	d100      	bne.n	800e850 <__cvt+0x3c>
 800e84e:	3601      	adds	r6, #1
 800e850:	2102      	movs	r1, #2
 800e852:	e000      	b.n	800e856 <__cvt+0x42>
 800e854:	2103      	movs	r1, #3
 800e856:	ab03      	add	r3, sp, #12
 800e858:	9301      	str	r3, [sp, #4]
 800e85a:	ab02      	add	r3, sp, #8
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	4632      	mov	r2, r6
 800e860:	4653      	mov	r3, sl
 800e862:	ec45 4b10 	vmov	d0, r4, r5
 800e866:	f000 fe27 	bl	800f4b8 <_dtoa_r>
 800e86a:	2f47      	cmp	r7, #71	; 0x47
 800e86c:	4680      	mov	r8, r0
 800e86e:	d102      	bne.n	800e876 <__cvt+0x62>
 800e870:	f019 0f01 	tst.w	r9, #1
 800e874:	d026      	beq.n	800e8c4 <__cvt+0xb0>
 800e876:	2f46      	cmp	r7, #70	; 0x46
 800e878:	eb08 0906 	add.w	r9, r8, r6
 800e87c:	d111      	bne.n	800e8a2 <__cvt+0x8e>
 800e87e:	f898 3000 	ldrb.w	r3, [r8]
 800e882:	2b30      	cmp	r3, #48	; 0x30
 800e884:	d10a      	bne.n	800e89c <__cvt+0x88>
 800e886:	2200      	movs	r2, #0
 800e888:	2300      	movs	r3, #0
 800e88a:	4620      	mov	r0, r4
 800e88c:	4629      	mov	r1, r5
 800e88e:	f7f2 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800e892:	b918      	cbnz	r0, 800e89c <__cvt+0x88>
 800e894:	f1c6 0601 	rsb	r6, r6, #1
 800e898:	f8ca 6000 	str.w	r6, [sl]
 800e89c:	f8da 3000 	ldr.w	r3, [sl]
 800e8a0:	4499      	add	r9, r3
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7f2 f935 	bl	8000b18 <__aeabi_dcmpeq>
 800e8ae:	b938      	cbnz	r0, 800e8c0 <__cvt+0xac>
 800e8b0:	2230      	movs	r2, #48	; 0x30
 800e8b2:	9b03      	ldr	r3, [sp, #12]
 800e8b4:	454b      	cmp	r3, r9
 800e8b6:	d205      	bcs.n	800e8c4 <__cvt+0xb0>
 800e8b8:	1c59      	adds	r1, r3, #1
 800e8ba:	9103      	str	r1, [sp, #12]
 800e8bc:	701a      	strb	r2, [r3, #0]
 800e8be:	e7f8      	b.n	800e8b2 <__cvt+0x9e>
 800e8c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8c8:	eba3 0308 	sub.w	r3, r3, r8
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	b004      	add	sp, #16
 800e8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e8d6 <__exponent>:
 800e8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8d8:	2900      	cmp	r1, #0
 800e8da:	4604      	mov	r4, r0
 800e8dc:	bfba      	itte	lt
 800e8de:	4249      	neglt	r1, r1
 800e8e0:	232d      	movlt	r3, #45	; 0x2d
 800e8e2:	232b      	movge	r3, #43	; 0x2b
 800e8e4:	2909      	cmp	r1, #9
 800e8e6:	f804 2b02 	strb.w	r2, [r4], #2
 800e8ea:	7043      	strb	r3, [r0, #1]
 800e8ec:	dd20      	ble.n	800e930 <__exponent+0x5a>
 800e8ee:	f10d 0307 	add.w	r3, sp, #7
 800e8f2:	461f      	mov	r7, r3
 800e8f4:	260a      	movs	r6, #10
 800e8f6:	fb91 f5f6 	sdiv	r5, r1, r6
 800e8fa:	fb06 1115 	mls	r1, r6, r5, r1
 800e8fe:	3130      	adds	r1, #48	; 0x30
 800e900:	2d09      	cmp	r5, #9
 800e902:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e906:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e90a:	4629      	mov	r1, r5
 800e90c:	dc09      	bgt.n	800e922 <__exponent+0x4c>
 800e90e:	3130      	adds	r1, #48	; 0x30
 800e910:	3b02      	subs	r3, #2
 800e912:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e916:	42bb      	cmp	r3, r7
 800e918:	4622      	mov	r2, r4
 800e91a:	d304      	bcc.n	800e926 <__exponent+0x50>
 800e91c:	1a10      	subs	r0, r2, r0
 800e91e:	b003      	add	sp, #12
 800e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e922:	4613      	mov	r3, r2
 800e924:	e7e7      	b.n	800e8f6 <__exponent+0x20>
 800e926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e92a:	f804 2b01 	strb.w	r2, [r4], #1
 800e92e:	e7f2      	b.n	800e916 <__exponent+0x40>
 800e930:	2330      	movs	r3, #48	; 0x30
 800e932:	4419      	add	r1, r3
 800e934:	7083      	strb	r3, [r0, #2]
 800e936:	1d02      	adds	r2, r0, #4
 800e938:	70c1      	strb	r1, [r0, #3]
 800e93a:	e7ef      	b.n	800e91c <__exponent+0x46>

0800e93c <_printf_float>:
 800e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	b08d      	sub	sp, #52	; 0x34
 800e942:	460c      	mov	r4, r1
 800e944:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e948:	4616      	mov	r6, r2
 800e94a:	461f      	mov	r7, r3
 800e94c:	4605      	mov	r5, r0
 800e94e:	f001 fce5 	bl	801031c <_localeconv_r>
 800e952:	6803      	ldr	r3, [r0, #0]
 800e954:	9304      	str	r3, [sp, #16]
 800e956:	4618      	mov	r0, r3
 800e958:	f7f1 fc62 	bl	8000220 <strlen>
 800e95c:	2300      	movs	r3, #0
 800e95e:	930a      	str	r3, [sp, #40]	; 0x28
 800e960:	f8d8 3000 	ldr.w	r3, [r8]
 800e964:	9005      	str	r0, [sp, #20]
 800e966:	3307      	adds	r3, #7
 800e968:	f023 0307 	bic.w	r3, r3, #7
 800e96c:	f103 0208 	add.w	r2, r3, #8
 800e970:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e974:	f8d4 b000 	ldr.w	fp, [r4]
 800e978:	f8c8 2000 	str.w	r2, [r8]
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e984:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e98c:	9307      	str	r3, [sp, #28]
 800e98e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e996:	4ba7      	ldr	r3, [pc, #668]	; (800ec34 <_printf_float+0x2f8>)
 800e998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e99c:	f7f2 f8ee 	bl	8000b7c <__aeabi_dcmpun>
 800e9a0:	bb70      	cbnz	r0, 800ea00 <_printf_float+0xc4>
 800e9a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9a6:	4ba3      	ldr	r3, [pc, #652]	; (800ec34 <_printf_float+0x2f8>)
 800e9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9ac:	f7f2 f8c8 	bl	8000b40 <__aeabi_dcmple>
 800e9b0:	bb30      	cbnz	r0, 800ea00 <_printf_float+0xc4>
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f2 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 800e9be:	b110      	cbz	r0, 800e9c6 <_printf_float+0x8a>
 800e9c0:	232d      	movs	r3, #45	; 0x2d
 800e9c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9c6:	4a9c      	ldr	r2, [pc, #624]	; (800ec38 <_printf_float+0x2fc>)
 800e9c8:	4b9c      	ldr	r3, [pc, #624]	; (800ec3c <_printf_float+0x300>)
 800e9ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e9ce:	bf8c      	ite	hi
 800e9d0:	4690      	movhi	r8, r2
 800e9d2:	4698      	movls	r8, r3
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	f02b 0204 	bic.w	r2, fp, #4
 800e9da:	6123      	str	r3, [r4, #16]
 800e9dc:	6022      	str	r2, [r4, #0]
 800e9de:	f04f 0900 	mov.w	r9, #0
 800e9e2:	9700      	str	r7, [sp, #0]
 800e9e4:	4633      	mov	r3, r6
 800e9e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	f000 f9e6 	bl	800edbc <_printf_common>
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	f040 808d 	bne.w	800eb10 <_printf_float+0x1d4>
 800e9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9fa:	b00d      	add	sp, #52	; 0x34
 800e9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea00:	4642      	mov	r2, r8
 800ea02:	464b      	mov	r3, r9
 800ea04:	4640      	mov	r0, r8
 800ea06:	4649      	mov	r1, r9
 800ea08:	f7f2 f8b8 	bl	8000b7c <__aeabi_dcmpun>
 800ea0c:	b110      	cbz	r0, 800ea14 <_printf_float+0xd8>
 800ea0e:	4a8c      	ldr	r2, [pc, #560]	; (800ec40 <_printf_float+0x304>)
 800ea10:	4b8c      	ldr	r3, [pc, #560]	; (800ec44 <_printf_float+0x308>)
 800ea12:	e7da      	b.n	800e9ca <_printf_float+0x8e>
 800ea14:	6861      	ldr	r1, [r4, #4]
 800ea16:	1c4b      	adds	r3, r1, #1
 800ea18:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ea1c:	a80a      	add	r0, sp, #40	; 0x28
 800ea1e:	d13e      	bne.n	800ea9e <_printf_float+0x162>
 800ea20:	2306      	movs	r3, #6
 800ea22:	6063      	str	r3, [r4, #4]
 800ea24:	2300      	movs	r3, #0
 800ea26:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ea2a:	ab09      	add	r3, sp, #36	; 0x24
 800ea2c:	9300      	str	r3, [sp, #0]
 800ea2e:	ec49 8b10 	vmov	d0, r8, r9
 800ea32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea36:	6022      	str	r2, [r4, #0]
 800ea38:	f8cd a004 	str.w	sl, [sp, #4]
 800ea3c:	6861      	ldr	r1, [r4, #4]
 800ea3e:	4628      	mov	r0, r5
 800ea40:	f7ff fee8 	bl	800e814 <__cvt>
 800ea44:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ea48:	2b47      	cmp	r3, #71	; 0x47
 800ea4a:	4680      	mov	r8, r0
 800ea4c:	d109      	bne.n	800ea62 <_printf_float+0x126>
 800ea4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea50:	1cd8      	adds	r0, r3, #3
 800ea52:	db02      	blt.n	800ea5a <_printf_float+0x11e>
 800ea54:	6862      	ldr	r2, [r4, #4]
 800ea56:	4293      	cmp	r3, r2
 800ea58:	dd47      	ble.n	800eaea <_printf_float+0x1ae>
 800ea5a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea5e:	fa5f fa8a 	uxtb.w	sl, sl
 800ea62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ea66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea68:	d824      	bhi.n	800eab4 <_printf_float+0x178>
 800ea6a:	3901      	subs	r1, #1
 800ea6c:	4652      	mov	r2, sl
 800ea6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea72:	9109      	str	r1, [sp, #36]	; 0x24
 800ea74:	f7ff ff2f 	bl	800e8d6 <__exponent>
 800ea78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea7a:	1813      	adds	r3, r2, r0
 800ea7c:	2a01      	cmp	r2, #1
 800ea7e:	4681      	mov	r9, r0
 800ea80:	6123      	str	r3, [r4, #16]
 800ea82:	dc02      	bgt.n	800ea8a <_printf_float+0x14e>
 800ea84:	6822      	ldr	r2, [r4, #0]
 800ea86:	07d1      	lsls	r1, r2, #31
 800ea88:	d501      	bpl.n	800ea8e <_printf_float+0x152>
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d0a5      	beq.n	800e9e2 <_printf_float+0xa6>
 800ea96:	232d      	movs	r3, #45	; 0x2d
 800ea98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea9c:	e7a1      	b.n	800e9e2 <_printf_float+0xa6>
 800ea9e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800eaa2:	f000 8177 	beq.w	800ed94 <_printf_float+0x458>
 800eaa6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800eaaa:	d1bb      	bne.n	800ea24 <_printf_float+0xe8>
 800eaac:	2900      	cmp	r1, #0
 800eaae:	d1b9      	bne.n	800ea24 <_printf_float+0xe8>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e7b6      	b.n	800ea22 <_printf_float+0xe6>
 800eab4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800eab8:	d119      	bne.n	800eaee <_printf_float+0x1b2>
 800eaba:	2900      	cmp	r1, #0
 800eabc:	6863      	ldr	r3, [r4, #4]
 800eabe:	dd0c      	ble.n	800eada <_printf_float+0x19e>
 800eac0:	6121      	str	r1, [r4, #16]
 800eac2:	b913      	cbnz	r3, 800eaca <_printf_float+0x18e>
 800eac4:	6822      	ldr	r2, [r4, #0]
 800eac6:	07d2      	lsls	r2, r2, #31
 800eac8:	d502      	bpl.n	800ead0 <_printf_float+0x194>
 800eaca:	3301      	adds	r3, #1
 800eacc:	440b      	add	r3, r1
 800eace:	6123      	str	r3, [r4, #16]
 800ead0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead2:	65a3      	str	r3, [r4, #88]	; 0x58
 800ead4:	f04f 0900 	mov.w	r9, #0
 800ead8:	e7d9      	b.n	800ea8e <_printf_float+0x152>
 800eada:	b913      	cbnz	r3, 800eae2 <_printf_float+0x1a6>
 800eadc:	6822      	ldr	r2, [r4, #0]
 800eade:	07d0      	lsls	r0, r2, #31
 800eae0:	d501      	bpl.n	800eae6 <_printf_float+0x1aa>
 800eae2:	3302      	adds	r3, #2
 800eae4:	e7f3      	b.n	800eace <_printf_float+0x192>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e7f1      	b.n	800eace <_printf_float+0x192>
 800eaea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800eaee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	db05      	blt.n	800eb02 <_printf_float+0x1c6>
 800eaf6:	6822      	ldr	r2, [r4, #0]
 800eaf8:	6123      	str	r3, [r4, #16]
 800eafa:	07d1      	lsls	r1, r2, #31
 800eafc:	d5e8      	bpl.n	800ead0 <_printf_float+0x194>
 800eafe:	3301      	adds	r3, #1
 800eb00:	e7e5      	b.n	800eace <_printf_float+0x192>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	bfd4      	ite	le
 800eb06:	f1c3 0302 	rsble	r3, r3, #2
 800eb0a:	2301      	movgt	r3, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	e7de      	b.n	800eace <_printf_float+0x192>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	055a      	lsls	r2, r3, #21
 800eb14:	d407      	bmi.n	800eb26 <_printf_float+0x1ea>
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	4642      	mov	r2, r8
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b8      	blx	r7
 800eb20:	3001      	adds	r0, #1
 800eb22:	d12b      	bne.n	800eb7c <_printf_float+0x240>
 800eb24:	e767      	b.n	800e9f6 <_printf_float+0xba>
 800eb26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eb2a:	f240 80dc 	bls.w	800ece6 <_printf_float+0x3aa>
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2300      	movs	r3, #0
 800eb32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb36:	f7f1 ffef 	bl	8000b18 <__aeabi_dcmpeq>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d033      	beq.n	800eba6 <_printf_float+0x26a>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	4a41      	ldr	r2, [pc, #260]	; (800ec48 <_printf_float+0x30c>)
 800eb42:	4631      	mov	r1, r6
 800eb44:	4628      	mov	r0, r5
 800eb46:	47b8      	blx	r7
 800eb48:	3001      	adds	r0, #1
 800eb4a:	f43f af54 	beq.w	800e9f6 <_printf_float+0xba>
 800eb4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb52:	429a      	cmp	r2, r3
 800eb54:	db02      	blt.n	800eb5c <_printf_float+0x220>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	07d8      	lsls	r0, r3, #31
 800eb5a:	d50f      	bpl.n	800eb7c <_printf_float+0x240>
 800eb5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb60:	4631      	mov	r1, r6
 800eb62:	4628      	mov	r0, r5
 800eb64:	47b8      	blx	r7
 800eb66:	3001      	adds	r0, #1
 800eb68:	f43f af45 	beq.w	800e9f6 <_printf_float+0xba>
 800eb6c:	f04f 0800 	mov.w	r8, #0
 800eb70:	f104 091a 	add.w	r9, r4, #26
 800eb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb76:	3b01      	subs	r3, #1
 800eb78:	4543      	cmp	r3, r8
 800eb7a:	dc09      	bgt.n	800eb90 <_printf_float+0x254>
 800eb7c:	6823      	ldr	r3, [r4, #0]
 800eb7e:	079b      	lsls	r3, r3, #30
 800eb80:	f100 8103 	bmi.w	800ed8a <_printf_float+0x44e>
 800eb84:	68e0      	ldr	r0, [r4, #12]
 800eb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb88:	4298      	cmp	r0, r3
 800eb8a:	bfb8      	it	lt
 800eb8c:	4618      	movlt	r0, r3
 800eb8e:	e734      	b.n	800e9fa <_printf_float+0xbe>
 800eb90:	2301      	movs	r3, #1
 800eb92:	464a      	mov	r2, r9
 800eb94:	4631      	mov	r1, r6
 800eb96:	4628      	mov	r0, r5
 800eb98:	47b8      	blx	r7
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	f43f af2b 	beq.w	800e9f6 <_printf_float+0xba>
 800eba0:	f108 0801 	add.w	r8, r8, #1
 800eba4:	e7e6      	b.n	800eb74 <_printf_float+0x238>
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dc2b      	bgt.n	800ec04 <_printf_float+0x2c8>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4a26      	ldr	r2, [pc, #152]	; (800ec48 <_printf_float+0x30c>)
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f af1d 	beq.w	800e9f6 <_printf_float+0xba>
 800ebbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebbe:	b923      	cbnz	r3, 800ebca <_printf_float+0x28e>
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc2:	b913      	cbnz	r3, 800ebca <_printf_float+0x28e>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	07d9      	lsls	r1, r3, #31
 800ebc8:	d5d8      	bpl.n	800eb7c <_printf_float+0x240>
 800ebca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	f43f af0e 	beq.w	800e9f6 <_printf_float+0xba>
 800ebda:	f04f 0900 	mov.w	r9, #0
 800ebde:	f104 0a1a 	add.w	sl, r4, #26
 800ebe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe4:	425b      	negs	r3, r3
 800ebe6:	454b      	cmp	r3, r9
 800ebe8:	dc01      	bgt.n	800ebee <_printf_float+0x2b2>
 800ebea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebec:	e794      	b.n	800eb18 <_printf_float+0x1dc>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	4652      	mov	r2, sl
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	47b8      	blx	r7
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	f43f aefc 	beq.w	800e9f6 <_printf_float+0xba>
 800ebfe:	f109 0901 	add.w	r9, r9, #1
 800ec02:	e7ee      	b.n	800ebe2 <_printf_float+0x2a6>
 800ec04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	bfa8      	it	ge
 800ec0c:	461a      	movge	r2, r3
 800ec0e:	2a00      	cmp	r2, #0
 800ec10:	4691      	mov	r9, r2
 800ec12:	dd07      	ble.n	800ec24 <_printf_float+0x2e8>
 800ec14:	4613      	mov	r3, r2
 800ec16:	4631      	mov	r1, r6
 800ec18:	4642      	mov	r2, r8
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b8      	blx	r7
 800ec1e:	3001      	adds	r0, #1
 800ec20:	f43f aee9 	beq.w	800e9f6 <_printf_float+0xba>
 800ec24:	f104 031a 	add.w	r3, r4, #26
 800ec28:	f04f 0b00 	mov.w	fp, #0
 800ec2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec30:	9306      	str	r3, [sp, #24]
 800ec32:	e015      	b.n	800ec60 <_printf_float+0x324>
 800ec34:	7fefffff 	.word	0x7fefffff
 800ec38:	080137d0 	.word	0x080137d0
 800ec3c:	080137cc 	.word	0x080137cc
 800ec40:	080137d8 	.word	0x080137d8
 800ec44:	080137d4 	.word	0x080137d4
 800ec48:	08013a8c 	.word	0x08013a8c
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	9a06      	ldr	r2, [sp, #24]
 800ec50:	4631      	mov	r1, r6
 800ec52:	4628      	mov	r0, r5
 800ec54:	47b8      	blx	r7
 800ec56:	3001      	adds	r0, #1
 800ec58:	f43f aecd 	beq.w	800e9f6 <_printf_float+0xba>
 800ec5c:	f10b 0b01 	add.w	fp, fp, #1
 800ec60:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ec64:	ebaa 0309 	sub.w	r3, sl, r9
 800ec68:	455b      	cmp	r3, fp
 800ec6a:	dcef      	bgt.n	800ec4c <_printf_float+0x310>
 800ec6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec70:	429a      	cmp	r2, r3
 800ec72:	44d0      	add	r8, sl
 800ec74:	db15      	blt.n	800eca2 <_printf_float+0x366>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	07da      	lsls	r2, r3, #31
 800ec7a:	d412      	bmi.n	800eca2 <_printf_float+0x366>
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec80:	eba3 020a 	sub.w	r2, r3, sl
 800ec84:	eba3 0a01 	sub.w	sl, r3, r1
 800ec88:	4592      	cmp	sl, r2
 800ec8a:	bfa8      	it	ge
 800ec8c:	4692      	movge	sl, r2
 800ec8e:	f1ba 0f00 	cmp.w	sl, #0
 800ec92:	dc0e      	bgt.n	800ecb2 <_printf_float+0x376>
 800ec94:	f04f 0800 	mov.w	r8, #0
 800ec98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec9c:	f104 091a 	add.w	r9, r4, #26
 800eca0:	e019      	b.n	800ecd6 <_printf_float+0x39a>
 800eca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	d1e5      	bne.n	800ec7c <_printf_float+0x340>
 800ecb0:	e6a1      	b.n	800e9f6 <_printf_float+0xba>
 800ecb2:	4653      	mov	r3, sl
 800ecb4:	4642      	mov	r2, r8
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b8      	blx	r7
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d1e9      	bne.n	800ec94 <_printf_float+0x358>
 800ecc0:	e699      	b.n	800e9f6 <_printf_float+0xba>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	464a      	mov	r2, r9
 800ecc6:	4631      	mov	r1, r6
 800ecc8:	4628      	mov	r0, r5
 800ecca:	47b8      	blx	r7
 800eccc:	3001      	adds	r0, #1
 800ecce:	f43f ae92 	beq.w	800e9f6 <_printf_float+0xba>
 800ecd2:	f108 0801 	add.w	r8, r8, #1
 800ecd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	eba3 030a 	sub.w	r3, r3, sl
 800ece0:	4543      	cmp	r3, r8
 800ece2:	dcee      	bgt.n	800ecc2 <_printf_float+0x386>
 800ece4:	e74a      	b.n	800eb7c <_printf_float+0x240>
 800ece6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ece8:	2a01      	cmp	r2, #1
 800ecea:	dc01      	bgt.n	800ecf0 <_printf_float+0x3b4>
 800ecec:	07db      	lsls	r3, r3, #31
 800ecee:	d53a      	bpl.n	800ed66 <_printf_float+0x42a>
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	4642      	mov	r2, r8
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	47b8      	blx	r7
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	f43f ae7b 	beq.w	800e9f6 <_printf_float+0xba>
 800ed00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed04:	4631      	mov	r1, r6
 800ed06:	4628      	mov	r0, r5
 800ed08:	47b8      	blx	r7
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	f108 0801 	add.w	r8, r8, #1
 800ed10:	f43f ae71 	beq.w	800e9f6 <_printf_float+0xba>
 800ed14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed16:	2200      	movs	r2, #0
 800ed18:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ed1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed20:	2300      	movs	r3, #0
 800ed22:	f7f1 fef9 	bl	8000b18 <__aeabi_dcmpeq>
 800ed26:	b9c8      	cbnz	r0, 800ed5c <_printf_float+0x420>
 800ed28:	4653      	mov	r3, sl
 800ed2a:	4642      	mov	r2, r8
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4628      	mov	r0, r5
 800ed30:	47b8      	blx	r7
 800ed32:	3001      	adds	r0, #1
 800ed34:	d10e      	bne.n	800ed54 <_printf_float+0x418>
 800ed36:	e65e      	b.n	800e9f6 <_printf_float+0xba>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	4652      	mov	r2, sl
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4628      	mov	r0, r5
 800ed40:	47b8      	blx	r7
 800ed42:	3001      	adds	r0, #1
 800ed44:	f43f ae57 	beq.w	800e9f6 <_printf_float+0xba>
 800ed48:	f108 0801 	add.w	r8, r8, #1
 800ed4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	4543      	cmp	r3, r8
 800ed52:	dcf1      	bgt.n	800ed38 <_printf_float+0x3fc>
 800ed54:	464b      	mov	r3, r9
 800ed56:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed5a:	e6de      	b.n	800eb1a <_printf_float+0x1de>
 800ed5c:	f04f 0800 	mov.w	r8, #0
 800ed60:	f104 0a1a 	add.w	sl, r4, #26
 800ed64:	e7f2      	b.n	800ed4c <_printf_float+0x410>
 800ed66:	2301      	movs	r3, #1
 800ed68:	e7df      	b.n	800ed2a <_printf_float+0x3ee>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	464a      	mov	r2, r9
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b8      	blx	r7
 800ed74:	3001      	adds	r0, #1
 800ed76:	f43f ae3e 	beq.w	800e9f6 <_printf_float+0xba>
 800ed7a:	f108 0801 	add.w	r8, r8, #1
 800ed7e:	68e3      	ldr	r3, [r4, #12]
 800ed80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed82:	1a9b      	subs	r3, r3, r2
 800ed84:	4543      	cmp	r3, r8
 800ed86:	dcf0      	bgt.n	800ed6a <_printf_float+0x42e>
 800ed88:	e6fc      	b.n	800eb84 <_printf_float+0x248>
 800ed8a:	f04f 0800 	mov.w	r8, #0
 800ed8e:	f104 0919 	add.w	r9, r4, #25
 800ed92:	e7f4      	b.n	800ed7e <_printf_float+0x442>
 800ed94:	2900      	cmp	r1, #0
 800ed96:	f43f ae8b 	beq.w	800eab0 <_printf_float+0x174>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eda0:	ab09      	add	r3, sp, #36	; 0x24
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	ec49 8b10 	vmov	d0, r8, r9
 800eda8:	6022      	str	r2, [r4, #0]
 800edaa:	f8cd a004 	str.w	sl, [sp, #4]
 800edae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800edb2:	4628      	mov	r0, r5
 800edb4:	f7ff fd2e 	bl	800e814 <__cvt>
 800edb8:	4680      	mov	r8, r0
 800edba:	e648      	b.n	800ea4e <_printf_float+0x112>

0800edbc <_printf_common>:
 800edbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc0:	4691      	mov	r9, r2
 800edc2:	461f      	mov	r7, r3
 800edc4:	688a      	ldr	r2, [r1, #8]
 800edc6:	690b      	ldr	r3, [r1, #16]
 800edc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edcc:	4293      	cmp	r3, r2
 800edce:	bfb8      	it	lt
 800edd0:	4613      	movlt	r3, r2
 800edd2:	f8c9 3000 	str.w	r3, [r9]
 800edd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edda:	4606      	mov	r6, r0
 800eddc:	460c      	mov	r4, r1
 800edde:	b112      	cbz	r2, 800ede6 <_printf_common+0x2a>
 800ede0:	3301      	adds	r3, #1
 800ede2:	f8c9 3000 	str.w	r3, [r9]
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	0699      	lsls	r1, r3, #26
 800edea:	bf42      	ittt	mi
 800edec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800edf0:	3302      	addmi	r3, #2
 800edf2:	f8c9 3000 	strmi.w	r3, [r9]
 800edf6:	6825      	ldr	r5, [r4, #0]
 800edf8:	f015 0506 	ands.w	r5, r5, #6
 800edfc:	d107      	bne.n	800ee0e <_printf_common+0x52>
 800edfe:	f104 0a19 	add.w	sl, r4, #25
 800ee02:	68e3      	ldr	r3, [r4, #12]
 800ee04:	f8d9 2000 	ldr.w	r2, [r9]
 800ee08:	1a9b      	subs	r3, r3, r2
 800ee0a:	42ab      	cmp	r3, r5
 800ee0c:	dc28      	bgt.n	800ee60 <_printf_common+0xa4>
 800ee0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ee12:	6822      	ldr	r2, [r4, #0]
 800ee14:	3300      	adds	r3, #0
 800ee16:	bf18      	it	ne
 800ee18:	2301      	movne	r3, #1
 800ee1a:	0692      	lsls	r2, r2, #26
 800ee1c:	d42d      	bmi.n	800ee7a <_printf_common+0xbe>
 800ee1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee22:	4639      	mov	r1, r7
 800ee24:	4630      	mov	r0, r6
 800ee26:	47c0      	blx	r8
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d020      	beq.n	800ee6e <_printf_common+0xb2>
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	68e5      	ldr	r5, [r4, #12]
 800ee30:	f8d9 2000 	ldr.w	r2, [r9]
 800ee34:	f003 0306 	and.w	r3, r3, #6
 800ee38:	2b04      	cmp	r3, #4
 800ee3a:	bf08      	it	eq
 800ee3c:	1aad      	subeq	r5, r5, r2
 800ee3e:	68a3      	ldr	r3, [r4, #8]
 800ee40:	6922      	ldr	r2, [r4, #16]
 800ee42:	bf0c      	ite	eq
 800ee44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee48:	2500      	movne	r5, #0
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	bfc4      	itt	gt
 800ee4e:	1a9b      	subgt	r3, r3, r2
 800ee50:	18ed      	addgt	r5, r5, r3
 800ee52:	f04f 0900 	mov.w	r9, #0
 800ee56:	341a      	adds	r4, #26
 800ee58:	454d      	cmp	r5, r9
 800ee5a:	d11a      	bne.n	800ee92 <_printf_common+0xd6>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	e008      	b.n	800ee72 <_printf_common+0xb6>
 800ee60:	2301      	movs	r3, #1
 800ee62:	4652      	mov	r2, sl
 800ee64:	4639      	mov	r1, r7
 800ee66:	4630      	mov	r0, r6
 800ee68:	47c0      	blx	r8
 800ee6a:	3001      	adds	r0, #1
 800ee6c:	d103      	bne.n	800ee76 <_printf_common+0xba>
 800ee6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee76:	3501      	adds	r5, #1
 800ee78:	e7c3      	b.n	800ee02 <_printf_common+0x46>
 800ee7a:	18e1      	adds	r1, r4, r3
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	2030      	movs	r0, #48	; 0x30
 800ee80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee84:	4422      	add	r2, r4
 800ee86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee8e:	3302      	adds	r3, #2
 800ee90:	e7c5      	b.n	800ee1e <_printf_common+0x62>
 800ee92:	2301      	movs	r3, #1
 800ee94:	4622      	mov	r2, r4
 800ee96:	4639      	mov	r1, r7
 800ee98:	4630      	mov	r0, r6
 800ee9a:	47c0      	blx	r8
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	d0e6      	beq.n	800ee6e <_printf_common+0xb2>
 800eea0:	f109 0901 	add.w	r9, r9, #1
 800eea4:	e7d8      	b.n	800ee58 <_printf_common+0x9c>
	...

0800eea8 <_printf_i>:
 800eea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	7e09      	ldrb	r1, [r1, #24]
 800eeb4:	b085      	sub	sp, #20
 800eeb6:	296e      	cmp	r1, #110	; 0x6e
 800eeb8:	4617      	mov	r7, r2
 800eeba:	4606      	mov	r6, r0
 800eebc:	4698      	mov	r8, r3
 800eebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eec0:	f000 80b3 	beq.w	800f02a <_printf_i+0x182>
 800eec4:	d822      	bhi.n	800ef0c <_printf_i+0x64>
 800eec6:	2963      	cmp	r1, #99	; 0x63
 800eec8:	d036      	beq.n	800ef38 <_printf_i+0x90>
 800eeca:	d80a      	bhi.n	800eee2 <_printf_i+0x3a>
 800eecc:	2900      	cmp	r1, #0
 800eece:	f000 80b9 	beq.w	800f044 <_printf_i+0x19c>
 800eed2:	2958      	cmp	r1, #88	; 0x58
 800eed4:	f000 8083 	beq.w	800efde <_printf_i+0x136>
 800eed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eedc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eee0:	e032      	b.n	800ef48 <_printf_i+0xa0>
 800eee2:	2964      	cmp	r1, #100	; 0x64
 800eee4:	d001      	beq.n	800eeea <_printf_i+0x42>
 800eee6:	2969      	cmp	r1, #105	; 0x69
 800eee8:	d1f6      	bne.n	800eed8 <_printf_i+0x30>
 800eeea:	6820      	ldr	r0, [r4, #0]
 800eeec:	6813      	ldr	r3, [r2, #0]
 800eeee:	0605      	lsls	r5, r0, #24
 800eef0:	f103 0104 	add.w	r1, r3, #4
 800eef4:	d52a      	bpl.n	800ef4c <_printf_i+0xa4>
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6011      	str	r1, [r2, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	da03      	bge.n	800ef06 <_printf_i+0x5e>
 800eefe:	222d      	movs	r2, #45	; 0x2d
 800ef00:	425b      	negs	r3, r3
 800ef02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ef06:	486f      	ldr	r0, [pc, #444]	; (800f0c4 <_printf_i+0x21c>)
 800ef08:	220a      	movs	r2, #10
 800ef0a:	e039      	b.n	800ef80 <_printf_i+0xd8>
 800ef0c:	2973      	cmp	r1, #115	; 0x73
 800ef0e:	f000 809d 	beq.w	800f04c <_printf_i+0x1a4>
 800ef12:	d808      	bhi.n	800ef26 <_printf_i+0x7e>
 800ef14:	296f      	cmp	r1, #111	; 0x6f
 800ef16:	d020      	beq.n	800ef5a <_printf_i+0xb2>
 800ef18:	2970      	cmp	r1, #112	; 0x70
 800ef1a:	d1dd      	bne.n	800eed8 <_printf_i+0x30>
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	f043 0320 	orr.w	r3, r3, #32
 800ef22:	6023      	str	r3, [r4, #0]
 800ef24:	e003      	b.n	800ef2e <_printf_i+0x86>
 800ef26:	2975      	cmp	r1, #117	; 0x75
 800ef28:	d017      	beq.n	800ef5a <_printf_i+0xb2>
 800ef2a:	2978      	cmp	r1, #120	; 0x78
 800ef2c:	d1d4      	bne.n	800eed8 <_printf_i+0x30>
 800ef2e:	2378      	movs	r3, #120	; 0x78
 800ef30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef34:	4864      	ldr	r0, [pc, #400]	; (800f0c8 <_printf_i+0x220>)
 800ef36:	e055      	b.n	800efe4 <_printf_i+0x13c>
 800ef38:	6813      	ldr	r3, [r2, #0]
 800ef3a:	1d19      	adds	r1, r3, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	6011      	str	r1, [r2, #0]
 800ef40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e08c      	b.n	800f066 <_printf_i+0x1be>
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6011      	str	r1, [r2, #0]
 800ef50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef54:	bf18      	it	ne
 800ef56:	b21b      	sxthne	r3, r3
 800ef58:	e7cf      	b.n	800eefa <_printf_i+0x52>
 800ef5a:	6813      	ldr	r3, [r2, #0]
 800ef5c:	6825      	ldr	r5, [r4, #0]
 800ef5e:	1d18      	adds	r0, r3, #4
 800ef60:	6010      	str	r0, [r2, #0]
 800ef62:	0628      	lsls	r0, r5, #24
 800ef64:	d501      	bpl.n	800ef6a <_printf_i+0xc2>
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	e002      	b.n	800ef70 <_printf_i+0xc8>
 800ef6a:	0668      	lsls	r0, r5, #25
 800ef6c:	d5fb      	bpl.n	800ef66 <_printf_i+0xbe>
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	4854      	ldr	r0, [pc, #336]	; (800f0c4 <_printf_i+0x21c>)
 800ef72:	296f      	cmp	r1, #111	; 0x6f
 800ef74:	bf14      	ite	ne
 800ef76:	220a      	movne	r2, #10
 800ef78:	2208      	moveq	r2, #8
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef80:	6865      	ldr	r5, [r4, #4]
 800ef82:	60a5      	str	r5, [r4, #8]
 800ef84:	2d00      	cmp	r5, #0
 800ef86:	f2c0 8095 	blt.w	800f0b4 <_printf_i+0x20c>
 800ef8a:	6821      	ldr	r1, [r4, #0]
 800ef8c:	f021 0104 	bic.w	r1, r1, #4
 800ef90:	6021      	str	r1, [r4, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d13d      	bne.n	800f012 <_printf_i+0x16a>
 800ef96:	2d00      	cmp	r5, #0
 800ef98:	f040 808e 	bne.w	800f0b8 <_printf_i+0x210>
 800ef9c:	4665      	mov	r5, ip
 800ef9e:	2a08      	cmp	r2, #8
 800efa0:	d10b      	bne.n	800efba <_printf_i+0x112>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	07db      	lsls	r3, r3, #31
 800efa6:	d508      	bpl.n	800efba <_printf_i+0x112>
 800efa8:	6923      	ldr	r3, [r4, #16]
 800efaa:	6862      	ldr	r2, [r4, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	bfde      	ittt	le
 800efb0:	2330      	movle	r3, #48	; 0x30
 800efb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efb6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800efba:	ebac 0305 	sub.w	r3, ip, r5
 800efbe:	6123      	str	r3, [r4, #16]
 800efc0:	f8cd 8000 	str.w	r8, [sp]
 800efc4:	463b      	mov	r3, r7
 800efc6:	aa03      	add	r2, sp, #12
 800efc8:	4621      	mov	r1, r4
 800efca:	4630      	mov	r0, r6
 800efcc:	f7ff fef6 	bl	800edbc <_printf_common>
 800efd0:	3001      	adds	r0, #1
 800efd2:	d14d      	bne.n	800f070 <_printf_i+0x1c8>
 800efd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efd8:	b005      	add	sp, #20
 800efda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efde:	4839      	ldr	r0, [pc, #228]	; (800f0c4 <_printf_i+0x21c>)
 800efe0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800efe4:	6813      	ldr	r3, [r2, #0]
 800efe6:	6821      	ldr	r1, [r4, #0]
 800efe8:	1d1d      	adds	r5, r3, #4
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6015      	str	r5, [r2, #0]
 800efee:	060a      	lsls	r2, r1, #24
 800eff0:	d50b      	bpl.n	800f00a <_printf_i+0x162>
 800eff2:	07ca      	lsls	r2, r1, #31
 800eff4:	bf44      	itt	mi
 800eff6:	f041 0120 	orrmi.w	r1, r1, #32
 800effa:	6021      	strmi	r1, [r4, #0]
 800effc:	b91b      	cbnz	r3, 800f006 <_printf_i+0x15e>
 800effe:	6822      	ldr	r2, [r4, #0]
 800f000:	f022 0220 	bic.w	r2, r2, #32
 800f004:	6022      	str	r2, [r4, #0]
 800f006:	2210      	movs	r2, #16
 800f008:	e7b7      	b.n	800ef7a <_printf_i+0xd2>
 800f00a:	064d      	lsls	r5, r1, #25
 800f00c:	bf48      	it	mi
 800f00e:	b29b      	uxthmi	r3, r3
 800f010:	e7ef      	b.n	800eff2 <_printf_i+0x14a>
 800f012:	4665      	mov	r5, ip
 800f014:	fbb3 f1f2 	udiv	r1, r3, r2
 800f018:	fb02 3311 	mls	r3, r2, r1, r3
 800f01c:	5cc3      	ldrb	r3, [r0, r3]
 800f01e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f022:	460b      	mov	r3, r1
 800f024:	2900      	cmp	r1, #0
 800f026:	d1f5      	bne.n	800f014 <_printf_i+0x16c>
 800f028:	e7b9      	b.n	800ef9e <_printf_i+0xf6>
 800f02a:	6813      	ldr	r3, [r2, #0]
 800f02c:	6825      	ldr	r5, [r4, #0]
 800f02e:	6961      	ldr	r1, [r4, #20]
 800f030:	1d18      	adds	r0, r3, #4
 800f032:	6010      	str	r0, [r2, #0]
 800f034:	0628      	lsls	r0, r5, #24
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	d501      	bpl.n	800f03e <_printf_i+0x196>
 800f03a:	6019      	str	r1, [r3, #0]
 800f03c:	e002      	b.n	800f044 <_printf_i+0x19c>
 800f03e:	066a      	lsls	r2, r5, #25
 800f040:	d5fb      	bpl.n	800f03a <_printf_i+0x192>
 800f042:	8019      	strh	r1, [r3, #0]
 800f044:	2300      	movs	r3, #0
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	4665      	mov	r5, ip
 800f04a:	e7b9      	b.n	800efc0 <_printf_i+0x118>
 800f04c:	6813      	ldr	r3, [r2, #0]
 800f04e:	1d19      	adds	r1, r3, #4
 800f050:	6011      	str	r1, [r2, #0]
 800f052:	681d      	ldr	r5, [r3, #0]
 800f054:	6862      	ldr	r2, [r4, #4]
 800f056:	2100      	movs	r1, #0
 800f058:	4628      	mov	r0, r5
 800f05a:	f7f1 f8e9 	bl	8000230 <memchr>
 800f05e:	b108      	cbz	r0, 800f064 <_printf_i+0x1bc>
 800f060:	1b40      	subs	r0, r0, r5
 800f062:	6060      	str	r0, [r4, #4]
 800f064:	6863      	ldr	r3, [r4, #4]
 800f066:	6123      	str	r3, [r4, #16]
 800f068:	2300      	movs	r3, #0
 800f06a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f06e:	e7a7      	b.n	800efc0 <_printf_i+0x118>
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	462a      	mov	r2, r5
 800f074:	4639      	mov	r1, r7
 800f076:	4630      	mov	r0, r6
 800f078:	47c0      	blx	r8
 800f07a:	3001      	adds	r0, #1
 800f07c:	d0aa      	beq.n	800efd4 <_printf_i+0x12c>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	079b      	lsls	r3, r3, #30
 800f082:	d413      	bmi.n	800f0ac <_printf_i+0x204>
 800f084:	68e0      	ldr	r0, [r4, #12]
 800f086:	9b03      	ldr	r3, [sp, #12]
 800f088:	4298      	cmp	r0, r3
 800f08a:	bfb8      	it	lt
 800f08c:	4618      	movlt	r0, r3
 800f08e:	e7a3      	b.n	800efd8 <_printf_i+0x130>
 800f090:	2301      	movs	r3, #1
 800f092:	464a      	mov	r2, r9
 800f094:	4639      	mov	r1, r7
 800f096:	4630      	mov	r0, r6
 800f098:	47c0      	blx	r8
 800f09a:	3001      	adds	r0, #1
 800f09c:	d09a      	beq.n	800efd4 <_printf_i+0x12c>
 800f09e:	3501      	adds	r5, #1
 800f0a0:	68e3      	ldr	r3, [r4, #12]
 800f0a2:	9a03      	ldr	r2, [sp, #12]
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	42ab      	cmp	r3, r5
 800f0a8:	dcf2      	bgt.n	800f090 <_printf_i+0x1e8>
 800f0aa:	e7eb      	b.n	800f084 <_printf_i+0x1dc>
 800f0ac:	2500      	movs	r5, #0
 800f0ae:	f104 0919 	add.w	r9, r4, #25
 800f0b2:	e7f5      	b.n	800f0a0 <_printf_i+0x1f8>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ac      	bne.n	800f012 <_printf_i+0x16a>
 800f0b8:	7803      	ldrb	r3, [r0, #0]
 800f0ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c2:	e76c      	b.n	800ef9e <_printf_i+0xf6>
 800f0c4:	080137dc 	.word	0x080137dc
 800f0c8:	080137ed 	.word	0x080137ed

0800f0cc <_puts_r>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	460e      	mov	r6, r1
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	b118      	cbz	r0, 800f0dc <_puts_r+0x10>
 800f0d4:	6983      	ldr	r3, [r0, #24]
 800f0d6:	b90b      	cbnz	r3, 800f0dc <_puts_r+0x10>
 800f0d8:	f001 f896 	bl	8010208 <__sinit>
 800f0dc:	69ab      	ldr	r3, [r5, #24]
 800f0de:	68ac      	ldr	r4, [r5, #8]
 800f0e0:	b913      	cbnz	r3, 800f0e8 <_puts_r+0x1c>
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f001 f890 	bl	8010208 <__sinit>
 800f0e8:	4b23      	ldr	r3, [pc, #140]	; (800f178 <_puts_r+0xac>)
 800f0ea:	429c      	cmp	r4, r3
 800f0ec:	d117      	bne.n	800f11e <_puts_r+0x52>
 800f0ee:	686c      	ldr	r4, [r5, #4]
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	071b      	lsls	r3, r3, #28
 800f0f4:	d51d      	bpl.n	800f132 <_puts_r+0x66>
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	b1db      	cbz	r3, 800f132 <_puts_r+0x66>
 800f0fa:	3e01      	subs	r6, #1
 800f0fc:	68a3      	ldr	r3, [r4, #8]
 800f0fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f102:	3b01      	subs	r3, #1
 800f104:	60a3      	str	r3, [r4, #8]
 800f106:	b9e9      	cbnz	r1, 800f144 <_puts_r+0x78>
 800f108:	2b00      	cmp	r3, #0
 800f10a:	da2e      	bge.n	800f16a <_puts_r+0x9e>
 800f10c:	4622      	mov	r2, r4
 800f10e:	210a      	movs	r1, #10
 800f110:	4628      	mov	r0, r5
 800f112:	f000 f883 	bl	800f21c <__swbuf_r>
 800f116:	3001      	adds	r0, #1
 800f118:	d011      	beq.n	800f13e <_puts_r+0x72>
 800f11a:	200a      	movs	r0, #10
 800f11c:	e011      	b.n	800f142 <_puts_r+0x76>
 800f11e:	4b17      	ldr	r3, [pc, #92]	; (800f17c <_puts_r+0xb0>)
 800f120:	429c      	cmp	r4, r3
 800f122:	d101      	bne.n	800f128 <_puts_r+0x5c>
 800f124:	68ac      	ldr	r4, [r5, #8]
 800f126:	e7e3      	b.n	800f0f0 <_puts_r+0x24>
 800f128:	4b15      	ldr	r3, [pc, #84]	; (800f180 <_puts_r+0xb4>)
 800f12a:	429c      	cmp	r4, r3
 800f12c:	bf08      	it	eq
 800f12e:	68ec      	ldreq	r4, [r5, #12]
 800f130:	e7de      	b.n	800f0f0 <_puts_r+0x24>
 800f132:	4621      	mov	r1, r4
 800f134:	4628      	mov	r0, r5
 800f136:	f000 f8c3 	bl	800f2c0 <__swsetup_r>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d0dd      	beq.n	800f0fa <_puts_r+0x2e>
 800f13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f142:	bd70      	pop	{r4, r5, r6, pc}
 800f144:	2b00      	cmp	r3, #0
 800f146:	da04      	bge.n	800f152 <_puts_r+0x86>
 800f148:	69a2      	ldr	r2, [r4, #24]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	dc06      	bgt.n	800f15c <_puts_r+0x90>
 800f14e:	290a      	cmp	r1, #10
 800f150:	d004      	beq.n	800f15c <_puts_r+0x90>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	6022      	str	r2, [r4, #0]
 800f158:	7019      	strb	r1, [r3, #0]
 800f15a:	e7cf      	b.n	800f0fc <_puts_r+0x30>
 800f15c:	4622      	mov	r2, r4
 800f15e:	4628      	mov	r0, r5
 800f160:	f000 f85c 	bl	800f21c <__swbuf_r>
 800f164:	3001      	adds	r0, #1
 800f166:	d1c9      	bne.n	800f0fc <_puts_r+0x30>
 800f168:	e7e9      	b.n	800f13e <_puts_r+0x72>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	200a      	movs	r0, #10
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	6022      	str	r2, [r4, #0]
 800f172:	7018      	strb	r0, [r3, #0]
 800f174:	e7e5      	b.n	800f142 <_puts_r+0x76>
 800f176:	bf00      	nop
 800f178:	0801382c 	.word	0x0801382c
 800f17c:	0801384c 	.word	0x0801384c
 800f180:	0801380c 	.word	0x0801380c

0800f184 <puts>:
 800f184:	4b02      	ldr	r3, [pc, #8]	; (800f190 <puts+0xc>)
 800f186:	4601      	mov	r1, r0
 800f188:	6818      	ldr	r0, [r3, #0]
 800f18a:	f7ff bf9f 	b.w	800f0cc <_puts_r>
 800f18e:	bf00      	nop
 800f190:	200018e4 	.word	0x200018e4

0800f194 <sniprintf>:
 800f194:	b40c      	push	{r2, r3}
 800f196:	b530      	push	{r4, r5, lr}
 800f198:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <sniprintf+0x64>)
 800f19a:	1e0c      	subs	r4, r1, #0
 800f19c:	b09d      	sub	sp, #116	; 0x74
 800f19e:	681d      	ldr	r5, [r3, #0]
 800f1a0:	da08      	bge.n	800f1b4 <sniprintf+0x20>
 800f1a2:	238b      	movs	r3, #139	; 0x8b
 800f1a4:	602b      	str	r3, [r5, #0]
 800f1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1aa:	b01d      	add	sp, #116	; 0x74
 800f1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b0:	b002      	add	sp, #8
 800f1b2:	4770      	bx	lr
 800f1b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f1bc:	bf14      	ite	ne
 800f1be:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f1c2:	4623      	moveq	r3, r4
 800f1c4:	9304      	str	r3, [sp, #16]
 800f1c6:	9307      	str	r3, [sp, #28]
 800f1c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1cc:	9002      	str	r0, [sp, #8]
 800f1ce:	9006      	str	r0, [sp, #24]
 800f1d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f1d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f1d6:	ab21      	add	r3, sp, #132	; 0x84
 800f1d8:	a902      	add	r1, sp, #8
 800f1da:	4628      	mov	r0, r5
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	f001 fd0d 	bl	8010bfc <_svfiprintf_r>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	bfbc      	itt	lt
 800f1e6:	238b      	movlt	r3, #139	; 0x8b
 800f1e8:	602b      	strlt	r3, [r5, #0]
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	d0dd      	beq.n	800f1aa <sniprintf+0x16>
 800f1ee:	9b02      	ldr	r3, [sp, #8]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	701a      	strb	r2, [r3, #0]
 800f1f4:	e7d9      	b.n	800f1aa <sniprintf+0x16>
 800f1f6:	bf00      	nop
 800f1f8:	200018e4 	.word	0x200018e4

0800f1fc <strcat>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4603      	mov	r3, r0
 800f200:	781a      	ldrb	r2, [r3, #0]
 800f202:	1c5c      	adds	r4, r3, #1
 800f204:	b93a      	cbnz	r2, 800f216 <strcat+0x1a>
 800f206:	3b01      	subs	r3, #1
 800f208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f20c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f210:	2a00      	cmp	r2, #0
 800f212:	d1f9      	bne.n	800f208 <strcat+0xc>
 800f214:	bd10      	pop	{r4, pc}
 800f216:	4623      	mov	r3, r4
 800f218:	e7f2      	b.n	800f200 <strcat+0x4>
	...

0800f21c <__swbuf_r>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	460e      	mov	r6, r1
 800f220:	4614      	mov	r4, r2
 800f222:	4605      	mov	r5, r0
 800f224:	b118      	cbz	r0, 800f22e <__swbuf_r+0x12>
 800f226:	6983      	ldr	r3, [r0, #24]
 800f228:	b90b      	cbnz	r3, 800f22e <__swbuf_r+0x12>
 800f22a:	f000 ffed 	bl	8010208 <__sinit>
 800f22e:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <__swbuf_r+0x98>)
 800f230:	429c      	cmp	r4, r3
 800f232:	d12a      	bne.n	800f28a <__swbuf_r+0x6e>
 800f234:	686c      	ldr	r4, [r5, #4]
 800f236:	69a3      	ldr	r3, [r4, #24]
 800f238:	60a3      	str	r3, [r4, #8]
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	071a      	lsls	r2, r3, #28
 800f23e:	d52e      	bpl.n	800f29e <__swbuf_r+0x82>
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	b363      	cbz	r3, 800f29e <__swbuf_r+0x82>
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	6820      	ldr	r0, [r4, #0]
 800f248:	1ac0      	subs	r0, r0, r3
 800f24a:	6963      	ldr	r3, [r4, #20]
 800f24c:	b2f6      	uxtb	r6, r6
 800f24e:	4283      	cmp	r3, r0
 800f250:	4637      	mov	r7, r6
 800f252:	dc04      	bgt.n	800f25e <__swbuf_r+0x42>
 800f254:	4621      	mov	r1, r4
 800f256:	4628      	mov	r0, r5
 800f258:	f000 ff6c 	bl	8010134 <_fflush_r>
 800f25c:	bb28      	cbnz	r0, 800f2aa <__swbuf_r+0x8e>
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	3b01      	subs	r3, #1
 800f262:	60a3      	str	r3, [r4, #8]
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	1c5a      	adds	r2, r3, #1
 800f268:	6022      	str	r2, [r4, #0]
 800f26a:	701e      	strb	r6, [r3, #0]
 800f26c:	6963      	ldr	r3, [r4, #20]
 800f26e:	3001      	adds	r0, #1
 800f270:	4283      	cmp	r3, r0
 800f272:	d004      	beq.n	800f27e <__swbuf_r+0x62>
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	07db      	lsls	r3, r3, #31
 800f278:	d519      	bpl.n	800f2ae <__swbuf_r+0x92>
 800f27a:	2e0a      	cmp	r6, #10
 800f27c:	d117      	bne.n	800f2ae <__swbuf_r+0x92>
 800f27e:	4621      	mov	r1, r4
 800f280:	4628      	mov	r0, r5
 800f282:	f000 ff57 	bl	8010134 <_fflush_r>
 800f286:	b190      	cbz	r0, 800f2ae <__swbuf_r+0x92>
 800f288:	e00f      	b.n	800f2aa <__swbuf_r+0x8e>
 800f28a:	4b0b      	ldr	r3, [pc, #44]	; (800f2b8 <__swbuf_r+0x9c>)
 800f28c:	429c      	cmp	r4, r3
 800f28e:	d101      	bne.n	800f294 <__swbuf_r+0x78>
 800f290:	68ac      	ldr	r4, [r5, #8]
 800f292:	e7d0      	b.n	800f236 <__swbuf_r+0x1a>
 800f294:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <__swbuf_r+0xa0>)
 800f296:	429c      	cmp	r4, r3
 800f298:	bf08      	it	eq
 800f29a:	68ec      	ldreq	r4, [r5, #12]
 800f29c:	e7cb      	b.n	800f236 <__swbuf_r+0x1a>
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 f80d 	bl	800f2c0 <__swsetup_r>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d0cc      	beq.n	800f244 <__swbuf_r+0x28>
 800f2aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0801382c 	.word	0x0801382c
 800f2b8:	0801384c 	.word	0x0801384c
 800f2bc:	0801380c 	.word	0x0801380c

0800f2c0 <__swsetup_r>:
 800f2c0:	4b32      	ldr	r3, [pc, #200]	; (800f38c <__swsetup_r+0xcc>)
 800f2c2:	b570      	push	{r4, r5, r6, lr}
 800f2c4:	681d      	ldr	r5, [r3, #0]
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	b125      	cbz	r5, 800f2d6 <__swsetup_r+0x16>
 800f2cc:	69ab      	ldr	r3, [r5, #24]
 800f2ce:	b913      	cbnz	r3, 800f2d6 <__swsetup_r+0x16>
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f000 ff99 	bl	8010208 <__sinit>
 800f2d6:	4b2e      	ldr	r3, [pc, #184]	; (800f390 <__swsetup_r+0xd0>)
 800f2d8:	429c      	cmp	r4, r3
 800f2da:	d10f      	bne.n	800f2fc <__swsetup_r+0x3c>
 800f2dc:	686c      	ldr	r4, [r5, #4]
 800f2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	0715      	lsls	r5, r2, #28
 800f2e6:	d42c      	bmi.n	800f342 <__swsetup_r+0x82>
 800f2e8:	06d0      	lsls	r0, r2, #27
 800f2ea:	d411      	bmi.n	800f310 <__swsetup_r+0x50>
 800f2ec:	2209      	movs	r2, #9
 800f2ee:	6032      	str	r2, [r6, #0]
 800f2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2f4:	81a3      	strh	r3, [r4, #12]
 800f2f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2fa:	e03e      	b.n	800f37a <__swsetup_r+0xba>
 800f2fc:	4b25      	ldr	r3, [pc, #148]	; (800f394 <__swsetup_r+0xd4>)
 800f2fe:	429c      	cmp	r4, r3
 800f300:	d101      	bne.n	800f306 <__swsetup_r+0x46>
 800f302:	68ac      	ldr	r4, [r5, #8]
 800f304:	e7eb      	b.n	800f2de <__swsetup_r+0x1e>
 800f306:	4b24      	ldr	r3, [pc, #144]	; (800f398 <__swsetup_r+0xd8>)
 800f308:	429c      	cmp	r4, r3
 800f30a:	bf08      	it	eq
 800f30c:	68ec      	ldreq	r4, [r5, #12]
 800f30e:	e7e6      	b.n	800f2de <__swsetup_r+0x1e>
 800f310:	0751      	lsls	r1, r2, #29
 800f312:	d512      	bpl.n	800f33a <__swsetup_r+0x7a>
 800f314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f316:	b141      	cbz	r1, 800f32a <__swsetup_r+0x6a>
 800f318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f31c:	4299      	cmp	r1, r3
 800f31e:	d002      	beq.n	800f326 <__swsetup_r+0x66>
 800f320:	4630      	mov	r0, r6
 800f322:	f001 fb69 	bl	80109f8 <_free_r>
 800f326:	2300      	movs	r3, #0
 800f328:	6363      	str	r3, [r4, #52]	; 0x34
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	2300      	movs	r3, #0
 800f334:	6063      	str	r3, [r4, #4]
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f043 0308 	orr.w	r3, r3, #8
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	6923      	ldr	r3, [r4, #16]
 800f344:	b94b      	cbnz	r3, 800f35a <__swsetup_r+0x9a>
 800f346:	89a3      	ldrh	r3, [r4, #12]
 800f348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f350:	d003      	beq.n	800f35a <__swsetup_r+0x9a>
 800f352:	4621      	mov	r1, r4
 800f354:	4630      	mov	r0, r6
 800f356:	f001 f813 	bl	8010380 <__smakebuf_r>
 800f35a:	89a2      	ldrh	r2, [r4, #12]
 800f35c:	f012 0301 	ands.w	r3, r2, #1
 800f360:	d00c      	beq.n	800f37c <__swsetup_r+0xbc>
 800f362:	2300      	movs	r3, #0
 800f364:	60a3      	str	r3, [r4, #8]
 800f366:	6963      	ldr	r3, [r4, #20]
 800f368:	425b      	negs	r3, r3
 800f36a:	61a3      	str	r3, [r4, #24]
 800f36c:	6923      	ldr	r3, [r4, #16]
 800f36e:	b953      	cbnz	r3, 800f386 <__swsetup_r+0xc6>
 800f370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f374:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f378:	d1ba      	bne.n	800f2f0 <__swsetup_r+0x30>
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	0792      	lsls	r2, r2, #30
 800f37e:	bf58      	it	pl
 800f380:	6963      	ldrpl	r3, [r4, #20]
 800f382:	60a3      	str	r3, [r4, #8]
 800f384:	e7f2      	b.n	800f36c <__swsetup_r+0xac>
 800f386:	2000      	movs	r0, #0
 800f388:	e7f7      	b.n	800f37a <__swsetup_r+0xba>
 800f38a:	bf00      	nop
 800f38c:	200018e4 	.word	0x200018e4
 800f390:	0801382c 	.word	0x0801382c
 800f394:	0801384c 	.word	0x0801384c
 800f398:	0801380c 	.word	0x0801380c

0800f39c <quorem>:
 800f39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	6903      	ldr	r3, [r0, #16]
 800f3a2:	690c      	ldr	r4, [r1, #16]
 800f3a4:	42a3      	cmp	r3, r4
 800f3a6:	4680      	mov	r8, r0
 800f3a8:	f2c0 8082 	blt.w	800f4b0 <quorem+0x114>
 800f3ac:	3c01      	subs	r4, #1
 800f3ae:	f101 0714 	add.w	r7, r1, #20
 800f3b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f3b6:	f100 0614 	add.w	r6, r0, #20
 800f3ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f3be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f3c2:	eb06 030c 	add.w	r3, r6, ip
 800f3c6:	3501      	adds	r5, #1
 800f3c8:	eb07 090c 	add.w	r9, r7, ip
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	fbb0 f5f5 	udiv	r5, r0, r5
 800f3d2:	b395      	cbz	r5, 800f43a <quorem+0x9e>
 800f3d4:	f04f 0a00 	mov.w	sl, #0
 800f3d8:	4638      	mov	r0, r7
 800f3da:	46b6      	mov	lr, r6
 800f3dc:	46d3      	mov	fp, sl
 800f3de:	f850 2b04 	ldr.w	r2, [r0], #4
 800f3e2:	b293      	uxth	r3, r2
 800f3e4:	fb05 a303 	mla	r3, r5, r3, sl
 800f3e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	ebab 0303 	sub.w	r3, fp, r3
 800f3f2:	0c12      	lsrs	r2, r2, #16
 800f3f4:	f8de b000 	ldr.w	fp, [lr]
 800f3f8:	fb05 a202 	mla	r2, r5, r2, sl
 800f3fc:	fa13 f38b 	uxtah	r3, r3, fp
 800f400:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f404:	fa1f fb82 	uxth.w	fp, r2
 800f408:	f8de 2000 	ldr.w	r2, [lr]
 800f40c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f414:	b29b      	uxth	r3, r3
 800f416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f41a:	4581      	cmp	r9, r0
 800f41c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f420:	f84e 3b04 	str.w	r3, [lr], #4
 800f424:	d2db      	bcs.n	800f3de <quorem+0x42>
 800f426:	f856 300c 	ldr.w	r3, [r6, ip]
 800f42a:	b933      	cbnz	r3, 800f43a <quorem+0x9e>
 800f42c:	9b01      	ldr	r3, [sp, #4]
 800f42e:	3b04      	subs	r3, #4
 800f430:	429e      	cmp	r6, r3
 800f432:	461a      	mov	r2, r3
 800f434:	d330      	bcc.n	800f498 <quorem+0xfc>
 800f436:	f8c8 4010 	str.w	r4, [r8, #16]
 800f43a:	4640      	mov	r0, r8
 800f43c:	f001 fa08 	bl	8010850 <__mcmp>
 800f440:	2800      	cmp	r0, #0
 800f442:	db25      	blt.n	800f490 <quorem+0xf4>
 800f444:	3501      	adds	r5, #1
 800f446:	4630      	mov	r0, r6
 800f448:	f04f 0c00 	mov.w	ip, #0
 800f44c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f450:	f8d0 e000 	ldr.w	lr, [r0]
 800f454:	b293      	uxth	r3, r2
 800f456:	ebac 0303 	sub.w	r3, ip, r3
 800f45a:	0c12      	lsrs	r2, r2, #16
 800f45c:	fa13 f38e 	uxtah	r3, r3, lr
 800f460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f468:	b29b      	uxth	r3, r3
 800f46a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f46e:	45b9      	cmp	r9, r7
 800f470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f474:	f840 3b04 	str.w	r3, [r0], #4
 800f478:	d2e8      	bcs.n	800f44c <quorem+0xb0>
 800f47a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f47e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f482:	b92a      	cbnz	r2, 800f490 <quorem+0xf4>
 800f484:	3b04      	subs	r3, #4
 800f486:	429e      	cmp	r6, r3
 800f488:	461a      	mov	r2, r3
 800f48a:	d30b      	bcc.n	800f4a4 <quorem+0x108>
 800f48c:	f8c8 4010 	str.w	r4, [r8, #16]
 800f490:	4628      	mov	r0, r5
 800f492:	b003      	add	sp, #12
 800f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f498:	6812      	ldr	r2, [r2, #0]
 800f49a:	3b04      	subs	r3, #4
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	d1ca      	bne.n	800f436 <quorem+0x9a>
 800f4a0:	3c01      	subs	r4, #1
 800f4a2:	e7c5      	b.n	800f430 <quorem+0x94>
 800f4a4:	6812      	ldr	r2, [r2, #0]
 800f4a6:	3b04      	subs	r3, #4
 800f4a8:	2a00      	cmp	r2, #0
 800f4aa:	d1ef      	bne.n	800f48c <quorem+0xf0>
 800f4ac:	3c01      	subs	r4, #1
 800f4ae:	e7ea      	b.n	800f486 <quorem+0xea>
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	e7ee      	b.n	800f492 <quorem+0xf6>
 800f4b4:	0000      	movs	r0, r0
	...

0800f4b8 <_dtoa_r>:
 800f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4bc:	ec57 6b10 	vmov	r6, r7, d0
 800f4c0:	b097      	sub	sp, #92	; 0x5c
 800f4c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f4c4:	9106      	str	r1, [sp, #24]
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800f4ca:	9312      	str	r3, [sp, #72]	; 0x48
 800f4cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f4d0:	e9cd 6700 	strd	r6, r7, [sp]
 800f4d4:	b93d      	cbnz	r5, 800f4e6 <_dtoa_r+0x2e>
 800f4d6:	2010      	movs	r0, #16
 800f4d8:	f000 ff92 	bl	8010400 <malloc>
 800f4dc:	6260      	str	r0, [r4, #36]	; 0x24
 800f4de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f4e2:	6005      	str	r5, [r0, #0]
 800f4e4:	60c5      	str	r5, [r0, #12]
 800f4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	b151      	cbz	r1, 800f502 <_dtoa_r+0x4a>
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	604a      	str	r2, [r1, #4]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4093      	lsls	r3, r2
 800f4f4:	608b      	str	r3, [r1, #8]
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f000 ffc9 	bl	801048e <_Bfree>
 800f4fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
 800f502:	1e3b      	subs	r3, r7, #0
 800f504:	bfbb      	ittet	lt
 800f506:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f50a:	9301      	strlt	r3, [sp, #4]
 800f50c:	2300      	movge	r3, #0
 800f50e:	2201      	movlt	r2, #1
 800f510:	bfac      	ite	ge
 800f512:	f8c8 3000 	strge.w	r3, [r8]
 800f516:	f8c8 2000 	strlt.w	r2, [r8]
 800f51a:	4baf      	ldr	r3, [pc, #700]	; (800f7d8 <_dtoa_r+0x320>)
 800f51c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f520:	ea33 0308 	bics.w	r3, r3, r8
 800f524:	d114      	bne.n	800f550 <_dtoa_r+0x98>
 800f526:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f528:	f242 730f 	movw	r3, #9999	; 0x270f
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	9b00      	ldr	r3, [sp, #0]
 800f530:	b923      	cbnz	r3, 800f53c <_dtoa_r+0x84>
 800f532:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f536:	2800      	cmp	r0, #0
 800f538:	f000 8542 	beq.w	800ffc0 <_dtoa_r+0xb08>
 800f53c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f53e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f7ec <_dtoa_r+0x334>
 800f542:	2b00      	cmp	r3, #0
 800f544:	f000 8544 	beq.w	800ffd0 <_dtoa_r+0xb18>
 800f548:	f10b 0303 	add.w	r3, fp, #3
 800f54c:	f000 bd3e 	b.w	800ffcc <_dtoa_r+0xb14>
 800f550:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f554:	2200      	movs	r2, #0
 800f556:	2300      	movs	r3, #0
 800f558:	4630      	mov	r0, r6
 800f55a:	4639      	mov	r1, r7
 800f55c:	f7f1 fadc 	bl	8000b18 <__aeabi_dcmpeq>
 800f560:	4681      	mov	r9, r0
 800f562:	b168      	cbz	r0, 800f580 <_dtoa_r+0xc8>
 800f564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f566:	2301      	movs	r3, #1
 800f568:	6013      	str	r3, [r2, #0]
 800f56a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 8524 	beq.w	800ffba <_dtoa_r+0xb02>
 800f572:	4b9a      	ldr	r3, [pc, #616]	; (800f7dc <_dtoa_r+0x324>)
 800f574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f576:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	f000 bd28 	b.w	800ffd0 <_dtoa_r+0xb18>
 800f580:	aa14      	add	r2, sp, #80	; 0x50
 800f582:	a915      	add	r1, sp, #84	; 0x54
 800f584:	ec47 6b10 	vmov	d0, r6, r7
 800f588:	4620      	mov	r0, r4
 800f58a:	f001 f9d8 	bl	801093e <__d2b>
 800f58e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f592:	9004      	str	r0, [sp, #16]
 800f594:	2d00      	cmp	r5, #0
 800f596:	d07c      	beq.n	800f692 <_dtoa_r+0x1da>
 800f598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f59c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f5a0:	46b2      	mov	sl, r6
 800f5a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f5a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f5aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4b8b      	ldr	r3, [pc, #556]	; (800f7e0 <_dtoa_r+0x328>)
 800f5b2:	4650      	mov	r0, sl
 800f5b4:	4659      	mov	r1, fp
 800f5b6:	f7f0 fe8f 	bl	80002d8 <__aeabi_dsub>
 800f5ba:	a381      	add	r3, pc, #516	; (adr r3, 800f7c0 <_dtoa_r+0x308>)
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f7f1 f842 	bl	8000648 <__aeabi_dmul>
 800f5c4:	a380      	add	r3, pc, #512	; (adr r3, 800f7c8 <_dtoa_r+0x310>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	f7f0 fe87 	bl	80002dc <__adddf3>
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	460f      	mov	r7, r1
 800f5d4:	f7f0 ffce 	bl	8000574 <__aeabi_i2d>
 800f5d8:	a37d      	add	r3, pc, #500	; (adr r3, 800f7d0 <_dtoa_r+0x318>)
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f7f1 f833 	bl	8000648 <__aeabi_dmul>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	f7f0 fe77 	bl	80002dc <__adddf3>
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	460f      	mov	r7, r1
 800f5f2:	f7f1 fad9 	bl	8000ba8 <__aeabi_d2iz>
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	4682      	mov	sl, r0
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f1 fa94 	bl	8000b2c <__aeabi_dcmplt>
 800f604:	b148      	cbz	r0, 800f61a <_dtoa_r+0x162>
 800f606:	4650      	mov	r0, sl
 800f608:	f7f0 ffb4 	bl	8000574 <__aeabi_i2d>
 800f60c:	4632      	mov	r2, r6
 800f60e:	463b      	mov	r3, r7
 800f610:	f7f1 fa82 	bl	8000b18 <__aeabi_dcmpeq>
 800f614:	b908      	cbnz	r0, 800f61a <_dtoa_r+0x162>
 800f616:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f61a:	f1ba 0f16 	cmp.w	sl, #22
 800f61e:	d859      	bhi.n	800f6d4 <_dtoa_r+0x21c>
 800f620:	4970      	ldr	r1, [pc, #448]	; (800f7e4 <_dtoa_r+0x32c>)
 800f622:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f62e:	f7f1 fa9b 	bl	8000b68 <__aeabi_dcmpgt>
 800f632:	2800      	cmp	r0, #0
 800f634:	d050      	beq.n	800f6d8 <_dtoa_r+0x220>
 800f636:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f63a:	2300      	movs	r3, #0
 800f63c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f63e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f640:	1b5d      	subs	r5, r3, r5
 800f642:	f1b5 0801 	subs.w	r8, r5, #1
 800f646:	bf49      	itett	mi
 800f648:	f1c5 0301 	rsbmi	r3, r5, #1
 800f64c:	2300      	movpl	r3, #0
 800f64e:	9305      	strmi	r3, [sp, #20]
 800f650:	f04f 0800 	movmi.w	r8, #0
 800f654:	bf58      	it	pl
 800f656:	9305      	strpl	r3, [sp, #20]
 800f658:	f1ba 0f00 	cmp.w	sl, #0
 800f65c:	db3e      	blt.n	800f6dc <_dtoa_r+0x224>
 800f65e:	2300      	movs	r3, #0
 800f660:	44d0      	add	r8, sl
 800f662:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f666:	9307      	str	r3, [sp, #28]
 800f668:	9b06      	ldr	r3, [sp, #24]
 800f66a:	2b09      	cmp	r3, #9
 800f66c:	f200 8090 	bhi.w	800f790 <_dtoa_r+0x2d8>
 800f670:	2b05      	cmp	r3, #5
 800f672:	bfc4      	itt	gt
 800f674:	3b04      	subgt	r3, #4
 800f676:	9306      	strgt	r3, [sp, #24]
 800f678:	9b06      	ldr	r3, [sp, #24]
 800f67a:	f1a3 0302 	sub.w	r3, r3, #2
 800f67e:	bfcc      	ite	gt
 800f680:	2500      	movgt	r5, #0
 800f682:	2501      	movle	r5, #1
 800f684:	2b03      	cmp	r3, #3
 800f686:	f200 808f 	bhi.w	800f7a8 <_dtoa_r+0x2f0>
 800f68a:	e8df f003 	tbb	[pc, r3]
 800f68e:	7f7d      	.short	0x7f7d
 800f690:	7131      	.short	0x7131
 800f692:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f696:	441d      	add	r5, r3
 800f698:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f69c:	2820      	cmp	r0, #32
 800f69e:	dd13      	ble.n	800f6c8 <_dtoa_r+0x210>
 800f6a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f6a4:	9b00      	ldr	r3, [sp, #0]
 800f6a6:	fa08 f800 	lsl.w	r8, r8, r0
 800f6aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f6ae:	fa23 f000 	lsr.w	r0, r3, r0
 800f6b2:	ea48 0000 	orr.w	r0, r8, r0
 800f6b6:	f7f0 ff4d 	bl	8000554 <__aeabi_ui2d>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	4682      	mov	sl, r0
 800f6be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f6c2:	3d01      	subs	r5, #1
 800f6c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800f6c6:	e772      	b.n	800f5ae <_dtoa_r+0xf6>
 800f6c8:	9b00      	ldr	r3, [sp, #0]
 800f6ca:	f1c0 0020 	rsb	r0, r0, #32
 800f6ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f6d2:	e7f0      	b.n	800f6b6 <_dtoa_r+0x1fe>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e7b1      	b.n	800f63c <_dtoa_r+0x184>
 800f6d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6da:	e7b0      	b.n	800f63e <_dtoa_r+0x186>
 800f6dc:	9b05      	ldr	r3, [sp, #20]
 800f6de:	eba3 030a 	sub.w	r3, r3, sl
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	f1ca 0300 	rsb	r3, sl, #0
 800f6e8:	9307      	str	r3, [sp, #28]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	930e      	str	r3, [sp, #56]	; 0x38
 800f6ee:	e7bb      	b.n	800f668 <_dtoa_r+0x1b0>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dd59      	ble.n	800f7ae <_dtoa_r+0x2f6>
 800f6fa:	9302      	str	r3, [sp, #8]
 800f6fc:	4699      	mov	r9, r3
 800f6fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f700:	2200      	movs	r2, #0
 800f702:	6072      	str	r2, [r6, #4]
 800f704:	2204      	movs	r2, #4
 800f706:	f102 0014 	add.w	r0, r2, #20
 800f70a:	4298      	cmp	r0, r3
 800f70c:	6871      	ldr	r1, [r6, #4]
 800f70e:	d953      	bls.n	800f7b8 <_dtoa_r+0x300>
 800f710:	4620      	mov	r0, r4
 800f712:	f000 fe88 	bl	8010426 <_Balloc>
 800f716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f718:	6030      	str	r0, [r6, #0]
 800f71a:	f1b9 0f0e 	cmp.w	r9, #14
 800f71e:	f8d3 b000 	ldr.w	fp, [r3]
 800f722:	f200 80e6 	bhi.w	800f8f2 <_dtoa_r+0x43a>
 800f726:	2d00      	cmp	r5, #0
 800f728:	f000 80e3 	beq.w	800f8f2 <_dtoa_r+0x43a>
 800f72c:	ed9d 7b00 	vldr	d7, [sp]
 800f730:	f1ba 0f00 	cmp.w	sl, #0
 800f734:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f738:	dd74      	ble.n	800f824 <_dtoa_r+0x36c>
 800f73a:	4a2a      	ldr	r2, [pc, #168]	; (800f7e4 <_dtoa_r+0x32c>)
 800f73c:	f00a 030f 	and.w	r3, sl, #15
 800f740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f744:	ed93 7b00 	vldr	d7, [r3]
 800f748:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f74c:	06f0      	lsls	r0, r6, #27
 800f74e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f752:	d565      	bpl.n	800f820 <_dtoa_r+0x368>
 800f754:	4b24      	ldr	r3, [pc, #144]	; (800f7e8 <_dtoa_r+0x330>)
 800f756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f75a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f75e:	f7f1 f89d 	bl	800089c <__aeabi_ddiv>
 800f762:	e9cd 0100 	strd	r0, r1, [sp]
 800f766:	f006 060f 	and.w	r6, r6, #15
 800f76a:	2503      	movs	r5, #3
 800f76c:	4f1e      	ldr	r7, [pc, #120]	; (800f7e8 <_dtoa_r+0x330>)
 800f76e:	e04c      	b.n	800f80a <_dtoa_r+0x352>
 800f770:	2301      	movs	r3, #1
 800f772:	930a      	str	r3, [sp, #40]	; 0x28
 800f774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f776:	4453      	add	r3, sl
 800f778:	f103 0901 	add.w	r9, r3, #1
 800f77c:	9302      	str	r3, [sp, #8]
 800f77e:	464b      	mov	r3, r9
 800f780:	2b01      	cmp	r3, #1
 800f782:	bfb8      	it	lt
 800f784:	2301      	movlt	r3, #1
 800f786:	e7ba      	b.n	800f6fe <_dtoa_r+0x246>
 800f788:	2300      	movs	r3, #0
 800f78a:	e7b2      	b.n	800f6f2 <_dtoa_r+0x23a>
 800f78c:	2300      	movs	r3, #0
 800f78e:	e7f0      	b.n	800f772 <_dtoa_r+0x2ba>
 800f790:	2501      	movs	r5, #1
 800f792:	2300      	movs	r3, #0
 800f794:	9306      	str	r3, [sp, #24]
 800f796:	950a      	str	r5, [sp, #40]	; 0x28
 800f798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f79c:	9302      	str	r3, [sp, #8]
 800f79e:	4699      	mov	r9, r3
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2312      	movs	r3, #18
 800f7a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f7a6:	e7aa      	b.n	800f6fe <_dtoa_r+0x246>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f7ac:	e7f4      	b.n	800f798 <_dtoa_r+0x2e0>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	9302      	str	r3, [sp, #8]
 800f7b2:	4699      	mov	r9, r3
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	e7f5      	b.n	800f7a4 <_dtoa_r+0x2ec>
 800f7b8:	3101      	adds	r1, #1
 800f7ba:	6071      	str	r1, [r6, #4]
 800f7bc:	0052      	lsls	r2, r2, #1
 800f7be:	e7a2      	b.n	800f706 <_dtoa_r+0x24e>
 800f7c0:	636f4361 	.word	0x636f4361
 800f7c4:	3fd287a7 	.word	0x3fd287a7
 800f7c8:	8b60c8b3 	.word	0x8b60c8b3
 800f7cc:	3fc68a28 	.word	0x3fc68a28
 800f7d0:	509f79fb 	.word	0x509f79fb
 800f7d4:	3fd34413 	.word	0x3fd34413
 800f7d8:	7ff00000 	.word	0x7ff00000
 800f7dc:	08013a8d 	.word	0x08013a8d
 800f7e0:	3ff80000 	.word	0x3ff80000
 800f7e4:	08013898 	.word	0x08013898
 800f7e8:	08013870 	.word	0x08013870
 800f7ec:	08013807 	.word	0x08013807
 800f7f0:	07f1      	lsls	r1, r6, #31
 800f7f2:	d508      	bpl.n	800f806 <_dtoa_r+0x34e>
 800f7f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7fc:	f7f0 ff24 	bl	8000648 <__aeabi_dmul>
 800f800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f804:	3501      	adds	r5, #1
 800f806:	1076      	asrs	r6, r6, #1
 800f808:	3708      	adds	r7, #8
 800f80a:	2e00      	cmp	r6, #0
 800f80c:	d1f0      	bne.n	800f7f0 <_dtoa_r+0x338>
 800f80e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f812:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f816:	f7f1 f841 	bl	800089c <__aeabi_ddiv>
 800f81a:	e9cd 0100 	strd	r0, r1, [sp]
 800f81e:	e01a      	b.n	800f856 <_dtoa_r+0x39e>
 800f820:	2502      	movs	r5, #2
 800f822:	e7a3      	b.n	800f76c <_dtoa_r+0x2b4>
 800f824:	f000 80a0 	beq.w	800f968 <_dtoa_r+0x4b0>
 800f828:	f1ca 0600 	rsb	r6, sl, #0
 800f82c:	4b9f      	ldr	r3, [pc, #636]	; (800faac <_dtoa_r+0x5f4>)
 800f82e:	4fa0      	ldr	r7, [pc, #640]	; (800fab0 <_dtoa_r+0x5f8>)
 800f830:	f006 020f 	and.w	r2, r6, #15
 800f834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f840:	f7f0 ff02 	bl	8000648 <__aeabi_dmul>
 800f844:	e9cd 0100 	strd	r0, r1, [sp]
 800f848:	1136      	asrs	r6, r6, #4
 800f84a:	2300      	movs	r3, #0
 800f84c:	2502      	movs	r5, #2
 800f84e:	2e00      	cmp	r6, #0
 800f850:	d17f      	bne.n	800f952 <_dtoa_r+0x49a>
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1e1      	bne.n	800f81a <_dtoa_r+0x362>
 800f856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f000 8087 	beq.w	800f96c <_dtoa_r+0x4b4>
 800f85e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f862:	2200      	movs	r2, #0
 800f864:	4b93      	ldr	r3, [pc, #588]	; (800fab4 <_dtoa_r+0x5fc>)
 800f866:	4630      	mov	r0, r6
 800f868:	4639      	mov	r1, r7
 800f86a:	f7f1 f95f 	bl	8000b2c <__aeabi_dcmplt>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d07c      	beq.n	800f96c <_dtoa_r+0x4b4>
 800f872:	f1b9 0f00 	cmp.w	r9, #0
 800f876:	d079      	beq.n	800f96c <_dtoa_r+0x4b4>
 800f878:	9b02      	ldr	r3, [sp, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	dd35      	ble.n	800f8ea <_dtoa_r+0x432>
 800f87e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f882:	9308      	str	r3, [sp, #32]
 800f884:	4639      	mov	r1, r7
 800f886:	2200      	movs	r2, #0
 800f888:	4b8b      	ldr	r3, [pc, #556]	; (800fab8 <_dtoa_r+0x600>)
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7f0 fedc 	bl	8000648 <__aeabi_dmul>
 800f890:	e9cd 0100 	strd	r0, r1, [sp]
 800f894:	9f02      	ldr	r7, [sp, #8]
 800f896:	3501      	adds	r5, #1
 800f898:	4628      	mov	r0, r5
 800f89a:	f7f0 fe6b 	bl	8000574 <__aeabi_i2d>
 800f89e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8a2:	f7f0 fed1 	bl	8000648 <__aeabi_dmul>
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	4b84      	ldr	r3, [pc, #528]	; (800fabc <_dtoa_r+0x604>)
 800f8aa:	f7f0 fd17 	bl	80002dc <__adddf3>
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f8b4:	2f00      	cmp	r7, #0
 800f8b6:	d15d      	bne.n	800f974 <_dtoa_r+0x4bc>
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	4b81      	ldr	r3, [pc, #516]	; (800fac0 <_dtoa_r+0x608>)
 800f8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8c0:	f7f0 fd0a 	bl	80002d8 <__aeabi_dsub>
 800f8c4:	462a      	mov	r2, r5
 800f8c6:	4633      	mov	r3, r6
 800f8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800f8cc:	f7f1 f94c 	bl	8000b68 <__aeabi_dcmpgt>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	f040 8288 	bne.w	800fde6 <_dtoa_r+0x92e>
 800f8d6:	462a      	mov	r2, r5
 800f8d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8e0:	f7f1 f924 	bl	8000b2c <__aeabi_dcmplt>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	f040 827c 	bne.w	800fde2 <_dtoa_r+0x92a>
 800f8ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8ee:	e9cd 2300 	strd	r2, r3, [sp]
 800f8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f2c0 8150 	blt.w	800fb9a <_dtoa_r+0x6e2>
 800f8fa:	f1ba 0f0e 	cmp.w	sl, #14
 800f8fe:	f300 814c 	bgt.w	800fb9a <_dtoa_r+0x6e2>
 800f902:	4b6a      	ldr	r3, [pc, #424]	; (800faac <_dtoa_r+0x5f4>)
 800f904:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f908:	ed93 7b00 	vldr	d7, [r3]
 800f90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f90e:	2b00      	cmp	r3, #0
 800f910:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f914:	f280 80d8 	bge.w	800fac8 <_dtoa_r+0x610>
 800f918:	f1b9 0f00 	cmp.w	r9, #0
 800f91c:	f300 80d4 	bgt.w	800fac8 <_dtoa_r+0x610>
 800f920:	f040 825e 	bne.w	800fde0 <_dtoa_r+0x928>
 800f924:	2200      	movs	r2, #0
 800f926:	4b66      	ldr	r3, [pc, #408]	; (800fac0 <_dtoa_r+0x608>)
 800f928:	ec51 0b17 	vmov	r0, r1, d7
 800f92c:	f7f0 fe8c 	bl	8000648 <__aeabi_dmul>
 800f930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f934:	f7f1 f90e 	bl	8000b54 <__aeabi_dcmpge>
 800f938:	464f      	mov	r7, r9
 800f93a:	464e      	mov	r6, r9
 800f93c:	2800      	cmp	r0, #0
 800f93e:	f040 8234 	bne.w	800fdaa <_dtoa_r+0x8f2>
 800f942:	2331      	movs	r3, #49	; 0x31
 800f944:	f10b 0501 	add.w	r5, fp, #1
 800f948:	f88b 3000 	strb.w	r3, [fp]
 800f94c:	f10a 0a01 	add.w	sl, sl, #1
 800f950:	e22f      	b.n	800fdb2 <_dtoa_r+0x8fa>
 800f952:	07f2      	lsls	r2, r6, #31
 800f954:	d505      	bpl.n	800f962 <_dtoa_r+0x4aa>
 800f956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f95a:	f7f0 fe75 	bl	8000648 <__aeabi_dmul>
 800f95e:	3501      	adds	r5, #1
 800f960:	2301      	movs	r3, #1
 800f962:	1076      	asrs	r6, r6, #1
 800f964:	3708      	adds	r7, #8
 800f966:	e772      	b.n	800f84e <_dtoa_r+0x396>
 800f968:	2502      	movs	r5, #2
 800f96a:	e774      	b.n	800f856 <_dtoa_r+0x39e>
 800f96c:	f8cd a020 	str.w	sl, [sp, #32]
 800f970:	464f      	mov	r7, r9
 800f972:	e791      	b.n	800f898 <_dtoa_r+0x3e0>
 800f974:	4b4d      	ldr	r3, [pc, #308]	; (800faac <_dtoa_r+0x5f4>)
 800f976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f97a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f980:	2b00      	cmp	r3, #0
 800f982:	d047      	beq.n	800fa14 <_dtoa_r+0x55c>
 800f984:	4602      	mov	r2, r0
 800f986:	460b      	mov	r3, r1
 800f988:	2000      	movs	r0, #0
 800f98a:	494e      	ldr	r1, [pc, #312]	; (800fac4 <_dtoa_r+0x60c>)
 800f98c:	f7f0 ff86 	bl	800089c <__aeabi_ddiv>
 800f990:	462a      	mov	r2, r5
 800f992:	4633      	mov	r3, r6
 800f994:	f7f0 fca0 	bl	80002d8 <__aeabi_dsub>
 800f998:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f99c:	465d      	mov	r5, fp
 800f99e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9a2:	f7f1 f901 	bl	8000ba8 <__aeabi_d2iz>
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	f7f0 fde4 	bl	8000574 <__aeabi_i2d>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9b4:	f7f0 fc90 	bl	80002d8 <__aeabi_dsub>
 800f9b8:	3630      	adds	r6, #48	; 0x30
 800f9ba:	f805 6b01 	strb.w	r6, [r5], #1
 800f9be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f9c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9c6:	f7f1 f8b1 	bl	8000b2c <__aeabi_dcmplt>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d163      	bne.n	800fa96 <_dtoa_r+0x5de>
 800f9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	4937      	ldr	r1, [pc, #220]	; (800fab4 <_dtoa_r+0x5fc>)
 800f9d6:	f7f0 fc7f 	bl	80002d8 <__aeabi_dsub>
 800f9da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f9de:	f7f1 f8a5 	bl	8000b2c <__aeabi_dcmplt>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	f040 80b7 	bne.w	800fb56 <_dtoa_r+0x69e>
 800f9e8:	eba5 030b 	sub.w	r3, r5, fp
 800f9ec:	429f      	cmp	r7, r3
 800f9ee:	f77f af7c 	ble.w	800f8ea <_dtoa_r+0x432>
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	4b30      	ldr	r3, [pc, #192]	; (800fab8 <_dtoa_r+0x600>)
 800f9f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f9fa:	f7f0 fe25 	bl	8000648 <__aeabi_dmul>
 800f9fe:	2200      	movs	r2, #0
 800fa00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa04:	4b2c      	ldr	r3, [pc, #176]	; (800fab8 <_dtoa_r+0x600>)
 800fa06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa0a:	f7f0 fe1d 	bl	8000648 <__aeabi_dmul>
 800fa0e:	e9cd 0100 	strd	r0, r1, [sp]
 800fa12:	e7c4      	b.n	800f99e <_dtoa_r+0x4e6>
 800fa14:	462a      	mov	r2, r5
 800fa16:	4633      	mov	r3, r6
 800fa18:	f7f0 fe16 	bl	8000648 <__aeabi_dmul>
 800fa1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa20:	eb0b 0507 	add.w	r5, fp, r7
 800fa24:	465e      	mov	r6, fp
 800fa26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa2a:	f7f1 f8bd 	bl	8000ba8 <__aeabi_d2iz>
 800fa2e:	4607      	mov	r7, r0
 800fa30:	f7f0 fda0 	bl	8000574 <__aeabi_i2d>
 800fa34:	3730      	adds	r7, #48	; 0x30
 800fa36:	4602      	mov	r2, r0
 800fa38:	460b      	mov	r3, r1
 800fa3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa3e:	f7f0 fc4b 	bl	80002d8 <__aeabi_dsub>
 800fa42:	f806 7b01 	strb.w	r7, [r6], #1
 800fa46:	42ae      	cmp	r6, r5
 800fa48:	e9cd 0100 	strd	r0, r1, [sp]
 800fa4c:	f04f 0200 	mov.w	r2, #0
 800fa50:	d126      	bne.n	800faa0 <_dtoa_r+0x5e8>
 800fa52:	4b1c      	ldr	r3, [pc, #112]	; (800fac4 <_dtoa_r+0x60c>)
 800fa54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa58:	f7f0 fc40 	bl	80002dc <__adddf3>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa64:	f7f1 f880 	bl	8000b68 <__aeabi_dcmpgt>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d174      	bne.n	800fb56 <_dtoa_r+0x69e>
 800fa6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa70:	2000      	movs	r0, #0
 800fa72:	4914      	ldr	r1, [pc, #80]	; (800fac4 <_dtoa_r+0x60c>)
 800fa74:	f7f0 fc30 	bl	80002d8 <__aeabi_dsub>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa80:	f7f1 f854 	bl	8000b2c <__aeabi_dcmplt>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	f43f af30 	beq.w	800f8ea <_dtoa_r+0x432>
 800fa8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa8e:	2b30      	cmp	r3, #48	; 0x30
 800fa90:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fa94:	d002      	beq.n	800fa9c <_dtoa_r+0x5e4>
 800fa96:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa9a:	e04a      	b.n	800fb32 <_dtoa_r+0x67a>
 800fa9c:	4615      	mov	r5, r2
 800fa9e:	e7f4      	b.n	800fa8a <_dtoa_r+0x5d2>
 800faa0:	4b05      	ldr	r3, [pc, #20]	; (800fab8 <_dtoa_r+0x600>)
 800faa2:	f7f0 fdd1 	bl	8000648 <__aeabi_dmul>
 800faa6:	e9cd 0100 	strd	r0, r1, [sp]
 800faaa:	e7bc      	b.n	800fa26 <_dtoa_r+0x56e>
 800faac:	08013898 	.word	0x08013898
 800fab0:	08013870 	.word	0x08013870
 800fab4:	3ff00000 	.word	0x3ff00000
 800fab8:	40240000 	.word	0x40240000
 800fabc:	401c0000 	.word	0x401c0000
 800fac0:	40140000 	.word	0x40140000
 800fac4:	3fe00000 	.word	0x3fe00000
 800fac8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800facc:	465d      	mov	r5, fp
 800face:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fad2:	4630      	mov	r0, r6
 800fad4:	4639      	mov	r1, r7
 800fad6:	f7f0 fee1 	bl	800089c <__aeabi_ddiv>
 800fada:	f7f1 f865 	bl	8000ba8 <__aeabi_d2iz>
 800fade:	4680      	mov	r8, r0
 800fae0:	f7f0 fd48 	bl	8000574 <__aeabi_i2d>
 800fae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fae8:	f7f0 fdae 	bl	8000648 <__aeabi_dmul>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4630      	mov	r0, r6
 800faf2:	4639      	mov	r1, r7
 800faf4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800faf8:	f7f0 fbee 	bl	80002d8 <__aeabi_dsub>
 800fafc:	f805 6b01 	strb.w	r6, [r5], #1
 800fb00:	eba5 060b 	sub.w	r6, r5, fp
 800fb04:	45b1      	cmp	r9, r6
 800fb06:	4602      	mov	r2, r0
 800fb08:	460b      	mov	r3, r1
 800fb0a:	d139      	bne.n	800fb80 <_dtoa_r+0x6c8>
 800fb0c:	f7f0 fbe6 	bl	80002dc <__adddf3>
 800fb10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb14:	4606      	mov	r6, r0
 800fb16:	460f      	mov	r7, r1
 800fb18:	f7f1 f826 	bl	8000b68 <__aeabi_dcmpgt>
 800fb1c:	b9c8      	cbnz	r0, 800fb52 <_dtoa_r+0x69a>
 800fb1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb22:	4630      	mov	r0, r6
 800fb24:	4639      	mov	r1, r7
 800fb26:	f7f0 fff7 	bl	8000b18 <__aeabi_dcmpeq>
 800fb2a:	b110      	cbz	r0, 800fb32 <_dtoa_r+0x67a>
 800fb2c:	f018 0f01 	tst.w	r8, #1
 800fb30:	d10f      	bne.n	800fb52 <_dtoa_r+0x69a>
 800fb32:	9904      	ldr	r1, [sp, #16]
 800fb34:	4620      	mov	r0, r4
 800fb36:	f000 fcaa 	bl	801048e <_Bfree>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb3e:	702b      	strb	r3, [r5, #0]
 800fb40:	f10a 0301 	add.w	r3, sl, #1
 800fb44:	6013      	str	r3, [r2, #0]
 800fb46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 8241 	beq.w	800ffd0 <_dtoa_r+0xb18>
 800fb4e:	601d      	str	r5, [r3, #0]
 800fb50:	e23e      	b.n	800ffd0 <_dtoa_r+0xb18>
 800fb52:	f8cd a020 	str.w	sl, [sp, #32]
 800fb56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb5a:	2a39      	cmp	r2, #57	; 0x39
 800fb5c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fb60:	d108      	bne.n	800fb74 <_dtoa_r+0x6bc>
 800fb62:	459b      	cmp	fp, r3
 800fb64:	d10a      	bne.n	800fb7c <_dtoa_r+0x6c4>
 800fb66:	9b08      	ldr	r3, [sp, #32]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	9308      	str	r3, [sp, #32]
 800fb6c:	2330      	movs	r3, #48	; 0x30
 800fb6e:	f88b 3000 	strb.w	r3, [fp]
 800fb72:	465b      	mov	r3, fp
 800fb74:	781a      	ldrb	r2, [r3, #0]
 800fb76:	3201      	adds	r2, #1
 800fb78:	701a      	strb	r2, [r3, #0]
 800fb7a:	e78c      	b.n	800fa96 <_dtoa_r+0x5de>
 800fb7c:	461d      	mov	r5, r3
 800fb7e:	e7ea      	b.n	800fb56 <_dtoa_r+0x69e>
 800fb80:	2200      	movs	r2, #0
 800fb82:	4b9b      	ldr	r3, [pc, #620]	; (800fdf0 <_dtoa_r+0x938>)
 800fb84:	f7f0 fd60 	bl	8000648 <__aeabi_dmul>
 800fb88:	2200      	movs	r2, #0
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	460f      	mov	r7, r1
 800fb90:	f7f0 ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d09a      	beq.n	800face <_dtoa_r+0x616>
 800fb98:	e7cb      	b.n	800fb32 <_dtoa_r+0x67a>
 800fb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb9c:	2a00      	cmp	r2, #0
 800fb9e:	f000 808b 	beq.w	800fcb8 <_dtoa_r+0x800>
 800fba2:	9a06      	ldr	r2, [sp, #24]
 800fba4:	2a01      	cmp	r2, #1
 800fba6:	dc6e      	bgt.n	800fc86 <_dtoa_r+0x7ce>
 800fba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fbaa:	2a00      	cmp	r2, #0
 800fbac:	d067      	beq.n	800fc7e <_dtoa_r+0x7c6>
 800fbae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fbb2:	9f07      	ldr	r7, [sp, #28]
 800fbb4:	9d05      	ldr	r5, [sp, #20]
 800fbb6:	9a05      	ldr	r2, [sp, #20]
 800fbb8:	2101      	movs	r1, #1
 800fbba:	441a      	add	r2, r3
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	9205      	str	r2, [sp, #20]
 800fbc0:	4498      	add	r8, r3
 800fbc2:	f000 fd04 	bl	80105ce <__i2b>
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	dd0c      	ble.n	800fbe6 <_dtoa_r+0x72e>
 800fbcc:	f1b8 0f00 	cmp.w	r8, #0
 800fbd0:	dd09      	ble.n	800fbe6 <_dtoa_r+0x72e>
 800fbd2:	4545      	cmp	r5, r8
 800fbd4:	9a05      	ldr	r2, [sp, #20]
 800fbd6:	462b      	mov	r3, r5
 800fbd8:	bfa8      	it	ge
 800fbda:	4643      	movge	r3, r8
 800fbdc:	1ad2      	subs	r2, r2, r3
 800fbde:	9205      	str	r2, [sp, #20]
 800fbe0:	1aed      	subs	r5, r5, r3
 800fbe2:	eba8 0803 	sub.w	r8, r8, r3
 800fbe6:	9b07      	ldr	r3, [sp, #28]
 800fbe8:	b1eb      	cbz	r3, 800fc26 <_dtoa_r+0x76e>
 800fbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d067      	beq.n	800fcc0 <_dtoa_r+0x808>
 800fbf0:	b18f      	cbz	r7, 800fc16 <_dtoa_r+0x75e>
 800fbf2:	4631      	mov	r1, r6
 800fbf4:	463a      	mov	r2, r7
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 fd88 	bl	801070c <__pow5mult>
 800fbfc:	9a04      	ldr	r2, [sp, #16]
 800fbfe:	4601      	mov	r1, r0
 800fc00:	4606      	mov	r6, r0
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fcec 	bl	80105e0 <__multiply>
 800fc08:	9904      	ldr	r1, [sp, #16]
 800fc0a:	9008      	str	r0, [sp, #32]
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f000 fc3e 	bl	801048e <_Bfree>
 800fc12:	9b08      	ldr	r3, [sp, #32]
 800fc14:	9304      	str	r3, [sp, #16]
 800fc16:	9b07      	ldr	r3, [sp, #28]
 800fc18:	1bda      	subs	r2, r3, r7
 800fc1a:	d004      	beq.n	800fc26 <_dtoa_r+0x76e>
 800fc1c:	9904      	ldr	r1, [sp, #16]
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f000 fd74 	bl	801070c <__pow5mult>
 800fc24:	9004      	str	r0, [sp, #16]
 800fc26:	2101      	movs	r1, #1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 fcd0 	bl	80105ce <__i2b>
 800fc2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc30:	4607      	mov	r7, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 81d0 	beq.w	800ffd8 <_dtoa_r+0xb20>
 800fc38:	461a      	mov	r2, r3
 800fc3a:	4601      	mov	r1, r0
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f000 fd65 	bl	801070c <__pow5mult>
 800fc42:	9b06      	ldr	r3, [sp, #24]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	4607      	mov	r7, r0
 800fc48:	dc40      	bgt.n	800fccc <_dtoa_r+0x814>
 800fc4a:	9b00      	ldr	r3, [sp, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d139      	bne.n	800fcc4 <_dtoa_r+0x80c>
 800fc50:	9b01      	ldr	r3, [sp, #4]
 800fc52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d136      	bne.n	800fcc8 <_dtoa_r+0x810>
 800fc5a:	9b01      	ldr	r3, [sp, #4]
 800fc5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc60:	0d1b      	lsrs	r3, r3, #20
 800fc62:	051b      	lsls	r3, r3, #20
 800fc64:	b12b      	cbz	r3, 800fc72 <_dtoa_r+0x7ba>
 800fc66:	9b05      	ldr	r3, [sp, #20]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	9305      	str	r3, [sp, #20]
 800fc6c:	f108 0801 	add.w	r8, r8, #1
 800fc70:	2301      	movs	r3, #1
 800fc72:	9307      	str	r3, [sp, #28]
 800fc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d12a      	bne.n	800fcd0 <_dtoa_r+0x818>
 800fc7a:	2001      	movs	r0, #1
 800fc7c:	e030      	b.n	800fce0 <_dtoa_r+0x828>
 800fc7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc84:	e795      	b.n	800fbb2 <_dtoa_r+0x6fa>
 800fc86:	9b07      	ldr	r3, [sp, #28]
 800fc88:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fc8c:	42bb      	cmp	r3, r7
 800fc8e:	bfbf      	itttt	lt
 800fc90:	9b07      	ldrlt	r3, [sp, #28]
 800fc92:	9707      	strlt	r7, [sp, #28]
 800fc94:	1afa      	sublt	r2, r7, r3
 800fc96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fc98:	bfbb      	ittet	lt
 800fc9a:	189b      	addlt	r3, r3, r2
 800fc9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fc9e:	1bdf      	subge	r7, r3, r7
 800fca0:	2700      	movlt	r7, #0
 800fca2:	f1b9 0f00 	cmp.w	r9, #0
 800fca6:	bfb5      	itete	lt
 800fca8:	9b05      	ldrlt	r3, [sp, #20]
 800fcaa:	9d05      	ldrge	r5, [sp, #20]
 800fcac:	eba3 0509 	sublt.w	r5, r3, r9
 800fcb0:	464b      	movge	r3, r9
 800fcb2:	bfb8      	it	lt
 800fcb4:	2300      	movlt	r3, #0
 800fcb6:	e77e      	b.n	800fbb6 <_dtoa_r+0x6fe>
 800fcb8:	9f07      	ldr	r7, [sp, #28]
 800fcba:	9d05      	ldr	r5, [sp, #20]
 800fcbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fcbe:	e783      	b.n	800fbc8 <_dtoa_r+0x710>
 800fcc0:	9a07      	ldr	r2, [sp, #28]
 800fcc2:	e7ab      	b.n	800fc1c <_dtoa_r+0x764>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e7d4      	b.n	800fc72 <_dtoa_r+0x7ba>
 800fcc8:	9b00      	ldr	r3, [sp, #0]
 800fcca:	e7d2      	b.n	800fc72 <_dtoa_r+0x7ba>
 800fccc:	2300      	movs	r3, #0
 800fcce:	9307      	str	r3, [sp, #28]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fcd6:	6918      	ldr	r0, [r3, #16]
 800fcd8:	f000 fc2b 	bl	8010532 <__hi0bits>
 800fcdc:	f1c0 0020 	rsb	r0, r0, #32
 800fce0:	4440      	add	r0, r8
 800fce2:	f010 001f 	ands.w	r0, r0, #31
 800fce6:	d047      	beq.n	800fd78 <_dtoa_r+0x8c0>
 800fce8:	f1c0 0320 	rsb	r3, r0, #32
 800fcec:	2b04      	cmp	r3, #4
 800fcee:	dd3b      	ble.n	800fd68 <_dtoa_r+0x8b0>
 800fcf0:	9b05      	ldr	r3, [sp, #20]
 800fcf2:	f1c0 001c 	rsb	r0, r0, #28
 800fcf6:	4403      	add	r3, r0
 800fcf8:	9305      	str	r3, [sp, #20]
 800fcfa:	4405      	add	r5, r0
 800fcfc:	4480      	add	r8, r0
 800fcfe:	9b05      	ldr	r3, [sp, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	dd05      	ble.n	800fd10 <_dtoa_r+0x858>
 800fd04:	461a      	mov	r2, r3
 800fd06:	9904      	ldr	r1, [sp, #16]
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f000 fd4d 	bl	80107a8 <__lshift>
 800fd0e:	9004      	str	r0, [sp, #16]
 800fd10:	f1b8 0f00 	cmp.w	r8, #0
 800fd14:	dd05      	ble.n	800fd22 <_dtoa_r+0x86a>
 800fd16:	4639      	mov	r1, r7
 800fd18:	4642      	mov	r2, r8
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f000 fd44 	bl	80107a8 <__lshift>
 800fd20:	4607      	mov	r7, r0
 800fd22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd24:	b353      	cbz	r3, 800fd7c <_dtoa_r+0x8c4>
 800fd26:	4639      	mov	r1, r7
 800fd28:	9804      	ldr	r0, [sp, #16]
 800fd2a:	f000 fd91 	bl	8010850 <__mcmp>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	da24      	bge.n	800fd7c <_dtoa_r+0x8c4>
 800fd32:	2300      	movs	r3, #0
 800fd34:	220a      	movs	r2, #10
 800fd36:	9904      	ldr	r1, [sp, #16]
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 fbbf 	bl	80104bc <__multadd>
 800fd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd40:	9004      	str	r0, [sp, #16]
 800fd42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 814d 	beq.w	800ffe6 <_dtoa_r+0xb2e>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4631      	mov	r1, r6
 800fd50:	220a      	movs	r2, #10
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 fbb2 	bl	80104bc <__multadd>
 800fd58:	9b02      	ldr	r3, [sp, #8]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	dc4f      	bgt.n	800fe00 <_dtoa_r+0x948>
 800fd60:	9b06      	ldr	r3, [sp, #24]
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	dd4c      	ble.n	800fe00 <_dtoa_r+0x948>
 800fd66:	e011      	b.n	800fd8c <_dtoa_r+0x8d4>
 800fd68:	d0c9      	beq.n	800fcfe <_dtoa_r+0x846>
 800fd6a:	9a05      	ldr	r2, [sp, #20]
 800fd6c:	331c      	adds	r3, #28
 800fd6e:	441a      	add	r2, r3
 800fd70:	9205      	str	r2, [sp, #20]
 800fd72:	441d      	add	r5, r3
 800fd74:	4498      	add	r8, r3
 800fd76:	e7c2      	b.n	800fcfe <_dtoa_r+0x846>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	e7f6      	b.n	800fd6a <_dtoa_r+0x8b2>
 800fd7c:	f1b9 0f00 	cmp.w	r9, #0
 800fd80:	dc38      	bgt.n	800fdf4 <_dtoa_r+0x93c>
 800fd82:	9b06      	ldr	r3, [sp, #24]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	dd35      	ble.n	800fdf4 <_dtoa_r+0x93c>
 800fd88:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd8c:	9b02      	ldr	r3, [sp, #8]
 800fd8e:	b963      	cbnz	r3, 800fdaa <_dtoa_r+0x8f2>
 800fd90:	4639      	mov	r1, r7
 800fd92:	2205      	movs	r2, #5
 800fd94:	4620      	mov	r0, r4
 800fd96:	f000 fb91 	bl	80104bc <__multadd>
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	4607      	mov	r7, r0
 800fd9e:	9804      	ldr	r0, [sp, #16]
 800fda0:	f000 fd56 	bl	8010850 <__mcmp>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	f73f adcc 	bgt.w	800f942 <_dtoa_r+0x48a>
 800fdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdac:	465d      	mov	r5, fp
 800fdae:	ea6f 0a03 	mvn.w	sl, r3
 800fdb2:	f04f 0900 	mov.w	r9, #0
 800fdb6:	4639      	mov	r1, r7
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f000 fb68 	bl	801048e <_Bfree>
 800fdbe:	2e00      	cmp	r6, #0
 800fdc0:	f43f aeb7 	beq.w	800fb32 <_dtoa_r+0x67a>
 800fdc4:	f1b9 0f00 	cmp.w	r9, #0
 800fdc8:	d005      	beq.n	800fdd6 <_dtoa_r+0x91e>
 800fdca:	45b1      	cmp	r9, r6
 800fdcc:	d003      	beq.n	800fdd6 <_dtoa_r+0x91e>
 800fdce:	4649      	mov	r1, r9
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 fb5c 	bl	801048e <_Bfree>
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f000 fb58 	bl	801048e <_Bfree>
 800fdde:	e6a8      	b.n	800fb32 <_dtoa_r+0x67a>
 800fde0:	2700      	movs	r7, #0
 800fde2:	463e      	mov	r6, r7
 800fde4:	e7e1      	b.n	800fdaa <_dtoa_r+0x8f2>
 800fde6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fdea:	463e      	mov	r6, r7
 800fdec:	e5a9      	b.n	800f942 <_dtoa_r+0x48a>
 800fdee:	bf00      	nop
 800fdf0:	40240000 	.word	0x40240000
 800fdf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f000 80fa 	beq.w	800fff4 <_dtoa_r+0xb3c>
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	dd05      	ble.n	800fe10 <_dtoa_r+0x958>
 800fe04:	4631      	mov	r1, r6
 800fe06:	462a      	mov	r2, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 fccd 	bl	80107a8 <__lshift>
 800fe0e:	4606      	mov	r6, r0
 800fe10:	9b07      	ldr	r3, [sp, #28]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d04c      	beq.n	800feb0 <_dtoa_r+0x9f8>
 800fe16:	6871      	ldr	r1, [r6, #4]
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fb04 	bl	8010426 <_Balloc>
 800fe1e:	6932      	ldr	r2, [r6, #16]
 800fe20:	3202      	adds	r2, #2
 800fe22:	4605      	mov	r5, r0
 800fe24:	0092      	lsls	r2, r2, #2
 800fe26:	f106 010c 	add.w	r1, r6, #12
 800fe2a:	300c      	adds	r0, #12
 800fe2c:	f000 faf0 	bl	8010410 <memcpy>
 800fe30:	2201      	movs	r2, #1
 800fe32:	4629      	mov	r1, r5
 800fe34:	4620      	mov	r0, r4
 800fe36:	f000 fcb7 	bl	80107a8 <__lshift>
 800fe3a:	9b00      	ldr	r3, [sp, #0]
 800fe3c:	f8cd b014 	str.w	fp, [sp, #20]
 800fe40:	f003 0301 	and.w	r3, r3, #1
 800fe44:	46b1      	mov	r9, r6
 800fe46:	9307      	str	r3, [sp, #28]
 800fe48:	4606      	mov	r6, r0
 800fe4a:	4639      	mov	r1, r7
 800fe4c:	9804      	ldr	r0, [sp, #16]
 800fe4e:	f7ff faa5 	bl	800f39c <quorem>
 800fe52:	4649      	mov	r1, r9
 800fe54:	4605      	mov	r5, r0
 800fe56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe5a:	9804      	ldr	r0, [sp, #16]
 800fe5c:	f000 fcf8 	bl	8010850 <__mcmp>
 800fe60:	4632      	mov	r2, r6
 800fe62:	9000      	str	r0, [sp, #0]
 800fe64:	4639      	mov	r1, r7
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 fd0c 	bl	8010884 <__mdiff>
 800fe6c:	68c3      	ldr	r3, [r0, #12]
 800fe6e:	4602      	mov	r2, r0
 800fe70:	bb03      	cbnz	r3, 800feb4 <_dtoa_r+0x9fc>
 800fe72:	4601      	mov	r1, r0
 800fe74:	9008      	str	r0, [sp, #32]
 800fe76:	9804      	ldr	r0, [sp, #16]
 800fe78:	f000 fcea 	bl	8010850 <__mcmp>
 800fe7c:	9a08      	ldr	r2, [sp, #32]
 800fe7e:	4603      	mov	r3, r0
 800fe80:	4611      	mov	r1, r2
 800fe82:	4620      	mov	r0, r4
 800fe84:	9308      	str	r3, [sp, #32]
 800fe86:	f000 fb02 	bl	801048e <_Bfree>
 800fe8a:	9b08      	ldr	r3, [sp, #32]
 800fe8c:	b9a3      	cbnz	r3, 800feb8 <_dtoa_r+0xa00>
 800fe8e:	9a06      	ldr	r2, [sp, #24]
 800fe90:	b992      	cbnz	r2, 800feb8 <_dtoa_r+0xa00>
 800fe92:	9a07      	ldr	r2, [sp, #28]
 800fe94:	b982      	cbnz	r2, 800feb8 <_dtoa_r+0xa00>
 800fe96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fe9a:	d029      	beq.n	800fef0 <_dtoa_r+0xa38>
 800fe9c:	9b00      	ldr	r3, [sp, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	dd01      	ble.n	800fea6 <_dtoa_r+0x9ee>
 800fea2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fea6:	9b05      	ldr	r3, [sp, #20]
 800fea8:	1c5d      	adds	r5, r3, #1
 800feaa:	f883 8000 	strb.w	r8, [r3]
 800feae:	e782      	b.n	800fdb6 <_dtoa_r+0x8fe>
 800feb0:	4630      	mov	r0, r6
 800feb2:	e7c2      	b.n	800fe3a <_dtoa_r+0x982>
 800feb4:	2301      	movs	r3, #1
 800feb6:	e7e3      	b.n	800fe80 <_dtoa_r+0x9c8>
 800feb8:	9a00      	ldr	r2, [sp, #0]
 800feba:	2a00      	cmp	r2, #0
 800febc:	db04      	blt.n	800fec8 <_dtoa_r+0xa10>
 800febe:	d125      	bne.n	800ff0c <_dtoa_r+0xa54>
 800fec0:	9a06      	ldr	r2, [sp, #24]
 800fec2:	bb1a      	cbnz	r2, 800ff0c <_dtoa_r+0xa54>
 800fec4:	9a07      	ldr	r2, [sp, #28]
 800fec6:	bb0a      	cbnz	r2, 800ff0c <_dtoa_r+0xa54>
 800fec8:	2b00      	cmp	r3, #0
 800feca:	ddec      	ble.n	800fea6 <_dtoa_r+0x9ee>
 800fecc:	2201      	movs	r2, #1
 800fece:	9904      	ldr	r1, [sp, #16]
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fc69 	bl	80107a8 <__lshift>
 800fed6:	4639      	mov	r1, r7
 800fed8:	9004      	str	r0, [sp, #16]
 800feda:	f000 fcb9 	bl	8010850 <__mcmp>
 800fede:	2800      	cmp	r0, #0
 800fee0:	dc03      	bgt.n	800feea <_dtoa_r+0xa32>
 800fee2:	d1e0      	bne.n	800fea6 <_dtoa_r+0x9ee>
 800fee4:	f018 0f01 	tst.w	r8, #1
 800fee8:	d0dd      	beq.n	800fea6 <_dtoa_r+0x9ee>
 800feea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800feee:	d1d8      	bne.n	800fea2 <_dtoa_r+0x9ea>
 800fef0:	9b05      	ldr	r3, [sp, #20]
 800fef2:	9a05      	ldr	r2, [sp, #20]
 800fef4:	1c5d      	adds	r5, r3, #1
 800fef6:	2339      	movs	r3, #57	; 0x39
 800fef8:	7013      	strb	r3, [r2, #0]
 800fefa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fefe:	2b39      	cmp	r3, #57	; 0x39
 800ff00:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ff04:	d04f      	beq.n	800ffa6 <_dtoa_r+0xaee>
 800ff06:	3301      	adds	r3, #1
 800ff08:	7013      	strb	r3, [r2, #0]
 800ff0a:	e754      	b.n	800fdb6 <_dtoa_r+0x8fe>
 800ff0c:	9a05      	ldr	r2, [sp, #20]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f102 0501 	add.w	r5, r2, #1
 800ff14:	dd06      	ble.n	800ff24 <_dtoa_r+0xa6c>
 800ff16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff1a:	d0e9      	beq.n	800fef0 <_dtoa_r+0xa38>
 800ff1c:	f108 0801 	add.w	r8, r8, #1
 800ff20:	9b05      	ldr	r3, [sp, #20]
 800ff22:	e7c2      	b.n	800feaa <_dtoa_r+0x9f2>
 800ff24:	9a02      	ldr	r2, [sp, #8]
 800ff26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ff2a:	eba5 030b 	sub.w	r3, r5, fp
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d021      	beq.n	800ff76 <_dtoa_r+0xabe>
 800ff32:	2300      	movs	r3, #0
 800ff34:	220a      	movs	r2, #10
 800ff36:	9904      	ldr	r1, [sp, #16]
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f000 fabf 	bl	80104bc <__multadd>
 800ff3e:	45b1      	cmp	r9, r6
 800ff40:	9004      	str	r0, [sp, #16]
 800ff42:	f04f 0300 	mov.w	r3, #0
 800ff46:	f04f 020a 	mov.w	r2, #10
 800ff4a:	4649      	mov	r1, r9
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	d105      	bne.n	800ff5c <_dtoa_r+0xaa4>
 800ff50:	f000 fab4 	bl	80104bc <__multadd>
 800ff54:	4681      	mov	r9, r0
 800ff56:	4606      	mov	r6, r0
 800ff58:	9505      	str	r5, [sp, #20]
 800ff5a:	e776      	b.n	800fe4a <_dtoa_r+0x992>
 800ff5c:	f000 faae 	bl	80104bc <__multadd>
 800ff60:	4631      	mov	r1, r6
 800ff62:	4681      	mov	r9, r0
 800ff64:	2300      	movs	r3, #0
 800ff66:	220a      	movs	r2, #10
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f000 faa7 	bl	80104bc <__multadd>
 800ff6e:	4606      	mov	r6, r0
 800ff70:	e7f2      	b.n	800ff58 <_dtoa_r+0xaa0>
 800ff72:	f04f 0900 	mov.w	r9, #0
 800ff76:	2201      	movs	r2, #1
 800ff78:	9904      	ldr	r1, [sp, #16]
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f000 fc14 	bl	80107a8 <__lshift>
 800ff80:	4639      	mov	r1, r7
 800ff82:	9004      	str	r0, [sp, #16]
 800ff84:	f000 fc64 	bl	8010850 <__mcmp>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	dcb6      	bgt.n	800fefa <_dtoa_r+0xa42>
 800ff8c:	d102      	bne.n	800ff94 <_dtoa_r+0xadc>
 800ff8e:	f018 0f01 	tst.w	r8, #1
 800ff92:	d1b2      	bne.n	800fefa <_dtoa_r+0xa42>
 800ff94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff98:	2b30      	cmp	r3, #48	; 0x30
 800ff9a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ff9e:	f47f af0a 	bne.w	800fdb6 <_dtoa_r+0x8fe>
 800ffa2:	4615      	mov	r5, r2
 800ffa4:	e7f6      	b.n	800ff94 <_dtoa_r+0xadc>
 800ffa6:	4593      	cmp	fp, r2
 800ffa8:	d105      	bne.n	800ffb6 <_dtoa_r+0xafe>
 800ffaa:	2331      	movs	r3, #49	; 0x31
 800ffac:	f10a 0a01 	add.w	sl, sl, #1
 800ffb0:	f88b 3000 	strb.w	r3, [fp]
 800ffb4:	e6ff      	b.n	800fdb6 <_dtoa_r+0x8fe>
 800ffb6:	4615      	mov	r5, r2
 800ffb8:	e79f      	b.n	800fefa <_dtoa_r+0xa42>
 800ffba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010020 <_dtoa_r+0xb68>
 800ffbe:	e007      	b.n	800ffd0 <_dtoa_r+0xb18>
 800ffc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010024 <_dtoa_r+0xb6c>
 800ffc6:	b11b      	cbz	r3, 800ffd0 <_dtoa_r+0xb18>
 800ffc8:	f10b 0308 	add.w	r3, fp, #8
 800ffcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	4658      	mov	r0, fp
 800ffd2:	b017      	add	sp, #92	; 0x5c
 800ffd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd8:	9b06      	ldr	r3, [sp, #24]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	f77f ae35 	ble.w	800fc4a <_dtoa_r+0x792>
 800ffe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffe2:	9307      	str	r3, [sp, #28]
 800ffe4:	e649      	b.n	800fc7a <_dtoa_r+0x7c2>
 800ffe6:	9b02      	ldr	r3, [sp, #8]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	dc03      	bgt.n	800fff4 <_dtoa_r+0xb3c>
 800ffec:	9b06      	ldr	r3, [sp, #24]
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	f73f aecc 	bgt.w	800fd8c <_dtoa_r+0x8d4>
 800fff4:	465d      	mov	r5, fp
 800fff6:	4639      	mov	r1, r7
 800fff8:	9804      	ldr	r0, [sp, #16]
 800fffa:	f7ff f9cf 	bl	800f39c <quorem>
 800fffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010002:	f805 8b01 	strb.w	r8, [r5], #1
 8010006:	9a02      	ldr	r2, [sp, #8]
 8010008:	eba5 030b 	sub.w	r3, r5, fp
 801000c:	429a      	cmp	r2, r3
 801000e:	ddb0      	ble.n	800ff72 <_dtoa_r+0xaba>
 8010010:	2300      	movs	r3, #0
 8010012:	220a      	movs	r2, #10
 8010014:	9904      	ldr	r1, [sp, #16]
 8010016:	4620      	mov	r0, r4
 8010018:	f000 fa50 	bl	80104bc <__multadd>
 801001c:	9004      	str	r0, [sp, #16]
 801001e:	e7ea      	b.n	800fff6 <_dtoa_r+0xb3e>
 8010020:	08013a8c 	.word	0x08013a8c
 8010024:	080137fe 	.word	0x080137fe

08010028 <__sflush_r>:
 8010028:	898a      	ldrh	r2, [r1, #12]
 801002a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002e:	4605      	mov	r5, r0
 8010030:	0710      	lsls	r0, r2, #28
 8010032:	460c      	mov	r4, r1
 8010034:	d458      	bmi.n	80100e8 <__sflush_r+0xc0>
 8010036:	684b      	ldr	r3, [r1, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	dc05      	bgt.n	8010048 <__sflush_r+0x20>
 801003c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801003e:	2b00      	cmp	r3, #0
 8010040:	dc02      	bgt.n	8010048 <__sflush_r+0x20>
 8010042:	2000      	movs	r0, #0
 8010044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801004a:	2e00      	cmp	r6, #0
 801004c:	d0f9      	beq.n	8010042 <__sflush_r+0x1a>
 801004e:	2300      	movs	r3, #0
 8010050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010054:	682f      	ldr	r7, [r5, #0]
 8010056:	6a21      	ldr	r1, [r4, #32]
 8010058:	602b      	str	r3, [r5, #0]
 801005a:	d032      	beq.n	80100c2 <__sflush_r+0x9a>
 801005c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801005e:	89a3      	ldrh	r3, [r4, #12]
 8010060:	075a      	lsls	r2, r3, #29
 8010062:	d505      	bpl.n	8010070 <__sflush_r+0x48>
 8010064:	6863      	ldr	r3, [r4, #4]
 8010066:	1ac0      	subs	r0, r0, r3
 8010068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801006a:	b10b      	cbz	r3, 8010070 <__sflush_r+0x48>
 801006c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801006e:	1ac0      	subs	r0, r0, r3
 8010070:	2300      	movs	r3, #0
 8010072:	4602      	mov	r2, r0
 8010074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010076:	6a21      	ldr	r1, [r4, #32]
 8010078:	4628      	mov	r0, r5
 801007a:	47b0      	blx	r6
 801007c:	1c43      	adds	r3, r0, #1
 801007e:	89a3      	ldrh	r3, [r4, #12]
 8010080:	d106      	bne.n	8010090 <__sflush_r+0x68>
 8010082:	6829      	ldr	r1, [r5, #0]
 8010084:	291d      	cmp	r1, #29
 8010086:	d848      	bhi.n	801011a <__sflush_r+0xf2>
 8010088:	4a29      	ldr	r2, [pc, #164]	; (8010130 <__sflush_r+0x108>)
 801008a:	40ca      	lsrs	r2, r1
 801008c:	07d6      	lsls	r6, r2, #31
 801008e:	d544      	bpl.n	801011a <__sflush_r+0xf2>
 8010090:	2200      	movs	r2, #0
 8010092:	6062      	str	r2, [r4, #4]
 8010094:	04d9      	lsls	r1, r3, #19
 8010096:	6922      	ldr	r2, [r4, #16]
 8010098:	6022      	str	r2, [r4, #0]
 801009a:	d504      	bpl.n	80100a6 <__sflush_r+0x7e>
 801009c:	1c42      	adds	r2, r0, #1
 801009e:	d101      	bne.n	80100a4 <__sflush_r+0x7c>
 80100a0:	682b      	ldr	r3, [r5, #0]
 80100a2:	b903      	cbnz	r3, 80100a6 <__sflush_r+0x7e>
 80100a4:	6560      	str	r0, [r4, #84]	; 0x54
 80100a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100a8:	602f      	str	r7, [r5, #0]
 80100aa:	2900      	cmp	r1, #0
 80100ac:	d0c9      	beq.n	8010042 <__sflush_r+0x1a>
 80100ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100b2:	4299      	cmp	r1, r3
 80100b4:	d002      	beq.n	80100bc <__sflush_r+0x94>
 80100b6:	4628      	mov	r0, r5
 80100b8:	f000 fc9e 	bl	80109f8 <_free_r>
 80100bc:	2000      	movs	r0, #0
 80100be:	6360      	str	r0, [r4, #52]	; 0x34
 80100c0:	e7c0      	b.n	8010044 <__sflush_r+0x1c>
 80100c2:	2301      	movs	r3, #1
 80100c4:	4628      	mov	r0, r5
 80100c6:	47b0      	blx	r6
 80100c8:	1c41      	adds	r1, r0, #1
 80100ca:	d1c8      	bne.n	801005e <__sflush_r+0x36>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d0c5      	beq.n	801005e <__sflush_r+0x36>
 80100d2:	2b1d      	cmp	r3, #29
 80100d4:	d001      	beq.n	80100da <__sflush_r+0xb2>
 80100d6:	2b16      	cmp	r3, #22
 80100d8:	d101      	bne.n	80100de <__sflush_r+0xb6>
 80100da:	602f      	str	r7, [r5, #0]
 80100dc:	e7b1      	b.n	8010042 <__sflush_r+0x1a>
 80100de:	89a3      	ldrh	r3, [r4, #12]
 80100e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100e4:	81a3      	strh	r3, [r4, #12]
 80100e6:	e7ad      	b.n	8010044 <__sflush_r+0x1c>
 80100e8:	690f      	ldr	r7, [r1, #16]
 80100ea:	2f00      	cmp	r7, #0
 80100ec:	d0a9      	beq.n	8010042 <__sflush_r+0x1a>
 80100ee:	0793      	lsls	r3, r2, #30
 80100f0:	680e      	ldr	r6, [r1, #0]
 80100f2:	bf08      	it	eq
 80100f4:	694b      	ldreq	r3, [r1, #20]
 80100f6:	600f      	str	r7, [r1, #0]
 80100f8:	bf18      	it	ne
 80100fa:	2300      	movne	r3, #0
 80100fc:	eba6 0807 	sub.w	r8, r6, r7
 8010100:	608b      	str	r3, [r1, #8]
 8010102:	f1b8 0f00 	cmp.w	r8, #0
 8010106:	dd9c      	ble.n	8010042 <__sflush_r+0x1a>
 8010108:	4643      	mov	r3, r8
 801010a:	463a      	mov	r2, r7
 801010c:	6a21      	ldr	r1, [r4, #32]
 801010e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010110:	4628      	mov	r0, r5
 8010112:	47b0      	blx	r6
 8010114:	2800      	cmp	r0, #0
 8010116:	dc06      	bgt.n	8010126 <__sflush_r+0xfe>
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801011e:	81a3      	strh	r3, [r4, #12]
 8010120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010124:	e78e      	b.n	8010044 <__sflush_r+0x1c>
 8010126:	4407      	add	r7, r0
 8010128:	eba8 0800 	sub.w	r8, r8, r0
 801012c:	e7e9      	b.n	8010102 <__sflush_r+0xda>
 801012e:	bf00      	nop
 8010130:	20400001 	.word	0x20400001

08010134 <_fflush_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	690b      	ldr	r3, [r1, #16]
 8010138:	4605      	mov	r5, r0
 801013a:	460c      	mov	r4, r1
 801013c:	b1db      	cbz	r3, 8010176 <_fflush_r+0x42>
 801013e:	b118      	cbz	r0, 8010148 <_fflush_r+0x14>
 8010140:	6983      	ldr	r3, [r0, #24]
 8010142:	b90b      	cbnz	r3, 8010148 <_fflush_r+0x14>
 8010144:	f000 f860 	bl	8010208 <__sinit>
 8010148:	4b0c      	ldr	r3, [pc, #48]	; (801017c <_fflush_r+0x48>)
 801014a:	429c      	cmp	r4, r3
 801014c:	d109      	bne.n	8010162 <_fflush_r+0x2e>
 801014e:	686c      	ldr	r4, [r5, #4]
 8010150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010154:	b17b      	cbz	r3, 8010176 <_fflush_r+0x42>
 8010156:	4621      	mov	r1, r4
 8010158:	4628      	mov	r0, r5
 801015a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801015e:	f7ff bf63 	b.w	8010028 <__sflush_r>
 8010162:	4b07      	ldr	r3, [pc, #28]	; (8010180 <_fflush_r+0x4c>)
 8010164:	429c      	cmp	r4, r3
 8010166:	d101      	bne.n	801016c <_fflush_r+0x38>
 8010168:	68ac      	ldr	r4, [r5, #8]
 801016a:	e7f1      	b.n	8010150 <_fflush_r+0x1c>
 801016c:	4b05      	ldr	r3, [pc, #20]	; (8010184 <_fflush_r+0x50>)
 801016e:	429c      	cmp	r4, r3
 8010170:	bf08      	it	eq
 8010172:	68ec      	ldreq	r4, [r5, #12]
 8010174:	e7ec      	b.n	8010150 <_fflush_r+0x1c>
 8010176:	2000      	movs	r0, #0
 8010178:	bd38      	pop	{r3, r4, r5, pc}
 801017a:	bf00      	nop
 801017c:	0801382c 	.word	0x0801382c
 8010180:	0801384c 	.word	0x0801384c
 8010184:	0801380c 	.word	0x0801380c

08010188 <std>:
 8010188:	2300      	movs	r3, #0
 801018a:	b510      	push	{r4, lr}
 801018c:	4604      	mov	r4, r0
 801018e:	e9c0 3300 	strd	r3, r3, [r0]
 8010192:	6083      	str	r3, [r0, #8]
 8010194:	8181      	strh	r1, [r0, #12]
 8010196:	6643      	str	r3, [r0, #100]	; 0x64
 8010198:	81c2      	strh	r2, [r0, #14]
 801019a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801019e:	6183      	str	r3, [r0, #24]
 80101a0:	4619      	mov	r1, r3
 80101a2:	2208      	movs	r2, #8
 80101a4:	305c      	adds	r0, #92	; 0x5c
 80101a6:	f7fe fb2d 	bl	800e804 <memset>
 80101aa:	4b05      	ldr	r3, [pc, #20]	; (80101c0 <std+0x38>)
 80101ac:	6263      	str	r3, [r4, #36]	; 0x24
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <std+0x3c>)
 80101b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <std+0x40>)
 80101b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101b6:	4b05      	ldr	r3, [pc, #20]	; (80101cc <std+0x44>)
 80101b8:	6224      	str	r4, [r4, #32]
 80101ba:	6323      	str	r3, [r4, #48]	; 0x30
 80101bc:	bd10      	pop	{r4, pc}
 80101be:	bf00      	nop
 80101c0:	08010e0d 	.word	0x08010e0d
 80101c4:	08010e2f 	.word	0x08010e2f
 80101c8:	08010e67 	.word	0x08010e67
 80101cc:	08010e8b 	.word	0x08010e8b

080101d0 <_cleanup_r>:
 80101d0:	4901      	ldr	r1, [pc, #4]	; (80101d8 <_cleanup_r+0x8>)
 80101d2:	f000 b885 	b.w	80102e0 <_fwalk_reent>
 80101d6:	bf00      	nop
 80101d8:	08010135 	.word	0x08010135

080101dc <__sfmoreglue>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	1e4a      	subs	r2, r1, #1
 80101e0:	2568      	movs	r5, #104	; 0x68
 80101e2:	4355      	muls	r5, r2
 80101e4:	460e      	mov	r6, r1
 80101e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101ea:	f000 fc53 	bl	8010a94 <_malloc_r>
 80101ee:	4604      	mov	r4, r0
 80101f0:	b140      	cbz	r0, 8010204 <__sfmoreglue+0x28>
 80101f2:	2100      	movs	r1, #0
 80101f4:	e9c0 1600 	strd	r1, r6, [r0]
 80101f8:	300c      	adds	r0, #12
 80101fa:	60a0      	str	r0, [r4, #8]
 80101fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010200:	f7fe fb00 	bl	800e804 <memset>
 8010204:	4620      	mov	r0, r4
 8010206:	bd70      	pop	{r4, r5, r6, pc}

08010208 <__sinit>:
 8010208:	6983      	ldr	r3, [r0, #24]
 801020a:	b510      	push	{r4, lr}
 801020c:	4604      	mov	r4, r0
 801020e:	bb33      	cbnz	r3, 801025e <__sinit+0x56>
 8010210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010214:	6503      	str	r3, [r0, #80]	; 0x50
 8010216:	4b12      	ldr	r3, [pc, #72]	; (8010260 <__sinit+0x58>)
 8010218:	4a12      	ldr	r2, [pc, #72]	; (8010264 <__sinit+0x5c>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6282      	str	r2, [r0, #40]	; 0x28
 801021e:	4298      	cmp	r0, r3
 8010220:	bf04      	itt	eq
 8010222:	2301      	moveq	r3, #1
 8010224:	6183      	streq	r3, [r0, #24]
 8010226:	f000 f81f 	bl	8010268 <__sfp>
 801022a:	6060      	str	r0, [r4, #4]
 801022c:	4620      	mov	r0, r4
 801022e:	f000 f81b 	bl	8010268 <__sfp>
 8010232:	60a0      	str	r0, [r4, #8]
 8010234:	4620      	mov	r0, r4
 8010236:	f000 f817 	bl	8010268 <__sfp>
 801023a:	2200      	movs	r2, #0
 801023c:	60e0      	str	r0, [r4, #12]
 801023e:	2104      	movs	r1, #4
 8010240:	6860      	ldr	r0, [r4, #4]
 8010242:	f7ff ffa1 	bl	8010188 <std>
 8010246:	2201      	movs	r2, #1
 8010248:	2109      	movs	r1, #9
 801024a:	68a0      	ldr	r0, [r4, #8]
 801024c:	f7ff ff9c 	bl	8010188 <std>
 8010250:	2202      	movs	r2, #2
 8010252:	2112      	movs	r1, #18
 8010254:	68e0      	ldr	r0, [r4, #12]
 8010256:	f7ff ff97 	bl	8010188 <std>
 801025a:	2301      	movs	r3, #1
 801025c:	61a3      	str	r3, [r4, #24]
 801025e:	bd10      	pop	{r4, pc}
 8010260:	080137c8 	.word	0x080137c8
 8010264:	080101d1 	.word	0x080101d1

08010268 <__sfp>:
 8010268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026a:	4b1b      	ldr	r3, [pc, #108]	; (80102d8 <__sfp+0x70>)
 801026c:	681e      	ldr	r6, [r3, #0]
 801026e:	69b3      	ldr	r3, [r6, #24]
 8010270:	4607      	mov	r7, r0
 8010272:	b913      	cbnz	r3, 801027a <__sfp+0x12>
 8010274:	4630      	mov	r0, r6
 8010276:	f7ff ffc7 	bl	8010208 <__sinit>
 801027a:	3648      	adds	r6, #72	; 0x48
 801027c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010280:	3b01      	subs	r3, #1
 8010282:	d503      	bpl.n	801028c <__sfp+0x24>
 8010284:	6833      	ldr	r3, [r6, #0]
 8010286:	b133      	cbz	r3, 8010296 <__sfp+0x2e>
 8010288:	6836      	ldr	r6, [r6, #0]
 801028a:	e7f7      	b.n	801027c <__sfp+0x14>
 801028c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010290:	b16d      	cbz	r5, 80102ae <__sfp+0x46>
 8010292:	3468      	adds	r4, #104	; 0x68
 8010294:	e7f4      	b.n	8010280 <__sfp+0x18>
 8010296:	2104      	movs	r1, #4
 8010298:	4638      	mov	r0, r7
 801029a:	f7ff ff9f 	bl	80101dc <__sfmoreglue>
 801029e:	6030      	str	r0, [r6, #0]
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d1f1      	bne.n	8010288 <__sfp+0x20>
 80102a4:	230c      	movs	r3, #12
 80102a6:	603b      	str	r3, [r7, #0]
 80102a8:	4604      	mov	r4, r0
 80102aa:	4620      	mov	r0, r4
 80102ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ae:	4b0b      	ldr	r3, [pc, #44]	; (80102dc <__sfp+0x74>)
 80102b0:	6665      	str	r5, [r4, #100]	; 0x64
 80102b2:	e9c4 5500 	strd	r5, r5, [r4]
 80102b6:	60a5      	str	r5, [r4, #8]
 80102b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80102c0:	2208      	movs	r2, #8
 80102c2:	4629      	mov	r1, r5
 80102c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102c8:	f7fe fa9c 	bl	800e804 <memset>
 80102cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80102d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80102d4:	e7e9      	b.n	80102aa <__sfp+0x42>
 80102d6:	bf00      	nop
 80102d8:	080137c8 	.word	0x080137c8
 80102dc:	ffff0001 	.word	0xffff0001

080102e0 <_fwalk_reent>:
 80102e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e4:	4680      	mov	r8, r0
 80102e6:	4689      	mov	r9, r1
 80102e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80102ec:	2600      	movs	r6, #0
 80102ee:	b914      	cbnz	r4, 80102f6 <_fwalk_reent+0x16>
 80102f0:	4630      	mov	r0, r6
 80102f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80102fa:	3f01      	subs	r7, #1
 80102fc:	d501      	bpl.n	8010302 <_fwalk_reent+0x22>
 80102fe:	6824      	ldr	r4, [r4, #0]
 8010300:	e7f5      	b.n	80102ee <_fwalk_reent+0xe>
 8010302:	89ab      	ldrh	r3, [r5, #12]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d907      	bls.n	8010318 <_fwalk_reent+0x38>
 8010308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801030c:	3301      	adds	r3, #1
 801030e:	d003      	beq.n	8010318 <_fwalk_reent+0x38>
 8010310:	4629      	mov	r1, r5
 8010312:	4640      	mov	r0, r8
 8010314:	47c8      	blx	r9
 8010316:	4306      	orrs	r6, r0
 8010318:	3568      	adds	r5, #104	; 0x68
 801031a:	e7ee      	b.n	80102fa <_fwalk_reent+0x1a>

0801031c <_localeconv_r>:
 801031c:	4b04      	ldr	r3, [pc, #16]	; (8010330 <_localeconv_r+0x14>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	6a18      	ldr	r0, [r3, #32]
 8010322:	4b04      	ldr	r3, [pc, #16]	; (8010334 <_localeconv_r+0x18>)
 8010324:	2800      	cmp	r0, #0
 8010326:	bf08      	it	eq
 8010328:	4618      	moveq	r0, r3
 801032a:	30f0      	adds	r0, #240	; 0xf0
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	200018e4 	.word	0x200018e4
 8010334:	20001948 	.word	0x20001948

08010338 <__swhatbuf_r>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	460e      	mov	r6, r1
 801033c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010340:	2900      	cmp	r1, #0
 8010342:	b096      	sub	sp, #88	; 0x58
 8010344:	4614      	mov	r4, r2
 8010346:	461d      	mov	r5, r3
 8010348:	da07      	bge.n	801035a <__swhatbuf_r+0x22>
 801034a:	2300      	movs	r3, #0
 801034c:	602b      	str	r3, [r5, #0]
 801034e:	89b3      	ldrh	r3, [r6, #12]
 8010350:	061a      	lsls	r2, r3, #24
 8010352:	d410      	bmi.n	8010376 <__swhatbuf_r+0x3e>
 8010354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010358:	e00e      	b.n	8010378 <__swhatbuf_r+0x40>
 801035a:	466a      	mov	r2, sp
 801035c:	f000 fdbc 	bl	8010ed8 <_fstat_r>
 8010360:	2800      	cmp	r0, #0
 8010362:	dbf2      	blt.n	801034a <__swhatbuf_r+0x12>
 8010364:	9a01      	ldr	r2, [sp, #4]
 8010366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801036a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801036e:	425a      	negs	r2, r3
 8010370:	415a      	adcs	r2, r3
 8010372:	602a      	str	r2, [r5, #0]
 8010374:	e7ee      	b.n	8010354 <__swhatbuf_r+0x1c>
 8010376:	2340      	movs	r3, #64	; 0x40
 8010378:	2000      	movs	r0, #0
 801037a:	6023      	str	r3, [r4, #0]
 801037c:	b016      	add	sp, #88	; 0x58
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <__smakebuf_r>:
 8010380:	898b      	ldrh	r3, [r1, #12]
 8010382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010384:	079d      	lsls	r5, r3, #30
 8010386:	4606      	mov	r6, r0
 8010388:	460c      	mov	r4, r1
 801038a:	d507      	bpl.n	801039c <__smakebuf_r+0x1c>
 801038c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	6123      	str	r3, [r4, #16]
 8010394:	2301      	movs	r3, #1
 8010396:	6163      	str	r3, [r4, #20]
 8010398:	b002      	add	sp, #8
 801039a:	bd70      	pop	{r4, r5, r6, pc}
 801039c:	ab01      	add	r3, sp, #4
 801039e:	466a      	mov	r2, sp
 80103a0:	f7ff ffca 	bl	8010338 <__swhatbuf_r>
 80103a4:	9900      	ldr	r1, [sp, #0]
 80103a6:	4605      	mov	r5, r0
 80103a8:	4630      	mov	r0, r6
 80103aa:	f000 fb73 	bl	8010a94 <_malloc_r>
 80103ae:	b948      	cbnz	r0, 80103c4 <__smakebuf_r+0x44>
 80103b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b4:	059a      	lsls	r2, r3, #22
 80103b6:	d4ef      	bmi.n	8010398 <__smakebuf_r+0x18>
 80103b8:	f023 0303 	bic.w	r3, r3, #3
 80103bc:	f043 0302 	orr.w	r3, r3, #2
 80103c0:	81a3      	strh	r3, [r4, #12]
 80103c2:	e7e3      	b.n	801038c <__smakebuf_r+0xc>
 80103c4:	4b0d      	ldr	r3, [pc, #52]	; (80103fc <__smakebuf_r+0x7c>)
 80103c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	6020      	str	r0, [r4, #0]
 80103cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103d0:	81a3      	strh	r3, [r4, #12]
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	6163      	str	r3, [r4, #20]
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	6120      	str	r0, [r4, #16]
 80103da:	b15b      	cbz	r3, 80103f4 <__smakebuf_r+0x74>
 80103dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103e0:	4630      	mov	r0, r6
 80103e2:	f000 fd8b 	bl	8010efc <_isatty_r>
 80103e6:	b128      	cbz	r0, 80103f4 <__smakebuf_r+0x74>
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	f043 0301 	orr.w	r3, r3, #1
 80103f2:	81a3      	strh	r3, [r4, #12]
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	431d      	orrs	r5, r3
 80103f8:	81a5      	strh	r5, [r4, #12]
 80103fa:	e7cd      	b.n	8010398 <__smakebuf_r+0x18>
 80103fc:	080101d1 	.word	0x080101d1

08010400 <malloc>:
 8010400:	4b02      	ldr	r3, [pc, #8]	; (801040c <malloc+0xc>)
 8010402:	4601      	mov	r1, r0
 8010404:	6818      	ldr	r0, [r3, #0]
 8010406:	f000 bb45 	b.w	8010a94 <_malloc_r>
 801040a:	bf00      	nop
 801040c:	200018e4 	.word	0x200018e4

08010410 <memcpy>:
 8010410:	b510      	push	{r4, lr}
 8010412:	1e43      	subs	r3, r0, #1
 8010414:	440a      	add	r2, r1
 8010416:	4291      	cmp	r1, r2
 8010418:	d100      	bne.n	801041c <memcpy+0xc>
 801041a:	bd10      	pop	{r4, pc}
 801041c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010424:	e7f7      	b.n	8010416 <memcpy+0x6>

08010426 <_Balloc>:
 8010426:	b570      	push	{r4, r5, r6, lr}
 8010428:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801042a:	4604      	mov	r4, r0
 801042c:	460e      	mov	r6, r1
 801042e:	b93d      	cbnz	r5, 8010440 <_Balloc+0x1a>
 8010430:	2010      	movs	r0, #16
 8010432:	f7ff ffe5 	bl	8010400 <malloc>
 8010436:	6260      	str	r0, [r4, #36]	; 0x24
 8010438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801043c:	6005      	str	r5, [r0, #0]
 801043e:	60c5      	str	r5, [r0, #12]
 8010440:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010442:	68eb      	ldr	r3, [r5, #12]
 8010444:	b183      	cbz	r3, 8010468 <_Balloc+0x42>
 8010446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801044e:	b9b8      	cbnz	r0, 8010480 <_Balloc+0x5a>
 8010450:	2101      	movs	r1, #1
 8010452:	fa01 f506 	lsl.w	r5, r1, r6
 8010456:	1d6a      	adds	r2, r5, #5
 8010458:	0092      	lsls	r2, r2, #2
 801045a:	4620      	mov	r0, r4
 801045c:	f000 fabe 	bl	80109dc <_calloc_r>
 8010460:	b160      	cbz	r0, 801047c <_Balloc+0x56>
 8010462:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010466:	e00e      	b.n	8010486 <_Balloc+0x60>
 8010468:	2221      	movs	r2, #33	; 0x21
 801046a:	2104      	movs	r1, #4
 801046c:	4620      	mov	r0, r4
 801046e:	f000 fab5 	bl	80109dc <_calloc_r>
 8010472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010474:	60e8      	str	r0, [r5, #12]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d1e4      	bne.n	8010446 <_Balloc+0x20>
 801047c:	2000      	movs	r0, #0
 801047e:	bd70      	pop	{r4, r5, r6, pc}
 8010480:	6802      	ldr	r2, [r0, #0]
 8010482:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010486:	2300      	movs	r3, #0
 8010488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801048c:	e7f7      	b.n	801047e <_Balloc+0x58>

0801048e <_Bfree>:
 801048e:	b570      	push	{r4, r5, r6, lr}
 8010490:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010492:	4606      	mov	r6, r0
 8010494:	460d      	mov	r5, r1
 8010496:	b93c      	cbnz	r4, 80104a8 <_Bfree+0x1a>
 8010498:	2010      	movs	r0, #16
 801049a:	f7ff ffb1 	bl	8010400 <malloc>
 801049e:	6270      	str	r0, [r6, #36]	; 0x24
 80104a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104a4:	6004      	str	r4, [r0, #0]
 80104a6:	60c4      	str	r4, [r0, #12]
 80104a8:	b13d      	cbz	r5, 80104ba <_Bfree+0x2c>
 80104aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80104ac:	686a      	ldr	r2, [r5, #4]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104b4:	6029      	str	r1, [r5, #0]
 80104b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80104ba:	bd70      	pop	{r4, r5, r6, pc}

080104bc <__multadd>:
 80104bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	690d      	ldr	r5, [r1, #16]
 80104c2:	461f      	mov	r7, r3
 80104c4:	4606      	mov	r6, r0
 80104c6:	460c      	mov	r4, r1
 80104c8:	f101 0c14 	add.w	ip, r1, #20
 80104cc:	2300      	movs	r3, #0
 80104ce:	f8dc 0000 	ldr.w	r0, [ip]
 80104d2:	b281      	uxth	r1, r0
 80104d4:	fb02 7101 	mla	r1, r2, r1, r7
 80104d8:	0c0f      	lsrs	r7, r1, #16
 80104da:	0c00      	lsrs	r0, r0, #16
 80104dc:	fb02 7000 	mla	r0, r2, r0, r7
 80104e0:	b289      	uxth	r1, r1
 80104e2:	3301      	adds	r3, #1
 80104e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80104e8:	429d      	cmp	r5, r3
 80104ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80104ee:	f84c 1b04 	str.w	r1, [ip], #4
 80104f2:	dcec      	bgt.n	80104ce <__multadd+0x12>
 80104f4:	b1d7      	cbz	r7, 801052c <__multadd+0x70>
 80104f6:	68a3      	ldr	r3, [r4, #8]
 80104f8:	42ab      	cmp	r3, r5
 80104fa:	dc12      	bgt.n	8010522 <__multadd+0x66>
 80104fc:	6861      	ldr	r1, [r4, #4]
 80104fe:	4630      	mov	r0, r6
 8010500:	3101      	adds	r1, #1
 8010502:	f7ff ff90 	bl	8010426 <_Balloc>
 8010506:	6922      	ldr	r2, [r4, #16]
 8010508:	3202      	adds	r2, #2
 801050a:	f104 010c 	add.w	r1, r4, #12
 801050e:	4680      	mov	r8, r0
 8010510:	0092      	lsls	r2, r2, #2
 8010512:	300c      	adds	r0, #12
 8010514:	f7ff ff7c 	bl	8010410 <memcpy>
 8010518:	4621      	mov	r1, r4
 801051a:	4630      	mov	r0, r6
 801051c:	f7ff ffb7 	bl	801048e <_Bfree>
 8010520:	4644      	mov	r4, r8
 8010522:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010526:	3501      	adds	r5, #1
 8010528:	615f      	str	r7, [r3, #20]
 801052a:	6125      	str	r5, [r4, #16]
 801052c:	4620      	mov	r0, r4
 801052e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010532 <__hi0bits>:
 8010532:	0c02      	lsrs	r2, r0, #16
 8010534:	0412      	lsls	r2, r2, #16
 8010536:	4603      	mov	r3, r0
 8010538:	b9b2      	cbnz	r2, 8010568 <__hi0bits+0x36>
 801053a:	0403      	lsls	r3, r0, #16
 801053c:	2010      	movs	r0, #16
 801053e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010542:	bf04      	itt	eq
 8010544:	021b      	lsleq	r3, r3, #8
 8010546:	3008      	addeq	r0, #8
 8010548:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801054c:	bf04      	itt	eq
 801054e:	011b      	lsleq	r3, r3, #4
 8010550:	3004      	addeq	r0, #4
 8010552:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010556:	bf04      	itt	eq
 8010558:	009b      	lsleq	r3, r3, #2
 801055a:	3002      	addeq	r0, #2
 801055c:	2b00      	cmp	r3, #0
 801055e:	db06      	blt.n	801056e <__hi0bits+0x3c>
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	d503      	bpl.n	801056c <__hi0bits+0x3a>
 8010564:	3001      	adds	r0, #1
 8010566:	4770      	bx	lr
 8010568:	2000      	movs	r0, #0
 801056a:	e7e8      	b.n	801053e <__hi0bits+0xc>
 801056c:	2020      	movs	r0, #32
 801056e:	4770      	bx	lr

08010570 <__lo0bits>:
 8010570:	6803      	ldr	r3, [r0, #0]
 8010572:	f013 0207 	ands.w	r2, r3, #7
 8010576:	4601      	mov	r1, r0
 8010578:	d00b      	beq.n	8010592 <__lo0bits+0x22>
 801057a:	07da      	lsls	r2, r3, #31
 801057c:	d423      	bmi.n	80105c6 <__lo0bits+0x56>
 801057e:	0798      	lsls	r0, r3, #30
 8010580:	bf49      	itett	mi
 8010582:	085b      	lsrmi	r3, r3, #1
 8010584:	089b      	lsrpl	r3, r3, #2
 8010586:	2001      	movmi	r0, #1
 8010588:	600b      	strmi	r3, [r1, #0]
 801058a:	bf5c      	itt	pl
 801058c:	600b      	strpl	r3, [r1, #0]
 801058e:	2002      	movpl	r0, #2
 8010590:	4770      	bx	lr
 8010592:	b298      	uxth	r0, r3
 8010594:	b9a8      	cbnz	r0, 80105c2 <__lo0bits+0x52>
 8010596:	0c1b      	lsrs	r3, r3, #16
 8010598:	2010      	movs	r0, #16
 801059a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801059e:	bf04      	itt	eq
 80105a0:	0a1b      	lsreq	r3, r3, #8
 80105a2:	3008      	addeq	r0, #8
 80105a4:	071a      	lsls	r2, r3, #28
 80105a6:	bf04      	itt	eq
 80105a8:	091b      	lsreq	r3, r3, #4
 80105aa:	3004      	addeq	r0, #4
 80105ac:	079a      	lsls	r2, r3, #30
 80105ae:	bf04      	itt	eq
 80105b0:	089b      	lsreq	r3, r3, #2
 80105b2:	3002      	addeq	r0, #2
 80105b4:	07da      	lsls	r2, r3, #31
 80105b6:	d402      	bmi.n	80105be <__lo0bits+0x4e>
 80105b8:	085b      	lsrs	r3, r3, #1
 80105ba:	d006      	beq.n	80105ca <__lo0bits+0x5a>
 80105bc:	3001      	adds	r0, #1
 80105be:	600b      	str	r3, [r1, #0]
 80105c0:	4770      	bx	lr
 80105c2:	4610      	mov	r0, r2
 80105c4:	e7e9      	b.n	801059a <__lo0bits+0x2a>
 80105c6:	2000      	movs	r0, #0
 80105c8:	4770      	bx	lr
 80105ca:	2020      	movs	r0, #32
 80105cc:	4770      	bx	lr

080105ce <__i2b>:
 80105ce:	b510      	push	{r4, lr}
 80105d0:	460c      	mov	r4, r1
 80105d2:	2101      	movs	r1, #1
 80105d4:	f7ff ff27 	bl	8010426 <_Balloc>
 80105d8:	2201      	movs	r2, #1
 80105da:	6144      	str	r4, [r0, #20]
 80105dc:	6102      	str	r2, [r0, #16]
 80105de:	bd10      	pop	{r4, pc}

080105e0 <__multiply>:
 80105e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	4614      	mov	r4, r2
 80105e6:	690a      	ldr	r2, [r1, #16]
 80105e8:	6923      	ldr	r3, [r4, #16]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	bfb8      	it	lt
 80105ee:	460b      	movlt	r3, r1
 80105f0:	4688      	mov	r8, r1
 80105f2:	bfbc      	itt	lt
 80105f4:	46a0      	movlt	r8, r4
 80105f6:	461c      	movlt	r4, r3
 80105f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80105fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010600:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010604:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010608:	eb07 0609 	add.w	r6, r7, r9
 801060c:	42b3      	cmp	r3, r6
 801060e:	bfb8      	it	lt
 8010610:	3101      	addlt	r1, #1
 8010612:	f7ff ff08 	bl	8010426 <_Balloc>
 8010616:	f100 0514 	add.w	r5, r0, #20
 801061a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801061e:	462b      	mov	r3, r5
 8010620:	2200      	movs	r2, #0
 8010622:	4573      	cmp	r3, lr
 8010624:	d316      	bcc.n	8010654 <__multiply+0x74>
 8010626:	f104 0214 	add.w	r2, r4, #20
 801062a:	f108 0114 	add.w	r1, r8, #20
 801062e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010632:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	9b00      	ldr	r3, [sp, #0]
 801063a:	9201      	str	r2, [sp, #4]
 801063c:	4293      	cmp	r3, r2
 801063e:	d80c      	bhi.n	801065a <__multiply+0x7a>
 8010640:	2e00      	cmp	r6, #0
 8010642:	dd03      	ble.n	801064c <__multiply+0x6c>
 8010644:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010648:	2b00      	cmp	r3, #0
 801064a:	d05d      	beq.n	8010708 <__multiply+0x128>
 801064c:	6106      	str	r6, [r0, #16]
 801064e:	b003      	add	sp, #12
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	f843 2b04 	str.w	r2, [r3], #4
 8010658:	e7e3      	b.n	8010622 <__multiply+0x42>
 801065a:	f8b2 b000 	ldrh.w	fp, [r2]
 801065e:	f1bb 0f00 	cmp.w	fp, #0
 8010662:	d023      	beq.n	80106ac <__multiply+0xcc>
 8010664:	4689      	mov	r9, r1
 8010666:	46ac      	mov	ip, r5
 8010668:	f04f 0800 	mov.w	r8, #0
 801066c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010670:	f8dc a000 	ldr.w	sl, [ip]
 8010674:	b2a3      	uxth	r3, r4
 8010676:	fa1f fa8a 	uxth.w	sl, sl
 801067a:	fb0b a303 	mla	r3, fp, r3, sl
 801067e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010682:	f8dc 4000 	ldr.w	r4, [ip]
 8010686:	4443      	add	r3, r8
 8010688:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801068c:	fb0b 840a 	mla	r4, fp, sl, r8
 8010690:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010694:	46e2      	mov	sl, ip
 8010696:	b29b      	uxth	r3, r3
 8010698:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801069c:	454f      	cmp	r7, r9
 801069e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80106a2:	f84a 3b04 	str.w	r3, [sl], #4
 80106a6:	d82b      	bhi.n	8010700 <__multiply+0x120>
 80106a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80106b2:	3204      	adds	r2, #4
 80106b4:	f1ba 0f00 	cmp.w	sl, #0
 80106b8:	d020      	beq.n	80106fc <__multiply+0x11c>
 80106ba:	682b      	ldr	r3, [r5, #0]
 80106bc:	4689      	mov	r9, r1
 80106be:	46a8      	mov	r8, r5
 80106c0:	f04f 0b00 	mov.w	fp, #0
 80106c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80106c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80106cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80106d0:	445c      	add	r4, fp
 80106d2:	46c4      	mov	ip, r8
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80106da:	f84c 3b04 	str.w	r3, [ip], #4
 80106de:	f859 3b04 	ldr.w	r3, [r9], #4
 80106e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80106e6:	0c1b      	lsrs	r3, r3, #16
 80106e8:	fb0a b303 	mla	r3, sl, r3, fp
 80106ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80106f0:	454f      	cmp	r7, r9
 80106f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80106f6:	d805      	bhi.n	8010704 <__multiply+0x124>
 80106f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80106fc:	3504      	adds	r5, #4
 80106fe:	e79b      	b.n	8010638 <__multiply+0x58>
 8010700:	46d4      	mov	ip, sl
 8010702:	e7b3      	b.n	801066c <__multiply+0x8c>
 8010704:	46e0      	mov	r8, ip
 8010706:	e7dd      	b.n	80106c4 <__multiply+0xe4>
 8010708:	3e01      	subs	r6, #1
 801070a:	e799      	b.n	8010640 <__multiply+0x60>

0801070c <__pow5mult>:
 801070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010710:	4615      	mov	r5, r2
 8010712:	f012 0203 	ands.w	r2, r2, #3
 8010716:	4606      	mov	r6, r0
 8010718:	460f      	mov	r7, r1
 801071a:	d007      	beq.n	801072c <__pow5mult+0x20>
 801071c:	3a01      	subs	r2, #1
 801071e:	4c21      	ldr	r4, [pc, #132]	; (80107a4 <__pow5mult+0x98>)
 8010720:	2300      	movs	r3, #0
 8010722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010726:	f7ff fec9 	bl	80104bc <__multadd>
 801072a:	4607      	mov	r7, r0
 801072c:	10ad      	asrs	r5, r5, #2
 801072e:	d035      	beq.n	801079c <__pow5mult+0x90>
 8010730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010732:	b93c      	cbnz	r4, 8010744 <__pow5mult+0x38>
 8010734:	2010      	movs	r0, #16
 8010736:	f7ff fe63 	bl	8010400 <malloc>
 801073a:	6270      	str	r0, [r6, #36]	; 0x24
 801073c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010740:	6004      	str	r4, [r0, #0]
 8010742:	60c4      	str	r4, [r0, #12]
 8010744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801074c:	b94c      	cbnz	r4, 8010762 <__pow5mult+0x56>
 801074e:	f240 2171 	movw	r1, #625	; 0x271
 8010752:	4630      	mov	r0, r6
 8010754:	f7ff ff3b 	bl	80105ce <__i2b>
 8010758:	2300      	movs	r3, #0
 801075a:	f8c8 0008 	str.w	r0, [r8, #8]
 801075e:	4604      	mov	r4, r0
 8010760:	6003      	str	r3, [r0, #0]
 8010762:	f04f 0800 	mov.w	r8, #0
 8010766:	07eb      	lsls	r3, r5, #31
 8010768:	d50a      	bpl.n	8010780 <__pow5mult+0x74>
 801076a:	4639      	mov	r1, r7
 801076c:	4622      	mov	r2, r4
 801076e:	4630      	mov	r0, r6
 8010770:	f7ff ff36 	bl	80105e0 <__multiply>
 8010774:	4639      	mov	r1, r7
 8010776:	4681      	mov	r9, r0
 8010778:	4630      	mov	r0, r6
 801077a:	f7ff fe88 	bl	801048e <_Bfree>
 801077e:	464f      	mov	r7, r9
 8010780:	106d      	asrs	r5, r5, #1
 8010782:	d00b      	beq.n	801079c <__pow5mult+0x90>
 8010784:	6820      	ldr	r0, [r4, #0]
 8010786:	b938      	cbnz	r0, 8010798 <__pow5mult+0x8c>
 8010788:	4622      	mov	r2, r4
 801078a:	4621      	mov	r1, r4
 801078c:	4630      	mov	r0, r6
 801078e:	f7ff ff27 	bl	80105e0 <__multiply>
 8010792:	6020      	str	r0, [r4, #0]
 8010794:	f8c0 8000 	str.w	r8, [r0]
 8010798:	4604      	mov	r4, r0
 801079a:	e7e4      	b.n	8010766 <__pow5mult+0x5a>
 801079c:	4638      	mov	r0, r7
 801079e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a2:	bf00      	nop
 80107a4:	08013960 	.word	0x08013960

080107a8 <__lshift>:
 80107a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ac:	460c      	mov	r4, r1
 80107ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107b2:	6923      	ldr	r3, [r4, #16]
 80107b4:	6849      	ldr	r1, [r1, #4]
 80107b6:	eb0a 0903 	add.w	r9, sl, r3
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	4607      	mov	r7, r0
 80107be:	4616      	mov	r6, r2
 80107c0:	f109 0501 	add.w	r5, r9, #1
 80107c4:	42ab      	cmp	r3, r5
 80107c6:	db32      	blt.n	801082e <__lshift+0x86>
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7ff fe2c 	bl	8010426 <_Balloc>
 80107ce:	2300      	movs	r3, #0
 80107d0:	4680      	mov	r8, r0
 80107d2:	f100 0114 	add.w	r1, r0, #20
 80107d6:	461a      	mov	r2, r3
 80107d8:	4553      	cmp	r3, sl
 80107da:	db2b      	blt.n	8010834 <__lshift+0x8c>
 80107dc:	6920      	ldr	r0, [r4, #16]
 80107de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107e2:	f104 0314 	add.w	r3, r4, #20
 80107e6:	f016 021f 	ands.w	r2, r6, #31
 80107ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107f2:	d025      	beq.n	8010840 <__lshift+0x98>
 80107f4:	f1c2 0e20 	rsb	lr, r2, #32
 80107f8:	2000      	movs	r0, #0
 80107fa:	681e      	ldr	r6, [r3, #0]
 80107fc:	468a      	mov	sl, r1
 80107fe:	4096      	lsls	r6, r2
 8010800:	4330      	orrs	r0, r6
 8010802:	f84a 0b04 	str.w	r0, [sl], #4
 8010806:	f853 0b04 	ldr.w	r0, [r3], #4
 801080a:	459c      	cmp	ip, r3
 801080c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010810:	d814      	bhi.n	801083c <__lshift+0x94>
 8010812:	6048      	str	r0, [r1, #4]
 8010814:	b108      	cbz	r0, 801081a <__lshift+0x72>
 8010816:	f109 0502 	add.w	r5, r9, #2
 801081a:	3d01      	subs	r5, #1
 801081c:	4638      	mov	r0, r7
 801081e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010822:	4621      	mov	r1, r4
 8010824:	f7ff fe33 	bl	801048e <_Bfree>
 8010828:	4640      	mov	r0, r8
 801082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082e:	3101      	adds	r1, #1
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	e7c7      	b.n	80107c4 <__lshift+0x1c>
 8010834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010838:	3301      	adds	r3, #1
 801083a:	e7cd      	b.n	80107d8 <__lshift+0x30>
 801083c:	4651      	mov	r1, sl
 801083e:	e7dc      	b.n	80107fa <__lshift+0x52>
 8010840:	3904      	subs	r1, #4
 8010842:	f853 2b04 	ldr.w	r2, [r3], #4
 8010846:	f841 2f04 	str.w	r2, [r1, #4]!
 801084a:	459c      	cmp	ip, r3
 801084c:	d8f9      	bhi.n	8010842 <__lshift+0x9a>
 801084e:	e7e4      	b.n	801081a <__lshift+0x72>

08010850 <__mcmp>:
 8010850:	6903      	ldr	r3, [r0, #16]
 8010852:	690a      	ldr	r2, [r1, #16]
 8010854:	1a9b      	subs	r3, r3, r2
 8010856:	b530      	push	{r4, r5, lr}
 8010858:	d10c      	bne.n	8010874 <__mcmp+0x24>
 801085a:	0092      	lsls	r2, r2, #2
 801085c:	3014      	adds	r0, #20
 801085e:	3114      	adds	r1, #20
 8010860:	1884      	adds	r4, r0, r2
 8010862:	4411      	add	r1, r2
 8010864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801086c:	4295      	cmp	r5, r2
 801086e:	d003      	beq.n	8010878 <__mcmp+0x28>
 8010870:	d305      	bcc.n	801087e <__mcmp+0x2e>
 8010872:	2301      	movs	r3, #1
 8010874:	4618      	mov	r0, r3
 8010876:	bd30      	pop	{r4, r5, pc}
 8010878:	42a0      	cmp	r0, r4
 801087a:	d3f3      	bcc.n	8010864 <__mcmp+0x14>
 801087c:	e7fa      	b.n	8010874 <__mcmp+0x24>
 801087e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010882:	e7f7      	b.n	8010874 <__mcmp+0x24>

08010884 <__mdiff>:
 8010884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010888:	460d      	mov	r5, r1
 801088a:	4607      	mov	r7, r0
 801088c:	4611      	mov	r1, r2
 801088e:	4628      	mov	r0, r5
 8010890:	4614      	mov	r4, r2
 8010892:	f7ff ffdd 	bl	8010850 <__mcmp>
 8010896:	1e06      	subs	r6, r0, #0
 8010898:	d108      	bne.n	80108ac <__mdiff+0x28>
 801089a:	4631      	mov	r1, r6
 801089c:	4638      	mov	r0, r7
 801089e:	f7ff fdc2 	bl	8010426 <_Balloc>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80108a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ac:	bfa4      	itt	ge
 80108ae:	4623      	movge	r3, r4
 80108b0:	462c      	movge	r4, r5
 80108b2:	4638      	mov	r0, r7
 80108b4:	6861      	ldr	r1, [r4, #4]
 80108b6:	bfa6      	itte	ge
 80108b8:	461d      	movge	r5, r3
 80108ba:	2600      	movge	r6, #0
 80108bc:	2601      	movlt	r6, #1
 80108be:	f7ff fdb2 	bl	8010426 <_Balloc>
 80108c2:	692b      	ldr	r3, [r5, #16]
 80108c4:	60c6      	str	r6, [r0, #12]
 80108c6:	6926      	ldr	r6, [r4, #16]
 80108c8:	f105 0914 	add.w	r9, r5, #20
 80108cc:	f104 0214 	add.w	r2, r4, #20
 80108d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80108d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80108d8:	f100 0514 	add.w	r5, r0, #20
 80108dc:	f04f 0e00 	mov.w	lr, #0
 80108e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80108e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80108e8:	fa1e f18a 	uxtah	r1, lr, sl
 80108ec:	b2a3      	uxth	r3, r4
 80108ee:	1ac9      	subs	r1, r1, r3
 80108f0:	0c23      	lsrs	r3, r4, #16
 80108f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80108f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80108fa:	b289      	uxth	r1, r1
 80108fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010900:	45c8      	cmp	r8, r9
 8010902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010906:	4694      	mov	ip, r2
 8010908:	f845 3b04 	str.w	r3, [r5], #4
 801090c:	d8e8      	bhi.n	80108e0 <__mdiff+0x5c>
 801090e:	45bc      	cmp	ip, r7
 8010910:	d304      	bcc.n	801091c <__mdiff+0x98>
 8010912:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010916:	b183      	cbz	r3, 801093a <__mdiff+0xb6>
 8010918:	6106      	str	r6, [r0, #16]
 801091a:	e7c5      	b.n	80108a8 <__mdiff+0x24>
 801091c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010920:	fa1e f381 	uxtah	r3, lr, r1
 8010924:	141a      	asrs	r2, r3, #16
 8010926:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801092a:	b29b      	uxth	r3, r3
 801092c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010930:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010934:	f845 3b04 	str.w	r3, [r5], #4
 8010938:	e7e9      	b.n	801090e <__mdiff+0x8a>
 801093a:	3e01      	subs	r6, #1
 801093c:	e7e9      	b.n	8010912 <__mdiff+0x8e>

0801093e <__d2b>:
 801093e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010942:	460e      	mov	r6, r1
 8010944:	2101      	movs	r1, #1
 8010946:	ec59 8b10 	vmov	r8, r9, d0
 801094a:	4615      	mov	r5, r2
 801094c:	f7ff fd6b 	bl	8010426 <_Balloc>
 8010950:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010954:	4607      	mov	r7, r0
 8010956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801095a:	bb34      	cbnz	r4, 80109aa <__d2b+0x6c>
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	f1b8 0300 	subs.w	r3, r8, #0
 8010962:	d027      	beq.n	80109b4 <__d2b+0x76>
 8010964:	a802      	add	r0, sp, #8
 8010966:	f840 3d08 	str.w	r3, [r0, #-8]!
 801096a:	f7ff fe01 	bl	8010570 <__lo0bits>
 801096e:	9900      	ldr	r1, [sp, #0]
 8010970:	b1f0      	cbz	r0, 80109b0 <__d2b+0x72>
 8010972:	9a01      	ldr	r2, [sp, #4]
 8010974:	f1c0 0320 	rsb	r3, r0, #32
 8010978:	fa02 f303 	lsl.w	r3, r2, r3
 801097c:	430b      	orrs	r3, r1
 801097e:	40c2      	lsrs	r2, r0
 8010980:	617b      	str	r3, [r7, #20]
 8010982:	9201      	str	r2, [sp, #4]
 8010984:	9b01      	ldr	r3, [sp, #4]
 8010986:	61bb      	str	r3, [r7, #24]
 8010988:	2b00      	cmp	r3, #0
 801098a:	bf14      	ite	ne
 801098c:	2102      	movne	r1, #2
 801098e:	2101      	moveq	r1, #1
 8010990:	6139      	str	r1, [r7, #16]
 8010992:	b1c4      	cbz	r4, 80109c6 <__d2b+0x88>
 8010994:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010998:	4404      	add	r4, r0
 801099a:	6034      	str	r4, [r6, #0]
 801099c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109a0:	6028      	str	r0, [r5, #0]
 80109a2:	4638      	mov	r0, r7
 80109a4:	b003      	add	sp, #12
 80109a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109ae:	e7d5      	b.n	801095c <__d2b+0x1e>
 80109b0:	6179      	str	r1, [r7, #20]
 80109b2:	e7e7      	b.n	8010984 <__d2b+0x46>
 80109b4:	a801      	add	r0, sp, #4
 80109b6:	f7ff fddb 	bl	8010570 <__lo0bits>
 80109ba:	9b01      	ldr	r3, [sp, #4]
 80109bc:	617b      	str	r3, [r7, #20]
 80109be:	2101      	movs	r1, #1
 80109c0:	6139      	str	r1, [r7, #16]
 80109c2:	3020      	adds	r0, #32
 80109c4:	e7e5      	b.n	8010992 <__d2b+0x54>
 80109c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80109ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109ce:	6030      	str	r0, [r6, #0]
 80109d0:	6918      	ldr	r0, [r3, #16]
 80109d2:	f7ff fdae 	bl	8010532 <__hi0bits>
 80109d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80109da:	e7e1      	b.n	80109a0 <__d2b+0x62>

080109dc <_calloc_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	fb02 f401 	mul.w	r4, r2, r1
 80109e2:	4621      	mov	r1, r4
 80109e4:	f000 f856 	bl	8010a94 <_malloc_r>
 80109e8:	4605      	mov	r5, r0
 80109ea:	b118      	cbz	r0, 80109f4 <_calloc_r+0x18>
 80109ec:	4622      	mov	r2, r4
 80109ee:	2100      	movs	r1, #0
 80109f0:	f7fd ff08 	bl	800e804 <memset>
 80109f4:	4628      	mov	r0, r5
 80109f6:	bd38      	pop	{r3, r4, r5, pc}

080109f8 <_free_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4605      	mov	r5, r0
 80109fc:	2900      	cmp	r1, #0
 80109fe:	d045      	beq.n	8010a8c <_free_r+0x94>
 8010a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a04:	1f0c      	subs	r4, r1, #4
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	bfb8      	it	lt
 8010a0a:	18e4      	addlt	r4, r4, r3
 8010a0c:	f000 fac3 	bl	8010f96 <__malloc_lock>
 8010a10:	4a1f      	ldr	r2, [pc, #124]	; (8010a90 <_free_r+0x98>)
 8010a12:	6813      	ldr	r3, [r2, #0]
 8010a14:	4610      	mov	r0, r2
 8010a16:	b933      	cbnz	r3, 8010a26 <_free_r+0x2e>
 8010a18:	6063      	str	r3, [r4, #4]
 8010a1a:	6014      	str	r4, [r2, #0]
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a22:	f000 bab9 	b.w	8010f98 <__malloc_unlock>
 8010a26:	42a3      	cmp	r3, r4
 8010a28:	d90c      	bls.n	8010a44 <_free_r+0x4c>
 8010a2a:	6821      	ldr	r1, [r4, #0]
 8010a2c:	1862      	adds	r2, r4, r1
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	bf04      	itt	eq
 8010a32:	681a      	ldreq	r2, [r3, #0]
 8010a34:	685b      	ldreq	r3, [r3, #4]
 8010a36:	6063      	str	r3, [r4, #4]
 8010a38:	bf04      	itt	eq
 8010a3a:	1852      	addeq	r2, r2, r1
 8010a3c:	6022      	streq	r2, [r4, #0]
 8010a3e:	6004      	str	r4, [r0, #0]
 8010a40:	e7ec      	b.n	8010a1c <_free_r+0x24>
 8010a42:	4613      	mov	r3, r2
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	b10a      	cbz	r2, 8010a4c <_free_r+0x54>
 8010a48:	42a2      	cmp	r2, r4
 8010a4a:	d9fa      	bls.n	8010a42 <_free_r+0x4a>
 8010a4c:	6819      	ldr	r1, [r3, #0]
 8010a4e:	1858      	adds	r0, r3, r1
 8010a50:	42a0      	cmp	r0, r4
 8010a52:	d10b      	bne.n	8010a6c <_free_r+0x74>
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	4401      	add	r1, r0
 8010a58:	1858      	adds	r0, r3, r1
 8010a5a:	4282      	cmp	r2, r0
 8010a5c:	6019      	str	r1, [r3, #0]
 8010a5e:	d1dd      	bne.n	8010a1c <_free_r+0x24>
 8010a60:	6810      	ldr	r0, [r2, #0]
 8010a62:	6852      	ldr	r2, [r2, #4]
 8010a64:	605a      	str	r2, [r3, #4]
 8010a66:	4401      	add	r1, r0
 8010a68:	6019      	str	r1, [r3, #0]
 8010a6a:	e7d7      	b.n	8010a1c <_free_r+0x24>
 8010a6c:	d902      	bls.n	8010a74 <_free_r+0x7c>
 8010a6e:	230c      	movs	r3, #12
 8010a70:	602b      	str	r3, [r5, #0]
 8010a72:	e7d3      	b.n	8010a1c <_free_r+0x24>
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	1821      	adds	r1, r4, r0
 8010a78:	428a      	cmp	r2, r1
 8010a7a:	bf04      	itt	eq
 8010a7c:	6811      	ldreq	r1, [r2, #0]
 8010a7e:	6852      	ldreq	r2, [r2, #4]
 8010a80:	6062      	str	r2, [r4, #4]
 8010a82:	bf04      	itt	eq
 8010a84:	1809      	addeq	r1, r1, r0
 8010a86:	6021      	streq	r1, [r4, #0]
 8010a88:	605c      	str	r4, [r3, #4]
 8010a8a:	e7c7      	b.n	8010a1c <_free_r+0x24>
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	bf00      	nop
 8010a90:	20001b18 	.word	0x20001b18

08010a94 <_malloc_r>:
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	1ccd      	adds	r5, r1, #3
 8010a98:	f025 0503 	bic.w	r5, r5, #3
 8010a9c:	3508      	adds	r5, #8
 8010a9e:	2d0c      	cmp	r5, #12
 8010aa0:	bf38      	it	cc
 8010aa2:	250c      	movcc	r5, #12
 8010aa4:	2d00      	cmp	r5, #0
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	db01      	blt.n	8010aae <_malloc_r+0x1a>
 8010aaa:	42a9      	cmp	r1, r5
 8010aac:	d903      	bls.n	8010ab6 <_malloc_r+0x22>
 8010aae:	230c      	movs	r3, #12
 8010ab0:	6033      	str	r3, [r6, #0]
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	bd70      	pop	{r4, r5, r6, pc}
 8010ab6:	f000 fa6e 	bl	8010f96 <__malloc_lock>
 8010aba:	4a21      	ldr	r2, [pc, #132]	; (8010b40 <_malloc_r+0xac>)
 8010abc:	6814      	ldr	r4, [r2, #0]
 8010abe:	4621      	mov	r1, r4
 8010ac0:	b991      	cbnz	r1, 8010ae8 <_malloc_r+0x54>
 8010ac2:	4c20      	ldr	r4, [pc, #128]	; (8010b44 <_malloc_r+0xb0>)
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	b91b      	cbnz	r3, 8010ad0 <_malloc_r+0x3c>
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f000 f98f 	bl	8010dec <_sbrk_r>
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f000 f98a 	bl	8010dec <_sbrk_r>
 8010ad8:	1c43      	adds	r3, r0, #1
 8010ada:	d124      	bne.n	8010b26 <_malloc_r+0x92>
 8010adc:	230c      	movs	r3, #12
 8010ade:	6033      	str	r3, [r6, #0]
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f000 fa59 	bl	8010f98 <__malloc_unlock>
 8010ae6:	e7e4      	b.n	8010ab2 <_malloc_r+0x1e>
 8010ae8:	680b      	ldr	r3, [r1, #0]
 8010aea:	1b5b      	subs	r3, r3, r5
 8010aec:	d418      	bmi.n	8010b20 <_malloc_r+0x8c>
 8010aee:	2b0b      	cmp	r3, #11
 8010af0:	d90f      	bls.n	8010b12 <_malloc_r+0x7e>
 8010af2:	600b      	str	r3, [r1, #0]
 8010af4:	50cd      	str	r5, [r1, r3]
 8010af6:	18cc      	adds	r4, r1, r3
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fa4d 	bl	8010f98 <__malloc_unlock>
 8010afe:	f104 000b 	add.w	r0, r4, #11
 8010b02:	1d23      	adds	r3, r4, #4
 8010b04:	f020 0007 	bic.w	r0, r0, #7
 8010b08:	1ac3      	subs	r3, r0, r3
 8010b0a:	d0d3      	beq.n	8010ab4 <_malloc_r+0x20>
 8010b0c:	425a      	negs	r2, r3
 8010b0e:	50e2      	str	r2, [r4, r3]
 8010b10:	e7d0      	b.n	8010ab4 <_malloc_r+0x20>
 8010b12:	428c      	cmp	r4, r1
 8010b14:	684b      	ldr	r3, [r1, #4]
 8010b16:	bf16      	itet	ne
 8010b18:	6063      	strne	r3, [r4, #4]
 8010b1a:	6013      	streq	r3, [r2, #0]
 8010b1c:	460c      	movne	r4, r1
 8010b1e:	e7eb      	b.n	8010af8 <_malloc_r+0x64>
 8010b20:	460c      	mov	r4, r1
 8010b22:	6849      	ldr	r1, [r1, #4]
 8010b24:	e7cc      	b.n	8010ac0 <_malloc_r+0x2c>
 8010b26:	1cc4      	adds	r4, r0, #3
 8010b28:	f024 0403 	bic.w	r4, r4, #3
 8010b2c:	42a0      	cmp	r0, r4
 8010b2e:	d005      	beq.n	8010b3c <_malloc_r+0xa8>
 8010b30:	1a21      	subs	r1, r4, r0
 8010b32:	4630      	mov	r0, r6
 8010b34:	f000 f95a 	bl	8010dec <_sbrk_r>
 8010b38:	3001      	adds	r0, #1
 8010b3a:	d0cf      	beq.n	8010adc <_malloc_r+0x48>
 8010b3c:	6025      	str	r5, [r4, #0]
 8010b3e:	e7db      	b.n	8010af8 <_malloc_r+0x64>
 8010b40:	20001b18 	.word	0x20001b18
 8010b44:	20001b1c 	.word	0x20001b1c

08010b48 <__ssputs_r>:
 8010b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b4c:	688e      	ldr	r6, [r1, #8]
 8010b4e:	429e      	cmp	r6, r3
 8010b50:	4682      	mov	sl, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	4690      	mov	r8, r2
 8010b56:	4699      	mov	r9, r3
 8010b58:	d837      	bhi.n	8010bca <__ssputs_r+0x82>
 8010b5a:	898a      	ldrh	r2, [r1, #12]
 8010b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b60:	d031      	beq.n	8010bc6 <__ssputs_r+0x7e>
 8010b62:	6825      	ldr	r5, [r4, #0]
 8010b64:	6909      	ldr	r1, [r1, #16]
 8010b66:	1a6f      	subs	r7, r5, r1
 8010b68:	6965      	ldr	r5, [r4, #20]
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8010b74:	f109 0301 	add.w	r3, r9, #1
 8010b78:	443b      	add	r3, r7
 8010b7a:	429d      	cmp	r5, r3
 8010b7c:	bf38      	it	cc
 8010b7e:	461d      	movcc	r5, r3
 8010b80:	0553      	lsls	r3, r2, #21
 8010b82:	d530      	bpl.n	8010be6 <__ssputs_r+0x9e>
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ff ff85 	bl	8010a94 <_malloc_r>
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	b950      	cbnz	r0, 8010ba4 <__ssputs_r+0x5c>
 8010b8e:	230c      	movs	r3, #12
 8010b90:	f8ca 3000 	str.w	r3, [sl]
 8010b94:	89a3      	ldrh	r3, [r4, #12]
 8010b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b9a:	81a3      	strh	r3, [r4, #12]
 8010b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba4:	463a      	mov	r2, r7
 8010ba6:	6921      	ldr	r1, [r4, #16]
 8010ba8:	f7ff fc32 	bl	8010410 <memcpy>
 8010bac:	89a3      	ldrh	r3, [r4, #12]
 8010bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb6:	81a3      	strh	r3, [r4, #12]
 8010bb8:	6126      	str	r6, [r4, #16]
 8010bba:	6165      	str	r5, [r4, #20]
 8010bbc:	443e      	add	r6, r7
 8010bbe:	1bed      	subs	r5, r5, r7
 8010bc0:	6026      	str	r6, [r4, #0]
 8010bc2:	60a5      	str	r5, [r4, #8]
 8010bc4:	464e      	mov	r6, r9
 8010bc6:	454e      	cmp	r6, r9
 8010bc8:	d900      	bls.n	8010bcc <__ssputs_r+0x84>
 8010bca:	464e      	mov	r6, r9
 8010bcc:	4632      	mov	r2, r6
 8010bce:	4641      	mov	r1, r8
 8010bd0:	6820      	ldr	r0, [r4, #0]
 8010bd2:	f000 f9c7 	bl	8010f64 <memmove>
 8010bd6:	68a3      	ldr	r3, [r4, #8]
 8010bd8:	1b9b      	subs	r3, r3, r6
 8010bda:	60a3      	str	r3, [r4, #8]
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	441e      	add	r6, r3
 8010be0:	6026      	str	r6, [r4, #0]
 8010be2:	2000      	movs	r0, #0
 8010be4:	e7dc      	b.n	8010ba0 <__ssputs_r+0x58>
 8010be6:	462a      	mov	r2, r5
 8010be8:	f000 f9d7 	bl	8010f9a <_realloc_r>
 8010bec:	4606      	mov	r6, r0
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d1e2      	bne.n	8010bb8 <__ssputs_r+0x70>
 8010bf2:	6921      	ldr	r1, [r4, #16]
 8010bf4:	4650      	mov	r0, sl
 8010bf6:	f7ff feff 	bl	80109f8 <_free_r>
 8010bfa:	e7c8      	b.n	8010b8e <__ssputs_r+0x46>

08010bfc <_svfiprintf_r>:
 8010bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	461d      	mov	r5, r3
 8010c02:	898b      	ldrh	r3, [r1, #12]
 8010c04:	061f      	lsls	r7, r3, #24
 8010c06:	b09d      	sub	sp, #116	; 0x74
 8010c08:	4680      	mov	r8, r0
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	4616      	mov	r6, r2
 8010c0e:	d50f      	bpl.n	8010c30 <_svfiprintf_r+0x34>
 8010c10:	690b      	ldr	r3, [r1, #16]
 8010c12:	b96b      	cbnz	r3, 8010c30 <_svfiprintf_r+0x34>
 8010c14:	2140      	movs	r1, #64	; 0x40
 8010c16:	f7ff ff3d 	bl	8010a94 <_malloc_r>
 8010c1a:	6020      	str	r0, [r4, #0]
 8010c1c:	6120      	str	r0, [r4, #16]
 8010c1e:	b928      	cbnz	r0, 8010c2c <_svfiprintf_r+0x30>
 8010c20:	230c      	movs	r3, #12
 8010c22:	f8c8 3000 	str.w	r3, [r8]
 8010c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c2a:	e0c8      	b.n	8010dbe <_svfiprintf_r+0x1c2>
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	6163      	str	r3, [r4, #20]
 8010c30:	2300      	movs	r3, #0
 8010c32:	9309      	str	r3, [sp, #36]	; 0x24
 8010c34:	2320      	movs	r3, #32
 8010c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c3a:	2330      	movs	r3, #48	; 0x30
 8010c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c40:	9503      	str	r5, [sp, #12]
 8010c42:	f04f 0b01 	mov.w	fp, #1
 8010c46:	4637      	mov	r7, r6
 8010c48:	463d      	mov	r5, r7
 8010c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010c4e:	b10b      	cbz	r3, 8010c54 <_svfiprintf_r+0x58>
 8010c50:	2b25      	cmp	r3, #37	; 0x25
 8010c52:	d13e      	bne.n	8010cd2 <_svfiprintf_r+0xd6>
 8010c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8010c58:	d00b      	beq.n	8010c72 <_svfiprintf_r+0x76>
 8010c5a:	4653      	mov	r3, sl
 8010c5c:	4632      	mov	r2, r6
 8010c5e:	4621      	mov	r1, r4
 8010c60:	4640      	mov	r0, r8
 8010c62:	f7ff ff71 	bl	8010b48 <__ssputs_r>
 8010c66:	3001      	adds	r0, #1
 8010c68:	f000 80a4 	beq.w	8010db4 <_svfiprintf_r+0x1b8>
 8010c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c6e:	4453      	add	r3, sl
 8010c70:	9309      	str	r3, [sp, #36]	; 0x24
 8010c72:	783b      	ldrb	r3, [r7, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f000 809d 	beq.w	8010db4 <_svfiprintf_r+0x1b8>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c84:	9304      	str	r3, [sp, #16]
 8010c86:	9307      	str	r3, [sp, #28]
 8010c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c8e:	462f      	mov	r7, r5
 8010c90:	2205      	movs	r2, #5
 8010c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010c96:	4850      	ldr	r0, [pc, #320]	; (8010dd8 <_svfiprintf_r+0x1dc>)
 8010c98:	f7ef faca 	bl	8000230 <memchr>
 8010c9c:	9b04      	ldr	r3, [sp, #16]
 8010c9e:	b9d0      	cbnz	r0, 8010cd6 <_svfiprintf_r+0xda>
 8010ca0:	06d9      	lsls	r1, r3, #27
 8010ca2:	bf44      	itt	mi
 8010ca4:	2220      	movmi	r2, #32
 8010ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010caa:	071a      	lsls	r2, r3, #28
 8010cac:	bf44      	itt	mi
 8010cae:	222b      	movmi	r2, #43	; 0x2b
 8010cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010cb4:	782a      	ldrb	r2, [r5, #0]
 8010cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8010cb8:	d015      	beq.n	8010ce6 <_svfiprintf_r+0xea>
 8010cba:	9a07      	ldr	r2, [sp, #28]
 8010cbc:	462f      	mov	r7, r5
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	250a      	movs	r5, #10
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cc8:	3b30      	subs	r3, #48	; 0x30
 8010cca:	2b09      	cmp	r3, #9
 8010ccc:	d94d      	bls.n	8010d6a <_svfiprintf_r+0x16e>
 8010cce:	b1b8      	cbz	r0, 8010d00 <_svfiprintf_r+0x104>
 8010cd0:	e00f      	b.n	8010cf2 <_svfiprintf_r+0xf6>
 8010cd2:	462f      	mov	r7, r5
 8010cd4:	e7b8      	b.n	8010c48 <_svfiprintf_r+0x4c>
 8010cd6:	4a40      	ldr	r2, [pc, #256]	; (8010dd8 <_svfiprintf_r+0x1dc>)
 8010cd8:	1a80      	subs	r0, r0, r2
 8010cda:	fa0b f000 	lsl.w	r0, fp, r0
 8010cde:	4318      	orrs	r0, r3
 8010ce0:	9004      	str	r0, [sp, #16]
 8010ce2:	463d      	mov	r5, r7
 8010ce4:	e7d3      	b.n	8010c8e <_svfiprintf_r+0x92>
 8010ce6:	9a03      	ldr	r2, [sp, #12]
 8010ce8:	1d11      	adds	r1, r2, #4
 8010cea:	6812      	ldr	r2, [r2, #0]
 8010cec:	9103      	str	r1, [sp, #12]
 8010cee:	2a00      	cmp	r2, #0
 8010cf0:	db01      	blt.n	8010cf6 <_svfiprintf_r+0xfa>
 8010cf2:	9207      	str	r2, [sp, #28]
 8010cf4:	e004      	b.n	8010d00 <_svfiprintf_r+0x104>
 8010cf6:	4252      	negs	r2, r2
 8010cf8:	f043 0302 	orr.w	r3, r3, #2
 8010cfc:	9207      	str	r2, [sp, #28]
 8010cfe:	9304      	str	r3, [sp, #16]
 8010d00:	783b      	ldrb	r3, [r7, #0]
 8010d02:	2b2e      	cmp	r3, #46	; 0x2e
 8010d04:	d10c      	bne.n	8010d20 <_svfiprintf_r+0x124>
 8010d06:	787b      	ldrb	r3, [r7, #1]
 8010d08:	2b2a      	cmp	r3, #42	; 0x2a
 8010d0a:	d133      	bne.n	8010d74 <_svfiprintf_r+0x178>
 8010d0c:	9b03      	ldr	r3, [sp, #12]
 8010d0e:	1d1a      	adds	r2, r3, #4
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	9203      	str	r2, [sp, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	bfb8      	it	lt
 8010d18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d1c:	3702      	adds	r7, #2
 8010d1e:	9305      	str	r3, [sp, #20]
 8010d20:	4d2e      	ldr	r5, [pc, #184]	; (8010ddc <_svfiprintf_r+0x1e0>)
 8010d22:	7839      	ldrb	r1, [r7, #0]
 8010d24:	2203      	movs	r2, #3
 8010d26:	4628      	mov	r0, r5
 8010d28:	f7ef fa82 	bl	8000230 <memchr>
 8010d2c:	b138      	cbz	r0, 8010d3e <_svfiprintf_r+0x142>
 8010d2e:	2340      	movs	r3, #64	; 0x40
 8010d30:	1b40      	subs	r0, r0, r5
 8010d32:	fa03 f000 	lsl.w	r0, r3, r0
 8010d36:	9b04      	ldr	r3, [sp, #16]
 8010d38:	4303      	orrs	r3, r0
 8010d3a:	3701      	adds	r7, #1
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	7839      	ldrb	r1, [r7, #0]
 8010d40:	4827      	ldr	r0, [pc, #156]	; (8010de0 <_svfiprintf_r+0x1e4>)
 8010d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d46:	2206      	movs	r2, #6
 8010d48:	1c7e      	adds	r6, r7, #1
 8010d4a:	f7ef fa71 	bl	8000230 <memchr>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d038      	beq.n	8010dc4 <_svfiprintf_r+0x1c8>
 8010d52:	4b24      	ldr	r3, [pc, #144]	; (8010de4 <_svfiprintf_r+0x1e8>)
 8010d54:	bb13      	cbnz	r3, 8010d9c <_svfiprintf_r+0x1a0>
 8010d56:	9b03      	ldr	r3, [sp, #12]
 8010d58:	3307      	adds	r3, #7
 8010d5a:	f023 0307 	bic.w	r3, r3, #7
 8010d5e:	3308      	adds	r3, #8
 8010d60:	9303      	str	r3, [sp, #12]
 8010d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d64:	444b      	add	r3, r9
 8010d66:	9309      	str	r3, [sp, #36]	; 0x24
 8010d68:	e76d      	b.n	8010c46 <_svfiprintf_r+0x4a>
 8010d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8010d6e:	2001      	movs	r0, #1
 8010d70:	460f      	mov	r7, r1
 8010d72:	e7a6      	b.n	8010cc2 <_svfiprintf_r+0xc6>
 8010d74:	2300      	movs	r3, #0
 8010d76:	3701      	adds	r7, #1
 8010d78:	9305      	str	r3, [sp, #20]
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	250a      	movs	r5, #10
 8010d7e:	4638      	mov	r0, r7
 8010d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d84:	3a30      	subs	r2, #48	; 0x30
 8010d86:	2a09      	cmp	r2, #9
 8010d88:	d903      	bls.n	8010d92 <_svfiprintf_r+0x196>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d0c8      	beq.n	8010d20 <_svfiprintf_r+0x124>
 8010d8e:	9105      	str	r1, [sp, #20]
 8010d90:	e7c6      	b.n	8010d20 <_svfiprintf_r+0x124>
 8010d92:	fb05 2101 	mla	r1, r5, r1, r2
 8010d96:	2301      	movs	r3, #1
 8010d98:	4607      	mov	r7, r0
 8010d9a:	e7f0      	b.n	8010d7e <_svfiprintf_r+0x182>
 8010d9c:	ab03      	add	r3, sp, #12
 8010d9e:	9300      	str	r3, [sp, #0]
 8010da0:	4622      	mov	r2, r4
 8010da2:	4b11      	ldr	r3, [pc, #68]	; (8010de8 <_svfiprintf_r+0x1ec>)
 8010da4:	a904      	add	r1, sp, #16
 8010da6:	4640      	mov	r0, r8
 8010da8:	f7fd fdc8 	bl	800e93c <_printf_float>
 8010dac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010db0:	4681      	mov	r9, r0
 8010db2:	d1d6      	bne.n	8010d62 <_svfiprintf_r+0x166>
 8010db4:	89a3      	ldrh	r3, [r4, #12]
 8010db6:	065b      	lsls	r3, r3, #25
 8010db8:	f53f af35 	bmi.w	8010c26 <_svfiprintf_r+0x2a>
 8010dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dbe:	b01d      	add	sp, #116	; 0x74
 8010dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc4:	ab03      	add	r3, sp, #12
 8010dc6:	9300      	str	r3, [sp, #0]
 8010dc8:	4622      	mov	r2, r4
 8010dca:	4b07      	ldr	r3, [pc, #28]	; (8010de8 <_svfiprintf_r+0x1ec>)
 8010dcc:	a904      	add	r1, sp, #16
 8010dce:	4640      	mov	r0, r8
 8010dd0:	f7fe f86a 	bl	800eea8 <_printf_i>
 8010dd4:	e7ea      	b.n	8010dac <_svfiprintf_r+0x1b0>
 8010dd6:	bf00      	nop
 8010dd8:	0801396c 	.word	0x0801396c
 8010ddc:	08013972 	.word	0x08013972
 8010de0:	08013976 	.word	0x08013976
 8010de4:	0800e93d 	.word	0x0800e93d
 8010de8:	08010b49 	.word	0x08010b49

08010dec <_sbrk_r>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4c06      	ldr	r4, [pc, #24]	; (8010e08 <_sbrk_r+0x1c>)
 8010df0:	2300      	movs	r3, #0
 8010df2:	4605      	mov	r5, r0
 8010df4:	4608      	mov	r0, r1
 8010df6:	6023      	str	r3, [r4, #0]
 8010df8:	f7f7 f828 	bl	8007e4c <_sbrk>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_sbrk_r+0x1a>
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_sbrk_r+0x1a>
 8010e04:	602b      	str	r3, [r5, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	20002550 	.word	0x20002550

08010e0c <__sread>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	460c      	mov	r4, r1
 8010e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e14:	f000 f8e8 	bl	8010fe8 <_read_r>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	bfab      	itete	ge
 8010e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e20:	181b      	addge	r3, r3, r0
 8010e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e26:	bfac      	ite	ge
 8010e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e2a:	81a3      	strhlt	r3, [r4, #12]
 8010e2c:	bd10      	pop	{r4, pc}

08010e2e <__swrite>:
 8010e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e32:	461f      	mov	r7, r3
 8010e34:	898b      	ldrh	r3, [r1, #12]
 8010e36:	05db      	lsls	r3, r3, #23
 8010e38:	4605      	mov	r5, r0
 8010e3a:	460c      	mov	r4, r1
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	d505      	bpl.n	8010e4c <__swrite+0x1e>
 8010e40:	2302      	movs	r3, #2
 8010e42:	2200      	movs	r2, #0
 8010e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e48:	f000 f868 	bl	8010f1c <_lseek_r>
 8010e4c:	89a3      	ldrh	r3, [r4, #12]
 8010e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e56:	81a3      	strh	r3, [r4, #12]
 8010e58:	4632      	mov	r2, r6
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e62:	f000 b817 	b.w	8010e94 <_write_r>

08010e66 <__sseek>:
 8010e66:	b510      	push	{r4, lr}
 8010e68:	460c      	mov	r4, r1
 8010e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6e:	f000 f855 	bl	8010f1c <_lseek_r>
 8010e72:	1c43      	adds	r3, r0, #1
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	bf15      	itete	ne
 8010e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e82:	81a3      	strheq	r3, [r4, #12]
 8010e84:	bf18      	it	ne
 8010e86:	81a3      	strhne	r3, [r4, #12]
 8010e88:	bd10      	pop	{r4, pc}

08010e8a <__sclose>:
 8010e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e8e:	f000 b813 	b.w	8010eb8 <_close_r>
	...

08010e94 <_write_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4c07      	ldr	r4, [pc, #28]	; (8010eb4 <_write_r+0x20>)
 8010e98:	4605      	mov	r5, r0
 8010e9a:	4608      	mov	r0, r1
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	6022      	str	r2, [r4, #0]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	f7f6 fca7 	bl	80077f6 <_write>
 8010ea8:	1c43      	adds	r3, r0, #1
 8010eaa:	d102      	bne.n	8010eb2 <_write_r+0x1e>
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	b103      	cbz	r3, 8010eb2 <_write_r+0x1e>
 8010eb0:	602b      	str	r3, [r5, #0]
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	20002550 	.word	0x20002550

08010eb8 <_close_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4c06      	ldr	r4, [pc, #24]	; (8010ed4 <_close_r+0x1c>)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	6023      	str	r3, [r4, #0]
 8010ec4:	f7f6 ff8d 	bl	8007de2 <_close>
 8010ec8:	1c43      	adds	r3, r0, #1
 8010eca:	d102      	bne.n	8010ed2 <_close_r+0x1a>
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	b103      	cbz	r3, 8010ed2 <_close_r+0x1a>
 8010ed0:	602b      	str	r3, [r5, #0]
 8010ed2:	bd38      	pop	{r3, r4, r5, pc}
 8010ed4:	20002550 	.word	0x20002550

08010ed8 <_fstat_r>:
 8010ed8:	b538      	push	{r3, r4, r5, lr}
 8010eda:	4c07      	ldr	r4, [pc, #28]	; (8010ef8 <_fstat_r+0x20>)
 8010edc:	2300      	movs	r3, #0
 8010ede:	4605      	mov	r5, r0
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	6023      	str	r3, [r4, #0]
 8010ee6:	f7f6 ff88 	bl	8007dfa <_fstat>
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	d102      	bne.n	8010ef4 <_fstat_r+0x1c>
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	b103      	cbz	r3, 8010ef4 <_fstat_r+0x1c>
 8010ef2:	602b      	str	r3, [r5, #0]
 8010ef4:	bd38      	pop	{r3, r4, r5, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20002550 	.word	0x20002550

08010efc <_isatty_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4c06      	ldr	r4, [pc, #24]	; (8010f18 <_isatty_r+0x1c>)
 8010f00:	2300      	movs	r3, #0
 8010f02:	4605      	mov	r5, r0
 8010f04:	4608      	mov	r0, r1
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	f7f6 ff87 	bl	8007e1a <_isatty>
 8010f0c:	1c43      	adds	r3, r0, #1
 8010f0e:	d102      	bne.n	8010f16 <_isatty_r+0x1a>
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	b103      	cbz	r3, 8010f16 <_isatty_r+0x1a>
 8010f14:	602b      	str	r3, [r5, #0]
 8010f16:	bd38      	pop	{r3, r4, r5, pc}
 8010f18:	20002550 	.word	0x20002550

08010f1c <_lseek_r>:
 8010f1c:	b538      	push	{r3, r4, r5, lr}
 8010f1e:	4c07      	ldr	r4, [pc, #28]	; (8010f3c <_lseek_r+0x20>)
 8010f20:	4605      	mov	r5, r0
 8010f22:	4608      	mov	r0, r1
 8010f24:	4611      	mov	r1, r2
 8010f26:	2200      	movs	r2, #0
 8010f28:	6022      	str	r2, [r4, #0]
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	f7f6 ff80 	bl	8007e30 <_lseek>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_lseek_r+0x1e>
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_lseek_r+0x1e>
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	20002550 	.word	0x20002550

08010f40 <__ascii_mbtowc>:
 8010f40:	b082      	sub	sp, #8
 8010f42:	b901      	cbnz	r1, 8010f46 <__ascii_mbtowc+0x6>
 8010f44:	a901      	add	r1, sp, #4
 8010f46:	b142      	cbz	r2, 8010f5a <__ascii_mbtowc+0x1a>
 8010f48:	b14b      	cbz	r3, 8010f5e <__ascii_mbtowc+0x1e>
 8010f4a:	7813      	ldrb	r3, [r2, #0]
 8010f4c:	600b      	str	r3, [r1, #0]
 8010f4e:	7812      	ldrb	r2, [r2, #0]
 8010f50:	1c10      	adds	r0, r2, #0
 8010f52:	bf18      	it	ne
 8010f54:	2001      	movne	r0, #1
 8010f56:	b002      	add	sp, #8
 8010f58:	4770      	bx	lr
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	e7fb      	b.n	8010f56 <__ascii_mbtowc+0x16>
 8010f5e:	f06f 0001 	mvn.w	r0, #1
 8010f62:	e7f8      	b.n	8010f56 <__ascii_mbtowc+0x16>

08010f64 <memmove>:
 8010f64:	4288      	cmp	r0, r1
 8010f66:	b510      	push	{r4, lr}
 8010f68:	eb01 0302 	add.w	r3, r1, r2
 8010f6c:	d807      	bhi.n	8010f7e <memmove+0x1a>
 8010f6e:	1e42      	subs	r2, r0, #1
 8010f70:	4299      	cmp	r1, r3
 8010f72:	d00a      	beq.n	8010f8a <memmove+0x26>
 8010f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010f7c:	e7f8      	b.n	8010f70 <memmove+0xc>
 8010f7e:	4283      	cmp	r3, r0
 8010f80:	d9f5      	bls.n	8010f6e <memmove+0xa>
 8010f82:	1881      	adds	r1, r0, r2
 8010f84:	1ad2      	subs	r2, r2, r3
 8010f86:	42d3      	cmn	r3, r2
 8010f88:	d100      	bne.n	8010f8c <memmove+0x28>
 8010f8a:	bd10      	pop	{r4, pc}
 8010f8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010f94:	e7f7      	b.n	8010f86 <memmove+0x22>

08010f96 <__malloc_lock>:
 8010f96:	4770      	bx	lr

08010f98 <__malloc_unlock>:
 8010f98:	4770      	bx	lr

08010f9a <_realloc_r>:
 8010f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	4614      	mov	r4, r2
 8010fa0:	460e      	mov	r6, r1
 8010fa2:	b921      	cbnz	r1, 8010fae <_realloc_r+0x14>
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010faa:	f7ff bd73 	b.w	8010a94 <_malloc_r>
 8010fae:	b922      	cbnz	r2, 8010fba <_realloc_r+0x20>
 8010fb0:	f7ff fd22 	bl	80109f8 <_free_r>
 8010fb4:	4625      	mov	r5, r4
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fba:	f000 f834 	bl	8011026 <_malloc_usable_size_r>
 8010fbe:	42a0      	cmp	r0, r4
 8010fc0:	d20f      	bcs.n	8010fe2 <_realloc_r+0x48>
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f7ff fd65 	bl	8010a94 <_malloc_r>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d0f2      	beq.n	8010fb6 <_realloc_r+0x1c>
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	f7ff fa1c 	bl	8010410 <memcpy>
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4638      	mov	r0, r7
 8010fdc:	f7ff fd0c 	bl	80109f8 <_free_r>
 8010fe0:	e7e9      	b.n	8010fb6 <_realloc_r+0x1c>
 8010fe2:	4635      	mov	r5, r6
 8010fe4:	e7e7      	b.n	8010fb6 <_realloc_r+0x1c>
	...

08010fe8 <_read_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	4c07      	ldr	r4, [pc, #28]	; (8011008 <_read_r+0x20>)
 8010fec:	4605      	mov	r5, r0
 8010fee:	4608      	mov	r0, r1
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	6022      	str	r2, [r4, #0]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f7f6 fed6 	bl	8007da8 <_read>
 8010ffc:	1c43      	adds	r3, r0, #1
 8010ffe:	d102      	bne.n	8011006 <_read_r+0x1e>
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	b103      	cbz	r3, 8011006 <_read_r+0x1e>
 8011004:	602b      	str	r3, [r5, #0]
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	20002550 	.word	0x20002550

0801100c <__ascii_wctomb>:
 801100c:	b149      	cbz	r1, 8011022 <__ascii_wctomb+0x16>
 801100e:	2aff      	cmp	r2, #255	; 0xff
 8011010:	bf85      	ittet	hi
 8011012:	238a      	movhi	r3, #138	; 0x8a
 8011014:	6003      	strhi	r3, [r0, #0]
 8011016:	700a      	strbls	r2, [r1, #0]
 8011018:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801101c:	bf98      	it	ls
 801101e:	2001      	movls	r0, #1
 8011020:	4770      	bx	lr
 8011022:	4608      	mov	r0, r1
 8011024:	4770      	bx	lr

08011026 <_malloc_usable_size_r>:
 8011026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801102a:	1f18      	subs	r0, r3, #4
 801102c:	2b00      	cmp	r3, #0
 801102e:	bfbc      	itt	lt
 8011030:	580b      	ldrlt	r3, [r1, r0]
 8011032:	18c0      	addlt	r0, r0, r3
 8011034:	4770      	bx	lr
	...

08011038 <log10>:
 8011038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801103a:	ed2d 8b02 	vpush	{d8}
 801103e:	b08b      	sub	sp, #44	; 0x2c
 8011040:	ec55 4b10 	vmov	r4, r5, d0
 8011044:	f000 f9e8 	bl	8011418 <__ieee754_log10>
 8011048:	4b36      	ldr	r3, [pc, #216]	; (8011124 <log10+0xec>)
 801104a:	eeb0 8a40 	vmov.f32	s16, s0
 801104e:	eef0 8a60 	vmov.f32	s17, s1
 8011052:	f993 6000 	ldrsb.w	r6, [r3]
 8011056:	1c73      	adds	r3, r6, #1
 8011058:	d05c      	beq.n	8011114 <log10+0xdc>
 801105a:	4622      	mov	r2, r4
 801105c:	462b      	mov	r3, r5
 801105e:	4620      	mov	r0, r4
 8011060:	4629      	mov	r1, r5
 8011062:	f7ef fd8b 	bl	8000b7c <__aeabi_dcmpun>
 8011066:	4607      	mov	r7, r0
 8011068:	2800      	cmp	r0, #0
 801106a:	d153      	bne.n	8011114 <log10+0xdc>
 801106c:	2200      	movs	r2, #0
 801106e:	2300      	movs	r3, #0
 8011070:	4620      	mov	r0, r4
 8011072:	4629      	mov	r1, r5
 8011074:	f7ef fd64 	bl	8000b40 <__aeabi_dcmple>
 8011078:	2800      	cmp	r0, #0
 801107a:	d04b      	beq.n	8011114 <log10+0xdc>
 801107c:	4b2a      	ldr	r3, [pc, #168]	; (8011128 <log10+0xf0>)
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	9708      	str	r7, [sp, #32]
 8011082:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011086:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801108a:	b9a6      	cbnz	r6, 80110b6 <log10+0x7e>
 801108c:	4b27      	ldr	r3, [pc, #156]	; (801112c <log10+0xf4>)
 801108e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011092:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011096:	4620      	mov	r0, r4
 8011098:	2200      	movs	r2, #0
 801109a:	2300      	movs	r3, #0
 801109c:	4629      	mov	r1, r5
 801109e:	f7ef fd3b 	bl	8000b18 <__aeabi_dcmpeq>
 80110a2:	bb40      	cbnz	r0, 80110f6 <log10+0xbe>
 80110a4:	2301      	movs	r3, #1
 80110a6:	2e02      	cmp	r6, #2
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	d119      	bne.n	80110e0 <log10+0xa8>
 80110ac:	f7fd fb80 	bl	800e7b0 <__errno>
 80110b0:	2321      	movs	r3, #33	; 0x21
 80110b2:	6003      	str	r3, [r0, #0]
 80110b4:	e019      	b.n	80110ea <log10+0xb2>
 80110b6:	4b1e      	ldr	r3, [pc, #120]	; (8011130 <log10+0xf8>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80110be:	4620      	mov	r0, r4
 80110c0:	2200      	movs	r2, #0
 80110c2:	2300      	movs	r3, #0
 80110c4:	4629      	mov	r1, r5
 80110c6:	f7ef fd27 	bl	8000b18 <__aeabi_dcmpeq>
 80110ca:	2800      	cmp	r0, #0
 80110cc:	d0ea      	beq.n	80110a4 <log10+0x6c>
 80110ce:	2302      	movs	r3, #2
 80110d0:	429e      	cmp	r6, r3
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	d111      	bne.n	80110fa <log10+0xc2>
 80110d6:	f7fd fb6b 	bl	800e7b0 <__errno>
 80110da:	2322      	movs	r3, #34	; 0x22
 80110dc:	6003      	str	r3, [r0, #0]
 80110de:	e011      	b.n	8011104 <log10+0xcc>
 80110e0:	4668      	mov	r0, sp
 80110e2:	f000 fff4 	bl	80120ce <matherr>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	d0e0      	beq.n	80110ac <log10+0x74>
 80110ea:	4812      	ldr	r0, [pc, #72]	; (8011134 <log10+0xfc>)
 80110ec:	f000 fff4 	bl	80120d8 <nan>
 80110f0:	ed8d 0b06 	vstr	d0, [sp, #24]
 80110f4:	e006      	b.n	8011104 <log10+0xcc>
 80110f6:	2302      	movs	r3, #2
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	4668      	mov	r0, sp
 80110fc:	f000 ffe7 	bl	80120ce <matherr>
 8011100:	2800      	cmp	r0, #0
 8011102:	d0e8      	beq.n	80110d6 <log10+0x9e>
 8011104:	9b08      	ldr	r3, [sp, #32]
 8011106:	b11b      	cbz	r3, 8011110 <log10+0xd8>
 8011108:	f7fd fb52 	bl	800e7b0 <__errno>
 801110c:	9b08      	ldr	r3, [sp, #32]
 801110e:	6003      	str	r3, [r0, #0]
 8011110:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011114:	eeb0 0a48 	vmov.f32	s0, s16
 8011118:	eef0 0a68 	vmov.f32	s1, s17
 801111c:	b00b      	add	sp, #44	; 0x2c
 801111e:	ecbd 8b02 	vpop	{d8}
 8011122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011124:	20001ab4 	.word	0x20001ab4
 8011128:	08013a88 	.word	0x08013a88
 801112c:	c7efffff 	.word	0xc7efffff
 8011130:	fff00000 	.word	0xfff00000
 8011134:	08013971 	.word	0x08013971

08011138 <pow>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	ed2d 8b04 	vpush	{d8-d9}
 8011140:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011414 <pow+0x2dc>
 8011144:	b08d      	sub	sp, #52	; 0x34
 8011146:	ec57 6b10 	vmov	r6, r7, d0
 801114a:	ec55 4b11 	vmov	r4, r5, d1
 801114e:	f000 f9ef 	bl	8011530 <__ieee754_pow>
 8011152:	f999 3000 	ldrsb.w	r3, [r9]
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	3301      	adds	r3, #1
 801115a:	eeb0 8a40 	vmov.f32	s16, s0
 801115e:	eef0 8a60 	vmov.f32	s17, s1
 8011162:	46c8      	mov	r8, r9
 8011164:	d05f      	beq.n	8011226 <pow+0xee>
 8011166:	4622      	mov	r2, r4
 8011168:	462b      	mov	r3, r5
 801116a:	4620      	mov	r0, r4
 801116c:	4629      	mov	r1, r5
 801116e:	f7ef fd05 	bl	8000b7c <__aeabi_dcmpun>
 8011172:	4683      	mov	fp, r0
 8011174:	2800      	cmp	r0, #0
 8011176:	d156      	bne.n	8011226 <pow+0xee>
 8011178:	4632      	mov	r2, r6
 801117a:	463b      	mov	r3, r7
 801117c:	4630      	mov	r0, r6
 801117e:	4639      	mov	r1, r7
 8011180:	f7ef fcfc 	bl	8000b7c <__aeabi_dcmpun>
 8011184:	9001      	str	r0, [sp, #4]
 8011186:	b1e8      	cbz	r0, 80111c4 <pow+0x8c>
 8011188:	2200      	movs	r2, #0
 801118a:	2300      	movs	r3, #0
 801118c:	4620      	mov	r0, r4
 801118e:	4629      	mov	r1, r5
 8011190:	f7ef fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 8011194:	2800      	cmp	r0, #0
 8011196:	d046      	beq.n	8011226 <pow+0xee>
 8011198:	2301      	movs	r3, #1
 801119a:	9302      	str	r3, [sp, #8]
 801119c:	4b96      	ldr	r3, [pc, #600]	; (80113f8 <pow+0x2c0>)
 801119e:	9303      	str	r3, [sp, #12]
 80111a0:	4b96      	ldr	r3, [pc, #600]	; (80113fc <pow+0x2c4>)
 80111a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80111a6:	2200      	movs	r2, #0
 80111a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80111ac:	9b00      	ldr	r3, [sp, #0]
 80111ae:	2b02      	cmp	r3, #2
 80111b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80111b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80111b8:	d033      	beq.n	8011222 <pow+0xea>
 80111ba:	a802      	add	r0, sp, #8
 80111bc:	f000 ff87 	bl	80120ce <matherr>
 80111c0:	bb48      	cbnz	r0, 8011216 <pow+0xde>
 80111c2:	e05d      	b.n	8011280 <pow+0x148>
 80111c4:	f04f 0a00 	mov.w	sl, #0
 80111c8:	f04f 0b00 	mov.w	fp, #0
 80111cc:	4652      	mov	r2, sl
 80111ce:	465b      	mov	r3, fp
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef fca0 	bl	8000b18 <__aeabi_dcmpeq>
 80111d8:	ec4b ab19 	vmov	d9, sl, fp
 80111dc:	2800      	cmp	r0, #0
 80111de:	d054      	beq.n	801128a <pow+0x152>
 80111e0:	4652      	mov	r2, sl
 80111e2:	465b      	mov	r3, fp
 80111e4:	4620      	mov	r0, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7ef fc96 	bl	8000b18 <__aeabi_dcmpeq>
 80111ec:	4680      	mov	r8, r0
 80111ee:	b318      	cbz	r0, 8011238 <pow+0x100>
 80111f0:	2301      	movs	r3, #1
 80111f2:	9302      	str	r3, [sp, #8]
 80111f4:	4b80      	ldr	r3, [pc, #512]	; (80113f8 <pow+0x2c0>)
 80111f6:	9303      	str	r3, [sp, #12]
 80111f8:	9b01      	ldr	r3, [sp, #4]
 80111fa:	930a      	str	r3, [sp, #40]	; 0x28
 80111fc:	9b00      	ldr	r3, [sp, #0]
 80111fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011202:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011206:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d0d5      	beq.n	80111ba <pow+0x82>
 801120e:	4b7b      	ldr	r3, [pc, #492]	; (80113fc <pow+0x2c4>)
 8011210:	2200      	movs	r2, #0
 8011212:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011218:	b11b      	cbz	r3, 8011222 <pow+0xea>
 801121a:	f7fd fac9 	bl	800e7b0 <__errno>
 801121e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011220:	6003      	str	r3, [r0, #0]
 8011222:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011226:	eeb0 0a48 	vmov.f32	s0, s16
 801122a:	eef0 0a68 	vmov.f32	s1, s17
 801122e:	b00d      	add	sp, #52	; 0x34
 8011230:	ecbd 8b04 	vpop	{d8-d9}
 8011234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011238:	ec45 4b10 	vmov	d0, r4, r5
 801123c:	f000 ff3f 	bl	80120be <finite>
 8011240:	2800      	cmp	r0, #0
 8011242:	d0f0      	beq.n	8011226 <pow+0xee>
 8011244:	4652      	mov	r2, sl
 8011246:	465b      	mov	r3, fp
 8011248:	4620      	mov	r0, r4
 801124a:	4629      	mov	r1, r5
 801124c:	f7ef fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8011250:	2800      	cmp	r0, #0
 8011252:	d0e8      	beq.n	8011226 <pow+0xee>
 8011254:	2301      	movs	r3, #1
 8011256:	9302      	str	r3, [sp, #8]
 8011258:	4b67      	ldr	r3, [pc, #412]	; (80113f8 <pow+0x2c0>)
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	f999 3000 	ldrsb.w	r3, [r9]
 8011260:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011264:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011268:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801126c:	b913      	cbnz	r3, 8011274 <pow+0x13c>
 801126e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011272:	e7a2      	b.n	80111ba <pow+0x82>
 8011274:	4962      	ldr	r1, [pc, #392]	; (8011400 <pow+0x2c8>)
 8011276:	2000      	movs	r0, #0
 8011278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d19c      	bne.n	80111ba <pow+0x82>
 8011280:	f7fd fa96 	bl	800e7b0 <__errno>
 8011284:	2321      	movs	r3, #33	; 0x21
 8011286:	6003      	str	r3, [r0, #0]
 8011288:	e7c5      	b.n	8011216 <pow+0xde>
 801128a:	eeb0 0a48 	vmov.f32	s0, s16
 801128e:	eef0 0a68 	vmov.f32	s1, s17
 8011292:	f000 ff14 	bl	80120be <finite>
 8011296:	9000      	str	r0, [sp, #0]
 8011298:	2800      	cmp	r0, #0
 801129a:	f040 8081 	bne.w	80113a0 <pow+0x268>
 801129e:	ec47 6b10 	vmov	d0, r6, r7
 80112a2:	f000 ff0c 	bl	80120be <finite>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d07a      	beq.n	80113a0 <pow+0x268>
 80112aa:	ec45 4b10 	vmov	d0, r4, r5
 80112ae:	f000 ff06 	bl	80120be <finite>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d074      	beq.n	80113a0 <pow+0x268>
 80112b6:	ec53 2b18 	vmov	r2, r3, d8
 80112ba:	ee18 0a10 	vmov	r0, s16
 80112be:	4619      	mov	r1, r3
 80112c0:	f7ef fc5c 	bl	8000b7c <__aeabi_dcmpun>
 80112c4:	f999 9000 	ldrsb.w	r9, [r9]
 80112c8:	4b4b      	ldr	r3, [pc, #300]	; (80113f8 <pow+0x2c0>)
 80112ca:	b1b0      	cbz	r0, 80112fa <pow+0x1c2>
 80112cc:	2201      	movs	r2, #1
 80112ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112d2:	9b00      	ldr	r3, [sp, #0]
 80112d4:	930a      	str	r3, [sp, #40]	; 0x28
 80112d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80112da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80112de:	f1b9 0f00 	cmp.w	r9, #0
 80112e2:	d0c4      	beq.n	801126e <pow+0x136>
 80112e4:	4652      	mov	r2, sl
 80112e6:	465b      	mov	r3, fp
 80112e8:	4650      	mov	r0, sl
 80112ea:	4659      	mov	r1, fp
 80112ec:	f7ef fad6 	bl	800089c <__aeabi_ddiv>
 80112f0:	f1b9 0f02 	cmp.w	r9, #2
 80112f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112f8:	e7c1      	b.n	801127e <pow+0x146>
 80112fa:	2203      	movs	r2, #3
 80112fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011300:	900a      	str	r0, [sp, #40]	; 0x28
 8011302:	4629      	mov	r1, r5
 8011304:	4620      	mov	r0, r4
 8011306:	2200      	movs	r2, #0
 8011308:	4b3e      	ldr	r3, [pc, #248]	; (8011404 <pow+0x2cc>)
 801130a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801130e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011312:	f7ef f999 	bl	8000648 <__aeabi_dmul>
 8011316:	4604      	mov	r4, r0
 8011318:	460d      	mov	r5, r1
 801131a:	f1b9 0f00 	cmp.w	r9, #0
 801131e:	d124      	bne.n	801136a <pow+0x232>
 8011320:	4b39      	ldr	r3, [pc, #228]	; (8011408 <pow+0x2d0>)
 8011322:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011326:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801132a:	4630      	mov	r0, r6
 801132c:	4652      	mov	r2, sl
 801132e:	465b      	mov	r3, fp
 8011330:	4639      	mov	r1, r7
 8011332:	f7ef fbfb 	bl	8000b2c <__aeabi_dcmplt>
 8011336:	2800      	cmp	r0, #0
 8011338:	d056      	beq.n	80113e8 <pow+0x2b0>
 801133a:	ec45 4b10 	vmov	d0, r4, r5
 801133e:	f000 fed3 	bl	80120e8 <rint>
 8011342:	4622      	mov	r2, r4
 8011344:	462b      	mov	r3, r5
 8011346:	ec51 0b10 	vmov	r0, r1, d0
 801134a:	f7ef fbe5 	bl	8000b18 <__aeabi_dcmpeq>
 801134e:	b920      	cbnz	r0, 801135a <pow+0x222>
 8011350:	4b2e      	ldr	r3, [pc, #184]	; (801140c <pow+0x2d4>)
 8011352:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011356:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801135a:	f998 3000 	ldrsb.w	r3, [r8]
 801135e:	2b02      	cmp	r3, #2
 8011360:	d142      	bne.n	80113e8 <pow+0x2b0>
 8011362:	f7fd fa25 	bl	800e7b0 <__errno>
 8011366:	2322      	movs	r3, #34	; 0x22
 8011368:	e78d      	b.n	8011286 <pow+0x14e>
 801136a:	4b29      	ldr	r3, [pc, #164]	; (8011410 <pow+0x2d8>)
 801136c:	2200      	movs	r2, #0
 801136e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011372:	4630      	mov	r0, r6
 8011374:	4652      	mov	r2, sl
 8011376:	465b      	mov	r3, fp
 8011378:	4639      	mov	r1, r7
 801137a:	f7ef fbd7 	bl	8000b2c <__aeabi_dcmplt>
 801137e:	2800      	cmp	r0, #0
 8011380:	d0eb      	beq.n	801135a <pow+0x222>
 8011382:	ec45 4b10 	vmov	d0, r4, r5
 8011386:	f000 feaf 	bl	80120e8 <rint>
 801138a:	4622      	mov	r2, r4
 801138c:	462b      	mov	r3, r5
 801138e:	ec51 0b10 	vmov	r0, r1, d0
 8011392:	f7ef fbc1 	bl	8000b18 <__aeabi_dcmpeq>
 8011396:	2800      	cmp	r0, #0
 8011398:	d1df      	bne.n	801135a <pow+0x222>
 801139a:	2200      	movs	r2, #0
 801139c:	4b18      	ldr	r3, [pc, #96]	; (8011400 <pow+0x2c8>)
 801139e:	e7da      	b.n	8011356 <pow+0x21e>
 80113a0:	2200      	movs	r2, #0
 80113a2:	2300      	movs	r3, #0
 80113a4:	ec51 0b18 	vmov	r0, r1, d8
 80113a8:	f7ef fbb6 	bl	8000b18 <__aeabi_dcmpeq>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	f43f af3a 	beq.w	8011226 <pow+0xee>
 80113b2:	ec47 6b10 	vmov	d0, r6, r7
 80113b6:	f000 fe82 	bl	80120be <finite>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	f43f af33 	beq.w	8011226 <pow+0xee>
 80113c0:	ec45 4b10 	vmov	d0, r4, r5
 80113c4:	f000 fe7b 	bl	80120be <finite>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f43f af2c 	beq.w	8011226 <pow+0xee>
 80113ce:	2304      	movs	r3, #4
 80113d0:	9302      	str	r3, [sp, #8]
 80113d2:	4b09      	ldr	r3, [pc, #36]	; (80113f8 <pow+0x2c0>)
 80113d4:	9303      	str	r3, [sp, #12]
 80113d6:	2300      	movs	r3, #0
 80113d8:	930a      	str	r3, [sp, #40]	; 0x28
 80113da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80113de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80113e2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80113e6:	e7b8      	b.n	801135a <pow+0x222>
 80113e8:	a802      	add	r0, sp, #8
 80113ea:	f000 fe70 	bl	80120ce <matherr>
 80113ee:	2800      	cmp	r0, #0
 80113f0:	f47f af11 	bne.w	8011216 <pow+0xde>
 80113f4:	e7b5      	b.n	8011362 <pow+0x22a>
 80113f6:	bf00      	nop
 80113f8:	08013a8e 	.word	0x08013a8e
 80113fc:	3ff00000 	.word	0x3ff00000
 8011400:	fff00000 	.word	0xfff00000
 8011404:	3fe00000 	.word	0x3fe00000
 8011408:	47efffff 	.word	0x47efffff
 801140c:	c7efffff 	.word	0xc7efffff
 8011410:	7ff00000 	.word	0x7ff00000
 8011414:	20001ab4 	.word	0x20001ab4

08011418 <__ieee754_log10>:
 8011418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801141c:	ec55 4b10 	vmov	r4, r5, d0
 8011420:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011424:	462b      	mov	r3, r5
 8011426:	da2f      	bge.n	8011488 <__ieee754_log10+0x70>
 8011428:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801142c:	4322      	orrs	r2, r4
 801142e:	d10a      	bne.n	8011446 <__ieee754_log10+0x2e>
 8011430:	493b      	ldr	r1, [pc, #236]	; (8011520 <__ieee754_log10+0x108>)
 8011432:	2200      	movs	r2, #0
 8011434:	2300      	movs	r3, #0
 8011436:	2000      	movs	r0, #0
 8011438:	f7ef fa30 	bl	800089c <__aeabi_ddiv>
 801143c:	ec41 0b10 	vmov	d0, r0, r1
 8011440:	b003      	add	sp, #12
 8011442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011446:	2d00      	cmp	r5, #0
 8011448:	da08      	bge.n	801145c <__ieee754_log10+0x44>
 801144a:	ee10 2a10 	vmov	r2, s0
 801144e:	4620      	mov	r0, r4
 8011450:	4629      	mov	r1, r5
 8011452:	f7ee ff41 	bl	80002d8 <__aeabi_dsub>
 8011456:	2200      	movs	r2, #0
 8011458:	2300      	movs	r3, #0
 801145a:	e7ed      	b.n	8011438 <__ieee754_log10+0x20>
 801145c:	2200      	movs	r2, #0
 801145e:	4b31      	ldr	r3, [pc, #196]	; (8011524 <__ieee754_log10+0x10c>)
 8011460:	4629      	mov	r1, r5
 8011462:	ee10 0a10 	vmov	r0, s0
 8011466:	f7ef f8ef 	bl	8000648 <__aeabi_dmul>
 801146a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801146e:	4604      	mov	r4, r0
 8011470:	460d      	mov	r5, r1
 8011472:	460b      	mov	r3, r1
 8011474:	492c      	ldr	r1, [pc, #176]	; (8011528 <__ieee754_log10+0x110>)
 8011476:	428b      	cmp	r3, r1
 8011478:	dd08      	ble.n	801148c <__ieee754_log10+0x74>
 801147a:	4622      	mov	r2, r4
 801147c:	462b      	mov	r3, r5
 801147e:	4620      	mov	r0, r4
 8011480:	4629      	mov	r1, r5
 8011482:	f7ee ff2b 	bl	80002dc <__adddf3>
 8011486:	e7d9      	b.n	801143c <__ieee754_log10+0x24>
 8011488:	2200      	movs	r2, #0
 801148a:	e7f3      	b.n	8011474 <__ieee754_log10+0x5c>
 801148c:	1518      	asrs	r0, r3, #20
 801148e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011492:	4410      	add	r0, r2
 8011494:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011498:	4448      	add	r0, r9
 801149a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801149e:	f7ef f869 	bl	8000574 <__aeabi_i2d>
 80114a2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80114a6:	3303      	adds	r3, #3
 80114a8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80114ac:	ec45 4b10 	vmov	d0, r4, r5
 80114b0:	4606      	mov	r6, r0
 80114b2:	460f      	mov	r7, r1
 80114b4:	f000 ff14 	bl	80122e0 <__ieee754_log>
 80114b8:	a313      	add	r3, pc, #76	; (adr r3, 8011508 <__ieee754_log10+0xf0>)
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	4630      	mov	r0, r6
 80114c0:	4639      	mov	r1, r7
 80114c2:	ed8d 0b00 	vstr	d0, [sp]
 80114c6:	f7ef f8bf 	bl	8000648 <__aeabi_dmul>
 80114ca:	ed9d 0b00 	vldr	d0, [sp]
 80114ce:	4604      	mov	r4, r0
 80114d0:	460d      	mov	r5, r1
 80114d2:	a30f      	add	r3, pc, #60	; (adr r3, 8011510 <__ieee754_log10+0xf8>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	ec51 0b10 	vmov	r0, r1, d0
 80114dc:	f7ef f8b4 	bl	8000648 <__aeabi_dmul>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4620      	mov	r0, r4
 80114e6:	4629      	mov	r1, r5
 80114e8:	f7ee fef8 	bl	80002dc <__adddf3>
 80114ec:	a30a      	add	r3, pc, #40	; (adr r3, 8011518 <__ieee754_log10+0x100>)
 80114ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f2:	4604      	mov	r4, r0
 80114f4:	460d      	mov	r5, r1
 80114f6:	4630      	mov	r0, r6
 80114f8:	4639      	mov	r1, r7
 80114fa:	f7ef f8a5 	bl	8000648 <__aeabi_dmul>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4620      	mov	r0, r4
 8011504:	4629      	mov	r1, r5
 8011506:	e7bc      	b.n	8011482 <__ieee754_log10+0x6a>
 8011508:	11f12b36 	.word	0x11f12b36
 801150c:	3d59fef3 	.word	0x3d59fef3
 8011510:	1526e50e 	.word	0x1526e50e
 8011514:	3fdbcb7b 	.word	0x3fdbcb7b
 8011518:	509f6000 	.word	0x509f6000
 801151c:	3fd34413 	.word	0x3fd34413
 8011520:	c3500000 	.word	0xc3500000
 8011524:	43500000 	.word	0x43500000
 8011528:	7fefffff 	.word	0x7fefffff
 801152c:	00000000 	.word	0x00000000

08011530 <__ieee754_pow>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	b091      	sub	sp, #68	; 0x44
 8011536:	ed8d 1b00 	vstr	d1, [sp]
 801153a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801153e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011542:	ea58 0302 	orrs.w	r3, r8, r2
 8011546:	ec57 6b10 	vmov	r6, r7, d0
 801154a:	f000 84be 	beq.w	8011eca <__ieee754_pow+0x99a>
 801154e:	4b7a      	ldr	r3, [pc, #488]	; (8011738 <__ieee754_pow+0x208>)
 8011550:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011554:	429c      	cmp	r4, r3
 8011556:	463d      	mov	r5, r7
 8011558:	ee10 aa10 	vmov	sl, s0
 801155c:	dc09      	bgt.n	8011572 <__ieee754_pow+0x42>
 801155e:	d103      	bne.n	8011568 <__ieee754_pow+0x38>
 8011560:	b93e      	cbnz	r6, 8011572 <__ieee754_pow+0x42>
 8011562:	45a0      	cmp	r8, r4
 8011564:	dc0d      	bgt.n	8011582 <__ieee754_pow+0x52>
 8011566:	e001      	b.n	801156c <__ieee754_pow+0x3c>
 8011568:	4598      	cmp	r8, r3
 801156a:	dc02      	bgt.n	8011572 <__ieee754_pow+0x42>
 801156c:	4598      	cmp	r8, r3
 801156e:	d10e      	bne.n	801158e <__ieee754_pow+0x5e>
 8011570:	b16a      	cbz	r2, 801158e <__ieee754_pow+0x5e>
 8011572:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011576:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801157a:	ea54 030a 	orrs.w	r3, r4, sl
 801157e:	f000 84a4 	beq.w	8011eca <__ieee754_pow+0x99a>
 8011582:	486e      	ldr	r0, [pc, #440]	; (801173c <__ieee754_pow+0x20c>)
 8011584:	b011      	add	sp, #68	; 0x44
 8011586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158a:	f000 bda5 	b.w	80120d8 <nan>
 801158e:	2d00      	cmp	r5, #0
 8011590:	da53      	bge.n	801163a <__ieee754_pow+0x10a>
 8011592:	4b6b      	ldr	r3, [pc, #428]	; (8011740 <__ieee754_pow+0x210>)
 8011594:	4598      	cmp	r8, r3
 8011596:	dc4d      	bgt.n	8011634 <__ieee754_pow+0x104>
 8011598:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801159c:	4598      	cmp	r8, r3
 801159e:	dd4c      	ble.n	801163a <__ieee754_pow+0x10a>
 80115a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80115a8:	2b14      	cmp	r3, #20
 80115aa:	dd26      	ble.n	80115fa <__ieee754_pow+0xca>
 80115ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80115b0:	fa22 f103 	lsr.w	r1, r2, r3
 80115b4:	fa01 f303 	lsl.w	r3, r1, r3
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d13e      	bne.n	801163a <__ieee754_pow+0x10a>
 80115bc:	f001 0101 	and.w	r1, r1, #1
 80115c0:	f1c1 0b02 	rsb	fp, r1, #2
 80115c4:	2a00      	cmp	r2, #0
 80115c6:	d15b      	bne.n	8011680 <__ieee754_pow+0x150>
 80115c8:	4b5b      	ldr	r3, [pc, #364]	; (8011738 <__ieee754_pow+0x208>)
 80115ca:	4598      	cmp	r8, r3
 80115cc:	d124      	bne.n	8011618 <__ieee754_pow+0xe8>
 80115ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80115d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80115d6:	ea53 030a 	orrs.w	r3, r3, sl
 80115da:	f000 8476 	beq.w	8011eca <__ieee754_pow+0x99a>
 80115de:	4b59      	ldr	r3, [pc, #356]	; (8011744 <__ieee754_pow+0x214>)
 80115e0:	429c      	cmp	r4, r3
 80115e2:	dd2d      	ble.n	8011640 <__ieee754_pow+0x110>
 80115e4:	f1b9 0f00 	cmp.w	r9, #0
 80115e8:	f280 8473 	bge.w	8011ed2 <__ieee754_pow+0x9a2>
 80115ec:	2000      	movs	r0, #0
 80115ee:	2100      	movs	r1, #0
 80115f0:	ec41 0b10 	vmov	d0, r0, r1
 80115f4:	b011      	add	sp, #68	; 0x44
 80115f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	d13e      	bne.n	801167c <__ieee754_pow+0x14c>
 80115fe:	f1c3 0314 	rsb	r3, r3, #20
 8011602:	fa48 f103 	asr.w	r1, r8, r3
 8011606:	fa01 f303 	lsl.w	r3, r1, r3
 801160a:	4543      	cmp	r3, r8
 801160c:	f040 8469 	bne.w	8011ee2 <__ieee754_pow+0x9b2>
 8011610:	f001 0101 	and.w	r1, r1, #1
 8011614:	f1c1 0b02 	rsb	fp, r1, #2
 8011618:	4b4b      	ldr	r3, [pc, #300]	; (8011748 <__ieee754_pow+0x218>)
 801161a:	4598      	cmp	r8, r3
 801161c:	d118      	bne.n	8011650 <__ieee754_pow+0x120>
 801161e:	f1b9 0f00 	cmp.w	r9, #0
 8011622:	f280 845a 	bge.w	8011eda <__ieee754_pow+0x9aa>
 8011626:	4948      	ldr	r1, [pc, #288]	; (8011748 <__ieee754_pow+0x218>)
 8011628:	4632      	mov	r2, r6
 801162a:	463b      	mov	r3, r7
 801162c:	2000      	movs	r0, #0
 801162e:	f7ef f935 	bl	800089c <__aeabi_ddiv>
 8011632:	e7dd      	b.n	80115f0 <__ieee754_pow+0xc0>
 8011634:	f04f 0b02 	mov.w	fp, #2
 8011638:	e7c4      	b.n	80115c4 <__ieee754_pow+0x94>
 801163a:	f04f 0b00 	mov.w	fp, #0
 801163e:	e7c1      	b.n	80115c4 <__ieee754_pow+0x94>
 8011640:	f1b9 0f00 	cmp.w	r9, #0
 8011644:	dad2      	bge.n	80115ec <__ieee754_pow+0xbc>
 8011646:	e9dd 0300 	ldrd	r0, r3, [sp]
 801164a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801164e:	e7cf      	b.n	80115f0 <__ieee754_pow+0xc0>
 8011650:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011654:	d106      	bne.n	8011664 <__ieee754_pow+0x134>
 8011656:	4632      	mov	r2, r6
 8011658:	463b      	mov	r3, r7
 801165a:	4610      	mov	r0, r2
 801165c:	4619      	mov	r1, r3
 801165e:	f7ee fff3 	bl	8000648 <__aeabi_dmul>
 8011662:	e7c5      	b.n	80115f0 <__ieee754_pow+0xc0>
 8011664:	4b39      	ldr	r3, [pc, #228]	; (801174c <__ieee754_pow+0x21c>)
 8011666:	4599      	cmp	r9, r3
 8011668:	d10a      	bne.n	8011680 <__ieee754_pow+0x150>
 801166a:	2d00      	cmp	r5, #0
 801166c:	db08      	blt.n	8011680 <__ieee754_pow+0x150>
 801166e:	ec47 6b10 	vmov	d0, r6, r7
 8011672:	b011      	add	sp, #68	; 0x44
 8011674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011678:	f000 bc68 	b.w	8011f4c <__ieee754_sqrt>
 801167c:	f04f 0b00 	mov.w	fp, #0
 8011680:	ec47 6b10 	vmov	d0, r6, r7
 8011684:	f000 fd12 	bl	80120ac <fabs>
 8011688:	ec51 0b10 	vmov	r0, r1, d0
 801168c:	f1ba 0f00 	cmp.w	sl, #0
 8011690:	d127      	bne.n	80116e2 <__ieee754_pow+0x1b2>
 8011692:	b124      	cbz	r4, 801169e <__ieee754_pow+0x16e>
 8011694:	4b2c      	ldr	r3, [pc, #176]	; (8011748 <__ieee754_pow+0x218>)
 8011696:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801169a:	429a      	cmp	r2, r3
 801169c:	d121      	bne.n	80116e2 <__ieee754_pow+0x1b2>
 801169e:	f1b9 0f00 	cmp.w	r9, #0
 80116a2:	da05      	bge.n	80116b0 <__ieee754_pow+0x180>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	2000      	movs	r0, #0
 80116aa:	4927      	ldr	r1, [pc, #156]	; (8011748 <__ieee754_pow+0x218>)
 80116ac:	f7ef f8f6 	bl	800089c <__aeabi_ddiv>
 80116b0:	2d00      	cmp	r5, #0
 80116b2:	da9d      	bge.n	80115f0 <__ieee754_pow+0xc0>
 80116b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80116b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80116bc:	ea54 030b 	orrs.w	r3, r4, fp
 80116c0:	d108      	bne.n	80116d4 <__ieee754_pow+0x1a4>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4610      	mov	r0, r2
 80116c8:	4619      	mov	r1, r3
 80116ca:	f7ee fe05 	bl	80002d8 <__aeabi_dsub>
 80116ce:	4602      	mov	r2, r0
 80116d0:	460b      	mov	r3, r1
 80116d2:	e7ac      	b.n	801162e <__ieee754_pow+0xfe>
 80116d4:	f1bb 0f01 	cmp.w	fp, #1
 80116d8:	d18a      	bne.n	80115f0 <__ieee754_pow+0xc0>
 80116da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116de:	4619      	mov	r1, r3
 80116e0:	e786      	b.n	80115f0 <__ieee754_pow+0xc0>
 80116e2:	0fed      	lsrs	r5, r5, #31
 80116e4:	1e6b      	subs	r3, r5, #1
 80116e6:	930d      	str	r3, [sp, #52]	; 0x34
 80116e8:	ea5b 0303 	orrs.w	r3, fp, r3
 80116ec:	d102      	bne.n	80116f4 <__ieee754_pow+0x1c4>
 80116ee:	4632      	mov	r2, r6
 80116f0:	463b      	mov	r3, r7
 80116f2:	e7e8      	b.n	80116c6 <__ieee754_pow+0x196>
 80116f4:	4b16      	ldr	r3, [pc, #88]	; (8011750 <__ieee754_pow+0x220>)
 80116f6:	4598      	cmp	r8, r3
 80116f8:	f340 80fe 	ble.w	80118f8 <__ieee754_pow+0x3c8>
 80116fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011700:	4598      	cmp	r8, r3
 8011702:	dd0a      	ble.n	801171a <__ieee754_pow+0x1ea>
 8011704:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <__ieee754_pow+0x214>)
 8011706:	429c      	cmp	r4, r3
 8011708:	dc0d      	bgt.n	8011726 <__ieee754_pow+0x1f6>
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	f6bf af6d 	bge.w	80115ec <__ieee754_pow+0xbc>
 8011712:	a307      	add	r3, pc, #28	; (adr r3, 8011730 <__ieee754_pow+0x200>)
 8011714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011718:	e79f      	b.n	801165a <__ieee754_pow+0x12a>
 801171a:	4b0e      	ldr	r3, [pc, #56]	; (8011754 <__ieee754_pow+0x224>)
 801171c:	429c      	cmp	r4, r3
 801171e:	ddf4      	ble.n	801170a <__ieee754_pow+0x1da>
 8011720:	4b09      	ldr	r3, [pc, #36]	; (8011748 <__ieee754_pow+0x218>)
 8011722:	429c      	cmp	r4, r3
 8011724:	dd18      	ble.n	8011758 <__ieee754_pow+0x228>
 8011726:	f1b9 0f00 	cmp.w	r9, #0
 801172a:	dcf2      	bgt.n	8011712 <__ieee754_pow+0x1e2>
 801172c:	e75e      	b.n	80115ec <__ieee754_pow+0xbc>
 801172e:	bf00      	nop
 8011730:	8800759c 	.word	0x8800759c
 8011734:	7e37e43c 	.word	0x7e37e43c
 8011738:	7ff00000 	.word	0x7ff00000
 801173c:	08013971 	.word	0x08013971
 8011740:	433fffff 	.word	0x433fffff
 8011744:	3fefffff 	.word	0x3fefffff
 8011748:	3ff00000 	.word	0x3ff00000
 801174c:	3fe00000 	.word	0x3fe00000
 8011750:	41e00000 	.word	0x41e00000
 8011754:	3feffffe 	.word	0x3feffffe
 8011758:	2200      	movs	r2, #0
 801175a:	4b63      	ldr	r3, [pc, #396]	; (80118e8 <__ieee754_pow+0x3b8>)
 801175c:	f7ee fdbc 	bl	80002d8 <__aeabi_dsub>
 8011760:	a355      	add	r3, pc, #340	; (adr r3, 80118b8 <__ieee754_pow+0x388>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	4604      	mov	r4, r0
 8011768:	460d      	mov	r5, r1
 801176a:	f7ee ff6d 	bl	8000648 <__aeabi_dmul>
 801176e:	a354      	add	r3, pc, #336	; (adr r3, 80118c0 <__ieee754_pow+0x390>)
 8011770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011774:	4606      	mov	r6, r0
 8011776:	460f      	mov	r7, r1
 8011778:	4620      	mov	r0, r4
 801177a:	4629      	mov	r1, r5
 801177c:	f7ee ff64 	bl	8000648 <__aeabi_dmul>
 8011780:	2200      	movs	r2, #0
 8011782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011786:	4b59      	ldr	r3, [pc, #356]	; (80118ec <__ieee754_pow+0x3bc>)
 8011788:	4620      	mov	r0, r4
 801178a:	4629      	mov	r1, r5
 801178c:	f7ee ff5c 	bl	8000648 <__aeabi_dmul>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	a14c      	add	r1, pc, #304	; (adr r1, 80118c8 <__ieee754_pow+0x398>)
 8011796:	e9d1 0100 	ldrd	r0, r1, [r1]
 801179a:	f7ee fd9d 	bl	80002d8 <__aeabi_dsub>
 801179e:	4622      	mov	r2, r4
 80117a0:	462b      	mov	r3, r5
 80117a2:	f7ee ff51 	bl	8000648 <__aeabi_dmul>
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	2000      	movs	r0, #0
 80117ac:	4950      	ldr	r1, [pc, #320]	; (80118f0 <__ieee754_pow+0x3c0>)
 80117ae:	f7ee fd93 	bl	80002d8 <__aeabi_dsub>
 80117b2:	4622      	mov	r2, r4
 80117b4:	462b      	mov	r3, r5
 80117b6:	4680      	mov	r8, r0
 80117b8:	4689      	mov	r9, r1
 80117ba:	4620      	mov	r0, r4
 80117bc:	4629      	mov	r1, r5
 80117be:	f7ee ff43 	bl	8000648 <__aeabi_dmul>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4640      	mov	r0, r8
 80117c8:	4649      	mov	r1, r9
 80117ca:	f7ee ff3d 	bl	8000648 <__aeabi_dmul>
 80117ce:	a340      	add	r3, pc, #256	; (adr r3, 80118d0 <__ieee754_pow+0x3a0>)
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ee ff38 	bl	8000648 <__aeabi_dmul>
 80117d8:	4602      	mov	r2, r0
 80117da:	460b      	mov	r3, r1
 80117dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117e0:	f7ee fd7a 	bl	80002d8 <__aeabi_dsub>
 80117e4:	4602      	mov	r2, r0
 80117e6:	460b      	mov	r3, r1
 80117e8:	4604      	mov	r4, r0
 80117ea:	460d      	mov	r5, r1
 80117ec:	4630      	mov	r0, r6
 80117ee:	4639      	mov	r1, r7
 80117f0:	f7ee fd74 	bl	80002dc <__adddf3>
 80117f4:	2000      	movs	r0, #0
 80117f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117fa:	4632      	mov	r2, r6
 80117fc:	463b      	mov	r3, r7
 80117fe:	f7ee fd6b 	bl	80002d8 <__aeabi_dsub>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4620      	mov	r0, r4
 8011808:	4629      	mov	r1, r5
 801180a:	f7ee fd65 	bl	80002d8 <__aeabi_dsub>
 801180e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011810:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011814:	4313      	orrs	r3, r2
 8011816:	4606      	mov	r6, r0
 8011818:	460f      	mov	r7, r1
 801181a:	f040 81eb 	bne.w	8011bf4 <__ieee754_pow+0x6c4>
 801181e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80118d8 <__ieee754_pow+0x3a8>
 8011822:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011826:	2400      	movs	r4, #0
 8011828:	4622      	mov	r2, r4
 801182a:	462b      	mov	r3, r5
 801182c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011830:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011834:	f7ee fd50 	bl	80002d8 <__aeabi_dsub>
 8011838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801183c:	f7ee ff04 	bl	8000648 <__aeabi_dmul>
 8011840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011844:	4680      	mov	r8, r0
 8011846:	4689      	mov	r9, r1
 8011848:	4630      	mov	r0, r6
 801184a:	4639      	mov	r1, r7
 801184c:	f7ee fefc 	bl	8000648 <__aeabi_dmul>
 8011850:	4602      	mov	r2, r0
 8011852:	460b      	mov	r3, r1
 8011854:	4640      	mov	r0, r8
 8011856:	4649      	mov	r1, r9
 8011858:	f7ee fd40 	bl	80002dc <__adddf3>
 801185c:	4622      	mov	r2, r4
 801185e:	462b      	mov	r3, r5
 8011860:	4680      	mov	r8, r0
 8011862:	4689      	mov	r9, r1
 8011864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011868:	f7ee feee 	bl	8000648 <__aeabi_dmul>
 801186c:	460b      	mov	r3, r1
 801186e:	4604      	mov	r4, r0
 8011870:	460d      	mov	r5, r1
 8011872:	4602      	mov	r2, r0
 8011874:	4649      	mov	r1, r9
 8011876:	4640      	mov	r0, r8
 8011878:	e9cd 4500 	strd	r4, r5, [sp]
 801187c:	f7ee fd2e 	bl	80002dc <__adddf3>
 8011880:	4b1c      	ldr	r3, [pc, #112]	; (80118f4 <__ieee754_pow+0x3c4>)
 8011882:	4299      	cmp	r1, r3
 8011884:	4606      	mov	r6, r0
 8011886:	460f      	mov	r7, r1
 8011888:	468b      	mov	fp, r1
 801188a:	f340 82f7 	ble.w	8011e7c <__ieee754_pow+0x94c>
 801188e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011892:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011896:	4303      	orrs	r3, r0
 8011898:	f000 81ea 	beq.w	8011c70 <__ieee754_pow+0x740>
 801189c:	a310      	add	r3, pc, #64	; (adr r3, 80118e0 <__ieee754_pow+0x3b0>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118a6:	f7ee fecf 	bl	8000648 <__aeabi_dmul>
 80118aa:	a30d      	add	r3, pc, #52	; (adr r3, 80118e0 <__ieee754_pow+0x3b0>)
 80118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b0:	e6d5      	b.n	801165e <__ieee754_pow+0x12e>
 80118b2:	bf00      	nop
 80118b4:	f3af 8000 	nop.w
 80118b8:	60000000 	.word	0x60000000
 80118bc:	3ff71547 	.word	0x3ff71547
 80118c0:	f85ddf44 	.word	0xf85ddf44
 80118c4:	3e54ae0b 	.word	0x3e54ae0b
 80118c8:	55555555 	.word	0x55555555
 80118cc:	3fd55555 	.word	0x3fd55555
 80118d0:	652b82fe 	.word	0x652b82fe
 80118d4:	3ff71547 	.word	0x3ff71547
 80118d8:	00000000 	.word	0x00000000
 80118dc:	bff00000 	.word	0xbff00000
 80118e0:	8800759c 	.word	0x8800759c
 80118e4:	7e37e43c 	.word	0x7e37e43c
 80118e8:	3ff00000 	.word	0x3ff00000
 80118ec:	3fd00000 	.word	0x3fd00000
 80118f0:	3fe00000 	.word	0x3fe00000
 80118f4:	408fffff 	.word	0x408fffff
 80118f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80118fc:	f04f 0200 	mov.w	r2, #0
 8011900:	da05      	bge.n	801190e <__ieee754_pow+0x3de>
 8011902:	4bd3      	ldr	r3, [pc, #844]	; (8011c50 <__ieee754_pow+0x720>)
 8011904:	f7ee fea0 	bl	8000648 <__aeabi_dmul>
 8011908:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801190c:	460c      	mov	r4, r1
 801190e:	1523      	asrs	r3, r4, #20
 8011910:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011914:	4413      	add	r3, r2
 8011916:	9309      	str	r3, [sp, #36]	; 0x24
 8011918:	4bce      	ldr	r3, [pc, #824]	; (8011c54 <__ieee754_pow+0x724>)
 801191a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801191e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011922:	429c      	cmp	r4, r3
 8011924:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011928:	dd08      	ble.n	801193c <__ieee754_pow+0x40c>
 801192a:	4bcb      	ldr	r3, [pc, #812]	; (8011c58 <__ieee754_pow+0x728>)
 801192c:	429c      	cmp	r4, r3
 801192e:	f340 815e 	ble.w	8011bee <__ieee754_pow+0x6be>
 8011932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011934:	3301      	adds	r3, #1
 8011936:	9309      	str	r3, [sp, #36]	; 0x24
 8011938:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801193c:	f04f 0a00 	mov.w	sl, #0
 8011940:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011944:	930c      	str	r3, [sp, #48]	; 0x30
 8011946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011948:	4bc4      	ldr	r3, [pc, #784]	; (8011c5c <__ieee754_pow+0x72c>)
 801194a:	4413      	add	r3, r2
 801194c:	ed93 7b00 	vldr	d7, [r3]
 8011950:	4629      	mov	r1, r5
 8011952:	ec53 2b17 	vmov	r2, r3, d7
 8011956:	ed8d 7b06 	vstr	d7, [sp, #24]
 801195a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801195e:	f7ee fcbb 	bl	80002d8 <__aeabi_dsub>
 8011962:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011966:	4606      	mov	r6, r0
 8011968:	460f      	mov	r7, r1
 801196a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801196e:	f7ee fcb5 	bl	80002dc <__adddf3>
 8011972:	4602      	mov	r2, r0
 8011974:	460b      	mov	r3, r1
 8011976:	2000      	movs	r0, #0
 8011978:	49b9      	ldr	r1, [pc, #740]	; (8011c60 <__ieee754_pow+0x730>)
 801197a:	f7ee ff8f 	bl	800089c <__aeabi_ddiv>
 801197e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4630      	mov	r0, r6
 8011988:	4639      	mov	r1, r7
 801198a:	f7ee fe5d 	bl	8000648 <__aeabi_dmul>
 801198e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011992:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801199a:	2300      	movs	r3, #0
 801199c:	9302      	str	r3, [sp, #8]
 801199e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80119a2:	106d      	asrs	r5, r5, #1
 80119a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80119a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80119ac:	2200      	movs	r2, #0
 80119ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80119b2:	4640      	mov	r0, r8
 80119b4:	4649      	mov	r1, r9
 80119b6:	4614      	mov	r4, r2
 80119b8:	461d      	mov	r5, r3
 80119ba:	f7ee fe45 	bl	8000648 <__aeabi_dmul>
 80119be:	4602      	mov	r2, r0
 80119c0:	460b      	mov	r3, r1
 80119c2:	4630      	mov	r0, r6
 80119c4:	4639      	mov	r1, r7
 80119c6:	f7ee fc87 	bl	80002d8 <__aeabi_dsub>
 80119ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80119ce:	4606      	mov	r6, r0
 80119d0:	460f      	mov	r7, r1
 80119d2:	4620      	mov	r0, r4
 80119d4:	4629      	mov	r1, r5
 80119d6:	f7ee fc7f 	bl	80002d8 <__aeabi_dsub>
 80119da:	4602      	mov	r2, r0
 80119dc:	460b      	mov	r3, r1
 80119de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80119e2:	f7ee fc79 	bl	80002d8 <__aeabi_dsub>
 80119e6:	4642      	mov	r2, r8
 80119e8:	464b      	mov	r3, r9
 80119ea:	f7ee fe2d 	bl	8000648 <__aeabi_dmul>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4630      	mov	r0, r6
 80119f4:	4639      	mov	r1, r7
 80119f6:	f7ee fc6f 	bl	80002d8 <__aeabi_dsub>
 80119fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80119fe:	f7ee fe23 	bl	8000648 <__aeabi_dmul>
 8011a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f7ee fe1b 	bl	8000648 <__aeabi_dmul>
 8011a12:	a37b      	add	r3, pc, #492	; (adr r3, 8011c00 <__ieee754_pow+0x6d0>)
 8011a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	f7ee fe14 	bl	8000648 <__aeabi_dmul>
 8011a20:	a379      	add	r3, pc, #484	; (adr r3, 8011c08 <__ieee754_pow+0x6d8>)
 8011a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a26:	f7ee fc59 	bl	80002dc <__adddf3>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	462b      	mov	r3, r5
 8011a2e:	f7ee fe0b 	bl	8000648 <__aeabi_dmul>
 8011a32:	a377      	add	r3, pc, #476	; (adr r3, 8011c10 <__ieee754_pow+0x6e0>)
 8011a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a38:	f7ee fc50 	bl	80002dc <__adddf3>
 8011a3c:	4622      	mov	r2, r4
 8011a3e:	462b      	mov	r3, r5
 8011a40:	f7ee fe02 	bl	8000648 <__aeabi_dmul>
 8011a44:	a374      	add	r3, pc, #464	; (adr r3, 8011c18 <__ieee754_pow+0x6e8>)
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	f7ee fc47 	bl	80002dc <__adddf3>
 8011a4e:	4622      	mov	r2, r4
 8011a50:	462b      	mov	r3, r5
 8011a52:	f7ee fdf9 	bl	8000648 <__aeabi_dmul>
 8011a56:	a372      	add	r3, pc, #456	; (adr r3, 8011c20 <__ieee754_pow+0x6f0>)
 8011a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5c:	f7ee fc3e 	bl	80002dc <__adddf3>
 8011a60:	4622      	mov	r2, r4
 8011a62:	462b      	mov	r3, r5
 8011a64:	f7ee fdf0 	bl	8000648 <__aeabi_dmul>
 8011a68:	a36f      	add	r3, pc, #444	; (adr r3, 8011c28 <__ieee754_pow+0x6f8>)
 8011a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6e:	f7ee fc35 	bl	80002dc <__adddf3>
 8011a72:	4622      	mov	r2, r4
 8011a74:	4606      	mov	r6, r0
 8011a76:	460f      	mov	r7, r1
 8011a78:	462b      	mov	r3, r5
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	f7ee fde3 	bl	8000648 <__aeabi_dmul>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4630      	mov	r0, r6
 8011a88:	4639      	mov	r1, r7
 8011a8a:	f7ee fddd 	bl	8000648 <__aeabi_dmul>
 8011a8e:	4642      	mov	r2, r8
 8011a90:	4604      	mov	r4, r0
 8011a92:	460d      	mov	r5, r1
 8011a94:	464b      	mov	r3, r9
 8011a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a9a:	f7ee fc1f 	bl	80002dc <__adddf3>
 8011a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011aa2:	f7ee fdd1 	bl	8000648 <__aeabi_dmul>
 8011aa6:	4622      	mov	r2, r4
 8011aa8:	462b      	mov	r3, r5
 8011aaa:	f7ee fc17 	bl	80002dc <__adddf3>
 8011aae:	4642      	mov	r2, r8
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	464b      	mov	r3, r9
 8011ab6:	4640      	mov	r0, r8
 8011ab8:	4649      	mov	r1, r9
 8011aba:	f7ee fdc5 	bl	8000648 <__aeabi_dmul>
 8011abe:	2200      	movs	r2, #0
 8011ac0:	4b68      	ldr	r3, [pc, #416]	; (8011c64 <__ieee754_pow+0x734>)
 8011ac2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011ac6:	f7ee fc09 	bl	80002dc <__adddf3>
 8011aca:	4632      	mov	r2, r6
 8011acc:	463b      	mov	r3, r7
 8011ace:	f7ee fc05 	bl	80002dc <__adddf3>
 8011ad2:	9802      	ldr	r0, [sp, #8]
 8011ad4:	460d      	mov	r5, r1
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	4602      	mov	r2, r0
 8011ada:	460b      	mov	r3, r1
 8011adc:	4640      	mov	r0, r8
 8011ade:	4649      	mov	r1, r9
 8011ae0:	f7ee fdb2 	bl	8000648 <__aeabi_dmul>
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	4680      	mov	r8, r0
 8011ae8:	4689      	mov	r9, r1
 8011aea:	4b5e      	ldr	r3, [pc, #376]	; (8011c64 <__ieee754_pow+0x734>)
 8011aec:	4620      	mov	r0, r4
 8011aee:	4629      	mov	r1, r5
 8011af0:	f7ee fbf2 	bl	80002d8 <__aeabi_dsub>
 8011af4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011af8:	f7ee fbee 	bl	80002d8 <__aeabi_dsub>
 8011afc:	4602      	mov	r2, r0
 8011afe:	460b      	mov	r3, r1
 8011b00:	4630      	mov	r0, r6
 8011b02:	4639      	mov	r1, r7
 8011b04:	f7ee fbe8 	bl	80002d8 <__aeabi_dsub>
 8011b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b0c:	f7ee fd9c 	bl	8000648 <__aeabi_dmul>
 8011b10:	4622      	mov	r2, r4
 8011b12:	4606      	mov	r6, r0
 8011b14:	460f      	mov	r7, r1
 8011b16:	462b      	mov	r3, r5
 8011b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b1c:	f7ee fd94 	bl	8000648 <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	f7ee fbd8 	bl	80002dc <__adddf3>
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	460f      	mov	r7, r1
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	4640      	mov	r0, r8
 8011b36:	4649      	mov	r1, r9
 8011b38:	f7ee fbd0 	bl	80002dc <__adddf3>
 8011b3c:	9802      	ldr	r0, [sp, #8]
 8011b3e:	a33c      	add	r3, pc, #240	; (adr r3, 8011c30 <__ieee754_pow+0x700>)
 8011b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b44:	4604      	mov	r4, r0
 8011b46:	460d      	mov	r5, r1
 8011b48:	f7ee fd7e 	bl	8000648 <__aeabi_dmul>
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011b52:	464b      	mov	r3, r9
 8011b54:	4620      	mov	r0, r4
 8011b56:	4629      	mov	r1, r5
 8011b58:	f7ee fbbe 	bl	80002d8 <__aeabi_dsub>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	460b      	mov	r3, r1
 8011b60:	4630      	mov	r0, r6
 8011b62:	4639      	mov	r1, r7
 8011b64:	f7ee fbb8 	bl	80002d8 <__aeabi_dsub>
 8011b68:	a333      	add	r3, pc, #204	; (adr r3, 8011c38 <__ieee754_pow+0x708>)
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	f7ee fd6b 	bl	8000648 <__aeabi_dmul>
 8011b72:	a333      	add	r3, pc, #204	; (adr r3, 8011c40 <__ieee754_pow+0x710>)
 8011b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b78:	4606      	mov	r6, r0
 8011b7a:	460f      	mov	r7, r1
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	f7ee fd62 	bl	8000648 <__aeabi_dmul>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	4630      	mov	r0, r6
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ee fba6 	bl	80002dc <__adddf3>
 8011b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b92:	4b35      	ldr	r3, [pc, #212]	; (8011c68 <__ieee754_pow+0x738>)
 8011b94:	4413      	add	r3, r2
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	f7ee fb9f 	bl	80002dc <__adddf3>
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ba2:	460d      	mov	r5, r1
 8011ba4:	f7ee fce6 	bl	8000574 <__aeabi_i2d>
 8011ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011baa:	4b30      	ldr	r3, [pc, #192]	; (8011c6c <__ieee754_pow+0x73c>)
 8011bac:	4413      	add	r3, r2
 8011bae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	460f      	mov	r7, r1
 8011bb6:	4622      	mov	r2, r4
 8011bb8:	462b      	mov	r3, r5
 8011bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bbe:	f7ee fb8d 	bl	80002dc <__adddf3>
 8011bc2:	4642      	mov	r2, r8
 8011bc4:	464b      	mov	r3, r9
 8011bc6:	f7ee fb89 	bl	80002dc <__adddf3>
 8011bca:	4632      	mov	r2, r6
 8011bcc:	463b      	mov	r3, r7
 8011bce:	f7ee fb85 	bl	80002dc <__adddf3>
 8011bd2:	9802      	ldr	r0, [sp, #8]
 8011bd4:	4632      	mov	r2, r6
 8011bd6:	463b      	mov	r3, r7
 8011bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bdc:	f7ee fb7c 	bl	80002d8 <__aeabi_dsub>
 8011be0:	4642      	mov	r2, r8
 8011be2:	464b      	mov	r3, r9
 8011be4:	f7ee fb78 	bl	80002d8 <__aeabi_dsub>
 8011be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bec:	e607      	b.n	80117fe <__ieee754_pow+0x2ce>
 8011bee:	f04f 0a01 	mov.w	sl, #1
 8011bf2:	e6a5      	b.n	8011940 <__ieee754_pow+0x410>
 8011bf4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011c48 <__ieee754_pow+0x718>
 8011bf8:	e613      	b.n	8011822 <__ieee754_pow+0x2f2>
 8011bfa:	bf00      	nop
 8011bfc:	f3af 8000 	nop.w
 8011c00:	4a454eef 	.word	0x4a454eef
 8011c04:	3fca7e28 	.word	0x3fca7e28
 8011c08:	93c9db65 	.word	0x93c9db65
 8011c0c:	3fcd864a 	.word	0x3fcd864a
 8011c10:	a91d4101 	.word	0xa91d4101
 8011c14:	3fd17460 	.word	0x3fd17460
 8011c18:	518f264d 	.word	0x518f264d
 8011c1c:	3fd55555 	.word	0x3fd55555
 8011c20:	db6fabff 	.word	0xdb6fabff
 8011c24:	3fdb6db6 	.word	0x3fdb6db6
 8011c28:	33333303 	.word	0x33333303
 8011c2c:	3fe33333 	.word	0x3fe33333
 8011c30:	e0000000 	.word	0xe0000000
 8011c34:	3feec709 	.word	0x3feec709
 8011c38:	dc3a03fd 	.word	0xdc3a03fd
 8011c3c:	3feec709 	.word	0x3feec709
 8011c40:	145b01f5 	.word	0x145b01f5
 8011c44:	be3e2fe0 	.word	0xbe3e2fe0
 8011c48:	00000000 	.word	0x00000000
 8011c4c:	3ff00000 	.word	0x3ff00000
 8011c50:	43400000 	.word	0x43400000
 8011c54:	0003988e 	.word	0x0003988e
 8011c58:	000bb679 	.word	0x000bb679
 8011c5c:	08013a98 	.word	0x08013a98
 8011c60:	3ff00000 	.word	0x3ff00000
 8011c64:	40080000 	.word	0x40080000
 8011c68:	08013ab8 	.word	0x08013ab8
 8011c6c:	08013aa8 	.word	0x08013aa8
 8011c70:	a3b4      	add	r3, pc, #720	; (adr r3, 8011f44 <__ieee754_pow+0xa14>)
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	4640      	mov	r0, r8
 8011c78:	4649      	mov	r1, r9
 8011c7a:	f7ee fb2f 	bl	80002dc <__adddf3>
 8011c7e:	4622      	mov	r2, r4
 8011c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c84:	462b      	mov	r3, r5
 8011c86:	4630      	mov	r0, r6
 8011c88:	4639      	mov	r1, r7
 8011c8a:	f7ee fb25 	bl	80002d8 <__aeabi_dsub>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c96:	f7ee ff67 	bl	8000b68 <__aeabi_dcmpgt>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	f47f adfe 	bne.w	801189c <__ieee754_pow+0x36c>
 8011ca0:	4aa3      	ldr	r2, [pc, #652]	; (8011f30 <__ieee754_pow+0xa00>)
 8011ca2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	f340 810a 	ble.w	8011ec0 <__ieee754_pow+0x990>
 8011cac:	151b      	asrs	r3, r3, #20
 8011cae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011cb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011cb6:	fa4a f303 	asr.w	r3, sl, r3
 8011cba:	445b      	add	r3, fp
 8011cbc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011cc0:	4e9c      	ldr	r6, [pc, #624]	; (8011f34 <__ieee754_pow+0xa04>)
 8011cc2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011cc6:	4116      	asrs	r6, r2
 8011cc8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011ccc:	2000      	movs	r0, #0
 8011cce:	ea23 0106 	bic.w	r1, r3, r6
 8011cd2:	f1c2 0214 	rsb	r2, r2, #20
 8011cd6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011cda:	fa4a fa02 	asr.w	sl, sl, r2
 8011cde:	f1bb 0f00 	cmp.w	fp, #0
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	4629      	mov	r1, r5
 8011cea:	bfb8      	it	lt
 8011cec:	f1ca 0a00 	rsblt	sl, sl, #0
 8011cf0:	f7ee faf2 	bl	80002d8 <__aeabi_dsub>
 8011cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8011cf8:	4642      	mov	r2, r8
 8011cfa:	464b      	mov	r3, r9
 8011cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d00:	f7ee faec 	bl	80002dc <__adddf3>
 8011d04:	2000      	movs	r0, #0
 8011d06:	a378      	add	r3, pc, #480	; (adr r3, 8011ee8 <__ieee754_pow+0x9b8>)
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	460d      	mov	r5, r1
 8011d10:	f7ee fc9a 	bl	8000648 <__aeabi_dmul>
 8011d14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d18:	4606      	mov	r6, r0
 8011d1a:	460f      	mov	r7, r1
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f7ee fada 	bl	80002d8 <__aeabi_dsub>
 8011d24:	4602      	mov	r2, r0
 8011d26:	460b      	mov	r3, r1
 8011d28:	4640      	mov	r0, r8
 8011d2a:	4649      	mov	r1, r9
 8011d2c:	f7ee fad4 	bl	80002d8 <__aeabi_dsub>
 8011d30:	a36f      	add	r3, pc, #444	; (adr r3, 8011ef0 <__ieee754_pow+0x9c0>)
 8011d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d36:	f7ee fc87 	bl	8000648 <__aeabi_dmul>
 8011d3a:	a36f      	add	r3, pc, #444	; (adr r3, 8011ef8 <__ieee754_pow+0x9c8>)
 8011d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d40:	4680      	mov	r8, r0
 8011d42:	4689      	mov	r9, r1
 8011d44:	4620      	mov	r0, r4
 8011d46:	4629      	mov	r1, r5
 8011d48:	f7ee fc7e 	bl	8000648 <__aeabi_dmul>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	4640      	mov	r0, r8
 8011d52:	4649      	mov	r1, r9
 8011d54:	f7ee fac2 	bl	80002dc <__adddf3>
 8011d58:	4604      	mov	r4, r0
 8011d5a:	460d      	mov	r5, r1
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4630      	mov	r0, r6
 8011d62:	4639      	mov	r1, r7
 8011d64:	f7ee faba 	bl	80002dc <__adddf3>
 8011d68:	4632      	mov	r2, r6
 8011d6a:	463b      	mov	r3, r7
 8011d6c:	4680      	mov	r8, r0
 8011d6e:	4689      	mov	r9, r1
 8011d70:	f7ee fab2 	bl	80002d8 <__aeabi_dsub>
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	4620      	mov	r0, r4
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	f7ee faac 	bl	80002d8 <__aeabi_dsub>
 8011d80:	4642      	mov	r2, r8
 8011d82:	4606      	mov	r6, r0
 8011d84:	460f      	mov	r7, r1
 8011d86:	464b      	mov	r3, r9
 8011d88:	4640      	mov	r0, r8
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	f7ee fc5c 	bl	8000648 <__aeabi_dmul>
 8011d90:	a35b      	add	r3, pc, #364	; (adr r3, 8011f00 <__ieee754_pow+0x9d0>)
 8011d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d96:	4604      	mov	r4, r0
 8011d98:	460d      	mov	r5, r1
 8011d9a:	f7ee fc55 	bl	8000648 <__aeabi_dmul>
 8011d9e:	a35a      	add	r3, pc, #360	; (adr r3, 8011f08 <__ieee754_pow+0x9d8>)
 8011da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da4:	f7ee fa98 	bl	80002d8 <__aeabi_dsub>
 8011da8:	4622      	mov	r2, r4
 8011daa:	462b      	mov	r3, r5
 8011dac:	f7ee fc4c 	bl	8000648 <__aeabi_dmul>
 8011db0:	a357      	add	r3, pc, #348	; (adr r3, 8011f10 <__ieee754_pow+0x9e0>)
 8011db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db6:	f7ee fa91 	bl	80002dc <__adddf3>
 8011dba:	4622      	mov	r2, r4
 8011dbc:	462b      	mov	r3, r5
 8011dbe:	f7ee fc43 	bl	8000648 <__aeabi_dmul>
 8011dc2:	a355      	add	r3, pc, #340	; (adr r3, 8011f18 <__ieee754_pow+0x9e8>)
 8011dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc8:	f7ee fa86 	bl	80002d8 <__aeabi_dsub>
 8011dcc:	4622      	mov	r2, r4
 8011dce:	462b      	mov	r3, r5
 8011dd0:	f7ee fc3a 	bl	8000648 <__aeabi_dmul>
 8011dd4:	a352      	add	r3, pc, #328	; (adr r3, 8011f20 <__ieee754_pow+0x9f0>)
 8011dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dda:	f7ee fa7f 	bl	80002dc <__adddf3>
 8011dde:	4622      	mov	r2, r4
 8011de0:	462b      	mov	r3, r5
 8011de2:	f7ee fc31 	bl	8000648 <__aeabi_dmul>
 8011de6:	4602      	mov	r2, r0
 8011de8:	460b      	mov	r3, r1
 8011dea:	4640      	mov	r0, r8
 8011dec:	4649      	mov	r1, r9
 8011dee:	f7ee fa73 	bl	80002d8 <__aeabi_dsub>
 8011df2:	4604      	mov	r4, r0
 8011df4:	460d      	mov	r5, r1
 8011df6:	4602      	mov	r2, r0
 8011df8:	460b      	mov	r3, r1
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	f7ee fc23 	bl	8000648 <__aeabi_dmul>
 8011e02:	2200      	movs	r2, #0
 8011e04:	e9cd 0100 	strd	r0, r1, [sp]
 8011e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	4629      	mov	r1, r5
 8011e10:	f7ee fa62 	bl	80002d8 <__aeabi_dsub>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e1c:	f7ee fd3e 	bl	800089c <__aeabi_ddiv>
 8011e20:	4632      	mov	r2, r6
 8011e22:	4604      	mov	r4, r0
 8011e24:	460d      	mov	r5, r1
 8011e26:	463b      	mov	r3, r7
 8011e28:	4640      	mov	r0, r8
 8011e2a:	4649      	mov	r1, r9
 8011e2c:	f7ee fc0c 	bl	8000648 <__aeabi_dmul>
 8011e30:	4632      	mov	r2, r6
 8011e32:	463b      	mov	r3, r7
 8011e34:	f7ee fa52 	bl	80002dc <__adddf3>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	4629      	mov	r1, r5
 8011e40:	f7ee fa4a 	bl	80002d8 <__aeabi_dsub>
 8011e44:	4642      	mov	r2, r8
 8011e46:	464b      	mov	r3, r9
 8011e48:	f7ee fa46 	bl	80002d8 <__aeabi_dsub>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	460b      	mov	r3, r1
 8011e50:	2000      	movs	r0, #0
 8011e52:	4939      	ldr	r1, [pc, #228]	; (8011f38 <__ieee754_pow+0xa08>)
 8011e54:	f7ee fa40 	bl	80002d8 <__aeabi_dsub>
 8011e58:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011e5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	da2f      	bge.n	8011ec6 <__ieee754_pow+0x996>
 8011e66:	4650      	mov	r0, sl
 8011e68:	ec43 2b10 	vmov	d0, r2, r3
 8011e6c:	f000 f9c0 	bl	80121f0 <scalbn>
 8011e70:	ec51 0b10 	vmov	r0, r1, d0
 8011e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e78:	f7ff bbf1 	b.w	801165e <__ieee754_pow+0x12e>
 8011e7c:	4b2f      	ldr	r3, [pc, #188]	; (8011f3c <__ieee754_pow+0xa0c>)
 8011e7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011e82:	429e      	cmp	r6, r3
 8011e84:	f77f af0c 	ble.w	8011ca0 <__ieee754_pow+0x770>
 8011e88:	4b2d      	ldr	r3, [pc, #180]	; (8011f40 <__ieee754_pow+0xa10>)
 8011e8a:	440b      	add	r3, r1
 8011e8c:	4303      	orrs	r3, r0
 8011e8e:	d00b      	beq.n	8011ea8 <__ieee754_pow+0x978>
 8011e90:	a325      	add	r3, pc, #148	; (adr r3, 8011f28 <__ieee754_pow+0x9f8>)
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e9a:	f7ee fbd5 	bl	8000648 <__aeabi_dmul>
 8011e9e:	a322      	add	r3, pc, #136	; (adr r3, 8011f28 <__ieee754_pow+0x9f8>)
 8011ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea4:	f7ff bbdb 	b.w	801165e <__ieee754_pow+0x12e>
 8011ea8:	4622      	mov	r2, r4
 8011eaa:	462b      	mov	r3, r5
 8011eac:	f7ee fa14 	bl	80002d8 <__aeabi_dsub>
 8011eb0:	4642      	mov	r2, r8
 8011eb2:	464b      	mov	r3, r9
 8011eb4:	f7ee fe4e 	bl	8000b54 <__aeabi_dcmpge>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	f43f aef1 	beq.w	8011ca0 <__ieee754_pow+0x770>
 8011ebe:	e7e7      	b.n	8011e90 <__ieee754_pow+0x960>
 8011ec0:	f04f 0a00 	mov.w	sl, #0
 8011ec4:	e718      	b.n	8011cf8 <__ieee754_pow+0x7c8>
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	e7d4      	b.n	8011e74 <__ieee754_pow+0x944>
 8011eca:	2000      	movs	r0, #0
 8011ecc:	491a      	ldr	r1, [pc, #104]	; (8011f38 <__ieee754_pow+0xa08>)
 8011ece:	f7ff bb8f 	b.w	80115f0 <__ieee754_pow+0xc0>
 8011ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ed6:	f7ff bb8b 	b.w	80115f0 <__ieee754_pow+0xc0>
 8011eda:	4630      	mov	r0, r6
 8011edc:	4639      	mov	r1, r7
 8011ede:	f7ff bb87 	b.w	80115f0 <__ieee754_pow+0xc0>
 8011ee2:	4693      	mov	fp, r2
 8011ee4:	f7ff bb98 	b.w	8011618 <__ieee754_pow+0xe8>
 8011ee8:	00000000 	.word	0x00000000
 8011eec:	3fe62e43 	.word	0x3fe62e43
 8011ef0:	fefa39ef 	.word	0xfefa39ef
 8011ef4:	3fe62e42 	.word	0x3fe62e42
 8011ef8:	0ca86c39 	.word	0x0ca86c39
 8011efc:	be205c61 	.word	0xbe205c61
 8011f00:	72bea4d0 	.word	0x72bea4d0
 8011f04:	3e663769 	.word	0x3e663769
 8011f08:	c5d26bf1 	.word	0xc5d26bf1
 8011f0c:	3ebbbd41 	.word	0x3ebbbd41
 8011f10:	af25de2c 	.word	0xaf25de2c
 8011f14:	3f11566a 	.word	0x3f11566a
 8011f18:	16bebd93 	.word	0x16bebd93
 8011f1c:	3f66c16c 	.word	0x3f66c16c
 8011f20:	5555553e 	.word	0x5555553e
 8011f24:	3fc55555 	.word	0x3fc55555
 8011f28:	c2f8f359 	.word	0xc2f8f359
 8011f2c:	01a56e1f 	.word	0x01a56e1f
 8011f30:	3fe00000 	.word	0x3fe00000
 8011f34:	000fffff 	.word	0x000fffff
 8011f38:	3ff00000 	.word	0x3ff00000
 8011f3c:	4090cbff 	.word	0x4090cbff
 8011f40:	3f6f3400 	.word	0x3f6f3400
 8011f44:	652b82fe 	.word	0x652b82fe
 8011f48:	3c971547 	.word	0x3c971547

08011f4c <__ieee754_sqrt>:
 8011f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f50:	4955      	ldr	r1, [pc, #340]	; (80120a8 <__ieee754_sqrt+0x15c>)
 8011f52:	ec55 4b10 	vmov	r4, r5, d0
 8011f56:	43a9      	bics	r1, r5
 8011f58:	462b      	mov	r3, r5
 8011f5a:	462a      	mov	r2, r5
 8011f5c:	d112      	bne.n	8011f84 <__ieee754_sqrt+0x38>
 8011f5e:	ee10 2a10 	vmov	r2, s0
 8011f62:	ee10 0a10 	vmov	r0, s0
 8011f66:	4629      	mov	r1, r5
 8011f68:	f7ee fb6e 	bl	8000648 <__aeabi_dmul>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4620      	mov	r0, r4
 8011f72:	4629      	mov	r1, r5
 8011f74:	f7ee f9b2 	bl	80002dc <__adddf3>
 8011f78:	4604      	mov	r4, r0
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	ec45 4b10 	vmov	d0, r4, r5
 8011f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f84:	2d00      	cmp	r5, #0
 8011f86:	ee10 0a10 	vmov	r0, s0
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	dc0f      	bgt.n	8011fae <__ieee754_sqrt+0x62>
 8011f8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011f92:	4330      	orrs	r0, r6
 8011f94:	d0f2      	beq.n	8011f7c <__ieee754_sqrt+0x30>
 8011f96:	b155      	cbz	r5, 8011fae <__ieee754_sqrt+0x62>
 8011f98:	ee10 2a10 	vmov	r2, s0
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	4629      	mov	r1, r5
 8011fa0:	f7ee f99a 	bl	80002d8 <__aeabi_dsub>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	f7ee fc78 	bl	800089c <__aeabi_ddiv>
 8011fac:	e7e4      	b.n	8011f78 <__ieee754_sqrt+0x2c>
 8011fae:	151b      	asrs	r3, r3, #20
 8011fb0:	d073      	beq.n	801209a <__ieee754_sqrt+0x14e>
 8011fb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011fb6:	07dd      	lsls	r5, r3, #31
 8011fb8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011fbc:	bf48      	it	mi
 8011fbe:	0fc8      	lsrmi	r0, r1, #31
 8011fc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011fc4:	bf44      	itt	mi
 8011fc6:	0049      	lslmi	r1, r1, #1
 8011fc8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011fcc:	2500      	movs	r5, #0
 8011fce:	1058      	asrs	r0, r3, #1
 8011fd0:	0fcb      	lsrs	r3, r1, #31
 8011fd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011fd6:	0049      	lsls	r1, r1, #1
 8011fd8:	2316      	movs	r3, #22
 8011fda:	462c      	mov	r4, r5
 8011fdc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011fe0:	19a7      	adds	r7, r4, r6
 8011fe2:	4297      	cmp	r7, r2
 8011fe4:	bfde      	ittt	le
 8011fe6:	19bc      	addle	r4, r7, r6
 8011fe8:	1bd2      	suble	r2, r2, r7
 8011fea:	19ad      	addle	r5, r5, r6
 8011fec:	0fcf      	lsrs	r7, r1, #31
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011ff4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011ff8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011ffc:	d1f0      	bne.n	8011fe0 <__ieee754_sqrt+0x94>
 8011ffe:	f04f 0c20 	mov.w	ip, #32
 8012002:	469e      	mov	lr, r3
 8012004:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012008:	42a2      	cmp	r2, r4
 801200a:	eb06 070e 	add.w	r7, r6, lr
 801200e:	dc02      	bgt.n	8012016 <__ieee754_sqrt+0xca>
 8012010:	d112      	bne.n	8012038 <__ieee754_sqrt+0xec>
 8012012:	428f      	cmp	r7, r1
 8012014:	d810      	bhi.n	8012038 <__ieee754_sqrt+0xec>
 8012016:	2f00      	cmp	r7, #0
 8012018:	eb07 0e06 	add.w	lr, r7, r6
 801201c:	da42      	bge.n	80120a4 <__ieee754_sqrt+0x158>
 801201e:	f1be 0f00 	cmp.w	lr, #0
 8012022:	db3f      	blt.n	80120a4 <__ieee754_sqrt+0x158>
 8012024:	f104 0801 	add.w	r8, r4, #1
 8012028:	1b12      	subs	r2, r2, r4
 801202a:	428f      	cmp	r7, r1
 801202c:	bf88      	it	hi
 801202e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012032:	1bc9      	subs	r1, r1, r7
 8012034:	4433      	add	r3, r6
 8012036:	4644      	mov	r4, r8
 8012038:	0052      	lsls	r2, r2, #1
 801203a:	f1bc 0c01 	subs.w	ip, ip, #1
 801203e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012042:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012046:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801204a:	d1dd      	bne.n	8012008 <__ieee754_sqrt+0xbc>
 801204c:	430a      	orrs	r2, r1
 801204e:	d006      	beq.n	801205e <__ieee754_sqrt+0x112>
 8012050:	1c5c      	adds	r4, r3, #1
 8012052:	bf13      	iteet	ne
 8012054:	3301      	addne	r3, #1
 8012056:	3501      	addeq	r5, #1
 8012058:	4663      	moveq	r3, ip
 801205a:	f023 0301 	bicne.w	r3, r3, #1
 801205e:	106a      	asrs	r2, r5, #1
 8012060:	085b      	lsrs	r3, r3, #1
 8012062:	07e9      	lsls	r1, r5, #31
 8012064:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012068:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801206c:	bf48      	it	mi
 801206e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012072:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012076:	461c      	mov	r4, r3
 8012078:	e780      	b.n	8011f7c <__ieee754_sqrt+0x30>
 801207a:	0aca      	lsrs	r2, r1, #11
 801207c:	3815      	subs	r0, #21
 801207e:	0549      	lsls	r1, r1, #21
 8012080:	2a00      	cmp	r2, #0
 8012082:	d0fa      	beq.n	801207a <__ieee754_sqrt+0x12e>
 8012084:	02d6      	lsls	r6, r2, #11
 8012086:	d50a      	bpl.n	801209e <__ieee754_sqrt+0x152>
 8012088:	f1c3 0420 	rsb	r4, r3, #32
 801208c:	fa21 f404 	lsr.w	r4, r1, r4
 8012090:	1e5d      	subs	r5, r3, #1
 8012092:	4099      	lsls	r1, r3
 8012094:	4322      	orrs	r2, r4
 8012096:	1b43      	subs	r3, r0, r5
 8012098:	e78b      	b.n	8011fb2 <__ieee754_sqrt+0x66>
 801209a:	4618      	mov	r0, r3
 801209c:	e7f0      	b.n	8012080 <__ieee754_sqrt+0x134>
 801209e:	0052      	lsls	r2, r2, #1
 80120a0:	3301      	adds	r3, #1
 80120a2:	e7ef      	b.n	8012084 <__ieee754_sqrt+0x138>
 80120a4:	46a0      	mov	r8, r4
 80120a6:	e7bf      	b.n	8012028 <__ieee754_sqrt+0xdc>
 80120a8:	7ff00000 	.word	0x7ff00000

080120ac <fabs>:
 80120ac:	ec51 0b10 	vmov	r0, r1, d0
 80120b0:	ee10 2a10 	vmov	r2, s0
 80120b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120b8:	ec43 2b10 	vmov	d0, r2, r3
 80120bc:	4770      	bx	lr

080120be <finite>:
 80120be:	ee10 3a90 	vmov	r3, s1
 80120c2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80120c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80120ca:	0fc0      	lsrs	r0, r0, #31
 80120cc:	4770      	bx	lr

080120ce <matherr>:
 80120ce:	2000      	movs	r0, #0
 80120d0:	4770      	bx	lr
 80120d2:	0000      	movs	r0, r0
 80120d4:	0000      	movs	r0, r0
	...

080120d8 <nan>:
 80120d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80120e0 <nan+0x8>
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop
 80120e0:	00000000 	.word	0x00000000
 80120e4:	7ff80000 	.word	0x7ff80000

080120e8 <rint>:
 80120e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120ea:	ec51 0b10 	vmov	r0, r1, d0
 80120ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80120f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80120f6:	2e13      	cmp	r6, #19
 80120f8:	460b      	mov	r3, r1
 80120fa:	ee10 4a10 	vmov	r4, s0
 80120fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012102:	dc56      	bgt.n	80121b2 <rint+0xca>
 8012104:	2e00      	cmp	r6, #0
 8012106:	da2b      	bge.n	8012160 <rint+0x78>
 8012108:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801210c:	4302      	orrs	r2, r0
 801210e:	d023      	beq.n	8012158 <rint+0x70>
 8012110:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012114:	4302      	orrs	r2, r0
 8012116:	4254      	negs	r4, r2
 8012118:	4314      	orrs	r4, r2
 801211a:	0c4b      	lsrs	r3, r1, #17
 801211c:	0b24      	lsrs	r4, r4, #12
 801211e:	045b      	lsls	r3, r3, #17
 8012120:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012124:	ea44 0103 	orr.w	r1, r4, r3
 8012128:	460b      	mov	r3, r1
 801212a:	492f      	ldr	r1, [pc, #188]	; (80121e8 <rint+0x100>)
 801212c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012130:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012134:	4602      	mov	r2, r0
 8012136:	4639      	mov	r1, r7
 8012138:	4630      	mov	r0, r6
 801213a:	f7ee f8cf 	bl	80002dc <__adddf3>
 801213e:	e9cd 0100 	strd	r0, r1, [sp]
 8012142:	463b      	mov	r3, r7
 8012144:	4632      	mov	r2, r6
 8012146:	e9dd 0100 	ldrd	r0, r1, [sp]
 801214a:	f7ee f8c5 	bl	80002d8 <__aeabi_dsub>
 801214e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012152:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012156:	4639      	mov	r1, r7
 8012158:	ec41 0b10 	vmov	d0, r0, r1
 801215c:	b003      	add	sp, #12
 801215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012160:	4a22      	ldr	r2, [pc, #136]	; (80121ec <rint+0x104>)
 8012162:	4132      	asrs	r2, r6
 8012164:	ea01 0702 	and.w	r7, r1, r2
 8012168:	4307      	orrs	r7, r0
 801216a:	d0f5      	beq.n	8012158 <rint+0x70>
 801216c:	0852      	lsrs	r2, r2, #1
 801216e:	4011      	ands	r1, r2
 8012170:	430c      	orrs	r4, r1
 8012172:	d00b      	beq.n	801218c <rint+0xa4>
 8012174:	ea23 0202 	bic.w	r2, r3, r2
 8012178:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801217c:	2e13      	cmp	r6, #19
 801217e:	fa43 f306 	asr.w	r3, r3, r6
 8012182:	bf0c      	ite	eq
 8012184:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012188:	2400      	movne	r4, #0
 801218a:	4313      	orrs	r3, r2
 801218c:	4916      	ldr	r1, [pc, #88]	; (80121e8 <rint+0x100>)
 801218e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012192:	4622      	mov	r2, r4
 8012194:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012198:	4620      	mov	r0, r4
 801219a:	4629      	mov	r1, r5
 801219c:	f7ee f89e 	bl	80002dc <__adddf3>
 80121a0:	e9cd 0100 	strd	r0, r1, [sp]
 80121a4:	4622      	mov	r2, r4
 80121a6:	462b      	mov	r3, r5
 80121a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ac:	f7ee f894 	bl	80002d8 <__aeabi_dsub>
 80121b0:	e7d2      	b.n	8012158 <rint+0x70>
 80121b2:	2e33      	cmp	r6, #51	; 0x33
 80121b4:	dd07      	ble.n	80121c6 <rint+0xde>
 80121b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80121ba:	d1cd      	bne.n	8012158 <rint+0x70>
 80121bc:	ee10 2a10 	vmov	r2, s0
 80121c0:	f7ee f88c 	bl	80002dc <__adddf3>
 80121c4:	e7c8      	b.n	8012158 <rint+0x70>
 80121c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80121ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121ce:	40f2      	lsrs	r2, r6
 80121d0:	4210      	tst	r0, r2
 80121d2:	d0c1      	beq.n	8012158 <rint+0x70>
 80121d4:	0852      	lsrs	r2, r2, #1
 80121d6:	4210      	tst	r0, r2
 80121d8:	bf1f      	itttt	ne
 80121da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80121de:	ea20 0202 	bicne.w	r2, r0, r2
 80121e2:	4134      	asrne	r4, r6
 80121e4:	4314      	orrne	r4, r2
 80121e6:	e7d1      	b.n	801218c <rint+0xa4>
 80121e8:	08013ac8 	.word	0x08013ac8
 80121ec:	000fffff 	.word	0x000fffff

080121f0 <scalbn>:
 80121f0:	b570      	push	{r4, r5, r6, lr}
 80121f2:	ec55 4b10 	vmov	r4, r5, d0
 80121f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80121fa:	4606      	mov	r6, r0
 80121fc:	462b      	mov	r3, r5
 80121fe:	b9aa      	cbnz	r2, 801222c <scalbn+0x3c>
 8012200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012204:	4323      	orrs	r3, r4
 8012206:	d03b      	beq.n	8012280 <scalbn+0x90>
 8012208:	4b31      	ldr	r3, [pc, #196]	; (80122d0 <scalbn+0xe0>)
 801220a:	4629      	mov	r1, r5
 801220c:	2200      	movs	r2, #0
 801220e:	ee10 0a10 	vmov	r0, s0
 8012212:	f7ee fa19 	bl	8000648 <__aeabi_dmul>
 8012216:	4b2f      	ldr	r3, [pc, #188]	; (80122d4 <scalbn+0xe4>)
 8012218:	429e      	cmp	r6, r3
 801221a:	4604      	mov	r4, r0
 801221c:	460d      	mov	r5, r1
 801221e:	da12      	bge.n	8012246 <scalbn+0x56>
 8012220:	a327      	add	r3, pc, #156	; (adr r3, 80122c0 <scalbn+0xd0>)
 8012222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012226:	f7ee fa0f 	bl	8000648 <__aeabi_dmul>
 801222a:	e009      	b.n	8012240 <scalbn+0x50>
 801222c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012230:	428a      	cmp	r2, r1
 8012232:	d10c      	bne.n	801224e <scalbn+0x5e>
 8012234:	ee10 2a10 	vmov	r2, s0
 8012238:	4620      	mov	r0, r4
 801223a:	4629      	mov	r1, r5
 801223c:	f7ee f84e 	bl	80002dc <__adddf3>
 8012240:	4604      	mov	r4, r0
 8012242:	460d      	mov	r5, r1
 8012244:	e01c      	b.n	8012280 <scalbn+0x90>
 8012246:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801224a:	460b      	mov	r3, r1
 801224c:	3a36      	subs	r2, #54	; 0x36
 801224e:	4432      	add	r2, r6
 8012250:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012254:	428a      	cmp	r2, r1
 8012256:	dd0b      	ble.n	8012270 <scalbn+0x80>
 8012258:	ec45 4b11 	vmov	d1, r4, r5
 801225c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80122c8 <scalbn+0xd8>
 8012260:	f000 f9f0 	bl	8012644 <copysign>
 8012264:	a318      	add	r3, pc, #96	; (adr r3, 80122c8 <scalbn+0xd8>)
 8012266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226a:	ec51 0b10 	vmov	r0, r1, d0
 801226e:	e7da      	b.n	8012226 <scalbn+0x36>
 8012270:	2a00      	cmp	r2, #0
 8012272:	dd08      	ble.n	8012286 <scalbn+0x96>
 8012274:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012278:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801227c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012280:	ec45 4b10 	vmov	d0, r4, r5
 8012284:	bd70      	pop	{r4, r5, r6, pc}
 8012286:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801228a:	da0d      	bge.n	80122a8 <scalbn+0xb8>
 801228c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012290:	429e      	cmp	r6, r3
 8012292:	ec45 4b11 	vmov	d1, r4, r5
 8012296:	dce1      	bgt.n	801225c <scalbn+0x6c>
 8012298:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80122c0 <scalbn+0xd0>
 801229c:	f000 f9d2 	bl	8012644 <copysign>
 80122a0:	a307      	add	r3, pc, #28	; (adr r3, 80122c0 <scalbn+0xd0>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	e7e0      	b.n	801226a <scalbn+0x7a>
 80122a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122ac:	3236      	adds	r2, #54	; 0x36
 80122ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80122b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122b6:	4620      	mov	r0, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	2200      	movs	r2, #0
 80122bc:	4b06      	ldr	r3, [pc, #24]	; (80122d8 <scalbn+0xe8>)
 80122be:	e7b2      	b.n	8012226 <scalbn+0x36>
 80122c0:	c2f8f359 	.word	0xc2f8f359
 80122c4:	01a56e1f 	.word	0x01a56e1f
 80122c8:	8800759c 	.word	0x8800759c
 80122cc:	7e37e43c 	.word	0x7e37e43c
 80122d0:	43500000 	.word	0x43500000
 80122d4:	ffff3cb0 	.word	0xffff3cb0
 80122d8:	3c900000 	.word	0x3c900000
 80122dc:	00000000 	.word	0x00000000

080122e0 <__ieee754_log>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	ec51 0b10 	vmov	r0, r1, d0
 80122e8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80122ec:	b087      	sub	sp, #28
 80122ee:	460d      	mov	r5, r1
 80122f0:	da27      	bge.n	8012342 <__ieee754_log+0x62>
 80122f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80122f6:	4303      	orrs	r3, r0
 80122f8:	ee10 2a10 	vmov	r2, s0
 80122fc:	d10a      	bne.n	8012314 <__ieee754_log+0x34>
 80122fe:	49cc      	ldr	r1, [pc, #816]	; (8012630 <__ieee754_log+0x350>)
 8012300:	2200      	movs	r2, #0
 8012302:	2300      	movs	r3, #0
 8012304:	2000      	movs	r0, #0
 8012306:	f7ee fac9 	bl	800089c <__aeabi_ddiv>
 801230a:	ec41 0b10 	vmov	d0, r0, r1
 801230e:	b007      	add	sp, #28
 8012310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012314:	2900      	cmp	r1, #0
 8012316:	da05      	bge.n	8012324 <__ieee754_log+0x44>
 8012318:	460b      	mov	r3, r1
 801231a:	f7ed ffdd 	bl	80002d8 <__aeabi_dsub>
 801231e:	2200      	movs	r2, #0
 8012320:	2300      	movs	r3, #0
 8012322:	e7f0      	b.n	8012306 <__ieee754_log+0x26>
 8012324:	4bc3      	ldr	r3, [pc, #780]	; (8012634 <__ieee754_log+0x354>)
 8012326:	2200      	movs	r2, #0
 8012328:	f7ee f98e 	bl	8000648 <__aeabi_dmul>
 801232c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012330:	460d      	mov	r5, r1
 8012332:	4ac1      	ldr	r2, [pc, #772]	; (8012638 <__ieee754_log+0x358>)
 8012334:	4295      	cmp	r5, r2
 8012336:	dd06      	ble.n	8012346 <__ieee754_log+0x66>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	f7ed ffce 	bl	80002dc <__adddf3>
 8012340:	e7e3      	b.n	801230a <__ieee754_log+0x2a>
 8012342:	2300      	movs	r3, #0
 8012344:	e7f5      	b.n	8012332 <__ieee754_log+0x52>
 8012346:	152c      	asrs	r4, r5, #20
 8012348:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801234c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012350:	441c      	add	r4, r3
 8012352:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012356:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801235e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012362:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012366:	ea42 0105 	orr.w	r1, r2, r5
 801236a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801236e:	2200      	movs	r2, #0
 8012370:	4bb2      	ldr	r3, [pc, #712]	; (801263c <__ieee754_log+0x35c>)
 8012372:	f7ed ffb1 	bl	80002d8 <__aeabi_dsub>
 8012376:	1cab      	adds	r3, r5, #2
 8012378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801237c:	2b02      	cmp	r3, #2
 801237e:	4682      	mov	sl, r0
 8012380:	468b      	mov	fp, r1
 8012382:	f04f 0200 	mov.w	r2, #0
 8012386:	dc53      	bgt.n	8012430 <__ieee754_log+0x150>
 8012388:	2300      	movs	r3, #0
 801238a:	f7ee fbc5 	bl	8000b18 <__aeabi_dcmpeq>
 801238e:	b1d0      	cbz	r0, 80123c6 <__ieee754_log+0xe6>
 8012390:	2c00      	cmp	r4, #0
 8012392:	f000 8120 	beq.w	80125d6 <__ieee754_log+0x2f6>
 8012396:	4620      	mov	r0, r4
 8012398:	f7ee f8ec 	bl	8000574 <__aeabi_i2d>
 801239c:	a390      	add	r3, pc, #576	; (adr r3, 80125e0 <__ieee754_log+0x300>)
 801239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a2:	4606      	mov	r6, r0
 80123a4:	460f      	mov	r7, r1
 80123a6:	f7ee f94f 	bl	8000648 <__aeabi_dmul>
 80123aa:	a38f      	add	r3, pc, #572	; (adr r3, 80125e8 <__ieee754_log+0x308>)
 80123ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b0:	4604      	mov	r4, r0
 80123b2:	460d      	mov	r5, r1
 80123b4:	4630      	mov	r0, r6
 80123b6:	4639      	mov	r1, r7
 80123b8:	f7ee f946 	bl	8000648 <__aeabi_dmul>
 80123bc:	4602      	mov	r2, r0
 80123be:	460b      	mov	r3, r1
 80123c0:	4620      	mov	r0, r4
 80123c2:	4629      	mov	r1, r5
 80123c4:	e7ba      	b.n	801233c <__ieee754_log+0x5c>
 80123c6:	a38a      	add	r3, pc, #552	; (adr r3, 80125f0 <__ieee754_log+0x310>)
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	4650      	mov	r0, sl
 80123ce:	4659      	mov	r1, fp
 80123d0:	f7ee f93a 	bl	8000648 <__aeabi_dmul>
 80123d4:	4602      	mov	r2, r0
 80123d6:	460b      	mov	r3, r1
 80123d8:	2000      	movs	r0, #0
 80123da:	4999      	ldr	r1, [pc, #612]	; (8012640 <__ieee754_log+0x360>)
 80123dc:	f7ed ff7c 	bl	80002d8 <__aeabi_dsub>
 80123e0:	4652      	mov	r2, sl
 80123e2:	4606      	mov	r6, r0
 80123e4:	460f      	mov	r7, r1
 80123e6:	465b      	mov	r3, fp
 80123e8:	4650      	mov	r0, sl
 80123ea:	4659      	mov	r1, fp
 80123ec:	f7ee f92c 	bl	8000648 <__aeabi_dmul>
 80123f0:	4602      	mov	r2, r0
 80123f2:	460b      	mov	r3, r1
 80123f4:	4630      	mov	r0, r6
 80123f6:	4639      	mov	r1, r7
 80123f8:	f7ee f926 	bl	8000648 <__aeabi_dmul>
 80123fc:	4606      	mov	r6, r0
 80123fe:	460f      	mov	r7, r1
 8012400:	b914      	cbnz	r4, 8012408 <__ieee754_log+0x128>
 8012402:	4632      	mov	r2, r6
 8012404:	463b      	mov	r3, r7
 8012406:	e0a0      	b.n	801254a <__ieee754_log+0x26a>
 8012408:	4620      	mov	r0, r4
 801240a:	f7ee f8b3 	bl	8000574 <__aeabi_i2d>
 801240e:	a374      	add	r3, pc, #464	; (adr r3, 80125e0 <__ieee754_log+0x300>)
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	4680      	mov	r8, r0
 8012416:	4689      	mov	r9, r1
 8012418:	f7ee f916 	bl	8000648 <__aeabi_dmul>
 801241c:	a372      	add	r3, pc, #456	; (adr r3, 80125e8 <__ieee754_log+0x308>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	4604      	mov	r4, r0
 8012424:	460d      	mov	r5, r1
 8012426:	4640      	mov	r0, r8
 8012428:	4649      	mov	r1, r9
 801242a:	f7ee f90d 	bl	8000648 <__aeabi_dmul>
 801242e:	e0a5      	b.n	801257c <__ieee754_log+0x29c>
 8012430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012434:	f7ed ff52 	bl	80002dc <__adddf3>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4650      	mov	r0, sl
 801243e:	4659      	mov	r1, fp
 8012440:	f7ee fa2c 	bl	800089c <__aeabi_ddiv>
 8012444:	e9cd 0100 	strd	r0, r1, [sp]
 8012448:	4620      	mov	r0, r4
 801244a:	f7ee f893 	bl	8000574 <__aeabi_i2d>
 801244e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012456:	4610      	mov	r0, r2
 8012458:	4619      	mov	r1, r3
 801245a:	f7ee f8f5 	bl	8000648 <__aeabi_dmul>
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012466:	f7ee f8ef 	bl	8000648 <__aeabi_dmul>
 801246a:	a363      	add	r3, pc, #396	; (adr r3, 80125f8 <__ieee754_log+0x318>)
 801246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012470:	4680      	mov	r8, r0
 8012472:	4689      	mov	r9, r1
 8012474:	f7ee f8e8 	bl	8000648 <__aeabi_dmul>
 8012478:	a361      	add	r3, pc, #388	; (adr r3, 8012600 <__ieee754_log+0x320>)
 801247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247e:	f7ed ff2d 	bl	80002dc <__adddf3>
 8012482:	4642      	mov	r2, r8
 8012484:	464b      	mov	r3, r9
 8012486:	f7ee f8df 	bl	8000648 <__aeabi_dmul>
 801248a:	a35f      	add	r3, pc, #380	; (adr r3, 8012608 <__ieee754_log+0x328>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	f7ed ff24 	bl	80002dc <__adddf3>
 8012494:	4642      	mov	r2, r8
 8012496:	464b      	mov	r3, r9
 8012498:	f7ee f8d6 	bl	8000648 <__aeabi_dmul>
 801249c:	a35c      	add	r3, pc, #368	; (adr r3, 8012610 <__ieee754_log+0x330>)
 801249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a2:	f7ed ff1b 	bl	80002dc <__adddf3>
 80124a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124aa:	f7ee f8cd 	bl	8000648 <__aeabi_dmul>
 80124ae:	a35a      	add	r3, pc, #360	; (adr r3, 8012618 <__ieee754_log+0x338>)
 80124b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124b8:	4640      	mov	r0, r8
 80124ba:	4649      	mov	r1, r9
 80124bc:	f7ee f8c4 	bl	8000648 <__aeabi_dmul>
 80124c0:	a357      	add	r3, pc, #348	; (adr r3, 8012620 <__ieee754_log+0x340>)
 80124c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c6:	f7ed ff09 	bl	80002dc <__adddf3>
 80124ca:	4642      	mov	r2, r8
 80124cc:	464b      	mov	r3, r9
 80124ce:	f7ee f8bb 	bl	8000648 <__aeabi_dmul>
 80124d2:	a355      	add	r3, pc, #340	; (adr r3, 8012628 <__ieee754_log+0x348>)
 80124d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d8:	f7ed ff00 	bl	80002dc <__adddf3>
 80124dc:	4642      	mov	r2, r8
 80124de:	464b      	mov	r3, r9
 80124e0:	f7ee f8b2 	bl	8000648 <__aeabi_dmul>
 80124e4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80124e8:	4602      	mov	r2, r0
 80124ea:	460b      	mov	r3, r1
 80124ec:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80124f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124f4:	f7ed fef2 	bl	80002dc <__adddf3>
 80124f8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80124fc:	3551      	adds	r5, #81	; 0x51
 80124fe:	4335      	orrs	r5, r6
 8012500:	2d00      	cmp	r5, #0
 8012502:	4680      	mov	r8, r0
 8012504:	4689      	mov	r9, r1
 8012506:	dd48      	ble.n	801259a <__ieee754_log+0x2ba>
 8012508:	2200      	movs	r2, #0
 801250a:	4b4d      	ldr	r3, [pc, #308]	; (8012640 <__ieee754_log+0x360>)
 801250c:	4650      	mov	r0, sl
 801250e:	4659      	mov	r1, fp
 8012510:	f7ee f89a 	bl	8000648 <__aeabi_dmul>
 8012514:	4652      	mov	r2, sl
 8012516:	465b      	mov	r3, fp
 8012518:	f7ee f896 	bl	8000648 <__aeabi_dmul>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4606      	mov	r6, r0
 8012522:	460f      	mov	r7, r1
 8012524:	4640      	mov	r0, r8
 8012526:	4649      	mov	r1, r9
 8012528:	f7ed fed8 	bl	80002dc <__adddf3>
 801252c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012530:	f7ee f88a 	bl	8000648 <__aeabi_dmul>
 8012534:	4680      	mov	r8, r0
 8012536:	4689      	mov	r9, r1
 8012538:	b964      	cbnz	r4, 8012554 <__ieee754_log+0x274>
 801253a:	4602      	mov	r2, r0
 801253c:	460b      	mov	r3, r1
 801253e:	4630      	mov	r0, r6
 8012540:	4639      	mov	r1, r7
 8012542:	f7ed fec9 	bl	80002d8 <__aeabi_dsub>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	4650      	mov	r0, sl
 801254c:	4659      	mov	r1, fp
 801254e:	f7ed fec3 	bl	80002d8 <__aeabi_dsub>
 8012552:	e6da      	b.n	801230a <__ieee754_log+0x2a>
 8012554:	a322      	add	r3, pc, #136	; (adr r3, 80125e0 <__ieee754_log+0x300>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255e:	f7ee f873 	bl	8000648 <__aeabi_dmul>
 8012562:	a321      	add	r3, pc, #132	; (adr r3, 80125e8 <__ieee754_log+0x308>)
 8012564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012568:	4604      	mov	r4, r0
 801256a:	460d      	mov	r5, r1
 801256c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012570:	f7ee f86a 	bl	8000648 <__aeabi_dmul>
 8012574:	4642      	mov	r2, r8
 8012576:	464b      	mov	r3, r9
 8012578:	f7ed feb0 	bl	80002dc <__adddf3>
 801257c:	4602      	mov	r2, r0
 801257e:	460b      	mov	r3, r1
 8012580:	4630      	mov	r0, r6
 8012582:	4639      	mov	r1, r7
 8012584:	f7ed fea8 	bl	80002d8 <__aeabi_dsub>
 8012588:	4652      	mov	r2, sl
 801258a:	465b      	mov	r3, fp
 801258c:	f7ed fea4 	bl	80002d8 <__aeabi_dsub>
 8012590:	4602      	mov	r2, r0
 8012592:	460b      	mov	r3, r1
 8012594:	4620      	mov	r0, r4
 8012596:	4629      	mov	r1, r5
 8012598:	e7d9      	b.n	801254e <__ieee754_log+0x26e>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	4650      	mov	r0, sl
 80125a0:	4659      	mov	r1, fp
 80125a2:	f7ed fe99 	bl	80002d8 <__aeabi_dsub>
 80125a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125aa:	f7ee f84d 	bl	8000648 <__aeabi_dmul>
 80125ae:	4606      	mov	r6, r0
 80125b0:	460f      	mov	r7, r1
 80125b2:	2c00      	cmp	r4, #0
 80125b4:	f43f af25 	beq.w	8012402 <__ieee754_log+0x122>
 80125b8:	a309      	add	r3, pc, #36	; (adr r3, 80125e0 <__ieee754_log+0x300>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125c2:	f7ee f841 	bl	8000648 <__aeabi_dmul>
 80125c6:	a308      	add	r3, pc, #32	; (adr r3, 80125e8 <__ieee754_log+0x308>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	4604      	mov	r4, r0
 80125ce:	460d      	mov	r5, r1
 80125d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125d4:	e729      	b.n	801242a <__ieee754_log+0x14a>
 80125d6:	2000      	movs	r0, #0
 80125d8:	2100      	movs	r1, #0
 80125da:	e696      	b.n	801230a <__ieee754_log+0x2a>
 80125dc:	f3af 8000 	nop.w
 80125e0:	fee00000 	.word	0xfee00000
 80125e4:	3fe62e42 	.word	0x3fe62e42
 80125e8:	35793c76 	.word	0x35793c76
 80125ec:	3dea39ef 	.word	0x3dea39ef
 80125f0:	55555555 	.word	0x55555555
 80125f4:	3fd55555 	.word	0x3fd55555
 80125f8:	df3e5244 	.word	0xdf3e5244
 80125fc:	3fc2f112 	.word	0x3fc2f112
 8012600:	96cb03de 	.word	0x96cb03de
 8012604:	3fc74664 	.word	0x3fc74664
 8012608:	94229359 	.word	0x94229359
 801260c:	3fd24924 	.word	0x3fd24924
 8012610:	55555593 	.word	0x55555593
 8012614:	3fe55555 	.word	0x3fe55555
 8012618:	d078c69f 	.word	0xd078c69f
 801261c:	3fc39a09 	.word	0x3fc39a09
 8012620:	1d8e78af 	.word	0x1d8e78af
 8012624:	3fcc71c5 	.word	0x3fcc71c5
 8012628:	9997fa04 	.word	0x9997fa04
 801262c:	3fd99999 	.word	0x3fd99999
 8012630:	c3500000 	.word	0xc3500000
 8012634:	43500000 	.word	0x43500000
 8012638:	7fefffff 	.word	0x7fefffff
 801263c:	3ff00000 	.word	0x3ff00000
 8012640:	3fe00000 	.word	0x3fe00000

08012644 <copysign>:
 8012644:	ec51 0b10 	vmov	r0, r1, d0
 8012648:	ee11 0a90 	vmov	r0, s3
 801264c:	ee10 2a10 	vmov	r2, s0
 8012650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012654:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012658:	ea41 0300 	orr.w	r3, r1, r0
 801265c:	ec43 2b10 	vmov	d0, r2, r3
 8012660:	4770      	bx	lr
	...

08012664 <_init>:
 8012664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012666:	bf00      	nop
 8012668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801266a:	bc08      	pop	{r3}
 801266c:	469e      	mov	lr, r3
 801266e:	4770      	bx	lr

08012670 <_fini>:
 8012670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012672:	bf00      	nop
 8012674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012676:	bc08      	pop	{r3}
 8012678:	469e      	mov	lr, r3
 801267a:	4770      	bx	lr
