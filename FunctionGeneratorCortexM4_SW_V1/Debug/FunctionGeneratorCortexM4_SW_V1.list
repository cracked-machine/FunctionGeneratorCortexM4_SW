
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013384  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c0  08013568  08013568  00023568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014928  08014928  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  08014928  08014928  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014928  08014928  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014928  08014928  00024928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801492c  0801492c  0002492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  08014930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  20001e08  08016738  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  08016738  00032930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046f27  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b00  00000000  00000000  00078d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  00080860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e00  00000000  00000000  00082ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035623  00000000  00000000  000848c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f2b4  00000000  00000000  000b9ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012681b  00000000  00000000  000e9197  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020f9b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009844  00000000  00000000  0020fa30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801354c 	.word	0x0801354c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	0801354c 	.word	0x0801354c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fcba 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f902 	bl	8000f1c <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08013568 	.word	0x08013568

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fcef 	bl	800e70a <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e f945 	bl	800efbc <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d ff27 	bl	800eb88 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00d fc96 	bl	800e688 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fb70 	bl	8008444 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb9a 	bl	800149c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08013574 	.word	0x08013574

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f003 fefd 	bl	8004b78 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f003 fef8 	bl	8004b78 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e07d      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 feb1 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e079      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fead 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e075      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 fea9 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e071      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fcf8 	bl	80047a4 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fcf3 	bl	80047a4 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e062      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f91c 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000dd4:	e05e      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f918 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000ddc:	e05a      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f914 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000de4:	e056      	b.n	8000e94 <DM_UpdateDisplay+0x120>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 fdd5 	bl	8004994 <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 fdd0 	bl	8004994 <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e047      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fdd5 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e0a:	e043      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdd1 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e12:	e03f      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdcd 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e1a:	e03b      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fcb6 	bl	800478c <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d020      	beq.n	8000e68 <DM_UpdateDisplay+0xf4>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fcb1 	bl	800478c <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d82f      	bhi.n	8000e92 <DM_UpdateDisplay+0x11e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e61 	.word	0x08000e61
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fb8b 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e4e:	e021      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fb87 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e56:	e01d      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fb83 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e5e:	e019      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb7f 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e66:	e015      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e68:	f002 fffe 	bl	8003e68 <BiasMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <DM_UpdateDisplay+0x106>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff30 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e78:	e00c      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <DM_UpdateDisplay+0x198>)
 8000e8c:	f00d fbfc 	bl	800e688 <ILI9341_Draw_Text>
 8000e90:	e000      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				break;
 8000e92:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00e facd 	bl	800f440 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ea6:	f004 f90d 	bl	80050c4 <BO_GetOutputBias>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <DM_UpdateDisplay+0x19c>)
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	f00e ffa4 	bl	800fe00 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	220a      	movs	r2, #10
 8000eca:	21dc      	movs	r1, #220	; 0xdc
 8000ecc:	f00d fbdc 	bl	800e688 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222e      	movs	r2, #46	; 0x2e
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00e fab0 	bl	800f440 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <DM_UpdateDisplay+0x1a0>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000ee8:	2132      	movs	r1, #50	; 0x32
 8000eea:	f00e ff89 	bl	800fe00 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2214      	movs	r2, #20
 8000efe:	21dc      	movs	r1, #220	; 0xdc
 8000f00:	f00d fbc2 	bl	800e688 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	; 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08013584 	.word	0x08013584
 8000f10:	080135a8 	.word	0x080135a8
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	080135b8 	.word	0x080135b8

08000f1c <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b09f      	sub	sp, #124	; 0x7c
 8000f20:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f3a:	238c      	movs	r3, #140	; 0x8c
 8000f3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f58:	23af      	movs	r3, #175	; 0xaf
 8000f5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f76:	238a      	movs	r3, #138	; 0x8a
 8000f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <DM_DisplayFormattedOutput+0x378>)
 8000f84:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f94:	23a1      	movs	r3, #161	; 0xa1
 8000f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f9a:	2382      	movs	r3, #130	; 0x82
 8000f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <DM_DisplayFormattedOutput+0x37c>)
 8000fbc:	f00d fb64 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	2103      	movs	r1, #3
 8000fda:	48b0      	ldr	r0, [pc, #704]	; (800129c <DM_DisplayFormattedOutput+0x380>)
 8000fdc:	f00d fb54 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fe0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <DM_DisplayFormattedOutput+0x384>)
 8000ffc:	f00d fb44 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001000:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800100a:	b29b      	uxth	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001016:	460a      	mov	r2, r1
 8001018:	2103      	movs	r1, #3
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <DM_DisplayFormattedOutput+0x388>)
 800101c:	f00d fb34 	bl	800e688 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001020:	f005 f9e6 	bl	80063f0 <SM_GetOutputInHertz>
 8001024:	ee10 3a10 	vmov	r3, s0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fab5 	bl	8000598 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001036:	e9cd 3400 	strd	r3, r4, [sp]
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <DM_DisplayFormattedOutput+0x38c>)
 800103c:	210f      	movs	r1, #15
 800103e:	f00e fedf 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001042:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800104c:	b29c      	uxth	r4, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001062:	4622      	mov	r2, r4
 8001064:	f00d fb10 	bl	800e688 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001068:	2000      	movs	r0, #0
 800106a:	f004 ff29 	bl	8005ec0 <SM_GetOutputChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a86      	ldr	r2, [pc, #536]	; (80012ac <DM_DisplayFormattedOutput+0x390>)
 8001094:	2112      	movs	r1, #18
 8001096:	f00e feb3 	bl	800fe00 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa7a 	bl	8000598 <__aeabi_f2d>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <DM_DisplayFormattedOutput+0x394>)
 80010b2:	2114      	movs	r1, #20
 80010b4:	f00e fea4 	bl	800fe00 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b299      	uxth	r1, r3
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d8:	4622      	mov	r2, r4
 80010da:	f00d fad5 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010e8:	b29c      	uxth	r4, r3
 80010ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00d fac2 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001104:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	b299      	uxth	r1, r3
 800110e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001112:	b298      	uxth	r0, r3
 8001114:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001124:	4602      	mov	r2, r0
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <DM_DisplayFormattedOutput+0x398>)
 8001128:	f00d faae 	bl	800e688 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800112c:	f003 ffca 	bl	80050c4 <BO_GetOutputBias>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <DM_DisplayFormattedOutput+0x222>
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
 800113c:	e00b      	b.n	8001156 <DM_DisplayFormattedOutput+0x23a>
 800113e:	f003 ffc1 	bl	80050c4 <BO_GetOutputBias>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001156:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001158:	f7ff fa1e 	bl	8000598 <__aeabi_f2d>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 3400 	strd	r3, r4, [sp]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <DM_DisplayFormattedOutput+0x39c>)
 800116a:	210c      	movs	r1, #12
 800116c:	f00e fe48 	bl	800fe00 <sniprintf>
	if(BO_GetBiasPolarity())
 8001170:	f003 ff48 	bl	8005004 <BO_GetBiasPolarity>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d022      	beq.n	80011c0 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <DM_DisplayFormattedOutput+0x3a0>)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00e fe68 	bl	800fe68 <strcat>
 8001198:	4604      	mov	r4, r0
 800119a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119e:	b299      	uxth	r1, r3
 80011a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011a4:	b298      	uxth	r0, r3
 80011a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b6:	4602      	mov	r2, r0
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00d fa65 	bl	800e688 <ILI9341_Draw_Text>
 80011be:	e021      	b.n	8001204 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <DM_DisplayFormattedOutput+0x3a4>)
 80011c2:	463b      	mov	r3, r7
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	0c12      	lsrs	r2, r2, #16
 80011ce:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00e fe45 	bl	800fe68 <strcat>
 80011de:	4604      	mov	r4, r0
 80011e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ea:	b298      	uxth	r0, r3
 80011ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011fc:	4602      	mov	r2, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f00d fa42 	bl	800e688 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001204:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	22aa      	movs	r2, #170	; 0xaa
 8001216:	2103      	movs	r1, #3
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <DM_DisplayFormattedOutput+0x3a8>)
 800121a:	f00d fa35 	bl	800e688 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800121e:	2000      	movs	r0, #0
 8001220:	f004 fe4e 	bl	8005ec0 <SM_GetOutputChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001234:	2b06      	cmp	r3, #6
 8001236:	f200 8091 	bhi.w	800135c <DM_DisplayFormattedOutput+0x440>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DM_DisplayFormattedOutput+0x324>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001279 	.word	0x08001279
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001309 	.word	0x08001309
 8001254:	08001325 	.word	0x08001325
 8001258:	08001341 	.word	0x08001341
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800125c:	233c      	movs	r3, #60	; 0x3c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <DM_DisplayFormattedOutput+0x3ac>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f240 23fd 	movw	r3, #765	; 0x2fd
 800126c:	2203      	movs	r2, #3
 800126e:	218c      	movs	r1, #140	; 0x8c
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f00d f865 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001276:	e071      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <DM_DisplayFormattedOutput+0x3b0>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001288:	2203      	movs	r2, #3
 800128a:	21a0      	movs	r1, #160	; 0xa0
 800128c:	2050      	movs	r0, #80	; 0x50
 800128e:	f00d f857 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001292:	e063      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	080135c8 	.word	0x080135c8
 800129c:	080135d8 	.word	0x080135d8
 80012a0:	080135e8 	.word	0x080135e8
 80012a4:	080135f8 	.word	0x080135f8
 80012a8:	08013608 	.word	0x08013608
 80012ac:	08013618 	.word	0x08013618
 80012b0:	08013624 	.word	0x08013624
 80012b4:	08013630 	.word	0x08013630
 80012b8:	08013638 	.word	0x08013638
 80012bc:	08013658 	.word	0x08013658
 80012c0:	0801365c 	.word	0x0801365c
 80012c4:	08013644 	.word	0x08013644
 80012c8:	20000e24 	.word	0x20000e24
 80012cc:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00d f82b 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 80012ea:	e037      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012ec:	233c      	movs	r3, #60	; 0x3c
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012fc:	2203      	movs	r2, #3
 80012fe:	21a0      	movs	r1, #160	; 0xa0
 8001300:	2050      	movs	r0, #80	; 0x50
 8001302:	f00d f81d 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001306:	e029      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001308:	233c      	movs	r3, #60	; 0x3c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c8      	movs	r3, #200	; 0xc8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001318:	2203      	movs	r2, #3
 800131a:	21a0      	movs	r1, #160	; 0xa0
 800131c:	2050      	movs	r0, #80	; 0x50
 800131e:	f00d f80f 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001322:	e01b      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001334:	2203      	movs	r2, #3
 8001336:	21a0      	movs	r1, #160	; 0xa0
 8001338:	2050      	movs	r0, #80	; 0x50
 800133a:	f00d f801 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 800133e:	e00d      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001340:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001350:	22aa      	movs	r2, #170	; 0xaa
 8001352:	2150      	movs	r1, #80	; 0x50
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001356:	f00d f997 	bl	800e688 <ILI9341_Draw_Text>
			break;
 800135a:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800135c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	21b4      	movs	r1, #180	; 0xb4
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <DM_DisplayFormattedOutput+0x574>)
 8001372:	f00d f989 	bl	800e688 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001376:	2001      	movs	r0, #1
 8001378:	f004 fda2 	bl	8005ec0 <SM_GetOutputChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	2b06      	cmp	r3, #6
 800138e:	d873      	bhi.n	8001478 <DM_DisplayFormattedOutput+0x55c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <DM_DisplayFormattedOutput+0x47c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001441 	.word	0x08001441
 80013b0:	0800145d 	.word	0x0800145d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013b4:	233c      	movs	r3, #60	; 0x3c
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <DM_DisplayFormattedOutput+0x578>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013c4:	2203      	movs	r2, #3
 80013c6:	218c      	movs	r1, #140	; 0x8c
 80013c8:	20f5      	movs	r0, #245	; 0xf5
 80013ca:	f00c ffb9 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 80013ce:	e053      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013d0:	233c      	movs	r3, #60	; 0x3c
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <DM_DisplayFormattedOutput+0x57c>)
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013e0:	2203      	movs	r2, #3
 80013e2:	21a0      	movs	r1, #160	; 0xa0
 80013e4:	20f5      	movs	r0, #245	; 0xf5
 80013e6:	f00c ffab 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 80013ea:	e045      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c8      	movs	r3, #200	; 0xc8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013fc:	2203      	movs	r2, #3
 80013fe:	21a0      	movs	r1, #160	; 0xa0
 8001400:	20f5      	movs	r0, #245	; 0xf5
 8001402:	f00c ff9d 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001406:	e037      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001408:	233c      	movs	r3, #60	; 0x3c
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	23c8      	movs	r3, #200	; 0xc8
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001418:	2203      	movs	r2, #3
 800141a:	21a0      	movs	r1, #160	; 0xa0
 800141c:	20f5      	movs	r0, #245	; 0xf5
 800141e:	f00c ff8f 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 8001422:	e029      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23c8      	movs	r3, #200	; 0xc8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001434:	2203      	movs	r2, #3
 8001436:	21a0      	movs	r1, #160	; 0xa0
 8001438:	20f5      	movs	r0, #245	; 0xf5
 800143a:	f00c ff81 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 800143e:	e01b      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001440:	233c      	movs	r3, #60	; 0x3c
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001450:	2203      	movs	r2, #3
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	20f5      	movs	r0, #245	; 0xf5
 8001456:	f00c ff73 	bl	800e340 <ILI9341_Draw_Wave>
			break;
 800145a:	e00d      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800145c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001460:	b29b      	uxth	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800146c:	22aa      	movs	r2, #170	; 0xaa
 800146e:	21f5      	movs	r1, #245	; 0xf5
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001472:	f00d f909 	bl	800e688 <ILI9341_Draw_Text>
			break;
 8001476:	bf00      	nop
	}



}
 8001478:	bf00      	nop
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000c44 	.word	0x20000c44
 8001484:	20000d34 	.word	0x20000d34
 8001488:	20001004 	.word	0x20001004
 800148c:	0801364c 	.word	0x0801364c
 8001490:	08013650 	.word	0x08013650
 8001494:	20000e24 	.word	0x20000e24
 8001498:	20000f14 	.word	0x20000f14

0800149c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <DM_RefreshScreen+0x88>)
 80014a4:	f00a ff3a 	bl	800c31c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00d fb6d 	bl	800eb88 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	2000      	movs	r0, #0
 80014c4:	f00c ff7d 	bl	800e3c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f00c ff70 	bl	800e3c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014e2:	2300      	movs	r3, #0
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	20a0      	movs	r0, #160	; 0xa0
 80014f8:	f00c ff63 	bl	800e3c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2302      	movs	r3, #2
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	2250      	movs	r2, #80	; 0x50
 800150e:	21c8      	movs	r1, #200	; 0xc8
 8001510:	20f0      	movs	r0, #240	; 0xf0
 8001512:	f00c ff56 	bl	800e3c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <DM_RefreshScreen+0x88>)
 8001518:	f00a feca 	bl	800c2b0 <HAL_TIM_Base_Start_IT>


}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20002760 	.word	0x20002760

08001528 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <DM_SetErrorDebugMsg+0x34>)
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 8001538:	f00e fc62 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800153c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	22be      	movs	r2, #190	; 0xbe
 800154a:	210a      	movs	r1, #10
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 800154e:	f00d f89b 	bl	800e688 <ILI9341_Draw_Text>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	080136dc 	.word	0x080136dc
 8001560:	20001e24 	.word	0x20001e24

08001564 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	2b03      	cmp	r3, #3
 8001574:	d816      	bhi.n	80015a4 <FreqMenu_DrawMenu+0x40>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <FreqMenu_DrawMenu+0x18>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001593 	.word	0x08001593
 8001584:	08001599 	.word	0x08001599
 8001588:	0800159f 	.word	0x0800159f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800158c:	f000 f810 	bl	80015b0 <FreqMenu_DrawMainMenu>
			break;
 8001590:	e009      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001592:	f000 f849 	bl	8001628 <FreqMenu_DrawPresetMenu>
			break;
 8001596:	e006      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001598:	f001 faf4 	bl	8002b84 <FreqMenu_DrawAdjustMenu>
			break;
 800159c:	e003      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800159e:	f001 fb07 	bl	8002bb0 <FreqMenu_DrawSweepMenu>
			break;
 80015a2:	e000      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015a4:	bf00      	nop

	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	2105      	movs	r1, #5
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <FreqMenu_DrawMainMenu+0x68>)
 80015c8:	f00d f85e 	bl	800e688 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015cc:	f7ff fca6 	bl	8000f1c <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	22d2      	movs	r2, #210	; 0xd2
 80015de:	2105      	movs	r1, #5
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <FreqMenu_DrawMainMenu+0x6c>)
 80015e2:	f00d f851 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 86,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	22d2      	movs	r2, #210	; 0xd2
 80015f4:	2156      	movs	r1, #86	; 0x56
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FreqMenu_DrawMainMenu+0x70>)
 80015f8:	f00d f846 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  173, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	22d2      	movs	r2, #210	; 0xd2
 800160a:	21ad      	movs	r1, #173	; 0xad
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <FreqMenu_DrawMainMenu+0x74>)
 800160e:	f00d f83b 	bl	800e688 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080136e0 	.word	0x080136e0
 800161c:	080136ec 	.word	0x080136ec
 8001620:	080136f4 	.word	0x080136f4
 8001624:	080136fc 	.word	0x080136fc

08001628 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	220a      	movs	r2, #10
 800163c:	2105      	movs	r1, #5
 800163e:	4886      	ldr	r0, [pc, #536]	; (8001858 <FreqMenu_DrawPresetMenu+0x230>)
 8001640:	f00d f822 	bl	800e688 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800164c:	2350      	movs	r3, #80	; 0x50
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001654:	2378      	movs	r3, #120	; 0x78
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001658:	238c      	movs	r3, #140	; 0x8c
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001660:	f003 fe6a 	bl	8005338 <FreqO_GetFPresetObject>
 8001664:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f001 825d 	beq.w	8002b28 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 849a 	beq.w	8001fb0 <FreqMenu_DrawPresetMenu+0x988>
 800167c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001680:	4293      	cmp	r3, r2
 8001682:	d817      	bhi.n	80016b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	f000 81b3 	beq.w	80019f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	d806      	bhi.n	800169c <FreqMenu_DrawPresetMenu+0x74>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d038      	beq.n	8001704 <FreqMenu_DrawPresetMenu+0xdc>
 8001692:	2b0a      	cmp	r3, #10
 8001694:	f000 8102 	beq.w	800189c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001698:	f001 ba52 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800169c:	2bfa      	cmp	r3, #250	; 0xfa
 800169e:	f000 8317 	beq.w	8001cd0 <FreqMenu_DrawPresetMenu+0x6a8>
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	f000 83d9 	beq.w	8001e5c <FreqMenu_DrawPresetMenu+0x834>
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	f000 8266 	beq.w	8001b7c <FreqMenu_DrawPresetMenu+0x554>
}
 80016b0:	f001 ba46 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	f000 8758 	beq.w	800256e <FreqMenu_DrawPresetMenu+0xf46>
 80016be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80f      	bhi.n	80016e6 <FreqMenu_DrawPresetMenu+0xbe>
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 85e0 	beq.w	8002290 <FreqMenu_DrawPresetMenu+0xc68>
 80016d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f000 86a1 	beq.w	800241c <FreqMenu_DrawPresetMenu+0xdf4>
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	f000 852d 	beq.w	800213c <FreqMenu_DrawPresetMenu+0xb14>
}
 80016e2:	f001 ba2d 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FreqMenu_DrawPresetMenu+0x234>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f001 80ae 	beq.w	800284a <FreqMenu_DrawPresetMenu+0x1222>
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FreqMenu_DrawPresetMenu+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f001 816f 	beq.w	80029d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80016f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 87fc 	beq.w	80026f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001700:	f001 ba1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4853      	ldr	r0, [pc, #332]	; (8001864 <FreqMenu_DrawPresetMenu+0x23c>)
 8001718:	f00c ffb6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800172c:	2105      	movs	r1, #5
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <FreqMenu_DrawPresetMenu+0x240>)
 8001730:	f00c ffaa 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001744:	2105      	movs	r1, #5
 8001746:	4849      	ldr	r0, [pc, #292]	; (800186c <FreqMenu_DrawPresetMenu+0x244>)
 8001748:	f00c ff9e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <FreqMenu_DrawPresetMenu+0x248>)
 8001760:	f00c ff92 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <FreqMenu_DrawPresetMenu+0x24c>)
 8001778:	f00c ff86 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <FreqMenu_DrawPresetMenu+0x250>)
 8001790:	f00c ff7a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <FreqMenu_DrawPresetMenu+0x254>)
 80017a8:	f00c ff6e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <FreqMenu_DrawPresetMenu+0x258>)
 80017c0:	f00c ff62 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <FreqMenu_DrawPresetMenu+0x25c>)
 80017d8:	f00c ff56 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <FreqMenu_DrawPresetMenu+0x260>)
 80017f0:	f00c ff4a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <FreqMenu_DrawPresetMenu+0x264>)
 8001808:	f00c ff3e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <FreqMenu_DrawPresetMenu+0x268>)
 8001820:	f00c ff32 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <FreqMenu_DrawPresetMenu+0x26c>)
 8001838:	f00c ff26 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <FreqMenu_DrawPresetMenu+0x270>)
 8001850:	f00c ff1a 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8001854:	f001 b974 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001858:	08013704 	.word	0x08013704
 800185c:	000124f8 	.word	0x000124f8
 8001860:	000186a0 	.word	0x000186a0
 8001864:	08013718 	.word	0x08013718
 8001868:	08013720 	.word	0x08013720
 800186c:	08013728 	.word	0x08013728
 8001870:	08013730 	.word	0x08013730
 8001874:	08013738 	.word	0x08013738
 8001878:	08013740 	.word	0x08013740
 800187c:	08013748 	.word	0x08013748
 8001880:	08013750 	.word	0x08013750
 8001884:	08013758 	.word	0x08013758
 8001888:	08013760 	.word	0x08013760
 800188c:	08013768 	.word	0x08013768
 8001890:	08013770 	.word	0x08013770
 8001894:	08013778 	.word	0x08013778
 8001898:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ac:	2105      	movs	r1, #5
 80018ae:	48a5      	ldr	r0, [pc, #660]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 80018b0:	f00c feea 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	48a0      	ldr	r0, [pc, #640]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 80018c8:	f00c fede 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	489b      	ldr	r0, [pc, #620]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 80018e0:	f00c fed2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f4:	2105      	movs	r1, #5
 80018f6:	4896      	ldr	r0, [pc, #600]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 80018f8:	f00c fec6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	4891      	ldr	r0, [pc, #580]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001910:	f00c feba 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001928:	f00c feae 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001940:	f00c fea2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	4882      	ldr	r0, [pc, #520]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001958:	f00c fe96 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2178      	movs	r1, #120	; 0x78
 800196e:	487d      	ldr	r0, [pc, #500]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001970:	f00c fe8a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4878      	ldr	r0, [pc, #480]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001988:	f00c fe7e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 80019a0:	f00c fe72 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	486e      	ldr	r0, [pc, #440]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 80019b8:	f00c fe66 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4869      	ldr	r0, [pc, #420]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 80019d0:	f00c fe5a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7a7b      	ldrb	r3, [r7, #9]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	4864      	ldr	r0, [pc, #400]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 80019e8:	f00c fe4e 	bl	800e688 <ILI9341_Draw_Text>
				break;
 80019ec:	f001 b8a8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2105      	movs	r1, #5
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a04:	f00c fe40 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 8001a1c:	f00c fe34 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 8001a34:	f00c fe28 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 8001a4c:	f00c fe1c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2105      	movs	r1, #5
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a64:	f00c fe10 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4837      	ldr	r0, [pc, #220]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001a7c:	f00c fe04 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7a7b      	ldrb	r3, [r7, #9]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001a94:	f00c fdf8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001aac:	f00c fdec 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2178      	movs	r1, #120	; 0x78
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ac4:	f00c fde0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	4823      	ldr	r0, [pc, #140]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001adc:	f00c fdd4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 8001af4:	f00c fdc8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 8001b0c:	f00c fdbc 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b24:	f00c fdb0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7a7b      	ldrb	r3, [r7, #9]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 8001b3c:	f00c fda4 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8001b40:	f000 bffe 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001b44:	08013718 	.word	0x08013718
 8001b48:	08013720 	.word	0x08013720
 8001b4c:	08013728 	.word	0x08013728
 8001b50:	08013730 	.word	0x08013730
 8001b54:	08013738 	.word	0x08013738
 8001b58:	08013740 	.word	0x08013740
 8001b5c:	08013748 	.word	0x08013748
 8001b60:	08013750 	.word	0x08013750
 8001b64:	08013758 	.word	0x08013758
 8001b68:	08013760 	.word	0x08013760
 8001b6c:	08013768 	.word	0x08013768
 8001b70:	08013770 	.word	0x08013770
 8001b74:	08013778 	.word	0x08013778
 8001b78:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	48a5      	ldr	r0, [pc, #660]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b90:	f00c fd7a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	48a0      	ldr	r0, [pc, #640]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001ba8:	f00c fd6e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	489b      	ldr	r0, [pc, #620]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001bc0:	f00c fd62 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4896      	ldr	r0, [pc, #600]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001bd8:	f00c fd56 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	4891      	ldr	r0, [pc, #580]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bf0:	f00c fd4a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c04:	2105      	movs	r1, #5
 8001c06:	488c      	ldr	r0, [pc, #560]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001c08:	f00c fd3e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001c20:	f00c fd32 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001c38:	f00c fd26 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c50:	f00c fd1a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001c68:	f00c fd0e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001c80:	f00c fd02 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	486e      	ldr	r0, [pc, #440]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001c98:	f00c fcf6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cb0:	f00c fcea 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001cc8:	f00c fcde 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8001ccc:	f000 bf38 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ce4:	f00c fcd0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001cfc:	f00c fcc4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001d14:	f00c fcb8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7b3b      	ldrb	r3, [r7, #12]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4841      	ldr	r0, [pc, #260]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001d2c:	f00c fcac 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d44:	f00c fca0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4837      	ldr	r0, [pc, #220]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001d5c:	f00c fc94 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2105      	movs	r1, #5
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001d74:	f00c fc88 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001d8c:	f00c fc7c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001da4:	f00c fc70 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001dbc:	f00c fc64 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001dd4:	f00c fc58 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001dec:	f00c fc4c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e04:	f00c fc40 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001e1c:	f00c fc34 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8001e20:	f000 be8e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001e24:	08013718 	.word	0x08013718
 8001e28:	08013720 	.word	0x08013720
 8001e2c:	08013728 	.word	0x08013728
 8001e30:	08013730 	.word	0x08013730
 8001e34:	08013738 	.word	0x08013738
 8001e38:	08013740 	.word	0x08013740
 8001e3c:	08013748 	.word	0x08013748
 8001e40:	08013750 	.word	0x08013750
 8001e44:	08013758 	.word	0x08013758
 8001e48:	08013760 	.word	0x08013760
 8001e4c:	08013768 	.word	0x08013768
 8001e50:	08013770 	.word	0x08013770
 8001e54:	08013778 	.word	0x08013778
 8001e58:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e70:	f00c fc0a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	48a0      	ldr	r0, [pc, #640]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e88:	f00c fbfe 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	489b      	ldr	r0, [pc, #620]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ea0:	f00c fbf2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4896      	ldr	r0, [pc, #600]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 8001eb8:	f00c fbe6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	4891      	ldr	r0, [pc, #580]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8001ed0:	f00c fbda 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	488c      	ldr	r0, [pc, #560]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ee8:	f00c fbce 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f00:	f00c fbc2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4882      	ldr	r0, [pc, #520]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f18:	f00c fbb6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f30:	f00c fbaa 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4878      	ldr	r0, [pc, #480]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f48:	f00c fb9e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f60:	f00c fb92 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	486e      	ldr	r0, [pc, #440]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f78:	f00c fb86 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4869      	ldr	r0, [pc, #420]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f90:	f00c fb7a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fa8:	f00c fb6e 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8001fac:	f000 bdc8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4850      	ldr	r0, [pc, #320]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001fc4:	f00c fb60 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001fdc:	f00c fb54 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ff4:	f00c fb48 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 800200c:	f00c fb3c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	483c      	ldr	r0, [pc, #240]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8002024:	f00c fb30 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 800203c:	f00c fb24 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2105      	movs	r1, #5
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002054:	f00c fb18 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 800206c:	f00c fb0c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8002084:	f00c fb00 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 800209c:	f00c faf4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 80020b4:	f00c fae8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 80020cc:	f00c fadc 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7abb      	ldrb	r3, [r7, #10]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020e4:	f00c fad0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 80020fc:	f00c fac4 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8002100:	f000 bd1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002104:	08013718 	.word	0x08013718
 8002108:	08013720 	.word	0x08013720
 800210c:	08013728 	.word	0x08013728
 8002110:	08013730 	.word	0x08013730
 8002114:	08013738 	.word	0x08013738
 8002118:	08013740 	.word	0x08013740
 800211c:	08013748 	.word	0x08013748
 8002120:	08013750 	.word	0x08013750
 8002124:	08013758 	.word	0x08013758
 8002128:	08013760 	.word	0x08013760
 800212c:	08013768 	.word	0x08013768
 8002130:	08013770 	.word	0x08013770
 8002134:	08013778 	.word	0x08013778
 8002138:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	48a5      	ldr	r0, [pc, #660]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002150:	f00c fa9a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2105      	movs	r1, #5
 8002166:	48a0      	ldr	r0, [pc, #640]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002168:	f00c fa8e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	489b      	ldr	r0, [pc, #620]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8002180:	f00c fa82 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7b3b      	ldrb	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002198:	f00c fa76 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	4891      	ldr	r0, [pc, #580]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021b0:	f00c fa6a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	488c      	ldr	r0, [pc, #560]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021c8:	f00c fa5e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 80021e0:	f00c fa52 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021f8:	f00c fa46 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	487d      	ldr	r0, [pc, #500]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002210:	f00c fa3a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 8002228:	f00c fa2e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4873      	ldr	r0, [pc, #460]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002240:	f00c fa22 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	486e      	ldr	r0, [pc, #440]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 8002258:	f00c fa16 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4869      	ldr	r0, [pc, #420]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 8002270:	f00c fa0a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4864      	ldr	r0, [pc, #400]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002288:	f00c f9fe 	bl	800e688 <ILI9341_Draw_Text>
				break;
 800228c:	f000 bc58 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4850      	ldr	r0, [pc, #320]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022a4:	f00c f9f0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022bc:	f00c f9e4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80022d4:	f00c f9d8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4841      	ldr	r0, [pc, #260]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022ec:	f00c f9cc 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002304:	f00c f9c0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800231c:	f00c f9b4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	4832      	ldr	r0, [pc, #200]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002334:	f00c f9a8 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 800234c:	f00c f99c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2302      	movs	r3, #2
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002364:	f00c f990 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 800237c:	f00c f984 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	481e      	ldr	r0, [pc, #120]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002394:	f00c f978 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ac:	f00c f96c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 80023c4:	f00c f960 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 80023dc:	f00c f954 	bl	800e688 <ILI9341_Draw_Text>
				break;
 80023e0:	e3ae      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80023e2:	bf00      	nop
 80023e4:	08013718 	.word	0x08013718
 80023e8:	08013720 	.word	0x08013720
 80023ec:	08013728 	.word	0x08013728
 80023f0:	08013730 	.word	0x08013730
 80023f4:	08013738 	.word	0x08013738
 80023f8:	08013740 	.word	0x08013740
 80023fc:	08013748 	.word	0x08013748
 8002400:	08013750 	.word	0x08013750
 8002404:	08013758 	.word	0x08013758
 8002408:	08013760 	.word	0x08013760
 800240c:	08013768 	.word	0x08013768
 8002410:	08013770 	.word	0x08013770
 8002414:	08013778 	.word	0x08013778
 8002418:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002430:	f00c f92a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	489f      	ldr	r0, [pc, #636]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002448:	f00c f91e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	489a      	ldr	r0, [pc, #616]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002460:	f00c f912 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	4895      	ldr	r0, [pc, #596]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002478:	f00c f906 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	4890      	ldr	r0, [pc, #576]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002490:	f00c f8fa 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7abb      	ldrb	r3, [r7, #10]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	488b      	ldr	r0, [pc, #556]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024a8:	f00c f8ee 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4886      	ldr	r0, [pc, #536]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024c0:	f00c f8e2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4881      	ldr	r0, [pc, #516]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80024d8:	f00c f8d6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024f0:	f00c f8ca 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4877      	ldr	r0, [pc, #476]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002508:	f00c f8be 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7b3b      	ldrb	r3, [r7, #12]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4872      	ldr	r0, [pc, #456]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002520:	f00c f8b2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	486d      	ldr	r0, [pc, #436]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002538:	f00c f8a6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4868      	ldr	r0, [pc, #416]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002550:	f00c f89a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	4863      	ldr	r0, [pc, #396]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002568:	f00c f88e 	bl	800e688 <ILI9341_Draw_Text>
				break;
 800256c:	e2e8      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b29a      	uxth	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2302      	movs	r3, #2
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257e:	2105      	movs	r1, #5
 8002580:	484f      	ldr	r0, [pc, #316]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002582:	f00c f881 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002596:	2105      	movs	r1, #5
 8002598:	484a      	ldr	r0, [pc, #296]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800259a:	f00c f875 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	4845      	ldr	r0, [pc, #276]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025b2:	f00c f869 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025ca:	f00c f85d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025e2:	f00c f851 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7abb      	ldrb	r3, [r7, #10]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025fa:	f00c f845 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7a7b      	ldrb	r3, [r7, #9]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002612:	f00c f839 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800262a:	f00c f82d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4827      	ldr	r0, [pc, #156]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002642:	f00c f821 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800265a:	f00c f815 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002672:	f00c f809 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800268a:	f00b fffd 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026a2:	f00b fff1 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ba:	f00b ffe5 	bl	800e688 <ILI9341_Draw_Text>
				break;
 80026be:	e23f      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80026c0:	08013718 	.word	0x08013718
 80026c4:	08013720 	.word	0x08013720
 80026c8:	08013728 	.word	0x08013728
 80026cc:	08013730 	.word	0x08013730
 80026d0:	08013738 	.word	0x08013738
 80026d4:	08013740 	.word	0x08013740
 80026d8:	08013748 	.word	0x08013748
 80026dc:	08013750 	.word	0x08013750
 80026e0:	08013758 	.word	0x08013758
 80026e4:	08013760 	.word	0x08013760
 80026e8:	08013768 	.word	0x08013768
 80026ec:	08013770 	.word	0x08013770
 80026f0:	08013778 	.word	0x08013778
 80026f4:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002708:	2105      	movs	r1, #5
 800270a:	48a4      	ldr	r0, [pc, #656]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800270c:	f00b ffbc 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	b29a      	uxth	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002720:	2105      	movs	r1, #5
 8002722:	489f      	ldr	r0, [pc, #636]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002724:	f00b ffb0 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	489a      	ldr	r0, [pc, #616]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800273c:	f00b ffa4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	4895      	ldr	r0, [pc, #596]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002754:	f00b ff98 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	4890      	ldr	r0, [pc, #576]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 800276c:	f00b ff8c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7abb      	ldrb	r3, [r7, #10]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	488b      	ldr	r0, [pc, #556]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002784:	f00b ff80 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4886      	ldr	r0, [pc, #536]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800279c:	f00b ff74 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027b4:	f00b ff68 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 80027cc:	f00b ff5c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4877      	ldr	r0, [pc, #476]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80027e4:	f00b ff50 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80027fc:	f00b ff44 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	486d      	ldr	r0, [pc, #436]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002814:	f00b ff38 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7abb      	ldrb	r3, [r7, #10]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4868      	ldr	r0, [pc, #416]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800282c:	f00b ff2c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002830:	7a7b      	ldrb	r3, [r7, #9]
 8002832:	b29a      	uxth	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2302      	movs	r3, #2
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	4863      	ldr	r0, [pc, #396]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002844:	f00b ff20 	bl	800e688 <ILI9341_Draw_Text>
			break;
 8002848:	e17a      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285a:	2105      	movs	r1, #5
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800285e:	f00b ff13 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002872:	2105      	movs	r1, #5
 8002874:	484a      	ldr	r0, [pc, #296]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002876:	f00b ff07 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800288e:	f00b fefb 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028a6:	f00b feef 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	483b      	ldr	r0, [pc, #236]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 80028be:	f00b fee3 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4836      	ldr	r0, [pc, #216]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80028d6:	f00b fed7 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	4831      	ldr	r0, [pc, #196]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80028ee:	f00b fecb 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002906:	f00b febf 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2178      	movs	r1, #120	; 0x78
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 800291e:	f00b feb3 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	4822      	ldr	r0, [pc, #136]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002936:	f00b fea7 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	481d      	ldr	r0, [pc, #116]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800294e:	f00b fe9b 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002966:	f00b fe8f 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800296a:	7abb      	ldrb	r3, [r7, #10]
 800296c:	b29a      	uxth	r2, r3
 800296e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	4813      	ldr	r0, [pc, #76]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800297e:	f00b fe83 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002996:	f00b fe77 	bl	800e688 <ILI9341_Draw_Text>
			break;
 800299a:	e0d1      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 800299c:	08013718 	.word	0x08013718
 80029a0:	08013720 	.word	0x08013720
 80029a4:	08013728 	.word	0x08013728
 80029a8:	08013730 	.word	0x08013730
 80029ac:	08013738 	.word	0x08013738
 80029b0:	08013740 	.word	0x08013740
 80029b4:	08013748 	.word	0x08013748
 80029b8:	08013750 	.word	0x08013750
 80029bc:	08013758 	.word	0x08013758
 80029c0:	08013760 	.word	0x08013760
 80029c4:	08013768 	.word	0x08013768
 80029c8:	08013770 	.word	0x08013770
 80029cc:	08013778 	.word	0x08013778
 80029d0:	08013780 	.word	0x08013780
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e4:	2105      	movs	r1, #5
 80029e6:	4858      	ldr	r0, [pc, #352]	; (8002b48 <FreqMenu_DrawPresetMenu+0x1520>)
 80029e8:	f00b fe4e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2105      	movs	r1, #5
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a00:	f00b fe42 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	484e      	ldr	r0, [pc, #312]	; (8002b50 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a18:	f00b fe36 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a30:	f00b fe2a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	4844      	ldr	r0, [pc, #272]	; (8002b58 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a48:	f00b fe1e 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	483f      	ldr	r0, [pc, #252]	; (8002b5c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a60:	f00b fe12 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	483a      	ldr	r0, [pc, #232]	; (8002b60 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a78:	f00b fe06 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2178      	movs	r1, #120	; 0x78
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a90:	f00b fdfa 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2178      	movs	r1, #120	; 0x78
 8002aa6:	4830      	ldr	r0, [pc, #192]	; (8002b68 <FreqMenu_DrawPresetMenu+0x1540>)
 8002aa8:	f00b fdee 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ac0:	f00b fde2 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ad8:	f00b fdd6 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	4821      	ldr	r0, [pc, #132]	; (8002b74 <FreqMenu_DrawPresetMenu+0x154c>)
 8002af0:	f00b fdca 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7abb      	ldrb	r3, [r7, #10]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b08:	f00b fdbe 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1554>)
 8002b20:	f00b fdb2 	bl	800e688 <ILI9341_Draw_Text>
			break;
 8002b24:	bf00      	nop
 8002b26:	e00b      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	2105      	movs	r1, #5
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b3a:	f00b fda5 	bl	800e688 <ILI9341_Draw_Text>
}
 8002b3e:	e7ff      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08013718 	.word	0x08013718
 8002b4c:	08013720 	.word	0x08013720
 8002b50:	08013728 	.word	0x08013728
 8002b54:	08013730 	.word	0x08013730
 8002b58:	08013738 	.word	0x08013738
 8002b5c:	08013740 	.word	0x08013740
 8002b60:	08013748 	.word	0x08013748
 8002b64:	08013750 	.word	0x08013750
 8002b68:	08013758 	.word	0x08013758
 8002b6c:	08013760 	.word	0x08013760
 8002b70:	08013768 	.word	0x08013768
 8002b74:	08013770 	.word	0x08013770
 8002b78:	08013778 	.word	0x08013778
 8002b7c:	08013780 	.word	0x08013780
 8002b80:	0801378c 	.word	0x0801378c

08002b84 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <FreqMenu_DrawAdjustMenu+0x28>)
 8002b9c:	f00b fd74 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002ba0:	f7fe f9bc 	bl	8000f1c <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	080137bc 	.word	0x080137bc

08002bb0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b0a0      	sub	sp, #128	; 0x80
 8002bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	48a2      	ldr	r0, [pc, #648]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002bc8:	f00b fd5e 	bl	800e688 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bde:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d109      	bne.n	8002bfe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bee:	4a9a      	ldr	r2, [pc, #616]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	7023      	strb	r3, [r4, #0]
 8002bfc:	e008      	b.n	8002c10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c02:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	2105      	movs	r1, #5
 8002c24:	f00b fd30 	bl	800e688 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c3e:	f003 fbd7 	bl	80063f0 <SM_GetOutputInHertz>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c54:	e9cd 3400 	strd	r3, r4, [sp]
 8002c58:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	f00d f8d0 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	f00b fd08 	bl	800e688 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	2105      	movs	r1, #5
 8002c88:	4876      	ldr	r0, [pc, #472]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c8a:	f00b fcfd 	bl	800e688 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d117      	bne.n	8002cca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	21eb      	movs	r1, #235	; 0xeb
 8002caa:	486f      	ldr	r0, [pc, #444]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cac:	f00b fcec 	bl	800e688 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	f240 1109 	movw	r1, #265	; 0x109
 8002cc2:	486a      	ldr	r0, [pc, #424]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cc4:	f00b fce0 	bl	800e688 <ILI9341_Draw_Text>
 8002cc8:	e016      	b.n	8002cf8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	f240 1109 	movw	r1, #265	; 0x109
 8002cdc:	4863      	ldr	r0, [pc, #396]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cde:	f00b fcd3 	bl	800e688 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2264      	movs	r2, #100	; 0x64
 8002cf0:	21eb      	movs	r1, #235	; 0xeb
 8002cf2:	485d      	ldr	r0, [pc, #372]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cf4:	f00b fcc8 	bl	800e688 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4858      	ldr	r0, [pc, #352]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d12:	f00b fcb9 	bl	800e688 <ILI9341_Draw_Text>
 8002d16:	e00a      	b.n	8002d2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d24:	2278      	movs	r2, #120	; 0x78
 8002d26:	2105      	movs	r1, #5
 8002d28:	4852      	ldr	r0, [pc, #328]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d2a:	f00b fcad 	bl	800e688 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d56:	e9cd 3400 	strd	r3, r4, [sp]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d5c:	2119      	movs	r1, #25
 8002d5e:	f00d f84f 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	2278      	movs	r2, #120	; 0x78
 8002d74:	21b6      	movs	r1, #182	; 0xb6
 8002d76:	f00b fc87 	bl	800e688 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10f      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	2105      	movs	r1, #5
 8002d9a:	483a      	ldr	r0, [pc, #232]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d9c:	f00b fc74 	bl	800e688 <ILI9341_Draw_Text>
 8002da0:	e00a      	b.n	8002db8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2302      	movs	r3, #2
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dae:	228c      	movs	r2, #140	; 0x8c
 8002db0:	2105      	movs	r1, #5
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002db4:	f00b fc68 	bl	800e688 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	ee17 0a90 	vmov	r0, s15
 8002de2:	f003 fb4b 	bl	800647c <SM_ConvertPeriodToHertz>
 8002de6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df2:	ee16 0a90 	vmov	r0, s13
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_f2d>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	f107 0018 	add.w	r0, r7, #24
 8002e02:	e9cd 3400 	strd	r3, r4, [sp]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e08:	2114      	movs	r1, #20
 8002e0a:	f00c fff9 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e0e:	f107 0018 	add.w	r0, r7, #24
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e1e:	228c      	movs	r2, #140	; 0x8c
 8002e20:	219e      	movs	r1, #158	; 0x9e
 8002e22:	f00b fc31 	bl	800e688 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d134      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d130      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	22a0      	movs	r2, #160	; 0xa0
 8002e44:	2105      	movs	r1, #5
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e48:	f00b fc1e 	bl	800e688 <ILI9341_Draw_Text>
 8002e4c:	e02f      	b.n	8002eae <FreqMenu_DrawSweepMenu+0x2fe>
 8002e4e:	bf00      	nop
 8002e50:	080137d0 	.word	0x080137d0
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	080137e4 	.word	0x080137e4
 8002e5c:	080137f8 	.word	0x080137f8
 8002e60:	0801380c 	.word	0x0801380c
 8002e64:	08013820 	.word	0x08013820
 8002e68:	0801382c 	.word	0x0801382c
 8002e6c:	08013830 	.word	0x08013830
 8002e70:	20001e55 	.word	0x20001e55
 8002e74:	08013838 	.word	0x08013838
 8002e78:	20001eac 	.word	0x20001eac
 8002e7c:	08013848 	.word	0x08013848
 8002e80:	20001e54 	.word	0x20001e54
 8002e84:	08013854 	.word	0x08013854
 8002e88:	20000120 	.word	0x20000120
 8002e8c:	42f00000 	.word	0x42f00000
 8002e90:	08013864 	.word	0x08013864
 8002e94:	08013870 	.word	0x08013870
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	484d      	ldr	r0, [pc, #308]	; (8002fe0 <FreqMenu_DrawSweepMenu+0x430>)
 8002eaa:	f00b fbed 	bl	800e688 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <FreqMenu_DrawSweepMenu+0x434>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f003 fad0 	bl	800647c <SM_ConvertPeriodToHertz>
 8002edc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee0:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002fe8 <FreqMenu_DrawSweepMenu+0x438>
 8002ee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee8:	ee16 0a90 	vmov	r0, s13
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	1d38      	adds	r0, r7, #4
 8002ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <FreqMenu_DrawSweepMenu+0x43c>)
 8002efc:	2114      	movs	r1, #20
 8002efe:	f00c ff7f 	bl	800fe00 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f02:	1d38      	adds	r0, r7, #4
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	21aa      	movs	r1, #170	; 0xaa
 8002f14:	f00b fbb8 	bl	800e688 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <FreqMenu_DrawSweepMenu+0x440>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f24:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	22d5      	movs	r2, #213	; 0xd5
 8002f32:	2106      	movs	r1, #6
 8002f34:	482f      	ldr	r0, [pc, #188]	; (8002ff4 <FreqMenu_DrawSweepMenu+0x444>)
 8002f36:	f00b fba7 	bl	800e688 <ILI9341_Draw_Text>
 8002f3a:	e00a      	b.n	8002f52 <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f3c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2302      	movs	r3, #2
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	22d5      	movs	r2, #213	; 0xd5
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <FreqMenu_DrawSweepMenu+0x448>)
 8002f4e:	f00b fb9b 	bl	800e688 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f52:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	22cc      	movs	r2, #204	; 0xcc
 8002f60:	2168      	movs	r1, #104	; 0x68
 8002f62:	4826      	ldr	r0, [pc, #152]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f64:	f00b fb90 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f68:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	22de      	movs	r2, #222	; 0xde
 8002f76:	2161      	movs	r1, #97	; 0x61
 8002f78:	4821      	ldr	r0, [pc, #132]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f7a:	f00b fb85 	bl	800e688 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	22cc      	movs	r2, #204	; 0xcc
 8002f8c:	21b7      	movs	r1, #183	; 0xb7
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f90:	f00b fb7a 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	22de      	movs	r2, #222	; 0xde
 8002fa2:	21ad      	movs	r1, #173	; 0xad
 8002fa4:	4817      	ldr	r0, [pc, #92]	; (8003004 <FreqMenu_DrawSweepMenu+0x454>)
 8002fa6:	f00b fb6f 	bl	800e688 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002faa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	22cc      	movs	r2, #204	; 0xcc
 8002fb8:	f240 1107 	movw	r1, #263	; 0x107
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002fbe:	f00b fb63 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fc2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	22de      	movs	r2, #222	; 0xde
 8002fd0:	21fc      	movs	r1, #252	; 0xfc
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <FreqMenu_DrawSweepMenu+0x458>)
 8002fd4:	f00b fb58 	bl	800e688 <ILI9341_Draw_Text>
}
 8002fd8:	bf00      	nop
 8002fda:	3778      	adds	r7, #120	; 0x78
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	08013870 	.word	0x08013870
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	42f00000 	.word	0x42f00000
 8002fec:	08013880 	.word	0x08013880
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	0801388c 	.word	0x0801388c
 8002ff8:	08013894 	.word	0x08013894
 8002ffc:	0801389c 	.word	0x0801389c
 8003000:	080138a0 	.word	0x080138a0
 8003004:	080138a8 	.word	0x080138a8
 8003008:	080138b0 	.word	0x080138b0

0800300c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d007      	beq.n	800302c <FuncMenu_DrawMenu+0x20>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d009      	beq.n	8003034 <FuncMenu_DrawMenu+0x28>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d000      	beq.n	8003026 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003024:	e00a      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003026:	f000 f80d 	bl	8003044 <FuncMenu_DrawMainMenu>
			break;
 800302a:	e007      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f851 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 8003032:	e003      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 f84d 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 800303a:	bf00      	nop

	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2302      	movs	r3, #2
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	220a      	movs	r2, #10
 8003058:	210a      	movs	r1, #10
 800305a:	481a      	ldr	r0, [pc, #104]	; (80030c4 <FuncMenu_DrawMainMenu+0x80>)
 800305c:	f00b fb14 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003060:	f7fd ff5c 	bl	8000f1c <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003064:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2302      	movs	r3, #2
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	22d2      	movs	r2, #210	; 0xd2
 8003072:	2105      	movs	r1, #5
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <FuncMenu_DrawMainMenu+0x84>)
 8003076:	f00b fb07 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800307a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	22d2      	movs	r2, #210	; 0xd2
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <FuncMenu_DrawMainMenu+0x88>)
 800308c:	f00b fafc 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	22d2      	movs	r2, #210	; 0xd2
 800309e:	21af      	movs	r1, #175	; 0xaf
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030a2:	f00b faf1 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	22d2      	movs	r2, #210	; 0xd2
 80030b4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030ba:	f00b fae5 	bl	800e688 <ILI9341_Draw_Text>
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	080138b8 	.word	0x080138b8
 80030c8:	080138c4 	.word	0x080138c4
 80030cc:	080138cc 	.word	0x080138cc
 80030d0:	080138d0 	.word	0x080138d0

080030d4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2302      	movs	r3, #2
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	220a      	movs	r2, #10
 80030f2:	210a      	movs	r1, #10
 80030f4:	4896      	ldr	r0, [pc, #600]	; (8003350 <FuncMenu_DrawOutputMenu+0x27c>)
 80030f6:	f00b fac7 	bl	800e688 <ILI9341_Draw_Text>
 80030fa:	e00a      	b.n	8003112 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	220a      	movs	r2, #10
 800310a:	210a      	movs	r1, #10
 800310c:	4891      	ldr	r0, [pc, #580]	; (8003354 <FuncMenu_DrawOutputMenu+0x280>)
 800310e:	f00b fabb 	bl	800e688 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fed3 	bl	8005ec0 <SM_GetOutputChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003120:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8424 	beq.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b06      	cmp	r3, #6
 8003130:	f200 841f 	bhi.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <FuncMenu_DrawOutputMenu+0x68>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003159 	.word	0x08003159
 8003140:	08003255 	.word	0x08003255
 8003144:	08003379 	.word	0x08003379
 8003148:	08003475 	.word	0x08003475
 800314c:	08003571 	.word	0x08003571
 8003150:	080036a9 	.word	0x080036a9
 8003154:	080037bb 	.word	0x080037bb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003158:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2302      	movs	r3, #2
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2232      	movs	r2, #50	; 0x32
 8003166:	210a      	movs	r1, #10
 8003168:	487b      	ldr	r0, [pc, #492]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 800316a:	f00b fa8d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2246      	movs	r2, #70	; 0x46
 800317c:	210a      	movs	r1, #10
 800317e:	4877      	ldr	r0, [pc, #476]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 8003180:	f00b fa82 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	225a      	movs	r2, #90	; 0x5a
 8003192:	210a      	movs	r1, #10
 8003194:	4872      	ldr	r0, [pc, #456]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003196:	f00b fa77 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a6:	226e      	movs	r2, #110	; 0x6e
 80031a8:	210a      	movs	r1, #10
 80031aa:	486e      	ldr	r0, [pc, #440]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80031ac:	f00b fa6c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b0:	2300      	movs	r3, #0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2302      	movs	r3, #2
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031bc:	2282      	movs	r2, #130	; 0x82
 80031be:	210a      	movs	r1, #10
 80031c0:	4869      	ldr	r0, [pc, #420]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80031c2:	f00b fa61 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d2:	2296      	movs	r2, #150	; 0x96
 80031d4:	210a      	movs	r1, #10
 80031d6:	4865      	ldr	r0, [pc, #404]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80031d8:	f00b fa56 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2302      	movs	r3, #2
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ee:	22aa      	movs	r2, #170	; 0xaa
 80031f0:	210a      	movs	r1, #10
 80031f2:	485f      	ldr	r0, [pc, #380]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80031f4:	f00b fa48 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2302      	movs	r3, #2
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	22d2      	movs	r2, #210	; 0xd2
 8003206:	2105      	movs	r1, #5
 8003208:	485a      	ldr	r0, [pc, #360]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800320a:	f00b fa3d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800320e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	22d2      	movs	r2, #210	; 0xd2
 800321c:	2161      	movs	r1, #97	; 0x61
 800321e:	4855      	ldr	r0, [pc, #340]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003220:	f00b fa32 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003224:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22d2      	movs	r2, #210	; 0xd2
 8003232:	21af      	movs	r1, #175	; 0xaf
 8003234:	484f      	ldr	r0, [pc, #316]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003236:	f00b fa27 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800323a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2302      	movs	r3, #2
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	22d2      	movs	r2, #210	; 0xd2
 8003248:	f44f 7182 	mov.w	r1, #260	; 0x104
 800324c:	4849      	ldr	r0, [pc, #292]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800324e:	f00b fa1b 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8003252:	e38e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003254:	2300      	movs	r3, #0
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2302      	movs	r3, #2
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	210a      	movs	r1, #10
 8003264:	483c      	ldr	r0, [pc, #240]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 8003266:	f00b fa0f 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800326a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2246      	movs	r2, #70	; 0x46
 8003278:	210a      	movs	r1, #10
 800327a:	4838      	ldr	r0, [pc, #224]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 800327c:	f00b fa04 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003280:	2300      	movs	r3, #0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2302      	movs	r3, #2
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800328c:	225a      	movs	r2, #90	; 0x5a
 800328e:	210a      	movs	r1, #10
 8003290:	4833      	ldr	r0, [pc, #204]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003292:	f00b f9f9 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a2:	226e      	movs	r2, #110	; 0x6e
 80032a4:	210a      	movs	r1, #10
 80032a6:	482f      	ldr	r0, [pc, #188]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80032a8:	f00b f9ee 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2302      	movs	r3, #2
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032b8:	2282      	movs	r2, #130	; 0x82
 80032ba:	210a      	movs	r1, #10
 80032bc:	482a      	ldr	r0, [pc, #168]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80032be:	f00b f9e3 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2302      	movs	r3, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ce:	2296      	movs	r2, #150	; 0x96
 80032d0:	210a      	movs	r1, #10
 80032d2:	4826      	ldr	r0, [pc, #152]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80032d4:	f00b f9d8 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032de:	2300      	movs	r3, #0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ea:	22aa      	movs	r2, #170	; 0xaa
 80032ec:	210a      	movs	r1, #10
 80032ee:	4820      	ldr	r0, [pc, #128]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80032f0:	f00b f9ca 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	22d2      	movs	r2, #210	; 0xd2
 8003302:	2105      	movs	r1, #5
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003306:	f00b f9bf 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800330a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	22d2      	movs	r2, #210	; 0xd2
 8003318:	2161      	movs	r1, #97	; 0x61
 800331a:	4816      	ldr	r0, [pc, #88]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800331c:	f00b f9b4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003320:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	22d2      	movs	r2, #210	; 0xd2
 800332e:	21af      	movs	r1, #175	; 0xaf
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003332:	f00b f9a9 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003336:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22d2      	movs	r2, #210	; 0xd2
 8003344:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003348:	480a      	ldr	r0, [pc, #40]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334a:	f00b f99d 	bl	800e688 <ILI9341_Draw_Text>
				break;
 800334e:	e310      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003350:	080138d8 	.word	0x080138d8
 8003354:	080138e8 	.word	0x080138e8
 8003358:	080138f8 	.word	0x080138f8
 800335c:	08013900 	.word	0x08013900
 8003360:	0801390c 	.word	0x0801390c
 8003364:	08013914 	.word	0x08013914
 8003368:	08013920 	.word	0x08013920
 800336c:	0801392c 	.word	0x0801392c
 8003370:	08013934 	.word	0x08013934
 8003374:	080138d0 	.word	0x080138d0
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2302      	movs	r3, #2
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003384:	2232      	movs	r2, #50	; 0x32
 8003386:	210a      	movs	r1, #10
 8003388:	48be      	ldr	r0, [pc, #760]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 800338a:	f00b f97d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800339a:	2246      	movs	r2, #70	; 0x46
 800339c:	210a      	movs	r1, #10
 800339e:	48ba      	ldr	r0, [pc, #744]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 80033a0:	f00b f972 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2302      	movs	r3, #2
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	225a      	movs	r2, #90	; 0x5a
 80033b2:	210a      	movs	r1, #10
 80033b4:	48b5      	ldr	r0, [pc, #724]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80033b6:	f00b f967 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2302      	movs	r3, #2
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c6:	226e      	movs	r2, #110	; 0x6e
 80033c8:	210a      	movs	r1, #10
 80033ca:	48b1      	ldr	r0, [pc, #708]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80033cc:	f00b f95c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033dc:	2282      	movs	r2, #130	; 0x82
 80033de:	210a      	movs	r1, #10
 80033e0:	48ac      	ldr	r0, [pc, #688]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80033e2:	f00b f951 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f2:	2296      	movs	r2, #150	; 0x96
 80033f4:	210a      	movs	r1, #10
 80033f6:	48a8      	ldr	r0, [pc, #672]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80033f8:	f00b f946 	bl	800e688 <ILI9341_Draw_Text>
				if(pOutChan)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800340e:	22aa      	movs	r2, #170	; 0xaa
 8003410:	210a      	movs	r1, #10
 8003412:	48a2      	ldr	r0, [pc, #648]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003414:	f00b f938 	bl	800e688 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003418:	f240 23fd 	movw	r3, #765	; 0x2fd
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2302      	movs	r3, #2
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	22d2      	movs	r2, #210	; 0xd2
 8003426:	2105      	movs	r1, #5
 8003428:	489d      	ldr	r0, [pc, #628]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800342a:	f00b f92d 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800342e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2302      	movs	r3, #2
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2300      	movs	r3, #0
 800343a:	22d2      	movs	r2, #210	; 0xd2
 800343c:	2161      	movs	r1, #97	; 0x61
 800343e:	4898      	ldr	r0, [pc, #608]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003440:	f00b f922 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003444:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2302      	movs	r3, #2
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	22d2      	movs	r2, #210	; 0xd2
 8003452:	21af      	movs	r1, #175	; 0xaf
 8003454:	4892      	ldr	r0, [pc, #584]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003456:	f00b f917 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	22d2      	movs	r2, #210	; 0xd2
 8003468:	f44f 7182 	mov.w	r1, #260	; 0x104
 800346c:	488c      	ldr	r0, [pc, #560]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800346e:	f00b f90b 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8003472:	e27e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2232      	movs	r2, #50	; 0x32
 8003482:	210a      	movs	r1, #10
 8003484:	487f      	ldr	r0, [pc, #508]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003486:	f00b f8ff 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	2246      	movs	r2, #70	; 0x46
 8003498:	210a      	movs	r1, #10
 800349a:	487b      	ldr	r0, [pc, #492]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 800349c:	f00b f8f4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ac:	225a      	movs	r2, #90	; 0x5a
 80034ae:	210a      	movs	r1, #10
 80034b0:	4876      	ldr	r0, [pc, #472]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80034b2:	f00b f8e9 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034b6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	226e      	movs	r2, #110	; 0x6e
 80034c4:	210a      	movs	r1, #10
 80034c6:	4872      	ldr	r0, [pc, #456]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034c8:	f00b f8de 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034cc:	2300      	movs	r3, #0
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2302      	movs	r3, #2
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034d8:	2282      	movs	r2, #130	; 0x82
 80034da:	210a      	movs	r1, #10
 80034dc:	486d      	ldr	r0, [pc, #436]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80034de:	f00b f8d3 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ee:	2296      	movs	r2, #150	; 0x96
 80034f0:	210a      	movs	r1, #10
 80034f2:	4869      	ldr	r0, [pc, #420]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80034f4:	f00b f8c8 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	22aa      	movs	r2, #170	; 0xaa
 800350c:	210a      	movs	r1, #10
 800350e:	4863      	ldr	r0, [pc, #396]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003510:	f00b f8ba 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003514:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	22d2      	movs	r2, #210	; 0xd2
 8003522:	2105      	movs	r1, #5
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003526:	f00b f8af 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800352a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2302      	movs	r3, #2
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22d2      	movs	r2, #210	; 0xd2
 8003538:	2161      	movs	r1, #97	; 0x61
 800353a:	4859      	ldr	r0, [pc, #356]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800353c:	f00b f8a4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003540:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	21af      	movs	r1, #175	; 0xaf
 8003550:	4853      	ldr	r0, [pc, #332]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003552:	f00b f899 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003556:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003568:	484d      	ldr	r0, [pc, #308]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800356a:	f00b f88d 	bl	800e688 <ILI9341_Draw_Text>
				break;
 800356e:	e200      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003570:	2300      	movs	r3, #0
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2302      	movs	r3, #2
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800357c:	2232      	movs	r2, #50	; 0x32
 800357e:	210a      	movs	r1, #10
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003582:	f00b f881 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003592:	2246      	movs	r2, #70	; 0x46
 8003594:	210a      	movs	r1, #10
 8003596:	483c      	ldr	r0, [pc, #240]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003598:	f00b f876 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	225a      	movs	r2, #90	; 0x5a
 80035aa:	210a      	movs	r1, #10
 80035ac:	4837      	ldr	r0, [pc, #220]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80035ae:	f00b f86b 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	226e      	movs	r2, #110	; 0x6e
 80035c0:	210a      	movs	r1, #10
 80035c2:	4833      	ldr	r0, [pc, #204]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035c4:	f00b f860 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	210a      	movs	r1, #10
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80035da:	f00b f855 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	2296      	movs	r2, #150	; 0x96
 80035ec:	210a      	movs	r1, #10
 80035ee:	482a      	ldr	r0, [pc, #168]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80035f0:	f00b f84a 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2302      	movs	r3, #2
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003606:	22aa      	movs	r2, #170	; 0xaa
 8003608:	210a      	movs	r1, #10
 800360a:	4824      	ldr	r0, [pc, #144]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 800360c:	f00b f83c 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	22d2      	movs	r2, #210	; 0xd2
 800361e:	2105      	movs	r1, #5
 8003620:	481f      	ldr	r0, [pc, #124]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003622:	f00b f831 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2302      	movs	r3, #2
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	22d2      	movs	r2, #210	; 0xd2
 8003634:	2161      	movs	r1, #97	; 0x61
 8003636:	481a      	ldr	r0, [pc, #104]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003638:	f00b f826 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800363c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22d2      	movs	r2, #210	; 0xd2
 800364a:	21af      	movs	r1, #175	; 0xaf
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800364e:	f00b f81b 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003652:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2302      	movs	r3, #2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	22d2      	movs	r2, #210	; 0xd2
 8003660:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003666:	f00b f80f 	bl	800e688 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	2196      	movs	r1, #150	; 0x96
 800367a:	480a      	ldr	r0, [pc, #40]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5d0>)
 800367c:	f00b f804 	bl	800e688 <ILI9341_Draw_Text>
				break;
 8003680:	e177      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003682:	bf00      	nop
 8003684:	080138f8 	.word	0x080138f8
 8003688:	08013900 	.word	0x08013900
 800368c:	0801390c 	.word	0x0801390c
 8003690:	08013914 	.word	0x08013914
 8003694:	08013920 	.word	0x08013920
 8003698:	0801392c 	.word	0x0801392c
 800369c:	08013934 	.word	0x08013934
 80036a0:	080138d0 	.word	0x080138d0
 80036a4:	0801393c 	.word	0x0801393c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	210a      	movs	r1, #10
 80036b8:	48b0      	ldr	r0, [pc, #704]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80036ba:	f00a ffe5 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036be:	2300      	movs	r3, #0
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2302      	movs	r3, #2
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ca:	2246      	movs	r2, #70	; 0x46
 80036cc:	210a      	movs	r1, #10
 80036ce:	48ac      	ldr	r0, [pc, #688]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80036d0:	f00a ffda 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e0:	225a      	movs	r2, #90	; 0x5a
 80036e2:	210a      	movs	r1, #10
 80036e4:	48a7      	ldr	r0, [pc, #668]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80036e6:	f00a ffcf 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036f6:	226e      	movs	r2, #110	; 0x6e
 80036f8:	210a      	movs	r1, #10
 80036fa:	48a3      	ldr	r0, [pc, #652]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 80036fc:	f00a ffc4 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2302      	movs	r3, #2
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370c:	2282      	movs	r2, #130	; 0x82
 800370e:	210a      	movs	r1, #10
 8003710:	489e      	ldr	r0, [pc, #632]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003712:	f00a ffb9 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003716:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	2296      	movs	r2, #150	; 0x96
 8003724:	210a      	movs	r1, #10
 8003726:	489a      	ldr	r0, [pc, #616]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003728:	f00a ffae 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800373e:	22aa      	movs	r2, #170	; 0xaa
 8003740:	210a      	movs	r1, #10
 8003742:	4894      	ldr	r0, [pc, #592]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003744:	f00a ffa0 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003748:	f240 23fd 	movw	r3, #765	; 0x2fd
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22d2      	movs	r2, #210	; 0xd2
 8003756:	2105      	movs	r1, #5
 8003758:	488f      	ldr	r0, [pc, #572]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800375a:	f00a ff95 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800375e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2302      	movs	r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	22d2      	movs	r2, #210	; 0xd2
 800376c:	2161      	movs	r1, #97	; 0x61
 800376e:	488a      	ldr	r0, [pc, #552]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003770:	f00a ff8a 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2302      	movs	r3, #2
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	22d2      	movs	r2, #210	; 0xd2
 8003782:	21af      	movs	r1, #175	; 0xaf
 8003784:	4884      	ldr	r0, [pc, #528]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003786:	f00a ff7f 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800378a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	22d2      	movs	r2, #210	; 0xd2
 8003798:	f44f 7182 	mov.w	r1, #260	; 0x104
 800379c:	487e      	ldr	r0, [pc, #504]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800379e:	f00a ff73 	bl	800e688 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ae:	2232      	movs	r2, #50	; 0x32
 80037b0:	2196      	movs	r1, #150	; 0x96
 80037b2:	487a      	ldr	r0, [pc, #488]	; (800399c <FuncMenu_DrawOutputMenu+0x8c8>)
 80037b4:	f00a ff68 	bl	800e688 <ILI9341_Draw_Text>
				break;
 80037b8:	e0db      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ba:	2300      	movs	r3, #0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2302      	movs	r3, #2
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c6:	2232      	movs	r2, #50	; 0x32
 80037c8:	210a      	movs	r1, #10
 80037ca:	486c      	ldr	r0, [pc, #432]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80037cc:	f00a ff5c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037dc:	2246      	movs	r2, #70	; 0x46
 80037de:	210a      	movs	r1, #10
 80037e0:	4867      	ldr	r0, [pc, #412]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037e2:	f00a ff51 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f2:	225a      	movs	r2, #90	; 0x5a
 80037f4:	210a      	movs	r1, #10
 80037f6:	4863      	ldr	r0, [pc, #396]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80037f8:	f00a ff46 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	2302      	movs	r3, #2
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003808:	226e      	movs	r2, #110	; 0x6e
 800380a:	210a      	movs	r1, #10
 800380c:	485e      	ldr	r0, [pc, #376]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 800380e:	f00a ff3b 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2302      	movs	r3, #2
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800381e:	2282      	movs	r2, #130	; 0x82
 8003820:	210a      	movs	r1, #10
 8003822:	485a      	ldr	r0, [pc, #360]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003824:	f00a ff30 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2302      	movs	r3, #2
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003834:	2296      	movs	r2, #150	; 0x96
 8003836:	210a      	movs	r1, #10
 8003838:	4855      	ldr	r0, [pc, #340]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 800383a:	f00a ff25 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	22aa      	movs	r2, #170	; 0xaa
 8003852:	210a      	movs	r1, #10
 8003854:	484f      	ldr	r0, [pc, #316]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003856:	f00a ff17 	bl	800e688 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800385a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	22d2      	movs	r2, #210	; 0xd2
 8003868:	2105      	movs	r1, #5
 800386a:	484b      	ldr	r0, [pc, #300]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800386c:	f00a ff0c 	bl	800e688 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003870:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	22d2      	movs	r2, #210	; 0xd2
 800387e:	2161      	movs	r1, #97	; 0x61
 8003880:	4845      	ldr	r0, [pc, #276]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003882:	f00a ff01 	bl	800e688 <ILI9341_Draw_Text>

				if(pOutChan)
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05a      	beq.n	8003942 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800388c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	22d2      	movs	r2, #210	; 0xd2
 800389a:	21af      	movs	r1, #175	; 0xaf
 800389c:	4840      	ldr	r0, [pc, #256]	; (80039a0 <FuncMenu_DrawOutputMenu+0x8cc>)
 800389e:	f00a fef3 	bl	800e688 <ILI9341_Draw_Text>
					char duty[10] = "";
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039a8 <FuncMenu_DrawOutputMenu+0x8d4>
 80038d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d4:	ee17 0a90 	vmov	r0, s15
 80038d8:	f7fc fe5e 	bl	8000598 <__aeabi_f2d>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	f107 0008 	add.w	r0, r7, #8
 80038e4:	e9cd 3400 	strd	r3, r4, [sp]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <FuncMenu_DrawOutputMenu+0x8d8>)
 80038ea:	210a      	movs	r1, #10
 80038ec:	f00c fa88 	bl	800fe00 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	2300      	movs	r3, #0
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2302      	movs	r3, #2
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003900:	2232      	movs	r2, #50	; 0x32
 8003902:	21dc      	movs	r1, #220	; 0xdc
 8003904:	f00a fec0 	bl	800e688 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003908:	f002 fdde 	bl	80064c8 <SM_IsFuncPwmDutyMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003912:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	2302      	movs	r3, #2
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2300      	movs	r3, #0
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	2196      	movs	r1, #150	; 0x96
 8003922:	4823      	ldr	r0, [pc, #140]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003924:	f00a feb0 	bl	800e688 <ILI9341_Draw_Text>
 8003928:	e016      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800392a:	2300      	movs	r3, #0
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2302      	movs	r3, #2
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	2196      	movs	r1, #150	; 0x96
 800393a:	481d      	ldr	r0, [pc, #116]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 800393c:	f00a fea4 	bl	800e688 <ILI9341_Draw_Text>
 8003940:	e00a      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003942:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	22d2      	movs	r2, #210	; 0xd2
 8003950:	21af      	movs	r1, #175	; 0xaf
 8003952:	4811      	ldr	r0, [pc, #68]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003954:	f00a fe98 	bl	800e688 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003958:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2302      	movs	r3, #2
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	22d2      	movs	r2, #210	; 0xd2
 8003966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800396c:	f00a fe8c 	bl	800e688 <ILI9341_Draw_Text>

				break;
 8003970:	bf00      	nop
				//
		}
	}
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	080138f8 	.word	0x080138f8
 8003980:	08013900 	.word	0x08013900
 8003984:	0801390c 	.word	0x0801390c
 8003988:	08013914 	.word	0x08013914
 800398c:	08013920 	.word	0x08013920
 8003990:	0801392c 	.word	0x0801392c
 8003994:	08013934 	.word	0x08013934
 8003998:	080138d0 	.word	0x080138d0
 800399c:	0801393c 	.word	0x0801393c
 80039a0:	0801394c 	.word	0x0801394c
 80039a4:	40000400 	.word	0x40000400
 80039a8:	42c80000 	.word	0x42c80000
 80039ac:	08013954 	.word	0x08013954
 80039b0:	0801395c 	.word	0x0801395c

080039b4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <GainMenu_DrawMenu+0x20>
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d008      	beq.n	80039da <GainMenu_DrawMenu+0x26>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d000      	beq.n	80039ce <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039cc:	e008      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039ce:	f000 f80b 	bl	80039e8 <GainMenu_DrawMainMenu>
			break;
 80039d2:	e005      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039d4:	f000 f868 	bl	8003aa8 <GainMenu_DrawSignalMenu>
			break;
 80039d8:	e002      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039da:	f000 f87b 	bl	8003ad4 <GainMenu_DrawAuxMenu>
			break;
 80039de:	bf00      	nop

	}
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	220a      	movs	r2, #10
 80039fc:	210a      	movs	r1, #10
 80039fe:	4826      	ldr	r0, [pc, #152]	; (8003a98 <GainMenu_DrawMainMenu+0xb0>)
 8003a00:	f00a fe42 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a04:	f7fd fa8a 	bl	8000f1c <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a08:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	22d2      	movs	r2, #210	; 0xd2
 8003a16:	2105      	movs	r1, #5
 8003a18:	4820      	ldr	r0, [pc, #128]	; (8003a9c <GainMenu_DrawMainMenu+0xb4>)
 8003a1a:	f00a fe35 	bl	800e688 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f002 fa4e 	bl	8005ec0 <SM_GetOutputChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d10b      	bne.n	8003a4c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a34:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	22d2      	movs	r2, #210	; 0xd2
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a46:	f00a fe1f 	bl	800e688 <ILI9341_Draw_Text>
 8003a4a:	e00a      	b.n	8003a62 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a4c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	22d2      	movs	r2, #210	; 0xd2
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <GainMenu_DrawMainMenu+0xbc>)
 8003a5e:	f00a fe13 	bl	800e688 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	22d2      	movs	r2, #210	; 0xd2
 8003a70:	21af      	movs	r1, #175	; 0xaf
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a74:	f00a fe08 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	22d2      	movs	r2, #210	; 0xd2
 8003a86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a8c:	f00a fdfc 	bl	800e688 <ILI9341_Draw_Text>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	08013964 	.word	0x08013964
 8003a9c:	08013970 	.word	0x08013970
 8003aa0:	08013978 	.word	0x08013978
 8003aa4:	08013980 	.word	0x08013980

08003aa8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	220a      	movs	r2, #10
 8003abc:	210a      	movs	r1, #10
 8003abe:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <GainMenu_DrawSignalMenu+0x28>)
 8003ac0:	f00a fde2 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ac4:	f7fd fa2a 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08013984 	.word	0x08013984

08003ad4 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	210a      	movs	r1, #10
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <GainMenu_DrawAuxMenu+0x28>)
 8003aec:	f00a fdcc 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003af0:	f7fd fa14 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08013994 	.word	0x08013994

08003b00 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d007      	beq.n	8003b20 <ToplevelMenu_DrawMenu+0x20>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d008      	beq.n	8003b26 <ToplevelMenu_DrawMenu+0x26>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d000      	beq.n	8003b1a <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003b18:	e008      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003b1a:	f000 f80b 	bl	8003b34 <ToplevelMenu_DrawMainMenu>
			break;
 8003b1e:	e005      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003b20:	f000 f844 	bl	8003bac <ToplevelMenu_DrawOutputMenu>
			break;
 8003b24:	e002      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003b26:	f000 f88b 	bl	8003c40 <ToplevelMenu_DrawInputMenu>
			break;
 8003b2a:	bf00      	nop

	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b3a:	f7fd f9ef 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b3e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	22d2      	movs	r2, #210	; 0xd2
 8003b4c:	2106      	movs	r1, #6
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003b50:	f00a fd9a 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	22d2      	movs	r2, #210	; 0xd2
 8003b62:	215d      	movs	r1, #93	; 0x5d
 8003b64:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <ToplevelMenu_DrawMainMenu+0x70>)
 8003b66:	f00a fd8f 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2302      	movs	r3, #2
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	22d2      	movs	r2, #210	; 0xd2
 8003b78:	21af      	movs	r1, #175	; 0xaf
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b7c:	f00a fd84 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b80:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2302      	movs	r3, #2
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	22d2      	movs	r2, #210	; 0xd2
 8003b8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b94:	f00a fd78 	bl	800e688 <ILI9341_Draw_Text>


}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	080139a4 	.word	0x080139a4
 8003ba4:	080139ac 	.word	0x080139ac
 8003ba8:	080139b4 	.word	0x080139b4

08003bac <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	210a      	movs	r1, #10
 8003bc2:	481a      	ldr	r0, [pc, #104]	; (8003c2c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003bc4:	f00a fd60 	bl	800e688 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bc8:	f7fd f9a8 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bcc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	22d2      	movs	r2, #210	; 0xd2
 8003bda:	210f      	movs	r1, #15
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bde:	f00a fd53 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003be2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	22d2      	movs	r2, #210	; 0xd2
 8003bf0:	2162      	movs	r1, #98	; 0x62
 8003bf2:	4810      	ldr	r0, [pc, #64]	; (8003c34 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bf4:	f00a fd48 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	22d2      	movs	r2, #210	; 0xd2
 8003c06:	21b0      	movs	r1, #176	; 0xb0
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003c0a:	f00a fd3d 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c0e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2302      	movs	r3, #2
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	22d2      	movs	r2, #210	; 0xd2
 8003c1c:	21f5      	movs	r1, #245	; 0xf5
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003c20:	f00a fd32 	bl	800e688 <ILI9341_Draw_Text>
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	080139bc 	.word	0x080139bc
 8003c30:	080139c4 	.word	0x080139c4
 8003c34:	080139cc 	.word	0x080139cc
 8003c38:	080139d4 	.word	0x080139d4
 8003c3c:	080139dc 	.word	0x080139dc

08003c40 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	220a      	movs	r2, #10
 8003c54:	210a      	movs	r1, #10
 8003c56:	4876      	ldr	r0, [pc, #472]	; (8003e30 <ToplevelMenu_DrawInputMenu+0x1f0>)
 8003c58:	f00a fd16 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2302      	movs	r3, #2
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c68:	2232      	movs	r2, #50	; 0x32
 8003c6a:	210a      	movs	r1, #10
 8003c6c:	4871      	ldr	r0, [pc, #452]	; (8003e34 <ToplevelMenu_DrawInputMenu+0x1f4>)
 8003c6e:	f00a fd0b 	bl	800e688 <ILI9341_Draw_Text>
	if(isTriggerInputEnabled)
 8003c72:	4b71      	ldr	r3, [pc, #452]	; (8003e38 <ToplevelMenu_DrawInputMenu+0x1f8>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <ToplevelMenu_DrawInputMenu+0x68>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c7a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	2232      	movs	r2, #50	; 0x32
 8003c88:	2196      	movs	r1, #150	; 0x96
 8003c8a:	486c      	ldr	r0, [pc, #432]	; (8003e3c <ToplevelMenu_DrawInputMenu+0x1fc>)
 8003c8c:	f00a fcfc 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c90:	2300      	movs	r3, #0
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	2302      	movs	r3, #2
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c9c:	2232      	movs	r2, #50	; 0x32
 8003c9e:	21c8      	movs	r1, #200	; 0xc8
 8003ca0:	4867      	ldr	r0, [pc, #412]	; (8003e40 <ToplevelMenu_DrawInputMenu+0x200>)
 8003ca2:	f00a fcf1 	bl	800e688 <ILI9341_Draw_Text>
 8003ca6:	e015      	b.n	8003cd4 <ToplevelMenu_DrawInputMenu+0x94>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2302      	movs	r3, #2
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cb4:	2232      	movs	r2, #50	; 0x32
 8003cb6:	2196      	movs	r1, #150	; 0x96
 8003cb8:	4860      	ldr	r0, [pc, #384]	; (8003e3c <ToplevelMenu_DrawInputMenu+0x1fc>)
 8003cba:	f00a fce5 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cbe:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2232      	movs	r2, #50	; 0x32
 8003ccc:	21c8      	movs	r1, #200	; 0xc8
 8003cce:	485c      	ldr	r0, [pc, #368]	; (8003e40 <ToplevelMenu_DrawInputMenu+0x200>)
 8003cd0:	f00a fcda 	bl	800e688 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ce0:	2246      	movs	r2, #70	; 0x46
 8003ce2:	210a      	movs	r1, #10
 8003ce4:	4857      	ldr	r0, [pc, #348]	; (8003e44 <ToplevelMenu_DrawInputMenu+0x204>)
 8003ce6:	f00a fccf 	bl	800e688 <ILI9341_Draw_Text>
	if(activeInputerTriggerMode == INPUT_TRIGGER_TIM)
 8003cea:	4b57      	ldr	r3, [pc, #348]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d122      	bne.n	8003d38 <ToplevelMenu_DrawInputMenu+0xf8>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cf2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2246      	movs	r2, #70	; 0x46
 8003d00:	2196      	movs	r1, #150	; 0x96
 8003d02:	4852      	ldr	r0, [pc, #328]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003d04:	f00a fcc0 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d14:	2246      	movs	r2, #70	; 0x46
 8003d16:	21c8      	movs	r1, #200	; 0xc8
 8003d18:	484d      	ldr	r0, [pc, #308]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003d1a:	f00a fcb5 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2302      	movs	r3, #2
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d2a:	2246      	movs	r2, #70	; 0x46
 8003d2c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d30:	4848      	ldr	r0, [pc, #288]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003d32:	f00a fca9 	bl	800e688 <ILI9341_Draw_Text>
 8003d36:	e04c      	b.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_COMP)
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d122      	bne.n	8003d86 <ToplevelMenu_DrawInputMenu+0x146>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d40:	2300      	movs	r3, #0
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	2302      	movs	r3, #2
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	2196      	movs	r1, #150	; 0x96
 8003d50:	483e      	ldr	r0, [pc, #248]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003d52:	f00a fc99 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d56:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	2246      	movs	r2, #70	; 0x46
 8003d64:	21c8      	movs	r1, #200	; 0xc8
 8003d66:	483a      	ldr	r0, [pc, #232]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003d68:	f00a fc8e 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2302      	movs	r3, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d78:	2246      	movs	r2, #70	; 0x46
 8003d7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d7e:	4835      	ldr	r0, [pc, #212]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003d80:	f00a fc82 	bl	800e688 <ILI9341_Draw_Text>
 8003d84:	e025      	b.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_ADC)
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d121      	bne.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2302      	movs	r3, #2
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d9a:	2246      	movs	r2, #70	; 0x46
 8003d9c:	2196      	movs	r1, #150	; 0x96
 8003d9e:	482b      	ldr	r0, [pc, #172]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003da0:	f00a fc72 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003da4:	2300      	movs	r3, #0
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2302      	movs	r3, #2
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003db0:	2246      	movs	r2, #70	; 0x46
 8003db2:	21c8      	movs	r1, #200	; 0xc8
 8003db4:	4826      	ldr	r0, [pc, #152]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003db6:	f00a fc67 	bl	800e688 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2246      	movs	r2, #70	; 0x46
 8003dc8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003dcc:	4821      	ldr	r0, [pc, #132]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003dce:	f00a fc5b 	bl	800e688 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003dd2:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	2302      	movs	r3, #2
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	22cc      	movs	r2, #204	; 0xcc
 8003de0:	2114      	movs	r1, #20
 8003de2:	481d      	ldr	r0, [pc, #116]	; (8003e58 <ToplevelMenu_DrawInputMenu+0x218>)
 8003de4:	f00a fc50 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003de8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2302      	movs	r3, #2
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	22de      	movs	r2, #222	; 0xde
 8003df6:	2114      	movs	r1, #20
 8003df8:	4818      	ldr	r0, [pc, #96]	; (8003e5c <ToplevelMenu_DrawInputMenu+0x21c>)
 8003dfa:	f00a fc45 	bl	800e688 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003dfe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	2302      	movs	r3, #2
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	22cc      	movs	r2, #204	; 0xcc
 8003e0c:	2168      	movs	r1, #104	; 0x68
 8003e0e:	4814      	ldr	r0, [pc, #80]	; (8003e60 <ToplevelMenu_DrawInputMenu+0x220>)
 8003e10:	f00a fc3a 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	22de      	movs	r2, #222	; 0xde
 8003e22:	2161      	movs	r1, #97	; 0x61
 8003e24:	480f      	ldr	r0, [pc, #60]	; (8003e64 <ToplevelMenu_DrawInputMenu+0x224>)
 8003e26:	f00a fc2f 	bl	800e688 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080139e4 	.word	0x080139e4
 8003e34:	080139ec 	.word	0x080139ec
 8003e38:	20001e59 	.word	0x20001e59
 8003e3c:	080139f8 	.word	0x080139f8
 8003e40:	080139fc 	.word	0x080139fc
 8003e44:	08013a00 	.word	0x08013a00
 8003e48:	20001e5a 	.word	0x20001e5a
 8003e4c:	08013a08 	.word	0x08013a08
 8003e50:	08013a0c 	.word	0x08013a0c
 8003e54:	08013a14 	.word	0x08013a14
 8003e58:	08013a18 	.word	0x08013a18
 8003e5c:	08013a1c 	.word	0x08013a1c
 8003e60:	08013a24 	.word	0x08013a24
 8003e64:	08013a28 	.word	0x08013a28

08003e68 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <BiasMenu_getStatus+0x14>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20001e51 	.word	0x20001e51

08003e80 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003e84:	f7fd fb0a 	bl	800149c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <BiasMenuEntryHandler+0x30>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <BiasMenuEntryHandler+0x34>)
 8003e90:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003e96:	f001 f8c1 	bl	800501c <BO_GetDcBiasEncoderValue>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <BiasMenuEntryHandler+0x34>)
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <BiasMenuEntryHandler+0x38>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003ea8:	230e      	movs	r3, #14
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20001e51 	.word	0x20001e51
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	20001e53 	.word	0x20001e53

08003ebc <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f002 fa79 	bl	80063b8 <SM_GetEncoderValue>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f8b3 	bl	8005034 <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <BiasMenuInputHandler+0x20>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003ed4:	230e      	movs	r3, #14
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20001e53 	.word	0x20001e53

08003ee0 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <BiasMenuExitHandler+0x1c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003eea:	f7fd fad7 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <BiasMenuExitHandler+0x20>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003ef4:	2301      	movs	r3, #1
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20001e51 	.word	0x20001e51
 8003f00:	20001e53 	.word	0x20001e53

08003f04 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003f0a:	4baa      	ldr	r3, [pc, #680]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b0e      	cmp	r3, #14
 8003f10:	f200 8206 	bhi.w	8004320 <EM_ProcessEvent+0x41c>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <EM_ProcessEvent+0x18>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08004005 	.word	0x08004005
 8003f28:	08004051 	.word	0x08004051
 8003f2c:	08004091 	.word	0x08004091
 8003f30:	080040bd 	.word	0x080040bd
 8003f34:	080040fd 	.word	0x080040fd
 8003f38:	0800415b 	.word	0x0800415b
 8003f3c:	08004187 	.word	0x08004187
 8003f40:	08004321 	.word	0x08004321
 8003f44:	080041bd 	.word	0x080041bd
 8003f48:	08004217 	.word	0x08004217
 8003f4c:	08004243 	.word	0x08004243
 8003f50:	0800426d 	.word	0x0800426d
 8003f54:	080042f1 	.word	0x080042f1

			#ifdef EVENT_MENU_DEBUG
			  printf("Idle_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 8003f58:	4b97      	ldr	r3, [pc, #604]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <EM_ProcessEvent+0x68>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003f60:	f000 fe26 	bl	8004bb0 <ToplevelOutputMenuEntryHandler>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f6a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 81d7 	bne.w	8004324 <EM_ProcessEvent+0x420>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003f76:	f000 fe3f 	bl	8004bf8 <ToplevelInputMenuEntryHandler>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003f82:	e1cf      	b.n	8004324 <EM_ProcessEvent+0x420>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Output_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003f84:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d105      	bne.n	8003f98 <EM_ProcessEvent+0x94>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003f8c:	f000 fe22 	bl	8004bd4 <ToplevelOutputMenuExitHandler>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003f98:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <EM_ProcessEvent+0xae>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 fdf5 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003fa6:	f000 fc09 	bl	80047bc <FuncMainMenuEntryHandler>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fb0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d108      	bne.n	8003fcc <EM_ProcessEvent+0xc8>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 fde8 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003fc0:	f000 fb30 	bl	8004624 <FreqMainMenuEntryHandler>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fcc:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d108      	bne.n	8003fe6 <EM_ProcessEvent+0xe2>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 fddb 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003fda:	f000 fce7 	bl	80049ac <GainMainMenuEntryHandler>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b74      	ldr	r3, [pc, #464]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fe4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003fe6:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	f040 819c 	bne.w	8004328 <EM_ProcessEvent+0x424>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f000 fdcd 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003ff6:	f7ff ff43 	bl	8003e80 <BiasMenuEntryHandler>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004000:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004002:	e191      	b.n	8004328 <EM_ProcessEvent+0x424>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Input_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b06      	cmp	r3, #6
 800400a:	d105      	bne.n	8004018 <EM_ProcessEvent+0x114>
			{
				eNextState = ToplevelInputMenuExitHandler();
 800400c:	f000 fe74 	bl	8004cf8 <ToplevelInputMenuExitHandler>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004016:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8004018:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <EM_ProcessEvent+0x12e>
			{
				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004020:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fdf9 	bl	8004c1c <ToplevelInputMenuInputHandler>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004030:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 8178 	bne.w	800432c <EM_ProcessEvent+0x428>
			{

				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800403c:	4b5e      	ldr	r3, [pc, #376]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fdeb 	bl	8004c1c <ToplevelInputMenuInputHandler>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800404c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800404e:	e16d      	b.n	800432c <EM_ProcessEvent+0x428>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d105      	bne.n	8004064 <EM_ProcessEvent+0x160>
			{
				eNextState = FuncMainMenuExitHandler();
 8004058:	f000 fbc2 	bl	80047e0 <FuncMainMenuExitHandler>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004062:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8004064:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <EM_ProcessEvent+0x174>
			{
				eNextState = FuncSignalMenuEntryHandler();
 800406c:	f000 fbcc 	bl	8004808 <FuncSignalMenuEntryHandler>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004076:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	f040 8157 	bne.w	8004330 <EM_ProcessEvent+0x42c>
			{
				eNextState = FuncAuxMenuEntryHandler();
 8004082:	f000 fc05 	bl	8004890 <FuncAuxMenuEntryHandler>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800408c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800408e:	e14f      	b.n	8004330 <EM_ProcessEvent+0x42c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d105      	bne.n	80040a4 <EM_ProcessEvent+0x1a0>
			{
				eNextState = FuncSignalMenuInputHandler();
 8004098:	f000 fbd4 	bl	8004844 <FuncSignalMenuInputHandler>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040a2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040a4:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b06      	cmp	r3, #6
 80040aa:	f040 8143 	bne.w	8004334 <EM_ProcessEvent+0x430>
			{
				eNextState = FuncSignalMenuExitHandler();
 80040ae:	f000 fbdb 	bl	8004868 <FuncSignalMenuExitHandler>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b3f      	ldr	r3, [pc, #252]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040b8:	701a      	strb	r2, [r3, #0]
			}


			break;
 80040ba:	e13b      	b.n	8004334 <EM_ProcessEvent+0x430>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80040bc:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d105      	bne.n	80040d0 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuInputHandler();
 80040c4:	f000 fc04 	bl	80048d0 <FuncAuxMenuInputHandler>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040ce:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d105      	bne.n	80040e4 <EM_ProcessEvent+0x1e0>
			{
				eNextState = FuncAuxMenuExitHandler();
 80040d8:	f000 fc48 	bl	800496c <FuncAuxMenuExitHandler>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040e2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	f040 8125 	bne.w	8004338 <EM_ProcessEvent+0x434>
			{
				eNextState = FuncAuxToggleDutyMode();
 80040ee:	f000 fc2b 	bl	8004948 <FuncAuxToggleDutyMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040f8:	701a      	strb	r2, [r3, #0]
			}

			break;
 80040fa:	e11d      	b.n	8004338 <EM_ProcessEvent+0x434>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d108      	bne.n	8004116 <EM_ProcessEvent+0x212>
			{
				eNextState = GainMainMenuExitHandler();
 8004104:	f000 fc64 	bl	80049d0 <GainMainMenuExitHandler>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800410e:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004110:	2002      	movs	r0, #2
 8004112:	f000 fd3d 	bl	8004b90 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <EM_ProcessEvent+0x226>
			{
				eNextState = GainSignalMenuEntryHandler();
 800411e:	f000 fc69 	bl	80049f4 <GainSignalMenuEntryHandler>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004128:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	f040 8104 	bne.w	800433c <EM_ProcessEvent+0x438>
			{
				eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004134:	2001      	movs	r0, #1
 8004136:	f001 fec3 	bl	8005ec0 <SM_GetOutputChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	71fb      	strb	r3, [r7, #7]
				if(aux_output_func != PWM_FUNC_MODE)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b06      	cmp	r3, #6
 8004148:	f000 80f8 	beq.w	800433c <EM_ProcessEvent+0x438>
					eNextState = GainAuxMenuEntryHandler();
 800414c:	f000 fcc0 	bl	8004ad0 <GainAuxMenuEntryHandler>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004156:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004158:	e0f0      	b.n	800433c <EM_ProcessEvent+0x438>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d105      	bne.n	800416e <EM_ProcessEvent+0x26a>
			{
				eNextState = GainSignalMenuInputHandler();
 8004162:	f000 fc79 	bl	8004a58 <GainSignalMenuInputHandler>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800416c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b06      	cmp	r3, #6
 8004174:	f040 80e4 	bne.w	8004340 <EM_ProcessEvent+0x43c>
			{
				eNextState = GainSignalMenuExitHandler();
 8004178:	f000 fc98 	bl	8004aac <GainSignalMenuExitHandler>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004182:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004184:	e0dc      	b.n	8004340 <EM_ProcessEvent+0x43c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d105      	bne.n	800419a <EM_ProcessEvent+0x296>
			{
				eNextState = GainAuxMenuInputHandler();
 800418e:	f000 fccf 	bl	8004b30 <GainAuxMenuInputHandler>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004198:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	f040 80d0 	bne.w	8004344 <EM_ProcessEvent+0x440>
			{
				eNextState = GainAuxMenuExitHandler();
 80041a4:	f000 fcd6 	bl	8004b54 <GainAuxMenuExitHandler>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80041ae:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041b0:	e0c8      	b.n	8004344 <EM_ProcessEvent+0x440>
 80041b2:	bf00      	nop
 80041b4:	20001e52 	.word	0x20001e52
 80041b8:	20001e53 	.word	0x20001e53

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Main_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 80041bc:	4b69      	ldr	r3, [pc, #420]	; (8004364 <EM_ProcessEvent+0x460>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d108      	bne.n	80041d6 <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqMainMenuExitHandler();
 80041c4:	f000 fa40 	bl	8004648 <FreqMainMenuExitHandler>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b66      	ldr	r3, [pc, #408]	; (8004368 <EM_ProcessEvent+0x464>)
 80041ce:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80041d0:	2002      	movs	r0, #2
 80041d2:	f000 fcdd 	bl	8004b90 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <EM_ProcessEvent+0x460>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <EM_ProcessEvent+0x2e6>
			{
				eNextState = FreqPresetMenuEntryHandler();
 80041de:	f000 fa4b 	bl	8004678 <FreqPresetMenuEntryHandler>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b60      	ldr	r3, [pc, #384]	; (8004368 <EM_ProcessEvent+0x464>)
 80041e8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <EM_ProcessEvent+0x460>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d105      	bne.n	80041fe <EM_ProcessEvent+0x2fa>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80041f2:	f000 fa91 	bl	8004718 <FreqAdjustMenuEntryHandler>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <EM_ProcessEvent+0x464>)
 80041fc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80041fe:	4b59      	ldr	r3, [pc, #356]	; (8004364 <EM_ProcessEvent+0x460>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b03      	cmp	r3, #3
 8004204:	f040 80a0 	bne.w	8004348 <EM_ProcessEvent+0x444>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8004208:	f000 f8c0 	bl	800438c <FreqSweepMenuEntryHandler>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	4b55      	ldr	r3, [pc, #340]	; (8004368 <EM_ProcessEvent+0x464>)
 8004212:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004214:	e098      	b.n	8004348 <EM_ProcessEvent+0x444>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Preset_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <EM_ProcessEvent+0x460>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d105      	bne.n	800422a <EM_ProcessEvent+0x326>
			{
				eNextState = FreqPresetMenuInputHandler();
 800421e:	f000 fa57 	bl	80046d0 <FreqPresetMenuInputHandler>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4b50      	ldr	r3, [pc, #320]	; (8004368 <EM_ProcessEvent+0x464>)
 8004228:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800422a:	4b4e      	ldr	r3, [pc, #312]	; (8004364 <EM_ProcessEvent+0x460>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b06      	cmp	r3, #6
 8004230:	f040 808c 	bne.w	800434c <EM_ProcessEvent+0x448>
			{
				eNextState = FreqPresetMenuExitHandler();
 8004234:	f000 fa5e 	bl	80046f4 <FreqPresetMenuExitHandler>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <EM_ProcessEvent+0x464>)
 800423e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004240:	e084      	b.n	800434c <EM_ProcessEvent+0x448>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Adjust_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <EM_ProcessEvent+0x460>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d105      	bne.n	8004256 <EM_ProcessEvent+0x352>
			{
				eNextState = FreqAdjustMenuInputHandler();
 800424a:	f000 fa81 	bl	8004750 <FreqAdjustMenuInputHandler>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	4b45      	ldr	r3, [pc, #276]	; (8004368 <EM_ProcessEvent+0x464>)
 8004254:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <EM_ProcessEvent+0x460>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b06      	cmp	r3, #6
 800425c:	d178      	bne.n	8004350 <EM_ProcessEvent+0x44c>
			{
				eNextState = FreqAdjustMenuExitHandler();
 800425e:	f000 fa83 	bl	8004768 <FreqAdjustMenuExitHandler>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b40      	ldr	r3, [pc, #256]	; (8004368 <EM_ProcessEvent+0x464>)
 8004268:	701a      	strb	r2, [r3, #0]
			}
			break;
 800426a:	e071      	b.n	8004350 <EM_ProcessEvent+0x44c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Sweep_Menu_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 800426c:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <EM_ProcessEvent+0x460>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <EM_ProcessEvent+0x37e>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004274:	2007      	movs	r0, #7
 8004276:	f000 f8df 	bl	8004438 <FreqSweepMenuInputHandler>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <EM_ProcessEvent+0x464>)
 8004280:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <EM_ProcessEvent+0x460>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d106      	bne.n	8004298 <EM_ProcessEvent+0x394>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800428a:	2008      	movs	r0, #8
 800428c:	f000 f8d4 	bl	8004438 <FreqSweepMenuInputHandler>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <EM_ProcessEvent+0x464>)
 8004296:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <EM_ProcessEvent+0x460>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d106      	bne.n	80042ae <EM_ProcessEvent+0x3aa>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80042a0:	2009      	movs	r0, #9
 80042a2:	f000 f8c9 	bl	8004438 <FreqSweepMenuInputHandler>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <EM_ProcessEvent+0x464>)
 80042ac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80042ae:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <EM_ProcessEvent+0x460>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d106      	bne.n	80042c4 <EM_ProcessEvent+0x3c0>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80042b6:	200a      	movs	r0, #10
 80042b8:	f000 f8be 	bl	8004438 <FreqSweepMenuInputHandler>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <EM_ProcessEvent+0x464>)
 80042c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <EM_ProcessEvent+0x460>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d106      	bne.n	80042da <EM_ProcessEvent+0x3d6>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80042cc:	200b      	movs	r0, #11
 80042ce:	f000 f8b3 	bl	8004438 <FreqSweepMenuInputHandler>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <EM_ProcessEvent+0x464>)
 80042d8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <EM_ProcessEvent+0x460>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d138      	bne.n	8004354 <EM_ProcessEvent+0x450>
			{
				eNextState = FreqSweepMenuExitHandler();
 80042e2:	f000 f97f 	bl	80045e4 <FreqSweepMenuExitHandler>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <EM_ProcessEvent+0x464>)
 80042ec:	701a      	strb	r2, [r3, #0]
			}

			break;
 80042ee:	e031      	b.n	8004354 <EM_ProcessEvent+0x450>

			#ifdef EVENT_MENU_DEBUG
				  printf("Bias_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <EM_ProcessEvent+0x460>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d105      	bne.n	8004304 <EM_ProcessEvent+0x400>
			{
				eNextState = BiasMenuInputHandler();
 80042f8:	f7ff fde0 	bl	8003ebc <BiasMenuInputHandler>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <EM_ProcessEvent+0x464>)
 8004302:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <EM_ProcessEvent+0x460>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d125      	bne.n	8004358 <EM_ProcessEvent+0x454>
			{
				eNextState = BiasMenuExitHandler();
 800430c:	f7ff fde8 	bl	8003ee0 <BiasMenuExitHandler>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <EM_ProcessEvent+0x464>)
 8004316:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004318:	2002      	movs	r0, #2
 800431a:	f000 fc39 	bl	8004b90 <ToplevelMenu_setStatus>
			}

			break;
 800431e:	e01b      	b.n	8004358 <EM_ProcessEvent+0x454>

		default:
			break;
 8004320:	bf00      	nop
 8004322:	e01a      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004324:	bf00      	nop
 8004326:	e018      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004328:	bf00      	nop
 800432a:	e016      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800432c:	bf00      	nop
 800432e:	e014      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004330:	bf00      	nop
 8004332:	e012      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004334:	bf00      	nop
 8004336:	e010      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004338:	bf00      	nop
 800433a:	e00e      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800433c:	bf00      	nop
 800433e:	e00c      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004340:	bf00      	nop
 8004342:	e00a      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004344:	bf00      	nop
 8004346:	e008      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004348:	bf00      	nop
 800434a:	e006      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004358:	bf00      	nop
	}

}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20001e53 	.word	0x20001e53
 8004368:	20001e52 	.word	0x20001e52

0800436c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004376:	4a04      	ldr	r2, [pc, #16]	; (8004388 <EM_SetNewEvent+0x1c>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	7013      	strb	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20001e53 	.word	0x20001e53

0800438c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004390:	f7fd f884 	bl	800149c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d009      	beq.n	80043c6 <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80043b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043c2:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80043d0:	eef4 7a47 	vcmp.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	d101      	bne.n	80043de <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 80043da:	f001 f807 	bl	80053ec <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80043de:	2000      	movs	r0, #0
 80043e0:	f001 f85a 	bl	8005498 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f001 f8b7 	bl	8005558 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80043ea:	f001 f8f1 	bl	80055d0 <FS_GetCalculatedSweepFrequencyInHertz>
 80043ee:	eef0 7a40 	vmov.f32	s15, s0
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <FreqSweepMenuEntryHandler+0x9c>)
 80043f4:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80043fe:	2009      	movs	r0, #9
 8004400:	f000 f81a 	bl	8004438 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 8004406:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800440c:	4b07      	ldr	r3, [pc, #28]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 800440e:	2200      	movs	r2, #0
 8004410:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <FreqSweepMenuEntryHandler+0xa4>)
 8004414:	2204      	movs	r2, #4
 8004416:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <FreqSweepMenuEntryHandler+0xa8>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800441e:	230d      	movs	r3, #13
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000124 	.word	0x20000124
 8004428:	20001eac 	.word	0x20001eac
 800442c:	40000c00 	.word	0x40000c00
 8004430:	20001e56 	.word	0x20001e56
 8004434:	20001e53 	.word	0x20001e53

08004438 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	3b07      	subs	r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	f200 80b2 	bhi.w	80045b0 <FreqSweepMenuInputHandler+0x178>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <FreqSweepMenuInputHandler+0x1c>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004469 	.word	0x08004469
 8004458:	08004483 	.word	0x08004483
 800445c:	080045a1 	.word	0x080045a1
 8004460:	080045a9 	.word	0x080045a9
 8004464:	080044bd 	.word	0x080044bd
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004468:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]
			break;
 8004480:	e097      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	f083 0301 	eor.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 800448e:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d004      	beq.n	80044a2 <FreqSweepMenuInputHandler+0x6a>
 8004498:	2b02      	cmp	r3, #2
 800449a:	d008      	beq.n	80044ae <FreqSweepMenuInputHandler+0x76>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <FreqSweepMenuInputHandler+0x70>
 80044a0:	e006      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80044a2:	f000 ffa3 	bl	80053ec <FS_SetSweepModeDown>
					break;
 80044a6:	e003      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80044a8:	f000 ffce 	bl	8005448 <FS_SetSweepModeUp>
					break;
 80044ac:	e000      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80044ae:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80044b0:	4b46      	ldr	r3, [pc, #280]	; (80045cc <FreqSweepMenuInputHandler+0x194>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ffef 	bl	8005498 <FS_SetEncoderControlMode>

			break;
 80044ba:	e07a      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <FreqSweepMenuInputHandler+0x194>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <FreqSweepMenuInputHandler+0x92>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d00b      	beq.n	80044e0 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 80044c8:	e073      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80044ca:	2000      	movs	r0, #0
 80044cc:	f001 f844 	bl	8005558 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80044d0:	f001 f87e 	bl	80055d0 <FS_GetCalculatedSweepFrequencyInHertz>
 80044d4:	eef0 7a40 	vmov.f32	s15, s0
 80044d8:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <FreqSweepMenuInputHandler+0x198>)
 80044da:	edc3 7a00 	vstr	s15, [r3]
					break;
 80044de:	e05e      	b.n	800459e <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <FreqSweepMenuInputHandler+0xb6>
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d02a      	beq.n	8004542 <FreqSweepMenuInputHandler+0x10a>
							break;
 80044ec:	e056      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d803      	bhi.n	80044fe <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80044f6:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 80044f8:	220d      	movs	r2, #13
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80044fc:	e04e      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80044fe:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450a:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 800450c:	edd3 7a00 	vldr	s15, [r3]
 8004510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	dd09      	ble.n	800452e <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004526:	ee17 2a90 	vmov	r2, s15
 800452a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800452c:	e036      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 800453c:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004540:	e02c      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800454a:	4293      	cmp	r3, r2
 800454c:	d904      	bls.n	8004558 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800454e:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004556:	e020      	b.n	800459a <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d509      	bpl.n	8004588 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800457c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004580:	ee17 2a90 	vmov	r2, s15
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004586:	e008      	b.n	800459a <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 8004596:	edc3 7a00 	vstr	s15, [r3]
							break;
 800459a:	bf00      	nop
					break;
 800459c:	bf00      	nop
			break;
 800459e:	e008      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f000 ff79 	bl	8005498 <FS_SetEncoderControlMode>

			break;
 80045a6:	e004      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80045a8:	2001      	movs	r0, #1
 80045aa:	f000 ff75 	bl	8005498 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80045ae:	e000      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 80045b0:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <FreqSweepMenuInputHandler+0x1a8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80045b8:	230d      	movs	r3, #13
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	20001e54 	.word	0x20001e54
 80045cc:	20001e55 	.word	0x20001e55
 80045d0:	20001eac 	.word	0x20001eac
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	20000124 	.word	0x20000124
 80045dc:	20000120 	.word	0x20000120
 80045e0:	20001e53 	.word	0x20001e53

080045e4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80045e8:	f7fc ff58 	bl	800149c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a09      	ldr	r2, [pc, #36]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <FreqSweepMenuExitHandler+0x38>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <FreqSweepMenuExitHandler+0x3c>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004610:	230a      	movs	r3, #10
}
 8004612:	4618      	mov	r0, r3
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40000c00 	.word	0x40000c00
 800461c:	20001e56 	.word	0x20001e56
 8004620:	20001e53 	.word	0x20001e53

08004624 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004628:	f7fc ff38 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <FreqMainMenuEntryHandler+0x1c>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <FreqMainMenuEntryHandler+0x20>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004638:	230a      	movs	r3, #10
}
 800463a:	4618      	mov	r0, r3
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20001e56 	.word	0x20001e56
 8004644:	20001e53 	.word	0x20001e53

08004648 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <FreqMainMenuExitHandler+0x24>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <FreqMainMenuExitHandler+0x28>)
 8004654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 800465a:	f7fc ff1f 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <FreqMainMenuExitHandler+0x2c>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004664:	2301      	movs	r3, #1
}
 8004666:	4618      	mov	r0, r3
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20001e56 	.word	0x20001e56
 8004670:	40012c00 	.word	0x40012c00
 8004674:	20001e53 	.word	0x20001e53

08004678 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800467e:	f7fc ff0d 	bl	800149c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004682:	f000 fea7 	bl	80053d4 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <FreqPresetMenuEntryHandler+0x48>)
 8004688:	2202      	movs	r2, #2
 800468a:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800468c:	f000 fe54 	bl	8005338 <FreqO_GetFPresetObject>
 8004690:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <FreqPresetMenuEntryHandler+0x4c>)
 800469a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <FreqPresetMenuEntryHandler+0x4c>)
 80046a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80046a8:	e002      	b.n	80046b0 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80046aa:	4807      	ldr	r0, [pc, #28]	; (80046c8 <FreqPresetMenuEntryHandler+0x50>)
 80046ac:	f7fc ff3c 	bl	8001528 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <FreqPresetMenuEntryHandler+0x54>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80046b6:	230b      	movs	r3, #11
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20001e56 	.word	0x20001e56
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	08013a30 	.word	0x08013a30
 80046cc:	20001e53 	.word	0x20001e53

080046d0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80046d4:	2001      	movs	r0, #1
 80046d6:	f001 fe6f 	bl	80063b8 <SM_GetEncoderValue>
 80046da:	4603      	mov	r3, r0
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fd7d 	bl	80051dc <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <FreqPresetMenuInputHandler+0x20>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80046e8:	230b      	movs	r3, #11
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20001e53 	.word	0x20001e53

080046f4 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80046f8:	f7fc fed0 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <FreqPresetMenuExitHandler+0x1c>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <FreqPresetMenuExitHandler+0x20>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004708:	230a      	movs	r3, #10
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20001e56 	.word	0x20001e56
 8004714:	20001e53 	.word	0x20001e53

08004718 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800471c:	f7fc febe 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <FreqAdjustMenuEntryHandler+0x2c>)
 8004722:	2203      	movs	r2, #3
 8004724:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <FreqAdjustMenuEntryHandler+0x30>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <FreqAdjustMenuEntryHandler+0x30>)
 8004732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <FreqAdjustMenuEntryHandler+0x34>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800473e:	230c      	movs	r3, #12
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20001e56 	.word	0x20001e56
 8004748:	40012c00 	.word	0x40012c00
 800474c:	20001e53 	.word	0x20001e53

08004750 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004754:	f000 fdc2 	bl	80052dc <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <FreqAdjustMenuInputHandler+0x14>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800475e:	230c      	movs	r3, #12
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20001e53 	.word	0x20001e53

08004768 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800476c:	f7fc fe96 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <FreqAdjustMenuExitHandler+0x1c>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <FreqAdjustMenuExitHandler+0x20>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800477c:	230a      	movs	r3, #10
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20001e56 	.word	0x20001e56
 8004788:	20001e53 	.word	0x20001e53

0800478c <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <FreqMenu_getStatus+0x14>)
 8004792:	781b      	ldrb	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001e56 	.word	0x20001e56

080047a4 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <FuncMenu_getStatus+0x14>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20001e57 	.word	0x20001e57

080047bc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80047c0:	f7fc fe6c 	bl	800149c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <FuncMainMenuEntryHandler+0x1c>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <FuncMainMenuEntryHandler+0x20>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80047d0:	2303      	movs	r3, #3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001e57 	.word	0x20001e57
 80047dc:	20001e53 	.word	0x20001e53

080047e0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <FuncMainMenuExitHandler+0x20>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80047ea:	2002      	movs	r0, #2
 80047ec:	f000 f9d0 	bl	8004b90 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 80047f0:	f7fc fe54 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <FuncMainMenuExitHandler+0x24>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20001e57 	.word	0x20001e57
 8004804:	20001e53 	.word	0x20001e53

08004808 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800480c:	f7fc fe46 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004810:	f000 ff0c 	bl	800562c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <FuncSignalMenuEntryHandler+0x30>)
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <FuncSignalMenuEntryHandler+0x34>)
 800481c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <FuncSignalMenuEntryHandler+0x34>)
 8004824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <FuncSignalMenuEntryHandler+0x38>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004830:	2304      	movs	r3, #4
}
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20001e57 	.word	0x20001e57
 800483c:	40012c00 	.word	0x40012c00
 8004840:	20001e53 	.word	0x20001e53

08004844 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004848:	2001      	movs	r0, #1
 800484a:	f001 fdb5 	bl	80063b8 <SM_GetEncoderValue>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fef7 	bl	8005644 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <FuncSignalMenuInputHandler+0x20>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800485c:	2304      	movs	r3, #4
}
 800485e:	4618      	mov	r0, r3
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20001e53 	.word	0x20001e53

08004868 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <FuncSignalMenuExitHandler+0x20>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004872:	f7fc fe13 	bl	800149c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004876:	f001 fe43 	bl	8006500 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <FuncSignalMenuExitHandler+0x24>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004880:	2303      	movs	r3, #3
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001e57 	.word	0x20001e57
 800488c:	20001e53 	.word	0x20001e53

08004890 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004894:	f7fc fe02 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004898:	f000 fec8 	bl	800562c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <FuncAuxMenuEntryHandler+0x30>)
 800489e:	2203      	movs	r2, #3
 80048a0:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <FuncAuxMenuEntryHandler+0x34>)
 80048a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <FuncAuxMenuEntryHandler+0x34>)
 80048ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <FuncAuxMenuEntryHandler+0x38>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80048b8:	2305      	movs	r3, #5
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20001e57 	.word	0x20001e57
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	20001e53 	.word	0x20001e53
 80048cc:	00000000 	.word	0x00000000

080048d0 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 80048d6:	f001 fdf7 	bl	80064c8 <SM_IsFuncPwmDutyMode>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f001 fd69 	bl	80063b8 <SM_GetEncoderValue>
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fe31 	bl	8000554 <__aeabi_ui2d>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004938 <FuncAuxMenuInputHandler+0x68>
 80048fa:	ec44 3b10 	vmov	d0, r3, r4
 80048fe:	f00d fb8f 	bl	8012020 <pow>
 8004902:	ec53 2b10 	vmov	r2, r3, d0
 8004906:	4c0e      	ldr	r4, [pc, #56]	; (8004940 <FuncAuxMenuInputHandler+0x70>)
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f974 	bl	8000bf8 <__aeabi_d2uiz>
 8004910:	4603      	mov	r3, r0
 8004912:	6363      	str	r3, [r4, #52]	; 0x34
 8004914:	e006      	b.n	8004924 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004916:	2001      	movs	r0, #1
 8004918:	f001 fd4e 	bl	80063b8 <SM_GetEncoderValue>
 800491c:	4603      	mov	r3, r0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 feca 	bl	80056b8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <FuncAuxMenuInputHandler+0x74>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800492a:	2305      	movs	r3, #5
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	f3af 8000 	nop.w
 8004938:	00000000 	.word	0x00000000
 800493c:	40000000 	.word	0x40000000
 8004940:	40000400 	.word	0x40000400
 8004944:	20001e53 	.word	0x20001e53

08004948 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 800494c:	f001 fdc8 	bl	80064e0 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <FuncAuxToggleDutyMode+0x1c>)
 8004952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <FuncAuxToggleDutyMode+0x20>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800495e:	2305      	movs	r3, #5
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012c00 	.word	0x40012c00
 8004968:	20001e53 	.word	0x20001e53

0800496c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <FuncAuxMenuExitHandler+0x20>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004976:	f001 fdc3 	bl	8006500 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800497a:	f7fc fd8f 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <FuncAuxMenuExitHandler+0x24>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004984:	2303      	movs	r3, #3
}
 8004986:	4618      	mov	r0, r3
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20001e57 	.word	0x20001e57
 8004990:	20001e53 	.word	0x20001e53

08004994 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <GainMenu_getStatus+0x14>)
 800499a:	781b      	ldrb	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20001e58 	.word	0x20001e58

080049ac <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049b0:	f7fc fd74 	bl	800149c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <GainMainMenuEntryHandler+0x1c>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <GainMainMenuEntryHandler+0x20>)
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80049c0:	2306      	movs	r3, #6
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20001e58 	.word	0x20001e58
 80049cc:	20001e53 	.word	0x20001e53

080049d0 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <GainMainMenuExitHandler+0x1c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80049da:	f7fc fd5f 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <GainMainMenuExitHandler+0x20>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20001e58 	.word	0x20001e58
 80049f0:	20001e53 	.word	0x20001e53

080049f4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049fa:	f7fc fd4f 	bl	800149c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 80049fe:	f001 f853 	bl	8005aa8 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004a02:	f001 fd89 	bl	8006518 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <GainSignalMenuEntryHandler+0x54>)
 8004a08:	2202      	movs	r2, #2
 8004a0a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f001 fa57 	bl	8005ec0 <SM_GetOutputChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a18:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <GainSignalMenuEntryHandler+0x3e>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8b1a      	ldrh	r2, [r3, #24]
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <GainSignalMenuEntryHandler+0x58>)
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <GainSignalMenuEntryHandler+0x58>)
 8004a2a:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a30:	e002      	b.n	8004a38 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004a32:	4807      	ldr	r0, [pc, #28]	; (8004a50 <GainSignalMenuEntryHandler+0x5c>)
 8004a34:	f7fc fd78 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <GainSignalMenuEntryHandler+0x60>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a3e:	2307      	movs	r3, #7
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20001e58 	.word	0x20001e58
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	08013a6c 	.word	0x08013a6c
 8004a54:	20001e53 	.word	0x20001e53

08004a58 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f001 fa2e 	bl	8005ec0 <SM_GetOutputChannel>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004a6a:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d012      	beq.n	8004a98 <GainSignalMenuInputHandler+0x40>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d107      	bne.n	8004a8a <GainSignalMenuInputHandler+0x32>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f001 fc9c 	bl	80063b8 <SM_GetEncoderValue>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f81c 	bl	8005ac0 <GO_MapEncoderPositionToSignalOutput>
 8004a88:	e006      	b.n	8004a98 <GainSignalMenuInputHandler+0x40>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f001 fc94 	bl	80063b8 <SM_GetEncoderValue>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 feb2 	bl	80067fc <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <GainSignalMenuInputHandler+0x50>)
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a9e:	2307      	movs	r3, #7
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20001e53 	.word	0x20001e53

08004aac <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <GainSignalMenuExitHandler+0x1c>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004ab6:	f7fc fcf1 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <GainSignalMenuExitHandler+0x20>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004ac0:	2306      	movs	r3, #6
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20001e58 	.word	0x20001e58
 8004acc:	20001e53 	.word	0x20001e53

08004ad0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ad6:	f7fc fce1 	bl	800149c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004ada:	f001 fd1d 	bl	8006518 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <GainAuxMenuEntryHandler+0x50>)
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f001 f9eb 	bl	8005ec0 <SM_GetOutputChannel>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004af0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <GainAuxMenuEntryHandler+0x3a>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8b1a      	ldrh	r2, [r3, #24]
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <GainAuxMenuEntryHandler+0x54>)
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <GainAuxMenuEntryHandler+0x54>)
 8004b02:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b08:	e002      	b.n	8004b10 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004b0a:	4807      	ldr	r0, [pc, #28]	; (8004b28 <GainAuxMenuEntryHandler+0x58>)
 8004b0c:	f7fc fd0c 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <GainAuxMenuEntryHandler+0x5c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b16:	2308      	movs	r3, #8
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20001e58 	.word	0x20001e58
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	08013a6c 	.word	0x08013a6c
 8004b2c:	20001e53 	.word	0x20001e53

08004b30 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004b34:	2001      	movs	r0, #1
 8004b36:	f001 fc3f 	bl	80063b8 <SM_GetEncoderValue>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 fe97 	bl	8006870 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004b42:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <GainAuxMenuInputHandler+0x20>)
 8004b44:	2203      	movs	r2, #3
 8004b46:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b48:	2308      	movs	r3, #8
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20001e53 	.word	0x20001e53

08004b54 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <GainAuxMenuExitHandler+0x1c>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b5e:	f7fc fc9d 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <GainAuxMenuExitHandler+0x20>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b68:	2306      	movs	r3, #6
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20001e58 	.word	0x20001e58
 8004b74:	20001e53 	.word	0x20001e53

08004b78 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <ToplevelMenu_getStatus+0x14>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <ToplevelMenu_setStatus+0x1c>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	7013      	strb	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000000 	.word	0x20000000

08004bb0 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb4:	f7fc fc72 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <ToplevelOutputMenuEntryHandler+0x1c>)
 8004bba:	2202      	movs	r2, #2
 8004bbc:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <ToplevelOutputMenuEntryHandler+0x20>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20001e53 	.word	0x20001e53

08004bd4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bd8:	f7fc fc60 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <ToplevelOutputMenuExitHandler+0x1c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <ToplevelOutputMenuExitHandler+0x20>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20001e53 	.word	0x20001e53

08004bf8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bfc:	f7fc fc4e 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <ToplevelInputMenuEntryHandler+0x1c>)
 8004c02:	2203      	movs	r2, #3
 8004c04:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <ToplevelInputMenuEntryHandler+0x20>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004c0c:	2302      	movs	r3, #2
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20001e53 	.word	0x20001e53

08004c1c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d002      	beq.n	8004c32 <ToplevelInputMenuInputHandler+0x16>
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d03c      	beq.n	8004caa <ToplevelInputMenuInputHandler+0x8e>
				}

				break;

			default:
				break;
 8004c30:	e051      	b.n	8004cd6 <ToplevelInputMenuInputHandler+0xba>
				if(isTriggerInputEnabled)
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <ToplevelInputMenuInputHandler+0xd0>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <ToplevelInputMenuInputHandler+0x56>
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8004c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c48:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8004c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c54:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8004c58:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8004c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6093      	str	r3, [r2, #8]
					isTriggerInputEnabled = DISABLE_TRIGGER_INPUT;
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <ToplevelInputMenuInputHandler+0xd0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
				break;
 8004c70:	e031      	b.n	8004cd6 <ToplevelInputMenuInputHandler+0xba>
					OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);
 8004c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c80:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);
 8004c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c8c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004c90:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);
 8004c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c9c:	f043 0304 	orr.w	r3, r3, #4
 8004ca0:	6093      	str	r3, [r2, #8]
					isTriggerInputEnabled = ENABLE_TRIGGER_INPUT;
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <ToplevelInputMenuInputHandler+0xd0>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
				break;
 8004ca8:	e015      	b.n	8004cd6 <ToplevelInputMenuInputHandler+0xba>
				switch(activeInputerTriggerMode)
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <ToplevelInputMenuInputHandler+0xd4>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d008      	beq.n	8004cc4 <ToplevelInputMenuInputHandler+0xa8>
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d00a      	beq.n	8004ccc <ToplevelInputMenuInputHandler+0xb0>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d000      	beq.n	8004cbc <ToplevelInputMenuInputHandler+0xa0>
				break;
 8004cba:	e00b      	b.n	8004cd4 <ToplevelInputMenuInputHandler+0xb8>
						activeInputerTriggerMode = INPUT_TRIGGER_COMP;
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <ToplevelInputMenuInputHandler+0xd4>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
						break;
 8004cc2:	e007      	b.n	8004cd4 <ToplevelInputMenuInputHandler+0xb8>
						activeInputerTriggerMode = INPUT_TRIGGER_ADC;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <ToplevelInputMenuInputHandler+0xd4>)
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
						break;
 8004cca:	e003      	b.n	8004cd4 <ToplevelInputMenuInputHandler+0xb8>
						activeInputerTriggerMode = INPUT_TRIGGER_TIM;
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <ToplevelInputMenuInputHandler+0xd4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
						break;
 8004cd2:	bf00      	nop
				break;
 8004cd4:	bf00      	nop
		}
	// stay in this state
	eNewEvent = evIdle;
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <ToplevelInputMenuInputHandler+0xd8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004cdc:	2302      	movs	r3, #2
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20001e59 	.word	0x20001e59
 8004cf0:	20001e5a 	.word	0x20001e5a
 8004cf4:	20001e53 	.word	0x20001e53

08004cf8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004cfc:	f7fc fbce 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <ToplevelInputMenuExitHandler+0x1c>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <ToplevelInputMenuExitHandler+0x20>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000000 	.word	0x20000000
 8004d18:	20001e53 	.word	0x20001e53

08004d1c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d101      	bne.n	8004d36 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40010400 	.word	0x40010400

08004d48 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <IM_Init+0x1c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <IM_Init+0x1c>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40014400 	.word	0x40014400

08004d68 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004d6c:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d11f      	bne.n	8004db8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d86:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004d88:	edd3 7a00 	vldr	s15, [r3]
 8004d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	db0a      	blt.n	8004dac <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004d98:	edd3 7a00 	vldr	s15, [r3]
 8004d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	ee17 2a90 	vmov	r2, s15
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004daa:	e02f      	b.n	8004e0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 8004dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db2:	3201      	adds	r2, #1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004db6:	e029      	b.n	8004e0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dcc:	e01e      	b.n	8004e0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004dde:	edd3 7a00 	vldr	s15, [r3]
 8004de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d80a      	bhi.n	8004e02 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004dee:	edd3 7a00 	vldr	s15, [r3]
 8004df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfa:	ee17 2a90 	vmov	r2, s15
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e00:	e004      	b.n	8004e0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 8004e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	20000124 	.word	0x20000124
 8004e20:	20000120 	.word	0x20000120

08004e24 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <IM_BTN1_EXTI14_Handler+0x44>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <IM_BTN1_EXTI14_Handler+0x48>)
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3c:	dd0c      	ble.n	8004e58 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004e3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e42:	f7ff ff6b 	bl	8004d1c <LL_EXTI_IsActiveFlag_0_31>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f7ff fa8d 	bl	800436c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004e52:	4807      	ldr	r0, [pc, #28]	; (8004e70 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004e54:	f00a ffcc 	bl	800fdf0 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <IM_BTN1_EXTI14_Handler+0x48>)
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	8013      	strh	r3, [r2, #0]


}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	20001e5c 	.word	0x20001e5c
 8004e70:	08013aa4 	.word	0x08013aa4

08004e74 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <IM_BTN2_EXTI15_Handler+0x44>)
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <IM_BTN2_EXTI15_Handler+0x48>)
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8c:	dd0c      	ble.n	8004ea8 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004e8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e92:	f7ff ff43 	bl	8004d1c <LL_EXTI_IsActiveFlag_0_31>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	f7ff fa65 	bl	800436c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004ea2:	4807      	ldr	r0, [pc, #28]	; (8004ec0 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004ea4:	f00a ffa4 	bl	800fdf0 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <IM_BTN2_EXTI15_Handler+0x48>)
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	8013      	strh	r3, [r2, #0]


}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	20001e5e 	.word	0x20001e5e
 8004ec0:	08013abc 	.word	0x08013abc

08004ec4 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004eca:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <IM_BTN3_EXTI0_Handler+0x40>)
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <IM_BTN3_EXTI0_Handler+0x44>)
 8004ed4:	8812      	ldrh	r2, [r2, #0]
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004edc:	dd0b      	ble.n	8004ef6 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7ff ff1c 	bl	8004d1c <LL_EXTI_IsActiveFlag_0_31>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004eea:	2004      	movs	r0, #4
 8004eec:	f7ff fa3e 	bl	800436c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004ef0:	4806      	ldr	r0, [pc, #24]	; (8004f0c <IM_BTN3_EXTI0_Handler+0x48>)
 8004ef2:	f00a ff7d 	bl	800fdf0 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <IM_BTN3_EXTI0_Handler+0x44>)
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	8013      	strh	r3, [r2, #0]


}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40014400 	.word	0x40014400
 8004f08:	20001e60 	.word	0x20001e60
 8004f0c:	08013ad8 	.word	0x08013ad8

08004f10 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <IM_BTN4_EXTI1_Handler+0x40>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <IM_BTN4_EXTI1_Handler+0x44>)
 8004f20:	8812      	ldrh	r2, [r2, #0]
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f28:	dd0b      	ble.n	8004f42 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	f7ff fef6 	bl	8004d1c <LL_EXTI_IsActiveFlag_0_31>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004f36:	2002      	movs	r0, #2
 8004f38:	f7ff fa18 	bl	800436c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004f3c:	4806      	ldr	r0, [pc, #24]	; (8004f58 <IM_BTN4_EXTI1_Handler+0x48>)
 8004f3e:	f00a ff57 	bl	800fdf0 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004f42:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <IM_BTN4_EXTI1_Handler+0x44>)
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	8013      	strh	r3, [r2, #0]


}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40014400 	.word	0x40014400
 8004f54:	20001e62 	.word	0x20001e62
 8004f58:	08013af0 	.word	0x08013af0

08004f5c <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <IM_ENC_EXTI2_Handler+0x40>)
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <IM_ENC_EXTI2_Handler+0x44>)
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f74:	dd0b      	ble.n	8004f8e <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004f76:	2004      	movs	r0, #4
 8004f78:	f7ff fed0 	bl	8004d1c <LL_EXTI_IsActiveFlag_0_31>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004f82:	2006      	movs	r0, #6
 8004f84:	f7ff f9f2 	bl	800436c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004f88:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <IM_ENC_EXTI2_Handler+0x48>)
 8004f8a:	f00a ff31 	bl	800fdf0 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <IM_ENC_EXTI2_Handler+0x44>)
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	8013      	strh	r3, [r2, #0]


}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	20001e64 	.word	0x20001e64
 8004fa4:	08013b08 	.word	0x08013b08

08004fa8 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <IM_ENC_DIRF_Handler+0x4c>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fba:	d117      	bne.n	8004fec <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <IM_ENC_DIRF_Handler+0x50>)
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <IM_ENC_DIRF_Handler+0x54>)
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dd0b      	ble.n	8004fe6 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8004fce:	2005      	movs	r0, #5
 8004fd0:	f7ff f9cc 	bl	800436c <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8004fd4:	480a      	ldr	r0, [pc, #40]	; (8005000 <IM_ENC_DIRF_Handler+0x58>)
 8004fd6:	f00a ff0b 	bl	800fdf0 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <IM_ENC_DIRF_Handler+0x4c>)
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <IM_ENC_DIRF_Handler+0x4c>)
 8004fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fe4:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <IM_ENC_DIRF_Handler+0x54>)
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	8013      	strh	r3, [r2, #0]


	}


}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	20001e66 	.word	0x20001e66
 8005000:	08013b24 	.word	0x08013b24

08005004 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <BO_GetBiasPolarity+0x14>)
 800500a:	781b      	ldrb	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000001 	.word	0x20000001

0800501c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <BO_GetDcBiasEncoderValue+0x14>)
 8005022:	881b      	ldrh	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000002 	.word	0x20000002

08005034 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800503e:	2000      	movs	r0, #0
 8005040:	f001 f9ba 	bl	80063b8 <SM_GetEncoderValue>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <BO_MapEncoderPositionToSignalOutput+0x84>)
 800504a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005052:	d214      	bcs.n	800507e <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005068:	2200      	movs	r2, #0
 800506a:	2110      	movs	r1, #16
 800506c:	4814      	ldr	r0, [pc, #80]	; (80050c0 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 800506e:	f005 f817 	bl	800a0a0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8005072:	2201      	movs	r2, #1
 8005074:	2108      	movs	r1, #8
 8005076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507a:	f005 ffc9 	bl	800b010 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005084:	d314      	bcc.n	80050b0 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800509a:	2200      	movs	r2, #0
 800509c:	2110      	movs	r1, #16
 800509e:	4808      	ldr	r0, [pc, #32]	; (80050c0 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80050a0:	f004 fffe 	bl	800a0a0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80050a4:	2200      	movs	r2, #0
 80050a6:	2108      	movs	r1, #8
 80050a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ac:	f005 ffb0 	bl	800b010 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000002 	.word	0x20000002
 80050bc:	20000001 	.word	0x20000001
 80050c0:	2000263c 	.word	0x2000263c

080050c4 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80050c8:	2110      	movs	r1, #16
 80050ca:	4803      	ldr	r0, [pc, #12]	; (80050d8 <BO_GetOutputBias+0x14>)
 80050cc:	f005 f824 	bl	800a118 <HAL_DAC_GetValue>
 80050d0:	4603      	mov	r3, r0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	2000263c 	.word	0x2000263c

080050dc <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e06b      	b.n	80051c0 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80050e8:	493a      	ldr	r1, [pc, #232]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3308      	adds	r3, #8
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d129      	bne.n	8005152 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80050fe:	4935      	ldr	r1, [pc, #212]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3304      	adds	r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a31      	ldr	r2, [pc, #196]	; (80051d8 <FreqO_InitFreqProfiles+0xfc>)
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800511e:	492d      	ldr	r1, [pc, #180]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3310      	adds	r3, #16
 800512e:	edd3 7a00 	vldr	s15, [r3]
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 0a90 	vmov	r0, s15
 800513e:	4925      	ldr	r1, [pc, #148]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	330c      	adds	r3, #12
 800514e:	6018      	str	r0, [r3, #0]
 8005150:	e033      	b.n	80051ba <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8005152:	4920      	ldr	r1, [pc, #128]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	3304      	adds	r3, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <FreqO_InitFreqProfiles+0xfc>)
 8005166:	fbb2 f1f3 	udiv	r1, r2, r3
 800516a:	481a      	ldr	r0, [pc, #104]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4403      	add	r3, r0
 8005178:	3308      	adds	r3, #8
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005188:	4912      	ldr	r1, [pc, #72]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	3310      	adds	r3, #16
 8005198:	edd3 7a00 	vldr	s15, [r3]
 800519c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a4:	ee17 0a90 	vmov	r0, s15
 80051a8:	490a      	ldr	r1, [pc, #40]	; (80051d4 <FreqO_InitFreqProfiles+0xf8>)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	330c      	adds	r3, #12
 80051b8:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3301      	adds	r3, #1
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b0d      	cmp	r3, #13
 80051c4:	dd90      	ble.n	80050e8 <FreqO_InitFreqProfiles+0xc>
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000004 	.word	0x20000004
 80051d8:	00155cc0 	.word	0x00155cc0

080051dc <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <FreqO_MapEncoderPositionToBothOutput+0x78>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d910      	bls.n	800521a <FreqO_MapEncoderPositionToBothOutput+0x3e>
	{
		tmpFreqIndex++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b0d      	cmp	r3, #13
 8005202:	d901      	bls.n	8005208 <FreqO_MapEncoderPositionToBothOutput+0x2c>
 8005204:	230d      	movs	r3, #13
 8005206:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f8cf 	bl	80053ac <FreqO_GetProfileByIndex>
 800520e:	4603      	mov	r3, r0
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f822 	bl	800525c <FreqO_ApplyProfile>
 8005218:	e014      	b.n	8005244 <FreqO_MapEncoderPositionToBothOutput+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	429a      	cmp	r2, r3
 8005222:	d20f      	bcs.n	8005244 <FreqO_MapEncoderPositionToBothOutput+0x68>
	{
		tmpFreqIndex--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b01      	subs	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b0d      	cmp	r3, #13
 800522e:	d901      	bls.n	8005234 <FreqO_MapEncoderPositionToBothOutput+0x58>
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f8b9 	bl	80053ac <FreqO_GetProfileByIndex>
 800523a:	4603      	mov	r3, r0
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f80c 	bl	800525c <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005244:	4a04      	ldr	r2, [pc, #16]	; (8005258 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	8013      	strh	r3, [r2, #0]

}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000011c 	.word	0x2000011c
 8005258:	20001e68 	.word	0x20001e68

0800525c <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f873 	bl	8005350 <FreqO_FindFPresetObject>
 800526a:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d026      	beq.n	80052c0 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 800527c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005286:	2001      	movs	r0, #1
 8005288:	f000 fe1a 	bl	8005ec0 <SM_GetOutputChannel>
 800528c:	4603      	mov	r3, r0
 800528e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d10d      	bne.n	80052b8 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <FreqO_ApplyProfile+0x74>)
 800529e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <FreqO_ApplyProfile+0x74>)
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <FreqO_ApplyProfile+0x74>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <FreqO_ApplyProfile+0x74>)
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 80052b8:	4a06      	ldr	r2, [pc, #24]	; (80052d4 <FreqO_ApplyProfile+0x78>)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 80052be:	e002      	b.n	80052c6 <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80052c0:	4805      	ldr	r0, [pc, #20]	; (80052d8 <FreqO_ApplyProfile+0x7c>)
 80052c2:	f7fc f931 	bl	8001528 <DM_SetErrorDebugMsg>
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40000400 	.word	0x40000400
 80052d4:	2000011c 	.word	0x2000011c
 80052d8:	08013b3c 	.word	0x08013b3c

080052dc <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80052e2:	2000      	movs	r0, #0
 80052e4:	f001 f868 	bl	80063b8 <SM_GetEncoderValue>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80052f2:	2001      	movs	r0, #1
 80052f4:	f000 fde4 	bl	8005ec0 <SM_GetOutputChannel>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d110      	bne.n	800532a <FreqO_AdjustFreq+0x4e>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <FreqO_AdjustFreq+0x58>)
 800530a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005310:	2000      	movs	r0, #0
 8005312:	f001 f851 	bl	80063b8 <SM_GetEncoderValue>
 8005316:	4603      	mov	r3, r0
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <FreqO_AdjustFreq+0x58>)
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <FreqO_AdjustFreq+0x58>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a03      	ldr	r2, [pc, #12]	; (8005334 <FreqO_AdjustFreq+0x58>)
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40000400 	.word	0x40000400

08005338 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
	return freq_profile;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <FreqO_GetFPresetObject+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	2000011c 	.word	0x2000011c

08005350 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e016      	b.n	800538c <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800535e:	4911      	ldr	r1, [pc, #68]	; (80053a4 <FreqO_FindFPresetObject+0x54>)
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3304      	adds	r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d107      	bne.n	8005386 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <FreqO_FindFPresetObject+0x54>)
 8005382:	4413      	add	r3, r2
 8005384:	e009      	b.n	800539a <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b0d      	cmp	r3, #13
 8005390:	dde5      	ble.n	800535e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <FreqO_FindFPresetObject+0x58>)
 8005394:	f7fc f8c8 	bl	8001528 <DM_SetErrorDebugMsg>
	return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000004 	.word	0x20000004
 80053a8:	08013b64 	.word	0x08013b64

080053ac <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <FreqO_GetProfileByIndex+0x24>)
 80053c0:	4413      	add	r3, r2
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000004 	.word	0x20000004

080053d4 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <FreqO_ResetLastEncoderValue+0x14>)
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20001e68 	.word	0x20001e68

080053ec <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <FS_SetSweepModeDown+0x48>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0f      	ldr	r2, [pc, #60]	; (8005434 <FS_SetSweepModeDown+0x48>)
 80053f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80053fa:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <FS_SetSweepModeDown+0x48>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <FS_SetSweepModeDown+0x48>)
 8005402:	f043 0310 	orr.w	r3, r3, #16
 8005406:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <FS_SetSweepModeDown+0x4c>)
 8005418:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <FS_SetSweepModeDown+0x50>)
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <FS_SetSweepModeDown+0x54>)
 8005420:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <FS_SetSweepModeDown+0x58>)
 8005424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40000c00 	.word	0x40000c00
 8005438:	20000120 	.word	0x20000120
 800543c:	20000124 	.word	0x20000124
 8005440:	477fff00 	.word	0x477fff00
 8005444:	40012c00 	.word	0x40012c00

08005448 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <FS_SetSweepModeUp+0x40>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <FS_SetSweepModeUp+0x40>)
 8005452:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005456:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <FS_SetSweepModeUp+0x40>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <FS_SetSweepModeUp+0x40>)
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <FS_SetSweepModeUp+0x44>)
 8005474:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <FS_SetSweepModeUp+0x48>)
 800547a:	4a06      	ldr	r2, [pc, #24]	; (8005494 <FS_SetSweepModeUp+0x4c>)
 800547c:	601a      	str	r2, [r3, #0]


}
 800547e:	bf00      	nop
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40000c00 	.word	0x40000c00
 800548c:	20000124 	.word	0x20000124
 8005490:	20000120 	.word	0x20000120
 8005494:	41500000 	.word	0x41500000

08005498 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d03a      	beq.n	800551e <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <FS_SetEncoderControlMode+0xa8>)
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80054ae:	4b25      	ldr	r3, [pc, #148]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 80054b0:	220d      	movs	r2, #13
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 80054b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <FS_SetEncoderControlMode+0xb0>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <FS_SetEncoderControlMode+0x32>
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d015      	beq.n	80054f4 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80054c8:	e033      	b.n	8005532 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <FS_SetEncoderControlMode+0xb4>)
 80054d8:	edd3 7a00 	vldr	s15, [r3]
 80054dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	dc00      	bgt.n	80054e8 <FS_SetEncoderControlMode+0x50>
				break;
 80054e6:	e024      	b.n	8005532 <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80054e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80054f2:	e01e      	b.n	8005532 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005500:	4b13      	ldr	r3, [pc, #76]	; (8005550 <FS_SetEncoderControlMode+0xb8>)
 8005502:	edd3 7a00 	vldr	s15, [r3]
 8005506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d400      	bmi.n	8005512 <FS_SetEncoderControlMode+0x7a>
				break;
 8005510:	e00f      	b.n	8005532 <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005516:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800551c:	e009      	b.n	8005532 <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <FS_SetEncoderControlMode+0xa8>)
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 8005526:	2201      	movs	r2, #1
 8005528:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <FS_SetEncoderControlMode+0xac>)
 800552c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20001e55 	.word	0x20001e55
 8005544:	40012c00 	.word	0x40012c00
 8005548:	20001e54 	.word	0x20001e54
 800554c:	20000124 	.word	0x20000124
 8005550:	20000120 	.word	0x20000120
 8005554:	00000000 	.word	0x00000000

08005558 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d122      	bne.n	80055ae <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	4618      	mov	r0, r3
 800556e:	f7fa fff1 	bl	8000554 <__aeabi_ui2d>
 8005572:	4603      	mov	r3, r0
 8005574:	460c      	mov	r4, r1
 8005576:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80055b8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 800557a:	ec44 3b10 	vmov	d0, r3, r4
 800557e:	f00c fd4f 	bl	8012020 <pow>
 8005582:	ec51 0b10 	vmov	r0, r1, d0
 8005586:	a30e      	add	r3, pc, #56	; (adr r3, 80055c0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa fea6 	bl	80002dc <__adddf3>
 8005590:	4603      	mov	r3, r0
 8005592:	460c      	mov	r4, r1
 8005594:	4618      	mov	r0, r3
 8005596:	4621      	mov	r1, r4
 8005598:	f7fb fb2e 	bl	8000bf8 <__aeabi_d2uiz>
 800559c:	4603      	mov	r3, r0
 800559e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a6:	d002      	beq.n	80055ae <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	00000000 	.word	0x00000000
 80055bc:	40080000 	.word	0x40080000
 80055c0:	00000000 	.word	0x00000000
 80055c4:	40d06800 	.word	0x40d06800
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000c00 	.word	0x40000c00

080055d0 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80055dc:	4b11      	ldr	r3, [pc, #68]	; (8005624 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055e8:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005628 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 80055ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f0:	e011      	b.n	8005616 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800560e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005628 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005612:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005616:	eeb0 0a67 	vmov.f32	s0, s15
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40000c00 	.word	0x40000c00
 8005628:	4d2037a0 	.word	0x4d2037a0

0800562c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <FuncO_ResetLastEncoderValue+0x14>)
 8005632:	2200      	movs	r2, #0
 8005634:	801a      	strh	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20001e96 	.word	0x20001e96

08005644 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800564e:	2000      	movs	r0, #0
 8005650:	f000 fc36 	bl	8005ec0 <SM_GetOutputChannel>
 8005654:	4603      	mov	r3, r0
 8005656:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800565e:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	429a      	cmp	r2, r3
 8005666:	d90c      	bls.n	8005682 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	3301      	adds	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b05      	cmp	r3, #5
 8005672:	d901      	bls.n	8005678 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005674:	2305      	movs	r3, #5
 8005676:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f856 	bl	800572c <FuncO_ApplyProfileToSignal>
 8005680:	e010      	b.n	80056a4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	429a      	cmp	r2, r3
 800568a:	d20b      	bcs.n	80056a4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	3b01      	subs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d901      	bls.n	800569c <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f844 	bl	800572c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 80056a4:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	8013      	strh	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20001e96 	.word	0x20001e96

080056b8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80056c2:	2001      	movs	r0, #1
 80056c4:	f000 fbfc 	bl	8005ec0 <SM_GetOutputChannel>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d90c      	bls.n	80056f6 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	3301      	adds	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d901      	bls.n	80056ec <FuncO_MapEncoderPositionToAuxOutput+0x34>
 80056e8:	2306      	movs	r3, #6
 80056ea:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f882 	bl	80057f8 <FuncO_ApplyProfileToAux>
 80056f4:	e010      	b.n	8005718 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d20b      	bcs.n	8005718 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	3b01      	subs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d901      	bls.n	8005710 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f870 	bl	80057f8 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005718:	4a03      	ldr	r2, [pc, #12]	; (8005728 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	8013      	strh	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20001e96 	.word	0x20001e96

0800572c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b087      	sub	sp, #28
 8005730:	af02      	add	r7, sp, #8
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005736:	79fc      	ldrb	r4, [r7, #7]
 8005738:	2000      	movs	r0, #0
 800573a:	f000 fbc1 	bl	8005ec0 <SM_GetOutputChannel>
 800573e:	4601      	mov	r1, r0
 8005740:	00e3      	lsls	r3, r4, #3
 8005742:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <FuncO_ApplyProfileToSignal+0xbc>)
 8005744:	4413      	add	r3, r2
 8005746:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SignalChannel object
	printf("SM_GetOutputChannel\n");
 800574a:	4828      	ldr	r0, [pc, #160]	; (80057ec <FuncO_ApplyProfileToSignal+0xc0>)
 800574c:	f00a fb50 	bl	800fdf0 <puts>
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005750:	79fc      	ldrb	r4, [r7, #7]
 8005752:	2000      	movs	r0, #0
 8005754:	f000 fbb4 	bl	8005ec0 <SM_GetOutputChannel>
 8005758:	4601      	mov	r1, r0
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <FuncO_ApplyProfileToSignal+0xbc>)
 800575c:	00e3      	lsls	r3, r4, #3
 800575e:	4413      	add	r3, r2
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005764:	2000      	movs	r0, #0
 8005766:	f000 fbab 	bl	8005ec0 <SM_GetOutputChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 feda 	bl	8006530 <VPP_ApplyProfileToSignal>

	// pause timer to reAux both outputs
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800577c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Stop(&htim8);

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800578c:	2100      	movs	r1, #0
 800578e:	4818      	ldr	r0, [pc, #96]	; (80057f0 <FuncO_ApplyProfileToSignal+0xc4>)
 8005790:	f004 fc30 	bl	8009ff4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005794:	2000      	movs	r0, #0
 8005796:	f000 fb93 	bl	8005ec0 <SM_GetOutputChannel>
 800579a:	4603      	mov	r3, r0
 800579c:	f103 0208 	add.w	r2, r3, #8
 80057a0:	2300      	movs	r3, #0
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2378      	movs	r3, #120	; 0x78
 80057a6:	2100      	movs	r1, #0
 80057a8:	4811      	ldr	r0, [pc, #68]	; (80057f0 <FuncO_ApplyProfileToSignal+0xc4>)
 80057aa:	f004 fb61 	bl	8009e70 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80057ae:	2100      	movs	r1, #0
 80057b0:	4810      	ldr	r0, [pc, #64]	; (80057f4 <FuncO_ApplyProfileToSignal+0xc8>)
 80057b2:	f004 fc1f 	bl	8009ff4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057b6:	2001      	movs	r0, #1
 80057b8:	f000 fb82 	bl	8005ec0 <SM_GetOutputChannel>
 80057bc:	4603      	mov	r3, r0
 80057be:	f103 0208 	add.w	r2, r3, #8
 80057c2:	2300      	movs	r3, #0
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2378      	movs	r3, #120	; 0x78
 80057c8:	2100      	movs	r1, #0
 80057ca:	480a      	ldr	r0, [pc, #40]	; (80057f4 <FuncO_ApplyProfileToSignal+0xc8>)
 80057cc:	f004 fb50 	bl	8009e70 <HAL_DAC_Start_DMA>

	// resume timer to reAux both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80057d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6013      	str	r3, [r2, #0]



}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd90      	pop	{r4, r7, pc}
 80057e8:	20000128 	.word	0x20000128
 80057ec:	08013b94 	.word	0x08013b94
 80057f0:	2000263c 	.word	0x2000263c
 80057f4:	20002628 	.word	0x20002628

080057f8 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005802:	79fc      	ldrb	r4, [r7, #7]
 8005804:	2001      	movs	r0, #1
 8005806:	f000 fb5b 	bl	8005ec0 <SM_GetOutputChannel>
 800580a:	4601      	mov	r1, r0
 800580c:	00e3      	lsls	r3, r4, #3
 800580e:	4a96      	ldr	r2, [pc, #600]	; (8005a68 <FuncO_ApplyProfileToAux+0x270>)
 8005810:	4413      	add	r3, r2
 8005812:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d10a      	bne.n	8005832 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 800581c:	4893      	ldr	r0, [pc, #588]	; (8005a6c <FuncO_ApplyProfileToAux+0x274>)
 800581e:	f00a fae7 	bl	800fdf0 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005822:	f000 fdb5 	bl	8006390 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005826:	f000 fb61 	bl	8005eec <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 800582a:	4b91      	ldr	r3, [pc, #580]	; (8005a70 <FuncO_ApplyProfileToAux+0x278>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005830:	e115      	b.n	8005a5e <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005832:	4b8f      	ldr	r3, [pc, #572]	; (8005a70 <FuncO_ApplyProfileToAux+0x278>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 808e 	beq.w	8005958 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 800583c:	488d      	ldr	r0, [pc, #564]	; (8005a74 <FuncO_ApplyProfileToAux+0x27c>)
 800583e:	f00a fad7 	bl	800fdf0 <puts>
		SM_DisablePwmToAux();
 8005842:	f000 fc8f 	bl	8006164 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005846:	f000 fcc9 	bl	80061dc <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 800584a:	488b      	ldr	r0, [pc, #556]	; (8005a78 <FuncO_ApplyProfileToAux+0x280>)
 800584c:	f00a fad0 	bl	800fdf0 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005850:	79fc      	ldrb	r4, [r7, #7]
 8005852:	2001      	movs	r0, #1
 8005854:	f000 fb34 	bl	8005ec0 <SM_GetOutputChannel>
 8005858:	4601      	mov	r1, r0
 800585a:	4a83      	ldr	r2, [pc, #524]	; (8005a68 <FuncO_ApplyProfileToAux+0x270>)
 800585c:	00e3      	lsls	r3, r4, #3
 800585e:	4413      	add	r3, r2
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005864:	4884      	ldr	r0, [pc, #528]	; (8005a78 <FuncO_ApplyProfileToAux+0x280>)
 8005866:	f00a fac3 	bl	800fdf0 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800586a:	2001      	movs	r0, #1
 800586c:	f000 fb28 	bl	8005ec0 <SM_GetOutputChannel>
 8005870:	4603      	mov	r3, r0
 8005872:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 800587a:	4880      	ldr	r0, [pc, #512]	; (8005a7c <FuncO_ApplyProfileToAux+0x284>)
 800587c:	f00a fa44 	bl	800fd08 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005880:	7b7b      	ldrb	r3, [r7, #13]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fe82 	bl	800658c <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 8005888:	487d      	ldr	r0, [pc, #500]	; (8005a80 <FuncO_ApplyProfileToAux+0x288>)
 800588a:	f00a fab1 	bl	800fdf0 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 800588e:	487d      	ldr	r0, [pc, #500]	; (8005a84 <FuncO_ApplyProfileToAux+0x28c>)
 8005890:	f006 fce6 	bl	800c260 <HAL_TIM_Base_Stop>
 8005894:	4603      	mov	r3, r0
 8005896:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	4619      	mov	r1, r3
 800589c:	487a      	ldr	r0, [pc, #488]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 800589e:	f00a fa33 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80058a2:	487a      	ldr	r0, [pc, #488]	; (8005a8c <FuncO_ApplyProfileToAux+0x294>)
 80058a4:	f00a faa4 	bl	800fdf0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80058a8:	2100      	movs	r1, #0
 80058aa:	4879      	ldr	r0, [pc, #484]	; (8005a90 <FuncO_ApplyProfileToAux+0x298>)
 80058ac:	f004 fba2 	bl	8009ff4 <HAL_DAC_Stop_DMA>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4873      	ldr	r0, [pc, #460]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 80058ba:	f00a fa25 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80058be:	4875      	ldr	r0, [pc, #468]	; (8005a94 <FuncO_ApplyProfileToAux+0x29c>)
 80058c0:	f00a fa96 	bl	800fdf0 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fafb 	bl	8005ec0 <SM_GetOutputChannel>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f103 0208 	add.w	r2, r3, #8
 80058d0:	2300      	movs	r3, #0
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2378      	movs	r3, #120	; 0x78
 80058d6:	2100      	movs	r1, #0
 80058d8:	486d      	ldr	r0, [pc, #436]	; (8005a90 <FuncO_ApplyProfileToAux+0x298>)
 80058da:	f004 fac9 	bl	8009e70 <HAL_DAC_Start_DMA>
 80058de:	4603      	mov	r3, r0
 80058e0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4868      	ldr	r0, [pc, #416]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 80058e8:	f00a fa0e 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80058ec:	486a      	ldr	r0, [pc, #424]	; (8005a98 <FuncO_ApplyProfileToAux+0x2a0>)
 80058ee:	f00a fa7f 	bl	800fdf0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80058f2:	2100      	movs	r1, #0
 80058f4:	4869      	ldr	r0, [pc, #420]	; (8005a9c <FuncO_ApplyProfileToAux+0x2a4>)
 80058f6:	f004 fb7d 	bl	8009ff4 <HAL_DAC_Stop_DMA>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	4619      	mov	r1, r3
 8005902:	4861      	ldr	r0, [pc, #388]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 8005904:	f00a fa00 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005908:	4865      	ldr	r0, [pc, #404]	; (8005aa0 <FuncO_ApplyProfileToAux+0x2a8>)
 800590a:	f00a fa71 	bl	800fdf0 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800590e:	2000      	movs	r0, #0
 8005910:	f000 fad6 	bl	8005ec0 <SM_GetOutputChannel>
 8005914:	4603      	mov	r3, r0
 8005916:	f103 0208 	add.w	r2, r3, #8
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	2378      	movs	r3, #120	; 0x78
 8005920:	2100      	movs	r1, #0
 8005922:	485e      	ldr	r0, [pc, #376]	; (8005a9c <FuncO_ApplyProfileToAux+0x2a4>)
 8005924:	f004 faa4 	bl	8009e70 <HAL_DAC_Start_DMA>
 8005928:	4603      	mov	r3, r0
 800592a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	4619      	mov	r1, r3
 8005930:	4855      	ldr	r0, [pc, #340]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 8005932:	f00a f9e9 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 8005936:	485b      	ldr	r0, [pc, #364]	; (8005aa4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005938:	f00a fa5a 	bl	800fdf0 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 800593c:	4851      	ldr	r0, [pc, #324]	; (8005a84 <FuncO_ApplyProfileToAux+0x28c>)
 800593e:	f006 fc61 	bl	800c204 <HAL_TIM_Base_Start>
 8005942:	4603      	mov	r3, r0
 8005944:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005946:	7bbb      	ldrb	r3, [r7, #14]
 8005948:	4619      	mov	r1, r3
 800594a:	484f      	ldr	r0, [pc, #316]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 800594c:	f00a f9dc 	bl	800fd08 <iprintf>
		last_output_mode_was_pwm = 0;
 8005950:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <FuncO_ApplyProfileToAux+0x278>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
}
 8005956:	e082      	b.n	8005a5e <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005958:	4847      	ldr	r0, [pc, #284]	; (8005a78 <FuncO_ApplyProfileToAux+0x280>)
 800595a:	f00a fa49 	bl	800fdf0 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800595e:	79fc      	ldrb	r4, [r7, #7]
 8005960:	2001      	movs	r0, #1
 8005962:	f000 faad 	bl	8005ec0 <SM_GetOutputChannel>
 8005966:	4601      	mov	r1, r0
 8005968:	4a3f      	ldr	r2, [pc, #252]	; (8005a68 <FuncO_ApplyProfileToAux+0x270>)
 800596a:	00e3      	lsls	r3, r4, #3
 800596c:	4413      	add	r3, r2
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005972:	4841      	ldr	r0, [pc, #260]	; (8005a78 <FuncO_ApplyProfileToAux+0x280>)
 8005974:	f00a fa3c 	bl	800fdf0 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005978:	2001      	movs	r0, #1
 800597a:	f000 faa1 	bl	8005ec0 <SM_GetOutputChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005988:	483c      	ldr	r0, [pc, #240]	; (8005a7c <FuncO_ApplyProfileToAux+0x284>)
 800598a:	f00a f9bd 	bl	800fd08 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fdfb 	bl	800658c <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 8005996:	483a      	ldr	r0, [pc, #232]	; (8005a80 <FuncO_ApplyProfileToAux+0x288>)
 8005998:	f00a fa2a 	bl	800fdf0 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 800599c:	4839      	ldr	r0, [pc, #228]	; (8005a84 <FuncO_ApplyProfileToAux+0x28c>)
 800599e:	f006 fc5f 	bl	800c260 <HAL_TIM_Base_Stop>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4837      	ldr	r0, [pc, #220]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 80059ac:	f00a f9ac 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80059b0:	4836      	ldr	r0, [pc, #216]	; (8005a8c <FuncO_ApplyProfileToAux+0x294>)
 80059b2:	f00a fa1d 	bl	800fdf0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80059b6:	2100      	movs	r1, #0
 80059b8:	4835      	ldr	r0, [pc, #212]	; (8005a90 <FuncO_ApplyProfileToAux+0x298>)
 80059ba:	f004 fb1b 	bl	8009ff4 <HAL_DAC_Stop_DMA>
 80059be:	4603      	mov	r3, r0
 80059c0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	4619      	mov	r1, r3
 80059c6:	4830      	ldr	r0, [pc, #192]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 80059c8:	f00a f99e 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80059cc:	4831      	ldr	r0, [pc, #196]	; (8005a94 <FuncO_ApplyProfileToAux+0x29c>)
 80059ce:	f00a fa0f 	bl	800fdf0 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80059d2:	2001      	movs	r0, #1
 80059d4:	f000 fa74 	bl	8005ec0 <SM_GetOutputChannel>
 80059d8:	4603      	mov	r3, r0
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	2300      	movs	r3, #0
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	2378      	movs	r3, #120	; 0x78
 80059e4:	2100      	movs	r1, #0
 80059e6:	482a      	ldr	r0, [pc, #168]	; (8005a90 <FuncO_ApplyProfileToAux+0x298>)
 80059e8:	f004 fa42 	bl	8009e70 <HAL_DAC_Start_DMA>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	4619      	mov	r1, r3
 80059f4:	4824      	ldr	r0, [pc, #144]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 80059f6:	f00a f987 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80059fa:	4827      	ldr	r0, [pc, #156]	; (8005a98 <FuncO_ApplyProfileToAux+0x2a0>)
 80059fc:	f00a f9f8 	bl	800fdf0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005a00:	2100      	movs	r1, #0
 8005a02:	4826      	ldr	r0, [pc, #152]	; (8005a9c <FuncO_ApplyProfileToAux+0x2a4>)
 8005a04:	f004 faf6 	bl	8009ff4 <HAL_DAC_Stop_DMA>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	481d      	ldr	r0, [pc, #116]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 8005a12:	f00a f979 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005a16:	4822      	ldr	r0, [pc, #136]	; (8005aa0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005a18:	f00a f9ea 	bl	800fdf0 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f000 fa4f 	bl	8005ec0 <SM_GetOutputChannel>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f103 0208 	add.w	r2, r3, #8
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	2378      	movs	r3, #120	; 0x78
 8005a2e:	2100      	movs	r1, #0
 8005a30:	481a      	ldr	r0, [pc, #104]	; (8005a9c <FuncO_ApplyProfileToAux+0x2a4>)
 8005a32:	f004 fa1d 	bl	8009e70 <HAL_DAC_Start_DMA>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4812      	ldr	r0, [pc, #72]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 8005a40:	f00a f962 	bl	800fd08 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 8005a44:	4817      	ldr	r0, [pc, #92]	; (8005aa4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005a46:	f00a f9d3 	bl	800fdf0 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005a4a:	480e      	ldr	r0, [pc, #56]	; (8005a84 <FuncO_ApplyProfileToAux+0x28c>)
 8005a4c:	f006 fbda 	bl	800c204 <HAL_TIM_Base_Start>
 8005a50:	4603      	mov	r3, r0
 8005a52:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	4619      	mov	r1, r3
 8005a58:	480b      	ldr	r0, [pc, #44]	; (8005a88 <FuncO_ApplyProfileToAux+0x290>)
 8005a5a:	f00a f955 	bl	800fd08 <iprintf>
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000128 	.word	0x20000128
 8005a6c:	08013ba8 	.word	0x08013ba8
 8005a70:	20001e94 	.word	0x20001e94
 8005a74:	08013bd0 	.word	0x08013bd0
 8005a78:	08013bfc 	.word	0x08013bfc
 8005a7c:	08013c28 	.word	0x08013c28
 8005a80:	08013c40 	.word	0x08013c40
 8005a84:	20002714 	.word	0x20002714
 8005a88:	08013c74 	.word	0x08013c74
 8005a8c:	08013c80 	.word	0x08013c80
 8005a90:	20002628 	.word	0x20002628
 8005a94:	08013cc4 	.word	0x08013cc4
 8005a98:	08013d08 	.word	0x08013d08
 8005a9c:	2000263c 	.word	0x2000263c
 8005aa0:	08013d4c 	.word	0x08013d4c
 8005aa4:	08013d90 	.word	0x08013d90

08005aa8 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <GO_ResetLastEncoderValue+0x14>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	801a      	strh	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	20001e98 	.word	0x20001e98

08005ac0 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005aca:	2000      	movs	r0, #0
 8005acc:	f000 f9f8 	bl	8005ec0 <SM_GetOutputChannel>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d90c      	bls.n	8005afe <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b07      	cmp	r3, #7
 8005aee:	d901      	bls.n	8005af4 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005af0:	2307      	movs	r3, #7
 8005af2:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f81c 	bl	8005b34 <GO_ApplyPresetToSignal>
 8005afc:	e010      	b.n	8005b20 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d20b      	bcs.n	8005b20 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b07      	cmp	r3, #7
 8005b12:	d901      	bls.n	8005b18 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f80a 	bl	8005b34 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005b20:	4a03      	ldr	r2, [pc, #12]	; (8005b30 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20001e98 	.word	0x20001e98

08005b34 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005b3e:	79fc      	ldrb	r4, [r7, #7]
 8005b40:	2000      	movs	r0, #0
 8005b42:	f000 f9bd 	bl	8005ec0 <SM_GetOutputChannel>
 8005b46:	4601      	mov	r1, r0
 8005b48:	4623      	mov	r3, r4
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4423      	add	r3, r4
 8005b4e:	4a4f      	ldr	r2, [pc, #316]	; (8005c8c <GO_ApplyPresetToSignal+0x158>)
 8005b50:	4413      	add	r3, r2
 8005b52:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	f200 8093 	bhi.w	8005c84 <GO_ApplyPresetToSignal+0x150>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <GO_ApplyPresetToSignal+0x30>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b85 	.word	0x08005b85
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005be5 	.word	0x08005be5
 8005b74:	08005c05 	.word	0x08005c05
 8005b78:	08005c25 	.word	0x08005c25
 8005b7c:	08005c45 	.word	0x08005c45
 8005b80:	08005c65 	.word	0x08005c65
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005b84:	2200      	movs	r2, #0
 8005b86:	2101      	movs	r1, #1
 8005b88:	4841      	ldr	r0, [pc, #260]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005b8a:	f005 fa41 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2120      	movs	r1, #32
 8005b92:	4840      	ldr	r0, [pc, #256]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005b94:	f005 fa3c 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2110      	movs	r1, #16
 8005b9c:	483d      	ldr	r0, [pc, #244]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005b9e:	f005 fa37 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005ba2:	e06f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4839      	ldr	r0, [pc, #228]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005baa:	f005 fa31 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	4838      	ldr	r0, [pc, #224]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bb4:	f005 fa2c 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2110      	movs	r1, #16
 8005bbc:	4835      	ldr	r0, [pc, #212]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bbe:	f005 fa27 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005bc2:	e05f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4831      	ldr	r0, [pc, #196]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005bca:	f005 fa21 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	4830      	ldr	r0, [pc, #192]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bd4:	f005 fa1c 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2110      	movs	r1, #16
 8005bdc:	482d      	ldr	r0, [pc, #180]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bde:	f005 fa17 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005be2:	e04f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005be4:	2201      	movs	r2, #1
 8005be6:	2101      	movs	r1, #1
 8005be8:	4829      	ldr	r0, [pc, #164]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005bea:	f005 fa11 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005bee:	2201      	movs	r2, #1
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	4828      	ldr	r0, [pc, #160]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bf4:	f005 fa0c 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2110      	movs	r1, #16
 8005bfc:	4825      	ldr	r0, [pc, #148]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005bfe:	f005 fa07 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005c02:	e03f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c04:	2200      	movs	r2, #0
 8005c06:	2101      	movs	r1, #1
 8005c08:	4821      	ldr	r0, [pc, #132]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005c0a:	f005 fa01 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2120      	movs	r1, #32
 8005c12:	4820      	ldr	r0, [pc, #128]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c14:	f005 f9fc 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	481d      	ldr	r0, [pc, #116]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c1e:	f005 f9f7 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005c22:	e02f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c24:	2201      	movs	r2, #1
 8005c26:	2101      	movs	r1, #1
 8005c28:	4819      	ldr	r0, [pc, #100]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005c2a:	f005 f9f1 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2120      	movs	r1, #32
 8005c32:	4818      	ldr	r0, [pc, #96]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c34:	f005 f9ec 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	4815      	ldr	r0, [pc, #84]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c3e:	f005 f9e7 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005c42:	e01f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c44:	2200      	movs	r2, #0
 8005c46:	2101      	movs	r1, #1
 8005c48:	4811      	ldr	r0, [pc, #68]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005c4a:	f005 f9e1 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c4e:	2201      	movs	r2, #1
 8005c50:	2120      	movs	r1, #32
 8005c52:	4810      	ldr	r0, [pc, #64]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c54:	f005 f9dc 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	480d      	ldr	r0, [pc, #52]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c5e:	f005 f9d7 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005c62:	e00f      	b.n	8005c84 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c64:	2201      	movs	r2, #1
 8005c66:	2101      	movs	r1, #1
 8005c68:	4809      	ldr	r0, [pc, #36]	; (8005c90 <GO_ApplyPresetToSignal+0x15c>)
 8005c6a:	f005 f9d1 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2120      	movs	r1, #32
 8005c72:	4808      	ldr	r0, [pc, #32]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c74:	f005 f9cc 	bl	800b010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	4805      	ldr	r0, [pc, #20]	; (8005c94 <GO_ApplyPresetToSignal+0x160>)
 8005c7e:	f005 f9c7 	bl	800b010 <HAL_GPIO_WritePin>
			break;
 8005c82:	bf00      	nop
	}

}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd90      	pop	{r4, r7, pc}
 8005c8c:	20000160 	.word	0x20000160
 8005c90:	48000400 	.word	0x48000400
 8005c94:	48000800 	.word	0x48000800

08005c98 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005c9c:	f7ff fa1e 	bl	80050dc <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8005ca0:	f000 f8ae 	bl	8005e00 <_InitOutputChannels>
	_InitAmpProfiles();
 8005ca4:	f000 f824 	bl	8005cf0 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005ca8:	2110      	movs	r1, #16
 8005caa:	4810      	ldr	r0, [pc, #64]	; (8005cec <SM_Init+0x54>)
 8005cac:	f004 f88d 	bl	8009dca <HAL_DAC_Start>
	HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2108      	movs	r1, #8
 8005cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb8:	f005 f9aa 	bl	800b010 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7ff fd2d 	bl	800572c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8005cd2:	2059      	movs	r0, #89	; 0x59
 8005cd4:	f000 fc2c 	bl	8006530 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f7ff fd8d 	bl	80057f8 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8005cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ce2:	f7ff fabb 	bl	800525c <FreqO_ApplyProfile>

}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000263c 	.word	0x2000263c

08005cf0 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b08b      	sub	sp, #44	; 0x2c
 8005cf4:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	e033      	b.n	8005d64 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005cfc:	493c      	ldr	r1, [pc, #240]	; (8005df0 <_InitAmpProfiles+0x100>)
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005d10:	4b38      	ldr	r3, [pc, #224]	; (8005df4 <_InitAmpProfiles+0x104>)
 8005d12:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005d14:	4936      	ldr	r1, [pc, #216]	; (8005df0 <_InitAmpProfiles+0x100>)
 8005d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	3308      	adds	r3, #8
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005d32:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d46:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005d4a:	4929      	ldr	r1, [pc, #164]	; (8005df0 <_InitAmpProfiles+0x100>)
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	4613      	mov	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	3310      	adds	r3, #16
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	2b61      	cmp	r3, #97	; 0x61
 8005d68:	ddc8      	ble.n	8005cfc <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	e037      	b.n	8005de0 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005d70:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <_InitAmpProfiles+0x108>)
 8005d72:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005d74:	491e      	ldr	r1, [pc, #120]	; (8005df0 <_InitAmpProfiles+0x100>)
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3304      	adds	r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005d88:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d94:	ee16 0a90 	vmov	r0, s13
 8005d98:	f7fa fbfe 	bl	8000598 <__aeabi_f2d>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	ec44 3b10 	vmov	d0, r3, r4
 8005da4:	f00c f8bc 	bl	8011f20 <log10>
 8005da8:	ec51 0b10 	vmov	r0, r1, d0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <_InitAmpProfiles+0x10c>)
 8005db2:	f7fa fc49 	bl	8000648 <__aeabi_dmul>
 8005db6:	4603      	mov	r3, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fa ff3b 	bl	8000c38 <__aeabi_d2f>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005dc6:	490a      	ldr	r1, [pc, #40]	; (8005df0 <_InitAmpProfiles+0x100>)
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2b61      	cmp	r3, #97	; 0x61
 8005de4:	ddc4      	ble.n	8005d70 <_InitAmpProfiles+0x80>

	}
}
 8005de6:	bf00      	nop
 8005de8:	372c      	adds	r7, #44	; 0x2c
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000178 	.word	0x20000178
 8005df4:	402ccccd 	.word	0x402ccccd
 8005df8:	3a83126f 	.word	0x3a83126f
 8005dfc:	40340000 	.word	0x40340000

08005e00 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005e0c:	4b27      	ldr	r3, [pc, #156]	; (8005eac <_InitOutputChannels+0xac>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e12:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005e14:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e16:	4a25      	ldr	r2, [pc, #148]	; (8005eac <_InitOutputChannels+0xac>)
 8005e18:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	e00b      	b.n	8005e3a <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005e22:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <_InitOutputChannels+0xb0>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e2a:	491f      	ldr	r1, [pc, #124]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3302      	adds	r3, #2
 8005e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3301      	adds	r3, #1
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b77      	cmp	r3, #119	; 0x77
 8005e3e:	ddf0      	ble.n	8005e22 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005e40:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <_InitOutputChannels+0xb4>)
 8005e44:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005e48:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <_InitOutputChannels+0xa8>)
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <_InitOutputChannels+0xb8>)
 8005e4c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <_InitOutputChannels+0xac>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e5c:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e60:	4a12      	ldr	r2, [pc, #72]	; (8005eac <_InitOutputChannels+0xac>)
 8005e62:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	e00b      	b.n	8005e84 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005e6c:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <_InitOutputChannels+0xb0>)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e74:	4911      	ldr	r1, [pc, #68]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b77      	cmp	r3, #119	; 0x77
 8005e88:	ddf0      	ble.n	8005e6c <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e8c:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <_InitOutputChannels+0xb4>)
 8005e8e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <_InitOutputChannels+0xbc>)
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <_InitOutputChannels+0xb8>)
 8005e96:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20001f70 	.word	0x20001f70
 8005eac:	20000128 	.word	0x20000128
 8005eb0:	200014b4 	.word	0x200014b4
 8005eb4:	20000b34 	.word	0x20000b34
 8005eb8:	20000175 	.word	0x20000175
 8005ebc:	20002164 	.word	0x20002164

08005ec0 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <SM_GetOutputChannel+0x24>)
 8005ed2:	e000      	b.n	8005ed6 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <SM_GetOutputChannel+0x28>)
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20001f70 	.word	0x20001f70
 8005ee8:	20002164 	.word	0x20002164

08005eec <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b096      	sub	sp, #88	; 0x58
 8005ef0:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8005ef2:	4889      	ldr	r0, [pc, #548]	; (8006118 <SM_EnablePwmToAux+0x22c>)
 8005ef4:	f009 ff7c 	bl	800fdf0 <puts>

	HAL_StatusTypeDef res = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	609a      	str	r2, [r3, #8]
 8005f0a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005f18:	f107 031c 	add.w	r3, r7, #28
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
 8005f28:	615a      	str	r2, [r3, #20]
 8005f2a:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8005f3c:	4b77      	ldr	r3, [pc, #476]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f3e:	4a78      	ldr	r2, [pc, #480]	; (8006120 <SM_EnablePwmToAux+0x234>)
 8005f40:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005f42:	4b76      	ldr	r3, [pc, #472]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005f48:	4b74      	ldr	r3, [pc, #464]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005f4e:	4b73      	ldr	r3, [pc, #460]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005f54:	4b71      	ldr	r3, [pc, #452]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f5c:	4b6f      	ldr	r3, [pc, #444]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8005f62:	486e      	ldr	r0, [pc, #440]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f64:	f006 f8f6 	bl	800c154 <HAL_TIM_Base_Init>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d107      	bne.n	8005f84 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8005f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f78:	4619      	mov	r1, r3
 8005f7a:	486a      	ldr	r0, [pc, #424]	; (8006124 <SM_EnablePwmToAux+0x238>)
 8005f7c:	f009 fec4 	bl	800fd08 <iprintf>
		Error_Handler();
 8005f80:	f001 fba6 	bl	80076d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f88:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8005f8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4862      	ldr	r0, [pc, #392]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005f92:	f006 feff 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d107      	bne.n	8005fb2 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8005fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	485f      	ldr	r0, [pc, #380]	; (8006128 <SM_EnablePwmToAux+0x23c>)
 8005faa:	f009 fead 	bl	800fd08 <iprintf>
		Error_Handler();
 8005fae:	f001 fb8f 	bl	80076d0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8005fb2:	485a      	ldr	r0, [pc, #360]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005fb4:	f006 f9e1 	bl	800c37a <HAL_TIM_PWM_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d107      	bne.n	8005fd4 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8005fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4858      	ldr	r0, [pc, #352]	; (800612c <SM_EnablePwmToAux+0x240>)
 8005fcc:	f009 fe9c 	bl	800fd08 <iprintf>
		Error_Handler();
 8005fd0:	f001 fb7e 	bl	80076d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8005fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	484e      	ldr	r0, [pc, #312]	; (800611c <SM_EnablePwmToAux+0x230>)
 8005fe4:	f007 fc8c 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d107      	bne.n	8006004 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8005ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	484d      	ldr	r0, [pc, #308]	; (8006130 <SM_EnablePwmToAux+0x244>)
 8005ffc:	f009 fe84 	bl	800fd08 <iprintf>
		Error_Handler();
 8006000:	f001 fb66 	bl	80076d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006004:	2360      	movs	r3, #96	; 0x60
 8006006:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800600c:	2300      	movs	r3, #0
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006010:	2300      	movs	r3, #0
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006014:	f107 031c 	add.w	r3, r7, #28
 8006018:	2200      	movs	r2, #0
 800601a:	4619      	mov	r1, r3
 800601c:	483f      	ldr	r0, [pc, #252]	; (800611c <SM_EnablePwmToAux+0x230>)
 800601e:	f006 fda9 	bl	800cb74 <HAL_TIM_PWM_ConfigChannel>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800602a:	4293      	cmp	r3, r2
 800602c:	d107      	bne.n	800603e <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 800602e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006032:	4619      	mov	r1, r3
 8006034:	483f      	ldr	r0, [pc, #252]	; (8006134 <SM_EnablePwmToAux+0x248>)
 8006036:	f009 fe67 	bl	800fd08 <iprintf>
		Error_Handler();
 800603a:	f001 fb49 	bl	80076d0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 800603e:	483e      	ldr	r0, [pc, #248]	; (8006138 <SM_EnablePwmToAux+0x24c>)
 8006040:	f009 fed6 	bl	800fdf0 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006044:	4b3d      	ldr	r3, [pc, #244]	; (800613c <SM_EnablePwmToAux+0x250>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	4a3c      	ldr	r2, [pc, #240]	; (800613c <SM_EnablePwmToAux+0x250>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006050:	4b3a      	ldr	r3, [pc, #232]	; (800613c <SM_EnablePwmToAux+0x250>)
 8006052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800606c:	2302      	movs	r3, #2
 800606e:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006070:	4833      	ldr	r0, [pc, #204]	; (8006140 <SM_EnablePwmToAux+0x254>)
 8006072:	f009 febd 	bl	800fdf0 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006076:	f107 0308 	add.w	r3, r7, #8
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006080:	f004 fd62 	bl	800ab48 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006084:	482f      	ldr	r0, [pc, #188]	; (8006144 <SM_EnablePwmToAux+0x258>)
 8006086:	f009 feb3 	bl	800fdf0 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 800608a:	4b2c      	ldr	r3, [pc, #176]	; (800613c <SM_EnablePwmToAux+0x250>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	4a2b      	ldr	r2, [pc, #172]	; (800613c <SM_EnablePwmToAux+0x250>)
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	6593      	str	r3, [r2, #88]	; 0x58
 8006096:	4b29      	ldr	r3, [pc, #164]	; (800613c <SM_EnablePwmToAux+0x250>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80060a2:	4829      	ldr	r0, [pc, #164]	; (8006148 <SM_EnablePwmToAux+0x25c>)
 80060a4:	f009 fea4 	bl	800fdf0 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060a8:	2200      	movs	r2, #0
 80060aa:	2100      	movs	r1, #0
 80060ac:	201d      	movs	r0, #29
 80060ae:	f003 fe28 	bl	8009d02 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 80060b2:	4826      	ldr	r0, [pc, #152]	; (800614c <SM_EnablePwmToAux+0x260>)
 80060b4:	f009 fe9c 	bl	800fdf0 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060b8:	201d      	movs	r0, #29
 80060ba:	f003 fe3c 	bl	8009d36 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 80060be:	4824      	ldr	r0, [pc, #144]	; (8006150 <SM_EnablePwmToAux+0x264>)
 80060c0:	f009 fe96 	bl	800fdf0 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80060c4:	2100      	movs	r1, #0
 80060c6:	4815      	ldr	r0, [pc, #84]	; (800611c <SM_EnablePwmToAux+0x230>)
 80060c8:	f006 f9b8 	bl	800c43c <HAL_TIM_PWM_Start>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d107      	bne.n	80060e8 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060dc:	4619      	mov	r1, r3
 80060de:	481d      	ldr	r0, [pc, #116]	; (8006154 <SM_EnablePwmToAux+0x268>)
 80060e0:	f009 fe12 	bl	800fd08 <iprintf>
		Error_Handler();
 80060e4:	f001 faf4 	bl	80076d0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 80060e8:	481b      	ldr	r0, [pc, #108]	; (8006158 <SM_EnablePwmToAux+0x26c>)
 80060ea:	f009 fe81 	bl	800fdf0 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 80060ee:	2007      	movs	r0, #7
 80060f0:	f7ff fd20 	bl	8005b34 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 80060f4:	4819      	ldr	r0, [pc, #100]	; (800615c <SM_EnablePwmToAux+0x270>)
 80060f6:	f009 fe7b 	bl	800fdf0 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <SM_EnablePwmToAux+0x234>)
 80060fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006100:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006102:	4817      	ldr	r0, [pc, #92]	; (8006160 <SM_EnablePwmToAux+0x274>)
 8006104:	f009 fe74 	bl	800fdf0 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <SM_EnablePwmToAux+0x234>)
 800610a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006110:	bf00      	nop
 8006112:	3758      	adds	r7, #88	; 0x58
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	08013e3c 	.word	0x08013e3c
 800611c:	20001f1c 	.word	0x20001f1c
 8006120:	40000400 	.word	0x40000400
 8006124:	08013e50 	.word	0x08013e50
 8006128:	08013e84 	.word	0x08013e84
 800612c:	08013ec0 	.word	0x08013ec0
 8006130:	08013ef0 	.word	0x08013ef0
 8006134:	08013f38 	.word	0x08013f38
 8006138:	08013f74 	.word	0x08013f74
 800613c:	40021000 	.word	0x40021000
 8006140:	08013fa4 	.word	0x08013fa4
 8006144:	08013fc8 	.word	0x08013fc8
 8006148:	08014000 	.word	0x08014000
 800614c:	08014028 	.word	0x08014028
 8006150:	08014050 	.word	0x08014050
 8006154:	08014078 	.word	0x08014078
 8006158:	080140ac 	.word	0x080140ac
 800615c:	080140d8 	.word	0x080140d8
 8006160:	0801410c 	.word	0x0801410c

08006164 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 800616a:	4815      	ldr	r0, [pc, #84]	; (80061c0 <SM_DisablePwmToAux+0x5c>)
 800616c:	f009 fdcc 	bl	800fd08 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006174:	4813      	ldr	r0, [pc, #76]	; (80061c4 <SM_DisablePwmToAux+0x60>)
 8006176:	f009 fe3b 	bl	800fdf0 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 800617a:	2100      	movs	r1, #0
 800617c:	4812      	ldr	r0, [pc, #72]	; (80061c8 <SM_DisablePwmToAux+0x64>)
 800617e:	f006 fa37 	bl	800c5f0 <HAL_TIM_PWM_Stop>
 8006182:	4603      	mov	r3, r0
 8006184:	461a      	mov	r2, r3
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	4293      	cmp	r3, r2
 800618a:	d106      	bne.n	800619a <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	4619      	mov	r1, r3
 8006190:	480e      	ldr	r0, [pc, #56]	; (80061cc <SM_DisablePwmToAux+0x68>)
 8006192:	f009 fdb9 	bl	800fd08 <iprintf>
		Error_Handler();
 8006196:	f001 fa9b 	bl	80076d0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 800619a:	480d      	ldr	r0, [pc, #52]	; (80061d0 <SM_DisablePwmToAux+0x6c>)
 800619c:	f009 fe28 	bl	800fdf0 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <SM_DisablePwmToAux+0x70>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a4:	4a0b      	ldr	r2, [pc, #44]	; (80061d4 <SM_DisablePwmToAux+0x70>)
 80061a6:	f023 0302 	bic.w	r3, r3, #2
 80061aa:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80061ac:	480a      	ldr	r0, [pc, #40]	; (80061d8 <SM_DisablePwmToAux+0x74>)
 80061ae:	f009 fe1f 	bl	800fdf0 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80061b2:	201d      	movs	r0, #29
 80061b4:	f003 fdcd 	bl	8009d52 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	0801413c 	.word	0x0801413c
 80061c4:	08014150 	.word	0x08014150
 80061c8:	20001f1c 	.word	0x20001f1c
 80061cc:	08014178 	.word	0x08014178
 80061d0:	080141ac 	.word	0x080141ac
 80061d4:	40021000 	.word	0x40021000
 80061d8:	080141e8 	.word	0x080141e8

080061dc <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b0b2      	sub	sp, #200	; 0xc8
 80061e0:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 80061e2:	4860      	ldr	r0, [pc, #384]	; (8006364 <SM_EnableDacToAux+0x188>)
 80061e4:	f009 fd90 	bl	800fd08 <iprintf>

	HAL_StatusTypeDef res = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 80061ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061f2:	2230      	movs	r2, #48	; 0x30
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f009 f922 	bl	800f440 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 800620c:	4b56      	ldr	r3, [pc, #344]	; (8006368 <SM_EnableDacToAux+0x18c>)
 800620e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006210:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006214:	4618      	mov	r0, r3
 8006216:	f003 fdb6 	bl	8009d86 <HAL_DAC_Init>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006222:	4293      	cmp	r3, r2
 8006224:	d107      	bne.n	8006236 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006226:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800622a:	4619      	mov	r1, r3
 800622c:	484f      	ldr	r0, [pc, #316]	; (800636c <SM_EnableDacToAux+0x190>)
 800622e:	f009 fd6b 	bl	800fd08 <iprintf>
		Error_Handler();
 8006232:	f001 fa4d 	bl	80076d0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800623a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 800623e:	2300      	movs	r3, #0
 8006240:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800624a:	2300      	movs	r3, #0
 800624c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 8006250:	2312      	movs	r3, #18
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006262:	2301      	movs	r3, #1
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006268:	2300      	movs	r3, #0
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 800626e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006272:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006276:	2200      	movs	r2, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f003 ff63 	bl	800a144 <HAL_DAC_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006286:	4293      	cmp	r3, r2
 8006288:	d107      	bne.n	800629a <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 800628a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800628e:	4619      	mov	r1, r3
 8006290:	4837      	ldr	r0, [pc, #220]	; (8006370 <SM_EnableDacToAux+0x194>)
 8006292:	f009 fd39 	bl	800fd08 <iprintf>
		Error_Handler();
 8006296:	f001 fa1b 	bl	80076d0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 800629a:	4836      	ldr	r0, [pc, #216]	; (8006374 <SM_EnableDacToAux+0x198>)
 800629c:	f009 fda8 	bl	800fdf0 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	4a34      	ldr	r2, [pc, #208]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ac:	4b32      	ldr	r3, [pc, #200]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 80062b8:	4830      	ldr	r0, [pc, #192]	; (800637c <SM_EnableDacToAux+0x1a0>)
 80062ba:	f009 fd99 	bl	800fdf0 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ca:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <SM_EnableDacToAux+0x19c>)
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062dc:	2303      	movs	r3, #3
 80062de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 80062e8:	4825      	ldr	r0, [pc, #148]	; (8006380 <SM_EnableDacToAux+0x1a4>)
 80062ea:	f009 fd81 	bl	800fdf0 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80062f2:	4619      	mov	r1, r3
 80062f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f8:	f004 fc26 	bl	800ab48 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 80062fc:	4b21      	ldr	r3, [pc, #132]	; (8006384 <SM_EnableDacToAux+0x1a8>)
 80062fe:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006300:	2329      	movs	r3, #41	; 0x29
 8006302:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006304:	2310      	movs	r3, #16
 8006306:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006314:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800631c:	2320      	movs	r3, #32
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006320:	2300      	movs	r3, #0
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	4618      	mov	r0, r3
 800632a:	f004 f941 	bl	800a5b0 <HAL_DMA_Init>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006336:	4293      	cmp	r3, r2
 8006338:	d107      	bne.n	800634a <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 800633a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800633e:	4619      	mov	r1, r3
 8006340:	4811      	ldr	r0, [pc, #68]	; (8006388 <SM_EnableDacToAux+0x1ac>)
 8006342:	f009 fce1 	bl	800fd08 <iprintf>
		Error_Handler();
 8006346:	f001 f9c3 	bl	80076d0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 800634a:	4810      	ldr	r0, [pc, #64]	; (800638c <SM_EnableDacToAux+0x1b0>)
 800634c:	f009 fd50 	bl	800fdf0 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006350:	f107 030c 	add.w	r3, r7, #12
 8006354:	677b      	str	r3, [r7, #116]	; 0x74
 8006356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800635a:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 800635c:	bf00      	nop
 800635e:	37c8      	adds	r7, #200	; 0xc8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	08014210 	.word	0x08014210
 8006368:	50000c00 	.word	0x50000c00
 800636c:	08014224 	.word	0x08014224
 8006370:	08014250 	.word	0x08014250
 8006374:	08014288 	.word	0x08014288
 8006378:	40021000 	.word	0x40021000
 800637c:	080142b8 	.word	0x080142b8
 8006380:	080142e8 	.word	0x080142e8
 8006384:	40020030 	.word	0x40020030
 8006388:	0801430c 	.word	0x0801430c
 800638c:	08014338 	.word	0x08014338

08006390 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006394:	4806      	ldr	r0, [pc, #24]	; (80063b0 <SM_DisableDacToAux+0x20>)
 8006396:	f009 fd2b 	bl	800fdf0 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 800639a:	4806      	ldr	r0, [pc, #24]	; (80063b4 <SM_DisableDacToAux+0x24>)
 800639c:	f009 fd28 	bl	800fdf0 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80063a0:	2140      	movs	r1, #64	; 0x40
 80063a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a6:	f004 fd51 	bl	800ae4c <HAL_GPIO_DeInit>

}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	0801435c 	.word	0x0801435c
 80063b4:	08014370 	.word	0x08014370

080063b8 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80063c8:	4b08      	ldr	r3, [pc, #32]	; (80063ec <SM_GetEncoderValue+0x34>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <SM_GetEncoderValue+0x34>)
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	e002      	b.n	80063e0 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80063da:	4b04      	ldr	r3, [pc, #16]	; (80063ec <SM_GetEncoderValue+0x34>)
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	b29b      	uxth	r3, r3
	}
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00

080063f0 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80063f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <SM_GetOutputInHertz+0x18>
 8006400:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	e008      	b.n	800641a <SM_GetOutputInHertz+0x2a>
 8006408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800641a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <SM_GetOutputInHertz+0x3c>
 8006424:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	e008      	b.n	800643e <SM_GetOutputInHertz+0x4e>
 800642c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800643e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006442:	edd7 7a01 	vldr	s15, [r7, #4]
 8006446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800644a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006474 <SM_GetOutputInHertz+0x84>
 800644e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006452:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006456:	edd7 7a03 	vldr	s15, [r7, #12]
 800645a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006478 <SM_GetOutputInHertz+0x88>
 800645e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006462:	eef0 7a66 	vmov.f32	s15, s13
}
 8006466:	eeb0 0a67 	vmov.f32	s0, s15
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	4d2037a0 	.word	0x4d2037a0
 8006478:	42f00000 	.word	0x42f00000

0800647c <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <SM_ConvertPeriodToHertz+0x16>
 800648e:	2301      	movs	r3, #1
 8006490:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80064c4 <SM_ConvertPeriodToHertz+0x48>
 80064ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80064b6:	eeb0 0a67 	vmov.f32	s0, s15
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	4d2037a0 	.word	0x4d2037a0

080064c8 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <SM_IsFuncPwmDutyMode+0x14>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20001e9a 	.word	0x20001e9a

080064e0 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <SM_ToggleFuncPwmDutyMode+0x1c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	f083 0301 	eor.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4b03      	ldr	r3, [pc, #12]	; (80064fc <SM_ToggleFuncPwmDutyMode+0x1c>)
 80064f0:	701a      	strb	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20001e9a 	.word	0x20001e9a

08006500 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <SM_ResetFuncPwmDutyMode+0x14>)
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]

}
 800650a:	bf00      	nop
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	20001e9a 	.word	0x20001e9a

08006518 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 800651c:	4b03      	ldr	r3, [pc, #12]	; (800652c <VPP_ResetLastEncoderValue+0x14>)
 800651e:	2200      	movs	r2, #0
 8006520:	801a      	strh	r2, [r3, #0]
}
 8006522:	bf00      	nop
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20001e9c 	.word	0x20001e9c

08006530 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800653a:	79fa      	ldrb	r2, [r7, #7]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4a10      	ldr	r2, [pc, #64]	; (8006588 <VPP_ApplyProfileToSignal+0x58>)
 8006546:	4413      	add	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800654a:	2000      	movs	r0, #0
 800654c:	f7ff fcb8 	bl	8005ec0 <SM_GetOutputChannel>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7a1b      	ldrb	r3, [r3, #8]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fae9 	bl	8005b34 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	edd3 7a04 	vldr	s15, [r3, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	ed93 7a05 	vldr	s14, [r3, #20]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8b1b      	ldrh	r3, [r3, #24]
 8006572:	4618      	mov	r0, r3
 8006574:	eef0 0a47 	vmov.f32	s1, s14
 8006578:	eeb0 0a67 	vmov.f32	s0, s15
 800657c:	f000 f830 	bl	80065e0 <_ProcessSignalDataTable>


}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000178 	.word	0x20000178

0800658c <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006596:	79fa      	ldrb	r2, [r7, #7]
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <VPP_ApplyProfileToAux+0x50>)
 80065a2:	4413      	add	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7ff fc8a 	bl	8005ec0 <SM_GetOutputChannel>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8b1b      	ldrh	r3, [r3, #24]
 80065c4:	4618      	mov	r0, r3
 80065c6:	eef0 0a47 	vmov.f32	s1, s14
 80065ca:	eeb0 0a67 	vmov.f32	s0, s15
 80065ce:	f000 f88d 	bl	80066ec <_ProcessAuxDataTable>



}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000178 	.word	0x20000178

080065e0 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80065ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80065ee:	4603      	mov	r3, r0
 80065f0:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 80065f2:	2000      	movs	r0, #0
 80065f4:	f7ff fc64 	bl	8005ec0 <SM_GetOutputChannel>
 80065f8:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d06b      	beq.n	80066de <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
 800660a:	e00c      	b.n	8006626 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4933      	ldr	r1, [pc, #204]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	3301      	adds	r3, #1
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	2b77      	cmp	r3, #119	; 0x77
 800662a:	ddef      	ble.n	800660c <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800662c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006630:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	b29b      	uxth	r3, r3
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006646:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e02e      	b.n	80066ae <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006650:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006660:	edd7 7a03 	vldr	s15, [r7, #12]
 8006664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666c:	ee17 1a90 	vmov	r1, s15
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006678:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006680:	ee07 3a90 	vmov	s15, r3
 8006684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006688:	edd7 7a08 	vldr	s15, [r7, #32]
 800668c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669c:	ee17 1a90 	vmov	r1, s15
 80066a0:	4a11      	ldr	r2, [pc, #68]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b77      	cmp	r3, #119	; 0x77
 80066b2:	ddcd      	ble.n	8006650 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e00e      	b.n	80066d8 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7ff fc00 	bl	8005ec0 <SM_GetOutputChannel>
 80066c0:	4601      	mov	r1, r0
 80066c2:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <_ProcessSignalDataTable+0x108>)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3302      	adds	r3, #2
 80066ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	3301      	adds	r3, #1
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b77      	cmp	r3, #119	; 0x77
 80066dc:	dded      	ble.n	80066ba <_ProcessSignalDataTable+0xda>
		}
	}

}
 80066de:	bf00      	nop
 80066e0:	3728      	adds	r7, #40	; 0x28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20002358 	.word	0x20002358

080066ec <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80066f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80066fa:	4603      	mov	r3, r0
 80066fc:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 80066fe:	2001      	movs	r0, #1
 8006700:	f7ff fbde 	bl	8005ec0 <SM_GetOutputChannel>
 8006704:	4603      	mov	r3, r0
 8006706:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b06      	cmp	r3, #6
 800670e:	d059      	beq.n	80067c4 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e00f      	b.n	8006736 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006716:	2001      	movs	r0, #1
 8006718:	f7ff fbd2 	bl	8005ec0 <SM_GetOutputChannel>
 800671c:	4603      	mov	r3, r0
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4933      	ldr	r1, [pc, #204]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	3301      	adds	r3, #1
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b77      	cmp	r3, #119	; 0x77
 800673a:	ddec      	ble.n	8006716 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800673c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006740:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	b29b      	uxth	r3, r3
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006756:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e02e      	b.n	80067be <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006760:	4a25      	ldr	r2, [pc, #148]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006770:	edd7 7a03 	vldr	s15, [r7, #12]
 8006774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677c:	ee17 1a90 	vmov	r1, s15
 8006780:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006788:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006798:	edd7 7a06 	vldr	s15, [r7, #24]
 800679c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80067a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80067a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ac:	ee17 1a90 	vmov	r1, s15
 80067b0:	4a11      	ldr	r2, [pc, #68]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b77      	cmp	r3, #119	; 0x77
 80067c2:	ddcd      	ble.n	8006760 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	e00e      	b.n	80067e8 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80067ca:	2001      	movs	r0, #1
 80067cc:	f7ff fb78 	bl	8005ec0 <SM_GetOutputChannel>
 80067d0:	4601      	mov	r1, r0
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <_ProcessAuxDataTable+0x10c>)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3302      	adds	r3, #2
 80067de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b77      	cmp	r3, #119	; 0x77
 80067ec:	dded      	ble.n	80067ca <_ProcessAuxDataTable+0xde>
	}
}
 80067ee:	bf00      	nop
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20002358 	.word	0x20002358

080067fc <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006806:	2000      	movs	r0, #0
 8006808:	f7ff fb5a 	bl	8005ec0 <SM_GetOutputChannel>
 800680c:	4603      	mov	r3, r0
 800680e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	429a      	cmp	r2, r3
 800681e:	d90c      	bls.n	800683a <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	3301      	adds	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b61      	cmp	r3, #97	; 0x61
 800682a:	d901      	bls.n	8006830 <VPP_MapEncoderPositionToSignalOutput+0x34>
 800682c:	2361      	movs	r3, #97	; 0x61
 800682e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fe7c 	bl	8006530 <VPP_ApplyProfileToSignal>
 8006838:	e010      	b.n	800685c <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800683a:	4b0c      	ldr	r3, [pc, #48]	; (800686c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	429a      	cmp	r2, r3
 8006842:	d20b      	bcs.n	800685c <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	3b01      	subs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b61      	cmp	r3, #97	; 0x61
 800684e:	d901      	bls.n	8006854 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fe6a 	bl	8006530 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 800685c:	4a03      	ldr	r2, [pc, #12]	; (800686c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	8013      	strh	r3, [r2, #0]

}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20001e9c 	.word	0x20001e9c

08006870 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800687a:	2001      	movs	r0, #1
 800687c:	f7ff fb20 	bl	8005ec0 <SM_GetOutputChannel>
 8006880:	4603      	mov	r3, r0
 8006882:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	429a      	cmp	r2, r3
 8006892:	d90c      	bls.n	80068ae <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	3301      	adds	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b61      	cmp	r3, #97	; 0x61
 800689e:	d901      	bls.n	80068a4 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80068a0:	2361      	movs	r3, #97	; 0x61
 80068a2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fe70 	bl	800658c <VPP_ApplyProfileToAux>
 80068ac:	e010      	b.n	80068d0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d20b      	bcs.n	80068d0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b61      	cmp	r3, #97	; 0x61
 80068c2:	d901      	bls.n	80068c8 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fe5e 	bl	800658c <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80068d0:	4a03      	ldr	r2, [pc, #12]	; (80068e0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	8013      	strh	r3, [r2, #0]

}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20001e9c 	.word	0x20001e9c

080068e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	; 0x30
 80068e8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80068ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	2220      	movs	r2, #32
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f008 fd9f 	bl	800f440 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006902:	4b32      	ldr	r3, [pc, #200]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006908:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <MX_ADC1_Init+0xe8>)
 800690c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006910:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006918:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <MX_ADC1_Init+0xe8>)
 800691a:	2200      	movs	r2, #0
 800691c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800691e:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006920:	2200      	movs	r2, #0
 8006922:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006924:	4b29      	ldr	r3, [pc, #164]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006926:	2200      	movs	r2, #0
 8006928:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800692a:	4b28      	ldr	r3, [pc, #160]	; (80069cc <MX_ADC1_Init+0xe8>)
 800692c:	2204      	movs	r2, #4
 800692e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006930:	4b26      	ldr	r3, [pc, #152]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006932:	2200      	movs	r2, #0
 8006934:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006936:	4b25      	ldr	r3, [pc, #148]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006938:	2201      	movs	r2, #1
 800693a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800693c:	4b23      	ldr	r3, [pc, #140]	; (80069cc <MX_ADC1_Init+0xe8>)
 800693e:	2201      	movs	r2, #1
 8006940:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006942:	4b22      	ldr	r3, [pc, #136]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <MX_ADC1_Init+0xe8>)
 800694c:	2200      	movs	r2, #0
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006964:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006966:	4b19      	ldr	r3, [pc, #100]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800696e:	4817      	ldr	r0, [pc, #92]	; (80069cc <MX_ADC1_Init+0xe8>)
 8006970:	f001 ff4c 	bl	800880c <HAL_ADC_Init>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800697a:	f000 fea9 	bl	80076d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006986:	4619      	mov	r1, r3
 8006988:	4810      	ldr	r0, [pc, #64]	; (80069cc <MX_ADC1_Init+0xe8>)
 800698a:	f002 fcd5 	bl	8009338 <HAL_ADCEx_MultiModeConfigChannel>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006994:	f000 fe9c 	bl	80076d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <MX_ADC1_Init+0xec>)
 800699a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800699c:	2306      	movs	r3, #6
 800699e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80069a4:	237f      	movs	r3, #127	; 0x7f
 80069a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80069a8:	2304      	movs	r3, #4
 80069aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	4619      	mov	r1, r3
 80069b4:	4805      	ldr	r0, [pc, #20]	; (80069cc <MX_ADC1_Init+0xe8>)
 80069b6:	f002 f8e9 	bl	8008b8c <HAL_ADC_ConfigChannel>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80069c0:	f000 fe86 	bl	80076d0 <Error_Handler>
  }

}
 80069c4:	bf00      	nop
 80069c6:	3730      	adds	r7, #48	; 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20002538 	.word	0x20002538
 80069d0:	0c900008 	.word	0x0c900008

080069d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069dc:	f107 0314 	add.w	r3, r7, #20
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	605a      	str	r2, [r3, #4]
 80069e6:	609a      	str	r2, [r3, #8]
 80069e8:	60da      	str	r2, [r3, #12]
 80069ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069f4:	d14f      	bne.n	8006a96 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 80069f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fa:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 80069fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a02:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a0e:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a1a:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <HAL_ADC_MspInit+0xcc>)
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a26:	2304      	movs	r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	4619      	mov	r1, r3
 8006a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a3c:	f004 f884 	bl	800ab48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a42:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <HAL_ADC_MspInit+0xd4>)
 8006a44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006a46:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a48:	2205      	movs	r2, #5
 8006a4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a52:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a70:	2220      	movs	r2, #32
 8006a72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006a7a:	480a      	ldr	r0, [pc, #40]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a7c:	f003 fd98 	bl	800a5b0 <HAL_DMA_Init>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006a86:	f000 fe23 	bl	80076d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
 8006a90:	4a04      	ldr	r2, [pc, #16]	; (8006aa4 <HAL_ADC_MspInit+0xd0>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006a96:	bf00      	nop
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	200025a4 	.word	0x200025a4
 8006aa8:	40020008 	.word	0x40020008

08006aac <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <MX_COMP1_Init+0x48>)
 8006ab4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006abe:	4a0e      	ldr	r2, [pc, #56]	; (8006af8 <MX_COMP1_Init+0x4c>)
 8006ac0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006ada:	4805      	ldr	r0, [pc, #20]	; (8006af0 <MX_COMP1_Init+0x44>)
 8006adc:	f002 fe80 	bl	80097e0 <HAL_COMP_Init>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006ae6:	f000 fdf3 	bl	80076d0 <Error_Handler>
  }

}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20002604 	.word	0x20002604
 8006af4:	40010200 	.word	0x40010200
 8006af8:	00800030 	.word	0x00800030

08006afc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b04:	f107 030c 	add.w	r3, r7, #12
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a0f      	ldr	r2, [pc, #60]	; (8006b58 <HAL_COMP_MspInit+0x5c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d118      	bne.n	8006b50 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_COMP_MspInit+0x60>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <HAL_COMP_MspInit+0x60>)
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_COMP_MspInit+0x60>)
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b36:	2302      	movs	r3, #2
 8006b38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b42:	f107 030c 	add.w	r3, r7, #12
 8006b46:	4619      	mov	r1, r3
 8006b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b4c:	f003 fffc 	bl	800ab48 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006b50:	bf00      	nop
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40010200 	.word	0x40010200
 8006b5c:	40021000 	.word	0x40021000

08006b60 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006b66:	463b      	mov	r3, r7
 8006b68:	2230      	movs	r2, #48	; 0x30
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f008 fc67 	bl	800f440 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <MX_DAC1_Init+0x8c>)
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <MX_DAC1_Init+0x90>)
 8006b76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006b78:	481c      	ldr	r0, [pc, #112]	; (8006bec <MX_DAC1_Init+0x8c>)
 8006b7a:	f003 f904 	bl	8009d86 <HAL_DAC_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006b84:	f000 fda4 	bl	80076d0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006b88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b8c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006b9a:	2312      	movs	r3, #18
 8006b9c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006bae:	463b      	mov	r3, r7
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	480d      	ldr	r0, [pc, #52]	; (8006bec <MX_DAC1_Init+0x8c>)
 8006bb6:	f003 fac5 	bl	800a144 <HAL_DAC_ConfigChannel>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006bc0:	f000 fd86 	bl	80076d0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006bcc:	463b      	mov	r3, r7
 8006bce:	2210      	movs	r2, #16
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4806      	ldr	r0, [pc, #24]	; (8006bec <MX_DAC1_Init+0x8c>)
 8006bd4:	f003 fab6 	bl	800a144 <HAL_DAC_ConfigChannel>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006bde:	f000 fd77 	bl	80076d0 <Error_Handler>
  }

}
 8006be2:	bf00      	nop
 8006be4:	3730      	adds	r7, #48	; 0x30
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000263c 	.word	0x2000263c
 8006bf0:	50000800 	.word	0x50000800

08006bf4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	; 0x30
 8006bf8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	2230      	movs	r2, #48	; 0x30
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f008 fc1d 	bl	800f440 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <MX_DAC2_Init+0x6c>)
 8006c08:	4a16      	ldr	r2, [pc, #88]	; (8006c64 <MX_DAC2_Init+0x70>)
 8006c0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006c0c:	4814      	ldr	r0, [pc, #80]	; (8006c60 <MX_DAC2_Init+0x6c>)
 8006c0e:	f003 f8ba 	bl	8009d86 <HAL_DAC_Init>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006c18:	f000 fd5a 	bl	80076d0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c20:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006c2e:	2306      	movs	r3, #6
 8006c30:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006c42:	463b      	mov	r3, r7
 8006c44:	2200      	movs	r2, #0
 8006c46:	4619      	mov	r1, r3
 8006c48:	4805      	ldr	r0, [pc, #20]	; (8006c60 <MX_DAC2_Init+0x6c>)
 8006c4a:	f003 fa7b 	bl	800a144 <HAL_DAC_ConfigChannel>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006c54:	f000 fd3c 	bl	80076d0 <Error_Handler>
  }

}
 8006c58:	bf00      	nop
 8006c5a:	3730      	adds	r7, #48	; 0x30
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20002628 	.word	0x20002628
 8006c64:	50000c00 	.word	0x50000c00

08006c68 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c70:	f107 031c 	add.w	r3, r7, #28
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	609a      	str	r2, [r3, #8]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a56      	ldr	r2, [pc, #344]	; (8006de0 <HAL_DAC_MspInit+0x178>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d150      	bne.n	8006d2c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006c8a:	4b56      	ldr	r3, [pc, #344]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	4a55      	ldr	r2, [pc, #340]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ca2:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	4a4f      	ldr	r2, [pc, #316]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cae:	4b4d      	ldr	r3, [pc, #308]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cba:	2330      	movs	r3, #48	; 0x30
 8006cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc6:	f107 031c 	add.w	r3, r7, #28
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cd0:	f003 ff3a 	bl	800ab48 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006cd4:	4b44      	ldr	r3, [pc, #272]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006cd6:	4a45      	ldr	r2, [pc, #276]	; (8006dec <HAL_DAC_MspInit+0x184>)
 8006cd8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006cda:	4b43      	ldr	r3, [pc, #268]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006cdc:	2206      	movs	r2, #6
 8006cde:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ce0:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ce6:	4b40      	ldr	r3, [pc, #256]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006cec:	4b3e      	ldr	r3, [pc, #248]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d00:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006d04:	2220      	movs	r2, #32
 8006d06:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006d08:	4b37      	ldr	r3, [pc, #220]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006d0e:	4836      	ldr	r0, [pc, #216]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006d10:	f003 fc4e 	bl	800a5b0 <HAL_DMA_Init>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006d1a:	f000 fcd9 	bl	80076d0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a31      	ldr	r2, [pc, #196]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	4a30      	ldr	r2, [pc, #192]	; (8006de8 <HAL_DAC_MspInit+0x180>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006d2a:	e054      	b.n	8006dd6 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <HAL_DAC_MspInit+0x188>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d14f      	bne.n	8006dd6 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006d36:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d42:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4e:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	4a24      	ldr	r2, [pc, #144]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d5a:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <HAL_DAC_MspInit+0x17c>)
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d72:	f107 031c 	add.w	r3, r7, #28
 8006d76:	4619      	mov	r1, r3
 8006d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d7c:	f003 fee4 	bl	800ab48 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006d80:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <HAL_DAC_MspInit+0x190>)
 8006d84:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006d86:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006d88:	2229      	movs	r2, #41	; 0x29
 8006d8a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d8c:	4b19      	ldr	r3, [pc, #100]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006d8e:	2210      	movs	r2, #16
 8006d90:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d98:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006d9a:	2280      	movs	r2, #128	; 0x80
 8006d9c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d9e:	4b15      	ldr	r3, [pc, #84]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dac:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006dae:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006db0:	2220      	movs	r2, #32
 8006db2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006dba:	480e      	ldr	r0, [pc, #56]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006dbc:	f003 fbf8 	bl	800a5b0 <HAL_DMA_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006dc6:	f000 fc83 	bl	80076d0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <HAL_DAC_MspInit+0x18c>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006dd6:	bf00      	nop
 8006dd8:	3730      	adds	r7, #48	; 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	50000800 	.word	0x50000800
 8006de4:	40021000 	.word	0x40021000
 8006de8:	20001eb0 	.word	0x20001eb0
 8006dec:	4002001c 	.word	0x4002001c
 8006df0:	50000c00 	.word	0x50000c00
 8006df4:	20002650 	.word	0x20002650
 8006df8:	40020030 	.word	0x40020030

08006dfc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e08:	f043 0304 	orr.w	r3, r3, #4
 8006e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6493      	str	r3, [r2, #72]	; 0x48
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <MX_DMA_Init+0x70>)
 8006e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2101      	movs	r1, #1
 8006e36:	200b      	movs	r0, #11
 8006e38:	f002 ff63 	bl	8009d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006e3c:	200b      	movs	r0, #11
 8006e3e:	f002 ff7a 	bl	8009d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006e42:	2200      	movs	r2, #0
 8006e44:	2100      	movs	r1, #0
 8006e46:	200c      	movs	r0, #12
 8006e48:	f002 ff5b 	bl	8009d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006e4c:	200c      	movs	r0, #12
 8006e4e:	f002 ff72 	bl	8009d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	200d      	movs	r0, #13
 8006e58:	f002 ff53 	bl	8009d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006e5c:	200d      	movs	r0, #13
 8006e5e:	f002 ff6a 	bl	8009d36 <HAL_NVIC_EnableIRQ>

}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40021000 	.word	0x40021000

08006e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <__NVIC_GetPriorityGrouping+0x18>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	f003 0307 	and.w	r3, r3, #7
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	db0b      	blt.n	8006eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	f003 021f 	and.w	r2, r3, #31
 8006ea4:	4907      	ldr	r1, [pc, #28]	; (8006ec4 <__NVIC_EnableIRQ+0x38>)
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	2001      	movs	r0, #1
 8006eae:	fa00 f202 	lsl.w	r2, r0, r2
 8006eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	e000e100 	.word	0xe000e100

08006ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db0a      	blt.n	8006ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	490c      	ldr	r1, [pc, #48]	; (8006f14 <__NVIC_SetPriority+0x4c>)
 8006ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee6:	0112      	lsls	r2, r2, #4
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	440b      	add	r3, r1
 8006eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ef0:	e00a      	b.n	8006f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	4908      	ldr	r1, [pc, #32]	; (8006f18 <__NVIC_SetPriority+0x50>)
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	3b04      	subs	r3, #4
 8006f00:	0112      	lsls	r2, r2, #4
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	440b      	add	r3, r1
 8006f06:	761a      	strb	r2, [r3, #24]
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	e000e100 	.word	0xe000e100
 8006f18:	e000ed00 	.word	0xe000ed00

08006f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b089      	sub	sp, #36	; 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f1c3 0307 	rsb	r3, r3, #7
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	bf28      	it	cs
 8006f3a:	2304      	movcs	r3, #4
 8006f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3304      	adds	r3, #4
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	d902      	bls.n	8006f4c <NVIC_EncodePriority+0x30>
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3b03      	subs	r3, #3
 8006f4a:	e000      	b.n	8006f4e <NVIC_EncodePriority+0x32>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43da      	mvns	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	401a      	ands	r2, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	43d9      	mvns	r1, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f74:	4313      	orrs	r3, r2
         );
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3724      	adds	r7, #36	; 0x24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006f8e:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	3302      	adds	r3, #2
 8006f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	ea02 0103 	and.w	r1, r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	fa93 f3a3 	rbit	r3, r3
 8006fb2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	fab3 f383 	clz	r3, r3
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	4806      	ldr	r0, [pc, #24]	; (8006fe0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	3302      	adds	r3, #2
 8006fd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	40010000 	.word	0x40010000

08006fe4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	fa93 f3a3 	rbit	r3, r3
 8006ffe:	613b      	str	r3, [r7, #16]
  return result;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	2103      	movs	r1, #3
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	fa93 f3a3 	rbit	r3, r3
 800701e:	61bb      	str	r3, [r7, #24]
  return result;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	fab3 f383 	clz	r3, r3
 8007026:	b2db      	uxtb	r3, r3
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	601a      	str	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	3724      	adds	r7, #36	; 0x24
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007042:	b480      	push	{r7}
 8007044:	b089      	sub	sp, #36	; 0x24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	fa93 f3a3 	rbit	r3, r3
 800705c:	613b      	str	r3, [r7, #16]
  return result;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	fab3 f383 	clz	r3, r3
 8007064:	b2db      	uxtb	r3, r3
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	2103      	movs	r1, #3
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	401a      	ands	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	fa93 f3a3 	rbit	r3, r3
 800707c:	61bb      	str	r3, [r7, #24]
  return result;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	fab3 f383 	clz	r3, r3
 8007084:	b2db      	uxtb	r3, r3
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	fa01 f303 	lsl.w	r3, r1, r3
 800708e:	431a      	orrs	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	60da      	str	r2, [r3, #12]
}
 8007094:	bf00      	nop
 8007096:	3724      	adds	r7, #36	; 0x24
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80070c4:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070c8:	4907      	ldr	r1, [pc, #28]	; (80070e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4013      	ands	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	bf00      	nop
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40021000 	.word	0x40021000

080070ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80070f2:	f107 031c 	add.w	r3, r7, #28
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	60da      	str	r2, [r3, #12]
 800710a:	611a      	str	r2, [r3, #16]
 800710c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800710e:	2004      	movs	r0, #4
 8007110:	f7ff ffd4 	bl	80070bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007114:	2020      	movs	r0, #32
 8007116:	f7ff ffd1 	bl	80070bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800711a:	2001      	movs	r0, #1
 800711c:	f7ff ffce 	bl	80070bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007120:	2002      	movs	r0, #2
 8007122:	f7ff ffcb 	bl	80070bc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007126:	2108      	movs	r1, #8
 8007128:	48d3      	ldr	r0, [pc, #844]	; (8007478 <MX_GPIO_Init+0x38c>)
 800712a:	f7ff ffb9 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800712e:	2108      	movs	r1, #8
 8007130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007134:	f7ff ffb4 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8007138:	2110      	movs	r1, #16
 800713a:	48cf      	ldr	r0, [pc, #828]	; (8007478 <MX_GPIO_Init+0x38c>)
 800713c:	f7ff ffb0 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007140:	2120      	movs	r1, #32
 8007142:	48cd      	ldr	r0, [pc, #820]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007144:	f7ff ffac 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8007148:	2101      	movs	r1, #1
 800714a:	48cc      	ldr	r0, [pc, #816]	; (800747c <MX_GPIO_Init+0x390>)
 800714c:	f7ff ffa8 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007154:	48c8      	ldr	r0, [pc, #800]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007156:	f7ff ffa3 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800715a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800715e:	48c6      	ldr	r0, [pc, #792]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007160:	f7ff ff9e 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	48c5      	ldr	r0, [pc, #788]	; (800747c <MX_GPIO_Init+0x390>)
 8007168:	f7ff ff9a 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800716c:	2180      	movs	r1, #128	; 0x80
 800716e:	48c3      	ldr	r0, [pc, #780]	; (800747c <MX_GPIO_Init+0x390>)
 8007170:	f7ff ff96 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007178:	48c0      	ldr	r0, [pc, #768]	; (800747c <MX_GPIO_Init+0x390>)
 800717a:	f7ff ff91 	bl	80070a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800717e:	49c0      	ldr	r1, [pc, #768]	; (8007480 <MX_GPIO_Init+0x394>)
 8007180:	2002      	movs	r0, #2
 8007182:	f7ff feff 	bl	8006f84 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007186:	49bf      	ldr	r1, [pc, #764]	; (8007484 <MX_GPIO_Init+0x398>)
 8007188:	2002      	movs	r0, #2
 800718a:	f7ff fefb 	bl	8006f84 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800718e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007192:	2005      	movs	r0, #5
 8007194:	f7ff fef6 	bl	8006f84 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007198:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800719c:	2005      	movs	r0, #5
 800719e:	f7ff fef1 	bl	8006f84 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80071a2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80071a6:	2002      	movs	r0, #2
 80071a8:	f7ff feec 	bl	8006f84 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80071ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071b0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80071be:	2302      	movs	r3, #2
 80071c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80071c4:	f107 031c 	add.w	r3, r7, #28
 80071c8:	4618      	mov	r0, r3
 80071ca:	f006 fe57 	bl	800de7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80071ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80071da:	2300      	movs	r3, #0
 80071dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80071e6:	f107 031c 	add.w	r3, r7, #28
 80071ea:	4618      	mov	r0, r3
 80071ec:	f006 fe46 	bl	800de7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80071f0:	2301      	movs	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007200:	2302      	movs	r3, #2
 8007202:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007206:	f107 031c 	add.w	r3, r7, #28
 800720a:	4618      	mov	r0, r3
 800720c:	f006 fe36 	bl	800de7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007210:	2302      	movs	r3, #2
 8007212:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007220:	2302      	movs	r3, #2
 8007222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007226:	f107 031c 	add.w	r3, r7, #28
 800722a:	4618      	mov	r0, r3
 800722c:	f006 fe26 	bl	800de7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007230:	2304      	movs	r3, #4
 8007232:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800723a:	2300      	movs	r3, #0
 800723c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007240:	2302      	movs	r3, #2
 8007242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007246:	f107 031c 	add.w	r3, r7, #28
 800724a:	4618      	mov	r0, r3
 800724c:	f006 fe16 	bl	800de7c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007250:	2201      	movs	r2, #1
 8007252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007256:	4888      	ldr	r0, [pc, #544]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007258:	f7ff fef3 	bl	8007042 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800725c:	2201      	movs	r2, #1
 800725e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007262:	4885      	ldr	r0, [pc, #532]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007264:	f7ff feed 	bl	8007042 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007268:	2201      	movs	r2, #1
 800726a:	2101      	movs	r1, #1
 800726c:	4886      	ldr	r0, [pc, #536]	; (8007488 <MX_GPIO_Init+0x39c>)
 800726e:	f7ff fee8 	bl	8007042 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007272:	2201      	movs	r2, #1
 8007274:	2102      	movs	r1, #2
 8007276:	4884      	ldr	r0, [pc, #528]	; (8007488 <MX_GPIO_Init+0x39c>)
 8007278:	f7ff fee3 	bl	8007042 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800727c:	2201      	movs	r2, #1
 800727e:	2104      	movs	r1, #4
 8007280:	487d      	ldr	r0, [pc, #500]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007282:	f7ff fede 	bl	8007042 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007286:	2200      	movs	r2, #0
 8007288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800728c:	487a      	ldr	r0, [pc, #488]	; (8007478 <MX_GPIO_Init+0x38c>)
 800728e:	f7ff fea9 	bl	8006fe4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007298:	4877      	ldr	r0, [pc, #476]	; (8007478 <MX_GPIO_Init+0x38c>)
 800729a:	f7ff fea3 	bl	8006fe4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800729e:	2200      	movs	r2, #0
 80072a0:	2101      	movs	r1, #1
 80072a2:	4879      	ldr	r0, [pc, #484]	; (8007488 <MX_GPIO_Init+0x39c>)
 80072a4:	f7ff fe9e 	bl	8006fe4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80072a8:	2200      	movs	r2, #0
 80072aa:	2102      	movs	r1, #2
 80072ac:	4876      	ldr	r0, [pc, #472]	; (8007488 <MX_GPIO_Init+0x39c>)
 80072ae:	f7ff fe99 	bl	8006fe4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2104      	movs	r1, #4
 80072b6:	4870      	ldr	r0, [pc, #448]	; (8007478 <MX_GPIO_Init+0x38c>)
 80072b8:	f7ff fe94 	bl	8006fe4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80072bc:	2308      	movs	r3, #8
 80072be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80072cc:	2302      	movs	r3, #2
 80072ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80072d0:	1d3b      	adds	r3, r7, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	4868      	ldr	r0, [pc, #416]	; (8007478 <MX_GPIO_Init+0x38c>)
 80072d6:	f006 ffc4 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80072da:	2308      	movs	r3, #8
 80072dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80072de:	2301      	movs	r3, #1
 80072e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072f6:	f006 ffb4 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80072fa:	2310      	movs	r3, #16
 80072fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80072fe:	2301      	movs	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4859      	ldr	r0, [pc, #356]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007314:	f006 ffa5 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007318:	2320      	movs	r3, #32
 800731a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800731c:	2301      	movs	r3, #1
 800731e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4851      	ldr	r0, [pc, #324]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007332:	f006 ff96 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8007336:	2301      	movs	r3, #1
 8007338:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800733a:	2301      	movs	r3, #1
 800733c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	4619      	mov	r1, r3
 800734e:	484b      	ldr	r0, [pc, #300]	; (800747c <MX_GPIO_Init+0x390>)
 8007350:	f006 ff87 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007358:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800735a:	2301      	movs	r3, #1
 800735c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	4619      	mov	r1, r3
 800736e:	4842      	ldr	r0, [pc, #264]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007370:	f006 ff77 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007378:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800737a:	2301      	movs	r3, #1
 800737c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	4619      	mov	r1, r3
 800738e:	483a      	ldr	r0, [pc, #232]	; (8007478 <MX_GPIO_Init+0x38c>)
 8007390:	f006 ff67 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007398:	2301      	movs	r3, #1
 800739a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800739c:	2303      	movs	r3, #3
 800739e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073a4:	2300      	movs	r3, #0
 80073a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80073a8:	1d3b      	adds	r3, r7, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4833      	ldr	r0, [pc, #204]	; (800747c <MX_GPIO_Init+0x390>)
 80073ae:	f006 ff58 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80073b2:	2380      	movs	r3, #128	; 0x80
 80073b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073b6:	2301      	movs	r3, #1
 80073b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80073ba:	2303      	movs	r3, #3
 80073bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80073c6:	1d3b      	adds	r3, r7, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	482c      	ldr	r0, [pc, #176]	; (800747c <MX_GPIO_Init+0x390>)
 80073cc:	f006 ff49 	bl	800e262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80073d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073d6:	2301      	movs	r3, #1
 80073d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80073da:	2303      	movs	r3, #3
 80073dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	4619      	mov	r1, r3
 80073ea:	4824      	ldr	r0, [pc, #144]	; (800747c <MX_GPIO_Init+0x390>)
 80073ec:	f006 ff39 	bl	800e262 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80073f0:	f7ff fd3e 	bl	8006e70 <__NVIC_GetPriorityGrouping>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fd8e 	bl	8006f1c <NVIC_EncodePriority>
 8007400:	4603      	mov	r3, r0
 8007402:	4619      	mov	r1, r3
 8007404:	2006      	movs	r0, #6
 8007406:	f7ff fd5f 	bl	8006ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800740a:	2006      	movs	r0, #6
 800740c:	f7ff fd3e 	bl	8006e8c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007410:	f7ff fd2e 	bl	8006e70 <__NVIC_GetPriorityGrouping>
 8007414:	4603      	mov	r3, r0
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fd7e 	bl	8006f1c <NVIC_EncodePriority>
 8007420:	4603      	mov	r3, r0
 8007422:	4619      	mov	r1, r3
 8007424:	2007      	movs	r0, #7
 8007426:	f7ff fd4f 	bl	8006ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800742a:	2007      	movs	r0, #7
 800742c:	f7ff fd2e 	bl	8006e8c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007430:	f7ff fd1e 	bl	8006e70 <__NVIC_GetPriorityGrouping>
 8007434:	4603      	mov	r3, r0
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fd6e 	bl	8006f1c <NVIC_EncodePriority>
 8007440:	4603      	mov	r3, r0
 8007442:	4619      	mov	r1, r3
 8007444:	2008      	movs	r0, #8
 8007446:	f7ff fd3f 	bl	8006ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800744a:	2008      	movs	r0, #8
 800744c:	f7ff fd1e 	bl	8006e8c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007450:	f7ff fd0e 	bl	8006e70 <__NVIC_GetPriorityGrouping>
 8007454:	4603      	mov	r3, r0
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fd5e 	bl	8006f1c <NVIC_EncodePriority>
 8007460:	4603      	mov	r3, r0
 8007462:	4619      	mov	r1, r3
 8007464:	2028      	movs	r0, #40	; 0x28
 8007466:	f7ff fd2f 	bl	8006ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800746a:	2028      	movs	r0, #40	; 0x28
 800746c:	f7ff fd0e 	bl	8006e8c <__NVIC_EnableIRQ>

}
 8007470:	bf00      	nop
 8007472:	3728      	adds	r7, #40	; 0x28
 8007474:	46bd      	mov	sp, r7
 8007476:	e009      	b.n	800748c <MX_GPIO_Init+0x3a0>
 8007478:	48000800 	.word	0x48000800
 800747c:	48000400 	.word	0x48000400
 8007480:	0f000003 	.word	0x0f000003
 8007484:	f0000003 	.word	0xf0000003
 8007488:	48001400 	.word	0x48001400
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007498:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800749c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d013      	beq.n	80074d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80074a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80074b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80074b8:	e000      	b.n	80074bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80074ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80074bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f9      	beq.n	80074ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80074c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80074d0:	687b      	ldr	r3, [r7, #4]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_DAC_ConvCpltCallbackCh1>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]

}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
  int i=0;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e009      	b.n	800751c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	60ba      	str	r2, [r7, #8]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff ffbd 	bl	8007490 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3301      	adds	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	dbf1      	blt.n	8007508 <_write+0x16>
  return len;
 8007524:	687b      	ldr	r3, [r7, #4]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007534:	f000 ff15 	bl	8008362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007538:	f000 f85c 	bl	80075f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800753c:	f7ff fdd6 	bl	80070ec <MX_GPIO_Init>
  MX_DMA_Init();
 8007540:	f7ff fc5c 	bl	8006dfc <MX_DMA_Init>
  MX_DAC1_Init();
 8007544:	f7ff fb0c 	bl	8006b60 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007548:	f7ff f9cc 	bl	80068e4 <MX_ADC1_Init>
  MX_COMP1_Init();
 800754c:	f7ff faae 	bl	8006aac <MX_COMP1_Init>
  MX_SPI3_Init();
 8007550:	f000 f8fc 	bl	800774c <MX_SPI3_Init>
  MX_RNG_Init();
 8007554:	f000 f8ec 	bl	8007730 <MX_RNG_Init>
  MX_TIM1_Init();
 8007558:	f000 fb4c 	bl	8007bf4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800755c:	f000 fca2 	bl	8007ea4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007560:	f000 fd5a 	bl	8008018 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007564:	f000 fd06 	bl	8007f74 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007568:	f000 fc4e 	bl	8007e08 <MX_TIM5_Init>
  MX_TIM3_Init();
 800756c:	f000 fbfe 	bl	8007d6c <MX_TIM3_Init>
  MX_DAC2_Init();
 8007570:	f7ff fb40 	bl	8006bf4 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007574:	f000 fd78 	bl	8008068 <MX_TIM17_Init>
  MX_TIM2_Init();
 8007578:	f000 fbac 	bl	8007cd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 800757c:	f7fe fb8c 	bl	8005c98 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007580:	4817      	ldr	r0, [pc, #92]	; (80075e0 <main+0xb0>)
 8007582:	f004 fe95 	bl	800c2b0 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007586:	2200      	movs	r2, #0
 8007588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800758c:	4815      	ldr	r0, [pc, #84]	; (80075e4 <main+0xb4>)
 800758e:	f003 fd3f 	bl	800b010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007598:	4812      	ldr	r0, [pc, #72]	; (80075e4 <main+0xb4>)
 800759a:	f003 fd39 	bl	800b010 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
 800759e:	2201      	movs	r2, #1
 80075a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075a4:	480f      	ldr	r0, [pc, #60]	; (80075e4 <main+0xb4>)
 80075a6:	f003 fd33 	bl	800b010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075b0:	480c      	ldr	r0, [pc, #48]	; (80075e4 <main+0xb4>)
 80075b2:	f003 fd2d 	bl	800b010 <HAL_GPIO_WritePin>
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  //TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80075b6:	480c      	ldr	r0, [pc, #48]	; (80075e8 <main+0xb8>)
 80075b8:	f004 fe7a 	bl	800c2b0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80075bc:	480b      	ldr	r0, [pc, #44]	; (80075ec <main+0xbc>)
 80075be:	f004 fe21 	bl	800c204 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <main+0xc0>)
 80075c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075c8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <main+0xc0>)
 80075cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80075d2:	f7f9 fba7 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80075d6:	f7f9 fbb3 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80075da:	f7fd fbb5 	bl	8004d48 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075de:	e7fe      	b.n	80075de <main+0xae>
 80075e0:	200027ac 	.word	0x200027ac
 80075e4:	48000800 	.word	0x48000800
 80075e8:	20002890 	.word	0x20002890
 80075ec:	20002844 	.word	0x20002844
 80075f0:	40001000 	.word	0x40001000

080075f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b0a8      	sub	sp, #160	; 0xa0
 80075f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075fe:	2238      	movs	r2, #56	; 0x38
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f007 ff1c 	bl	800f440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007618:	463b      	mov	r3, r7
 800761a:	2254      	movs	r2, #84	; 0x54
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f007 ff0e 	bl	800f440 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007624:	2000      	movs	r0, #0
 8007626:	f003 fd0b 	bl	800b040 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800762a:	2322      	movs	r3, #34	; 0x22
 800762c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800762e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007632:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007638:	2301      	movs	r3, #1
 800763a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800763e:	2302      	movs	r3, #2
 8007640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007644:	2302      	movs	r3, #2
 8007646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800764a:	2302      	movs	r3, #2
 800764c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007650:	232a      	movs	r3, #42	; 0x2a
 8007652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007656:	231e      	movs	r3, #30
 8007658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800765c:	2304      	movs	r3, #4
 800765e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007662:	2302      	movs	r3, #2
 8007664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007668:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800766c:	4618      	mov	r0, r3
 800766e:	f003 fd8b 	bl	800b188 <HAL_RCC_OscConfig>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007678:	f000 f82a 	bl	80076d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800767c:	230f      	movs	r3, #15
 800767e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007680:	2303      	movs	r3, #3
 8007682:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007684:	2300      	movs	r3, #0
 8007686:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007688:	2300      	movs	r3, #0
 800768a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800768c:	2300      	movs	r3, #0
 800768e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007694:	2108      	movs	r1, #8
 8007696:	4618      	mov	r0, r3
 8007698:	f004 f88e 	bl	800b7b8 <HAL_RCC_ClockConfig>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80076a2:	f000 f815 	bl	80076d0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80076a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80076aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80076ac:	2300      	movs	r3, #0
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80076b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076b6:	463b      	mov	r3, r7
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 fa6d 	bl	800bb98 <HAL_RCCEx_PeriphCLKConfig>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80076c4:	f000 f804 	bl	80076d0 <Error_Handler>
  }
}
 80076c8:	bf00      	nop
 80076ca:	37a0      	adds	r7, #160	; 0xa0
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f043 0204 	orr.w	r2, r3, #4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <LL_AHB2_GRP1_EnableClock>:
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800770a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800770c:	4907      	ldr	r1, [pc, #28]	; (800772c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4313      	orrs	r3, r2
 8007712:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4013      	ands	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40021000 	.word	0x40021000

08007730 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007734:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007738:	f7ff ffe2 	bl	8007700 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800773c:	4802      	ldr	r0, [pc, #8]	; (8007748 <MX_RNG_Init+0x18>)
 800773e:	f7ff ffce 	bl	80076de <LL_RNG_Enable>

}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	50060800 	.word	0x50060800

0800774c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007750:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007752:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <MX_SPI3_Init+0x78>)
 8007754:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800775c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800775e:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007764:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007766:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800776a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800776c:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <MX_SPI3_Init+0x74>)
 800776e:	2200      	movs	r2, #0
 8007770:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007774:	2200      	movs	r2, #0
 8007776:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <MX_SPI3_Init+0x74>)
 800777a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800777e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007782:	2210      	movs	r2, #16
 8007784:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007788:	2200      	movs	r2, #0
 800778a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <MX_SPI3_Init+0x74>)
 800778e:	2200      	movs	r2, #0
 8007790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <MX_SPI3_Init+0x74>)
 8007794:	2200      	movs	r2, #0
 8007796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <MX_SPI3_Init+0x74>)
 800779a:	2207      	movs	r2, #7
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <MX_SPI3_Init+0x74>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <MX_SPI3_Init+0x74>)
 80077a6:	2208      	movs	r2, #8
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80077aa:	4805      	ldr	r0, [pc, #20]	; (80077c0 <MX_SPI3_Init+0x74>)
 80077ac:	f004 fc40 	bl	800c030 <HAL_SPI_Init>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80077b6:	f7ff ff8b 	bl	80076d0 <Error_Handler>
  }

}
 80077ba:	bf00      	nop
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200026b0 	.word	0x200026b0
 80077c4:	40003c00 	.word	0x40003c00

080077c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	60da      	str	r2, [r3, #12]
 80077de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a17      	ldr	r2, [pc, #92]	; (8007844 <HAL_SPI_MspInit+0x7c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d128      	bne.n	800783c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077ea:	4b17      	ldr	r3, [pc, #92]	; (8007848 <HAL_SPI_MspInit+0x80>)
 80077ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ee:	4a16      	ldr	r2, [pc, #88]	; (8007848 <HAL_SPI_MspInit+0x80>)
 80077f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f4:	6593      	str	r3, [r2, #88]	; 0x58
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <HAL_SPI_MspInit+0x80>)
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007802:	4b11      	ldr	r3, [pc, #68]	; (8007848 <HAL_SPI_MspInit+0x80>)
 8007804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007806:	4a10      	ldr	r2, [pc, #64]	; (8007848 <HAL_SPI_MspInit+0x80>)
 8007808:	f043 0304 	orr.w	r3, r3, #4
 800780c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <HAL_SPI_MspInit+0x80>)
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800781a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800781e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007820:	2302      	movs	r3, #2
 8007822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007828:	2300      	movs	r3, #0
 800782a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800782c:	2306      	movs	r3, #6
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	4619      	mov	r1, r3
 8007836:	4805      	ldr	r0, [pc, #20]	; (800784c <HAL_SPI_MspInit+0x84>)
 8007838:	f003 f986 	bl	800ab48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800783c:	bf00      	nop
 800783e:	3728      	adds	r7, #40	; 0x28
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40003c00 	.word	0x40003c00
 8007848:	40021000 	.word	0x40021000
 800784c:	48000800 	.word	0x48000800

08007850 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a04      	ldr	r2, [pc, #16]	; (800786c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800785a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800785e:	6093      	str	r3, [r2, #8]
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40007000 	.word	0x40007000

08007870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007876:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <HAL_MspInit+0x44>)
 8007878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787a:	4a0e      	ldr	r2, [pc, #56]	; (80078b4 <HAL_MspInit+0x44>)
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	6613      	str	r3, [r2, #96]	; 0x60
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_MspInit+0x44>)
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <HAL_MspInit+0x44>)
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <HAL_MspInit+0x44>)
 8007894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007898:	6593      	str	r3, [r2, #88]	; 0x58
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <HAL_MspInit+0x44>)
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80078a6:	f7ff ffd3 	bl	8007850 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40021000 	.word	0x40021000

080078b8 <LL_EXTI_IsActiveFlag_0_31>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4013      	ands	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d101      	bne.n	80078d2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40010400 	.word	0x40010400

080078e4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80078ec:	4a04      	ldr	r2, [pc, #16]	; (8007900 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6153      	str	r3, [r2, #20]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40010400 	.word	0x40010400

08007904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007908:	bf00      	nop
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
	...

08007914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <HardFault_Handler+0xc>)
 800791a:	f7f9 fe05 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800791e:	e7fe      	b.n	800791e <HardFault_Handler+0xa>
 8007920:	08014394 	.word	0x08014394

08007924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <MemManage_Handler+0xc>)
 800792a:	f7f9 fdfd 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800792e:	e7fe      	b.n	800792e <MemManage_Handler+0xa>
 8007930:	080143a0 	.word	0x080143a0

08007934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <BusFault_Handler+0xc>)
 800793a:	f7f9 fdf5 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800793e:	e7fe      	b.n	800793e <BusFault_Handler+0xa>
 8007940:	080143b0 	.word	0x080143b0

08007944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <UsageFault_Handler+0xc>)
 800794a:	f7f9 fded 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800794e:	e7fe      	b.n	800794e <UsageFault_Handler+0xa>
 8007950:	080143bc 	.word	0x080143bc

08007954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007962:	b480      	push	{r7}
 8007964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007966:	bf00      	nop
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007982:	f000 fd41 	bl	8008408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007986:	bf00      	nop
 8007988:	bd80      	pop	{r7, pc}

0800798a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800798e:	f7fd fa99 	bl	8004ec4 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007992:	2001      	movs	r0, #1
 8007994:	f7ff ff90 	bl	80078b8 <LL_EXTI_IsActiveFlag_0_31>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800799e:	2001      	movs	r0, #1
 80079a0:	f7ff ffa0 	bl	80078e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80079ac:	f7fd fab0 	bl	8004f10 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80079b0:	2002      	movs	r0, #2
 80079b2:	f7ff ff81 	bl	80078b8 <LL_EXTI_IsActiveFlag_0_31>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80079bc:	2002      	movs	r0, #2
 80079be:	f7ff ff91 	bl	80078e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80079ca:	f7fd fac7 	bl	8004f5c <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80079ce:	2004      	movs	r0, #4
 80079d0:	f7ff ff72 	bl	80078b8 <LL_EXTI_IsActiveFlag_0_31>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80079da:	2004      	movs	r0, #4
 80079dc:	f7ff ff82 	bl	80078e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <DMA1_Channel1_IRQHandler+0x10>)
 80079ea:	f002 ff5d 	bl	800a8a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200025a4 	.word	0x200025a4

080079f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80079fc:	4802      	ldr	r0, [pc, #8]	; (8007a08 <DMA1_Channel2_IRQHandler+0x10>)
 80079fe:	f002 ff53 	bl	800a8a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20001eb0 	.word	0x20001eb0

08007a0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <DMA1_Channel3_IRQHandler+0x10>)
 8007a12:	f002 ff49 	bl	800a8a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20002650 	.word	0x20002650

08007a20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007a24:	f7f9 f9a6 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007a28:	f7fd fabe 	bl	8004fa8 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007a2e:	f004 ff21 	bl	800c874 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007a32:	4803      	ldr	r0, [pc, #12]	; (8007a40 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007a34:	f004 ff1e 	bl	800c874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007a38:	bf00      	nop
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20002844 	.word	0x20002844
 8007a40:	20002760 	.word	0x20002760

08007a44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8007a48:	f7fc fa5c 	bl	8003f04 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a4c:	4803      	ldr	r0, [pc, #12]	; (8007a5c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8007a4e:	f004 ff11 	bl	800c874 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8007a52:	4803      	ldr	r0, [pc, #12]	; (8007a60 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8007a54:	f004 ff0e 	bl	800c874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007a58:	bf00      	nop
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20002844 	.word	0x20002844
 8007a60:	200027ac 	.word	0x200027ac

08007a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007a68:	4802      	ldr	r0, [pc, #8]	; (8007a74 <TIM3_IRQHandler+0x10>)
 8007a6a:	f004 ff03 	bl	800c874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007a6e:	bf00      	nop
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20001f1c 	.word	0x20001f1c

08007a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007a7c:	f7fd f9d2 	bl	8004e24 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007a80:	f7fd f9f8 	bl	8004e74 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a88:	f7ff ff16 	bl	80078b8 <LL_EXTI_IsActiveFlag_0_31>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007a92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a96:	f7ff ff25 	bl	80078e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007a9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a9e:	f7ff ff0b 	bl	80078b8 <LL_EXTI_IsActiveFlag_0_31>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007aa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007aac:	f7ff ff1a 	bl	80078e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007ab0:	bf00      	nop
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007ab8:	f7fd f956 	bl	8004d68 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007abc:	4802      	ldr	r0, [pc, #8]	; (8007ac8 <TIM5_IRQHandler+0x14>)
 8007abe:	f004 fed9 	bl	800c874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007ac2:	bf00      	nop
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200027f8 	.word	0x200027f8

08007acc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e00a      	b.n	8007af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007ade:	f3af 8000 	nop.w
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	60ba      	str	r2, [r7, #8]
 8007aea:	b2ca      	uxtb	r2, r1
 8007aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	3301      	adds	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	dbf0      	blt.n	8007ade <_read+0x12>
	}

return len;
 8007afc:	687b      	ldr	r3, [r7, #4]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <_isatty>:

int _isatty(int file)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
	return 1;
 8007b46:	2301      	movs	r3, #1
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <_sbrk+0x50>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <_sbrk+0x16>
		heap_end = &end;
 8007b80:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <_sbrk+0x50>)
 8007b82:	4a10      	ldr	r2, [pc, #64]	; (8007bc4 <_sbrk+0x54>)
 8007b84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007b86:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <_sbrk+0x50>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <_sbrk+0x50>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	466a      	mov	r2, sp
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d907      	bls.n	8007baa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007b9a:	f007 fc27 	bl	800f3ec <__errno>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ba8:	e006      	b.n	8007bb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <_sbrk+0x50>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4a03      	ldr	r2, [pc, #12]	; (8007bc0 <_sbrk+0x50>)
 8007bb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20001ea0 	.word	0x20001ea0
 8007bc4:	20002930 	.word	0x20002930

08007bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <SystemInit+0x28>)
 8007bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd2:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <SystemInit+0x28>)
 8007bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <SystemInit+0x28>)
 8007bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007be2:	609a      	str	r2, [r3, #8]
#endif
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000ed00 	.word	0xe000ed00

08007bf4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b09a      	sub	sp, #104	; 0x68
 8007bf8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bfe:	2224      	movs	r2, #36	; 0x24
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f007 fc1c 	bl	800f440 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	2234      	movs	r2, #52	; 0x34
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f007 fc10 	bl	800f440 <memset>

  htim1.Instance = TIM1;
 8007c20:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c22:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <MX_TIM1_Init+0xdc>)
 8007c24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8007c2c:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c2e:	2260      	movs	r2, #96	; 0x60
 8007c30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007c32:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c3a:	4b24      	ldr	r3, [pc, #144]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007c40:	4b22      	ldr	r3, [pc, #136]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c46:	4b21      	ldr	r3, [pc, #132]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007c50:	2300      	movs	r3, #0
 8007c52:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007c54:	2301      	movs	r3, #1
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007c60:	2300      	movs	r3, #0
 8007c62:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007c64:	2301      	movs	r3, #1
 8007c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007c74:	4619      	mov	r1, r3
 8007c76:	4815      	ldr	r0, [pc, #84]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c78:	f004 fd56 	bl	800c728 <HAL_TIM_Encoder_Init>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007c82:	f7ff fd25 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007c86:	2320      	movs	r3, #32
 8007c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c96:	4619      	mov	r1, r3
 8007c98:	480c      	ldr	r0, [pc, #48]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007c9a:	f005 fe31 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007ca4:	f7ff fd14 	bl	80076d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007cac:	2300      	movs	r3, #0
 8007cae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007cb0:	1d3b      	adds	r3, r7, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <MX_TIM1_Init+0xd8>)
 8007cb6:	f005 feb9 	bl	800da2c <HAL_TIMEx_ConfigBreakDeadTime>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007cc0:	f7ff fd06 	bl	80076d0 <Error_Handler>
  }

}
 8007cc4:	bf00      	nop
 8007cc6:	3768      	adds	r7, #104	; 0x68
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20002844 	.word	0x20002844
 8007cd0:	40012c00 	.word	0x40012c00

08007cd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cda:	f107 0310 	add.w	r3, r7, #16
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007cfa:	4b1b      	ldr	r3, [pc, #108]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d00:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d0c:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d14:	2280      	movs	r2, #128	; 0x80
 8007d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007d18:	4813      	ldr	r0, [pc, #76]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d1a:	f004 fa1b 	bl	800c154 <HAL_TIM_Base_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007d24:	f7ff fcd4 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	4619      	mov	r1, r3
 8007d34:	480c      	ldr	r0, [pc, #48]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d36:	f005 f82d 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007d40:	f7ff fcc6 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d44:	2320      	movs	r3, #32
 8007d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4805      	ldr	r0, [pc, #20]	; (8007d68 <MX_TIM2_Init+0x94>)
 8007d52:	f005 fdd5 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007d5c:	f7ff fcb8 	bl	80076d0 <Error_Handler>
  }

}
 8007d60:	bf00      	nop
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20002890 	.word	0x20002890

08007d6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d72:	f107 0310 	add.w	r3, r7, #16
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	605a      	str	r2, [r3, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
 8007d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d80:	1d3b      	adds	r3, r7, #4
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	605a      	str	r2, [r3, #4]
 8007d88:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <MX_TIM3_Init+0x98>)
 8007d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007d90:	4b1b      	ldr	r3, [pc, #108]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007d96:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007d98:	2210      	movs	r2, #16
 8007d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007d9c:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007da2:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007daa:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007db0:	4813      	ldr	r0, [pc, #76]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007db2:	f004 f9cf 	bl	800c154 <HAL_TIM_Base_Init>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007dbc:	f7ff fc88 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007dc6:	f107 0310 	add.w	r3, r7, #16
 8007dca:	4619      	mov	r1, r3
 8007dcc:	480c      	ldr	r0, [pc, #48]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007dce:	f004 ffe1 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007dd8:	f7ff fc7a 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007ddc:	2320      	movs	r3, #32
 8007dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4805      	ldr	r0, [pc, #20]	; (8007e00 <MX_TIM3_Init+0x94>)
 8007dea:	f005 fd89 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007df4:	f7ff fc6c 	bl	80076d0 <Error_Handler>
  }

}
 8007df8:	bf00      	nop
 8007dfa:	3720      	adds	r7, #32
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20001f1c 	.word	0x20001f1c
 8007e04:	40000400 	.word	0x40000400

08007e08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	605a      	str	r2, [r3, #4]
 8007e24:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <MX_TIM5_Init+0x98>)
 8007e2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007e2c:	4b1b      	ldr	r3, [pc, #108]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e32:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007e38:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e40:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e48:	2280      	movs	r2, #128	; 0x80
 8007e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007e4c:	4813      	ldr	r0, [pc, #76]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e4e:	f004 f981 	bl	800c154 <HAL_TIM_Base_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007e58:	f7ff fc3a 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007e62:	f107 0310 	add.w	r3, r7, #16
 8007e66:	4619      	mov	r1, r3
 8007e68:	480c      	ldr	r0, [pc, #48]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e6a:	f004 ff93 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007e74:	f7ff fc2c 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007e80:	1d3b      	adds	r3, r7, #4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <MX_TIM5_Init+0x94>)
 8007e86:	f005 fd3b 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007e90:	f7ff fc1e 	bl	80076d0 <Error_Handler>
  }

}
 8007e94:	bf00      	nop
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200027f8 	.word	0x200027f8
 8007ea0:	40000c00 	.word	0x40000c00

08007ea4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b094      	sub	sp, #80	; 0x50
 8007ea8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
 8007eb4:	609a      	str	r2, [r3, #8]
 8007eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	2234      	movs	r2, #52	; 0x34
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f007 fab8 	bl	800f440 <memset>

  htim8.Instance = TIM8;
 8007ed0:	4b26      	ldr	r3, [pc, #152]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ed2:	4a27      	ldr	r2, [pc, #156]	; (8007f70 <MX_TIM8_Init+0xcc>)
 8007ed4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007ed6:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007edc:	4b23      	ldr	r3, [pc, #140]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007ee2:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ee8:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007eee:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007efa:	481c      	ldr	r0, [pc, #112]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007efc:	f004 f92a 	bl	800c154 <HAL_TIM_Base_Init>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007f06:	f7ff fbe3 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f0e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007f14:	4619      	mov	r1, r3
 8007f16:	4815      	ldr	r0, [pc, #84]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007f18:	f004 ff3c 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007f22:	f7ff fbd5 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f26:	2320      	movs	r3, #32
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007f32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f36:	4619      	mov	r1, r3
 8007f38:	480c      	ldr	r0, [pc, #48]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007f3a:	f005 fce1 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007f44:	f7ff fbc4 	bl	80076d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007f50:	463b      	mov	r3, r7
 8007f52:	4619      	mov	r1, r3
 8007f54:	4805      	ldr	r0, [pc, #20]	; (8007f6c <MX_TIM8_Init+0xc8>)
 8007f56:	f005 fd69 	bl	800da2c <HAL_TIMEx_ConfigBreakDeadTime>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007f60:	f7ff fbb6 	bl	80076d0 <Error_Handler>
  }

}
 8007f64:	bf00      	nop
 8007f66:	3750      	adds	r7, #80	; 0x50
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20002714 	.word	0x20002714
 8007f70:	40013400 	.word	0x40013400

08007f74 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f7a:	f107 0310 	add.w	r3, r7, #16
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	609a      	str	r2, [r3, #8]
 8007f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007f92:	4b1f      	ldr	r3, [pc, #124]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007f94:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <MX_TIM15_Init+0xa0>)
 8007f96:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fa0:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fae:	4b18      	ldr	r3, [pc, #96]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007fb4:	4b16      	ldr	r3, [pc, #88]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fba:	4b15      	ldr	r3, [pc, #84]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007fc0:	4813      	ldr	r0, [pc, #76]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fc2:	f004 f8c7 	bl	800c154 <HAL_TIM_Base_Init>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007fcc:	f7ff fb80 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	4619      	mov	r1, r3
 8007fdc:	480c      	ldr	r0, [pc, #48]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007fde:	f004 fed9 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007fe8:	f7ff fb72 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fec:	2300      	movs	r3, #0
 8007fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4805      	ldr	r0, [pc, #20]	; (8008010 <MX_TIM15_Init+0x9c>)
 8007ffa:	f005 fc81 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008004:	f7ff fb64 	bl	80076d0 <Error_Handler>
  }

}
 8008008:	bf00      	nop
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20002760 	.word	0x20002760
 8008014:	40014000 	.word	0x40014000

08008018 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <MX_TIM16_Init+0x48>)
 800801e:	4a11      	ldr	r2, [pc, #68]	; (8008064 <MX_TIM16_Init+0x4c>)
 8008020:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <MX_TIM16_Init+0x48>)
 8008024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008028:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <MX_TIM16_Init+0x48>)
 800802c:	2200      	movs	r2, #0
 800802e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <MX_TIM16_Init+0x48>)
 8008032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008036:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008038:	4b09      	ldr	r3, [pc, #36]	; (8008060 <MX_TIM16_Init+0x48>)
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800803e:	4b08      	ldr	r3, [pc, #32]	; (8008060 <MX_TIM16_Init+0x48>)
 8008040:	2200      	movs	r2, #0
 8008042:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <MX_TIM16_Init+0x48>)
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800804a:	4805      	ldr	r0, [pc, #20]	; (8008060 <MX_TIM16_Init+0x48>)
 800804c:	f004 f882 	bl	800c154 <HAL_TIM_Base_Init>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008056:	f7ff fb3b 	bl	80076d0 <Error_Handler>
  }

}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200028dc 	.word	0x200028dc
 8008064:	40014400 	.word	0x40014400

08008068 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800806c:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <MX_TIM17_Init+0x48>)
 800806e:	4a11      	ldr	r2, [pc, #68]	; (80080b4 <MX_TIM17_Init+0x4c>)
 8008070:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <MX_TIM17_Init+0x48>)
 8008074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008078:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <MX_TIM17_Init+0x48>)
 800807c:	2200      	movs	r2, #0
 800807e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <MX_TIM17_Init+0x48>)
 8008082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008086:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008088:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <MX_TIM17_Init+0x48>)
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <MX_TIM17_Init+0x48>)
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <MX_TIM17_Init+0x48>)
 8008096:	2200      	movs	r2, #0
 8008098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800809a:	4805      	ldr	r0, [pc, #20]	; (80080b0 <MX_TIM17_Init+0x48>)
 800809c:	f004 f85a 	bl	800c154 <HAL_TIM_Base_Init>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80080a6:	f7ff fb13 	bl	80076d0 <Error_Handler>
  }

}
 80080aa:	bf00      	nop
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200027ac 	.word	0x200027ac
 80080b4:	40014800 	.word	0x40014800

080080b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	609a      	str	r2, [r3, #8]
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1f      	ldr	r2, [pc, #124]	; (8008154 <HAL_TIM_Encoder_MspInit+0x9c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d137      	bne.n	800814a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080da:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 80080dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080de:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 80080e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080e4:	6613      	str	r3, [r2, #96]	; 0x60
 80080e6:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 80080e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080f2:	4b19      	ldr	r3, [pc, #100]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 80080f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f6:	4a18      	ldr	r2, [pc, #96]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 80080f8:	f043 0304 	orr.w	r3, r3, #4
 80080fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080fe:	4b16      	ldr	r3, [pc, #88]	; (8008158 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800810a:	2303      	movs	r3, #3
 800810c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810e:	2302      	movs	r3, #2
 8008110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008116:	2300      	movs	r3, #0
 8008118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800811a:	2302      	movs	r3, #2
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811e:	f107 0314 	add.w	r3, r7, #20
 8008122:	4619      	mov	r1, r3
 8008124:	480d      	ldr	r0, [pc, #52]	; (800815c <HAL_TIM_Encoder_MspInit+0xa4>)
 8008126:	f002 fd0f 	bl	800ab48 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800812a:	2200      	movs	r2, #0
 800812c:	2100      	movs	r1, #0
 800812e:	2018      	movs	r0, #24
 8008130:	f001 fde7 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008134:	2018      	movs	r0, #24
 8008136:	f001 fdfe 	bl	8009d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800813a:	2200      	movs	r2, #0
 800813c:	2101      	movs	r1, #1
 800813e:	201a      	movs	r0, #26
 8008140:	f001 fddf 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008144:	201a      	movs	r0, #26
 8008146:	f001 fdf6 	bl	8009d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800814a:	bf00      	nop
 800814c:	3728      	adds	r7, #40	; 0x28
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40021000 	.word	0x40021000
 800815c:	48000800 	.word	0x48000800

08008160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b090      	sub	sp, #64	; 0x40
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	609a      	str	r2, [r3, #8]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008180:	d129      	bne.n	80081d6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008182:	4b5c      	ldr	r3, [pc, #368]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	4a5b      	ldr	r2, [pc, #364]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	6593      	str	r3, [r2, #88]	; 0x58
 800818e:	4b59      	ldr	r3, [pc, #356]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800819a:	4b56      	ldr	r3, [pc, #344]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819e:	4a55      	ldr	r2, [pc, #340]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081a6:	4b53      	ldr	r3, [pc, #332]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081b2:	2301      	movs	r3, #1
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b6:	2302      	movs	r3, #2
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081be:	2300      	movs	r3, #0
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80081c2:	2301      	movs	r3, #1
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081ca:	4619      	mov	r1, r3
 80081cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081d0:	f002 fcba 	bl	800ab48 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80081d4:	e08a      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM3)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a47      	ldr	r2, [pc, #284]	; (80082f8 <HAL_TIM_Base_MspInit+0x198>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d114      	bne.n	800820a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80081e0:	4b44      	ldr	r3, [pc, #272]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80081e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e4:	4a43      	ldr	r2, [pc, #268]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80081e6:	f043 0302 	orr.w	r3, r3, #2
 80081ea:	6593      	str	r3, [r2, #88]	; 0x58
 80081ec:	4b41      	ldr	r3, [pc, #260]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	623b      	str	r3, [r7, #32]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	201d      	movs	r0, #29
 80081fe:	f001 fd80 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008202:	201d      	movs	r0, #29
 8008204:	f001 fd97 	bl	8009d36 <HAL_NVIC_EnableIRQ>
}
 8008208:	e070      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM5)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3b      	ldr	r2, [pc, #236]	; (80082fc <HAL_TIM_Base_MspInit+0x19c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d114      	bne.n	800823e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008214:	4b37      	ldr	r3, [pc, #220]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008218:	4a36      	ldr	r2, [pc, #216]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800821a:	f043 0308 	orr.w	r3, r3, #8
 800821e:	6593      	str	r3, [r2, #88]	; 0x58
 8008220:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800822c:	2200      	movs	r2, #0
 800822e:	2102      	movs	r1, #2
 8008230:	2032      	movs	r0, #50	; 0x32
 8008232:	f001 fd66 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008236:	2032      	movs	r0, #50	; 0x32
 8008238:	f001 fd7d 	bl	8009d36 <HAL_NVIC_EnableIRQ>
}
 800823c:	e056      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2f      	ldr	r2, [pc, #188]	; (8008300 <HAL_TIM_Base_MspInit+0x1a0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10c      	bne.n	8008262 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008248:	4b2a      	ldr	r3, [pc, #168]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	4a29      	ldr	r2, [pc, #164]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800824e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008252:	6613      	str	r3, [r2, #96]	; 0x60
 8008254:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	69bb      	ldr	r3, [r7, #24]
}
 8008260:	e044      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM15)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a27      	ldr	r2, [pc, #156]	; (8008304 <HAL_TIM_Base_MspInit+0x1a4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d114      	bne.n	8008296 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800826c:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 8008272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008276:	6613      	str	r3, [r2, #96]	; 0x60
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	2018      	movs	r0, #24
 800828a:	f001 fd3a 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800828e:	2018      	movs	r0, #24
 8008290:	f001 fd51 	bl	8009d36 <HAL_NVIC_EnableIRQ>
}
 8008294:	e02a      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM16)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a1b      	ldr	r2, [pc, #108]	; (8008308 <HAL_TIM_Base_MspInit+0x1a8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10c      	bne.n	80082ba <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a4:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082aa:	6613      	str	r3, [r2, #96]	; 0x60
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	693b      	ldr	r3, [r7, #16]
}
 80082b8:	e018      	b.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM17)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a13      	ldr	r2, [pc, #76]	; (800830c <HAL_TIM_Base_MspInit+0x1ac>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d113      	bne.n	80082ec <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c8:	4a0a      	ldr	r2, [pc, #40]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ce:	6613      	str	r3, [r2, #96]	; 0x60
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_TIM_Base_MspInit+0x194>)
 80082d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80082dc:	2200      	movs	r2, #0
 80082de:	2101      	movs	r1, #1
 80082e0:	201a      	movs	r0, #26
 80082e2:	f001 fd0e 	bl	8009d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80082e6:	201a      	movs	r0, #26
 80082e8:	f001 fd25 	bl	8009d36 <HAL_NVIC_EnableIRQ>
}
 80082ec:	bf00      	nop
 80082ee:	3740      	adds	r7, #64	; 0x40
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000c00 	.word	0x40000c00
 8008300:	40013400 	.word	0x40013400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800

08008310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008310:	480d      	ldr	r0, [pc, #52]	; (8008348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008314:	480d      	ldr	r0, [pc, #52]	; (800834c <LoopForever+0x6>)
  ldr r1, =_edata
 8008316:	490e      	ldr	r1, [pc, #56]	; (8008350 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008318:	4a0e      	ldr	r2, [pc, #56]	; (8008354 <LoopForever+0xe>)
  movs r3, #0
 800831a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800831c:	e002      	b.n	8008324 <LoopCopyDataInit>

0800831e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800831e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008322:	3304      	adds	r3, #4

08008324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008328:	d3f9      	bcc.n	800831e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800832a:	4a0b      	ldr	r2, [pc, #44]	; (8008358 <LoopForever+0x12>)
  ldr r4, =_ebss
 800832c:	4c0b      	ldr	r4, [pc, #44]	; (800835c <LoopForever+0x16>)
  movs r3, #0
 800832e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008330:	e001      	b.n	8008336 <LoopFillZerobss>

08008332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008334:	3204      	adds	r2, #4

08008336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008338:	d3fb      	bcc.n	8008332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800833a:	f7ff fc45 	bl	8007bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800833e:	f007 f85b 	bl	800f3f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008342:	f7ff f8f5 	bl	8007530 <main>

08008346 <LoopForever>:

LoopForever:
    b LoopForever
 8008346:	e7fe      	b.n	8008346 <LoopForever>
  ldr   r0, =_estack
 8008348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800834c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008350:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 8008354:	08014930 	.word	0x08014930
  ldr r2, =_sbss
 8008358:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 800835c:	20002930 	.word	0x20002930

08008360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008360:	e7fe      	b.n	8008360 <ADC1_2_IRQHandler>

08008362 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800836c:	2003      	movs	r0, #3
 800836e:	f001 fcbd 	bl	8009cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008372:	2000      	movs	r0, #0
 8008374:	f000 f80e 	bl	8008394 <HAL_InitTick>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	71fb      	strb	r3, [r7, #7]
 8008382:	e001      	b.n	8008388 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008384:	f7ff fa74 	bl	8007870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008388:	79fb      	ldrb	r3, [r7, #7]

}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80083a0:	4b16      	ldr	r3, [pc, #88]	; (80083fc <HAL_InitTick+0x68>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d022      	beq.n	80083ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <HAL_InitTick+0x6c>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b13      	ldr	r3, [pc, #76]	; (80083fc <HAL_InitTick+0x68>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80083b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 fcd6 	bl	8009d6e <HAL_SYSTICK_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10f      	bne.n	80083e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b0f      	cmp	r3, #15
 80083cc:	d809      	bhi.n	80083e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083ce:	2200      	movs	r2, #0
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d6:	f001 fc94 	bl	8009d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80083da:	4a0a      	ldr	r2, [pc, #40]	; (8008404 <HAL_InitTick+0x70>)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e007      	b.n	80083f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]
 80083e6:	e004      	b.n	80083f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
 80083ec:	e001      	b.n	80083f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000c38 	.word	0x20000c38
 8008400:	20000c30 	.word	0x20000c30
 8008404:	20000c34 	.word	0x20000c34

08008408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <HAL_IncTick+0x1c>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <HAL_IncTick+0x20>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4413      	add	r3, r2
 8008416:	4a03      	ldr	r2, [pc, #12]	; (8008424 <HAL_IncTick+0x1c>)
 8008418:	6013      	str	r3, [r2, #0]
}
 800841a:	bf00      	nop
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	20002928 	.word	0x20002928
 8008428:	20000c38 	.word	0x20000c38

0800842c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  return uwTick;
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <HAL_GetTick+0x14>)
 8008432:	681b      	ldr	r3, [r3, #0]
}
 8008434:	4618      	mov	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20002928 	.word	0x20002928

08008444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800844c:	f7ff ffee 	bl	800842c <HAL_GetTick>
 8008450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845c:	d004      	beq.n	8008468 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <HAL_Delay+0x40>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008468:	bf00      	nop
 800846a:	f7ff ffdf 	bl	800842c <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d8f7      	bhi.n	800846a <HAL_Delay+0x26>
  {
  }
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000c38 	.word	0x20000c38

08008488 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	609a      	str	r2, [r3, #8]
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80084f0:	b490      	push	{r4, r7}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3360      	adds	r3, #96	; 0x60
 8008502:	461a      	mov	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <LL_ADC_SetOffset+0x40>)
 8008510:	4013      	ands	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	4313      	orrs	r3, r2
 800851e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008522:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bc90      	pop	{r4, r7}
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	03fff000 	.word	0x03fff000

08008534 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008534:	b490      	push	{r4, r7}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3360      	adds	r3, #96	; 0x60
 8008542:	461a      	mov	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bc90      	pop	{r4, r7}
 800855a:	4770      	bx	lr

0800855c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800855c:	b490      	push	{r4, r7}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3360      	adds	r3, #96	; 0x60
 800856c:	461a      	mov	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4313      	orrs	r3, r2
 8008580:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bc90      	pop	{r4, r7}
 800858a:	4770      	bx	lr

0800858c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800858c:	b490      	push	{r4, r7}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3360      	adds	r3, #96	; 0x60
 800859c:	461a      	mov	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc90      	pop	{r4, r7}
 80085ba:	4770      	bx	lr

080085bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80085bc:	b490      	push	{r4, r7}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3360      	adds	r3, #96	; 0x60
 80085cc:	461a      	mov	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4313      	orrs	r3, r2
 80085e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc90      	pop	{r4, r7}
 80085ea:	4770      	bx	lr

080085ec <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	615a      	str	r2, [r3, #20]
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008612:	b490      	push	{r4, r7}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3330      	adds	r3, #48	; 0x30
 8008622:	461a      	mov	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	f003 030c 	and.w	r3, r3, #12
 800862e:	4413      	add	r3, r2
 8008630:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 031f 	and.w	r3, r3, #31
 800863a:	211f      	movs	r1, #31
 800863c:	fa01 f303 	lsl.w	r3, r1, r3
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0e9b      	lsrs	r3, r3, #26
 8008648:	f003 011f 	and.w	r1, r3, #31
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	4313      	orrs	r3, r2
 8008658:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bc90      	pop	{r4, r7}
 8008662:	4770      	bx	lr

08008664 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008664:	b490      	push	{r4, r7}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3314      	adds	r3, #20
 8008674:	461a      	mov	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	0e5b      	lsrs	r3, r3, #25
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	0d1b      	lsrs	r3, r3, #20
 800868a:	f003 031f 	and.w	r3, r3, #31
 800868e:	2107      	movs	r1, #7
 8008690:	fa01 f303 	lsl.w	r3, r1, r3
 8008694:	43db      	mvns	r3, r3
 8008696:	401a      	ands	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	0d1b      	lsrs	r3, r3, #20
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	fa01 f303 	lsl.w	r3, r1, r3
 80086a6:	4313      	orrs	r3, r2
 80086a8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80086aa:	bf00      	nop
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc90      	pop	{r4, r7}
 80086b2:	4770      	bx	lr

080086b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086cc:	43db      	mvns	r3, r3
 80086ce:	401a      	ands	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f003 0318 	and.w	r3, r3, #24
 80086d6:	4908      	ldr	r1, [pc, #32]	; (80086f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80086d8:	40d9      	lsrs	r1, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	400b      	ands	r3, r1
 80086de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	0007ffff 	.word	0x0007ffff

080086fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800870c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6093      	str	r3, [r2, #8]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008734:	d101      	bne.n	800873a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800875c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008784:	d101      	bne.n	800878a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <LL_ADC_IsEnabled+0x18>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <LL_ADC_IsEnabled+0x1a>
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d101      	bne.n	80087d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0308 	and.w	r3, r3, #8
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d101      	bne.n	80087fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b089      	sub	sp, #36	; 0x24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008818:	2300      	movs	r3, #0
 800881a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e1ad      	b.n	8008b82 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fe f8cd 	bl	80069d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff ff67 	bl	8008720 <LL_ADC_IsDeepPowerDownEnabled>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ff4d 	bl	80086fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ff82 	bl	8008770 <LL_ADC_IsInternalRegulatorEnabled>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d113      	bne.n	800889a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff66 	bl	8008748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800887c:	4b9e      	ldr	r3, [pc, #632]	; (8008af8 <HAL_ADC_Init+0x2ec>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	099b      	lsrs	r3, r3, #6
 8008882:	4a9e      	ldr	r2, [pc, #632]	; (8008afc <HAL_ADC_Init+0x2f0>)
 8008884:	fba2 2303 	umull	r2, r3, r2, r3
 8008888:	099b      	lsrs	r3, r3, #6
 800888a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800888c:	e002      	b.n	8008894 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	3b01      	subs	r3, #1
 8008892:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f9      	bne.n	800888e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7ff ff66 	bl	8008770 <LL_ADC_IsInternalRegulatorEnabled>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ae:	f043 0210 	orr.w	r2, r3, #16
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ba:	f043 0201 	orr.w	r2, r3, #1
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff ff77 	bl	80087be <LL_ADC_REG_IsConversionOngoing>
 80088d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 8148 	bne.w	8008b70 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 8144 	bne.w	8008b70 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80088f0:	f043 0202 	orr.w	r2, r3, #2
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff ff4b 	bl	8008798 <LL_ADC_IsEnabled>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d141      	bne.n	800898c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008910:	d004      	beq.n	800891c <HAL_ADC_Init+0x110>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a7a      	ldr	r2, [pc, #488]	; (8008b00 <HAL_ADC_Init+0x2f4>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d10f      	bne.n	800893c <HAL_ADC_Init+0x130>
 800891c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008920:	f7ff ff3a 	bl	8008798 <LL_ADC_IsEnabled>
 8008924:	4604      	mov	r4, r0
 8008926:	4876      	ldr	r0, [pc, #472]	; (8008b00 <HAL_ADC_Init+0x2f4>)
 8008928:	f7ff ff36 	bl	8008798 <LL_ADC_IsEnabled>
 800892c:	4603      	mov	r3, r0
 800892e:	4323      	orrs	r3, r4
 8008930:	2b00      	cmp	r3, #0
 8008932:	bf0c      	ite	eq
 8008934:	2301      	moveq	r3, #1
 8008936:	2300      	movne	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	e012      	b.n	8008962 <HAL_ADC_Init+0x156>
 800893c:	4871      	ldr	r0, [pc, #452]	; (8008b04 <HAL_ADC_Init+0x2f8>)
 800893e:	f7ff ff2b 	bl	8008798 <LL_ADC_IsEnabled>
 8008942:	4604      	mov	r4, r0
 8008944:	4870      	ldr	r0, [pc, #448]	; (8008b08 <HAL_ADC_Init+0x2fc>)
 8008946:	f7ff ff27 	bl	8008798 <LL_ADC_IsEnabled>
 800894a:	4603      	mov	r3, r0
 800894c:	431c      	orrs	r4, r3
 800894e:	486f      	ldr	r0, [pc, #444]	; (8008b0c <HAL_ADC_Init+0x300>)
 8008950:	f7ff ff22 	bl	8008798 <LL_ADC_IsEnabled>
 8008954:	4603      	mov	r3, r0
 8008956:	4323      	orrs	r3, r4
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf0c      	ite	eq
 800895c:	2301      	moveq	r3, #1
 800895e:	2300      	movne	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d012      	beq.n	800898c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800896e:	d004      	beq.n	800897a <HAL_ADC_Init+0x16e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a62      	ldr	r2, [pc, #392]	; (8008b00 <HAL_ADC_Init+0x2f4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d101      	bne.n	800897e <HAL_ADC_Init+0x172>
 800897a:	4a65      	ldr	r2, [pc, #404]	; (8008b10 <HAL_ADC_Init+0x304>)
 800897c:	e000      	b.n	8008980 <HAL_ADC_Init+0x174>
 800897e:	4a65      	ldr	r2, [pc, #404]	; (8008b14 <HAL_ADC_Init+0x308>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7ff fd7e 	bl	8008488 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7f5b      	ldrb	r3, [r3, #29]
 8008990:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008996:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800899c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80089a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d106      	bne.n	80089c8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	3b01      	subs	r3, #1
 80089c0:	045b      	lsls	r3, r3, #17
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	4b4b      	ldr	r3, [pc, #300]	; (8008b18 <HAL_ADC_Init+0x30c>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	69b9      	ldr	r1, [r7, #24]
 80089f4:	430b      	orrs	r3, r1
 80089f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff fed3 	bl	80087be <LL_ADC_REG_IsConversionOngoing>
 8008a18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fee0 	bl	80087e4 <LL_ADC_INJ_IsConversionOngoing>
 8008a24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d17f      	bne.n	8008b2c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d17c      	bne.n	8008b2c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a3e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a4e:	f023 0302 	bic.w	r3, r3, #2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	69b9      	ldr	r1, [r7, #24]
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d017      	beq.n	8008a94 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691a      	ldr	r2, [r3, #16]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008a72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6911      	ldr	r1, [r2, #16]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008a92:	e013      	b.n	8008abc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008aa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ab8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d12a      	bne.n	8008b1c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ad0:	f023 0304 	bic.w	r3, r3, #4
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008adc:	4311      	orrs	r1, r2
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ae2:	4311      	orrs	r1, r2
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0201 	orr.w	r2, r2, #1
 8008af4:	611a      	str	r2, [r3, #16]
 8008af6:	e019      	b.n	8008b2c <HAL_ADC_Init+0x320>
 8008af8:	20000c30 	.word	0x20000c30
 8008afc:	053e2d63 	.word	0x053e2d63
 8008b00:	50000100 	.word	0x50000100
 8008b04:	50000400 	.word	0x50000400
 8008b08:	50000500 	.word	0x50000500
 8008b0c:	50000600 	.word	0x50000600
 8008b10:	50000300 	.word	0x50000300
 8008b14:	50000700 	.word	0x50000700
 8008b18:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691a      	ldr	r2, [r3, #16]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10c      	bne.n	8008b4e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f023 010f 	bic.w	r1, r3, #15
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	1e5a      	subs	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b4c:	e007      	b.n	8008b5e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 020f 	bic.w	r2, r2, #15
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b6e:	e007      	b.n	8008b80 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b74:	f043 0210 	orr.w	r2, r3, #16
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3724      	adds	r7, #36	; 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd90      	pop	{r4, r7, pc}
 8008b8a:	bf00      	nop

08008b8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b0a6      	sub	sp, #152	; 0x98
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_ADC_ConfigChannel+0x22>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e38e      	b.n	80092cc <HAL_ADC_ConfigChannel+0x740>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fdff 	bl	80087be <LL_ADC_REG_IsConversionOngoing>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f040 836f 	bne.w	80092a6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	6859      	ldr	r1, [r3, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f7ff fd1c 	bl	8008612 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fded 	bl	80087be <LL_ADC_REG_IsConversionOngoing>
 8008be4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fdf9 	bl	80087e4 <LL_ADC_INJ_IsConversionOngoing>
 8008bf2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 817b 	bne.w	8008ef6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8176 	bne.w	8008ef6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c12:	d10f      	bne.n	8008c34 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f7ff fd20 	bl	8008664 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fcdd 	bl	80085ec <LL_ADC_SetSamplingTimeCommonConfig>
 8008c32:	e00e      	b.n	8008c52 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	6819      	ldr	r1, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	461a      	mov	r2, r3
 8008c42:	f7ff fd0f 	bl	8008664 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fccd 	bl	80085ec <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	08db      	lsrs	r3, r3, #3
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d022      	beq.n	8008cba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6919      	ldr	r1, [r3, #16]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c84:	f7ff fc34 	bl	80084f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6919      	ldr	r1, [r3, #16]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f7ff fc79 	bl	800858c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6919      	ldr	r1, [r3, #16]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	7f1b      	ldrb	r3, [r3, #28]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d102      	bne.n	8008cb0 <HAL_ADC_ConfigChannel+0x124>
 8008caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cae:	e000      	b.n	8008cb2 <HAL_ADC_ConfigChannel+0x126>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f7ff fc82 	bl	80085bc <LL_ADC_SetOffsetSaturation>
 8008cb8:	e11d      	b.n	8008ef6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fc37 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <HAL_ADC_ConfigChannel+0x15a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fc2c 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	0e9b      	lsrs	r3, r3, #26
 8008ce0:	f003 021f 	and.w	r2, r3, #31
 8008ce4:	e012      	b.n	8008d0c <HAL_ADC_ConfigChannel+0x180>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fc21 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cfc:	fa93 f3a3 	rbit	r3, r3
 8008d00:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d04:	fab3 f383 	clz	r3, r3
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <HAL_ADC_ConfigChannel+0x198>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	0e9b      	lsrs	r3, r3, #26
 8008d1e:	f003 031f 	and.w	r3, r3, #31
 8008d22:	e00a      	b.n	8008d3a <HAL_ADC_ConfigChannel+0x1ae>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d2c:	fa93 f3a3 	rbit	r3, r3
 8008d30:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d34:	fab3 f383 	clz	r3, r3
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d106      	bne.n	8008d4c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fc08 	bl	800855c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2101      	movs	r1, #1
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fbee 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <HAL_ADC_ConfigChannel+0x1ec>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2101      	movs	r1, #1
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fbe3 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	0e9b      	lsrs	r3, r3, #26
 8008d72:	f003 021f 	and.w	r2, r3, #31
 8008d76:	e010      	b.n	8008d9a <HAL_ADC_ConfigChannel+0x20e>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fbd8 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008d84:	4603      	mov	r3, r0
 8008d86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d8a:	fa93 f3a3 	rbit	r3, r3
 8008d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d92:	fab3 f383 	clz	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <HAL_ADC_ConfigChannel+0x226>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	0e9b      	lsrs	r3, r3, #26
 8008dac:	f003 031f 	and.w	r3, r3, #31
 8008db0:	e00a      	b.n	8008dc8 <HAL_ADC_ConfigChannel+0x23c>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dba:	fa93 f3a3 	rbit	r3, r3
 8008dbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc2:	fab3 f383 	clz	r3, r3
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d106      	bne.n	8008dda <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff fbc1 	bl	800855c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2102      	movs	r1, #2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fba7 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <HAL_ADC_ConfigChannel+0x27a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fb9c 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	0e9b      	lsrs	r3, r3, #26
 8008e00:	f003 021f 	and.w	r2, r3, #31
 8008e04:	e010      	b.n	8008e28 <HAL_ADC_ConfigChannel+0x29c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2102      	movs	r1, #2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fb91 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008e12:	4603      	mov	r3, r0
 8008e14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e18:	fa93 f3a3 	rbit	r3, r3
 8008e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e20:	fab3 f383 	clz	r3, r3
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d105      	bne.n	8008e40 <HAL_ADC_ConfigChannel+0x2b4>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	0e9b      	lsrs	r3, r3, #26
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	e00a      	b.n	8008e56 <HAL_ADC_ConfigChannel+0x2ca>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e48:	fa93 f3a3 	rbit	r3, r3
 8008e4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e50:	fab3 f383 	clz	r3, r3
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d106      	bne.n	8008e68 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2102      	movs	r1, #2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fb7a 	bl	800855c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2103      	movs	r1, #3
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fb60 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <HAL_ADC_ConfigChannel+0x308>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2103      	movs	r1, #3
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fb55 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	0e9b      	lsrs	r3, r3, #26
 8008e8e:	f003 021f 	and.w	r2, r3, #31
 8008e92:	e010      	b.n	8008eb6 <HAL_ADC_ConfigChannel+0x32a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2103      	movs	r1, #3
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fb4a 	bl	8008534 <LL_ADC_GetOffsetChannel>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea6:	fa93 f3a3 	rbit	r3, r3
 8008eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eae:	fab3 f383 	clz	r3, r3
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <HAL_ADC_ConfigChannel+0x342>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	0e9b      	lsrs	r3, r3, #26
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	e00a      	b.n	8008ee4 <HAL_ADC_ConfigChannel+0x358>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed6:	fa93 f3a3 	rbit	r3, r3
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ede:	fab3 f383 	clz	r3, r3
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d106      	bne.n	8008ef6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2103      	movs	r1, #3
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fb33 	bl	800855c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff fc4c 	bl	8008798 <LL_ADC_IsEnabled>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f040 810c 	bne.w	8009120 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f7ff fbcd 	bl	80086b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	4aaf      	ldr	r2, [pc, #700]	; (80091dc <HAL_ADC_ConfigChannel+0x650>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	f040 80fd 	bne.w	8009120 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10b      	bne.n	8008f4e <HAL_ADC_ConfigChannel+0x3c2>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	0e9b      	lsrs	r3, r3, #26
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	f003 031f 	and.w	r3, r3, #31
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	bf94      	ite	ls
 8008f46:	2301      	movls	r3, #1
 8008f48:	2300      	movhi	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	e012      	b.n	8008f74 <HAL_ADC_ConfigChannel+0x3e8>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f56:	fa93 f3a3 	rbit	r3, r3
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5e:	fab3 f383 	clz	r3, r3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	3301      	adds	r3, #1
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	bf94      	ite	ls
 8008f6e:	2301      	movls	r3, #1
 8008f70:	2300      	movhi	r3, #0
 8008f72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d064      	beq.n	8009042 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <HAL_ADC_ConfigChannel+0x408>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	0e9b      	lsrs	r3, r3, #26
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	069b      	lsls	r3, r3, #26
 8008f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008f92:	e00e      	b.n	8008fb2 <HAL_ADC_ConfigChannel+0x426>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	fa93 f3a3 	rbit	r3, r3
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	fab3 f383 	clz	r3, r3
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	3301      	adds	r3, #1
 8008fac:	069b      	lsls	r3, r3, #26
 8008fae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <HAL_ADC_ConfigChannel+0x446>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	0e9b      	lsrs	r3, r3, #26
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f003 031f 	and.w	r3, r3, #31
 8008fca:	2101      	movs	r1, #1
 8008fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd0:	e010      	b.n	8008ff4 <HAL_ADC_ConfigChannel+0x468>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	fa93 f3a3 	rbit	r3, r3
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	fab3 f383 	clz	r3, r3
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2101      	movs	r1, #1
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	ea42 0103 	orr.w	r1, r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <HAL_ADC_ConfigChannel+0x48e>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	0e9b      	lsrs	r3, r3, #26
 800900a:	3301      	adds	r3, #1
 800900c:	f003 021f 	and.w	r2, r3, #31
 8009010:	4613      	mov	r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	4413      	add	r3, r2
 8009016:	051b      	lsls	r3, r3, #20
 8009018:	e011      	b.n	800903e <HAL_ADC_ConfigChannel+0x4b2>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	fa93 f3a3 	rbit	r3, r3
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	fab3 f383 	clz	r3, r3
 800902e:	b2db      	uxtb	r3, r3
 8009030:	3301      	adds	r3, #1
 8009032:	f003 021f 	and.w	r2, r3, #31
 8009036:	4613      	mov	r3, r2
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4413      	add	r3, r2
 800903c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800903e:	430b      	orrs	r3, r1
 8009040:	e069      	b.n	8009116 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_ADC_ConfigChannel+0x4d2>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	0e9b      	lsrs	r3, r3, #26
 8009054:	3301      	adds	r3, #1
 8009056:	069b      	lsls	r3, r3, #26
 8009058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800905c:	e00e      	b.n	800907c <HAL_ADC_ConfigChannel+0x4f0>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	fa93 f3a3 	rbit	r3, r3
 800906a:	61fb      	str	r3, [r7, #28]
  return result;
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	fab3 f383 	clz	r3, r3
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3301      	adds	r3, #1
 8009076:	069b      	lsls	r3, r3, #26
 8009078:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <HAL_ADC_ConfigChannel+0x510>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0e9b      	lsrs	r3, r3, #26
 800908e:	3301      	adds	r3, #1
 8009090:	f003 031f 	and.w	r3, r3, #31
 8009094:	2101      	movs	r1, #1
 8009096:	fa01 f303 	lsl.w	r3, r1, r3
 800909a:	e010      	b.n	80090be <HAL_ADC_ConfigChannel+0x532>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	fa93 f3a3 	rbit	r3, r3
 80090a8:	617b      	str	r3, [r7, #20]
  return result;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	fab3 f383 	clz	r3, r3
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	3301      	adds	r3, #1
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	2101      	movs	r1, #1
 80090ba:	fa01 f303 	lsl.w	r3, r1, r3
 80090be:	ea42 0103 	orr.w	r1, r2, r3
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10d      	bne.n	80090ea <HAL_ADC_ConfigChannel+0x55e>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	0e9b      	lsrs	r3, r3, #26
 80090d4:	3301      	adds	r3, #1
 80090d6:	f003 021f 	and.w	r2, r3, #31
 80090da:	4613      	mov	r3, r2
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	4413      	add	r3, r2
 80090e0:	3b1e      	subs	r3, #30
 80090e2:	051b      	lsls	r3, r3, #20
 80090e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80090e8:	e014      	b.n	8009114 <HAL_ADC_ConfigChannel+0x588>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	fa93 f3a3 	rbit	r3, r3
 80090f6:	60fb      	str	r3, [r7, #12]
  return result;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	fab3 f383 	clz	r3, r3
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	3301      	adds	r3, #1
 8009102:	f003 021f 	and.w	r2, r3, #31
 8009106:	4613      	mov	r3, r2
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	4413      	add	r3, r2
 800910c:	3b1e      	subs	r3, #30
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009114:	430b      	orrs	r3, r1
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	6892      	ldr	r2, [r2, #8]
 800911a:	4619      	mov	r1, r3
 800911c:	f7ff faa2 	bl	8008664 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <HAL_ADC_ConfigChannel+0x654>)
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80c9 	beq.w	80092c0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009136:	d004      	beq.n	8009142 <HAL_ADC_ConfigChannel+0x5b6>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <HAL_ADC_ConfigChannel+0x658>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d101      	bne.n	8009146 <HAL_ADC_ConfigChannel+0x5ba>
 8009142:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <HAL_ADC_ConfigChannel+0x65c>)
 8009144:	e000      	b.n	8009148 <HAL_ADC_ConfigChannel+0x5bc>
 8009146:	4b29      	ldr	r3, [pc, #164]	; (80091ec <HAL_ADC_ConfigChannel+0x660>)
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff f9c3 	bl	80084d4 <LL_ADC_GetCommonPathInternalCh>
 800914e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a26      	ldr	r2, [pc, #152]	; (80091f0 <HAL_ADC_ConfigChannel+0x664>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_ADC_ConfigChannel+0x5da>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a24      	ldr	r2, [pc, #144]	; (80091f4 <HAL_ADC_ConfigChannel+0x668>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d14e      	bne.n	8009204 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800916a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d148      	bne.n	8009204 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800917a:	d005      	beq.n	8009188 <HAL_ADC_ConfigChannel+0x5fc>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_ADC_ConfigChannel+0x66c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	f040 8099 	bne.w	80092ba <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009190:	d004      	beq.n	800919c <HAL_ADC_ConfigChannel+0x610>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a13      	ldr	r2, [pc, #76]	; (80091e4 <HAL_ADC_ConfigChannel+0x658>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d101      	bne.n	80091a0 <HAL_ADC_ConfigChannel+0x614>
 800919c:	4a12      	ldr	r2, [pc, #72]	; (80091e8 <HAL_ADC_ConfigChannel+0x65c>)
 800919e:	e000      	b.n	80091a2 <HAL_ADC_ConfigChannel+0x616>
 80091a0:	4a12      	ldr	r2, [pc, #72]	; (80091ec <HAL_ADC_ConfigChannel+0x660>)
 80091a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7ff f97e 	bl	80084ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <HAL_ADC_ConfigChannel+0x670>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	099b      	lsrs	r3, r3, #6
 80091b8:	4a11      	ldr	r2, [pc, #68]	; (8009200 <HAL_ADC_ConfigChannel+0x674>)
 80091ba:	fba2 2303 	umull	r2, r3, r2, r3
 80091be:	099a      	lsrs	r2, r3, #6
 80091c0:	4613      	mov	r3, r2
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80091ca:	e002      	b.n	80091d2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1f9      	bne.n	80091cc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091d8:	e06f      	b.n	80092ba <HAL_ADC_ConfigChannel+0x72e>
 80091da:	bf00      	nop
 80091dc:	407f0000 	.word	0x407f0000
 80091e0:	80080000 	.word	0x80080000
 80091e4:	50000100 	.word	0x50000100
 80091e8:	50000300 	.word	0x50000300
 80091ec:	50000700 	.word	0x50000700
 80091f0:	c3210000 	.word	0xc3210000
 80091f4:	90c00010 	.word	0x90c00010
 80091f8:	50000600 	.word	0x50000600
 80091fc:	20000c30 	.word	0x20000c30
 8009200:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a32      	ldr	r2, [pc, #200]	; (80092d4 <HAL_ADC_ConfigChannel+0x748>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d125      	bne.n	800925a <HAL_ADC_ConfigChannel+0x6ce>
 800920e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d11f      	bne.n	800925a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a2e      	ldr	r2, [pc, #184]	; (80092d8 <HAL_ADC_ConfigChannel+0x74c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d104      	bne.n	800922e <HAL_ADC_ConfigChannel+0x6a2>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a2c      	ldr	r2, [pc, #176]	; (80092dc <HAL_ADC_ConfigChannel+0x750>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d047      	beq.n	80092be <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009236:	d004      	beq.n	8009242 <HAL_ADC_ConfigChannel+0x6b6>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a26      	ldr	r2, [pc, #152]	; (80092d8 <HAL_ADC_ConfigChannel+0x74c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d101      	bne.n	8009246 <HAL_ADC_ConfigChannel+0x6ba>
 8009242:	4a27      	ldr	r2, [pc, #156]	; (80092e0 <HAL_ADC_ConfigChannel+0x754>)
 8009244:	e000      	b.n	8009248 <HAL_ADC_ConfigChannel+0x6bc>
 8009246:	4a27      	ldr	r2, [pc, #156]	; (80092e4 <HAL_ADC_ConfigChannel+0x758>)
 8009248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800924c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7ff f92b 	bl	80084ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009258:	e031      	b.n	80092be <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a22      	ldr	r2, [pc, #136]	; (80092e8 <HAL_ADC_ConfigChannel+0x75c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d12d      	bne.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d127      	bne.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <HAL_ADC_ConfigChannel+0x74c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d022      	beq.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009282:	d004      	beq.n	800928e <HAL_ADC_ConfigChannel+0x702>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <HAL_ADC_ConfigChannel+0x74c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d101      	bne.n	8009292 <HAL_ADC_ConfigChannel+0x706>
 800928e:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <HAL_ADC_ConfigChannel+0x754>)
 8009290:	e000      	b.n	8009294 <HAL_ADC_ConfigChannel+0x708>
 8009292:	4a14      	ldr	r2, [pc, #80]	; (80092e4 <HAL_ADC_ConfigChannel+0x758>)
 8009294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7ff f905 	bl	80084ae <LL_ADC_SetCommonPathInternalCh>
 80092a4:	e00c      	b.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092aa:	f043 0220 	orr.w	r2, r3, #32
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80092b8:	e002      	b.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80092c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3798      	adds	r7, #152	; 0x98
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	c7520000 	.word	0xc7520000
 80092d8:	50000100 	.word	0x50000100
 80092dc:	50000500 	.word	0x50000500
 80092e0:	50000300 	.word	0x50000300
 80092e4:	50000700 	.word	0x50000700
 80092e8:	cb840000 	.word	0xcb840000

080092ec <LL_ADC_IsEnabled>:
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <LL_ADC_IsEnabled+0x18>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <LL_ADC_IsEnabled+0x1a>
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <LL_ADC_REG_IsConversionOngoing>:
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0304 	and.w	r3, r3, #4
 8009322:	2b04      	cmp	r3, #4
 8009324:	d101      	bne.n	800932a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b0a1      	sub	sp, #132	; 0x84
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009352:	2302      	movs	r3, #2
 8009354:	e0e3      	b.n	800951e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009366:	d102      	bne.n	800936e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009368:	4b6f      	ldr	r3, [pc, #444]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800936a:	60bb      	str	r3, [r7, #8]
 800936c:	e009      	b.n	8009382 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a6e      	ldr	r2, [pc, #440]	; (800952c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d102      	bne.n	800937e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009378:	4b6d      	ldr	r3, [pc, #436]	; (8009530 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	e001      	b.n	8009382 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800937e:	2300      	movs	r3, #0
 8009380:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10b      	bne.n	80093a0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	f043 0220 	orr.w	r2, r3, #32
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e0be      	b.n	800951e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff ffb5 	bl	8009312 <LL_ADC_REG_IsConversionOngoing>
 80093a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff ffaf 	bl	8009312 <LL_ADC_REG_IsConversionOngoing>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f040 80a0 	bne.w	80094fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80093bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f040 809c 	bne.w	80094fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093cc:	d004      	beq.n	80093d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a55      	ldr	r2, [pc, #340]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d101      	bne.n	80093dc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80093d8:	4b56      	ldr	r3, [pc, #344]	; (8009534 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80093da:	e000      	b.n	80093de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80093dc:	4b56      	ldr	r3, [pc, #344]	; (8009538 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80093de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d04b      	beq.n	8009480 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80093e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	6859      	ldr	r1, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093fa:	035b      	lsls	r3, r3, #13
 80093fc:	430b      	orrs	r3, r1
 80093fe:	431a      	orrs	r2, r3
 8009400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009402:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800940c:	d004      	beq.n	8009418 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a45      	ldr	r2, [pc, #276]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d10f      	bne.n	8009438 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009418:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800941c:	f7ff ff66 	bl	80092ec <LL_ADC_IsEnabled>
 8009420:	4604      	mov	r4, r0
 8009422:	4841      	ldr	r0, [pc, #260]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009424:	f7ff ff62 	bl	80092ec <LL_ADC_IsEnabled>
 8009428:	4603      	mov	r3, r0
 800942a:	4323      	orrs	r3, r4
 800942c:	2b00      	cmp	r3, #0
 800942e:	bf0c      	ite	eq
 8009430:	2301      	moveq	r3, #1
 8009432:	2300      	movne	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	e012      	b.n	800945e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009438:	483c      	ldr	r0, [pc, #240]	; (800952c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800943a:	f7ff ff57 	bl	80092ec <LL_ADC_IsEnabled>
 800943e:	4604      	mov	r4, r0
 8009440:	483b      	ldr	r0, [pc, #236]	; (8009530 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009442:	f7ff ff53 	bl	80092ec <LL_ADC_IsEnabled>
 8009446:	4603      	mov	r3, r0
 8009448:	431c      	orrs	r4, r3
 800944a:	483c      	ldr	r0, [pc, #240]	; (800953c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800944c:	f7ff ff4e 	bl	80092ec <LL_ADC_IsEnabled>
 8009450:	4603      	mov	r3, r0
 8009452:	4323      	orrs	r3, r4
 8009454:	2b00      	cmp	r3, #0
 8009456:	bf0c      	ite	eq
 8009458:	2301      	moveq	r3, #1
 800945a:	2300      	movne	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d056      	beq.n	8009510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800946a:	f023 030f 	bic.w	r3, r3, #15
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	6811      	ldr	r1, [r2, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	430a      	orrs	r2, r1
 8009478:	431a      	orrs	r2, r3
 800947a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800947c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800947e:	e047      	b.n	8009510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009494:	d004      	beq.n	80094a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a23      	ldr	r2, [pc, #140]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10f      	bne.n	80094c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80094a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80094a4:	f7ff ff22 	bl	80092ec <LL_ADC_IsEnabled>
 80094a8:	4604      	mov	r4, r0
 80094aa:	481f      	ldr	r0, [pc, #124]	; (8009528 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80094ac:	f7ff ff1e 	bl	80092ec <LL_ADC_IsEnabled>
 80094b0:	4603      	mov	r3, r0
 80094b2:	4323      	orrs	r3, r4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bf0c      	ite	eq
 80094b8:	2301      	moveq	r3, #1
 80094ba:	2300      	movne	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	e012      	b.n	80094e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80094c0:	481a      	ldr	r0, [pc, #104]	; (800952c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80094c2:	f7ff ff13 	bl	80092ec <LL_ADC_IsEnabled>
 80094c6:	4604      	mov	r4, r0
 80094c8:	4819      	ldr	r0, [pc, #100]	; (8009530 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80094ca:	f7ff ff0f 	bl	80092ec <LL_ADC_IsEnabled>
 80094ce:	4603      	mov	r3, r0
 80094d0:	431c      	orrs	r4, r3
 80094d2:	481a      	ldr	r0, [pc, #104]	; (800953c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80094d4:	f7ff ff0a 	bl	80092ec <LL_ADC_IsEnabled>
 80094d8:	4603      	mov	r3, r0
 80094da:	4323      	orrs	r3, r4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bf0c      	ite	eq
 80094e0:	2301      	moveq	r3, #1
 80094e2:	2300      	movne	r3, #0
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d012      	beq.n	8009510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80094ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80094f2:	f023 030f 	bic.w	r3, r3, #15
 80094f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80094fa:	e009      	b.n	8009510 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009500:	f043 0220 	orr.w	r2, r3, #32
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800950e:	e000      	b.n	8009512 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009510:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800951a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800951e:	4618      	mov	r0, r3
 8009520:	3784      	adds	r7, #132	; 0x84
 8009522:	46bd      	mov	sp, r7
 8009524:	bd90      	pop	{r4, r7, pc}
 8009526:	bf00      	nop
 8009528:	50000100 	.word	0x50000100
 800952c:	50000400 	.word	0x50000400
 8009530:	50000500 	.word	0x50000500
 8009534:	50000300 	.word	0x50000300
 8009538:	50000700 	.word	0x50000700
 800953c:	50000600 	.word	0x50000600

08009540 <LL_EXTI_EnableIT_0_31>:
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <LL_EXTI_EnableIT_0_31+0x20>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <LL_EXTI_EnableIT_0_31+0x20>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4313      	orrs	r3, r2
 8009552:	600b      	str	r3, [r1, #0]
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	40010400 	.word	0x40010400

08009564 <LL_EXTI_EnableIT_32_63>:
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <LL_EXTI_EnableIT_32_63+0x20>)
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	4904      	ldr	r1, [pc, #16]	; (8009584 <LL_EXTI_EnableIT_32_63+0x20>)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4313      	orrs	r3, r2
 8009576:	620b      	str	r3, [r1, #32]
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	40010400 	.word	0x40010400

08009588 <LL_EXTI_DisableIT_0_31>:
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009590:	4b06      	ldr	r3, [pc, #24]	; (80095ac <LL_EXTI_DisableIT_0_31+0x24>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	43db      	mvns	r3, r3
 8009598:	4904      	ldr	r1, [pc, #16]	; (80095ac <LL_EXTI_DisableIT_0_31+0x24>)
 800959a:	4013      	ands	r3, r2
 800959c:	600b      	str	r3, [r1, #0]
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	40010400 	.word	0x40010400

080095b0 <LL_EXTI_DisableIT_32_63>:
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80095ba:	6a1a      	ldr	r2, [r3, #32]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	43db      	mvns	r3, r3
 80095c0:	4904      	ldr	r1, [pc, #16]	; (80095d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	620b      	str	r3, [r1, #32]
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40010400 	.word	0x40010400

080095d8 <LL_EXTI_EnableEvent_0_31>:
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	604b      	str	r3, [r1, #4]
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	40010400 	.word	0x40010400

080095fc <LL_EXTI_EnableEvent_32_63>:
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <LL_EXTI_EnableEvent_32_63+0x20>)
 8009606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <LL_EXTI_EnableEvent_32_63+0x20>)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4313      	orrs	r3, r2
 800960e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40010400 	.word	0x40010400

08009620 <LL_EXTI_DisableEvent_0_31>:
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009628:	4b06      	ldr	r3, [pc, #24]	; (8009644 <LL_EXTI_DisableEvent_0_31+0x24>)
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	43db      	mvns	r3, r3
 8009630:	4904      	ldr	r1, [pc, #16]	; (8009644 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009632:	4013      	ands	r3, r2
 8009634:	604b      	str	r3, [r1, #4]
}
 8009636:	bf00      	nop
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	40010400 	.word	0x40010400

08009648 <LL_EXTI_DisableEvent_32_63>:
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <LL_EXTI_DisableEvent_32_63+0x24>)
 8009652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	43db      	mvns	r3, r3
 8009658:	4904      	ldr	r1, [pc, #16]	; (800966c <LL_EXTI_DisableEvent_32_63+0x24>)
 800965a:	4013      	ands	r3, r2
 800965c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40010400 	.word	0x40010400

08009670 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	4904      	ldr	r1, [pc, #16]	; (8009690 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4313      	orrs	r3, r2
 8009682:	608b      	str	r3, [r1, #8]
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	40010400 	.word	0x40010400

08009694 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800969e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096a0:	4904      	ldr	r1, [pc, #16]	; (80096b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40010400 	.word	0x40010400

080096b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	43db      	mvns	r3, r3
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	608b      	str	r3, [r1, #8]
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40010400 	.word	0x40010400

080096e0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80096e8:	4b06      	ldr	r3, [pc, #24]	; (8009704 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80096ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	43db      	mvns	r3, r3
 80096f0:	4904      	ldr	r1, [pc, #16]	; (8009704 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80096f2:	4013      	ands	r3, r2
 80096f4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40010400 	.word	0x40010400

08009708 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	4904      	ldr	r1, [pc, #16]	; (8009728 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4313      	orrs	r3, r2
 800971a:	60cb      	str	r3, [r1, #12]
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	40010400 	.word	0x40010400

0800972c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4904      	ldr	r1, [pc, #16]	; (800974c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4313      	orrs	r3, r2
 800973e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	40010400 	.word	0x40010400

08009750 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	43db      	mvns	r3, r3
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009762:	4013      	ands	r3, r2
 8009764:	60cb      	str	r3, [r1, #12]
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	40010400 	.word	0x40010400

08009778 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	43db      	mvns	r3, r3
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800978a:	4013      	ands	r3, r2
 800978c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800978e:	bf00      	nop
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	40010400 	.word	0x40010400

080097a0 <LL_EXTI_ClearFlag_0_31>:
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80097a8:	4a04      	ldr	r2, [pc, #16]	; (80097bc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6153      	str	r3, [r2, #20]
}
 80097ae:	bf00      	nop
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40010400 	.word	0x40010400

080097c0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80097c8:	4a04      	ldr	r2, [pc, #16]	; (80097dc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40010400 	.word	0x40010400

080097e0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e180      	b.n	8009afe <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980a:	d102      	bne.n	8009812 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	77fb      	strb	r3, [r7, #31]
 8009810:	e175      	b.n	8009afe <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7f5b      	ldrb	r3, [r3, #29]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d108      	bne.n	800982e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fd f967 	bl	8006afc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009838:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b98      	ldr	r3, [pc, #608]	; (8009ac0 <HAL_COMP_Init+0x2e0>)
 8009860:	4013      	ands	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6812      	ldr	r2, [r2, #0]
 8009866:	6979      	ldr	r1, [r7, #20]
 8009868:	430b      	orrs	r3, r1
 800986a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d015      	beq.n	80098a6 <HAL_COMP_Init+0xc6>
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d112      	bne.n	80098a6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009880:	4b90      	ldr	r3, [pc, #576]	; (8009ac4 <HAL_COMP_Init+0x2e4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	099b      	lsrs	r3, r3, #6
 8009886:	4a90      	ldr	r2, [pc, #576]	; (8009ac8 <HAL_COMP_Init+0x2e8>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	099a      	lsrs	r2, r3, #6
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009898:	e002      	b.n	80098a0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b01      	subs	r3, #1
 800989e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f9      	bne.n	800989a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a88      	ldr	r2, [pc, #544]	; (8009acc <HAL_COMP_Init+0x2ec>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d028      	beq.n	8009902 <HAL_COMP_Init+0x122>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a86      	ldr	r2, [pc, #536]	; (8009ad0 <HAL_COMP_Init+0x2f0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d020      	beq.n	80098fc <HAL_COMP_Init+0x11c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a85      	ldr	r2, [pc, #532]	; (8009ad4 <HAL_COMP_Init+0x2f4>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d018      	beq.n	80098f6 <HAL_COMP_Init+0x116>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a83      	ldr	r2, [pc, #524]	; (8009ad8 <HAL_COMP_Init+0x2f8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d010      	beq.n	80098f0 <HAL_COMP_Init+0x110>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a82      	ldr	r2, [pc, #520]	; (8009adc <HAL_COMP_Init+0x2fc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d008      	beq.n	80098ea <HAL_COMP_Init+0x10a>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a80      	ldr	r2, [pc, #512]	; (8009ae0 <HAL_COMP_Init+0x300>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d101      	bne.n	80098e6 <HAL_COMP_Init+0x106>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e00f      	b.n	8009906 <HAL_COMP_Init+0x126>
 80098e6:	2302      	movs	r3, #2
 80098e8:	e00d      	b.n	8009906 <HAL_COMP_Init+0x126>
 80098ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098ee:	e00a      	b.n	8009906 <HAL_COMP_Init+0x126>
 80098f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098f4:	e007      	b.n	8009906 <HAL_COMP_Init+0x126>
 80098f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80098fa:	e004      	b.n	8009906 <HAL_COMP_Init+0x126>
 80098fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009900:	e001      	b.n	8009906 <HAL_COMP_Init+0x126>
 8009902:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009906:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f003 0303 	and.w	r3, r3, #3
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 80b6 	beq.w	8009a82 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f003 0310 	and.w	r3, r3, #16
 800991e:	2b00      	cmp	r3, #0
 8009920:	d011      	beq.n	8009946 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a6e      	ldr	r2, [pc, #440]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d004      	beq.n	8009936 <HAL_COMP_Init+0x156>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a6c      	ldr	r2, [pc, #432]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d103      	bne.n	800993e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009936:	6938      	ldr	r0, [r7, #16]
 8009938:	f7ff feac 	bl	8009694 <LL_EXTI_EnableRisingTrig_32_63>
 800993c:	e014      	b.n	8009968 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800993e:	6938      	ldr	r0, [r7, #16]
 8009940:	f7ff fe96 	bl	8009670 <LL_EXTI_EnableRisingTrig_0_31>
 8009944:	e010      	b.n	8009968 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a65      	ldr	r2, [pc, #404]	; (8009ae0 <HAL_COMP_Init+0x300>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d004      	beq.n	800995a <HAL_COMP_Init+0x17a>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a63      	ldr	r2, [pc, #396]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d103      	bne.n	8009962 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f7ff fec0 	bl	80096e0 <LL_EXTI_DisableRisingTrig_32_63>
 8009960:	e002      	b.n	8009968 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009962:	6938      	ldr	r0, [r7, #16]
 8009964:	f7ff fea8 	bl	80096b8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d011      	beq.n	8009998 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a59      	ldr	r2, [pc, #356]	; (8009ae0 <HAL_COMP_Init+0x300>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d004      	beq.n	8009988 <HAL_COMP_Init+0x1a8>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a58      	ldr	r2, [pc, #352]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d103      	bne.n	8009990 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009988:	6938      	ldr	r0, [r7, #16]
 800998a:	f7ff fecf 	bl	800972c <LL_EXTI_EnableFallingTrig_32_63>
 800998e:	e014      	b.n	80099ba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009990:	6938      	ldr	r0, [r7, #16]
 8009992:	f7ff feb9 	bl	8009708 <LL_EXTI_EnableFallingTrig_0_31>
 8009996:	e010      	b.n	80099ba <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a50      	ldr	r2, [pc, #320]	; (8009ae0 <HAL_COMP_Init+0x300>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d004      	beq.n	80099ac <HAL_COMP_Init+0x1cc>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a4f      	ldr	r2, [pc, #316]	; (8009ae4 <HAL_COMP_Init+0x304>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d103      	bne.n	80099b4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80099ac:	6938      	ldr	r0, [r7, #16]
 80099ae:	f7ff fee3 	bl	8009778 <LL_EXTI_DisableFallingTrig_32_63>
 80099b2:	e002      	b.n	80099ba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80099b4:	6938      	ldr	r0, [r7, #16]
 80099b6:	f7ff fecb 	bl	8009750 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a48      	ldr	r2, [pc, #288]	; (8009ae0 <HAL_COMP_Init+0x300>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_COMP_Init+0x1ee>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a46      	ldr	r2, [pc, #280]	; (8009ae4 <HAL_COMP_Init+0x304>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d103      	bne.n	80099d6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80099ce:	6938      	ldr	r0, [r7, #16]
 80099d0:	f7ff fef6 	bl	80097c0 <LL_EXTI_ClearFlag_32_63>
 80099d4:	e002      	b.n	80099dc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80099d6:	6938      	ldr	r0, [r7, #16]
 80099d8:	f7ff fee2 	bl	80097a0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d011      	beq.n	8009a0c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a3c      	ldr	r2, [pc, #240]	; (8009ae0 <HAL_COMP_Init+0x300>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <HAL_COMP_Init+0x21c>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3b      	ldr	r2, [pc, #236]	; (8009ae4 <HAL_COMP_Init+0x304>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d103      	bne.n	8009a04 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80099fc:	6938      	ldr	r0, [r7, #16]
 80099fe:	f7ff fdfd 	bl	80095fc <LL_EXTI_EnableEvent_32_63>
 8009a02:	e014      	b.n	8009a2e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009a04:	6938      	ldr	r0, [r7, #16]
 8009a06:	f7ff fde7 	bl	80095d8 <LL_EXTI_EnableEvent_0_31>
 8009a0a:	e010      	b.n	8009a2e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a33      	ldr	r2, [pc, #204]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_COMP_Init+0x240>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a32      	ldr	r2, [pc, #200]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d103      	bne.n	8009a28 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009a20:	6938      	ldr	r0, [r7, #16]
 8009a22:	f7ff fe11 	bl	8009648 <LL_EXTI_DisableEvent_32_63>
 8009a26:	e002      	b.n	8009a2e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009a28:	6938      	ldr	r0, [r7, #16]
 8009a2a:	f7ff fdf9 	bl	8009620 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d011      	beq.n	8009a5e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a28      	ldr	r2, [pc, #160]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d004      	beq.n	8009a4e <HAL_COMP_Init+0x26e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a26      	ldr	r2, [pc, #152]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d103      	bne.n	8009a56 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009a4e:	6938      	ldr	r0, [r7, #16]
 8009a50:	f7ff fd88 	bl	8009564 <LL_EXTI_EnableIT_32_63>
 8009a54:	e04b      	b.n	8009aee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009a56:	6938      	ldr	r0, [r7, #16]
 8009a58:	f7ff fd72 	bl	8009540 <LL_EXTI_EnableIT_0_31>
 8009a5c:	e047      	b.n	8009aee <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a1f      	ldr	r2, [pc, #124]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d004      	beq.n	8009a72 <HAL_COMP_Init+0x292>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d103      	bne.n	8009a7a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009a72:	6938      	ldr	r0, [r7, #16]
 8009a74:	f7ff fd9c 	bl	80095b0 <LL_EXTI_DisableIT_32_63>
 8009a78:	e039      	b.n	8009aee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f7ff fd84 	bl	8009588 <LL_EXTI_DisableIT_0_31>
 8009a80:	e035      	b.n	8009aee <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_COMP_Init+0x2b6>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a14      	ldr	r2, [pc, #80]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d103      	bne.n	8009a9e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009a96:	6938      	ldr	r0, [r7, #16]
 8009a98:	f7ff fdd6 	bl	8009648 <LL_EXTI_DisableEvent_32_63>
 8009a9c:	e002      	b.n	8009aa4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009a9e:	6938      	ldr	r0, [r7, #16]
 8009aa0:	f7ff fdbe 	bl	8009620 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a0d      	ldr	r2, [pc, #52]	; (8009ae0 <HAL_COMP_Init+0x300>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d004      	beq.n	8009ab8 <HAL_COMP_Init+0x2d8>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a0c      	ldr	r2, [pc, #48]	; (8009ae4 <HAL_COMP_Init+0x304>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d117      	bne.n	8009ae8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009ab8:	6938      	ldr	r0, [r7, #16]
 8009aba:	f7ff fd79 	bl	80095b0 <LL_EXTI_DisableIT_32_63>
 8009abe:	e016      	b.n	8009aee <HAL_COMP_Init+0x30e>
 8009ac0:	ff007e0f 	.word	0xff007e0f
 8009ac4:	20000c30 	.word	0x20000c30
 8009ac8:	053e2d63 	.word	0x053e2d63
 8009acc:	40010200 	.word	0x40010200
 8009ad0:	40010204 	.word	0x40010204
 8009ad4:	40010208 	.word	0x40010208
 8009ad8:	4001020c 	.word	0x4001020c
 8009adc:	40010210 	.word	0x40010210
 8009ae0:	40010214 	.word	0x40010214
 8009ae4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009ae8:	6938      	ldr	r0, [r7, #16]
 8009aea:	f7ff fd4d 	bl	8009588 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7f5b      	ldrb	r3, [r3, #29]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <__NVIC_SetPriorityGrouping>:
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <__NVIC_SetPriorityGrouping+0x44>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b24:	4013      	ands	r3, r2
 8009b26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b3a:	4a04      	ldr	r2, [pc, #16]	; (8009b4c <__NVIC_SetPriorityGrouping+0x44>)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	60d3      	str	r3, [r2, #12]
}
 8009b40:	bf00      	nop
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <__NVIC_GetPriorityGrouping>:
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <__NVIC_GetPriorityGrouping+0x18>)
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	0a1b      	lsrs	r3, r3, #8
 8009b5a:	f003 0307 	and.w	r3, r3, #7
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	e000ed00 	.word	0xe000ed00

08009b6c <__NVIC_EnableIRQ>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db0b      	blt.n	8009b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	f003 021f 	and.w	r2, r3, #31
 8009b84:	4907      	ldr	r1, [pc, #28]	; (8009ba4 <__NVIC_EnableIRQ+0x38>)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	e000e100 	.word	0xe000e100

08009ba8 <__NVIC_DisableIRQ>:
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	db10      	blt.n	8009bdc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 021f 	and.w	r2, r3, #31
 8009bc0:	4909      	ldr	r1, [pc, #36]	; (8009be8 <__NVIC_DisableIRQ+0x40>)
 8009bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	2001      	movs	r0, #1
 8009bca:	fa00 f202 	lsl.w	r2, r0, r2
 8009bce:	3320      	adds	r3, #32
 8009bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009bd8:	f3bf 8f6f 	isb	sy
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	e000e100 	.word	0xe000e100

08009bec <__NVIC_SetPriority>:
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	db0a      	blt.n	8009c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	490c      	ldr	r1, [pc, #48]	; (8009c38 <__NVIC_SetPriority+0x4c>)
 8009c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c0a:	0112      	lsls	r2, r2, #4
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	440b      	add	r3, r1
 8009c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c14:	e00a      	b.n	8009c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	4908      	ldr	r1, [pc, #32]	; (8009c3c <__NVIC_SetPriority+0x50>)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	3b04      	subs	r3, #4
 8009c24:	0112      	lsls	r2, r2, #4
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	440b      	add	r3, r1
 8009c2a:	761a      	strb	r2, [r3, #24]
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	e000e100 	.word	0xe000e100
 8009c3c:	e000ed00 	.word	0xe000ed00

08009c40 <NVIC_EncodePriority>:
{
 8009c40:	b480      	push	{r7}
 8009c42:	b089      	sub	sp, #36	; 0x24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f1c3 0307 	rsb	r3, r3, #7
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	bf28      	it	cs
 8009c5e:	2304      	movcs	r3, #4
 8009c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	3304      	adds	r3, #4
 8009c66:	2b06      	cmp	r3, #6
 8009c68:	d902      	bls.n	8009c70 <NVIC_EncodePriority+0x30>
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	3b03      	subs	r3, #3
 8009c6e:	e000      	b.n	8009c72 <NVIC_EncodePriority+0x32>
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	43da      	mvns	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	401a      	ands	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c92:	43d9      	mvns	r1, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c98:	4313      	orrs	r3, r2
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3724      	adds	r7, #36	; 0x24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <SysTick_Config>:
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cb8:	d301      	bcc.n	8009cbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e00f      	b.n	8009cde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <SysTick_Config+0x40>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cc6:	210f      	movs	r1, #15
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ccc:	f7ff ff8e 	bl	8009bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <SysTick_Config+0x40>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <SysTick_Config+0x40>)
 8009cd8:	2207      	movs	r2, #7
 8009cda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	e000e010 	.word	0xe000e010

08009cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff ff07 	bl	8009b08 <__NVIC_SetPriorityGrouping>
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b086      	sub	sp, #24
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	4603      	mov	r3, r0
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d10:	f7ff ff1e 	bl	8009b50 <__NVIC_GetPriorityGrouping>
 8009d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	6978      	ldr	r0, [r7, #20]
 8009d1c:	f7ff ff90 	bl	8009c40 <NVIC_EncodePriority>
 8009d20:	4602      	mov	r2, r0
 8009d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff ff5f 	bl	8009bec <__NVIC_SetPriority>
}
 8009d2e:	bf00      	nop
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff ff11 	bl	8009b6c <__NVIC_EnableIRQ>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	4603      	mov	r3, r0
 8009d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff ff21 	bl	8009ba8 <__NVIC_DisableIRQ>
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff ff96 	bl	8009ca8 <SysTick_Config>
 8009d7c:	4603      	mov	r3, r0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e014      	b.n	8009dc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	791b      	ldrb	r3, [r3, #4]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7fc ff5d 	bl	8006c68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	795b      	ldrb	r3, [r3, #5]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d101      	bne.n	8009de0 <HAL_DAC_Start+0x16>
 8009ddc:	2302      	movs	r3, #2
 8009dde:	e043      	b.n	8009e68 <HAL_DAC_Start+0x9e>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6819      	ldr	r1, [r3, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2201      	movs	r2, #1
 8009dfa:	409a      	lsls	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009e04:	2001      	movs	r0, #1
 8009e06:	f7fe fb1d 	bl	8008444 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10f      	bne.n	8009e30 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d11d      	bne.n	8009e5a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f042 0201 	orr.w	r2, r2, #1
 8009e2c:	605a      	str	r2, [r3, #4]
 8009e2e:	e014      	b.n	8009e5a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	f003 0310 	and.w	r3, r3, #16
 8009e40:	2102      	movs	r1, #2
 8009e42:	fa01 f303 	lsl.w	r3, r1, r3
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d107      	bne.n	8009e5a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0202 	orr.w	r2, r2, #2
 8009e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	795b      	ldrb	r3, [r3, #5]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_DAC_Start_DMA+0x1e>
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e0a1      	b.n	8009fd2 <HAL_DAC_Start_DMA+0x162>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2202      	movs	r2, #2
 8009e98:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d12a      	bne.n	8009ef6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	4a4d      	ldr	r2, [pc, #308]	; (8009fdc <HAL_DAC_Start_DMA+0x16c>)
 8009ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	4a4c      	ldr	r2, [pc, #304]	; (8009fe0 <HAL_DAC_Start_DMA+0x170>)
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	4a4b      	ldr	r2, [pc, #300]	; (8009fe4 <HAL_DAC_Start_DMA+0x174>)
 8009eb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ec6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d009      	beq.n	8009ee2 <HAL_DAC_Start_DMA+0x72>
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	d00c      	beq.n	8009eec <HAL_DAC_Start_DMA+0x7c>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d000      	beq.n	8009ed8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009ed6:	e039      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3308      	adds	r3, #8
 8009ede:	613b      	str	r3, [r7, #16]
        break;
 8009ee0:	e034      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	613b      	str	r3, [r7, #16]
        break;
 8009eea:	e02f      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3310      	adds	r3, #16
 8009ef2:	613b      	str	r3, [r7, #16]
        break;
 8009ef4:	e02a      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	4a3b      	ldr	r2, [pc, #236]	; (8009fe8 <HAL_DAC_Start_DMA+0x178>)
 8009efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4a3a      	ldr	r2, [pc, #232]	; (8009fec <HAL_DAC_Start_DMA+0x17c>)
 8009f04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	4a39      	ldr	r2, [pc, #228]	; (8009ff0 <HAL_DAC_Start_DMA+0x180>)
 8009f0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d009      	beq.n	8009f38 <HAL_DAC_Start_DMA+0xc8>
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d00c      	beq.n	8009f42 <HAL_DAC_Start_DMA+0xd2>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d000      	beq.n	8009f2e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009f2c:	e00e      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3314      	adds	r3, #20
 8009f34:	613b      	str	r3, [r7, #16]
        break;
 8009f36:	e009      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	613b      	str	r3, [r7, #16]
        break;
 8009f40:	e004      	b.n	8009f4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	331c      	adds	r3, #28
 8009f48:	613b      	str	r3, [r7, #16]
        break;
 8009f4a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d111      	bne.n	8009f76 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6898      	ldr	r0, [r3, #8]
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	f000 fbc8 	bl	800a700 <HAL_DMA_Start_IT>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]
 8009f74:	e010      	b.n	8009f98 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68d8      	ldr	r0, [r3, #12]
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	f000 fbb6 	bl	800a700 <HAL_DMA_Start_IT>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10f      	bne.n	8009fc4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6819      	ldr	r1, [r3, #0]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	409a      	lsls	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7fe fa41 	bl	8008444 <HAL_Delay>
 8009fc2:	e005      	b.n	8009fd0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	f043 0204 	orr.w	r2, r3, #4
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800a49d 	.word	0x0800a49d
 8009fe0:	0800a4bf 	.word	0x0800a4bf
 8009fe4:	0800a4db 	.word	0x0800a4db
 8009fe8:	0800a545 	.word	0x0800a545
 8009fec:	0800a567 	.word	0x0800a567
 8009ff0:	0800a583 	.word	0x0800a583

08009ff4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6819      	ldr	r1, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	f003 0310 	and.w	r3, r3, #16
 800a00a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	43da      	mvns	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	400a      	ands	r2, r1
 800a01a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	f003 0310 	and.w	r3, r3, #16
 800a028:	2201      	movs	r2, #1
 800a02a:	fa02 f303 	lsl.w	r3, r2, r3
 800a02e:	43da      	mvns	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	400a      	ands	r2, r1
 800a036:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a038:	2001      	movs	r0, #1
 800a03a:	f7fe fa03 	bl	8008444 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10f      	bne.n	800a064 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fbd4 	bl	800a7f6 <HAL_DMA_Abort>
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	e00e      	b.n	800a082 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fbc4 	bl	800a7f6 <HAL_DMA_Abort>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a080:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2204      	movs	r2, #4
 800a08c:	711a      	strb	r2, [r3, #4]
 800a08e:	e002      	b.n	800a096 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	e004      	b.n	800a0da <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3314      	adds	r3, #20
 800a0d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d103      	bne.n	800a130 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	e002      	b.n	800a136 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
	...

0800a144 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	795b      	ldrb	r3, [r3, #5]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d101      	bne.n	800a160 <HAL_DAC_ConfigChannel+0x1c>
 800a15c:	2302      	movs	r3, #2
 800a15e:	e194      	b.n	800a48a <HAL_DAC_ConfigChannel+0x346>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2201      	movs	r2, #1
 800a164:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2202      	movs	r2, #2
 800a16a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d174      	bne.n	800a25e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d137      	bne.n	800a1ea <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a17a:	f7fe f957 	bl	800842c <HAL_GetTick>
 800a17e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a180:	e011      	b.n	800a1a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a182:	f7fe f953 	bl	800842c <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d90a      	bls.n	800a1a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f043 0208 	orr.w	r2, r3, #8
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2203      	movs	r2, #3
 800a1a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e171      	b.n	800a48a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f7fe f945 	bl	8008444 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1c2:	641a      	str	r2, [r3, #64]	; 0x40
 800a1c4:	e01e      	b.n	800a204 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a1c6:	f7fe f931 	bl	800842c <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d90a      	bls.n	800a1ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	f043 0208 	orr.w	r2, r3, #8
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e14f      	b.n	800a48a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dbe8      	blt.n	800a1c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	f7fe f925 	bl	8008444 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a202:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a214:	fa01 f303 	lsl.w	r3, r1, r3
 800a218:	43db      	mvns	r3, r3
 800a21a:	ea02 0103 	and.w	r1, r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	409a      	lsls	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f003 0310 	and.w	r3, r3, #16
 800a23e:	21ff      	movs	r1, #255	; 0xff
 800a240:	fa01 f303 	lsl.w	r3, r1, r3
 800a244:	43db      	mvns	r3, r3
 800a246:	ea02 0103 	and.w	r1, r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	409a      	lsls	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d11d      	bne.n	800a2a2 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f003 0310 	and.w	r3, r3, #16
 800a274:	221f      	movs	r2, #31
 800a276:	fa02 f303 	lsl.w	r3, r2, r3
 800a27a:	43db      	mvns	r3, r3
 800a27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a27e:	4013      	ands	r3, r2
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f003 0310 	and.w	r3, r3, #16
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a296:	4313      	orrs	r3, r2
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	43db      	mvns	r3, r3
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	623b      	str	r3, [r7, #32]
 800a2ce:	e011      	b.n	800a2f4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	623b      	str	r3, [r7, #32]
 800a2e0:	e008      	b.n	800a2f4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	e001      	b.n	800a2f4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	6a3a      	ldr	r2, [r7, #32]
 800a300:	4313      	orrs	r3, r2
 800a302:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	43db      	mvns	r3, r3
 800a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a316:	4013      	ands	r3, r2
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d102      	bne.n	800a328 <HAL_DAC_ConfigChannel+0x1e4>
 800a322:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a326:	e000      	b.n	800a32a <HAL_DAC_ConfigChannel+0x1e6>
 800a328:	2300      	movs	r3, #0
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a33a:	fa02 f303 	lsl.w	r3, r2, r3
 800a33e:	43db      	mvns	r3, r3
 800a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a342:	4013      	ands	r3, r2
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	795b      	ldrb	r3, [r3, #5]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d102      	bne.n	800a354 <HAL_DAC_ConfigChannel+0x210>
 800a34e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a352:	e000      	b.n	800a356 <HAL_DAC_ConfigChannel+0x212>
 800a354:	2300      	movs	r3, #0
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	4313      	orrs	r3, r2
 800a35a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d114      	bne.n	800a396 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a36c:	f001 fbc2 	bl	800baf4 <HAL_RCC_GetHCLKFreq>
 800a370:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	4a47      	ldr	r2, [pc, #284]	; (800a494 <HAL_DAC_ConfigChannel+0x350>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d904      	bls.n	800a384 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
 800a382:	e00d      	b.n	800a3a0 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4a44      	ldr	r2, [pc, #272]	; (800a498 <HAL_DAC_ConfigChannel+0x354>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d909      	bls.n	800a3a0 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
 800a394:	e004      	b.n	800a3a0 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	4313      	orrs	r3, r2
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	43da      	mvns	r2, r3
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	400a      	ands	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f003 0310 	and.w	r3, r3, #16
 800a3e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	fa02 f303 	lsl.w	r3, r2, r3
 800a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40a:	4313      	orrs	r3, r2
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a414:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6819      	ldr	r1, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f003 0310 	and.w	r3, r3, #16
 800a422:	22c0      	movs	r2, #192	; 0xc0
 800a424:	fa02 f303 	lsl.w	r3, r2, r3
 800a428:	43da      	mvns	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	400a      	ands	r2, r1
 800a430:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	089b      	lsrs	r3, r3, #2
 800a438:	f003 030f 	and.w	r3, r3, #15
 800a43c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	089b      	lsrs	r3, r3, #2
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a460:	fa01 f303 	lsl.w	r3, r1, r3
 800a464:	43db      	mvns	r3, r3
 800a466:	ea02 0103 	and.w	r1, r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f003 0310 	and.w	r3, r3, #16
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	409a      	lsls	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3728      	adds	r7, #40	; 0x28
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	09896800 	.word	0x09896800
 800a498:	04c4b400 	.word	0x04c4b400

0800a49c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7fd f817 	bl	80074de <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	711a      	strb	r2, [r3, #4]
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fe0f 	bl	800a0f0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	f043 0204 	orr.w	r2, r3, #4
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7ff fe05 	bl	800a104 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	711a      	strb	r2, [r3, #4]
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff ffd8 	bl	800a508 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	711a      	strb	r2, [r3, #4]
}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff ffd1 	bl	800a51c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f043 0204 	orr.w	r2, r3, #4
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff ffc7 	bl	800a530 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	711a      	strb	r2, [r3, #4]
}
 800a5a8:	bf00      	nop
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e08d      	b.n	800a6de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <HAL_DMA_Init+0x138>)
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d80f      	bhi.n	800a5ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4b45      	ldr	r3, [pc, #276]	; (800a6ec <HAL_DMA_Init+0x13c>)
 800a5d6:	4413      	add	r3, r2
 800a5d8:	4a45      	ldr	r2, [pc, #276]	; (800a6f0 <HAL_DMA_Init+0x140>)
 800a5da:	fba2 2303 	umull	r2, r3, r2, r3
 800a5de:	091b      	lsrs	r3, r3, #4
 800a5e0:	009a      	lsls	r2, r3, #2
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a42      	ldr	r2, [pc, #264]	; (800a6f4 <HAL_DMA_Init+0x144>)
 800a5ea:	641a      	str	r2, [r3, #64]	; 0x40
 800a5ec:	e00e      	b.n	800a60c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4b40      	ldr	r3, [pc, #256]	; (800a6f8 <HAL_DMA_Init+0x148>)
 800a5f6:	4413      	add	r3, r2
 800a5f8:	4a3d      	ldr	r2, [pc, #244]	; (800a6f0 <HAL_DMA_Init+0x140>)
 800a5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fe:	091b      	lsrs	r3, r3, #4
 800a600:	009a      	lsls	r2, r3, #2
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a3c      	ldr	r2, [pc, #240]	; (800a6fc <HAL_DMA_Init+0x14c>)
 800a60a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a63c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa10 	bl	800aa84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66c:	d102      	bne.n	800a674 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a688:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d010      	beq.n	800a6b4 <HAL_DMA_Init+0x104>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b04      	cmp	r3, #4
 800a698:	d80c      	bhi.n	800a6b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa30 	bl	800ab00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	e008      	b.n	800a6c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	40020407 	.word	0x40020407
 800a6ec:	bffdfff8 	.word	0xbffdfff8
 800a6f0:	cccccccd 	.word	0xcccccccd
 800a6f4:	40020000 	.word	0x40020000
 800a6f8:	bffdfbf8 	.word	0xbffdfbf8
 800a6fc:	40020400 	.word	0x40020400

0800a700 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_DMA_Start_IT+0x20>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e066      	b.n	800a7ee <HAL_DMA_Start_IT+0xee>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b01      	cmp	r3, #1
 800a732:	d155      	bne.n	800a7e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2202      	movs	r2, #2
 800a738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0201 	bic.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	68b9      	ldr	r1, [r7, #8]
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 f954 	bl	800aa06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d008      	beq.n	800a778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f042 020e 	orr.w	r2, r2, #14
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	e00f      	b.n	800a798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0204 	bic.w	r2, r2, #4
 800a786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 020a 	orr.w	r2, r2, #10
 800a796:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d007      	beq.n	800a7ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f042 0201 	orr.w	r2, r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e005      	b.n	800a7ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d005      	beq.n	800a81a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2204      	movs	r2, #4
 800a812:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	e037      	b.n	800a88a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 020e 	bic.w	r2, r2, #14
 800a828:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a838:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	f003 021f 	and.w	r2, r3, #31
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	2101      	movs	r1, #1
 800a858:	fa01 f202 	lsl.w	r2, r1, r2
 800a85c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a866:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00c      	beq.n	800a88a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a87e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a888:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	409a      	lsls	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d026      	beq.n	800a922 <HAL_DMA_IRQHandler+0x7a>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	f003 0304 	and.w	r3, r3, #4
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d021      	beq.n	800a922 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d107      	bne.n	800a8fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0204 	bic.w	r2, r2, #4
 800a8fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a900:	f003 021f 	and.w	r2, r3, #31
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a908:	2104      	movs	r1, #4
 800a90a:	fa01 f202 	lsl.w	r2, r1, r2
 800a90e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	2b00      	cmp	r3, #0
 800a916:	d071      	beq.n	800a9fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a920:	e06c      	b.n	800a9fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	f003 031f 	and.w	r3, r3, #31
 800a92a:	2202      	movs	r2, #2
 800a92c:	409a      	lsls	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d02e      	beq.n	800a994 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d029      	beq.n	800a994 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10b      	bne.n	800a966 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 020a 	bic.w	r2, r2, #10
 800a95c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96a:	f003 021f 	and.w	r2, r3, #31
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a972:	2102      	movs	r1, #2
 800a974:	fa01 f202 	lsl.w	r2, r1, r2
 800a978:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d038      	beq.n	800a9fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a992:	e033      	b.n	800a9fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a998:	f003 031f 	and.w	r3, r3, #31
 800a99c:	2208      	movs	r2, #8
 800a99e:	409a      	lsls	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d02a      	beq.n	800a9fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d025      	beq.n	800a9fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 020e 	bic.w	r2, r2, #14
 800a9c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	f003 021f 	and.w	r2, r3, #31
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	fa01 f202 	lsl.w	r2, r1, r2
 800a9d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d004      	beq.n	800a9fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
}
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa34:	f003 021f 	and.w	r2, r3, #31
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	fa01 f202 	lsl.w	r2, r1, r2
 800aa42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	2b10      	cmp	r3, #16
 800aa52:	d108      	bne.n	800aa66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aa64:	e007      	b.n	800aa76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]
}
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	4b16      	ldr	r3, [pc, #88]	; (800aaec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d802      	bhi.n	800aa9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e001      	b.n	800aaa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800aa9e:	4b15      	ldr	r3, [pc, #84]	; (800aaf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800aaa0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	3b08      	subs	r3, #8
 800aaae:	4a12      	ldr	r2, [pc, #72]	; (800aaf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aab0:	fba2 2303 	umull	r2, r3, r2, r3
 800aab4:	091b      	lsrs	r3, r3, #4
 800aab6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabc:	089b      	lsrs	r3, r3, #2
 800aabe:	009a      	lsls	r2, r3, #2
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	4413      	add	r3, r2
 800aac4:	461a      	mov	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a0b      	ldr	r2, [pc, #44]	; (800aafc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800aace:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f003 031f 	and.w	r3, r3, #31
 800aad6:	2201      	movs	r2, #1
 800aad8:	409a      	lsls	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	40020407 	.word	0x40020407
 800aaf0:	40020800 	.word	0x40020800
 800aaf4:	40020820 	.word	0x40020820
 800aaf8:	cccccccd 	.word	0xcccccccd
 800aafc:	40020880 	.word	0x40020880

0800ab00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ab14:	4413      	add	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ab22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	409a      	lsls	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	1000823f 	.word	0x1000823f
 800ab44:	40020940 	.word	0x40020940

0800ab48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab56:	e15a      	b.n	800ae0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	fa01 f303 	lsl.w	r3, r1, r3
 800ab64:	4013      	ands	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 814c 	beq.w	800ae08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d00b      	beq.n	800ab90 <HAL_GPIO_Init+0x48>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d007      	beq.n	800ab90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab84:	2b11      	cmp	r3, #17
 800ab86:	d003      	beq.n	800ab90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	2b12      	cmp	r3, #18
 800ab8e:	d130      	bne.n	800abf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aba0:	43db      	mvns	r3, r3
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4013      	ands	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800abc6:	2201      	movs	r2, #1
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	fa02 f303 	lsl.w	r3, r2, r3
 800abce:	43db      	mvns	r3, r3
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4013      	ands	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	f003 0201 	and.w	r2, r3, #1
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	fa02 f303 	lsl.w	r3, r2, r3
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	2203      	movs	r2, #3
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43db      	mvns	r3, r3
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4013      	ands	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	fa02 f303 	lsl.w	r3, r2, r3
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d003      	beq.n	800ac32 <HAL_GPIO_Init+0xea>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2b12      	cmp	r3, #18
 800ac30:	d123      	bne.n	800ac7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	08da      	lsrs	r2, r3, #3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3208      	adds	r2, #8
 800ac3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	220f      	movs	r2, #15
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4013      	ands	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	691a      	ldr	r2, [r3, #16]
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f003 0307 	and.w	r3, r3, #7
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	08da      	lsrs	r2, r3, #3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3208      	adds	r2, #8
 800ac74:	6939      	ldr	r1, [r7, #16]
 800ac76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	2203      	movs	r2, #3
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	43db      	mvns	r3, r3
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f003 0203 	and.w	r2, r3, #3
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80a6 	beq.w	800ae08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acbc:	4b5b      	ldr	r3, [pc, #364]	; (800ae2c <HAL_GPIO_Init+0x2e4>)
 800acbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc0:	4a5a      	ldr	r2, [pc, #360]	; (800ae2c <HAL_GPIO_Init+0x2e4>)
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	6613      	str	r3, [r2, #96]	; 0x60
 800acc8:	4b58      	ldr	r3, [pc, #352]	; (800ae2c <HAL_GPIO_Init+0x2e4>)
 800acca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	60bb      	str	r3, [r7, #8]
 800acd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acd4:	4a56      	ldr	r2, [pc, #344]	; (800ae30 <HAL_GPIO_Init+0x2e8>)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	089b      	lsrs	r3, r3, #2
 800acda:	3302      	adds	r3, #2
 800acdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	220f      	movs	r2, #15
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	43db      	mvns	r3, r3
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4013      	ands	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800acfe:	d01f      	beq.n	800ad40 <HAL_GPIO_Init+0x1f8>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a4c      	ldr	r2, [pc, #304]	; (800ae34 <HAL_GPIO_Init+0x2ec>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d019      	beq.n	800ad3c <HAL_GPIO_Init+0x1f4>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a4b      	ldr	r2, [pc, #300]	; (800ae38 <HAL_GPIO_Init+0x2f0>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d013      	beq.n	800ad38 <HAL_GPIO_Init+0x1f0>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a4a      	ldr	r2, [pc, #296]	; (800ae3c <HAL_GPIO_Init+0x2f4>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d00d      	beq.n	800ad34 <HAL_GPIO_Init+0x1ec>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a49      	ldr	r2, [pc, #292]	; (800ae40 <HAL_GPIO_Init+0x2f8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d007      	beq.n	800ad30 <HAL_GPIO_Init+0x1e8>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a48      	ldr	r2, [pc, #288]	; (800ae44 <HAL_GPIO_Init+0x2fc>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d101      	bne.n	800ad2c <HAL_GPIO_Init+0x1e4>
 800ad28:	2305      	movs	r3, #5
 800ad2a:	e00a      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad2c:	2306      	movs	r3, #6
 800ad2e:	e008      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad30:	2304      	movs	r3, #4
 800ad32:	e006      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad34:	2303      	movs	r3, #3
 800ad36:	e004      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad38:	2302      	movs	r3, #2
 800ad3a:	e002      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e000      	b.n	800ad42 <HAL_GPIO_Init+0x1fa>
 800ad40:	2300      	movs	r3, #0
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	f002 0203 	and.w	r2, r2, #3
 800ad48:	0092      	lsls	r2, r2, #2
 800ad4a:	4093      	lsls	r3, r2
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad52:	4937      	ldr	r1, [pc, #220]	; (800ae30 <HAL_GPIO_Init+0x2e8>)
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	089b      	lsrs	r3, r3, #2
 800ad58:	3302      	adds	r3, #2
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ad60:	4b39      	ldr	r3, [pc, #228]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ad84:	4a30      	ldr	r2, [pc, #192]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ad8a:	4b2f      	ldr	r3, [pc, #188]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	43db      	mvns	r3, r3
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4013      	ands	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4313      	orrs	r3, r2
 800adac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800adae:	4a26      	ldr	r2, [pc, #152]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800adb4:	4b24      	ldr	r3, [pc, #144]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	43db      	mvns	r3, r3
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	4013      	ands	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800add8:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800adde:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	43db      	mvns	r3, r3
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4013      	ands	r3, r2
 800adec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ae02:	4a11      	ldr	r2, [pc, #68]	; (800ae48 <HAL_GPIO_Init+0x300>)
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	fa22 f303 	lsr.w	r3, r2, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f47f ae9d 	bne.w	800ab58 <HAL_GPIO_Init+0x10>
  }
}
 800ae1e:	bf00      	nop
 800ae20:	371c      	adds	r7, #28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	40021000 	.word	0x40021000
 800ae30:	40010000 	.word	0x40010000
 800ae34:	48000400 	.word	0x48000400
 800ae38:	48000800 	.word	0x48000800
 800ae3c:	48000c00 	.word	0x48000c00
 800ae40:	48001000 	.word	0x48001000
 800ae44:	48001400 	.word	0x48001400
 800ae48:	40010400 	.word	0x40010400

0800ae4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800ae5a:	e0bd      	b.n	800afd8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	fa02 f303 	lsl.w	r3, r2, r3
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	4013      	ands	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80b0 	beq.w	800afd2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800ae72:	4a60      	ldr	r2, [pc, #384]	; (800aff4 <HAL_GPIO_DeInit+0x1a8>)
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	089b      	lsrs	r3, r3, #2
 800ae78:	3302      	adds	r3, #2
 800ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	220f      	movs	r2, #15
 800ae8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4013      	ands	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ae9a:	d01f      	beq.n	800aedc <HAL_GPIO_DeInit+0x90>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a56      	ldr	r2, [pc, #344]	; (800aff8 <HAL_GPIO_DeInit+0x1ac>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d019      	beq.n	800aed8 <HAL_GPIO_DeInit+0x8c>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a55      	ldr	r2, [pc, #340]	; (800affc <HAL_GPIO_DeInit+0x1b0>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d013      	beq.n	800aed4 <HAL_GPIO_DeInit+0x88>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a54      	ldr	r2, [pc, #336]	; (800b000 <HAL_GPIO_DeInit+0x1b4>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00d      	beq.n	800aed0 <HAL_GPIO_DeInit+0x84>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a53      	ldr	r2, [pc, #332]	; (800b004 <HAL_GPIO_DeInit+0x1b8>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d007      	beq.n	800aecc <HAL_GPIO_DeInit+0x80>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a52      	ldr	r2, [pc, #328]	; (800b008 <HAL_GPIO_DeInit+0x1bc>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d101      	bne.n	800aec8 <HAL_GPIO_DeInit+0x7c>
 800aec4:	2305      	movs	r3, #5
 800aec6:	e00a      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aec8:	2306      	movs	r3, #6
 800aeca:	e008      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aecc:	2304      	movs	r3, #4
 800aece:	e006      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aed0:	2303      	movs	r3, #3
 800aed2:	e004      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aed4:	2302      	movs	r3, #2
 800aed6:	e002      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e000      	b.n	800aede <HAL_GPIO_DeInit+0x92>
 800aedc:	2300      	movs	r3, #0
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	f002 0203 	and.w	r2, r2, #3
 800aee4:	0092      	lsls	r2, r2, #2
 800aee6:	4093      	lsls	r3, r2
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d132      	bne.n	800af54 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800aeee:	4b47      	ldr	r3, [pc, #284]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	43db      	mvns	r3, r3
 800aef6:	4945      	ldr	r1, [pc, #276]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800aefc:	4b43      	ldr	r3, [pc, #268]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	43db      	mvns	r3, r3
 800af04:	4941      	ldr	r1, [pc, #260]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800af06:	4013      	ands	r3, r2
 800af08:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800af0a:	4b40      	ldr	r3, [pc, #256]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	43db      	mvns	r3, r3
 800af12:	493e      	ldr	r1, [pc, #248]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800af14:	4013      	ands	r3, r2
 800af16:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800af18:	4b3c      	ldr	r3, [pc, #240]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800af1a:	68da      	ldr	r2, [r3, #12]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	43db      	mvns	r3, r3
 800af20:	493a      	ldr	r1, [pc, #232]	; (800b00c <HAL_GPIO_DeInit+0x1c0>)
 800af22:	4013      	ands	r3, r2
 800af24:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f003 0303 	and.w	r3, r3, #3
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	220f      	movs	r2, #15
 800af30:	fa02 f303 	lsl.w	r3, r2, r3
 800af34:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af36:	4a2f      	ldr	r2, [pc, #188]	; (800aff4 <HAL_GPIO_DeInit+0x1a8>)
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	089b      	lsrs	r3, r3, #2
 800af3c:	3302      	adds	r3, #2
 800af3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	43da      	mvns	r2, r3
 800af46:	482b      	ldr	r0, [pc, #172]	; (800aff4 <HAL_GPIO_DeInit+0x1a8>)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	089b      	lsrs	r3, r3, #2
 800af4c:	400a      	ands	r2, r1
 800af4e:	3302      	adds	r3, #2
 800af50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	2103      	movs	r1, #3
 800af5e:	fa01 f303 	lsl.w	r3, r1, r3
 800af62:	431a      	orrs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	08da      	lsrs	r2, r3, #3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3208      	adds	r2, #8
 800af70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	220f      	movs	r2, #15
 800af7e:	fa02 f303 	lsl.w	r3, r2, r3
 800af82:	43db      	mvns	r3, r3
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	08d2      	lsrs	r2, r2, #3
 800af88:	4019      	ands	r1, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3208      	adds	r2, #8
 800af8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	2103      	movs	r1, #3
 800af9c:	fa01 f303 	lsl.w	r3, r1, r3
 800afa0:	43db      	mvns	r3, r3
 800afa2:	401a      	ands	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	2101      	movs	r1, #1
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	fa01 f303 	lsl.w	r3, r1, r3
 800afb4:	43db      	mvns	r3, r3
 800afb6:	401a      	ands	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	2103      	movs	r1, #3
 800afc6:	fa01 f303 	lsl.w	r3, r1, r3
 800afca:	43db      	mvns	r3, r3
 800afcc:	401a      	ands	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	3301      	adds	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	fa22 f303 	lsr.w	r3, r2, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f47f af3b 	bne.w	800ae5c <HAL_GPIO_DeInit+0x10>
  }
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	40010000 	.word	0x40010000
 800aff8:	48000400 	.word	0x48000400
 800affc:	48000800 	.word	0x48000800
 800b000:	48000c00 	.word	0x48000c00
 800b004:	48001000 	.word	0x48001000
 800b008:	48001400 	.word	0x48001400
 800b00c:	40010400 	.word	0x40010400

0800b010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	807b      	strh	r3, [r7, #2]
 800b01c:	4613      	mov	r3, r2
 800b01e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b020:	787b      	ldrb	r3, [r7, #1]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b026:	887a      	ldrh	r2, [r7, #2]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b02c:	e002      	b.n	800b034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b02e:	887a      	ldrh	r2, [r7, #2]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d141      	bne.n	800b0d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b04e:	4b4b      	ldr	r3, [pc, #300]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05a:	d131      	bne.n	800b0c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b05c:	4b47      	ldr	r3, [pc, #284]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b062:	4a46      	ldr	r2, [pc, #280]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b06c:	4b43      	ldr	r3, [pc, #268]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b074:	4a41      	ldr	r2, [pc, #260]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b07a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b07c:	4b40      	ldr	r3, [pc, #256]	; (800b180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2232      	movs	r2, #50	; 0x32
 800b082:	fb02 f303 	mul.w	r3, r2, r3
 800b086:	4a3f      	ldr	r2, [pc, #252]	; (800b184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b088:	fba2 2303 	umull	r2, r3, r2, r3
 800b08c:	0c9b      	lsrs	r3, r3, #18
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b092:	e002      	b.n	800b09a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3b01      	subs	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b09a:	4b38      	ldr	r3, [pc, #224]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a6:	d102      	bne.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f2      	bne.n	800b094 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b0ae:	4b33      	ldr	r3, [pc, #204]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ba:	d158      	bne.n	800b16e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e057      	b.n	800b170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0c0:	4b2e      	ldr	r3, [pc, #184]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0c6:	4a2d      	ldr	r2, [pc, #180]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b0d0:	e04d      	b.n	800b16e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0d8:	d141      	bne.n	800b15e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0da:	4b28      	ldr	r3, [pc, #160]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e6:	d131      	bne.n	800b14c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0e8:	4b24      	ldr	r3, [pc, #144]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0ee:	4a23      	ldr	r2, [pc, #140]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0f8:	4b20      	ldr	r3, [pc, #128]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b100:	4a1e      	ldr	r2, [pc, #120]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b108:	4b1d      	ldr	r3, [pc, #116]	; (800b180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2232      	movs	r2, #50	; 0x32
 800b10e:	fb02 f303 	mul.w	r3, r2, r3
 800b112:	4a1c      	ldr	r2, [pc, #112]	; (800b184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b114:	fba2 2303 	umull	r2, r3, r2, r3
 800b118:	0c9b      	lsrs	r3, r3, #18
 800b11a:	3301      	adds	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b11e:	e002      	b.n	800b126 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3b01      	subs	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b126:	4b15      	ldr	r3, [pc, #84]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b132:	d102      	bne.n	800b13a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1f2      	bne.n	800b120 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b13a:	4b10      	ldr	r3, [pc, #64]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b146:	d112      	bne.n	800b16e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e011      	b.n	800b170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b14c:	4b0b      	ldr	r3, [pc, #44]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b152:	4a0a      	ldr	r2, [pc, #40]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b15c:	e007      	b.n	800b16e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b166:	4a05      	ldr	r2, [pc, #20]	; (800b17c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b16c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	40007000 	.word	0x40007000
 800b180:	20000c30 	.word	0x20000c30
 800b184:	431bde83 	.word	0x431bde83

0800b188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e308      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d075      	beq.n	800b292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1a6:	4ba3      	ldr	r3, [pc, #652]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 030c 	and.w	r3, r3, #12
 800b1ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1b0:	4ba0      	ldr	r3, [pc, #640]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b0c      	cmp	r3, #12
 800b1be:	d102      	bne.n	800b1c6 <HAL_RCC_OscConfig+0x3e>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d002      	beq.n	800b1cc <HAL_RCC_OscConfig+0x44>
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d10b      	bne.n	800b1e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1cc:	4b99      	ldr	r3, [pc, #612]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05b      	beq.n	800b290 <HAL_RCC_OscConfig+0x108>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d157      	bne.n	800b290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e2e3      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ec:	d106      	bne.n	800b1fc <HAL_RCC_OscConfig+0x74>
 800b1ee:	4b91      	ldr	r3, [pc, #580]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a90      	ldr	r2, [pc, #576]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b1f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	e01d      	b.n	800b238 <HAL_RCC_OscConfig+0xb0>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b204:	d10c      	bne.n	800b220 <HAL_RCC_OscConfig+0x98>
 800b206:	4b8b      	ldr	r3, [pc, #556]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a8a      	ldr	r2, [pc, #552]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b20c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	4b88      	ldr	r3, [pc, #544]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a87      	ldr	r2, [pc, #540]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	e00b      	b.n	800b238 <HAL_RCC_OscConfig+0xb0>
 800b220:	4b84      	ldr	r3, [pc, #528]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a83      	ldr	r2, [pc, #524]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	4b81      	ldr	r3, [pc, #516]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a80      	ldr	r2, [pc, #512]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d013      	beq.n	800b268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b240:	f7fd f8f4 	bl	800842c <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b248:	f7fd f8f0 	bl	800842c <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b64      	cmp	r3, #100	; 0x64
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e2a8      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b25a:	4b76      	ldr	r3, [pc, #472]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f0      	beq.n	800b248 <HAL_RCC_OscConfig+0xc0>
 800b266:	e014      	b.n	800b292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b268:	f7fd f8e0 	bl	800842c <HAL_GetTick>
 800b26c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b26e:	e008      	b.n	800b282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b270:	f7fd f8dc 	bl	800842c <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b64      	cmp	r3, #100	; 0x64
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e294      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b282:	4b6c      	ldr	r3, [pc, #432]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f0      	bne.n	800b270 <HAL_RCC_OscConfig+0xe8>
 800b28e:	e000      	b.n	800b292 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d075      	beq.n	800b38a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b29e:	4b65      	ldr	r3, [pc, #404]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 030c 	and.w	r3, r3, #12
 800b2a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2a8:	4b62      	ldr	r3, [pc, #392]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b0c      	cmp	r3, #12
 800b2b6:	d102      	bne.n	800b2be <HAL_RCC_OscConfig+0x136>
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d002      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x13c>
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d11f      	bne.n	800b304 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2c4:	4b5b      	ldr	r3, [pc, #364]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <HAL_RCC_OscConfig+0x154>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e267      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2dc:	4b55      	ldr	r3, [pc, #340]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	061b      	lsls	r3, r3, #24
 800b2ea:	4952      	ldr	r1, [pc, #328]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b2f0:	4b51      	ldr	r3, [pc, #324]	; (800b438 <HAL_RCC_OscConfig+0x2b0>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fd f84d 	bl	8008394 <HAL_InitTick>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d043      	beq.n	800b388 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e253      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d023      	beq.n	800b354 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b30c:	4b49      	ldr	r3, [pc, #292]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a48      	ldr	r2, [pc, #288]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b318:	f7fd f888 	bl	800842c <HAL_GetTick>
 800b31c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b31e:	e008      	b.n	800b332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b320:	f7fd f884 	bl	800842c <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e23c      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b332:	4b40      	ldr	r3, [pc, #256]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f0      	beq.n	800b320 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b33e:	4b3d      	ldr	r3, [pc, #244]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	061b      	lsls	r3, r3, #24
 800b34c:	4939      	ldr	r1, [pc, #228]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	604b      	str	r3, [r1, #4]
 800b352:	e01a      	b.n	800b38a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b354:	4b37      	ldr	r3, [pc, #220]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a36      	ldr	r2, [pc, #216]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b35a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b35e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7fd f864 	bl	800842c <HAL_GetTick>
 800b364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b366:	e008      	b.n	800b37a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b368:	f7fd f860 	bl	800842c <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	2b02      	cmp	r3, #2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e218      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b37a:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f0      	bne.n	800b368 <HAL_RCC_OscConfig+0x1e0>
 800b386:	e000      	b.n	800b38a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d03c      	beq.n	800b410 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d01c      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b39e:	4b25      	ldr	r3, [pc, #148]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3a4:	4a23      	ldr	r2, [pc, #140]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b3a6:	f043 0301 	orr.w	r3, r3, #1
 800b3aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ae:	f7fd f83d 	bl	800842c <HAL_GetTick>
 800b3b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3b4:	e008      	b.n	800b3c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3b6:	f7fd f839 	bl	800842c <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d901      	bls.n	800b3c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e1f1      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b3ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0ef      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x22e>
 800b3d6:	e01b      	b.n	800b410 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3d8:	4b16      	ldr	r3, [pc, #88]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3de:	4a15      	ldr	r2, [pc, #84]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e8:	f7fd f820 	bl	800842c <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b3ee:	e008      	b.n	800b402 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3f0:	f7fd f81c 	bl	800842c <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e1d4      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b402:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b408:	f003 0302 	and.w	r3, r3, #2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1ef      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80ab 	beq.w	800b574 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b41e:	2300      	movs	r3, #0
 800b420:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b422:	4b04      	ldr	r3, [pc, #16]	; (800b434 <HAL_RCC_OscConfig+0x2ac>)
 800b424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <HAL_RCC_OscConfig+0x2b4>
 800b42e:	2301      	movs	r3, #1
 800b430:	e005      	b.n	800b43e <HAL_RCC_OscConfig+0x2b6>
 800b432:	bf00      	nop
 800b434:	40021000 	.word	0x40021000
 800b438:	20000c34 	.word	0x20000c34
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00d      	beq.n	800b45e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b442:	4baf      	ldr	r3, [pc, #700]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b446:	4aae      	ldr	r2, [pc, #696]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b44c:	6593      	str	r3, [r2, #88]	; 0x58
 800b44e:	4bac      	ldr	r3, [pc, #688]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b45a:	2301      	movs	r3, #1
 800b45c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b45e:	4ba9      	ldr	r3, [pc, #676]	; (800b704 <HAL_RCC_OscConfig+0x57c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d118      	bne.n	800b49c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b46a:	4ba6      	ldr	r3, [pc, #664]	; (800b704 <HAL_RCC_OscConfig+0x57c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4aa5      	ldr	r2, [pc, #660]	; (800b704 <HAL_RCC_OscConfig+0x57c>)
 800b470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b476:	f7fc ffd9 	bl	800842c <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b47c:	e008      	b.n	800b490 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b47e:	f7fc ffd5 	bl	800842c <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d901      	bls.n	800b490 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e18d      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b490:	4b9c      	ldr	r3, [pc, #624]	; (800b704 <HAL_RCC_OscConfig+0x57c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d108      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x32e>
 800b4a4:	4b96      	ldr	r3, [pc, #600]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4aa:	4a95      	ldr	r2, [pc, #596]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4ac:	f043 0301 	orr.w	r3, r3, #1
 800b4b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4b4:	e024      	b.n	800b500 <HAL_RCC_OscConfig+0x378>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	2b05      	cmp	r3, #5
 800b4bc:	d110      	bne.n	800b4e0 <HAL_RCC_OscConfig+0x358>
 800b4be:	4b90      	ldr	r3, [pc, #576]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c4:	4a8e      	ldr	r2, [pc, #568]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4c6:	f043 0304 	orr.w	r3, r3, #4
 800b4ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4ce:	4b8c      	ldr	r3, [pc, #560]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d4:	4a8a      	ldr	r2, [pc, #552]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4d6:	f043 0301 	orr.w	r3, r3, #1
 800b4da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4de:	e00f      	b.n	800b500 <HAL_RCC_OscConfig+0x378>
 800b4e0:	4b87      	ldr	r3, [pc, #540]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e6:	4a86      	ldr	r2, [pc, #536]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4f0:	4b83      	ldr	r3, [pc, #524]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f6:	4a82      	ldr	r2, [pc, #520]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b4f8:	f023 0304 	bic.w	r3, r3, #4
 800b4fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d016      	beq.n	800b536 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b508:	f7fc ff90 	bl	800842c <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b50e:	e00a      	b.n	800b526 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b510:	f7fc ff8c 	bl	800842c <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b51e:	4293      	cmp	r3, r2
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e142      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b526:	4b76      	ldr	r3, [pc, #472]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0ed      	beq.n	800b510 <HAL_RCC_OscConfig+0x388>
 800b534:	e015      	b.n	800b562 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b536:	f7fc ff79 	bl	800842c <HAL_GetTick>
 800b53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b53c:	e00a      	b.n	800b554 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b53e:	f7fc ff75 	bl	800842c <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d901      	bls.n	800b554 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e12b      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b554:	4b6a      	ldr	r3, [pc, #424]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1ed      	bne.n	800b53e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d105      	bne.n	800b574 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b568:	4b65      	ldr	r3, [pc, #404]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	4a64      	ldr	r2, [pc, #400]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b56e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0320 	and.w	r3, r3, #32
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d03c      	beq.n	800b5fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01c      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b588:	4b5d      	ldr	r3, [pc, #372]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b58a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b58e:	4a5c      	ldr	r2, [pc, #368]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b590:	f043 0301 	orr.w	r3, r3, #1
 800b594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b598:	f7fc ff48 	bl	800842c <HAL_GetTick>
 800b59c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b59e:	e008      	b.n	800b5b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5a0:	f7fc ff44 	bl	800842c <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d901      	bls.n	800b5b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e0fc      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5b2:	4b53      	ldr	r3, [pc, #332]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b5b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0ef      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x418>
 800b5c0:	e01b      	b.n	800b5fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b5c2:	4b4f      	ldr	r3, [pc, #316]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b5c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5c8:	4a4d      	ldr	r2, [pc, #308]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b5ca:	f023 0301 	bic.w	r3, r3, #1
 800b5ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d2:	f7fc ff2b 	bl	800842c <HAL_GetTick>
 800b5d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5d8:	e008      	b.n	800b5ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5da:	f7fc ff27 	bl	800842c <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d901      	bls.n	800b5ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e0df      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b5ec:	4b44      	ldr	r3, [pc, #272]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b5ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1ef      	bne.n	800b5da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80d3 	beq.w	800b7aa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b604:	4b3e      	ldr	r3, [pc, #248]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f003 030c 	and.w	r3, r3, #12
 800b60c:	2b0c      	cmp	r3, #12
 800b60e:	f000 808d 	beq.w	800b72c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d15a      	bne.n	800b6d0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b61a:	4b39      	ldr	r3, [pc, #228]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a38      	ldr	r2, [pc, #224]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b626:	f7fc ff01 	bl	800842c <HAL_GetTick>
 800b62a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b62c:	e008      	b.n	800b640 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b62e:	f7fc fefd 	bl	800842c <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d901      	bls.n	800b640 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e0b5      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b640:	4b2f      	ldr	r3, [pc, #188]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f0      	bne.n	800b62e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b64c:	4b2c      	ldr	r3, [pc, #176]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	4b2d      	ldr	r3, [pc, #180]	; (800b708 <HAL_RCC_OscConfig+0x580>)
 800b652:	4013      	ands	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6a11      	ldr	r1, [r2, #32]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b65c:	3a01      	subs	r2, #1
 800b65e:	0112      	lsls	r2, r2, #4
 800b660:	4311      	orrs	r1, r2
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b666:	0212      	lsls	r2, r2, #8
 800b668:	4311      	orrs	r1, r2
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b66e:	0852      	lsrs	r2, r2, #1
 800b670:	3a01      	subs	r2, #1
 800b672:	0552      	lsls	r2, r2, #21
 800b674:	4311      	orrs	r1, r2
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b67a:	0852      	lsrs	r2, r2, #1
 800b67c:	3a01      	subs	r2, #1
 800b67e:	0652      	lsls	r2, r2, #25
 800b680:	4311      	orrs	r1, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b686:	06d2      	lsls	r2, r2, #27
 800b688:	430a      	orrs	r2, r1
 800b68a:	491d      	ldr	r1, [pc, #116]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b690:	4b1b      	ldr	r3, [pc, #108]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a1a      	ldr	r2, [pc, #104]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b69a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b69c:	4b18      	ldr	r3, [pc, #96]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	4a17      	ldr	r2, [pc, #92]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a8:	f7fc fec0 	bl	800842c <HAL_GetTick>
 800b6ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6ae:	e008      	b.n	800b6c2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6b0:	f7fc febc 	bl	800842c <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d901      	bls.n	800b6c2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e074      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0f0      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x528>
 800b6ce:	e06c      	b.n	800b7aa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a0a      	ldr	r2, [pc, #40]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b6dc:	4b08      	ldr	r3, [pc, #32]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	4a07      	ldr	r2, [pc, #28]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6e2:	f023 0303 	bic.w	r3, r3, #3
 800b6e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4a04      	ldr	r2, [pc, #16]	; (800b700 <HAL_RCC_OscConfig+0x578>)
 800b6ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b6f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f8:	f7fc fe98 	bl	800842c <HAL_GetTick>
 800b6fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6fe:	e00e      	b.n	800b71e <HAL_RCC_OscConfig+0x596>
 800b700:	40021000 	.word	0x40021000
 800b704:	40007000 	.word	0x40007000
 800b708:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b70c:	f7fc fe8e 	bl	800842c <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b02      	cmp	r3, #2
 800b718:	d901      	bls.n	800b71e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e046      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b71e:	4b25      	ldr	r3, [pc, #148]	; (800b7b4 <HAL_RCC_OscConfig+0x62c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1f0      	bne.n	800b70c <HAL_RCC_OscConfig+0x584>
 800b72a:	e03e      	b.n	800b7aa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e039      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b738:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <HAL_RCC_OscConfig+0x62c>)
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f003 0203 	and.w	r2, r3, #3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d12c      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	3b01      	subs	r3, #1
 800b758:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d123      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b768:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d11b      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d113      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	085b      	lsrs	r3, r3, #1
 800b78a:	3b01      	subs	r3, #1
 800b78c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b78e:	429a      	cmp	r2, r3
 800b790:	d109      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d001      	beq.n	800b7aa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	40021000 	.word	0x40021000

0800b7b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d101      	bne.n	800b7d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e11e      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7d0:	4b91      	ldr	r3, [pc, #580]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 030f 	and.w	r3, r3, #15
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d910      	bls.n	800b800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7de:	4b8e      	ldr	r3, [pc, #568]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f023 020f 	bic.w	r2, r3, #15
 800b7e6:	498c      	ldr	r1, [pc, #560]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ee:	4b8a      	ldr	r3, [pc, #552]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d001      	beq.n	800b800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e106      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d073      	beq.n	800b8f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	2b03      	cmp	r3, #3
 800b812:	d129      	bne.n	800b868 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b814:	4b81      	ldr	r3, [pc, #516]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e0f4      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b824:	f000 f972 	bl	800bb0c <RCC_GetSysClockFreqFromPLLSource>
 800b828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	4a7c      	ldr	r2, [pc, #496]	; (800ba20 <HAL_RCC_ClockConfig+0x268>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d93f      	bls.n	800b8b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b832:	4b7a      	ldr	r3, [pc, #488]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b846:	2b00      	cmp	r3, #0
 800b848:	d033      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d12f      	bne.n	800b8b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b852:	4b72      	ldr	r3, [pc, #456]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b85a:	4a70      	ldr	r2, [pc, #448]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b860:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b862:	2380      	movs	r3, #128	; 0x80
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	e024      	b.n	800b8b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d107      	bne.n	800b880 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b870:	4b6a      	ldr	r3, [pc, #424]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d109      	bne.n	800b890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e0c6      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b880:	4b66      	ldr	r3, [pc, #408]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e0be      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b890:	f000 f8ce 	bl	800ba30 <HAL_RCC_GetSysClockFreq>
 800b894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	4a61      	ldr	r2, [pc, #388]	; (800ba20 <HAL_RCC_ClockConfig+0x268>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d909      	bls.n	800b8b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b89e:	4b5f      	ldr	r3, [pc, #380]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8a6:	4a5d      	ldr	r2, [pc, #372]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b8ae:	2380      	movs	r3, #128	; 0x80
 800b8b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8b2:	4b5a      	ldr	r3, [pc, #360]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f023 0203 	bic.w	r2, r3, #3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4957      	ldr	r1, [pc, #348]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c4:	f7fc fdb2 	bl	800842c <HAL_GetTick>
 800b8c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ca:	e00a      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8cc:	f7fc fdae 	bl	800842c <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d901      	bls.n	800b8e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e095      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8e2:	4b4e      	ldr	r3, [pc, #312]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	f003 020c 	and.w	r2, r3, #12
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d1eb      	bne.n	800b8cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0302 	and.w	r3, r3, #2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d023      	beq.n	800b948 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b90c:	4b43      	ldr	r3, [pc, #268]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	4a42      	ldr	r2, [pc, #264]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b916:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0308 	and.w	r3, r3, #8
 800b920:	2b00      	cmp	r3, #0
 800b922:	d007      	beq.n	800b934 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b924:	4b3d      	ldr	r3, [pc, #244]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b92c:	4a3b      	ldr	r2, [pc, #236]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b92e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b934:	4b39      	ldr	r3, [pc, #228]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	4936      	ldr	r1, [pc, #216]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b942:	4313      	orrs	r3, r2
 800b944:	608b      	str	r3, [r1, #8]
 800b946:	e008      	b.n	800b95a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b80      	cmp	r3, #128	; 0x80
 800b94c:	d105      	bne.n	800b95a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b94e:	4b33      	ldr	r3, [pc, #204]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	4a32      	ldr	r2, [pc, #200]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b958:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b95a:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 030f 	and.w	r3, r3, #15
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d21d      	bcs.n	800b9a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b968:	4b2b      	ldr	r3, [pc, #172]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f023 020f 	bic.w	r2, r3, #15
 800b970:	4929      	ldr	r1, [pc, #164]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	4313      	orrs	r3, r2
 800b976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b978:	f7fc fd58 	bl	800842c <HAL_GetTick>
 800b97c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b97e:	e00a      	b.n	800b996 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b980:	f7fc fd54 	bl	800842c <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b98e:	4293      	cmp	r3, r2
 800b990:	d901      	bls.n	800b996 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e03b      	b.n	800ba0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b996:	4b20      	ldr	r3, [pc, #128]	; (800ba18 <HAL_RCC_ClockConfig+0x260>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d1ed      	bne.n	800b980 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d008      	beq.n	800b9c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4917      	ldr	r1, [pc, #92]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0308 	and.w	r3, r3, #8
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d009      	beq.n	800b9e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	490f      	ldr	r1, [pc, #60]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b9e2:	f000 f825 	bl	800ba30 <HAL_RCC_GetSysClockFreq>
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <HAL_RCC_ClockConfig+0x264>)
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	091b      	lsrs	r3, r3, #4
 800b9ee:	f003 030f 	and.w	r3, r3, #15
 800b9f2:	4a0c      	ldr	r2, [pc, #48]	; (800ba24 <HAL_RCC_ClockConfig+0x26c>)
 800b9f4:	5cd3      	ldrb	r3, [r2, r3]
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	fa21 f303 	lsr.w	r3, r1, r3
 800b9fe:	4a0a      	ldr	r2, [pc, #40]	; (800ba28 <HAL_RCC_ClockConfig+0x270>)
 800ba00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ba02:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <HAL_RCC_ClockConfig+0x274>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fc fcc4 	bl	8008394 <HAL_InitTick>
 800ba0c:	4603      	mov	r3, r0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3718      	adds	r7, #24
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	40022000 	.word	0x40022000
 800ba1c:	40021000 	.word	0x40021000
 800ba20:	04c4b400 	.word	0x04c4b400
 800ba24:	080143c8 	.word	0x080143c8
 800ba28:	20000c30 	.word	0x20000c30
 800ba2c:	20000c34 	.word	0x20000c34

0800ba30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba36:	4b2c      	ldr	r3, [pc, #176]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f003 030c 	and.w	r3, r3, #12
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d102      	bne.n	800ba48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba42:	4b2a      	ldr	r3, [pc, #168]	; (800baec <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba44:	613b      	str	r3, [r7, #16]
 800ba46:	e047      	b.n	800bad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba48:	4b27      	ldr	r3, [pc, #156]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 030c 	and.w	r3, r3, #12
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d102      	bne.n	800ba5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba54:	4b26      	ldr	r3, [pc, #152]	; (800baf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	e03e      	b.n	800bad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ba5a:	4b23      	ldr	r3, [pc, #140]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f003 030c 	and.w	r3, r3, #12
 800ba62:	2b0c      	cmp	r3, #12
 800ba64:	d136      	bne.n	800bad4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba66:	4b20      	ldr	r3, [pc, #128]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba70:	4b1d      	ldr	r3, [pc, #116]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	091b      	lsrs	r3, r3, #4
 800ba76:	f003 030f 	and.w	r3, r3, #15
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d10c      	bne.n	800ba9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba84:	4a1a      	ldr	r2, [pc, #104]	; (800baf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8c:	4a16      	ldr	r2, [pc, #88]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba8e:	68d2      	ldr	r2, [r2, #12]
 800ba90:	0a12      	lsrs	r2, r2, #8
 800ba92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba96:	fb02 f303 	mul.w	r3, r2, r3
 800ba9a:	617b      	str	r3, [r7, #20]
      break;
 800ba9c:	e00c      	b.n	800bab8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba9e:	4a13      	ldr	r2, [pc, #76]	; (800baec <HAL_RCC_GetSysClockFreq+0xbc>)
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa6:	4a10      	ldr	r2, [pc, #64]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa8:	68d2      	ldr	r2, [r2, #12]
 800baaa:	0a12      	lsrs	r2, r2, #8
 800baac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bab0:	fb02 f303 	mul.w	r3, r2, r3
 800bab4:	617b      	str	r3, [r7, #20]
      break;
 800bab6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bab8:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	0e5b      	lsrs	r3, r3, #25
 800babe:	f003 0303 	and.w	r3, r3, #3
 800bac2:	3301      	adds	r3, #1
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad0:	613b      	str	r3, [r7, #16]
 800bad2:	e001      	b.n	800bad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bad8:	693b      	ldr	r3, [r7, #16]
}
 800bada:	4618      	mov	r0, r3
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	40021000 	.word	0x40021000
 800baec:	00f42400 	.word	0x00f42400
 800baf0:	007a1200 	.word	0x007a1200

0800baf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800baf8:	4b03      	ldr	r3, [pc, #12]	; (800bb08 <HAL_RCC_GetHCLKFreq+0x14>)
 800bafa:	681b      	ldr	r3, [r3, #0]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	20000c30 	.word	0x20000c30

0800bb0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb12:	4b1e      	ldr	r3, [pc, #120]	; (800bb8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb1c:	4b1b      	ldr	r3, [pc, #108]	; (800bb8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	091b      	lsrs	r3, r3, #4
 800bb22:	f003 030f 	and.w	r3, r3, #15
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d10c      	bne.n	800bb4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb30:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb38:	4a14      	ldr	r2, [pc, #80]	; (800bb8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb3a:	68d2      	ldr	r2, [r2, #12]
 800bb3c:	0a12      	lsrs	r2, r2, #8
 800bb3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb42:	fb02 f303 	mul.w	r3, r2, r3
 800bb46:	617b      	str	r3, [r7, #20]
    break;
 800bb48:	e00c      	b.n	800bb64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb4a:	4a12      	ldr	r2, [pc, #72]	; (800bb94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb52:	4a0e      	ldr	r2, [pc, #56]	; (800bb8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb54:	68d2      	ldr	r2, [r2, #12]
 800bb56:	0a12      	lsrs	r2, r2, #8
 800bb58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb5c:	fb02 f303 	mul.w	r3, r2, r3
 800bb60:	617b      	str	r3, [r7, #20]
    break;
 800bb62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb64:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	0e5b      	lsrs	r3, r3, #25
 800bb6a:	f003 0303 	and.w	r3, r3, #3
 800bb6e:	3301      	adds	r3, #1
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bb7e:	687b      	ldr	r3, [r7, #4]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	371c      	adds	r7, #28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	40021000 	.word	0x40021000
 800bb90:	007a1200 	.word	0x007a1200
 800bb94:	00f42400 	.word	0x00f42400

0800bb98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bba0:	2300      	movs	r3, #0
 800bba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bba4:	2300      	movs	r3, #0
 800bba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 8098 	beq.w	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbba:	4b43      	ldr	r3, [pc, #268]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10d      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbc6:	4b40      	ldr	r3, [pc, #256]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbca:	4a3f      	ldr	r2, [pc, #252]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbd0:	6593      	str	r3, [r2, #88]	; 0x58
 800bbd2:	4b3d      	ldr	r3, [pc, #244]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbda:	60bb      	str	r3, [r7, #8]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbe2:	4b3a      	ldr	r3, [pc, #232]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a39      	ldr	r2, [pc, #228]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bbe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbee:	f7fc fc1d 	bl	800842c <HAL_GetTick>
 800bbf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbf4:	e009      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbf6:	f7fc fc19 	bl	800842c <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d902      	bls.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	74fb      	strb	r3, [r7, #19]
        break;
 800bc08:	e005      	b.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc0a:	4b30      	ldr	r3, [pc, #192]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0ef      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc16:	7cfb      	ldrb	r3, [r7, #19]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d159      	bne.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc1c:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d01e      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d019      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc38:	4b23      	ldr	r3, [pc, #140]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc44:	4b20      	ldr	r3, [pc, #128]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4a:	4a1f      	ldr	r2, [pc, #124]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc54:	4b1c      	ldr	r3, [pc, #112]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5a:	4a1b      	ldr	r2, [pc, #108]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc64:	4a18      	ldr	r2, [pc, #96]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d016      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc76:	f7fc fbd9 	bl	800842c <HAL_GetTick>
 800bc7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc7c:	e00b      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc7e:	f7fc fbd5 	bl	800842c <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d902      	bls.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	74fb      	strb	r3, [r7, #19]
            break;
 800bc94:	e006      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0ec      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bca4:	7cfb      	ldrb	r3, [r7, #19]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcaa:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb8:	4903      	ldr	r1, [pc, #12]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bcc0:	e008      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcc2:	7cfb      	ldrb	r3, [r7, #19]
 800bcc4:	74bb      	strb	r3, [r7, #18]
 800bcc6:	e005      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bcc8:	40021000 	.word	0x40021000
 800bccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd0:	7cfb      	ldrb	r3, [r7, #19]
 800bcd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bcd4:	7c7b      	ldrb	r3, [r7, #17]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d105      	bne.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bcda:	4baf      	ldr	r3, [pc, #700]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcde:	4aae      	ldr	r2, [pc, #696]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bcf2:	4ba9      	ldr	r3, [pc, #676]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf8:	f023 0203 	bic.w	r2, r3, #3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	49a5      	ldr	r1, [pc, #660]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0302 	and.w	r3, r3, #2
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00a      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd14:	4ba0      	ldr	r3, [pc, #640]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1a:	f023 020c 	bic.w	r2, r3, #12
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	499d      	ldr	r1, [pc, #628]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0304 	and.w	r3, r3, #4
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd36:	4b98      	ldr	r3, [pc, #608]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	4994      	ldr	r1, [pc, #592]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0308 	and.w	r3, r3, #8
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00a      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd58:	4b8f      	ldr	r3, [pc, #572]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	498c      	ldr	r1, [pc, #560]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0310 	and.w	r3, r3, #16
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd7a:	4b87      	ldr	r3, [pc, #540]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	4983      	ldr	r1, [pc, #524]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0320 	and.w	r3, r3, #32
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd9c:	4b7e      	ldr	r3, [pc, #504]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	497b      	ldr	r1, [pc, #492]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdac:	4313      	orrs	r3, r2
 800bdae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdbe:	4b76      	ldr	r3, [pc, #472]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	4972      	ldr	r1, [pc, #456]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00a      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bde0:	4b6d      	ldr	r3, [pc, #436]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	496a      	ldr	r1, [pc, #424]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00a      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be02:	4b65      	ldr	r3, [pc, #404]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	4961      	ldr	r1, [pc, #388]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be12:	4313      	orrs	r3, r2
 800be14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00a      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be24:	4b5c      	ldr	r3, [pc, #368]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be2a:	f023 0203 	bic.w	r2, r3, #3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be32:	4959      	ldr	r1, [pc, #356]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be34:	4313      	orrs	r3, r2
 800be36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00a      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be46:	4b54      	ldr	r3, [pc, #336]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	4950      	ldr	r1, [pc, #320]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be56:	4313      	orrs	r3, r2
 800be58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be64:	2b00      	cmp	r3, #0
 800be66:	d015      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be68:	4b4b      	ldr	r3, [pc, #300]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	4948      	ldr	r1, [pc, #288]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be86:	d105      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be88:	4b43      	ldr	r3, [pc, #268]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	4a42      	ldr	r2, [pc, #264]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d015      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bea0:	4b3d      	ldr	r3, [pc, #244]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beae:	493a      	ldr	r1, [pc, #232]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bebe:	d105      	bne.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bec0:	4b35      	ldr	r3, [pc, #212]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	4a34      	ldr	r2, [pc, #208]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d015      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bed8:	4b2f      	ldr	r3, [pc, #188]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bede:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	492c      	ldr	r1, [pc, #176]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bef6:	d105      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef8:	4b27      	ldr	r3, [pc, #156]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	4a26      	ldr	r2, [pc, #152]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800befe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d015      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf10:	4b21      	ldr	r3, [pc, #132]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1e:	491e      	ldr	r1, [pc, #120]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf2e:	d105      	bne.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf30:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	4a18      	ldr	r2, [pc, #96]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d015      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf48:	4b13      	ldr	r3, [pc, #76]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	4910      	ldr	r1, [pc, #64]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf66:	d105      	bne.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf68:	4b0b      	ldr	r3, [pc, #44]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d018      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bf80:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	4902      	ldr	r1, [pc, #8]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bf96:	e001      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bf98:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfa4:	d105      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfa6:	4b21      	ldr	r3, [pc, #132]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfb0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d015      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bfbe:	4b1b      	ldr	r3, [pc, #108]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfcc:	4917      	ldr	r1, [pc, #92]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfdc:	d105      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	4a12      	ldr	r2, [pc, #72]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfe8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d015      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bff6:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c004:	4909      	ldr	r1, [pc, #36]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c014:	d105      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c016:	4b05      	ldr	r3, [pc, #20]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4a04      	ldr	r2, [pc, #16]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c01c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c020:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c022:	7cbb      	ldrb	r3, [r7, #18]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	40021000 	.word	0x40021000

0800c030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e084      	b.n	800c14c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7fb fbb3 	bl	80077c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2202      	movs	r2, #2
 800c066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c078:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c082:	d902      	bls.n	800c08a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	e002      	b.n	800c090 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c08a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c08e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c098:	d007      	beq.n	800c0aa <HAL_SPI_Init+0x7a>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0a2:	d002      	beq.n	800c0aa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10b      	bne.n	800c0ca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0ba:	d903      	bls.n	800c0c4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2202      	movs	r2, #2
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
 800c0c2:	e002      	b.n	800c0ca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0e8:	431a      	orrs	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	431a      	orrs	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	ea42 0103 	orr.w	r1, r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	430a      	orrs	r2, r1
 800c102:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	0c1b      	lsrs	r3, r3, #16
 800c10a:	f003 0204 	and.w	r2, r3, #4
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c118:	431a      	orrs	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	ea42 0103 	orr.w	r1, r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	430a      	orrs	r2, r1
 800c12a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	69da      	ldr	r2, [r3, #28]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c13a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e049      	b.n	800c1fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7fb fff0 	bl	8008160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3304      	adds	r3, #4
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f000 ff20 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b01      	cmp	r3, #1
 800c216:	d001      	beq.n	800c21c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	e019      	b.n	800c250 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <HAL_TIM_Base_Start+0x58>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b06      	cmp	r3, #6
 800c234:	d00b      	beq.n	800c24e <HAL_TIM_Base_Start+0x4a>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23c:	d007      	beq.n	800c24e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0201 	orr.w	r2, r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	00010007 	.word	0x00010007

0800c260 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6a1a      	ldr	r2, [r3, #32]
 800c26e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c272:	4013      	ands	r3, r2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10f      	bne.n	800c298 <HAL_TIM_Base_Stop+0x38>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6a1a      	ldr	r2, [r3, #32]
 800c27e:	f244 4344 	movw	r3, #17476	; 0x4444
 800c282:	4013      	ands	r3, r2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d107      	bne.n	800c298 <HAL_TIM_Base_Stop+0x38>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f022 0201 	bic.w	r2, r2, #1
 800c296:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
	...

0800c2b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d001      	beq.n	800c2c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e021      	b.n	800c30c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68da      	ldr	r2, [r3, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f042 0201 	orr.w	r2, r2, #1
 800c2de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <HAL_TIM_Base_Start_IT+0x68>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d00b      	beq.n	800c30a <HAL_TIM_Base_Start_IT+0x5a>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2f8:	d007      	beq.n	800c30a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f042 0201 	orr.w	r2, r2, #1
 800c308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	00010007 	.word	0x00010007

0800c31c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0201 	bic.w	r2, r2, #1
 800c332:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6a1a      	ldr	r2, [r3, #32]
 800c33a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c33e:	4013      	ands	r3, r2
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10f      	bne.n	800c364 <HAL_TIM_Base_Stop_IT+0x48>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6a1a      	ldr	r2, [r3, #32]
 800c34a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c34e:	4013      	ands	r3, r2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d107      	bne.n	800c364 <HAL_TIM_Base_Stop_IT+0x48>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f022 0201 	bic.w	r2, r2, #1
 800c362:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e049      	b.n	800c420 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f841 	bl	800c428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f000 fe0d 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <HAL_TIM_PWM_Start+0x24>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b01      	cmp	r3, #1
 800c456:	bf14      	ite	ne
 800c458:	2301      	movne	r3, #1
 800c45a:	2300      	moveq	r3, #0
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	e03c      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b04      	cmp	r3, #4
 800c464:	d109      	bne.n	800c47a <HAL_TIM_PWM_Start+0x3e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b01      	cmp	r3, #1
 800c470:	bf14      	ite	ne
 800c472:	2301      	movne	r3, #1
 800c474:	2300      	moveq	r3, #0
 800c476:	b2db      	uxtb	r3, r3
 800c478:	e02f      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d109      	bne.n	800c494 <HAL_TIM_PWM_Start+0x58>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b01      	cmp	r3, #1
 800c48a:	bf14      	ite	ne
 800c48c:	2301      	movne	r3, #1
 800c48e:	2300      	moveq	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	e022      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b0c      	cmp	r3, #12
 800c498:	d109      	bne.n	800c4ae <HAL_TIM_PWM_Start+0x72>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	bf14      	ite	ne
 800c4a6:	2301      	movne	r3, #1
 800c4a8:	2300      	moveq	r3, #0
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	e015      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d109      	bne.n	800c4c8 <HAL_TIM_PWM_Start+0x8c>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	bf14      	ite	ne
 800c4c0:	2301      	movne	r3, #1
 800c4c2:	2300      	moveq	r3, #0
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	e008      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	bf14      	ite	ne
 800c4d4:	2301      	movne	r3, #1
 800c4d6:	2300      	moveq	r3, #0
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e073      	b.n	800c5ca <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <HAL_TIM_PWM_Start+0xb6>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4f0:	e023      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d104      	bne.n	800c502 <HAL_TIM_PWM_Start+0xc6>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c500:	e01b      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b08      	cmp	r3, #8
 800c506:	d104      	bne.n	800c512 <HAL_TIM_PWM_Start+0xd6>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2202      	movs	r2, #2
 800c50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c510:	e013      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b0c      	cmp	r3, #12
 800c516:	d104      	bne.n	800c522 <HAL_TIM_PWM_Start+0xe6>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c520:	e00b      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b10      	cmp	r3, #16
 800c526:	d104      	bne.n	800c532 <HAL_TIM_PWM_Start+0xf6>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c530:	e003      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2202      	movs	r2, #2
 800c536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2201      	movs	r2, #1
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	f001 f9b6 	bl	800d8b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a21      	ldr	r2, [pc, #132]	; (800c5d4 <HAL_TIM_PWM_Start+0x198>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d018      	beq.n	800c584 <HAL_TIM_PWM_Start+0x148>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a20      	ldr	r2, [pc, #128]	; (800c5d8 <HAL_TIM_PWM_Start+0x19c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d013      	beq.n	800c584 <HAL_TIM_PWM_Start+0x148>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a1e      	ldr	r2, [pc, #120]	; (800c5dc <HAL_TIM_PWM_Start+0x1a0>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00e      	beq.n	800c584 <HAL_TIM_PWM_Start+0x148>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a1d      	ldr	r2, [pc, #116]	; (800c5e0 <HAL_TIM_PWM_Start+0x1a4>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d009      	beq.n	800c584 <HAL_TIM_PWM_Start+0x148>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a1b      	ldr	r2, [pc, #108]	; (800c5e4 <HAL_TIM_PWM_Start+0x1a8>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d004      	beq.n	800c584 <HAL_TIM_PWM_Start+0x148>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a1a      	ldr	r2, [pc, #104]	; (800c5e8 <HAL_TIM_PWM_Start+0x1ac>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d101      	bne.n	800c588 <HAL_TIM_PWM_Start+0x14c>
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <HAL_TIM_PWM_Start+0x14e>
 800c588:	2300      	movs	r3, #0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d007      	beq.n	800c59e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c59c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	4b11      	ldr	r3, [pc, #68]	; (800c5ec <HAL_TIM_PWM_Start+0x1b0>)
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b06      	cmp	r3, #6
 800c5ae:	d00b      	beq.n	800c5c8 <HAL_TIM_PWM_Start+0x18c>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b6:	d007      	beq.n	800c5c8 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f042 0201 	orr.w	r2, r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	40012c00 	.word	0x40012c00
 800c5d8:	40013400 	.word	0x40013400
 800c5dc:	40014000 	.word	0x40014000
 800c5e0:	40014400 	.word	0x40014400
 800c5e4:	40014800 	.word	0x40014800
 800c5e8:	40015000 	.word	0x40015000
 800c5ec:	00010007 	.word	0x00010007

0800c5f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2200      	movs	r2, #0
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f001 f956 	bl	800d8b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a40      	ldr	r2, [pc, #256]	; (800c710 <HAL_TIM_PWM_Stop+0x120>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d018      	beq.n	800c644 <HAL_TIM_PWM_Stop+0x54>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a3f      	ldr	r2, [pc, #252]	; (800c714 <HAL_TIM_PWM_Stop+0x124>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d013      	beq.n	800c644 <HAL_TIM_PWM_Stop+0x54>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a3d      	ldr	r2, [pc, #244]	; (800c718 <HAL_TIM_PWM_Stop+0x128>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d00e      	beq.n	800c644 <HAL_TIM_PWM_Stop+0x54>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a3c      	ldr	r2, [pc, #240]	; (800c71c <HAL_TIM_PWM_Stop+0x12c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d009      	beq.n	800c644 <HAL_TIM_PWM_Stop+0x54>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a3a      	ldr	r2, [pc, #232]	; (800c720 <HAL_TIM_PWM_Stop+0x130>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d004      	beq.n	800c644 <HAL_TIM_PWM_Stop+0x54>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a39      	ldr	r2, [pc, #228]	; (800c724 <HAL_TIM_PWM_Stop+0x134>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d101      	bne.n	800c648 <HAL_TIM_PWM_Stop+0x58>
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <HAL_TIM_PWM_Stop+0x5a>
 800c648:	2300      	movs	r3, #0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d017      	beq.n	800c67e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6a1a      	ldr	r2, [r3, #32]
 800c654:	f241 1311 	movw	r3, #4369	; 0x1111
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10f      	bne.n	800c67e <HAL_TIM_PWM_Stop+0x8e>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	6a1a      	ldr	r2, [r3, #32]
 800c664:	f244 4344 	movw	r3, #17476	; 0x4444
 800c668:	4013      	ands	r3, r2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d107      	bne.n	800c67e <HAL_TIM_PWM_Stop+0x8e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6a1a      	ldr	r2, [r3, #32]
 800c684:	f241 1311 	movw	r3, #4369	; 0x1111
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10f      	bne.n	800c6ae <HAL_TIM_PWM_Stop+0xbe>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6a1a      	ldr	r2, [r3, #32]
 800c694:	f244 4344 	movw	r3, #17476	; 0x4444
 800c698:	4013      	ands	r3, r2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d107      	bne.n	800c6ae <HAL_TIM_PWM_Stop+0xbe>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f022 0201 	bic.w	r2, r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d104      	bne.n	800c6be <HAL_TIM_PWM_Stop+0xce>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6bc:	e023      	b.n	800c706 <HAL_TIM_PWM_Stop+0x116>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d104      	bne.n	800c6ce <HAL_TIM_PWM_Stop+0xde>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6cc:	e01b      	b.n	800c706 <HAL_TIM_PWM_Stop+0x116>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d104      	bne.n	800c6de <HAL_TIM_PWM_Stop+0xee>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6dc:	e013      	b.n	800c706 <HAL_TIM_PWM_Stop+0x116>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b0c      	cmp	r3, #12
 800c6e2:	d104      	bne.n	800c6ee <HAL_TIM_PWM_Stop+0xfe>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ec:	e00b      	b.n	800c706 <HAL_TIM_PWM_Stop+0x116>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b10      	cmp	r3, #16
 800c6f2:	d104      	bne.n	800c6fe <HAL_TIM_PWM_Stop+0x10e>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6fc:	e003      	b.n	800c706 <HAL_TIM_PWM_Stop+0x116>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	40012c00 	.word	0x40012c00
 800c714:	40013400 	.word	0x40013400
 800c718:	40014000 	.word	0x40014000
 800c71c:	40014400 	.word	0x40014400
 800c720:	40014800 	.word	0x40014800
 800c724:	40015000 	.word	0x40015000

0800c728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e097      	b.n	800c86c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d106      	bne.n	800c756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7fb fcb1 	bl	80080b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2202      	movs	r2, #2
 800c75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	6812      	ldr	r2, [r2, #0]
 800c768:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c76c:	f023 0307 	bic.w	r3, r3, #7
 800c770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3304      	adds	r3, #4
 800c77a:	4619      	mov	r1, r3
 800c77c:	4610      	mov	r0, r2
 800c77e:	f000 fc2b 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7aa:	f023 0303 	bic.w	r3, r3, #3
 800c7ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	689a      	ldr	r2, [r3, #8]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	021b      	lsls	r3, r3, #8
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c7c8:	f023 030c 	bic.w	r3, r3, #12
 800c7cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	68da      	ldr	r2, [r3, #12]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	011a      	lsls	r2, r3, #4
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	031b      	lsls	r3, r3, #12
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c80e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	011b      	lsls	r3, r3, #4
 800c81a:	4313      	orrs	r3, r2
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b02      	cmp	r3, #2
 800c888:	d122      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	f003 0302 	and.w	r3, r3, #2
 800c894:	2b02      	cmp	r3, #2
 800c896:	d11b      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f06f 0202 	mvn.w	r2, #2
 800c8a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fb70 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800c8bc:	e005      	b.n	800c8ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fb62 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fb73 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	f003 0304 	and.w	r3, r3, #4
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	d122      	bne.n	800c924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f003 0304 	and.w	r3, r3, #4
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	d11b      	bne.n	800c924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f06f 0204 	mvn.w	r2, #4
 800c8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fb46 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800c910:	e005      	b.n	800c91e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fb38 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fb49 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	f003 0308 	and.w	r3, r3, #8
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d122      	bne.n	800c978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	f003 0308 	and.w	r3, r3, #8
 800c93c:	2b08      	cmp	r3, #8
 800c93e:	d11b      	bne.n	800c978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f06f 0208 	mvn.w	r2, #8
 800c948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2204      	movs	r2, #4
 800c94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	69db      	ldr	r3, [r3, #28]
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fb1c 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800c964:	e005      	b.n	800c972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fb0e 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fb1f 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	f003 0310 	and.w	r3, r3, #16
 800c982:	2b10      	cmp	r3, #16
 800c984:	d122      	bne.n	800c9cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	2b10      	cmp	r3, #16
 800c992:	d11b      	bne.n	800c9cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f06f 0210 	mvn.w	r2, #16
 800c99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2208      	movs	r2, #8
 800c9a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d003      	beq.n	800c9ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 faf2 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800c9b8:	e005      	b.n	800c9c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fae4 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 faf5 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d10e      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d107      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f06f 0201 	mvn.w	r2, #1
 800c9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fabe 	bl	800cf74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca02:	2b80      	cmp	r3, #128	; 0x80
 800ca04:	d10e      	bne.n	800ca24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca10:	2b80      	cmp	r3, #128	; 0x80
 800ca12:	d107      	bne.n	800ca24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f8c0 	bl	800dba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca32:	d10e      	bne.n	800ca52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3e:	2b80      	cmp	r3, #128	; 0x80
 800ca40:	d107      	bne.n	800ca52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f8b3 	bl	800dbb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5c:	2b40      	cmp	r3, #64	; 0x40
 800ca5e:	d10e      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6a:	2b40      	cmp	r3, #64	; 0x40
 800ca6c:	d107      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 faa3 	bl	800cfc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	f003 0320 	and.w	r3, r3, #32
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d10e      	bne.n	800caaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f003 0320 	and.w	r3, r3, #32
 800ca96:	2b20      	cmp	r3, #32
 800ca98:	d107      	bne.n	800caaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f06f 0220 	mvn.w	r2, #32
 800caa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f001 f873 	bl	800db90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cab8:	d10f      	bne.n	800cada <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cac8:	d107      	bne.n	800cada <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f001 f879 	bl	800dbcc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cae8:	d10f      	bne.n	800cb0a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caf8:	d107      	bne.n	800cb0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cb02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 f86b 	bl	800dbe0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb18:	d10f      	bne.n	800cb3a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb28:	d107      	bne.n	800cb3a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cb32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f001 f85d 	bl	800dbf4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb48:	d10f      	bne.n	800cb6a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb58:	d107      	bne.n	800cb6a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cb62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 f84f 	bl	800dc08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d101      	bne.n	800cb8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	e0fd      	b.n	800cd8a <HAL_TIM_PWM_ConfigChannel+0x216>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b14      	cmp	r3, #20
 800cb9a:	f200 80f0 	bhi.w	800cd7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800cb9e:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cbf9 	.word	0x0800cbf9
 800cba8:	0800cd7f 	.word	0x0800cd7f
 800cbac:	0800cd7f 	.word	0x0800cd7f
 800cbb0:	0800cd7f 	.word	0x0800cd7f
 800cbb4:	0800cc39 	.word	0x0800cc39
 800cbb8:	0800cd7f 	.word	0x0800cd7f
 800cbbc:	0800cd7f 	.word	0x0800cd7f
 800cbc0:	0800cd7f 	.word	0x0800cd7f
 800cbc4:	0800cc7b 	.word	0x0800cc7b
 800cbc8:	0800cd7f 	.word	0x0800cd7f
 800cbcc:	0800cd7f 	.word	0x0800cd7f
 800cbd0:	0800cd7f 	.word	0x0800cd7f
 800cbd4:	0800ccbb 	.word	0x0800ccbb
 800cbd8:	0800cd7f 	.word	0x0800cd7f
 800cbdc:	0800cd7f 	.word	0x0800cd7f
 800cbe0:	0800cd7f 	.word	0x0800cd7f
 800cbe4:	0800ccfd 	.word	0x0800ccfd
 800cbe8:	0800cd7f 	.word	0x0800cd7f
 800cbec:	0800cd7f 	.word	0x0800cd7f
 800cbf0:	0800cd7f 	.word	0x0800cd7f
 800cbf4:	0800cd3d 	.word	0x0800cd3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fa92 	bl	800d128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0208 	orr.w	r2, r2, #8
 800cc12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	699a      	ldr	r2, [r3, #24]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 0204 	bic.w	r2, r2, #4
 800cc22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6999      	ldr	r1, [r3, #24]
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	691a      	ldr	r2, [r3, #16]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	430a      	orrs	r2, r1
 800cc34:	619a      	str	r2, [r3, #24]
      break;
 800cc36:	e0a3      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68b9      	ldr	r1, [r7, #8]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fb0c 	bl	800d25c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	699a      	ldr	r2, [r3, #24]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	699a      	ldr	r2, [r3, #24]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6999      	ldr	r1, [r3, #24]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	021a      	lsls	r2, r3, #8
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	430a      	orrs	r2, r1
 800cc76:	619a      	str	r2, [r3, #24]
      break;
 800cc78:	e082      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fb7f 	bl	800d384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	69da      	ldr	r2, [r3, #28]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f042 0208 	orr.w	r2, r2, #8
 800cc94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	69da      	ldr	r2, [r3, #28]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f022 0204 	bic.w	r2, r2, #4
 800cca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	69d9      	ldr	r1, [r3, #28]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	691a      	ldr	r2, [r3, #16]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	61da      	str	r2, [r3, #28]
      break;
 800ccb8:	e062      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 fbf1 	bl	800d4a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	69da      	ldr	r2, [r3, #28]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	69da      	ldr	r2, [r3, #28]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69d9      	ldr	r1, [r3, #28]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	021a      	lsls	r2, r3, #8
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	61da      	str	r2, [r3, #28]
      break;
 800ccfa:	e041      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68b9      	ldr	r1, [r7, #8]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fc64 	bl	800d5d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f042 0208 	orr.w	r2, r2, #8
 800cd16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f022 0204 	bic.w	r2, r2, #4
 800cd26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	691a      	ldr	r2, [r3, #16]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cd3a:	e021      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68b9      	ldr	r1, [r7, #8]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 fcae 	bl	800d6a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	021a      	lsls	r2, r3, #8
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cd7c:	e000      	b.n	800cd80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800cd7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop

0800cd94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_TIM_ConfigClockSource+0x18>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e0d2      	b.n	800cf52 <HAL_TIM_ConfigClockSource+0x1be>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cdca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde8:	f000 80a9 	beq.w	800cf3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cdec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf0:	d81a      	bhi.n	800ce28 <HAL_TIM_ConfigClockSource+0x94>
 800cdf2:	2b30      	cmp	r3, #48	; 0x30
 800cdf4:	f000 809a 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800cdf8:	2b30      	cmp	r3, #48	; 0x30
 800cdfa:	d809      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x7c>
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	f000 8095 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce02:	2b20      	cmp	r3, #32
 800ce04:	f000 8092 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 808f 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ce0e:	e097      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce10:	2b50      	cmp	r3, #80	; 0x50
 800ce12:	d05b      	beq.n	800cecc <HAL_TIM_ConfigClockSource+0x138>
 800ce14:	2b50      	cmp	r3, #80	; 0x50
 800ce16:	d802      	bhi.n	800ce1e <HAL_TIM_ConfigClockSource+0x8a>
 800ce18:	2b40      	cmp	r3, #64	; 0x40
 800ce1a:	d077      	beq.n	800cf0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ce1c:	e090      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce1e:	2b60      	cmp	r3, #96	; 0x60
 800ce20:	d064      	beq.n	800ceec <HAL_TIM_ConfigClockSource+0x158>
 800ce22:	2b70      	cmp	r3, #112	; 0x70
 800ce24:	d028      	beq.n	800ce78 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ce26:	e08b      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce28:	4a4c      	ldr	r2, [pc, #304]	; (800cf5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d07e      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce2e:	4a4b      	ldr	r2, [pc, #300]	; (800cf5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d810      	bhi.n	800ce56 <HAL_TIM_ConfigClockSource+0xc2>
 800ce34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce38:	d078      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce3e:	d803      	bhi.n	800ce48 <HAL_TIM_ConfigClockSource+0xb4>
 800ce40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce44:	d02f      	beq.n	800cea6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ce46:	e07b      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce4c:	d06e      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce4e:	4a44      	ldr	r2, [pc, #272]	; (800cf60 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d06b      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce54:	e074      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce56:	4a43      	ldr	r2, [pc, #268]	; (800cf64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d067      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce5c:	4a41      	ldr	r2, [pc, #260]	; (800cf64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d803      	bhi.n	800ce6a <HAL_TIM_ConfigClockSource+0xd6>
 800ce62:	4a41      	ldr	r2, [pc, #260]	; (800cf68 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d061      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce68:	e06a      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce6a:	4a40      	ldr	r2, [pc, #256]	; (800cf6c <HAL_TIM_ConfigClockSource+0x1d8>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d05d      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce70:	4a3f      	ldr	r2, [pc, #252]	; (800cf70 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d05a      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce76:	e063      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6818      	ldr	r0, [r3, #0]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6899      	ldr	r1, [r3, #8]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f000 fcf4 	bl	800d874 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
      break;
 800cea4:	e04c      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	6899      	ldr	r1, [r3, #8]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	f000 fcdd 	bl	800d874 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689a      	ldr	r2, [r3, #8]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cec8:	609a      	str	r2, [r3, #8]
      break;
 800ceca:	e039      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6818      	ldr	r0, [r3, #0]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6859      	ldr	r1, [r3, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	461a      	mov	r2, r3
 800ceda:	f000 fc4f 	bl	800d77c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2150      	movs	r1, #80	; 0x50
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fca8 	bl	800d83a <TIM_ITRx_SetConfig>
      break;
 800ceea:	e029      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6859      	ldr	r1, [r3, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	461a      	mov	r2, r3
 800cefa:	f000 fc6e 	bl	800d7da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2160      	movs	r1, #96	; 0x60
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 fc98 	bl	800d83a <TIM_ITRx_SetConfig>
      break;
 800cf0a:	e019      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6818      	ldr	r0, [r3, #0]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	6859      	ldr	r1, [r3, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	f000 fc2f 	bl	800d77c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2140      	movs	r1, #64	; 0x40
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fc88 	bl	800d83a <TIM_ITRx_SetConfig>
      break;
 800cf2a:	e009      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f000 fc7f 	bl	800d83a <TIM_ITRx_SetConfig>
      break;
 800cf3c:	e000      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cf3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	00100030 	.word	0x00100030
 800cf60:	00100020 	.word	0x00100020
 800cf64:	00100050 	.word	0x00100050
 800cf68:	00100040 	.word	0x00100040
 800cf6c:	00100060 	.word	0x00100060
 800cf70:	00100070 	.word	0x00100070

0800cf74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a46      	ldr	r2, [pc, #280]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d017      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff6:	d013      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a43      	ldr	r2, [pc, #268]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00f      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a42      	ldr	r2, [pc, #264]	; (800d10c <TIM_Base_SetConfig+0x134>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a41      	ldr	r2, [pc, #260]	; (800d110 <TIM_Base_SetConfig+0x138>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a40      	ldr	r2, [pc, #256]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a3f      	ldr	r2, [pc, #252]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a33      	ldr	r2, [pc, #204]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d023      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d040:	d01f      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a30      	ldr	r2, [pc, #192]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d01b      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a2f      	ldr	r2, [pc, #188]	; (800d10c <TIM_Base_SetConfig+0x134>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d017      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a2e      	ldr	r2, [pc, #184]	; (800d110 <TIM_Base_SetConfig+0x138>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d013      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a2d      	ldr	r2, [pc, #180]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d00f      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a2d      	ldr	r2, [pc, #180]	; (800d11c <TIM_Base_SetConfig+0x144>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d00b      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a2c      	ldr	r2, [pc, #176]	; (800d120 <TIM_Base_SetConfig+0x148>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d007      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a2b      	ldr	r2, [pc, #172]	; (800d124 <TIM_Base_SetConfig+0x14c>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d003      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a26      	ldr	r2, [pc, #152]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d108      	bne.n	800d094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	4313      	orrs	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a12      	ldr	r2, [pc, #72]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d013      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a14      	ldr	r2, [pc, #80]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00f      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a14      	ldr	r2, [pc, #80]	; (800d11c <TIM_Base_SetConfig+0x144>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d00b      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a13      	ldr	r2, [pc, #76]	; (800d120 <TIM_Base_SetConfig+0x148>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d007      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a12      	ldr	r2, [pc, #72]	; (800d124 <TIM_Base_SetConfig+0x14c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d003      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a0d      	ldr	r2, [pc, #52]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d103      	bne.n	800d0f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	691a      	ldr	r2, [r3, #16]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	615a      	str	r2, [r3, #20]
}
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	40012c00 	.word	0x40012c00
 800d108:	40000400 	.word	0x40000400
 800d10c:	40000800 	.word	0x40000800
 800d110:	40000c00 	.word	0x40000c00
 800d114:	40013400 	.word	0x40013400
 800d118:	40015000 	.word	0x40015000
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800

0800d128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f023 0201 	bic.w	r2, r3, #1
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f023 0303 	bic.w	r3, r3, #3
 800d162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f023 0302 	bic.w	r3, r3, #2
 800d174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a30      	ldr	r2, [pc, #192]	; (800d244 <TIM_OC1_SetConfig+0x11c>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d013      	beq.n	800d1b0 <TIM_OC1_SetConfig+0x88>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a2f      	ldr	r2, [pc, #188]	; (800d248 <TIM_OC1_SetConfig+0x120>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d00f      	beq.n	800d1b0 <TIM_OC1_SetConfig+0x88>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a2e      	ldr	r2, [pc, #184]	; (800d24c <TIM_OC1_SetConfig+0x124>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d00b      	beq.n	800d1b0 <TIM_OC1_SetConfig+0x88>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a2d      	ldr	r2, [pc, #180]	; (800d250 <TIM_OC1_SetConfig+0x128>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d007      	beq.n	800d1b0 <TIM_OC1_SetConfig+0x88>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a2c      	ldr	r2, [pc, #176]	; (800d254 <TIM_OC1_SetConfig+0x12c>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d003      	beq.n	800d1b0 <TIM_OC1_SetConfig+0x88>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a2b      	ldr	r2, [pc, #172]	; (800d258 <TIM_OC1_SetConfig+0x130>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d10c      	bne.n	800d1ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f023 0308 	bic.w	r3, r3, #8
 800d1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	697a      	ldr	r2, [r7, #20]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f023 0304 	bic.w	r3, r3, #4
 800d1c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <TIM_OC1_SetConfig+0x11c>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d013      	beq.n	800d1fa <TIM_OC1_SetConfig+0xd2>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	4a1c      	ldr	r2, [pc, #112]	; (800d248 <TIM_OC1_SetConfig+0x120>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d00f      	beq.n	800d1fa <TIM_OC1_SetConfig+0xd2>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a1b      	ldr	r2, [pc, #108]	; (800d24c <TIM_OC1_SetConfig+0x124>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d00b      	beq.n	800d1fa <TIM_OC1_SetConfig+0xd2>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a1a      	ldr	r2, [pc, #104]	; (800d250 <TIM_OC1_SetConfig+0x128>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d007      	beq.n	800d1fa <TIM_OC1_SetConfig+0xd2>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4a19      	ldr	r2, [pc, #100]	; (800d254 <TIM_OC1_SetConfig+0x12c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d003      	beq.n	800d1fa <TIM_OC1_SetConfig+0xd2>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4a18      	ldr	r2, [pc, #96]	; (800d258 <TIM_OC1_SetConfig+0x130>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d111      	bne.n	800d21e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	4313      	orrs	r3, r2
 800d212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	685a      	ldr	r2, [r3, #4]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	621a      	str	r2, [r3, #32]
}
 800d238:	bf00      	nop
 800d23a:	371c      	adds	r7, #28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	40012c00 	.word	0x40012c00
 800d248:	40013400 	.word	0x40013400
 800d24c:	40014000 	.word	0x40014000
 800d250:	40014400 	.word	0x40014400
 800d254:	40014800 	.word	0x40014800
 800d258:	40015000 	.word	0x40015000

0800d25c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	f023 0210 	bic.w	r2, r3, #16
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	021b      	lsls	r3, r3, #8
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f023 0320 	bic.w	r3, r3, #32
 800d2aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	011b      	lsls	r3, r3, #4
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a2c      	ldr	r2, [pc, #176]	; (800d36c <TIM_OC2_SetConfig+0x110>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d007      	beq.n	800d2d0 <TIM_OC2_SetConfig+0x74>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a2b      	ldr	r2, [pc, #172]	; (800d370 <TIM_OC2_SetConfig+0x114>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d003      	beq.n	800d2d0 <TIM_OC2_SetConfig+0x74>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4a2a      	ldr	r2, [pc, #168]	; (800d374 <TIM_OC2_SetConfig+0x118>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d10d      	bne.n	800d2ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	011b      	lsls	r3, r3, #4
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a1f      	ldr	r2, [pc, #124]	; (800d36c <TIM_OC2_SetConfig+0x110>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d013      	beq.n	800d31c <TIM_OC2_SetConfig+0xc0>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a1e      	ldr	r2, [pc, #120]	; (800d370 <TIM_OC2_SetConfig+0x114>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d00f      	beq.n	800d31c <TIM_OC2_SetConfig+0xc0>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a1e      	ldr	r2, [pc, #120]	; (800d378 <TIM_OC2_SetConfig+0x11c>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d00b      	beq.n	800d31c <TIM_OC2_SetConfig+0xc0>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a1d      	ldr	r2, [pc, #116]	; (800d37c <TIM_OC2_SetConfig+0x120>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d007      	beq.n	800d31c <TIM_OC2_SetConfig+0xc0>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a1c      	ldr	r2, [pc, #112]	; (800d380 <TIM_OC2_SetConfig+0x124>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d003      	beq.n	800d31c <TIM_OC2_SetConfig+0xc0>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a17      	ldr	r2, [pc, #92]	; (800d374 <TIM_OC2_SetConfig+0x118>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d113      	bne.n	800d344 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d32a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	695b      	ldr	r3, [r3, #20]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	4313      	orrs	r3, r2
 800d336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	4313      	orrs	r3, r2
 800d342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	697a      	ldr	r2, [r7, #20]
 800d35c:	621a      	str	r2, [r3, #32]
}
 800d35e:	bf00      	nop
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	40012c00 	.word	0x40012c00
 800d370:	40013400 	.word	0x40013400
 800d374:	40015000 	.word	0x40015000
 800d378:	40014000 	.word	0x40014000
 800d37c:	40014400 	.word	0x40014400
 800d380:	40014800 	.word	0x40014800

0800d384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d384:	b480      	push	{r7}
 800d386:	b087      	sub	sp, #28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	69db      	ldr	r3, [r3, #28]
 800d3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f023 0303 	bic.w	r3, r3, #3
 800d3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a2b      	ldr	r2, [pc, #172]	; (800d490 <TIM_OC3_SetConfig+0x10c>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d007      	beq.n	800d3f6 <TIM_OC3_SetConfig+0x72>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a2a      	ldr	r2, [pc, #168]	; (800d494 <TIM_OC3_SetConfig+0x110>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d003      	beq.n	800d3f6 <TIM_OC3_SetConfig+0x72>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a29      	ldr	r2, [pc, #164]	; (800d498 <TIM_OC3_SetConfig+0x114>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d10d      	bne.n	800d412 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4313      	orrs	r3, r2
 800d408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a1e      	ldr	r2, [pc, #120]	; (800d490 <TIM_OC3_SetConfig+0x10c>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d013      	beq.n	800d442 <TIM_OC3_SetConfig+0xbe>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a1d      	ldr	r2, [pc, #116]	; (800d494 <TIM_OC3_SetConfig+0x110>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d00f      	beq.n	800d442 <TIM_OC3_SetConfig+0xbe>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1d      	ldr	r2, [pc, #116]	; (800d49c <TIM_OC3_SetConfig+0x118>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d00b      	beq.n	800d442 <TIM_OC3_SetConfig+0xbe>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a1c      	ldr	r2, [pc, #112]	; (800d4a0 <TIM_OC3_SetConfig+0x11c>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d007      	beq.n	800d442 <TIM_OC3_SetConfig+0xbe>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a1b      	ldr	r2, [pc, #108]	; (800d4a4 <TIM_OC3_SetConfig+0x120>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d003      	beq.n	800d442 <TIM_OC3_SetConfig+0xbe>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a16      	ldr	r2, [pc, #88]	; (800d498 <TIM_OC3_SetConfig+0x114>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d113      	bne.n	800d46a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	011b      	lsls	r3, r3, #4
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	4313      	orrs	r3, r2
 800d468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	697a      	ldr	r2, [r7, #20]
 800d482:	621a      	str	r2, [r3, #32]
}
 800d484:	bf00      	nop
 800d486:	371c      	adds	r7, #28
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	40012c00 	.word	0x40012c00
 800d494:	40013400 	.word	0x40013400
 800d498:	40015000 	.word	0x40015000
 800d49c:	40014000 	.word	0x40014000
 800d4a0:	40014400 	.word	0x40014400
 800d4a4:	40014800 	.word	0x40014800

0800d4a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	021b      	lsls	r3, r3, #8
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	031b      	lsls	r3, r3, #12
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	4313      	orrs	r3, r2
 800d502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a2c      	ldr	r2, [pc, #176]	; (800d5b8 <TIM_OC4_SetConfig+0x110>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d007      	beq.n	800d51c <TIM_OC4_SetConfig+0x74>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a2b      	ldr	r2, [pc, #172]	; (800d5bc <TIM_OC4_SetConfig+0x114>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d003      	beq.n	800d51c <TIM_OC4_SetConfig+0x74>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4a2a      	ldr	r2, [pc, #168]	; (800d5c0 <TIM_OC4_SetConfig+0x118>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d10d      	bne.n	800d538 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	031b      	lsls	r3, r3, #12
 800d52a:	697a      	ldr	r2, [r7, #20]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a1f      	ldr	r2, [pc, #124]	; (800d5b8 <TIM_OC4_SetConfig+0x110>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d013      	beq.n	800d568 <TIM_OC4_SetConfig+0xc0>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a1e      	ldr	r2, [pc, #120]	; (800d5bc <TIM_OC4_SetConfig+0x114>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d00f      	beq.n	800d568 <TIM_OC4_SetConfig+0xc0>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a1e      	ldr	r2, [pc, #120]	; (800d5c4 <TIM_OC4_SetConfig+0x11c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d00b      	beq.n	800d568 <TIM_OC4_SetConfig+0xc0>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a1d      	ldr	r2, [pc, #116]	; (800d5c8 <TIM_OC4_SetConfig+0x120>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d007      	beq.n	800d568 <TIM_OC4_SetConfig+0xc0>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a1c      	ldr	r2, [pc, #112]	; (800d5cc <TIM_OC4_SetConfig+0x124>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d003      	beq.n	800d568 <TIM_OC4_SetConfig+0xc0>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a17      	ldr	r2, [pc, #92]	; (800d5c0 <TIM_OC4_SetConfig+0x118>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d113      	bne.n	800d590 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d56e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d576:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	019b      	lsls	r3, r3, #6
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	4313      	orrs	r3, r2
 800d582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	019b      	lsls	r3, r3, #6
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	693a      	ldr	r2, [r7, #16]
 800d594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	621a      	str	r2, [r3, #32]
}
 800d5aa:	bf00      	nop
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	40012c00 	.word	0x40012c00
 800d5bc:	40013400 	.word	0x40013400
 800d5c0:	40015000 	.word	0x40015000
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40014400 	.word	0x40014400
 800d5cc:	40014800 	.word	0x40014800

0800d5d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d614:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	041b      	lsls	r3, r3, #16
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	4313      	orrs	r3, r2
 800d620:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a19      	ldr	r2, [pc, #100]	; (800d68c <TIM_OC5_SetConfig+0xbc>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d013      	beq.n	800d652 <TIM_OC5_SetConfig+0x82>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a18      	ldr	r2, [pc, #96]	; (800d690 <TIM_OC5_SetConfig+0xc0>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d00f      	beq.n	800d652 <TIM_OC5_SetConfig+0x82>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a17      	ldr	r2, [pc, #92]	; (800d694 <TIM_OC5_SetConfig+0xc4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d00b      	beq.n	800d652 <TIM_OC5_SetConfig+0x82>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a16      	ldr	r2, [pc, #88]	; (800d698 <TIM_OC5_SetConfig+0xc8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d007      	beq.n	800d652 <TIM_OC5_SetConfig+0x82>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a15      	ldr	r2, [pc, #84]	; (800d69c <TIM_OC5_SetConfig+0xcc>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d003      	beq.n	800d652 <TIM_OC5_SetConfig+0x82>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a14      	ldr	r2, [pc, #80]	; (800d6a0 <TIM_OC5_SetConfig+0xd0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d109      	bne.n	800d666 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	021b      	lsls	r3, r3, #8
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	4313      	orrs	r3, r2
 800d664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	621a      	str	r2, [r3, #32]
}
 800d680:	bf00      	nop
 800d682:	371c      	adds	r7, #28
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	40012c00 	.word	0x40012c00
 800d690:	40013400 	.word	0x40013400
 800d694:	40014000 	.word	0x40014000
 800d698:	40014400 	.word	0x40014400
 800d69c:	40014800 	.word	0x40014800
 800d6a0:	40015000 	.word	0x40015000

0800d6a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b087      	sub	sp, #28
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	051b      	lsls	r3, r3, #20
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a1a      	ldr	r2, [pc, #104]	; (800d764 <TIM_OC6_SetConfig+0xc0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d013      	beq.n	800d728 <TIM_OC6_SetConfig+0x84>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a19      	ldr	r2, [pc, #100]	; (800d768 <TIM_OC6_SetConfig+0xc4>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d00f      	beq.n	800d728 <TIM_OC6_SetConfig+0x84>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a18      	ldr	r2, [pc, #96]	; (800d76c <TIM_OC6_SetConfig+0xc8>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d00b      	beq.n	800d728 <TIM_OC6_SetConfig+0x84>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4a17      	ldr	r2, [pc, #92]	; (800d770 <TIM_OC6_SetConfig+0xcc>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d007      	beq.n	800d728 <TIM_OC6_SetConfig+0x84>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4a16      	ldr	r2, [pc, #88]	; (800d774 <TIM_OC6_SetConfig+0xd0>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d003      	beq.n	800d728 <TIM_OC6_SetConfig+0x84>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4a15      	ldr	r2, [pc, #84]	; (800d778 <TIM_OC6_SetConfig+0xd4>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d109      	bne.n	800d73c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d72e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	029b      	lsls	r3, r3, #10
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	4313      	orrs	r3, r2
 800d73a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	621a      	str	r2, [r3, #32]
}
 800d756:	bf00      	nop
 800d758:	371c      	adds	r7, #28
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	40012c00 	.word	0x40012c00
 800d768:	40013400 	.word	0x40013400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800
 800d778:	40015000 	.word	0x40015000

0800d77c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b087      	sub	sp, #28
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6a1b      	ldr	r3, [r3, #32]
 800d78c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	f023 0201 	bic.w	r2, r3, #1
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f023 030a 	bic.w	r3, r3, #10
 800d7b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	621a      	str	r2, [r3, #32]
}
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b087      	sub	sp, #28
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	f023 0210 	bic.w	r2, r3, #16
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6a1b      	ldr	r3, [r3, #32]
 800d7fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	031b      	lsls	r3, r3, #12
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	011b      	lsls	r3, r3, #4
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	4313      	orrs	r3, r2
 800d820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	697a      	ldr	r2, [r7, #20]
 800d826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	621a      	str	r2, [r3, #32]
}
 800d82e:	bf00      	nop
 800d830:	371c      	adds	r7, #28
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b085      	sub	sp, #20
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	f043 0307 	orr.w	r3, r3, #7
 800d860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	609a      	str	r2, [r3, #8]
}
 800d868:	bf00      	nop
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d88e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	021a      	lsls	r2, r3, #8
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	431a      	orrs	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	609a      	str	r2, [r3, #8]
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f003 031f 	and.w	r3, r3, #31
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6a1a      	ldr	r2, [r3, #32]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	43db      	mvns	r3, r3
 800d8d6:	401a      	ands	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a1a      	ldr	r2, [r3, #32]
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f003 031f 	and.w	r3, r3, #31
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ec:	431a      	orrs	r2, r3
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	621a      	str	r2, [r3, #32]
}
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
	...

0800d900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d914:	2302      	movs	r3, #2
 800d916:	e074      	b.n	800da02 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a34      	ldr	r2, [pc, #208]	; (800da10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d009      	beq.n	800d956 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a33      	ldr	r2, [pc, #204]	; (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d004      	beq.n	800d956 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a31      	ldr	r2, [pc, #196]	; (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d108      	bne.n	800d968 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d95c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	4313      	orrs	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a21      	ldr	r2, [pc, #132]	; (800da10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d022      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d998:	d01d      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a1f      	ldr	r2, [pc, #124]	; (800da1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d018      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a1d      	ldr	r2, [pc, #116]	; (800da20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d013      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a1c      	ldr	r2, [pc, #112]	; (800da24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00e      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a15      	ldr	r2, [pc, #84]	; (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d009      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a18      	ldr	r2, [pc, #96]	; (800da28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d004      	beq.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a11      	ldr	r2, [pc, #68]	; (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d10c      	bne.n	800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	40012c00 	.word	0x40012c00
 800da14:	40013400 	.word	0x40013400
 800da18:	40015000 	.word	0x40015000
 800da1c:	40000400 	.word	0x40000400
 800da20:	40000800 	.word	0x40000800
 800da24:	40000c00 	.word	0x40000c00
 800da28:	40014000 	.word	0x40014000

0800da2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da36:	2300      	movs	r3, #0
 800da38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da40:	2b01      	cmp	r3, #1
 800da42:	d101      	bne.n	800da48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da44:	2302      	movs	r3, #2
 800da46:	e096      	b.n	800db76 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	4313      	orrs	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	4313      	orrs	r3, r2
 800da78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4313      	orrs	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	4313      	orrs	r3, r2
 800da94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	695b      	ldr	r3, [r3, #20]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daae:	4313      	orrs	r3, r2
 800dab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	041b      	lsls	r3, r3, #16
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a2f      	ldr	r2, [pc, #188]	; (800db84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d009      	beq.n	800dae0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a2d      	ldr	r2, [pc, #180]	; (800db88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d004      	beq.n	800dae0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a2c      	ldr	r2, [pc, #176]	; (800db8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d106      	bne.n	800daee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	69db      	ldr	r3, [r3, #28]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a24      	ldr	r2, [pc, #144]	; (800db84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d009      	beq.n	800db0c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a22      	ldr	r2, [pc, #136]	; (800db88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d004      	beq.n	800db0c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a21      	ldr	r2, [pc, #132]	; (800db8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d12b      	bne.n	800db64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db16:	051b      	lsls	r3, r3, #20
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	4313      	orrs	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	4313      	orrs	r3, r2
 800db36:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a11      	ldr	r2, [pc, #68]	; (800db84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d009      	beq.n	800db56 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a10      	ldr	r2, [pc, #64]	; (800db88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d004      	beq.n	800db56 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a0e      	ldr	r2, [pc, #56]	; (800db8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d106      	bne.n	800db64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db60:	4313      	orrs	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	40012c00 	.word	0x40012c00
 800db88:	40013400 	.word	0x40013400
 800db8c:	40015000 	.word	0x40015000

0800db90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dbd4:	bf00      	nop
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <LL_EXTI_EnableIT_0_31>:
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800dc24:	4b05      	ldr	r3, [pc, #20]	; (800dc3c <LL_EXTI_EnableIT_0_31+0x20>)
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	4904      	ldr	r1, [pc, #16]	; (800dc3c <LL_EXTI_EnableIT_0_31+0x20>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	600b      	str	r3, [r1, #0]
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	40010400 	.word	0x40010400

0800dc40 <LL_EXTI_EnableIT_32_63>:
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800dc48:	4b05      	ldr	r3, [pc, #20]	; (800dc60 <LL_EXTI_EnableIT_32_63+0x20>)
 800dc4a:	6a1a      	ldr	r2, [r3, #32]
 800dc4c:	4904      	ldr	r1, [pc, #16]	; (800dc60 <LL_EXTI_EnableIT_32_63+0x20>)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	620b      	str	r3, [r1, #32]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	40010400 	.word	0x40010400

0800dc64 <LL_EXTI_DisableIT_0_31>:
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800dc6c:	4b06      	ldr	r3, [pc, #24]	; (800dc88 <LL_EXTI_DisableIT_0_31+0x24>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	43db      	mvns	r3, r3
 800dc74:	4904      	ldr	r1, [pc, #16]	; (800dc88 <LL_EXTI_DisableIT_0_31+0x24>)
 800dc76:	4013      	ands	r3, r2
 800dc78:	600b      	str	r3, [r1, #0]
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	40010400 	.word	0x40010400

0800dc8c <LL_EXTI_DisableIT_32_63>:
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800dc94:	4b06      	ldr	r3, [pc, #24]	; (800dcb0 <LL_EXTI_DisableIT_32_63+0x24>)
 800dc96:	6a1a      	ldr	r2, [r3, #32]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	43db      	mvns	r3, r3
 800dc9c:	4904      	ldr	r1, [pc, #16]	; (800dcb0 <LL_EXTI_DisableIT_32_63+0x24>)
 800dc9e:	4013      	ands	r3, r2
 800dca0:	620b      	str	r3, [r1, #32]
}
 800dca2:	bf00      	nop
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	40010400 	.word	0x40010400

0800dcb4 <LL_EXTI_EnableEvent_0_31>:
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800dcbc:	4b05      	ldr	r3, [pc, #20]	; (800dcd4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800dcbe:	685a      	ldr	r2, [r3, #4]
 800dcc0:	4904      	ldr	r1, [pc, #16]	; (800dcd4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	604b      	str	r3, [r1, #4]
}
 800dcc8:	bf00      	nop
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	40010400 	.word	0x40010400

0800dcd8 <LL_EXTI_EnableEvent_32_63>:
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800dce0:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dce4:	4904      	ldr	r1, [pc, #16]	; (800dcf8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	40010400 	.word	0x40010400

0800dcfc <LL_EXTI_DisableEvent_0_31>:
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800dd04:	4b06      	ldr	r3, [pc, #24]	; (800dd20 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	43db      	mvns	r3, r3
 800dd0c:	4904      	ldr	r1, [pc, #16]	; (800dd20 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dd0e:	4013      	ands	r3, r2
 800dd10:	604b      	str	r3, [r1, #4]
}
 800dd12:	bf00      	nop
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	40010400 	.word	0x40010400

0800dd24 <LL_EXTI_DisableEvent_32_63>:
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800dd2c:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	43db      	mvns	r3, r3
 800dd34:	4904      	ldr	r1, [pc, #16]	; (800dd48 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dd36:	4013      	ands	r3, r2
 800dd38:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	40010400 	.word	0x40010400

0800dd4c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dd54:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dd56:	689a      	ldr	r2, [r3, #8]
 800dd58:	4904      	ldr	r1, [pc, #16]	; (800dd6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	608b      	str	r3, [r1, #8]
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	40010400 	.word	0x40010400

0800dd70 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dd7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd7c:	4904      	ldr	r1, [pc, #16]	; (800dd90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	628b      	str	r3, [r1, #40]	; 0x28
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	40010400 	.word	0x40010400

0800dd94 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800dd9c:	4b06      	ldr	r3, [pc, #24]	; (800ddb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dd9e:	689a      	ldr	r2, [r3, #8]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	43db      	mvns	r3, r3
 800dda4:	4904      	ldr	r1, [pc, #16]	; (800ddb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	608b      	str	r3, [r1, #8]
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	40010400 	.word	0x40010400

0800ddbc <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ddc4:	4b06      	ldr	r3, [pc, #24]	; (800dde0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ddc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	43db      	mvns	r3, r3
 800ddcc:	4904      	ldr	r1, [pc, #16]	; (800dde0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ddce:	4013      	ands	r3, r2
 800ddd0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	40010400 	.word	0x40010400

0800dde4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ddec:	4b05      	ldr	r3, [pc, #20]	; (800de04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ddee:	68da      	ldr	r2, [r3, #12]
 800ddf0:	4904      	ldr	r1, [pc, #16]	; (800de04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	60cb      	str	r3, [r1, #12]
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	40010400 	.word	0x40010400

0800de08 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800de10:	4b05      	ldr	r3, [pc, #20]	; (800de28 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800de12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de14:	4904      	ldr	r1, [pc, #16]	; (800de28 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4313      	orrs	r3, r2
 800de1a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	40010400 	.word	0x40010400

0800de2c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800de34:	4b06      	ldr	r3, [pc, #24]	; (800de50 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	43db      	mvns	r3, r3
 800de3c:	4904      	ldr	r1, [pc, #16]	; (800de50 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800de3e:	4013      	ands	r3, r2
 800de40:	60cb      	str	r3, [r1, #12]
}
 800de42:	bf00      	nop
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	40010400 	.word	0x40010400

0800de54 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800de5c:	4b06      	ldr	r3, [pc, #24]	; (800de78 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800de5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	43db      	mvns	r3, r3
 800de64:	4904      	ldr	r1, [pc, #16]	; (800de78 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800de66:	4013      	ands	r3, r2
 800de68:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800de6a:	bf00      	nop
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	40010400 	.word	0x40010400

0800de7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800de84:	2300      	movs	r3, #0
 800de86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	7a1b      	ldrb	r3, [r3, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 80c8 	beq.w	800e022 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d05d      	beq.n	800df56 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7a5b      	ldrb	r3, [r3, #9]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d00e      	beq.n	800dec0 <LL_EXTI_Init+0x44>
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d017      	beq.n	800ded6 <LL_EXTI_Init+0x5a>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d120      	bne.n	800deec <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff ff24 	bl	800dcfc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f7ff feaf 	bl	800dc1c <LL_EXTI_EnableIT_0_31>
          break;
 800debe:	e018      	b.n	800def2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7ff fecd 	bl	800dc64 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff fef0 	bl	800dcb4 <LL_EXTI_EnableEvent_0_31>
          break;
 800ded4:	e00d      	b.n	800def2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff fe9e 	bl	800dc1c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fee5 	bl	800dcb4 <LL_EXTI_EnableEvent_0_31>
          break;
 800deea:	e002      	b.n	800def2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800deec:	2301      	movs	r3, #1
 800deee:	60fb      	str	r3, [r7, #12]
          break;
 800def0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7a9b      	ldrb	r3, [r3, #10]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d02d      	beq.n	800df56 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7a9b      	ldrb	r3, [r3, #10]
 800defe:	2b02      	cmp	r3, #2
 800df00:	d00e      	beq.n	800df20 <LL_EXTI_Init+0xa4>
 800df02:	2b03      	cmp	r3, #3
 800df04:	d017      	beq.n	800df36 <LL_EXTI_Init+0xba>
 800df06:	2b01      	cmp	r3, #1
 800df08:	d120      	bne.n	800df4c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7ff ff8c 	bl	800de2c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff ff17 	bl	800dd4c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800df1e:	e01b      	b.n	800df58 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff ff35 	bl	800dd94 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff ff58 	bl	800dde4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800df34:	e010      	b.n	800df58 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ff06 	bl	800dd4c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff ff4d 	bl	800dde4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800df4a:	e005      	b.n	800df58 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f043 0302 	orr.w	r3, r3, #2
 800df52:	60fb      	str	r3, [r7, #12]
            break;
 800df54:	e000      	b.n	800df58 <LL_EXTI_Init+0xdc>
        }
      }
 800df56:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d075      	beq.n	800e04c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7a5b      	ldrb	r3, [r3, #9]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d00e      	beq.n	800df86 <LL_EXTI_Init+0x10a>
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d017      	beq.n	800df9c <LL_EXTI_Init+0x120>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d120      	bne.n	800dfb2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff fed5 	bl	800dd24 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff fe5e 	bl	800dc40 <LL_EXTI_EnableIT_32_63>
          break;
 800df84:	e01a      	b.n	800dfbc <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7ff fe7e 	bl	800dc8c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fe9f 	bl	800dcd8 <LL_EXTI_EnableEvent_32_63>
          break;
 800df9a:	e00f      	b.n	800dfbc <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff fe4d 	bl	800dc40 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff fe94 	bl	800dcd8 <LL_EXTI_EnableEvent_32_63>
          break;
 800dfb0:	e004      	b.n	800dfbc <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f043 0304 	orr.w	r3, r3, #4
 800dfb8:	60fb      	str	r3, [r7, #12]
          break;
 800dfba:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	7a9b      	ldrb	r3, [r3, #10]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d043      	beq.n	800e04c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7a9b      	ldrb	r3, [r3, #10]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d00e      	beq.n	800dfea <LL_EXTI_Init+0x16e>
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d017      	beq.n	800e000 <LL_EXTI_Init+0x184>
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d120      	bne.n	800e016 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff ff3b 	bl	800de54 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7ff fec4 	bl	800dd70 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800dfe8:	e031      	b.n	800e04e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff fee4 	bl	800ddbc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff ff05 	bl	800de08 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800dffe:	e026      	b.n	800e04e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff feb3 	bl	800dd70 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff fefa 	bl	800de08 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800e014:	e01b      	b.n	800e04e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f043 0305 	orr.w	r3, r3, #5
 800e01c:	60fb      	str	r3, [r7, #12]
            break;
 800e01e:	bf00      	nop
 800e020:	e015      	b.n	800e04e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff fe1c 	bl	800dc64 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fe63 	bl	800dcfc <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7ff fe26 	bl	800dc8c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fe6d 	bl	800dd24 <LL_EXTI_DisableEvent_32_63>
 800e04a:	e000      	b.n	800e04e <LL_EXTI_Init+0x1d2>
      }
 800e04c:	bf00      	nop
  }

  return status;
 800e04e:	68fb      	ldr	r3, [r7, #12]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <LL_GPIO_SetPinMode>:
{
 800e058:	b480      	push	{r7}
 800e05a:	b089      	sub	sp, #36	; 0x24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	fa93 f3a3 	rbit	r3, r3
 800e072:	613b      	str	r3, [r7, #16]
  return result;
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	fab3 f383 	clz	r3, r3
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	2103      	movs	r1, #3
 800e080:	fa01 f303 	lsl.w	r3, r1, r3
 800e084:	43db      	mvns	r3, r3
 800e086:	401a      	ands	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	fa93 f3a3 	rbit	r3, r3
 800e092:	61bb      	str	r3, [r7, #24]
  return result;
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	fab3 f383 	clz	r3, r3
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	601a      	str	r2, [r3, #0]
}
 800e0aa:	bf00      	nop
 800e0ac:	3724      	adds	r7, #36	; 0x24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <LL_GPIO_SetPinOutputType>:
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b085      	sub	sp, #20
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	43db      	mvns	r3, r3
 800e0ca:	401a      	ands	r2, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	fb01 f303 	mul.w	r3, r1, r3
 800e0d4:	431a      	orrs	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	605a      	str	r2, [r3, #4]
}
 800e0da:	bf00      	nop
 800e0dc:	3714      	adds	r7, #20
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <LL_GPIO_SetPinSpeed>:
{
 800e0e6:	b480      	push	{r7}
 800e0e8:	b089      	sub	sp, #36	; 0x24
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	60b9      	str	r1, [r7, #8]
 800e0f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	689a      	ldr	r2, [r3, #8]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	fa93 f3a3 	rbit	r3, r3
 800e100:	613b      	str	r3, [r7, #16]
  return result;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	fab3 f383 	clz	r3, r3
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	2103      	movs	r1, #3
 800e10e:	fa01 f303 	lsl.w	r3, r1, r3
 800e112:	43db      	mvns	r3, r3
 800e114:	401a      	ands	r2, r3
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	fa93 f3a3 	rbit	r3, r3
 800e120:	61bb      	str	r3, [r7, #24]
  return result;
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	fab3 f383 	clz	r3, r3
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	6879      	ldr	r1, [r7, #4]
 800e12e:	fa01 f303 	lsl.w	r3, r1, r3
 800e132:	431a      	orrs	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	609a      	str	r2, [r3, #8]
}
 800e138:	bf00      	nop
 800e13a:	3724      	adds	r7, #36	; 0x24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <LL_GPIO_SetPinPull>:
{
 800e144:	b480      	push	{r7}
 800e146:	b089      	sub	sp, #36	; 0x24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68da      	ldr	r2, [r3, #12]
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	fa93 f3a3 	rbit	r3, r3
 800e15e:	613b      	str	r3, [r7, #16]
  return result;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	fab3 f383 	clz	r3, r3
 800e166:	b2db      	uxtb	r3, r3
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	2103      	movs	r1, #3
 800e16c:	fa01 f303 	lsl.w	r3, r1, r3
 800e170:	43db      	mvns	r3, r3
 800e172:	401a      	ands	r2, r3
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	fa93 f3a3 	rbit	r3, r3
 800e17e:	61bb      	str	r3, [r7, #24]
  return result;
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	fab3 f383 	clz	r3, r3
 800e186:	b2db      	uxtb	r3, r3
 800e188:	005b      	lsls	r3, r3, #1
 800e18a:	6879      	ldr	r1, [r7, #4]
 800e18c:	fa01 f303 	lsl.w	r3, r1, r3
 800e190:	431a      	orrs	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	60da      	str	r2, [r3, #12]
}
 800e196:	bf00      	nop
 800e198:	3724      	adds	r7, #36	; 0x24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <LL_GPIO_SetAFPin_0_7>:
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b089      	sub	sp, #36	; 0x24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6a1a      	ldr	r2, [r3, #32]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	fa93 f3a3 	rbit	r3, r3
 800e1bc:	613b      	str	r3, [r7, #16]
  return result;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	fab3 f383 	clz	r3, r3
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	210f      	movs	r1, #15
 800e1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ce:	43db      	mvns	r3, r3
 800e1d0:	401a      	ands	r2, r3
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	fa93 f3a3 	rbit	r3, r3
 800e1dc:	61bb      	str	r3, [r7, #24]
  return result;
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	fab3 f383 	clz	r3, r3
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	6879      	ldr	r1, [r7, #4]
 800e1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ee:	431a      	orrs	r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	621a      	str	r2, [r3, #32]
}
 800e1f4:	bf00      	nop
 800e1f6:	3724      	adds	r7, #36	; 0x24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <LL_GPIO_SetAFPin_8_15>:
{
 800e200:	b480      	push	{r7}
 800e202:	b089      	sub	sp, #36	; 0x24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	0a1b      	lsrs	r3, r3, #8
 800e214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	fa93 f3a3 	rbit	r3, r3
 800e21c:	613b      	str	r3, [r7, #16]
  return result;
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	fab3 f383 	clz	r3, r3
 800e224:	b2db      	uxtb	r3, r3
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	210f      	movs	r1, #15
 800e22a:	fa01 f303 	lsl.w	r3, r1, r3
 800e22e:	43db      	mvns	r3, r3
 800e230:	401a      	ands	r2, r3
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	0a1b      	lsrs	r3, r3, #8
 800e236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	fa93 f3a3 	rbit	r3, r3
 800e23e:	61bb      	str	r3, [r7, #24]
  return result;
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	fab3 f383 	clz	r3, r3
 800e246:	b2db      	uxtb	r3, r3
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	fa01 f303 	lsl.w	r3, r1, r3
 800e250:	431a      	orrs	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e256:	bf00      	nop
 800e258:	3724      	adds	r7, #36	; 0x24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b086      	sub	sp, #24
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	fa93 f3a3 	rbit	r3, r3
 800e278:	60bb      	str	r3, [r7, #8]
  return result;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	fab3 f383 	clz	r3, r3
 800e280:	b2db      	uxtb	r3, r3
 800e282:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e284:	e040      	b.n	800e308 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	2101      	movs	r1, #1
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	fa01 f303 	lsl.w	r3, r1, r3
 800e292:	4013      	ands	r3, r2
 800e294:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d032      	beq.n	800e302 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	6939      	ldr	r1, [r7, #16]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff fed7 	bl	800e058 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d003      	beq.n	800e2ba <LL_GPIO_Init+0x58>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d106      	bne.n	800e2c8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	6939      	ldr	r1, [r7, #16]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff ff0f 	bl	800e0e6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	6939      	ldr	r1, [r7, #16]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff ff37 	bl	800e144 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d111      	bne.n	800e302 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2bff      	cmp	r3, #255	; 0xff
 800e2e2:	d807      	bhi.n	800e2f4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	6939      	ldr	r1, [r7, #16]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff ff58 	bl	800e1a2 <LL_GPIO_SetAFPin_0_7>
 800e2f2:	e006      	b.n	800e302 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	6939      	ldr	r1, [r7, #16]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7ff ff7f 	bl	800e200 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	3301      	adds	r3, #1
 800e306:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1b7      	bne.n	800e286 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d003      	beq.n	800e326 <LL_GPIO_Init+0xc4>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d107      	bne.n	800e336 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	6819      	ldr	r1, [r3, #0]
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	461a      	mov	r2, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fec0 	bl	800e0b6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800e340:	b590      	push	{r4, r7, lr}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4604      	mov	r4, r0
 800e348:	4608      	mov	r0, r1
 800e34a:	4611      	mov	r1, r2
 800e34c:	461a      	mov	r2, r3
 800e34e:	4623      	mov	r3, r4
 800e350:	80fb      	strh	r3, [r7, #6]
 800e352:	4603      	mov	r3, r0
 800e354:	80bb      	strh	r3, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	70fb      	strb	r3, [r7, #3]
 800e35a:	4613      	mov	r3, r2
 800e35c:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800e35e:	2300      	movs	r3, #0
 800e360:	60fb      	str	r3, [r7, #12]
 800e362:	e026      	b.n	800e3b2 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800e364:	2300      	movs	r3, #0
 800e366:	60bb      	str	r3, [r7, #8]
 800e368:	e01c      	b.n	800e3a4 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	88fb      	ldrh	r3, [r7, #6]
 800e370:	4413      	add	r3, r2
 800e372:	b298      	uxth	r0, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e37a:	4413      	add	r3, r2
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e382:	fbb2 f3f3 	udiv	r3, r2, r3
 800e386:	b29a      	uxth	r2, r3
 800e388:	88bb      	ldrh	r3, [r7, #4]
 800e38a:	4413      	add	r3, r2
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	b29b      	uxth	r3, r3
 800e392:	4413      	add	r3, r2
 800e394:	b29b      	uxth	r3, r3
 800e396:	883a      	ldrh	r2, [r7, #0]
 800e398:	4619      	mov	r1, r3
 800e39a:	f000 fc1f 	bl	800ebdc <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	60bb      	str	r3, [r7, #8]
 800e3a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	dbde      	blt.n	800e36a <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	78fb      	ldrb	r3, [r7, #3]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	dbd4      	blt.n	800e364 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800e3ba:	bf00      	nop
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd90      	pop	{r4, r7, pc}

0800e3c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800e3c2:	b590      	push	{r4, r7, lr}
 800e3c4:	b087      	sub	sp, #28
 800e3c6:	af02      	add	r7, sp, #8
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	4608      	mov	r0, r1
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	80fb      	strh	r3, [r7, #6]
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	80bb      	strh	r3, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	807b      	strh	r3, [r7, #2]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800e3e4:	7bfa      	ldrb	r2, [r7, #15]
 800e3e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d939      	bls.n	800e462 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800e3ee:	88ba      	ldrh	r2, [r7, #4]
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
 800e3f2:	441a      	add	r2, r3
 800e3f4:	88b9      	ldrh	r1, [r7, #4]
 800e3f6:	883b      	ldrh	r3, [r7, #0]
 800e3f8:	4419      	add	r1, r3
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	1acb      	subs	r3, r1, r3
 800e3fe:	429a      	cmp	r2, r3
 800e400:	f000 8089 	beq.w	800e516 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800e404:	88fa      	ldrh	r2, [r7, #6]
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	441a      	add	r2, r3
 800e40a:	88f9      	ldrh	r1, [r7, #6]
 800e40c:	887b      	ldrh	r3, [r7, #2]
 800e40e:	4419      	add	r1, r3
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	1acb      	subs	r3, r1, r3
 800e414:	429a      	cmp	r2, r3
 800e416:	d07e      	beq.n	800e516 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	88fb      	ldrh	r3, [r7, #6]
 800e41e:	4413      	add	r3, r2
 800e420:	b298      	uxth	r0, r3
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	b29a      	uxth	r2, r3
 800e426:	88bb      	ldrh	r3, [r7, #4]
 800e428:	4413      	add	r3, r2
 800e42a:	b299      	uxth	r1, r3
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	b29b      	uxth	r3, r3
 800e434:	887a      	ldrh	r2, [r7, #2]
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	b29b      	uxth	r3, r3
 800e43a:	3301      	adds	r3, #1
 800e43c:	b29c      	uxth	r4, r3
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
 800e440:	b29b      	uxth	r3, r3
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	b29b      	uxth	r3, r3
 800e446:	883a      	ldrh	r2, [r7, #0]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	3301      	adds	r3, #1
 800e44e:	b29a      	uxth	r2, r3
 800e450:	2304      	movs	r3, #4
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	8c3b      	ldrh	r3, [r7, #32]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	4613      	mov	r3, r2
 800e45a:	4622      	mov	r2, r4
 800e45c:	f000 fd18 	bl	800ee90 <ILI9341_Draw_Rectangle>
				goto finish;
 800e460:	e05a      	b.n	800e518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e462:	7bfb      	ldrb	r3, [r7, #15]
 800e464:	b29a      	uxth	r2, r3
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	4413      	add	r3, r2
 800e46a:	b298      	uxth	r0, r3
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	88bb      	ldrh	r3, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	b29b      	uxth	r3, r3
 800e47a:	887a      	ldrh	r2, [r7, #2]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e480:	3301      	adds	r3, #1
 800e482:	b29a      	uxth	r2, r3
 800e484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e486:	f000 fa6b 	bl	800e960 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	88fb      	ldrh	r3, [r7, #6]
 800e490:	4413      	add	r3, r2
 800e492:	b298      	uxth	r0, r3
										(y + h) - b,
 800e494:	88ba      	ldrh	r2, [r7, #4]
 800e496:	883b      	ldrh	r3, [r7, #0]
 800e498:	4413      	add	r3, r2
 800e49a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	b299      	uxth	r1, r3
										(w - b)+1,
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	887a      	ldrh	r2, [r7, #2]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4b4:	f000 fa54 	bl	800e960 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	88fb      	ldrh	r3, [r7, #6]
 800e4be:	4413      	add	r3, r2
 800e4c0:	b298      	uxth	r0, r3
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	88bb      	ldrh	r3, [r7, #4]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b299      	uxth	r1, r3
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	883a      	ldrh	r2, [r7, #0]
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4dc:	f000 faa4 	bl	800ea28 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800e4e0:	88fa      	ldrh	r2, [r7, #6]
 800e4e2:	887b      	ldrh	r3, [r7, #2]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	1ad3      	subs	r3, r2, r3
 800e4ee:	b298      	uxth	r0, r3
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	88bb      	ldrh	r3, [r7, #4]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	b299      	uxth	r1, r3
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	b29b      	uxth	r3, r3
 800e502:	883a      	ldrh	r2, [r7, #0]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	b29a      	uxth	r2, r3
 800e508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e50a:	f000 fa8d 	bl	800ea28 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
 800e510:	3301      	adds	r3, #1
 800e512:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e514:	e766      	b.n	800e3e4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e516:	bf00      	nop
	// done
	return;
 800e518:	bf00      	nop
}
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd90      	pop	{r4, r7, pc}

0800e520 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e520:	b590      	push	{r4, r7, lr}
 800e522:	b089      	sub	sp, #36	; 0x24
 800e524:	af02      	add	r7, sp, #8
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	4611      	mov	r1, r2
 800e52c:	461a      	mov	r2, r3
 800e52e:	4623      	mov	r3, r4
 800e530:	71fb      	strb	r3, [r7, #7]
 800e532:	4603      	mov	r3, r0
 800e534:	80bb      	strh	r3, [r7, #4]
 800e536:	460b      	mov	r3, r1
 800e538:	807b      	strh	r3, [r7, #2]
 800e53a:	4613      	mov	r3, r2
 800e53c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e542:	7dfb      	ldrb	r3, [r7, #23]
 800e544:	2b1f      	cmp	r3, #31
 800e546:	d802      	bhi.n	800e54e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	71fb      	strb	r3, [r7, #7]
 800e54c:	e002      	b.n	800e554 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	3b20      	subs	r3, #32
 800e552:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e554:	2300      	movs	r3, #0
 800e556:	753b      	strb	r3, [r7, #20]
 800e558:	e012      	b.n	800e580 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e55a:	7dfa      	ldrb	r2, [r7, #23]
 800e55c:	7d38      	ldrb	r0, [r7, #20]
 800e55e:	7d39      	ldrb	r1, [r7, #20]
 800e560:	4c48      	ldr	r4, [pc, #288]	; (800e684 <ILI9341_Draw_Char+0x164>)
 800e562:	4613      	mov	r3, r2
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	4413      	add	r3, r2
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4423      	add	r3, r4
 800e56c:	4403      	add	r3, r0
 800e56e:	781a      	ldrb	r2, [r3, #0]
 800e570:	f107 0318 	add.w	r3, r7, #24
 800e574:	440b      	add	r3, r1
 800e576:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e57a:	7d3b      	ldrb	r3, [r7, #20]
 800e57c:	3301      	adds	r3, #1
 800e57e:	753b      	strb	r3, [r7, #20]
 800e580:	7d3b      	ldrb	r3, [r7, #20]
 800e582:	2b05      	cmp	r3, #5
 800e584:	d9e9      	bls.n	800e55a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e586:	2300      	movs	r3, #0
 800e588:	757b      	strb	r3, [r7, #21]
 800e58a:	e074      	b.n	800e676 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e58c:	2300      	movs	r3, #0
 800e58e:	75bb      	strb	r3, [r7, #22]
 800e590:	e06b      	b.n	800e66a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e592:	7d7b      	ldrb	r3, [r7, #21]
 800e594:	f107 0218 	add.w	r2, r7, #24
 800e598:	4413      	add	r3, r2
 800e59a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	7dbb      	ldrb	r3, [r7, #22]
 800e5a2:	fa42 f303 	asr.w	r3, r2, r3
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d02d      	beq.n	800e60a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e5ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d10e      	bne.n	800e5d2 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e5b4:	7d7b      	ldrb	r3, [r7, #21]
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	88bb      	ldrh	r3, [r7, #4]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	b298      	uxth	r0, r3
 800e5be:	7dbb      	ldrb	r3, [r7, #22]
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	887b      	ldrh	r3, [r7, #2]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	883a      	ldrh	r2, [r7, #0]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	f000 fb06 	bl	800ebdc <ILI9341_Draw_Pixel>
 800e5d0:	e048      	b.n	800e664 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e5d2:	7d7b      	ldrb	r3, [r7, #21]
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e5d8:	fb12 f303 	smulbb	r3, r2, r3
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	88bb      	ldrh	r3, [r7, #4]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	b298      	uxth	r0, r3
 800e5e4:	7dbb      	ldrb	r3, [r7, #22]
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e5ea:	fb12 f303 	smulbb	r3, r2, r3
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	887b      	ldrh	r3, [r7, #2]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	b299      	uxth	r1, r3
 800e5f6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e5f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	9301      	str	r3, [sp, #4]
 800e5fe:	883b      	ldrh	r3, [r7, #0]
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	4623      	mov	r3, r4
 800e604:	f000 fc44 	bl	800ee90 <ILI9341_Draw_Rectangle>
 800e608:	e02c      	b.n	800e664 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e60a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d10e      	bne.n	800e62e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e610:	7d7b      	ldrb	r3, [r7, #21]
 800e612:	b29a      	uxth	r2, r3
 800e614:	88bb      	ldrh	r3, [r7, #4]
 800e616:	4413      	add	r3, r2
 800e618:	b298      	uxth	r0, r3
 800e61a:	7dbb      	ldrb	r3, [r7, #22]
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	887b      	ldrh	r3, [r7, #2]
 800e620:	4413      	add	r3, r2
 800e622:	b29b      	uxth	r3, r3
 800e624:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e626:	4619      	mov	r1, r3
 800e628:	f000 fad8 	bl	800ebdc <ILI9341_Draw_Pixel>
 800e62c:	e01a      	b.n	800e664 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e62e:	7d7b      	ldrb	r3, [r7, #21]
 800e630:	b29b      	uxth	r3, r3
 800e632:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e634:	fb12 f303 	smulbb	r3, r2, r3
 800e638:	b29a      	uxth	r2, r3
 800e63a:	88bb      	ldrh	r3, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	b298      	uxth	r0, r3
 800e640:	7dbb      	ldrb	r3, [r7, #22]
 800e642:	b29b      	uxth	r3, r3
 800e644:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e646:	fb12 f303 	smulbb	r3, r2, r3
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	887b      	ldrh	r3, [r7, #2]
 800e64e:	4413      	add	r3, r2
 800e650:	b299      	uxth	r1, r3
 800e652:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e654:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e656:	2301      	movs	r3, #1
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	4623      	mov	r3, r4
 800e660:	f000 fc16 	bl	800ee90 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e664:	7dbb      	ldrb	r3, [r7, #22]
 800e666:	3301      	adds	r3, #1
 800e668:	75bb      	strb	r3, [r7, #22]
 800e66a:	7dbb      	ldrb	r3, [r7, #22]
 800e66c:	2b07      	cmp	r3, #7
 800e66e:	d990      	bls.n	800e592 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e670:	7d7b      	ldrb	r3, [r7, #21]
 800e672:	3301      	adds	r3, #1
 800e674:	757b      	strb	r3, [r7, #21]
 800e676:	7d7b      	ldrb	r3, [r7, #21]
 800e678:	2b05      	cmp	r3, #5
 800e67a:	d987      	bls.n	800e58c <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e67c:	bf00      	nop
 800e67e:	371c      	adds	r7, #28
 800e680:	46bd      	mov	sp, r7
 800e682:	bd90      	pop	{r4, r7, pc}
 800e684:	080143d8 	.word	0x080143d8

0800e688 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af02      	add	r7, sp, #8
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	4608      	mov	r0, r1
 800e692:	4611      	mov	r1, r2
 800e694:	461a      	mov	r2, r3
 800e696:	4603      	mov	r3, r0
 800e698:	817b      	strh	r3, [r7, #10]
 800e69a:	460b      	mov	r3, r1
 800e69c:	813b      	strh	r3, [r7, #8]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e6a2:	897b      	ldrh	r3, [r7, #10]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	b298      	uxth	r0, r3
 800e6a8:	8c3b      	ldrh	r3, [r7, #32]
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b0:	8939      	ldrh	r1, [r7, #8]
 800e6b2:	f000 f9b9 	bl	800ea28 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e6b6:	897b      	ldrh	r3, [r7, #10]
 800e6b8:	3b02      	subs	r3, #2
 800e6ba:	b298      	uxth	r0, r3
 800e6bc:	8c3b      	ldrh	r3, [r7, #32]
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6c4:	8939      	ldrh	r1, [r7, #8]
 800e6c6:	f000 f9af 	bl	800ea28 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e6ca:	e016      	b.n	800e6fa <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	60fa      	str	r2, [r7, #12]
 800e6d2:	7818      	ldrb	r0, [r3, #0]
 800e6d4:	88fc      	ldrh	r4, [r7, #6]
 800e6d6:	893a      	ldrh	r2, [r7, #8]
 800e6d8:	8979      	ldrh	r1, [r7, #10]
 800e6da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6dc:	9301      	str	r3, [sp, #4]
 800e6de:	8c3b      	ldrh	r3, [r7, #32]
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	4623      	mov	r3, r4
 800e6e4:	f7ff ff1c 	bl	800e520 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e6e8:	8c3b      	ldrh	r3, [r7, #32]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	0052      	lsls	r2, r2, #1
 800e6ee:	4413      	add	r3, r2
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	897b      	ldrh	r3, [r7, #10]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e4      	bne.n	800e6cc <ILI9341_Draw_Text+0x44>
    }


}
 800e702:	bf00      	nop
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	bd90      	pop	{r4, r7, pc}

0800e70a <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e70e:	f000 fca3 	bl	800f058 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e712:	f000 f907 	bl	800e924 <ILI9341_SPI_Init>
	_LCD_Reset();
 800e716:	f000 fcaf 	bl	800f078 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e71a:	2001      	movs	r0, #1
 800e71c:	f000 fd7a 	bl	800f214 <_LCD_SendCommand>
	HAL_Delay(2000);
 800e720:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e724:	f7f9 fe8e 	bl	8008444 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e728:	20cb      	movs	r0, #203	; 0xcb
 800e72a:	f000 fd73 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e72e:	2039      	movs	r0, #57	; 0x39
 800e730:	f000 fda2 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e734:	202c      	movs	r0, #44	; 0x2c
 800e736:	f000 fd9f 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e73a:	2000      	movs	r0, #0
 800e73c:	f000 fd9c 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e740:	2034      	movs	r0, #52	; 0x34
 800e742:	f000 fd99 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e746:	2002      	movs	r0, #2
 800e748:	f000 fd96 	bl	800f278 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e74c:	20cf      	movs	r0, #207	; 0xcf
 800e74e:	f000 fd61 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e752:	2000      	movs	r0, #0
 800e754:	f000 fd90 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e758:	20c1      	movs	r0, #193	; 0xc1
 800e75a:	f000 fd8d 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e75e:	2030      	movs	r0, #48	; 0x30
 800e760:	f000 fd8a 	bl	800f278 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e764:	20e8      	movs	r0, #232	; 0xe8
 800e766:	f000 fd55 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e76a:	2085      	movs	r0, #133	; 0x85
 800e76c:	f000 fd84 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e770:	2000      	movs	r0, #0
 800e772:	f000 fd81 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e776:	2078      	movs	r0, #120	; 0x78
 800e778:	f000 fd7e 	bl	800f278 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e77c:	20ea      	movs	r0, #234	; 0xea
 800e77e:	f000 fd49 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e782:	2000      	movs	r0, #0
 800e784:	f000 fd78 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e788:	2000      	movs	r0, #0
 800e78a:	f000 fd75 	bl	800f278 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e78e:	20ed      	movs	r0, #237	; 0xed
 800e790:	f000 fd40 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e794:	2064      	movs	r0, #100	; 0x64
 800e796:	f000 fd6f 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e79a:	2003      	movs	r0, #3
 800e79c:	f000 fd6c 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e7a0:	2012      	movs	r0, #18
 800e7a2:	f000 fd69 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e7a6:	2081      	movs	r0, #129	; 0x81
 800e7a8:	f000 fd66 	bl	800f278 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e7ac:	20f7      	movs	r0, #247	; 0xf7
 800e7ae:	f000 fd31 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e7b2:	2020      	movs	r0, #32
 800e7b4:	f000 fd60 	bl	800f278 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e7b8:	20c0      	movs	r0, #192	; 0xc0
 800e7ba:	f000 fd2b 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e7be:	2023      	movs	r0, #35	; 0x23
 800e7c0:	f000 fd5a 	bl	800f278 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e7c4:	20c1      	movs	r0, #193	; 0xc1
 800e7c6:	f000 fd25 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e7ca:	2010      	movs	r0, #16
 800e7cc:	f000 fd54 	bl	800f278 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e7d0:	20c5      	movs	r0, #197	; 0xc5
 800e7d2:	f000 fd1f 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e7d6:	203e      	movs	r0, #62	; 0x3e
 800e7d8:	f000 fd4e 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e7dc:	2028      	movs	r0, #40	; 0x28
 800e7de:	f000 fd4b 	bl	800f278 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e7e2:	20c7      	movs	r0, #199	; 0xc7
 800e7e4:	f000 fd16 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e7e8:	2086      	movs	r0, #134	; 0x86
 800e7ea:	f000 fd45 	bl	800f278 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e7ee:	2036      	movs	r0, #54	; 0x36
 800e7f0:	f000 fd10 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e7f4:	2048      	movs	r0, #72	; 0x48
 800e7f6:	f000 fd3f 	bl	800f278 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e7fa:	203a      	movs	r0, #58	; 0x3a
 800e7fc:	f000 fd0a 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e800:	2055      	movs	r0, #85	; 0x55
 800e802:	f000 fd39 	bl	800f278 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e806:	20b1      	movs	r0, #177	; 0xb1
 800e808:	f000 fd04 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e80c:	2000      	movs	r0, #0
 800e80e:	f000 fd33 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e812:	2018      	movs	r0, #24
 800e814:	f000 fd30 	bl	800f278 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e818:	20b6      	movs	r0, #182	; 0xb6
 800e81a:	f000 fcfb 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e81e:	2008      	movs	r0, #8
 800e820:	f000 fd2a 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e824:	2082      	movs	r0, #130	; 0x82
 800e826:	f000 fd27 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e82a:	2027      	movs	r0, #39	; 0x27
 800e82c:	f000 fd24 	bl	800f278 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e830:	20f2      	movs	r0, #242	; 0xf2
 800e832:	f000 fcef 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e836:	2000      	movs	r0, #0
 800e838:	f000 fd1e 	bl	800f278 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e83c:	2026      	movs	r0, #38	; 0x26
 800e83e:	f000 fce9 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e842:	2001      	movs	r0, #1
 800e844:	f000 fd18 	bl	800f278 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e848:	20e0      	movs	r0, #224	; 0xe0
 800e84a:	f000 fce3 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e84e:	200f      	movs	r0, #15
 800e850:	f000 fd12 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e854:	2031      	movs	r0, #49	; 0x31
 800e856:	f000 fd0f 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e85a:	202b      	movs	r0, #43	; 0x2b
 800e85c:	f000 fd0c 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e860:	200c      	movs	r0, #12
 800e862:	f000 fd09 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e866:	200e      	movs	r0, #14
 800e868:	f000 fd06 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e86c:	2008      	movs	r0, #8
 800e86e:	f000 fd03 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e872:	204e      	movs	r0, #78	; 0x4e
 800e874:	f000 fd00 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e878:	20f1      	movs	r0, #241	; 0xf1
 800e87a:	f000 fcfd 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e87e:	2037      	movs	r0, #55	; 0x37
 800e880:	f000 fcfa 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e884:	2007      	movs	r0, #7
 800e886:	f000 fcf7 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e88a:	2010      	movs	r0, #16
 800e88c:	f000 fcf4 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e890:	2003      	movs	r0, #3
 800e892:	f000 fcf1 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e896:	200e      	movs	r0, #14
 800e898:	f000 fcee 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e89c:	2009      	movs	r0, #9
 800e89e:	f000 fceb 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f000 fce8 	bl	800f278 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e8a8:	20e1      	movs	r0, #225	; 0xe1
 800e8aa:	f000 fcb3 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f000 fce2 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e8b4:	200e      	movs	r0, #14
 800e8b6:	f000 fcdf 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e8ba:	2014      	movs	r0, #20
 800e8bc:	f000 fcdc 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e8c0:	2003      	movs	r0, #3
 800e8c2:	f000 fcd9 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e8c6:	2011      	movs	r0, #17
 800e8c8:	f000 fcd6 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e8cc:	2007      	movs	r0, #7
 800e8ce:	f000 fcd3 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e8d2:	2031      	movs	r0, #49	; 0x31
 800e8d4:	f000 fcd0 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e8d8:	20c1      	movs	r0, #193	; 0xc1
 800e8da:	f000 fccd 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e8de:	2048      	movs	r0, #72	; 0x48
 800e8e0:	f000 fcca 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e8e4:	2008      	movs	r0, #8
 800e8e6:	f000 fcc7 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e8ea:	200f      	movs	r0, #15
 800e8ec:	f000 fcc4 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e8f0:	200c      	movs	r0, #12
 800e8f2:	f000 fcc1 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e8f6:	2031      	movs	r0, #49	; 0x31
 800e8f8:	f000 fcbe 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e8fc:	2036      	movs	r0, #54	; 0x36
 800e8fe:	f000 fcbb 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e902:	200f      	movs	r0, #15
 800e904:	f000 fcb8 	bl	800f278 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e908:	2011      	movs	r0, #17
 800e90a:	f000 fc83 	bl	800f214 <_LCD_SendCommand>
	HAL_Delay(240);
 800e90e:	20f0      	movs	r0, #240	; 0xf0
 800e910:	f7f9 fd98 	bl	8008444 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e914:	2029      	movs	r0, #41	; 0x29
 800e916:	f000 fc7d 	bl	800f214 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e91a:	2000      	movs	r0, #0
 800e91c:	f000 fb4e 	bl	800efbc <ILI9341_Set_Rotation>
}
 800e920:	bf00      	nop
 800e922:	bd80      	pop	{r7, pc}

0800e924 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e924:	b480      	push	{r7}
 800e926:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e928:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <ILI9341_SPI_Init+0x34>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e930:	2b40      	cmp	r3, #64	; 0x40
 800e932:	d005      	beq.n	800e940 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e934:	4b08      	ldr	r3, [pc, #32]	; (800e958 <ILI9341_SPI_Init+0x34>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a07      	ldr	r2, [pc, #28]	; (800e958 <ILI9341_SPI_Init+0x34>)
 800e93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e93e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e940:	4b06      	ldr	r3, [pc, #24]	; (800e95c <ILI9341_SPI_Init+0x38>)
 800e942:	695b      	ldr	r3, [r3, #20]
 800e944:	4a05      	ldr	r2, [pc, #20]	; (800e95c <ILI9341_SPI_Init+0x38>)
 800e946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e94a:	6153      	str	r3, [r2, #20]
}
 800e94c:	bf00      	nop
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	40003c00 	.word	0x40003c00
 800e95c:	48000400 	.word	0x48000400

0800e960 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b087      	sub	sp, #28
 800e964:	af02      	add	r7, sp, #8
 800e966:	4604      	mov	r4, r0
 800e968:	4608      	mov	r0, r1
 800e96a:	4611      	mov	r1, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	4623      	mov	r3, r4
 800e970:	80fb      	strh	r3, [r7, #6]
 800e972:	4603      	mov	r3, r0
 800e974:	80bb      	strh	r3, [r7, #4]
 800e976:	460b      	mov	r3, r1
 800e978:	807b      	strh	r3, [r7, #2]
 800e97a:	4613      	mov	r3, r2
 800e97c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e97e:	4b28      	ldr	r3, [pc, #160]	; (800ea20 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	b29b      	uxth	r3, r3
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	429a      	cmp	r2, r3
 800e988:	d246      	bcs.n	800ea18 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e98a:	4b26      	ldr	r3, [pc, #152]	; (800ea24 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	88ba      	ldrh	r2, [r7, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d240      	bcs.n	800ea18 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e996:	88fa      	ldrh	r2, [r7, #6]
 800e998:	887b      	ldrh	r3, [r7, #2]
 800e99a:	4413      	add	r3, r2
 800e99c:	3b01      	subs	r3, #1
 800e99e:	4a20      	ldr	r2, [pc, #128]	; (800ea20 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e9a0:	8812      	ldrh	r2, [r2, #0]
 800e9a2:	b292      	uxth	r2, r2
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	db05      	blt.n	800e9b4 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ea20 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e9b4:	88fa      	ldrh	r2, [r7, #6]
 800e9b6:	887b      	ldrh	r3, [r7, #2]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	88bb      	ldrh	r3, [r7, #4]
 800e9c2:	88b9      	ldrh	r1, [r7, #4]
 800e9c4:	88f8      	ldrh	r0, [r7, #6]
 800e9c6:	f000 f893 	bl	800eaf0 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e9ce:	887b      	ldrh	r3, [r7, #2]
 800e9d0:	f003 0301 	and.w	r3, r3, #1
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d009      	beq.n	800e9ec <ILI9341_Draw_Horizontal_Line+0x8c>
 800e9d8:	887b      	ldrh	r3, [r7, #2]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d906      	bls.n	800e9ec <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e9e2:	887b      	ldrh	r3, [r7, #2]
 800e9e4:	085b      	lsrs	r3, r3, #1
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e9ec:	887c      	ldrh	r4, [r7, #2]
 800e9ee:	883a      	ldrh	r2, [r7, #0]
 800e9f0:	88b9      	ldrh	r1, [r7, #4]
 800e9f2:	88f8      	ldrh	r0, [r7, #6]
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4623      	mov	r3, r4
 800e9fa:	f000 fb5b 	bl	800f0b4 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800ea04:	88fa      	ldrh	r2, [r7, #6]
 800ea06:	887b      	ldrh	r3, [r7, #2]
 800ea08:	4413      	add	r3, r2
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	883a      	ldrh	r2, [r7, #0]
 800ea0e:	88b9      	ldrh	r1, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 f8e3 	bl	800ebdc <ILI9341_Draw_Pixel>
 800ea16:	e000      	b.n	800ea1a <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ea18:	bf00      	nop
							(ypos),
							colour);
	}


}
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	20000c3e 	.word	0x20000c3e
 800ea24:	20000c3c 	.word	0x20000c3c

0800ea28 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800ea28:	b590      	push	{r4, r7, lr}
 800ea2a:	b087      	sub	sp, #28
 800ea2c:	af02      	add	r7, sp, #8
 800ea2e:	4604      	mov	r4, r0
 800ea30:	4608      	mov	r0, r1
 800ea32:	4611      	mov	r1, r2
 800ea34:	461a      	mov	r2, r3
 800ea36:	4623      	mov	r3, r4
 800ea38:	80fb      	strh	r3, [r7, #6]
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	80bb      	strh	r3, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	807b      	strh	r3, [r7, #2]
 800ea42:	4613      	mov	r3, r2
 800ea44:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800ea46:	4b28      	ldr	r3, [pc, #160]	; (800eae8 <ILI9341_Draw_Vertical_Line+0xc0>)
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	88fa      	ldrh	r2, [r7, #6]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d246      	bcs.n	800eae0 <ILI9341_Draw_Vertical_Line+0xb8>
 800ea52:	4b26      	ldr	r3, [pc, #152]	; (800eaec <ILI9341_Draw_Vertical_Line+0xc4>)
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	88ba      	ldrh	r2, [r7, #4]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d240      	bcs.n	800eae0 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800ea5e:	88ba      	ldrh	r2, [r7, #4]
 800ea60:	887b      	ldrh	r3, [r7, #2]
 800ea62:	4413      	add	r3, r2
 800ea64:	3b01      	subs	r3, #1
 800ea66:	4a21      	ldr	r2, [pc, #132]	; (800eaec <ILI9341_Draw_Vertical_Line+0xc4>)
 800ea68:	8812      	ldrh	r2, [r2, #0]
 800ea6a:	b292      	uxth	r2, r2
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	db05      	blt.n	800ea7c <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800ea70:	4b1e      	ldr	r3, [pc, #120]	; (800eaec <ILI9341_Draw_Vertical_Line+0xc4>)
 800ea72:	881b      	ldrh	r3, [r3, #0]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	88bb      	ldrh	r3, [r7, #4]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800ea7c:	88ba      	ldrh	r2, [r7, #4]
 800ea7e:	887b      	ldrh	r3, [r7, #2]
 800ea80:	4413      	add	r3, r2
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	3b01      	subs	r3, #1
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	88fa      	ldrh	r2, [r7, #6]
 800ea8a:	88b9      	ldrh	r1, [r7, #4]
 800ea8c:	88f8      	ldrh	r0, [r7, #6]
 800ea8e:	f000 f82f 	bl	800eaf0 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800ea96:	887b      	ldrh	r3, [r7, #2]
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d009      	beq.n	800eab4 <ILI9341_Draw_Vertical_Line+0x8c>
 800eaa0:	887b      	ldrh	r3, [r7, #2]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d906      	bls.n	800eab4 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800eaaa:	887b      	ldrh	r3, [r7, #2]
 800eaac:	085b      	lsrs	r3, r3, #1
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d008      	beq.n	800eacc <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800eaba:	88ba      	ldrh	r2, [r7, #4]
 800eabc:	887b      	ldrh	r3, [r7, #2]
 800eabe:	4413      	add	r3, r2
 800eac0:	b299      	uxth	r1, r3
 800eac2:	883a      	ldrh	r2, [r7, #0]
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 f888 	bl	800ebdc <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800eacc:	887c      	ldrh	r4, [r7, #2]
 800eace:	883a      	ldrh	r2, [r7, #0]
 800ead0:	88b9      	ldrh	r1, [r7, #4]
 800ead2:	88f8      	ldrh	r0, [r7, #6]
 800ead4:	2303      	movs	r3, #3
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	4623      	mov	r3, r4
 800eada:	f000 faeb 	bl	800f0b4 <_LCD_Write_Frame>
 800eade:	e000      	b.n	800eae2 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800eae0:	bf00      	nop
}
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd90      	pop	{r4, r7, pc}
 800eae8:	20000c3e 	.word	0x20000c3e
 800eaec:	20000c3c 	.word	0x20000c3c

0800eaf0 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800eaf0:	b590      	push	{r4, r7, lr}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	4608      	mov	r0, r1
 800eafa:	4611      	mov	r1, r2
 800eafc:	461a      	mov	r2, r3
 800eafe:	4623      	mov	r3, r4
 800eb00:	80fb      	strh	r3, [r7, #6]
 800eb02:	4603      	mov	r3, r0
 800eb04:	80bb      	strh	r3, [r7, #4]
 800eb06:	460b      	mov	r3, r1
 800eb08:	807b      	strh	r3, [r7, #2]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800eb0e:	202a      	movs	r0, #42	; 0x2a
 800eb10:	f000 fb80 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	0a1b      	lsrs	r3, r3, #8
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 fbab 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(sc);
 800eb22:	88fb      	ldrh	r3, [r7, #6]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 fba6 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800eb2c:	887b      	ldrh	r3, [r7, #2]
 800eb2e:	0a1b      	lsrs	r3, r3, #8
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	4618      	mov	r0, r3
 800eb36:	f000 fb9f 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(ec);
 800eb3a:	887b      	ldrh	r3, [r7, #2]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 fb9a 	bl	800f278 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800eb44:	202b      	movs	r0, #43	; 0x2b
 800eb46:	f000 fb65 	bl	800f214 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800eb4a:	88bb      	ldrh	r3, [r7, #4]
 800eb4c:	0a1b      	lsrs	r3, r3, #8
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 fb90 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(sp);
 800eb58:	88bb      	ldrh	r3, [r7, #4]
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fb8b 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800eb62:	883b      	ldrh	r3, [r7, #0]
 800eb64:	0a1b      	lsrs	r3, r3, #8
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 fb84 	bl	800f278 <_LCD_SendData>
	_LCD_SendData(ep);
 800eb70:	883b      	ldrh	r3, [r7, #0]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	4618      	mov	r0, r3
 800eb76:	f000 fb7f 	bl	800f278 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800eb7a:	202c      	movs	r0, #44	; 0x2c
 800eb7c:	f000 fb4a 	bl	800f214 <_LCD_SendCommand>
}
 800eb80:	bf00      	nop
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd90      	pop	{r4, r7, pc}

0800eb88 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	4603      	mov	r3, r0
 800eb90:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <ILI9341_Fill_Screen+0x4c>)
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <ILI9341_Fill_Screen+0x50>)
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	2100      	movs	r1, #0
 800eba0:	2000      	movs	r0, #0
 800eba2:	f7ff ffa5 	bl	800eaf0 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800eba6:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <ILI9341_Fill_Screen+0x4c>)
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	461a      	mov	r2, r3
 800ebae:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <ILI9341_Fill_Screen+0x50>)
 800ebb0:	881b      	ldrh	r3, [r3, #0]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	fb03 f302 	mul.w	r3, r3, r2
 800ebb8:	4619      	mov	r1, r3
 800ebba:	88fa      	ldrh	r2, [r7, #6]
 800ebbc:	2304      	movs	r3, #4
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	f000 fa75 	bl	800f0b4 <_LCD_Write_Frame>
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000c3e 	.word	0x20000c3e
 800ebd8:	20000c3c 	.word	0x20000c3c

0800ebdc <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	; 0x38
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	80fb      	strh	r3, [r7, #6]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	80bb      	strh	r3, [r7, #4]
 800ebea:	4613      	mov	r3, r2
 800ebec:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ebee:	4b98      	ldr	r3, [pc, #608]	; (800ee50 <ILI9341_Draw_Pixel+0x274>)
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	88fa      	ldrh	r2, [r7, #6]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	f080 8143 	bcs.w	800ee82 <ILI9341_Draw_Pixel+0x2a6>
 800ebfc:	4b95      	ldr	r3, [pc, #596]	; (800ee54 <ILI9341_Draw_Pixel+0x278>)
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	88ba      	ldrh	r2, [r7, #4]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	f080 813c 	bcs.w	800ee82 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ec0a:	4b93      	ldr	r3, [pc, #588]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	4a92      	ldr	r2, [pc, #584]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec14:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec16:	4b90      	ldr	r3, [pc, #576]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	4a8f      	ldr	r2, [pc, #572]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec20:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800ec22:	220a      	movs	r2, #10
 800ec24:	2100      	movs	r1, #0
 800ec26:	202a      	movs	r0, #42	; 0x2a
 800ec28:	f000 fb58 	bl	800f2dc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec30:	e008      	b.n	800ec44 <ILI9341_Draw_Pixel+0x68>
 800ec32:	4b89      	ldr	r3, [pc, #548]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec34:	695b      	ldr	r3, [r3, #20]
 800ec36:	4a88      	ldr	r2, [pc, #544]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec3c:	6153      	str	r3, [r2, #20]
 800ec3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec40:	3301      	adds	r3, #1
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
 800ec44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	ddf3      	ble.n	800ec32 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ec4a:	4b83      	ldr	r3, [pc, #524]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	4a82      	ldr	r2, [pc, #520]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec54:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ec56:	4b80      	ldr	r3, [pc, #512]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	4a7f      	ldr	r2, [pc, #508]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec60:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec62:	4b7d      	ldr	r3, [pc, #500]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	4a7c      	ldr	r2, [pc, #496]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ec68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec6c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800ec6e:	88fb      	ldrh	r3, [r7, #6]
 800ec70:	0a1b      	lsrs	r3, r3, #8
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	753b      	strb	r3, [r7, #20]
 800ec78:	88fb      	ldrh	r3, [r7, #6]
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	757b      	strb	r3, [r7, #21]
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	3301      	adds	r3, #1
 800ec82:	121b      	asrs	r3, r3, #8
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	75bb      	strb	r3, [r7, #22]
 800ec88:	88fb      	ldrh	r3, [r7, #6]
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800ec92:	f107 0014 	add.w	r0, r7, #20
 800ec96:	230a      	movs	r3, #10
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2104      	movs	r1, #4
 800ec9c:	f000 fb50 	bl	800f340 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eca0:	2300      	movs	r3, #0
 800eca2:	633b      	str	r3, [r7, #48]	; 0x30
 800eca4:	e008      	b.n	800ecb8 <ILI9341_Draw_Pixel+0xdc>
 800eca6:	4b6c      	ldr	r3, [pc, #432]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	4a6b      	ldr	r2, [pc, #428]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecb0:	6153      	str	r3, [r2, #20]
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	633b      	str	r3, [r7, #48]	; 0x30
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	ddf3      	ble.n	800eca6 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ecbe:	4b66      	ldr	r3, [pc, #408]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	4a65      	ldr	r2, [pc, #404]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecc8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ecca:	4b63      	ldr	r3, [pc, #396]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	4a62      	ldr	r2, [pc, #392]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecd4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecd6:	4b60      	ldr	r3, [pc, #384]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	4a5f      	ldr	r2, [pc, #380]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece0:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800ece2:	220a      	movs	r2, #10
 800ece4:	2100      	movs	r1, #0
 800ece6:	202b      	movs	r0, #43	; 0x2b
 800ece8:	f000 faf8 	bl	800f2dc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecec:	2300      	movs	r3, #0
 800ecee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecf0:	e008      	b.n	800ed04 <ILI9341_Draw_Pixel+0x128>
 800ecf2:	4b59      	ldr	r3, [pc, #356]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	4a58      	ldr	r2, [pc, #352]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ecf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecfc:	6153      	str	r3, [r2, #20]
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	3301      	adds	r3, #1
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	ddf3      	ble.n	800ecf2 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed0a:	4b53      	ldr	r3, [pc, #332]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	4a52      	ldr	r2, [pc, #328]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed14:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed16:	4b50      	ldr	r3, [pc, #320]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed18:	695b      	ldr	r3, [r3, #20]
 800ed1a:	4a4f      	ldr	r2, [pc, #316]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed20:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed22:	4b4d      	ldr	r3, [pc, #308]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed24:	695b      	ldr	r3, [r3, #20]
 800ed26:	4a4c      	ldr	r2, [pc, #304]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed2c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800ed2e:	88bb      	ldrh	r3, [r7, #4]
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	743b      	strb	r3, [r7, #16]
 800ed38:	88bb      	ldrh	r3, [r7, #4]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	747b      	strb	r3, [r7, #17]
 800ed3e:	88bb      	ldrh	r3, [r7, #4]
 800ed40:	3301      	adds	r3, #1
 800ed42:	121b      	asrs	r3, r3, #8
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	74bb      	strb	r3, [r7, #18]
 800ed48:	88bb      	ldrh	r3, [r7, #4]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800ed52:	f107 0010 	add.w	r0, r7, #16
 800ed56:	230a      	movs	r3, #10
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2104      	movs	r1, #4
 800ed5c:	f000 faf0 	bl	800f340 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed60:	2300      	movs	r3, #0
 800ed62:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed64:	e008      	b.n	800ed78 <ILI9341_Draw_Pixel+0x19c>
 800ed66:	4b3c      	ldr	r3, [pc, #240]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	4a3b      	ldr	r2, [pc, #236]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed70:	6153      	str	r3, [r2, #20]
 800ed72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed74:	3301      	adds	r3, #1
 800ed76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	ddf3      	ble.n	800ed66 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed7e:	4b36      	ldr	r3, [pc, #216]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	4a35      	ldr	r2, [pc, #212]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed88:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ed8a:	4b33      	ldr	r3, [pc, #204]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	4a32      	ldr	r2, [pc, #200]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed94:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed96:	4b30      	ldr	r3, [pc, #192]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	4a2f      	ldr	r2, [pc, #188]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ed9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eda0:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800eda2:	220a      	movs	r2, #10
 800eda4:	2100      	movs	r1, #0
 800eda6:	202c      	movs	r0, #44	; 0x2c
 800eda8:	f000 fa98 	bl	800f2dc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800edac:	2300      	movs	r3, #0
 800edae:	627b      	str	r3, [r7, #36]	; 0x24
 800edb0:	e008      	b.n	800edc4 <ILI9341_Draw_Pixel+0x1e8>
 800edb2:	4b29      	ldr	r3, [pc, #164]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800edb4:	695b      	ldr	r3, [r3, #20]
 800edb6:	4a28      	ldr	r2, [pc, #160]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800edb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edbc:	6153      	str	r3, [r2, #20]
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	3301      	adds	r3, #1
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	ddf3      	ble.n	800edb2 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800edca:	4b23      	ldr	r3, [pc, #140]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	4a22      	ldr	r2, [pc, #136]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800edd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edd4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800edd6:	4b20      	ldr	r3, [pc, #128]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	4a1f      	ldr	r2, [pc, #124]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800eddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ede0:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ede2:	4b1d      	ldr	r3, [pc, #116]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	4a1c      	ldr	r2, [pc, #112]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ede8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edec:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800edee:	887b      	ldrh	r3, [r7, #2]
 800edf0:	0a1b      	lsrs	r3, r3, #8
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	733b      	strb	r3, [r7, #12]
 800edf8:	887b      	ldrh	r3, [r7, #2]
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800edfe:	f107 000c 	add.w	r0, r7, #12
 800ee02:	2301      	movs	r3, #1
 800ee04:	2200      	movs	r2, #0
 800ee06:	2102      	movs	r1, #2
 800ee08:	f000 fa9a 	bl	800f340 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	623b      	str	r3, [r7, #32]
 800ee10:	e008      	b.n	800ee24 <ILI9341_Draw_Pixel+0x248>
 800ee12:	4b11      	ldr	r3, [pc, #68]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	4a10      	ldr	r2, [pc, #64]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ee18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee1c:	6153      	str	r3, [r2, #20]
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	3301      	adds	r3, #1
 800ee22:	623b      	str	r3, [r7, #32]
 800ee24:	6a3b      	ldr	r3, [r7, #32]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	ddf3      	ble.n	800ee12 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
 800ee2e:	e008      	b.n	800ee42 <ILI9341_Draw_Pixel+0x266>
 800ee30:	4b09      	ldr	r3, [pc, #36]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	4a08      	ldr	r2, [pc, #32]	; (800ee58 <ILI9341_Draw_Pixel+0x27c>)
 800ee36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee3a:	6153      	str	r3, [r2, #20]
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	61fb      	str	r3, [r7, #28]
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	ddf3      	ble.n	800ee30 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee48:	2300      	movs	r3, #0
 800ee4a:	61bb      	str	r3, [r7, #24]
 800ee4c:	e00f      	b.n	800ee6e <ILI9341_Draw_Pixel+0x292>
 800ee4e:	bf00      	nop
 800ee50:	20000c3e 	.word	0x20000c3e
 800ee54:	20000c3c 	.word	0x20000c3c
 800ee58:	48000400 	.word	0x48000400
 800ee5c:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <ILI9341_Draw_Pixel+0x2b0>)
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	4a0a      	ldr	r2, [pc, #40]	; (800ee8c <ILI9341_Draw_Pixel+0x2b0>)
 800ee62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee66:	6153      	str	r3, [r2, #20]
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	ddf3      	ble.n	800ee5c <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ee74:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <ILI9341_Draw_Pixel+0x2b0>)
 800ee76:	695b      	ldr	r3, [r3, #20]
 800ee78:	4a04      	ldr	r2, [pc, #16]	; (800ee8c <ILI9341_Draw_Pixel+0x2b0>)
 800ee7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee7e:	6153      	str	r3, [r2, #20]
 800ee80:	e000      	b.n	800ee84 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ee82:	bf00      	nop


}
 800ee84:	3738      	adds	r7, #56	; 0x38
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	48000400 	.word	0x48000400

0800ee90 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800ee90:	b590      	push	{r4, r7, lr}
 800ee92:	b087      	sub	sp, #28
 800ee94:	af02      	add	r7, sp, #8
 800ee96:	4604      	mov	r4, r0
 800ee98:	4608      	mov	r0, r1
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	4623      	mov	r3, r4
 800eea0:	80fb      	strh	r3, [r7, #6]
 800eea2:	4603      	mov	r3, r0
 800eea4:	80bb      	strh	r3, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	807b      	strh	r3, [r7, #2]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eeae:	4b41      	ldr	r3, [pc, #260]	; (800efb4 <ILI9341_Draw_Rectangle+0x124>)
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	88fa      	ldrh	r2, [r7, #6]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d278      	bcs.n	800efac <ILI9341_Draw_Rectangle+0x11c>
 800eeba:	4b3f      	ldr	r3, [pc, #252]	; (800efb8 <ILI9341_Draw_Rectangle+0x128>)
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	88ba      	ldrh	r2, [r7, #4]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d272      	bcs.n	800efac <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800eec6:	88fa      	ldrh	r2, [r7, #6]
 800eec8:	887b      	ldrh	r3, [r7, #2]
 800eeca:	4413      	add	r3, r2
 800eecc:	3b01      	subs	r3, #1
 800eece:	4a39      	ldr	r2, [pc, #228]	; (800efb4 <ILI9341_Draw_Rectangle+0x124>)
 800eed0:	8812      	ldrh	r2, [r2, #0]
 800eed2:	b292      	uxth	r2, r2
 800eed4:	4293      	cmp	r3, r2
 800eed6:	db05      	blt.n	800eee4 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800eed8:	4b36      	ldr	r3, [pc, #216]	; (800efb4 <ILI9341_Draw_Rectangle+0x124>)
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	b29a      	uxth	r2, r3
 800eede:	88fb      	ldrh	r3, [r7, #6]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800eee4:	88ba      	ldrh	r2, [r7, #4]
 800eee6:	883b      	ldrh	r3, [r7, #0]
 800eee8:	4413      	add	r3, r2
 800eeea:	3b01      	subs	r3, #1
 800eeec:	4a32      	ldr	r2, [pc, #200]	; (800efb8 <ILI9341_Draw_Rectangle+0x128>)
 800eeee:	8812      	ldrh	r2, [r2, #0]
 800eef0:	b292      	uxth	r2, r2
 800eef2:	4293      	cmp	r3, r2
 800eef4:	db05      	blt.n	800ef02 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800eef6:	4b30      	ldr	r3, [pc, #192]	; (800efb8 <ILI9341_Draw_Rectangle+0x128>)
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	88bb      	ldrh	r3, [r7, #4]
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ef02:	88fa      	ldrh	r2, [r7, #6]
 800ef04:	887b      	ldrh	r3, [r7, #2]
 800ef06:	4413      	add	r3, r2
 800ef08:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ef0e:	88ba      	ldrh	r2, [r7, #4]
 800ef10:	883b      	ldrh	r3, [r7, #0]
 800ef12:	4413      	add	r3, r2
 800ef14:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ef16:	3b01      	subs	r3, #1
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	88b9      	ldrh	r1, [r7, #4]
 800ef1c:	88f8      	ldrh	r0, [r7, #6]
 800ef1e:	4622      	mov	r2, r4
 800ef20:	f7ff fde6 	bl	800eaf0 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ef24:	883a      	ldrh	r2, [r7, #0]
 800ef26:	887b      	ldrh	r3, [r7, #2]
 800ef28:	fb12 f303 	smulbb	r3, r2, r3
 800ef2c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ef32:	89fb      	ldrh	r3, [r7, #14]
 800ef34:	f003 0301 	and.w	r3, r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d009      	beq.n	800ef50 <ILI9341_Draw_Rectangle+0xc0>
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d906      	bls.n	800ef50 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ef42:	2301      	movs	r3, #1
 800ef44:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ef46:	89fb      	ldrh	r3, [r7, #14]
 800ef48:	085b      	lsrs	r3, r3, #1
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	005b      	lsls	r3, r3, #1
 800ef4e:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ef50:	89fc      	ldrh	r4, [r7, #14]
 800ef52:	8c3a      	ldrh	r2, [r7, #32]
 800ef54:	88b9      	ldrh	r1, [r7, #4]
 800ef56:	88f8      	ldrh	r0, [r7, #6]
 800ef58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	4623      	mov	r3, r4
 800ef60:	f000 f8a8 	bl	800f0b4 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ef64:	7b7b      	ldrb	r3, [r7, #13]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d021      	beq.n	800efae <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ef6a:	88fa      	ldrh	r2, [r7, #6]
 800ef6c:	887b      	ldrh	r3, [r7, #2]
 800ef6e:	4413      	add	r3, r2
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	3b02      	subs	r3, #2
 800ef74:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ef76:	88ba      	ldrh	r2, [r7, #4]
 800ef78:	883b      	ldrh	r3, [r7, #0]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	8c3a      	ldrh	r2, [r7, #32]
 800ef84:	4619      	mov	r1, r3
 800ef86:	f7ff fe29 	bl	800ebdc <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ef8a:	88fa      	ldrh	r2, [r7, #6]
 800ef8c:	887b      	ldrh	r3, [r7, #2]
 800ef8e:	4413      	add	r3, r2
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	3b01      	subs	r3, #1
 800ef94:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ef96:	88ba      	ldrh	r2, [r7, #4]
 800ef98:	883b      	ldrh	r3, [r7, #0]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	8c3a      	ldrh	r2, [r7, #32]
 800efa4:	4619      	mov	r1, r3
 800efa6:	f7ff fe19 	bl	800ebdc <ILI9341_Draw_Pixel>
 800efaa:	e000      	b.n	800efae <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800efac:	bf00      	nop
							colour);
	}
}
 800efae:	3714      	adds	r7, #20
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd90      	pop	{r4, r7, pc}
 800efb4:	20000c3e 	.word	0x20000c3e
 800efb8:	20000c3c 	.word	0x20000c3c

0800efbc <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800efc6:	79fb      	ldrb	r3, [r7, #7]
 800efc8:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800efca:	2036      	movs	r0, #54	; 0x36
 800efcc:	f000 f922 	bl	800f214 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	d836      	bhi.n	800f044 <ILI9341_Set_Rotation+0x88>
 800efd6:	a201      	add	r2, pc, #4	; (adr r2, 800efdc <ILI9341_Set_Rotation+0x20>)
 800efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efdc:	0800efed 	.word	0x0800efed
 800efe0:	0800f003 	.word	0x0800f003
 800efe4:	0800f019 	.word	0x0800f019
 800efe8:	0800f02f 	.word	0x0800f02f
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800efec:	2048      	movs	r0, #72	; 0x48
 800efee:	f000 f943 	bl	800f278 <_LCD_SendData>
			LCD_WIDTH = 240;
 800eff2:	4b17      	ldr	r3, [pc, #92]	; (800f050 <ILI9341_Set_Rotation+0x94>)
 800eff4:	22f0      	movs	r2, #240	; 0xf0
 800eff6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800eff8:	4b16      	ldr	r3, [pc, #88]	; (800f054 <ILI9341_Set_Rotation+0x98>)
 800effa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800effe:	801a      	strh	r2, [r3, #0]
			break;
 800f000:	e021      	b.n	800f046 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800f002:	2028      	movs	r0, #40	; 0x28
 800f004:	f000 f938 	bl	800f278 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <ILI9341_Set_Rotation+0x94>)
 800f00a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f00e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800f010:	4b10      	ldr	r3, [pc, #64]	; (800f054 <ILI9341_Set_Rotation+0x98>)
 800f012:	22f0      	movs	r2, #240	; 0xf0
 800f014:	801a      	strh	r2, [r3, #0]
			break;
 800f016:	e016      	b.n	800f046 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800f018:	2088      	movs	r0, #136	; 0x88
 800f01a:	f000 f92d 	bl	800f278 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800f01e:	4b0c      	ldr	r3, [pc, #48]	; (800f050 <ILI9341_Set_Rotation+0x94>)
 800f020:	22f0      	movs	r2, #240	; 0xf0
 800f022:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800f024:	4b0b      	ldr	r3, [pc, #44]	; (800f054 <ILI9341_Set_Rotation+0x98>)
 800f026:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f02a:	801a      	strh	r2, [r3, #0]
			break;
 800f02c:	e00b      	b.n	800f046 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800f02e:	20e8      	movs	r0, #232	; 0xe8
 800f030:	f000 f922 	bl	800f278 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800f034:	4b06      	ldr	r3, [pc, #24]	; (800f050 <ILI9341_Set_Rotation+0x94>)
 800f036:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f03a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800f03c:	4b05      	ldr	r3, [pc, #20]	; (800f054 <ILI9341_Set_Rotation+0x98>)
 800f03e:	22f0      	movs	r2, #240	; 0xf0
 800f040:	801a      	strh	r2, [r3, #0]
			break;
 800f042:	e000      	b.n	800f046 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800f044:	bf00      	nop
	}
}
 800f046:	bf00      	nop
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000c3e 	.word	0x20000c3e
 800f054:	20000c3c 	.word	0x20000c3c

0800f058 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800f058:	b480      	push	{r7}
 800f05a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800f05c:	4b05      	ldr	r3, [pc, #20]	; (800f074 <_LCD_Enable+0x1c>)
 800f05e:	695b      	ldr	r3, [r3, #20]
 800f060:	4a04      	ldr	r2, [pc, #16]	; (800f074 <_LCD_Enable+0x1c>)
 800f062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f066:	6153      	str	r3, [r2, #20]
}
 800f068:	bf00      	nop
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	48000400 	.word	0x48000400

0800f078 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800f07c:	4b0c      	ldr	r3, [pc, #48]	; (800f0b0 <_LCD_Reset+0x38>)
 800f07e:	695b      	ldr	r3, [r3, #20]
 800f080:	4a0b      	ldr	r2, [pc, #44]	; (800f0b0 <_LCD_Reset+0x38>)
 800f082:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f086:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800f088:	20c8      	movs	r0, #200	; 0xc8
 800f08a:	f7f9 f9db 	bl	8008444 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f08e:	4b08      	ldr	r3, [pc, #32]	; (800f0b0 <_LCD_Reset+0x38>)
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	4a07      	ldr	r2, [pc, #28]	; (800f0b0 <_LCD_Reset+0x38>)
 800f094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f098:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800f09a:	20c8      	movs	r0, #200	; 0xc8
 800f09c:	f7f9 f9d2 	bl	8008444 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800f0a0:	4b03      	ldr	r3, [pc, #12]	; (800f0b0 <_LCD_Reset+0x38>)
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	4a02      	ldr	r2, [pc, #8]	; (800f0b0 <_LCD_Reset+0x38>)
 800f0a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0aa:	6153      	str	r3, [r2, #20]
}
 800f0ac:	bf00      	nop
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	48000400 	.word	0x48000400

0800f0b4 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800f0b4:	b5b0      	push	{r4, r5, r7, lr}
 800f0b6:	b08e      	sub	sp, #56	; 0x38
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	607b      	str	r3, [r7, #4]
 800f0bc:	4603      	mov	r3, r0
 800f0be:	81fb      	strh	r3, [r7, #14]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	81bb      	strh	r3, [r7, #12]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	817b      	strh	r3, [r7, #10]
 800f0c8:	466b      	mov	r3, sp
 800f0ca:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	4a4d      	ldr	r2, [pc, #308]	; (800f20c <_LCD_Write_Frame+0x158>)
 800f0d6:	8812      	ldrh	r2, [r2, #0]
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d202      	bcs.n	800f0e2 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0e0:	e002      	b.n	800f0e8 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800f0e2:	4b4a      	ldr	r3, [pc, #296]	; (800f20c <_LCD_Write_Frame+0x158>)
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800f0e8:	897b      	ldrh	r3, [r7, #10]
 800f0ea:	0a1b      	lsrs	r3, r3, #8
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800f0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	61bb      	str	r3, [r7, #24]
 800f0f8:	4601      	mov	r1, r0
 800f0fa:	f04f 0200 	mov.w	r2, #0
 800f0fe:	f04f 0300 	mov.w	r3, #0
 800f102:	f04f 0400 	mov.w	r4, #0
 800f106:	00d4      	lsls	r4, r2, #3
 800f108:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f10c:	00cb      	lsls	r3, r1, #3
 800f10e:	4601      	mov	r1, r0
 800f110:	f04f 0200 	mov.w	r2, #0
 800f114:	f04f 0300 	mov.w	r3, #0
 800f118:	f04f 0400 	mov.w	r4, #0
 800f11c:	00d4      	lsls	r4, r2, #3
 800f11e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f122:	00cb      	lsls	r3, r1, #3
 800f124:	1dc3      	adds	r3, r0, #7
 800f126:	08db      	lsrs	r3, r3, #3
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	ebad 0d03 	sub.w	sp, sp, r3
 800f12e:	466b      	mov	r3, sp
 800f130:	3300      	adds	r3, #0
 800f132:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f134:	2300      	movs	r3, #0
 800f136:	633b      	str	r3, [r7, #48]	; 0x30
 800f138:	e00d      	b.n	800f156 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800f13a:	697a      	ldr	r2, [r7, #20]
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	4413      	add	r3, r2
 800f140:	7ffa      	ldrb	r2, [r7, #31]
 800f142:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	3301      	adds	r3, #1
 800f148:	897a      	ldrh	r2, [r7, #10]
 800f14a:	b2d1      	uxtb	r1, r2
 800f14c:	697a      	ldr	r2, [r7, #20]
 800f14e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f152:	3302      	adds	r3, #2
 800f154:	633b      	str	r3, [r7, #48]	; 0x30
 800f156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d3ed      	bcc.n	800f13a <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	005b      	lsls	r3, r3, #1
 800f162:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800f164:	2301      	movs	r3, #1
 800f166:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00d      	beq.n	800f18e <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800f172:	693a      	ldr	r2, [r7, #16]
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	fbb2 f3f3 	udiv	r3, r2, r3
 800f17a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f180:	fbb3 f2f2 	udiv	r2, r3, r2
 800f184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f186:	fb01 f202 	mul.w	r2, r1, r2
 800f18a:	1a9b      	subs	r3, r3, r2
 800f18c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f18e:	4b20      	ldr	r3, [pc, #128]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	4a1f      	ldr	r2, [pc, #124]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f198:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f19a:	4b1d      	ldr	r3, [pc, #116]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	4a1c      	ldr	r2, [pc, #112]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f1a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1a4:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800f1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00f      	beq.n	800f1cc <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b0:	e008      	b.n	800f1c4 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800f1b2:	6978      	ldr	r0, [r7, #20]
 800f1b4:	230a      	movs	r3, #10
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1ba:	f000 f8c1 	bl	800f340 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d3f2      	bcc.n	800f1b2 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800f1cc:	6978      	ldr	r0, [r7, #20]
 800f1ce:	230a      	movs	r3, #10
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1d4:	f000 f8b4 	bl	800f340 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	623b      	str	r3, [r7, #32]
 800f1dc:	e008      	b.n	800f1f0 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1de:	4b0c      	ldr	r3, [pc, #48]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f1e0:	695b      	ldr	r3, [r3, #20]
 800f1e2:	4a0b      	ldr	r2, [pc, #44]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f1e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1e8:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	623b      	str	r3, [r7, #32]
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	ddf3      	ble.n	800f1de <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f1f6:	4b06      	ldr	r3, [pc, #24]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	4a05      	ldr	r2, [pc, #20]	; (800f210 <_LCD_Write_Frame+0x15c>)
 800f1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f200:	6153      	str	r3, [r2, #20]
 800f202:	46ad      	mov	sp, r5

}
 800f204:	bf00      	nop
 800f206:	3738      	adds	r7, #56	; 0x38
 800f208:	46bd      	mov	sp, r7
 800f20a:	bdb0      	pop	{r4, r5, r7, pc}
 800f20c:	20000c40 	.word	0x20000c40
 800f210:	48000400 	.word	0x48000400

0800f214 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f21e:	4b15      	ldr	r3, [pc, #84]	; (800f274 <_LCD_SendCommand+0x60>)
 800f220:	695b      	ldr	r3, [r3, #20]
 800f222:	4a14      	ldr	r2, [pc, #80]	; (800f274 <_LCD_SendCommand+0x60>)
 800f224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f228:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f22a:	4b12      	ldr	r3, [pc, #72]	; (800f274 <_LCD_SendCommand+0x60>)
 800f22c:	695b      	ldr	r3, [r3, #20]
 800f22e:	4a11      	ldr	r2, [pc, #68]	; (800f274 <_LCD_SendCommand+0x60>)
 800f230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f234:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	2200      	movs	r2, #0
 800f23a:	2100      	movs	r1, #0
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 f84d 	bl	800f2dc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f242:	2300      	movs	r3, #0
 800f244:	60fb      	str	r3, [r7, #12]
 800f246:	e008      	b.n	800f25a <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f248:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <_LCD_SendCommand+0x60>)
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	4a09      	ldr	r2, [pc, #36]	; (800f274 <_LCD_SendCommand+0x60>)
 800f24e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f252:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	ddf3      	ble.n	800f248 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f260:	4b04      	ldr	r3, [pc, #16]	; (800f274 <_LCD_SendCommand+0x60>)
 800f262:	695b      	ldr	r3, [r3, #20]
 800f264:	4a03      	ldr	r2, [pc, #12]	; (800f274 <_LCD_SendCommand+0x60>)
 800f266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f26a:	6153      	str	r3, [r2, #20]
}
 800f26c:	bf00      	nop
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	48000400 	.word	0x48000400

0800f278 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f282:	4b15      	ldr	r3, [pc, #84]	; (800f2d8 <_LCD_SendData+0x60>)
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	4a14      	ldr	r2, [pc, #80]	; (800f2d8 <_LCD_SendData+0x60>)
 800f288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f28e:	4b12      	ldr	r3, [pc, #72]	; (800f2d8 <_LCD_SendData+0x60>)
 800f290:	695b      	ldr	r3, [r3, #20]
 800f292:	4a11      	ldr	r2, [pc, #68]	; (800f2d8 <_LCD_SendData+0x60>)
 800f294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f298:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800f29a:	79fb      	ldrb	r3, [r7, #7]
 800f29c:	2200      	movs	r2, #0
 800f29e:	2100      	movs	r1, #0
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 f81b 	bl	800f2dc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	e008      	b.n	800f2be <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <_LCD_SendData+0x60>)
 800f2ae:	695b      	ldr	r3, [r3, #20]
 800f2b0:	4a09      	ldr	r2, [pc, #36]	; (800f2d8 <_LCD_SendData+0x60>)
 800f2b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2b6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	ddf3      	ble.n	800f2ac <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f2c4:	4b04      	ldr	r3, [pc, #16]	; (800f2d8 <_LCD_SendData+0x60>)
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	4a03      	ldr	r2, [pc, #12]	; (800f2d8 <_LCD_SendData+0x60>)
 800f2ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2ce:	6153      	str	r3, [r2, #20]
}
 800f2d0:	bf00      	nop
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	48000400 	.word	0x48000400

0800f2dc <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	71fb      	strb	r3, [r7, #7]
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	71bb      	strb	r3, [r7, #6]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e003      	b.n	800f2fc <_SPI_SendByte+0x20>
   		asm("nop");
 800f2f4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	79bb      	ldrb	r3, [r7, #6]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	429a      	cmp	r2, r3
 800f302:	dbf7      	blt.n	800f2f4 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f304:	4b0c      	ldr	r3, [pc, #48]	; (800f338 <_SPI_SendByte+0x5c>)
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d102      	bne.n	800f316 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800f310:	4a0a      	ldr	r2, [pc, #40]	; (800f33c <_SPI_SendByte+0x60>)
 800f312:	79fb      	ldrb	r3, [r7, #7]
 800f314:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f316:	2300      	movs	r3, #0
 800f318:	60bb      	str	r3, [r7, #8]
 800f31a:	e003      	b.n	800f324 <_SPI_SendByte+0x48>
   		asm("nop");
 800f31c:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	3301      	adds	r3, #1
 800f322:	60bb      	str	r3, [r7, #8]
 800f324:	797b      	ldrb	r3, [r7, #5]
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	429a      	cmp	r2, r3
 800f32a:	dbf7      	blt.n	800f31c <_SPI_SendByte+0x40>

#endif

}
 800f32c:	bf00      	nop
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	40003c00 	.word	0x40003c00
 800f33c:	40003c0c 	.word	0x40003c0c

0800f340 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f340:	b480      	push	{r7}
 800f342:	b089      	sub	sp, #36	; 0x24
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	4611      	mov	r1, r2
 800f34c:	461a      	mov	r2, r3
 800f34e:	460b      	mov	r3, r1
 800f350:	71fb      	strb	r3, [r7, #7]
 800f352:	4613      	mov	r3, r2
 800f354:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f356:	2300      	movs	r3, #0
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e003      	b.n	800f364 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800f35c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	3301      	adds	r3, #1
 800f362:	61fb      	str	r3, [r7, #28]
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	69fa      	ldr	r2, [r7, #28]
 800f368:	429a      	cmp	r2, r3
 800f36a:	dbf7      	blt.n	800f35c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800f370:	e01d      	b.n	800f3ae <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f372:	4b1c      	ldr	r3, [pc, #112]	; (800f3e4 <_SPI_SendByteMultiByte+0xa4>)
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d117      	bne.n	800f3ae <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d90a      	bls.n	800f39a <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	881a      	ldrh	r2, [r3, #0]
 800f388:	4b16      	ldr	r3, [pc, #88]	; (800f3e4 <_SPI_SendByteMultiByte+0xa4>)
 800f38a:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	3302      	adds	r3, #2
 800f390:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	3b02      	subs	r3, #2
 800f396:	60bb      	str	r3, [r7, #8]
 800f398:	e009      	b.n	800f3ae <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800f39a:	4a13      	ldr	r2, [pc, #76]	; (800f3e8 <_SPI_SendByteMultiByte+0xa8>)
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1de      	bne.n	800f372 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800f3b4:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <_SPI_SendByteMultiByte+0xa4>)
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	4a0a      	ldr	r2, [pc, #40]	; (800f3e4 <_SPI_SendByteMultiByte+0xa4>)
 800f3ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3be:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e003      	b.n	800f3ce <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800f3c6:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	79bb      	ldrb	r3, [r7, #6]
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	dbf7      	blt.n	800f3c6 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800f3d6:	bf00      	nop
 800f3d8:	3724      	adds	r7, #36	; 0x24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	40003c00 	.word	0x40003c00
 800f3e8:	40003c0c 	.word	0x40003c0c

0800f3ec <__errno>:
 800f3ec:	4b01      	ldr	r3, [pc, #4]	; (800f3f4 <__errno+0x8>)
 800f3ee:	6818      	ldr	r0, [r3, #0]
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	20001c34 	.word	0x20001c34

0800f3f8 <__libc_init_array>:
 800f3f8:	b570      	push	{r4, r5, r6, lr}
 800f3fa:	4e0d      	ldr	r6, [pc, #52]	; (800f430 <__libc_init_array+0x38>)
 800f3fc:	4c0d      	ldr	r4, [pc, #52]	; (800f434 <__libc_init_array+0x3c>)
 800f3fe:	1ba4      	subs	r4, r4, r6
 800f400:	10a4      	asrs	r4, r4, #2
 800f402:	2500      	movs	r5, #0
 800f404:	42a5      	cmp	r5, r4
 800f406:	d109      	bne.n	800f41c <__libc_init_array+0x24>
 800f408:	4e0b      	ldr	r6, [pc, #44]	; (800f438 <__libc_init_array+0x40>)
 800f40a:	4c0c      	ldr	r4, [pc, #48]	; (800f43c <__libc_init_array+0x44>)
 800f40c:	f004 f89e 	bl	801354c <_init>
 800f410:	1ba4      	subs	r4, r4, r6
 800f412:	10a4      	asrs	r4, r4, #2
 800f414:	2500      	movs	r5, #0
 800f416:	42a5      	cmp	r5, r4
 800f418:	d105      	bne.n	800f426 <__libc_init_array+0x2e>
 800f41a:	bd70      	pop	{r4, r5, r6, pc}
 800f41c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f420:	4798      	blx	r3
 800f422:	3501      	adds	r5, #1
 800f424:	e7ee      	b.n	800f404 <__libc_init_array+0xc>
 800f426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f42a:	4798      	blx	r3
 800f42c:	3501      	adds	r5, #1
 800f42e:	e7f2      	b.n	800f416 <__libc_init_array+0x1e>
 800f430:	08014928 	.word	0x08014928
 800f434:	08014928 	.word	0x08014928
 800f438:	08014928 	.word	0x08014928
 800f43c:	0801492c 	.word	0x0801492c

0800f440 <memset>:
 800f440:	4402      	add	r2, r0
 800f442:	4603      	mov	r3, r0
 800f444:	4293      	cmp	r3, r2
 800f446:	d100      	bne.n	800f44a <memset+0xa>
 800f448:	4770      	bx	lr
 800f44a:	f803 1b01 	strb.w	r1, [r3], #1
 800f44e:	e7f9      	b.n	800f444 <memset+0x4>

0800f450 <__cvt>:
 800f450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	ec55 4b10 	vmov	r4, r5, d0
 800f458:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f45a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f45e:	2d00      	cmp	r5, #0
 800f460:	460e      	mov	r6, r1
 800f462:	4691      	mov	r9, r2
 800f464:	4619      	mov	r1, r3
 800f466:	bfb8      	it	lt
 800f468:	4622      	movlt	r2, r4
 800f46a:	462b      	mov	r3, r5
 800f46c:	f027 0720 	bic.w	r7, r7, #32
 800f470:	bfbb      	ittet	lt
 800f472:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f476:	461d      	movlt	r5, r3
 800f478:	2300      	movge	r3, #0
 800f47a:	232d      	movlt	r3, #45	; 0x2d
 800f47c:	bfb8      	it	lt
 800f47e:	4614      	movlt	r4, r2
 800f480:	2f46      	cmp	r7, #70	; 0x46
 800f482:	700b      	strb	r3, [r1, #0]
 800f484:	d004      	beq.n	800f490 <__cvt+0x40>
 800f486:	2f45      	cmp	r7, #69	; 0x45
 800f488:	d100      	bne.n	800f48c <__cvt+0x3c>
 800f48a:	3601      	adds	r6, #1
 800f48c:	2102      	movs	r1, #2
 800f48e:	e000      	b.n	800f492 <__cvt+0x42>
 800f490:	2103      	movs	r1, #3
 800f492:	ab03      	add	r3, sp, #12
 800f494:	9301      	str	r3, [sp, #4]
 800f496:	ab02      	add	r3, sp, #8
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	4632      	mov	r2, r6
 800f49c:	4653      	mov	r3, sl
 800f49e:	ec45 4b10 	vmov	d0, r4, r5
 800f4a2:	f000 fe3d 	bl	8010120 <_dtoa_r>
 800f4a6:	2f47      	cmp	r7, #71	; 0x47
 800f4a8:	4680      	mov	r8, r0
 800f4aa:	d102      	bne.n	800f4b2 <__cvt+0x62>
 800f4ac:	f019 0f01 	tst.w	r9, #1
 800f4b0:	d026      	beq.n	800f500 <__cvt+0xb0>
 800f4b2:	2f46      	cmp	r7, #70	; 0x46
 800f4b4:	eb08 0906 	add.w	r9, r8, r6
 800f4b8:	d111      	bne.n	800f4de <__cvt+0x8e>
 800f4ba:	f898 3000 	ldrb.w	r3, [r8]
 800f4be:	2b30      	cmp	r3, #48	; 0x30
 800f4c0:	d10a      	bne.n	800f4d8 <__cvt+0x88>
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	f7f1 fb25 	bl	8000b18 <__aeabi_dcmpeq>
 800f4ce:	b918      	cbnz	r0, 800f4d8 <__cvt+0x88>
 800f4d0:	f1c6 0601 	rsb	r6, r6, #1
 800f4d4:	f8ca 6000 	str.w	r6, [sl]
 800f4d8:	f8da 3000 	ldr.w	r3, [sl]
 800f4dc:	4499      	add	r9, r3
 800f4de:	2200      	movs	r2, #0
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	f7f1 fb17 	bl	8000b18 <__aeabi_dcmpeq>
 800f4ea:	b938      	cbnz	r0, 800f4fc <__cvt+0xac>
 800f4ec:	2230      	movs	r2, #48	; 0x30
 800f4ee:	9b03      	ldr	r3, [sp, #12]
 800f4f0:	454b      	cmp	r3, r9
 800f4f2:	d205      	bcs.n	800f500 <__cvt+0xb0>
 800f4f4:	1c59      	adds	r1, r3, #1
 800f4f6:	9103      	str	r1, [sp, #12]
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	e7f8      	b.n	800f4ee <__cvt+0x9e>
 800f4fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f500:	9b03      	ldr	r3, [sp, #12]
 800f502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f504:	eba3 0308 	sub.w	r3, r3, r8
 800f508:	4640      	mov	r0, r8
 800f50a:	6013      	str	r3, [r2, #0]
 800f50c:	b004      	add	sp, #16
 800f50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f512 <__exponent>:
 800f512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f514:	2900      	cmp	r1, #0
 800f516:	4604      	mov	r4, r0
 800f518:	bfba      	itte	lt
 800f51a:	4249      	neglt	r1, r1
 800f51c:	232d      	movlt	r3, #45	; 0x2d
 800f51e:	232b      	movge	r3, #43	; 0x2b
 800f520:	2909      	cmp	r1, #9
 800f522:	f804 2b02 	strb.w	r2, [r4], #2
 800f526:	7043      	strb	r3, [r0, #1]
 800f528:	dd20      	ble.n	800f56c <__exponent+0x5a>
 800f52a:	f10d 0307 	add.w	r3, sp, #7
 800f52e:	461f      	mov	r7, r3
 800f530:	260a      	movs	r6, #10
 800f532:	fb91 f5f6 	sdiv	r5, r1, r6
 800f536:	fb06 1115 	mls	r1, r6, r5, r1
 800f53a:	3130      	adds	r1, #48	; 0x30
 800f53c:	2d09      	cmp	r5, #9
 800f53e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f542:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f546:	4629      	mov	r1, r5
 800f548:	dc09      	bgt.n	800f55e <__exponent+0x4c>
 800f54a:	3130      	adds	r1, #48	; 0x30
 800f54c:	3b02      	subs	r3, #2
 800f54e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f552:	42bb      	cmp	r3, r7
 800f554:	4622      	mov	r2, r4
 800f556:	d304      	bcc.n	800f562 <__exponent+0x50>
 800f558:	1a10      	subs	r0, r2, r0
 800f55a:	b003      	add	sp, #12
 800f55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55e:	4613      	mov	r3, r2
 800f560:	e7e7      	b.n	800f532 <__exponent+0x20>
 800f562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f566:	f804 2b01 	strb.w	r2, [r4], #1
 800f56a:	e7f2      	b.n	800f552 <__exponent+0x40>
 800f56c:	2330      	movs	r3, #48	; 0x30
 800f56e:	4419      	add	r1, r3
 800f570:	7083      	strb	r3, [r0, #2]
 800f572:	1d02      	adds	r2, r0, #4
 800f574:	70c1      	strb	r1, [r0, #3]
 800f576:	e7ef      	b.n	800f558 <__exponent+0x46>

0800f578 <_printf_float>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	b08d      	sub	sp, #52	; 0x34
 800f57e:	460c      	mov	r4, r1
 800f580:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f584:	4616      	mov	r6, r2
 800f586:	461f      	mov	r7, r3
 800f588:	4605      	mov	r5, r0
 800f58a:	f001 fcfb 	bl	8010f84 <_localeconv_r>
 800f58e:	6803      	ldr	r3, [r0, #0]
 800f590:	9304      	str	r3, [sp, #16]
 800f592:	4618      	mov	r0, r3
 800f594:	f7f0 fe44 	bl	8000220 <strlen>
 800f598:	2300      	movs	r3, #0
 800f59a:	930a      	str	r3, [sp, #40]	; 0x28
 800f59c:	f8d8 3000 	ldr.w	r3, [r8]
 800f5a0:	9005      	str	r0, [sp, #20]
 800f5a2:	3307      	adds	r3, #7
 800f5a4:	f023 0307 	bic.w	r3, r3, #7
 800f5a8:	f103 0208 	add.w	r2, r3, #8
 800f5ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5b0:	f8d4 b000 	ldr.w	fp, [r4]
 800f5b4:	f8c8 2000 	str.w	r2, [r8]
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5c8:	9307      	str	r3, [sp, #28]
 800f5ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5d2:	4ba7      	ldr	r3, [pc, #668]	; (800f870 <_printf_float+0x2f8>)
 800f5d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5d8:	f7f1 fad0 	bl	8000b7c <__aeabi_dcmpun>
 800f5dc:	bb70      	cbnz	r0, 800f63c <_printf_float+0xc4>
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e2:	4ba3      	ldr	r3, [pc, #652]	; (800f870 <_printf_float+0x2f8>)
 800f5e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e8:	f7f1 faaa 	bl	8000b40 <__aeabi_dcmple>
 800f5ec:	bb30      	cbnz	r0, 800f63c <_printf_float+0xc4>
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4640      	mov	r0, r8
 800f5f4:	4649      	mov	r1, r9
 800f5f6:	f7f1 fa99 	bl	8000b2c <__aeabi_dcmplt>
 800f5fa:	b110      	cbz	r0, 800f602 <_printf_float+0x8a>
 800f5fc:	232d      	movs	r3, #45	; 0x2d
 800f5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f602:	4a9c      	ldr	r2, [pc, #624]	; (800f874 <_printf_float+0x2fc>)
 800f604:	4b9c      	ldr	r3, [pc, #624]	; (800f878 <_printf_float+0x300>)
 800f606:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f60a:	bf8c      	ite	hi
 800f60c:	4690      	movhi	r8, r2
 800f60e:	4698      	movls	r8, r3
 800f610:	2303      	movs	r3, #3
 800f612:	f02b 0204 	bic.w	r2, fp, #4
 800f616:	6123      	str	r3, [r4, #16]
 800f618:	6022      	str	r2, [r4, #0]
 800f61a:	f04f 0900 	mov.w	r9, #0
 800f61e:	9700      	str	r7, [sp, #0]
 800f620:	4633      	mov	r3, r6
 800f622:	aa0b      	add	r2, sp, #44	; 0x2c
 800f624:	4621      	mov	r1, r4
 800f626:	4628      	mov	r0, r5
 800f628:	f000 f9e6 	bl	800f9f8 <_printf_common>
 800f62c:	3001      	adds	r0, #1
 800f62e:	f040 808d 	bne.w	800f74c <_printf_float+0x1d4>
 800f632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f636:	b00d      	add	sp, #52	; 0x34
 800f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	4642      	mov	r2, r8
 800f63e:	464b      	mov	r3, r9
 800f640:	4640      	mov	r0, r8
 800f642:	4649      	mov	r1, r9
 800f644:	f7f1 fa9a 	bl	8000b7c <__aeabi_dcmpun>
 800f648:	b110      	cbz	r0, 800f650 <_printf_float+0xd8>
 800f64a:	4a8c      	ldr	r2, [pc, #560]	; (800f87c <_printf_float+0x304>)
 800f64c:	4b8c      	ldr	r3, [pc, #560]	; (800f880 <_printf_float+0x308>)
 800f64e:	e7da      	b.n	800f606 <_printf_float+0x8e>
 800f650:	6861      	ldr	r1, [r4, #4]
 800f652:	1c4b      	adds	r3, r1, #1
 800f654:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f658:	a80a      	add	r0, sp, #40	; 0x28
 800f65a:	d13e      	bne.n	800f6da <_printf_float+0x162>
 800f65c:	2306      	movs	r3, #6
 800f65e:	6063      	str	r3, [r4, #4]
 800f660:	2300      	movs	r3, #0
 800f662:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f666:	ab09      	add	r3, sp, #36	; 0x24
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	ec49 8b10 	vmov	d0, r8, r9
 800f66e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f672:	6022      	str	r2, [r4, #0]
 800f674:	f8cd a004 	str.w	sl, [sp, #4]
 800f678:	6861      	ldr	r1, [r4, #4]
 800f67a:	4628      	mov	r0, r5
 800f67c:	f7ff fee8 	bl	800f450 <__cvt>
 800f680:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f684:	2b47      	cmp	r3, #71	; 0x47
 800f686:	4680      	mov	r8, r0
 800f688:	d109      	bne.n	800f69e <_printf_float+0x126>
 800f68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f68c:	1cd8      	adds	r0, r3, #3
 800f68e:	db02      	blt.n	800f696 <_printf_float+0x11e>
 800f690:	6862      	ldr	r2, [r4, #4]
 800f692:	4293      	cmp	r3, r2
 800f694:	dd47      	ble.n	800f726 <_printf_float+0x1ae>
 800f696:	f1aa 0a02 	sub.w	sl, sl, #2
 800f69a:	fa5f fa8a 	uxtb.w	sl, sl
 800f69e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f6a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6a4:	d824      	bhi.n	800f6f0 <_printf_float+0x178>
 800f6a6:	3901      	subs	r1, #1
 800f6a8:	4652      	mov	r2, sl
 800f6aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6ae:	9109      	str	r1, [sp, #36]	; 0x24
 800f6b0:	f7ff ff2f 	bl	800f512 <__exponent>
 800f6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6b6:	1813      	adds	r3, r2, r0
 800f6b8:	2a01      	cmp	r2, #1
 800f6ba:	4681      	mov	r9, r0
 800f6bc:	6123      	str	r3, [r4, #16]
 800f6be:	dc02      	bgt.n	800f6c6 <_printf_float+0x14e>
 800f6c0:	6822      	ldr	r2, [r4, #0]
 800f6c2:	07d1      	lsls	r1, r2, #31
 800f6c4:	d501      	bpl.n	800f6ca <_printf_float+0x152>
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d0a5      	beq.n	800f61e <_printf_float+0xa6>
 800f6d2:	232d      	movs	r3, #45	; 0x2d
 800f6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6d8:	e7a1      	b.n	800f61e <_printf_float+0xa6>
 800f6da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f6de:	f000 8177 	beq.w	800f9d0 <_printf_float+0x458>
 800f6e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f6e6:	d1bb      	bne.n	800f660 <_printf_float+0xe8>
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	d1b9      	bne.n	800f660 <_printf_float+0xe8>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e7b6      	b.n	800f65e <_printf_float+0xe6>
 800f6f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f6f4:	d119      	bne.n	800f72a <_printf_float+0x1b2>
 800f6f6:	2900      	cmp	r1, #0
 800f6f8:	6863      	ldr	r3, [r4, #4]
 800f6fa:	dd0c      	ble.n	800f716 <_printf_float+0x19e>
 800f6fc:	6121      	str	r1, [r4, #16]
 800f6fe:	b913      	cbnz	r3, 800f706 <_printf_float+0x18e>
 800f700:	6822      	ldr	r2, [r4, #0]
 800f702:	07d2      	lsls	r2, r2, #31
 800f704:	d502      	bpl.n	800f70c <_printf_float+0x194>
 800f706:	3301      	adds	r3, #1
 800f708:	440b      	add	r3, r1
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70e:	65a3      	str	r3, [r4, #88]	; 0x58
 800f710:	f04f 0900 	mov.w	r9, #0
 800f714:	e7d9      	b.n	800f6ca <_printf_float+0x152>
 800f716:	b913      	cbnz	r3, 800f71e <_printf_float+0x1a6>
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	07d0      	lsls	r0, r2, #31
 800f71c:	d501      	bpl.n	800f722 <_printf_float+0x1aa>
 800f71e:	3302      	adds	r3, #2
 800f720:	e7f3      	b.n	800f70a <_printf_float+0x192>
 800f722:	2301      	movs	r3, #1
 800f724:	e7f1      	b.n	800f70a <_printf_float+0x192>
 800f726:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f72a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f72e:	4293      	cmp	r3, r2
 800f730:	db05      	blt.n	800f73e <_printf_float+0x1c6>
 800f732:	6822      	ldr	r2, [r4, #0]
 800f734:	6123      	str	r3, [r4, #16]
 800f736:	07d1      	lsls	r1, r2, #31
 800f738:	d5e8      	bpl.n	800f70c <_printf_float+0x194>
 800f73a:	3301      	adds	r3, #1
 800f73c:	e7e5      	b.n	800f70a <_printf_float+0x192>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	bfd4      	ite	le
 800f742:	f1c3 0302 	rsble	r3, r3, #2
 800f746:	2301      	movgt	r3, #1
 800f748:	4413      	add	r3, r2
 800f74a:	e7de      	b.n	800f70a <_printf_float+0x192>
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	055a      	lsls	r2, r3, #21
 800f750:	d407      	bmi.n	800f762 <_printf_float+0x1ea>
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	4642      	mov	r2, r8
 800f756:	4631      	mov	r1, r6
 800f758:	4628      	mov	r0, r5
 800f75a:	47b8      	blx	r7
 800f75c:	3001      	adds	r0, #1
 800f75e:	d12b      	bne.n	800f7b8 <_printf_float+0x240>
 800f760:	e767      	b.n	800f632 <_printf_float+0xba>
 800f762:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f766:	f240 80dc 	bls.w	800f922 <_printf_float+0x3aa>
 800f76a:	2200      	movs	r2, #0
 800f76c:	2300      	movs	r3, #0
 800f76e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f772:	f7f1 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 800f776:	2800      	cmp	r0, #0
 800f778:	d033      	beq.n	800f7e2 <_printf_float+0x26a>
 800f77a:	2301      	movs	r3, #1
 800f77c:	4a41      	ldr	r2, [pc, #260]	; (800f884 <_printf_float+0x30c>)
 800f77e:	4631      	mov	r1, r6
 800f780:	4628      	mov	r0, r5
 800f782:	47b8      	blx	r7
 800f784:	3001      	adds	r0, #1
 800f786:	f43f af54 	beq.w	800f632 <_printf_float+0xba>
 800f78a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f78e:	429a      	cmp	r2, r3
 800f790:	db02      	blt.n	800f798 <_printf_float+0x220>
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	07d8      	lsls	r0, r3, #31
 800f796:	d50f      	bpl.n	800f7b8 <_printf_float+0x240>
 800f798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f79c:	4631      	mov	r1, r6
 800f79e:	4628      	mov	r0, r5
 800f7a0:	47b8      	blx	r7
 800f7a2:	3001      	adds	r0, #1
 800f7a4:	f43f af45 	beq.w	800f632 <_printf_float+0xba>
 800f7a8:	f04f 0800 	mov.w	r8, #0
 800f7ac:	f104 091a 	add.w	r9, r4, #26
 800f7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	4543      	cmp	r3, r8
 800f7b6:	dc09      	bgt.n	800f7cc <_printf_float+0x254>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	079b      	lsls	r3, r3, #30
 800f7bc:	f100 8103 	bmi.w	800f9c6 <_printf_float+0x44e>
 800f7c0:	68e0      	ldr	r0, [r4, #12]
 800f7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7c4:	4298      	cmp	r0, r3
 800f7c6:	bfb8      	it	lt
 800f7c8:	4618      	movlt	r0, r3
 800f7ca:	e734      	b.n	800f636 <_printf_float+0xbe>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	464a      	mov	r2, r9
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	47b8      	blx	r7
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	f43f af2b 	beq.w	800f632 <_printf_float+0xba>
 800f7dc:	f108 0801 	add.w	r8, r8, #1
 800f7e0:	e7e6      	b.n	800f7b0 <_printf_float+0x238>
 800f7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	dc2b      	bgt.n	800f840 <_printf_float+0x2c8>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4a26      	ldr	r2, [pc, #152]	; (800f884 <_printf_float+0x30c>)
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	47b8      	blx	r7
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f43f af1d 	beq.w	800f632 <_printf_float+0xba>
 800f7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fa:	b923      	cbnz	r3, 800f806 <_printf_float+0x28e>
 800f7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7fe:	b913      	cbnz	r3, 800f806 <_printf_float+0x28e>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	07d9      	lsls	r1, r3, #31
 800f804:	d5d8      	bpl.n	800f7b8 <_printf_float+0x240>
 800f806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f80a:	4631      	mov	r1, r6
 800f80c:	4628      	mov	r0, r5
 800f80e:	47b8      	blx	r7
 800f810:	3001      	adds	r0, #1
 800f812:	f43f af0e 	beq.w	800f632 <_printf_float+0xba>
 800f816:	f04f 0900 	mov.w	r9, #0
 800f81a:	f104 0a1a 	add.w	sl, r4, #26
 800f81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f820:	425b      	negs	r3, r3
 800f822:	454b      	cmp	r3, r9
 800f824:	dc01      	bgt.n	800f82a <_printf_float+0x2b2>
 800f826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f828:	e794      	b.n	800f754 <_printf_float+0x1dc>
 800f82a:	2301      	movs	r3, #1
 800f82c:	4652      	mov	r2, sl
 800f82e:	4631      	mov	r1, r6
 800f830:	4628      	mov	r0, r5
 800f832:	47b8      	blx	r7
 800f834:	3001      	adds	r0, #1
 800f836:	f43f aefc 	beq.w	800f632 <_printf_float+0xba>
 800f83a:	f109 0901 	add.w	r9, r9, #1
 800f83e:	e7ee      	b.n	800f81e <_printf_float+0x2a6>
 800f840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f844:	429a      	cmp	r2, r3
 800f846:	bfa8      	it	ge
 800f848:	461a      	movge	r2, r3
 800f84a:	2a00      	cmp	r2, #0
 800f84c:	4691      	mov	r9, r2
 800f84e:	dd07      	ble.n	800f860 <_printf_float+0x2e8>
 800f850:	4613      	mov	r3, r2
 800f852:	4631      	mov	r1, r6
 800f854:	4642      	mov	r2, r8
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	f43f aee9 	beq.w	800f632 <_printf_float+0xba>
 800f860:	f104 031a 	add.w	r3, r4, #26
 800f864:	f04f 0b00 	mov.w	fp, #0
 800f868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f86c:	9306      	str	r3, [sp, #24]
 800f86e:	e015      	b.n	800f89c <_printf_float+0x324>
 800f870:	7fefffff 	.word	0x7fefffff
 800f874:	08014620 	.word	0x08014620
 800f878:	0801461c 	.word	0x0801461c
 800f87c:	08014628 	.word	0x08014628
 800f880:	08014624 	.word	0x08014624
 800f884:	080148dc 	.word	0x080148dc
 800f888:	2301      	movs	r3, #1
 800f88a:	9a06      	ldr	r2, [sp, #24]
 800f88c:	4631      	mov	r1, r6
 800f88e:	4628      	mov	r0, r5
 800f890:	47b8      	blx	r7
 800f892:	3001      	adds	r0, #1
 800f894:	f43f aecd 	beq.w	800f632 <_printf_float+0xba>
 800f898:	f10b 0b01 	add.w	fp, fp, #1
 800f89c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f8a0:	ebaa 0309 	sub.w	r3, sl, r9
 800f8a4:	455b      	cmp	r3, fp
 800f8a6:	dcef      	bgt.n	800f888 <_printf_float+0x310>
 800f8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	44d0      	add	r8, sl
 800f8b0:	db15      	blt.n	800f8de <_printf_float+0x366>
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	07da      	lsls	r2, r3, #31
 800f8b6:	d412      	bmi.n	800f8de <_printf_float+0x366>
 800f8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8bc:	eba3 020a 	sub.w	r2, r3, sl
 800f8c0:	eba3 0a01 	sub.w	sl, r3, r1
 800f8c4:	4592      	cmp	sl, r2
 800f8c6:	bfa8      	it	ge
 800f8c8:	4692      	movge	sl, r2
 800f8ca:	f1ba 0f00 	cmp.w	sl, #0
 800f8ce:	dc0e      	bgt.n	800f8ee <_printf_float+0x376>
 800f8d0:	f04f 0800 	mov.w	r8, #0
 800f8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8d8:	f104 091a 	add.w	r9, r4, #26
 800f8dc:	e019      	b.n	800f912 <_printf_float+0x39a>
 800f8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d1e5      	bne.n	800f8b8 <_printf_float+0x340>
 800f8ec:	e6a1      	b.n	800f632 <_printf_float+0xba>
 800f8ee:	4653      	mov	r3, sl
 800f8f0:	4642      	mov	r2, r8
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d1e9      	bne.n	800f8d0 <_printf_float+0x358>
 800f8fc:	e699      	b.n	800f632 <_printf_float+0xba>
 800f8fe:	2301      	movs	r3, #1
 800f900:	464a      	mov	r2, r9
 800f902:	4631      	mov	r1, r6
 800f904:	4628      	mov	r0, r5
 800f906:	47b8      	blx	r7
 800f908:	3001      	adds	r0, #1
 800f90a:	f43f ae92 	beq.w	800f632 <_printf_float+0xba>
 800f90e:	f108 0801 	add.w	r8, r8, #1
 800f912:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f916:	1a9b      	subs	r3, r3, r2
 800f918:	eba3 030a 	sub.w	r3, r3, sl
 800f91c:	4543      	cmp	r3, r8
 800f91e:	dcee      	bgt.n	800f8fe <_printf_float+0x386>
 800f920:	e74a      	b.n	800f7b8 <_printf_float+0x240>
 800f922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f924:	2a01      	cmp	r2, #1
 800f926:	dc01      	bgt.n	800f92c <_printf_float+0x3b4>
 800f928:	07db      	lsls	r3, r3, #31
 800f92a:	d53a      	bpl.n	800f9a2 <_printf_float+0x42a>
 800f92c:	2301      	movs	r3, #1
 800f92e:	4642      	mov	r2, r8
 800f930:	4631      	mov	r1, r6
 800f932:	4628      	mov	r0, r5
 800f934:	47b8      	blx	r7
 800f936:	3001      	adds	r0, #1
 800f938:	f43f ae7b 	beq.w	800f632 <_printf_float+0xba>
 800f93c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f940:	4631      	mov	r1, r6
 800f942:	4628      	mov	r0, r5
 800f944:	47b8      	blx	r7
 800f946:	3001      	adds	r0, #1
 800f948:	f108 0801 	add.w	r8, r8, #1
 800f94c:	f43f ae71 	beq.w	800f632 <_printf_float+0xba>
 800f950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f952:	2200      	movs	r2, #0
 800f954:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f95c:	2300      	movs	r3, #0
 800f95e:	f7f1 f8db 	bl	8000b18 <__aeabi_dcmpeq>
 800f962:	b9c8      	cbnz	r0, 800f998 <_printf_float+0x420>
 800f964:	4653      	mov	r3, sl
 800f966:	4642      	mov	r2, r8
 800f968:	4631      	mov	r1, r6
 800f96a:	4628      	mov	r0, r5
 800f96c:	47b8      	blx	r7
 800f96e:	3001      	adds	r0, #1
 800f970:	d10e      	bne.n	800f990 <_printf_float+0x418>
 800f972:	e65e      	b.n	800f632 <_printf_float+0xba>
 800f974:	2301      	movs	r3, #1
 800f976:	4652      	mov	r2, sl
 800f978:	4631      	mov	r1, r6
 800f97a:	4628      	mov	r0, r5
 800f97c:	47b8      	blx	r7
 800f97e:	3001      	adds	r0, #1
 800f980:	f43f ae57 	beq.w	800f632 <_printf_float+0xba>
 800f984:	f108 0801 	add.w	r8, r8, #1
 800f988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f98a:	3b01      	subs	r3, #1
 800f98c:	4543      	cmp	r3, r8
 800f98e:	dcf1      	bgt.n	800f974 <_printf_float+0x3fc>
 800f990:	464b      	mov	r3, r9
 800f992:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f996:	e6de      	b.n	800f756 <_printf_float+0x1de>
 800f998:	f04f 0800 	mov.w	r8, #0
 800f99c:	f104 0a1a 	add.w	sl, r4, #26
 800f9a0:	e7f2      	b.n	800f988 <_printf_float+0x410>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e7df      	b.n	800f966 <_printf_float+0x3ee>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	464a      	mov	r2, r9
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	47b8      	blx	r7
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	f43f ae3e 	beq.w	800f632 <_printf_float+0xba>
 800f9b6:	f108 0801 	add.w	r8, r8, #1
 800f9ba:	68e3      	ldr	r3, [r4, #12]
 800f9bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9be:	1a9b      	subs	r3, r3, r2
 800f9c0:	4543      	cmp	r3, r8
 800f9c2:	dcf0      	bgt.n	800f9a6 <_printf_float+0x42e>
 800f9c4:	e6fc      	b.n	800f7c0 <_printf_float+0x248>
 800f9c6:	f04f 0800 	mov.w	r8, #0
 800f9ca:	f104 0919 	add.w	r9, r4, #25
 800f9ce:	e7f4      	b.n	800f9ba <_printf_float+0x442>
 800f9d0:	2900      	cmp	r1, #0
 800f9d2:	f43f ae8b 	beq.w	800f6ec <_printf_float+0x174>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f9dc:	ab09      	add	r3, sp, #36	; 0x24
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	ec49 8b10 	vmov	d0, r8, r9
 800f9e4:	6022      	str	r2, [r4, #0]
 800f9e6:	f8cd a004 	str.w	sl, [sp, #4]
 800f9ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f7ff fd2e 	bl	800f450 <__cvt>
 800f9f4:	4680      	mov	r8, r0
 800f9f6:	e648      	b.n	800f68a <_printf_float+0x112>

0800f9f8 <_printf_common>:
 800f9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9fc:	4691      	mov	r9, r2
 800f9fe:	461f      	mov	r7, r3
 800fa00:	688a      	ldr	r2, [r1, #8]
 800fa02:	690b      	ldr	r3, [r1, #16]
 800fa04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	bfb8      	it	lt
 800fa0c:	4613      	movlt	r3, r2
 800fa0e:	f8c9 3000 	str.w	r3, [r9]
 800fa12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa16:	4606      	mov	r6, r0
 800fa18:	460c      	mov	r4, r1
 800fa1a:	b112      	cbz	r2, 800fa22 <_printf_common+0x2a>
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	f8c9 3000 	str.w	r3, [r9]
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	0699      	lsls	r1, r3, #26
 800fa26:	bf42      	ittt	mi
 800fa28:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fa2c:	3302      	addmi	r3, #2
 800fa2e:	f8c9 3000 	strmi.w	r3, [r9]
 800fa32:	6825      	ldr	r5, [r4, #0]
 800fa34:	f015 0506 	ands.w	r5, r5, #6
 800fa38:	d107      	bne.n	800fa4a <_printf_common+0x52>
 800fa3a:	f104 0a19 	add.w	sl, r4, #25
 800fa3e:	68e3      	ldr	r3, [r4, #12]
 800fa40:	f8d9 2000 	ldr.w	r2, [r9]
 800fa44:	1a9b      	subs	r3, r3, r2
 800fa46:	42ab      	cmp	r3, r5
 800fa48:	dc28      	bgt.n	800fa9c <_printf_common+0xa4>
 800fa4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa4e:	6822      	ldr	r2, [r4, #0]
 800fa50:	3300      	adds	r3, #0
 800fa52:	bf18      	it	ne
 800fa54:	2301      	movne	r3, #1
 800fa56:	0692      	lsls	r2, r2, #26
 800fa58:	d42d      	bmi.n	800fab6 <_printf_common+0xbe>
 800fa5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa5e:	4639      	mov	r1, r7
 800fa60:	4630      	mov	r0, r6
 800fa62:	47c0      	blx	r8
 800fa64:	3001      	adds	r0, #1
 800fa66:	d020      	beq.n	800faaa <_printf_common+0xb2>
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	68e5      	ldr	r5, [r4, #12]
 800fa6c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa70:	f003 0306 	and.w	r3, r3, #6
 800fa74:	2b04      	cmp	r3, #4
 800fa76:	bf08      	it	eq
 800fa78:	1aad      	subeq	r5, r5, r2
 800fa7a:	68a3      	ldr	r3, [r4, #8]
 800fa7c:	6922      	ldr	r2, [r4, #16]
 800fa7e:	bf0c      	ite	eq
 800fa80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa84:	2500      	movne	r5, #0
 800fa86:	4293      	cmp	r3, r2
 800fa88:	bfc4      	itt	gt
 800fa8a:	1a9b      	subgt	r3, r3, r2
 800fa8c:	18ed      	addgt	r5, r5, r3
 800fa8e:	f04f 0900 	mov.w	r9, #0
 800fa92:	341a      	adds	r4, #26
 800fa94:	454d      	cmp	r5, r9
 800fa96:	d11a      	bne.n	800face <_printf_common+0xd6>
 800fa98:	2000      	movs	r0, #0
 800fa9a:	e008      	b.n	800faae <_printf_common+0xb6>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4652      	mov	r2, sl
 800faa0:	4639      	mov	r1, r7
 800faa2:	4630      	mov	r0, r6
 800faa4:	47c0      	blx	r8
 800faa6:	3001      	adds	r0, #1
 800faa8:	d103      	bne.n	800fab2 <_printf_common+0xba>
 800faaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	3501      	adds	r5, #1
 800fab4:	e7c3      	b.n	800fa3e <_printf_common+0x46>
 800fab6:	18e1      	adds	r1, r4, r3
 800fab8:	1c5a      	adds	r2, r3, #1
 800faba:	2030      	movs	r0, #48	; 0x30
 800fabc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fac0:	4422      	add	r2, r4
 800fac2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800faca:	3302      	adds	r3, #2
 800facc:	e7c5      	b.n	800fa5a <_printf_common+0x62>
 800face:	2301      	movs	r3, #1
 800fad0:	4622      	mov	r2, r4
 800fad2:	4639      	mov	r1, r7
 800fad4:	4630      	mov	r0, r6
 800fad6:	47c0      	blx	r8
 800fad8:	3001      	adds	r0, #1
 800fada:	d0e6      	beq.n	800faaa <_printf_common+0xb2>
 800fadc:	f109 0901 	add.w	r9, r9, #1
 800fae0:	e7d8      	b.n	800fa94 <_printf_common+0x9c>
	...

0800fae4 <_printf_i>:
 800fae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fae8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800faec:	460c      	mov	r4, r1
 800faee:	7e09      	ldrb	r1, [r1, #24]
 800faf0:	b085      	sub	sp, #20
 800faf2:	296e      	cmp	r1, #110	; 0x6e
 800faf4:	4617      	mov	r7, r2
 800faf6:	4606      	mov	r6, r0
 800faf8:	4698      	mov	r8, r3
 800fafa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fafc:	f000 80b3 	beq.w	800fc66 <_printf_i+0x182>
 800fb00:	d822      	bhi.n	800fb48 <_printf_i+0x64>
 800fb02:	2963      	cmp	r1, #99	; 0x63
 800fb04:	d036      	beq.n	800fb74 <_printf_i+0x90>
 800fb06:	d80a      	bhi.n	800fb1e <_printf_i+0x3a>
 800fb08:	2900      	cmp	r1, #0
 800fb0a:	f000 80b9 	beq.w	800fc80 <_printf_i+0x19c>
 800fb0e:	2958      	cmp	r1, #88	; 0x58
 800fb10:	f000 8083 	beq.w	800fc1a <_printf_i+0x136>
 800fb14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fb1c:	e032      	b.n	800fb84 <_printf_i+0xa0>
 800fb1e:	2964      	cmp	r1, #100	; 0x64
 800fb20:	d001      	beq.n	800fb26 <_printf_i+0x42>
 800fb22:	2969      	cmp	r1, #105	; 0x69
 800fb24:	d1f6      	bne.n	800fb14 <_printf_i+0x30>
 800fb26:	6820      	ldr	r0, [r4, #0]
 800fb28:	6813      	ldr	r3, [r2, #0]
 800fb2a:	0605      	lsls	r5, r0, #24
 800fb2c:	f103 0104 	add.w	r1, r3, #4
 800fb30:	d52a      	bpl.n	800fb88 <_printf_i+0xa4>
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6011      	str	r1, [r2, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	da03      	bge.n	800fb42 <_printf_i+0x5e>
 800fb3a:	222d      	movs	r2, #45	; 0x2d
 800fb3c:	425b      	negs	r3, r3
 800fb3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fb42:	486f      	ldr	r0, [pc, #444]	; (800fd00 <_printf_i+0x21c>)
 800fb44:	220a      	movs	r2, #10
 800fb46:	e039      	b.n	800fbbc <_printf_i+0xd8>
 800fb48:	2973      	cmp	r1, #115	; 0x73
 800fb4a:	f000 809d 	beq.w	800fc88 <_printf_i+0x1a4>
 800fb4e:	d808      	bhi.n	800fb62 <_printf_i+0x7e>
 800fb50:	296f      	cmp	r1, #111	; 0x6f
 800fb52:	d020      	beq.n	800fb96 <_printf_i+0xb2>
 800fb54:	2970      	cmp	r1, #112	; 0x70
 800fb56:	d1dd      	bne.n	800fb14 <_printf_i+0x30>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	f043 0320 	orr.w	r3, r3, #32
 800fb5e:	6023      	str	r3, [r4, #0]
 800fb60:	e003      	b.n	800fb6a <_printf_i+0x86>
 800fb62:	2975      	cmp	r1, #117	; 0x75
 800fb64:	d017      	beq.n	800fb96 <_printf_i+0xb2>
 800fb66:	2978      	cmp	r1, #120	; 0x78
 800fb68:	d1d4      	bne.n	800fb14 <_printf_i+0x30>
 800fb6a:	2378      	movs	r3, #120	; 0x78
 800fb6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb70:	4864      	ldr	r0, [pc, #400]	; (800fd04 <_printf_i+0x220>)
 800fb72:	e055      	b.n	800fc20 <_printf_i+0x13c>
 800fb74:	6813      	ldr	r3, [r2, #0]
 800fb76:	1d19      	adds	r1, r3, #4
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	6011      	str	r1, [r2, #0]
 800fb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb84:	2301      	movs	r3, #1
 800fb86:	e08c      	b.n	800fca2 <_printf_i+0x1be>
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6011      	str	r1, [r2, #0]
 800fb8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb90:	bf18      	it	ne
 800fb92:	b21b      	sxthne	r3, r3
 800fb94:	e7cf      	b.n	800fb36 <_printf_i+0x52>
 800fb96:	6813      	ldr	r3, [r2, #0]
 800fb98:	6825      	ldr	r5, [r4, #0]
 800fb9a:	1d18      	adds	r0, r3, #4
 800fb9c:	6010      	str	r0, [r2, #0]
 800fb9e:	0628      	lsls	r0, r5, #24
 800fba0:	d501      	bpl.n	800fba6 <_printf_i+0xc2>
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	e002      	b.n	800fbac <_printf_i+0xc8>
 800fba6:	0668      	lsls	r0, r5, #25
 800fba8:	d5fb      	bpl.n	800fba2 <_printf_i+0xbe>
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	4854      	ldr	r0, [pc, #336]	; (800fd00 <_printf_i+0x21c>)
 800fbae:	296f      	cmp	r1, #111	; 0x6f
 800fbb0:	bf14      	ite	ne
 800fbb2:	220a      	movne	r2, #10
 800fbb4:	2208      	moveq	r2, #8
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbbc:	6865      	ldr	r5, [r4, #4]
 800fbbe:	60a5      	str	r5, [r4, #8]
 800fbc0:	2d00      	cmp	r5, #0
 800fbc2:	f2c0 8095 	blt.w	800fcf0 <_printf_i+0x20c>
 800fbc6:	6821      	ldr	r1, [r4, #0]
 800fbc8:	f021 0104 	bic.w	r1, r1, #4
 800fbcc:	6021      	str	r1, [r4, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d13d      	bne.n	800fc4e <_printf_i+0x16a>
 800fbd2:	2d00      	cmp	r5, #0
 800fbd4:	f040 808e 	bne.w	800fcf4 <_printf_i+0x210>
 800fbd8:	4665      	mov	r5, ip
 800fbda:	2a08      	cmp	r2, #8
 800fbdc:	d10b      	bne.n	800fbf6 <_printf_i+0x112>
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	07db      	lsls	r3, r3, #31
 800fbe2:	d508      	bpl.n	800fbf6 <_printf_i+0x112>
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	6862      	ldr	r2, [r4, #4]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	bfde      	ittt	le
 800fbec:	2330      	movle	r3, #48	; 0x30
 800fbee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbf2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fbf6:	ebac 0305 	sub.w	r3, ip, r5
 800fbfa:	6123      	str	r3, [r4, #16]
 800fbfc:	f8cd 8000 	str.w	r8, [sp]
 800fc00:	463b      	mov	r3, r7
 800fc02:	aa03      	add	r2, sp, #12
 800fc04:	4621      	mov	r1, r4
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff fef6 	bl	800f9f8 <_printf_common>
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	d14d      	bne.n	800fcac <_printf_i+0x1c8>
 800fc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc14:	b005      	add	sp, #20
 800fc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1a:	4839      	ldr	r0, [pc, #228]	; (800fd00 <_printf_i+0x21c>)
 800fc1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fc20:	6813      	ldr	r3, [r2, #0]
 800fc22:	6821      	ldr	r1, [r4, #0]
 800fc24:	1d1d      	adds	r5, r3, #4
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	6015      	str	r5, [r2, #0]
 800fc2a:	060a      	lsls	r2, r1, #24
 800fc2c:	d50b      	bpl.n	800fc46 <_printf_i+0x162>
 800fc2e:	07ca      	lsls	r2, r1, #31
 800fc30:	bf44      	itt	mi
 800fc32:	f041 0120 	orrmi.w	r1, r1, #32
 800fc36:	6021      	strmi	r1, [r4, #0]
 800fc38:	b91b      	cbnz	r3, 800fc42 <_printf_i+0x15e>
 800fc3a:	6822      	ldr	r2, [r4, #0]
 800fc3c:	f022 0220 	bic.w	r2, r2, #32
 800fc40:	6022      	str	r2, [r4, #0]
 800fc42:	2210      	movs	r2, #16
 800fc44:	e7b7      	b.n	800fbb6 <_printf_i+0xd2>
 800fc46:	064d      	lsls	r5, r1, #25
 800fc48:	bf48      	it	mi
 800fc4a:	b29b      	uxthmi	r3, r3
 800fc4c:	e7ef      	b.n	800fc2e <_printf_i+0x14a>
 800fc4e:	4665      	mov	r5, ip
 800fc50:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc54:	fb02 3311 	mls	r3, r2, r1, r3
 800fc58:	5cc3      	ldrb	r3, [r0, r3]
 800fc5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fc5e:	460b      	mov	r3, r1
 800fc60:	2900      	cmp	r1, #0
 800fc62:	d1f5      	bne.n	800fc50 <_printf_i+0x16c>
 800fc64:	e7b9      	b.n	800fbda <_printf_i+0xf6>
 800fc66:	6813      	ldr	r3, [r2, #0]
 800fc68:	6825      	ldr	r5, [r4, #0]
 800fc6a:	6961      	ldr	r1, [r4, #20]
 800fc6c:	1d18      	adds	r0, r3, #4
 800fc6e:	6010      	str	r0, [r2, #0]
 800fc70:	0628      	lsls	r0, r5, #24
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	d501      	bpl.n	800fc7a <_printf_i+0x196>
 800fc76:	6019      	str	r1, [r3, #0]
 800fc78:	e002      	b.n	800fc80 <_printf_i+0x19c>
 800fc7a:	066a      	lsls	r2, r5, #25
 800fc7c:	d5fb      	bpl.n	800fc76 <_printf_i+0x192>
 800fc7e:	8019      	strh	r1, [r3, #0]
 800fc80:	2300      	movs	r3, #0
 800fc82:	6123      	str	r3, [r4, #16]
 800fc84:	4665      	mov	r5, ip
 800fc86:	e7b9      	b.n	800fbfc <_printf_i+0x118>
 800fc88:	6813      	ldr	r3, [r2, #0]
 800fc8a:	1d19      	adds	r1, r3, #4
 800fc8c:	6011      	str	r1, [r2, #0]
 800fc8e:	681d      	ldr	r5, [r3, #0]
 800fc90:	6862      	ldr	r2, [r4, #4]
 800fc92:	2100      	movs	r1, #0
 800fc94:	4628      	mov	r0, r5
 800fc96:	f7f0 facb 	bl	8000230 <memchr>
 800fc9a:	b108      	cbz	r0, 800fca0 <_printf_i+0x1bc>
 800fc9c:	1b40      	subs	r0, r0, r5
 800fc9e:	6060      	str	r0, [r4, #4]
 800fca0:	6863      	ldr	r3, [r4, #4]
 800fca2:	6123      	str	r3, [r4, #16]
 800fca4:	2300      	movs	r3, #0
 800fca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcaa:	e7a7      	b.n	800fbfc <_printf_i+0x118>
 800fcac:	6923      	ldr	r3, [r4, #16]
 800fcae:	462a      	mov	r2, r5
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	47c0      	blx	r8
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	d0aa      	beq.n	800fc10 <_printf_i+0x12c>
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	079b      	lsls	r3, r3, #30
 800fcbe:	d413      	bmi.n	800fce8 <_printf_i+0x204>
 800fcc0:	68e0      	ldr	r0, [r4, #12]
 800fcc2:	9b03      	ldr	r3, [sp, #12]
 800fcc4:	4298      	cmp	r0, r3
 800fcc6:	bfb8      	it	lt
 800fcc8:	4618      	movlt	r0, r3
 800fcca:	e7a3      	b.n	800fc14 <_printf_i+0x130>
 800fccc:	2301      	movs	r3, #1
 800fcce:	464a      	mov	r2, r9
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	47c0      	blx	r8
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	d09a      	beq.n	800fc10 <_printf_i+0x12c>
 800fcda:	3501      	adds	r5, #1
 800fcdc:	68e3      	ldr	r3, [r4, #12]
 800fcde:	9a03      	ldr	r2, [sp, #12]
 800fce0:	1a9b      	subs	r3, r3, r2
 800fce2:	42ab      	cmp	r3, r5
 800fce4:	dcf2      	bgt.n	800fccc <_printf_i+0x1e8>
 800fce6:	e7eb      	b.n	800fcc0 <_printf_i+0x1dc>
 800fce8:	2500      	movs	r5, #0
 800fcea:	f104 0919 	add.w	r9, r4, #25
 800fcee:	e7f5      	b.n	800fcdc <_printf_i+0x1f8>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1ac      	bne.n	800fc4e <_printf_i+0x16a>
 800fcf4:	7803      	ldrb	r3, [r0, #0]
 800fcf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcfe:	e76c      	b.n	800fbda <_printf_i+0xf6>
 800fd00:	0801462c 	.word	0x0801462c
 800fd04:	0801463d 	.word	0x0801463d

0800fd08 <iprintf>:
 800fd08:	b40f      	push	{r0, r1, r2, r3}
 800fd0a:	4b0a      	ldr	r3, [pc, #40]	; (800fd34 <iprintf+0x2c>)
 800fd0c:	b513      	push	{r0, r1, r4, lr}
 800fd0e:	681c      	ldr	r4, [r3, #0]
 800fd10:	b124      	cbz	r4, 800fd1c <iprintf+0x14>
 800fd12:	69a3      	ldr	r3, [r4, #24]
 800fd14:	b913      	cbnz	r3, 800fd1c <iprintf+0x14>
 800fd16:	4620      	mov	r0, r4
 800fd18:	f001 f8aa 	bl	8010e70 <__sinit>
 800fd1c:	ab05      	add	r3, sp, #20
 800fd1e:	9a04      	ldr	r2, [sp, #16]
 800fd20:	68a1      	ldr	r1, [r4, #8]
 800fd22:	9301      	str	r3, [sp, #4]
 800fd24:	4620      	mov	r0, r4
 800fd26:	f001 febf 	bl	8011aa8 <_vfiprintf_r>
 800fd2a:	b002      	add	sp, #8
 800fd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd30:	b004      	add	sp, #16
 800fd32:	4770      	bx	lr
 800fd34:	20001c34 	.word	0x20001c34

0800fd38 <_puts_r>:
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	460e      	mov	r6, r1
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	b118      	cbz	r0, 800fd48 <_puts_r+0x10>
 800fd40:	6983      	ldr	r3, [r0, #24]
 800fd42:	b90b      	cbnz	r3, 800fd48 <_puts_r+0x10>
 800fd44:	f001 f894 	bl	8010e70 <__sinit>
 800fd48:	69ab      	ldr	r3, [r5, #24]
 800fd4a:	68ac      	ldr	r4, [r5, #8]
 800fd4c:	b913      	cbnz	r3, 800fd54 <_puts_r+0x1c>
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f001 f88e 	bl	8010e70 <__sinit>
 800fd54:	4b23      	ldr	r3, [pc, #140]	; (800fde4 <_puts_r+0xac>)
 800fd56:	429c      	cmp	r4, r3
 800fd58:	d117      	bne.n	800fd8a <_puts_r+0x52>
 800fd5a:	686c      	ldr	r4, [r5, #4]
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	071b      	lsls	r3, r3, #28
 800fd60:	d51d      	bpl.n	800fd9e <_puts_r+0x66>
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	b1db      	cbz	r3, 800fd9e <_puts_r+0x66>
 800fd66:	3e01      	subs	r6, #1
 800fd68:	68a3      	ldr	r3, [r4, #8]
 800fd6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd6e:	3b01      	subs	r3, #1
 800fd70:	60a3      	str	r3, [r4, #8]
 800fd72:	b9e9      	cbnz	r1, 800fdb0 <_puts_r+0x78>
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da2e      	bge.n	800fdd6 <_puts_r+0x9e>
 800fd78:	4622      	mov	r2, r4
 800fd7a:	210a      	movs	r1, #10
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	f000 f883 	bl	800fe88 <__swbuf_r>
 800fd82:	3001      	adds	r0, #1
 800fd84:	d011      	beq.n	800fdaa <_puts_r+0x72>
 800fd86:	200a      	movs	r0, #10
 800fd88:	e011      	b.n	800fdae <_puts_r+0x76>
 800fd8a:	4b17      	ldr	r3, [pc, #92]	; (800fde8 <_puts_r+0xb0>)
 800fd8c:	429c      	cmp	r4, r3
 800fd8e:	d101      	bne.n	800fd94 <_puts_r+0x5c>
 800fd90:	68ac      	ldr	r4, [r5, #8]
 800fd92:	e7e3      	b.n	800fd5c <_puts_r+0x24>
 800fd94:	4b15      	ldr	r3, [pc, #84]	; (800fdec <_puts_r+0xb4>)
 800fd96:	429c      	cmp	r4, r3
 800fd98:	bf08      	it	eq
 800fd9a:	68ec      	ldreq	r4, [r5, #12]
 800fd9c:	e7de      	b.n	800fd5c <_puts_r+0x24>
 800fd9e:	4621      	mov	r1, r4
 800fda0:	4628      	mov	r0, r5
 800fda2:	f000 f8c3 	bl	800ff2c <__swsetup_r>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d0dd      	beq.n	800fd66 <_puts_r+0x2e>
 800fdaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da04      	bge.n	800fdbe <_puts_r+0x86>
 800fdb4:	69a2      	ldr	r2, [r4, #24]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	dc06      	bgt.n	800fdc8 <_puts_r+0x90>
 800fdba:	290a      	cmp	r1, #10
 800fdbc:	d004      	beq.n	800fdc8 <_puts_r+0x90>
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	1c5a      	adds	r2, r3, #1
 800fdc2:	6022      	str	r2, [r4, #0]
 800fdc4:	7019      	strb	r1, [r3, #0]
 800fdc6:	e7cf      	b.n	800fd68 <_puts_r+0x30>
 800fdc8:	4622      	mov	r2, r4
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f000 f85c 	bl	800fe88 <__swbuf_r>
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d1c9      	bne.n	800fd68 <_puts_r+0x30>
 800fdd4:	e7e9      	b.n	800fdaa <_puts_r+0x72>
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	200a      	movs	r0, #10
 800fdda:	1c5a      	adds	r2, r3, #1
 800fddc:	6022      	str	r2, [r4, #0]
 800fdde:	7018      	strb	r0, [r3, #0]
 800fde0:	e7e5      	b.n	800fdae <_puts_r+0x76>
 800fde2:	bf00      	nop
 800fde4:	0801467c 	.word	0x0801467c
 800fde8:	0801469c 	.word	0x0801469c
 800fdec:	0801465c 	.word	0x0801465c

0800fdf0 <puts>:
 800fdf0:	4b02      	ldr	r3, [pc, #8]	; (800fdfc <puts+0xc>)
 800fdf2:	4601      	mov	r1, r0
 800fdf4:	6818      	ldr	r0, [r3, #0]
 800fdf6:	f7ff bf9f 	b.w	800fd38 <_puts_r>
 800fdfa:	bf00      	nop
 800fdfc:	20001c34 	.word	0x20001c34

0800fe00 <sniprintf>:
 800fe00:	b40c      	push	{r2, r3}
 800fe02:	b530      	push	{r4, r5, lr}
 800fe04:	4b17      	ldr	r3, [pc, #92]	; (800fe64 <sniprintf+0x64>)
 800fe06:	1e0c      	subs	r4, r1, #0
 800fe08:	b09d      	sub	sp, #116	; 0x74
 800fe0a:	681d      	ldr	r5, [r3, #0]
 800fe0c:	da08      	bge.n	800fe20 <sniprintf+0x20>
 800fe0e:	238b      	movs	r3, #139	; 0x8b
 800fe10:	602b      	str	r3, [r5, #0]
 800fe12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe16:	b01d      	add	sp, #116	; 0x74
 800fe18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe1c:	b002      	add	sp, #8
 800fe1e:	4770      	bx	lr
 800fe20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe28:	bf14      	ite	ne
 800fe2a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fe2e:	4623      	moveq	r3, r4
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	9307      	str	r3, [sp, #28]
 800fe34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe38:	9002      	str	r0, [sp, #8]
 800fe3a:	9006      	str	r0, [sp, #24]
 800fe3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe42:	ab21      	add	r3, sp, #132	; 0x84
 800fe44:	a902      	add	r1, sp, #8
 800fe46:	4628      	mov	r0, r5
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	f001 fd0b 	bl	8011864 <_svfiprintf_r>
 800fe4e:	1c43      	adds	r3, r0, #1
 800fe50:	bfbc      	itt	lt
 800fe52:	238b      	movlt	r3, #139	; 0x8b
 800fe54:	602b      	strlt	r3, [r5, #0]
 800fe56:	2c00      	cmp	r4, #0
 800fe58:	d0dd      	beq.n	800fe16 <sniprintf+0x16>
 800fe5a:	9b02      	ldr	r3, [sp, #8]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	701a      	strb	r2, [r3, #0]
 800fe60:	e7d9      	b.n	800fe16 <sniprintf+0x16>
 800fe62:	bf00      	nop
 800fe64:	20001c34 	.word	0x20001c34

0800fe68 <strcat>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	781a      	ldrb	r2, [r3, #0]
 800fe6e:	1c5c      	adds	r4, r3, #1
 800fe70:	b93a      	cbnz	r2, 800fe82 <strcat+0x1a>
 800fe72:	3b01      	subs	r3, #1
 800fe74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe7c:	2a00      	cmp	r2, #0
 800fe7e:	d1f9      	bne.n	800fe74 <strcat+0xc>
 800fe80:	bd10      	pop	{r4, pc}
 800fe82:	4623      	mov	r3, r4
 800fe84:	e7f2      	b.n	800fe6c <strcat+0x4>
	...

0800fe88 <__swbuf_r>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	460e      	mov	r6, r1
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	4605      	mov	r5, r0
 800fe90:	b118      	cbz	r0, 800fe9a <__swbuf_r+0x12>
 800fe92:	6983      	ldr	r3, [r0, #24]
 800fe94:	b90b      	cbnz	r3, 800fe9a <__swbuf_r+0x12>
 800fe96:	f000 ffeb 	bl	8010e70 <__sinit>
 800fe9a:	4b21      	ldr	r3, [pc, #132]	; (800ff20 <__swbuf_r+0x98>)
 800fe9c:	429c      	cmp	r4, r3
 800fe9e:	d12a      	bne.n	800fef6 <__swbuf_r+0x6e>
 800fea0:	686c      	ldr	r4, [r5, #4]
 800fea2:	69a3      	ldr	r3, [r4, #24]
 800fea4:	60a3      	str	r3, [r4, #8]
 800fea6:	89a3      	ldrh	r3, [r4, #12]
 800fea8:	071a      	lsls	r2, r3, #28
 800feaa:	d52e      	bpl.n	800ff0a <__swbuf_r+0x82>
 800feac:	6923      	ldr	r3, [r4, #16]
 800feae:	b363      	cbz	r3, 800ff0a <__swbuf_r+0x82>
 800feb0:	6923      	ldr	r3, [r4, #16]
 800feb2:	6820      	ldr	r0, [r4, #0]
 800feb4:	1ac0      	subs	r0, r0, r3
 800feb6:	6963      	ldr	r3, [r4, #20]
 800feb8:	b2f6      	uxtb	r6, r6
 800feba:	4283      	cmp	r3, r0
 800febc:	4637      	mov	r7, r6
 800febe:	dc04      	bgt.n	800feca <__swbuf_r+0x42>
 800fec0:	4621      	mov	r1, r4
 800fec2:	4628      	mov	r0, r5
 800fec4:	f000 ff6a 	bl	8010d9c <_fflush_r>
 800fec8:	bb28      	cbnz	r0, 800ff16 <__swbuf_r+0x8e>
 800feca:	68a3      	ldr	r3, [r4, #8]
 800fecc:	3b01      	subs	r3, #1
 800fece:	60a3      	str	r3, [r4, #8]
 800fed0:	6823      	ldr	r3, [r4, #0]
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	6022      	str	r2, [r4, #0]
 800fed6:	701e      	strb	r6, [r3, #0]
 800fed8:	6963      	ldr	r3, [r4, #20]
 800feda:	3001      	adds	r0, #1
 800fedc:	4283      	cmp	r3, r0
 800fede:	d004      	beq.n	800feea <__swbuf_r+0x62>
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	07db      	lsls	r3, r3, #31
 800fee4:	d519      	bpl.n	800ff1a <__swbuf_r+0x92>
 800fee6:	2e0a      	cmp	r6, #10
 800fee8:	d117      	bne.n	800ff1a <__swbuf_r+0x92>
 800feea:	4621      	mov	r1, r4
 800feec:	4628      	mov	r0, r5
 800feee:	f000 ff55 	bl	8010d9c <_fflush_r>
 800fef2:	b190      	cbz	r0, 800ff1a <__swbuf_r+0x92>
 800fef4:	e00f      	b.n	800ff16 <__swbuf_r+0x8e>
 800fef6:	4b0b      	ldr	r3, [pc, #44]	; (800ff24 <__swbuf_r+0x9c>)
 800fef8:	429c      	cmp	r4, r3
 800fefa:	d101      	bne.n	800ff00 <__swbuf_r+0x78>
 800fefc:	68ac      	ldr	r4, [r5, #8]
 800fefe:	e7d0      	b.n	800fea2 <__swbuf_r+0x1a>
 800ff00:	4b09      	ldr	r3, [pc, #36]	; (800ff28 <__swbuf_r+0xa0>)
 800ff02:	429c      	cmp	r4, r3
 800ff04:	bf08      	it	eq
 800ff06:	68ec      	ldreq	r4, [r5, #12]
 800ff08:	e7cb      	b.n	800fea2 <__swbuf_r+0x1a>
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f000 f80d 	bl	800ff2c <__swsetup_r>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d0cc      	beq.n	800feb0 <__swbuf_r+0x28>
 800ff16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	0801467c 	.word	0x0801467c
 800ff24:	0801469c 	.word	0x0801469c
 800ff28:	0801465c 	.word	0x0801465c

0800ff2c <__swsetup_r>:
 800ff2c:	4b32      	ldr	r3, [pc, #200]	; (800fff8 <__swsetup_r+0xcc>)
 800ff2e:	b570      	push	{r4, r5, r6, lr}
 800ff30:	681d      	ldr	r5, [r3, #0]
 800ff32:	4606      	mov	r6, r0
 800ff34:	460c      	mov	r4, r1
 800ff36:	b125      	cbz	r5, 800ff42 <__swsetup_r+0x16>
 800ff38:	69ab      	ldr	r3, [r5, #24]
 800ff3a:	b913      	cbnz	r3, 800ff42 <__swsetup_r+0x16>
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f000 ff97 	bl	8010e70 <__sinit>
 800ff42:	4b2e      	ldr	r3, [pc, #184]	; (800fffc <__swsetup_r+0xd0>)
 800ff44:	429c      	cmp	r4, r3
 800ff46:	d10f      	bne.n	800ff68 <__swsetup_r+0x3c>
 800ff48:	686c      	ldr	r4, [r5, #4]
 800ff4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	0715      	lsls	r5, r2, #28
 800ff52:	d42c      	bmi.n	800ffae <__swsetup_r+0x82>
 800ff54:	06d0      	lsls	r0, r2, #27
 800ff56:	d411      	bmi.n	800ff7c <__swsetup_r+0x50>
 800ff58:	2209      	movs	r2, #9
 800ff5a:	6032      	str	r2, [r6, #0]
 800ff5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff60:	81a3      	strh	r3, [r4, #12]
 800ff62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff66:	e03e      	b.n	800ffe6 <__swsetup_r+0xba>
 800ff68:	4b25      	ldr	r3, [pc, #148]	; (8010000 <__swsetup_r+0xd4>)
 800ff6a:	429c      	cmp	r4, r3
 800ff6c:	d101      	bne.n	800ff72 <__swsetup_r+0x46>
 800ff6e:	68ac      	ldr	r4, [r5, #8]
 800ff70:	e7eb      	b.n	800ff4a <__swsetup_r+0x1e>
 800ff72:	4b24      	ldr	r3, [pc, #144]	; (8010004 <__swsetup_r+0xd8>)
 800ff74:	429c      	cmp	r4, r3
 800ff76:	bf08      	it	eq
 800ff78:	68ec      	ldreq	r4, [r5, #12]
 800ff7a:	e7e6      	b.n	800ff4a <__swsetup_r+0x1e>
 800ff7c:	0751      	lsls	r1, r2, #29
 800ff7e:	d512      	bpl.n	800ffa6 <__swsetup_r+0x7a>
 800ff80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff82:	b141      	cbz	r1, 800ff96 <__swsetup_r+0x6a>
 800ff84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff88:	4299      	cmp	r1, r3
 800ff8a:	d002      	beq.n	800ff92 <__swsetup_r+0x66>
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f001 fb67 	bl	8011660 <_free_r>
 800ff92:	2300      	movs	r3, #0
 800ff94:	6363      	str	r3, [r4, #52]	; 0x34
 800ff96:	89a3      	ldrh	r3, [r4, #12]
 800ff98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff9c:	81a3      	strh	r3, [r4, #12]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	6063      	str	r3, [r4, #4]
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	6023      	str	r3, [r4, #0]
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	f043 0308 	orr.w	r3, r3, #8
 800ffac:	81a3      	strh	r3, [r4, #12]
 800ffae:	6923      	ldr	r3, [r4, #16]
 800ffb0:	b94b      	cbnz	r3, 800ffc6 <__swsetup_r+0x9a>
 800ffb2:	89a3      	ldrh	r3, [r4, #12]
 800ffb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ffb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffbc:	d003      	beq.n	800ffc6 <__swsetup_r+0x9a>
 800ffbe:	4621      	mov	r1, r4
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	f001 f811 	bl	8010fe8 <__smakebuf_r>
 800ffc6:	89a2      	ldrh	r2, [r4, #12]
 800ffc8:	f012 0301 	ands.w	r3, r2, #1
 800ffcc:	d00c      	beq.n	800ffe8 <__swsetup_r+0xbc>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60a3      	str	r3, [r4, #8]
 800ffd2:	6963      	ldr	r3, [r4, #20]
 800ffd4:	425b      	negs	r3, r3
 800ffd6:	61a3      	str	r3, [r4, #24]
 800ffd8:	6923      	ldr	r3, [r4, #16]
 800ffda:	b953      	cbnz	r3, 800fff2 <__swsetup_r+0xc6>
 800ffdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffe0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ffe4:	d1ba      	bne.n	800ff5c <__swsetup_r+0x30>
 800ffe6:	bd70      	pop	{r4, r5, r6, pc}
 800ffe8:	0792      	lsls	r2, r2, #30
 800ffea:	bf58      	it	pl
 800ffec:	6963      	ldrpl	r3, [r4, #20]
 800ffee:	60a3      	str	r3, [r4, #8]
 800fff0:	e7f2      	b.n	800ffd8 <__swsetup_r+0xac>
 800fff2:	2000      	movs	r0, #0
 800fff4:	e7f7      	b.n	800ffe6 <__swsetup_r+0xba>
 800fff6:	bf00      	nop
 800fff8:	20001c34 	.word	0x20001c34
 800fffc:	0801467c 	.word	0x0801467c
 8010000:	0801469c 	.word	0x0801469c
 8010004:	0801465c 	.word	0x0801465c

08010008 <quorem>:
 8010008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	6903      	ldr	r3, [r0, #16]
 801000e:	690c      	ldr	r4, [r1, #16]
 8010010:	42a3      	cmp	r3, r4
 8010012:	4680      	mov	r8, r0
 8010014:	f2c0 8082 	blt.w	801011c <quorem+0x114>
 8010018:	3c01      	subs	r4, #1
 801001a:	f101 0714 	add.w	r7, r1, #20
 801001e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010022:	f100 0614 	add.w	r6, r0, #20
 8010026:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801002a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801002e:	eb06 030c 	add.w	r3, r6, ip
 8010032:	3501      	adds	r5, #1
 8010034:	eb07 090c 	add.w	r9, r7, ip
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	fbb0 f5f5 	udiv	r5, r0, r5
 801003e:	b395      	cbz	r5, 80100a6 <quorem+0x9e>
 8010040:	f04f 0a00 	mov.w	sl, #0
 8010044:	4638      	mov	r0, r7
 8010046:	46b6      	mov	lr, r6
 8010048:	46d3      	mov	fp, sl
 801004a:	f850 2b04 	ldr.w	r2, [r0], #4
 801004e:	b293      	uxth	r3, r2
 8010050:	fb05 a303 	mla	r3, r5, r3, sl
 8010054:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010058:	b29b      	uxth	r3, r3
 801005a:	ebab 0303 	sub.w	r3, fp, r3
 801005e:	0c12      	lsrs	r2, r2, #16
 8010060:	f8de b000 	ldr.w	fp, [lr]
 8010064:	fb05 a202 	mla	r2, r5, r2, sl
 8010068:	fa13 f38b 	uxtah	r3, r3, fp
 801006c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010070:	fa1f fb82 	uxth.w	fp, r2
 8010074:	f8de 2000 	ldr.w	r2, [lr]
 8010078:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801007c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010080:	b29b      	uxth	r3, r3
 8010082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010086:	4581      	cmp	r9, r0
 8010088:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801008c:	f84e 3b04 	str.w	r3, [lr], #4
 8010090:	d2db      	bcs.n	801004a <quorem+0x42>
 8010092:	f856 300c 	ldr.w	r3, [r6, ip]
 8010096:	b933      	cbnz	r3, 80100a6 <quorem+0x9e>
 8010098:	9b01      	ldr	r3, [sp, #4]
 801009a:	3b04      	subs	r3, #4
 801009c:	429e      	cmp	r6, r3
 801009e:	461a      	mov	r2, r3
 80100a0:	d330      	bcc.n	8010104 <quorem+0xfc>
 80100a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80100a6:	4640      	mov	r0, r8
 80100a8:	f001 fa06 	bl	80114b8 <__mcmp>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	db25      	blt.n	80100fc <quorem+0xf4>
 80100b0:	3501      	adds	r5, #1
 80100b2:	4630      	mov	r0, r6
 80100b4:	f04f 0c00 	mov.w	ip, #0
 80100b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80100bc:	f8d0 e000 	ldr.w	lr, [r0]
 80100c0:	b293      	uxth	r3, r2
 80100c2:	ebac 0303 	sub.w	r3, ip, r3
 80100c6:	0c12      	lsrs	r2, r2, #16
 80100c8:	fa13 f38e 	uxtah	r3, r3, lr
 80100cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80100d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100da:	45b9      	cmp	r9, r7
 80100dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80100e0:	f840 3b04 	str.w	r3, [r0], #4
 80100e4:	d2e8      	bcs.n	80100b8 <quorem+0xb0>
 80100e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80100ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80100ee:	b92a      	cbnz	r2, 80100fc <quorem+0xf4>
 80100f0:	3b04      	subs	r3, #4
 80100f2:	429e      	cmp	r6, r3
 80100f4:	461a      	mov	r2, r3
 80100f6:	d30b      	bcc.n	8010110 <quorem+0x108>
 80100f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80100fc:	4628      	mov	r0, r5
 80100fe:	b003      	add	sp, #12
 8010100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010104:	6812      	ldr	r2, [r2, #0]
 8010106:	3b04      	subs	r3, #4
 8010108:	2a00      	cmp	r2, #0
 801010a:	d1ca      	bne.n	80100a2 <quorem+0x9a>
 801010c:	3c01      	subs	r4, #1
 801010e:	e7c5      	b.n	801009c <quorem+0x94>
 8010110:	6812      	ldr	r2, [r2, #0]
 8010112:	3b04      	subs	r3, #4
 8010114:	2a00      	cmp	r2, #0
 8010116:	d1ef      	bne.n	80100f8 <quorem+0xf0>
 8010118:	3c01      	subs	r4, #1
 801011a:	e7ea      	b.n	80100f2 <quorem+0xea>
 801011c:	2000      	movs	r0, #0
 801011e:	e7ee      	b.n	80100fe <quorem+0xf6>

08010120 <_dtoa_r>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	ec57 6b10 	vmov	r6, r7, d0
 8010128:	b097      	sub	sp, #92	; 0x5c
 801012a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801012c:	9106      	str	r1, [sp, #24]
 801012e:	4604      	mov	r4, r0
 8010130:	920b      	str	r2, [sp, #44]	; 0x2c
 8010132:	9312      	str	r3, [sp, #72]	; 0x48
 8010134:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010138:	e9cd 6700 	strd	r6, r7, [sp]
 801013c:	b93d      	cbnz	r5, 801014e <_dtoa_r+0x2e>
 801013e:	2010      	movs	r0, #16
 8010140:	f000 ff92 	bl	8011068 <malloc>
 8010144:	6260      	str	r0, [r4, #36]	; 0x24
 8010146:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801014a:	6005      	str	r5, [r0, #0]
 801014c:	60c5      	str	r5, [r0, #12]
 801014e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010150:	6819      	ldr	r1, [r3, #0]
 8010152:	b151      	cbz	r1, 801016a <_dtoa_r+0x4a>
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	604a      	str	r2, [r1, #4]
 8010158:	2301      	movs	r3, #1
 801015a:	4093      	lsls	r3, r2
 801015c:	608b      	str	r3, [r1, #8]
 801015e:	4620      	mov	r0, r4
 8010160:	f000 ffc9 	bl	80110f6 <_Bfree>
 8010164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010166:	2200      	movs	r2, #0
 8010168:	601a      	str	r2, [r3, #0]
 801016a:	1e3b      	subs	r3, r7, #0
 801016c:	bfbb      	ittet	lt
 801016e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010172:	9301      	strlt	r3, [sp, #4]
 8010174:	2300      	movge	r3, #0
 8010176:	2201      	movlt	r2, #1
 8010178:	bfac      	ite	ge
 801017a:	f8c8 3000 	strge.w	r3, [r8]
 801017e:	f8c8 2000 	strlt.w	r2, [r8]
 8010182:	4baf      	ldr	r3, [pc, #700]	; (8010440 <_dtoa_r+0x320>)
 8010184:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010188:	ea33 0308 	bics.w	r3, r3, r8
 801018c:	d114      	bne.n	80101b8 <_dtoa_r+0x98>
 801018e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010190:	f242 730f 	movw	r3, #9999	; 0x270f
 8010194:	6013      	str	r3, [r2, #0]
 8010196:	9b00      	ldr	r3, [sp, #0]
 8010198:	b923      	cbnz	r3, 80101a4 <_dtoa_r+0x84>
 801019a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801019e:	2800      	cmp	r0, #0
 80101a0:	f000 8542 	beq.w	8010c28 <_dtoa_r+0xb08>
 80101a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010454 <_dtoa_r+0x334>
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 8544 	beq.w	8010c38 <_dtoa_r+0xb18>
 80101b0:	f10b 0303 	add.w	r3, fp, #3
 80101b4:	f000 bd3e 	b.w	8010c34 <_dtoa_r+0xb14>
 80101b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80101bc:	2200      	movs	r2, #0
 80101be:	2300      	movs	r3, #0
 80101c0:	4630      	mov	r0, r6
 80101c2:	4639      	mov	r1, r7
 80101c4:	f7f0 fca8 	bl	8000b18 <__aeabi_dcmpeq>
 80101c8:	4681      	mov	r9, r0
 80101ca:	b168      	cbz	r0, 80101e8 <_dtoa_r+0xc8>
 80101cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101ce:	2301      	movs	r3, #1
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 8524 	beq.w	8010c22 <_dtoa_r+0xb02>
 80101da:	4b9a      	ldr	r3, [pc, #616]	; (8010444 <_dtoa_r+0x324>)
 80101dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80101de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80101e2:	6013      	str	r3, [r2, #0]
 80101e4:	f000 bd28 	b.w	8010c38 <_dtoa_r+0xb18>
 80101e8:	aa14      	add	r2, sp, #80	; 0x50
 80101ea:	a915      	add	r1, sp, #84	; 0x54
 80101ec:	ec47 6b10 	vmov	d0, r6, r7
 80101f0:	4620      	mov	r0, r4
 80101f2:	f001 f9d8 	bl	80115a6 <__d2b>
 80101f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80101fa:	9004      	str	r0, [sp, #16]
 80101fc:	2d00      	cmp	r5, #0
 80101fe:	d07c      	beq.n	80102fa <_dtoa_r+0x1da>
 8010200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010204:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010208:	46b2      	mov	sl, r6
 801020a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801020e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010212:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010216:	2200      	movs	r2, #0
 8010218:	4b8b      	ldr	r3, [pc, #556]	; (8010448 <_dtoa_r+0x328>)
 801021a:	4650      	mov	r0, sl
 801021c:	4659      	mov	r1, fp
 801021e:	f7f0 f85b 	bl	80002d8 <__aeabi_dsub>
 8010222:	a381      	add	r3, pc, #516	; (adr r3, 8010428 <_dtoa_r+0x308>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7f0 fa0e 	bl	8000648 <__aeabi_dmul>
 801022c:	a380      	add	r3, pc, #512	; (adr r3, 8010430 <_dtoa_r+0x310>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	f7f0 f853 	bl	80002dc <__adddf3>
 8010236:	4606      	mov	r6, r0
 8010238:	4628      	mov	r0, r5
 801023a:	460f      	mov	r7, r1
 801023c:	f7f0 f99a 	bl	8000574 <__aeabi_i2d>
 8010240:	a37d      	add	r3, pc, #500	; (adr r3, 8010438 <_dtoa_r+0x318>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f0 f9ff 	bl	8000648 <__aeabi_dmul>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4630      	mov	r0, r6
 8010250:	4639      	mov	r1, r7
 8010252:	f7f0 f843 	bl	80002dc <__adddf3>
 8010256:	4606      	mov	r6, r0
 8010258:	460f      	mov	r7, r1
 801025a:	f7f0 fca5 	bl	8000ba8 <__aeabi_d2iz>
 801025e:	2200      	movs	r2, #0
 8010260:	4682      	mov	sl, r0
 8010262:	2300      	movs	r3, #0
 8010264:	4630      	mov	r0, r6
 8010266:	4639      	mov	r1, r7
 8010268:	f7f0 fc60 	bl	8000b2c <__aeabi_dcmplt>
 801026c:	b148      	cbz	r0, 8010282 <_dtoa_r+0x162>
 801026e:	4650      	mov	r0, sl
 8010270:	f7f0 f980 	bl	8000574 <__aeabi_i2d>
 8010274:	4632      	mov	r2, r6
 8010276:	463b      	mov	r3, r7
 8010278:	f7f0 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 801027c:	b908      	cbnz	r0, 8010282 <_dtoa_r+0x162>
 801027e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010282:	f1ba 0f16 	cmp.w	sl, #22
 8010286:	d859      	bhi.n	801033c <_dtoa_r+0x21c>
 8010288:	4970      	ldr	r1, [pc, #448]	; (801044c <_dtoa_r+0x32c>)
 801028a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801028e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010296:	f7f0 fc67 	bl	8000b68 <__aeabi_dcmpgt>
 801029a:	2800      	cmp	r0, #0
 801029c:	d050      	beq.n	8010340 <_dtoa_r+0x220>
 801029e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80102a2:	2300      	movs	r3, #0
 80102a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80102a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102a8:	1b5d      	subs	r5, r3, r5
 80102aa:	f1b5 0801 	subs.w	r8, r5, #1
 80102ae:	bf49      	itett	mi
 80102b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80102b4:	2300      	movpl	r3, #0
 80102b6:	9305      	strmi	r3, [sp, #20]
 80102b8:	f04f 0800 	movmi.w	r8, #0
 80102bc:	bf58      	it	pl
 80102be:	9305      	strpl	r3, [sp, #20]
 80102c0:	f1ba 0f00 	cmp.w	sl, #0
 80102c4:	db3e      	blt.n	8010344 <_dtoa_r+0x224>
 80102c6:	2300      	movs	r3, #0
 80102c8:	44d0      	add	r8, sl
 80102ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80102ce:	9307      	str	r3, [sp, #28]
 80102d0:	9b06      	ldr	r3, [sp, #24]
 80102d2:	2b09      	cmp	r3, #9
 80102d4:	f200 8090 	bhi.w	80103f8 <_dtoa_r+0x2d8>
 80102d8:	2b05      	cmp	r3, #5
 80102da:	bfc4      	itt	gt
 80102dc:	3b04      	subgt	r3, #4
 80102de:	9306      	strgt	r3, [sp, #24]
 80102e0:	9b06      	ldr	r3, [sp, #24]
 80102e2:	f1a3 0302 	sub.w	r3, r3, #2
 80102e6:	bfcc      	ite	gt
 80102e8:	2500      	movgt	r5, #0
 80102ea:	2501      	movle	r5, #1
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	f200 808f 	bhi.w	8010410 <_dtoa_r+0x2f0>
 80102f2:	e8df f003 	tbb	[pc, r3]
 80102f6:	7f7d      	.short	0x7f7d
 80102f8:	7131      	.short	0x7131
 80102fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80102fe:	441d      	add	r5, r3
 8010300:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010304:	2820      	cmp	r0, #32
 8010306:	dd13      	ble.n	8010330 <_dtoa_r+0x210>
 8010308:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	fa08 f800 	lsl.w	r8, r8, r0
 8010312:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010316:	fa23 f000 	lsr.w	r0, r3, r0
 801031a:	ea48 0000 	orr.w	r0, r8, r0
 801031e:	f7f0 f919 	bl	8000554 <__aeabi_ui2d>
 8010322:	2301      	movs	r3, #1
 8010324:	4682      	mov	sl, r0
 8010326:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801032a:	3d01      	subs	r5, #1
 801032c:	9313      	str	r3, [sp, #76]	; 0x4c
 801032e:	e772      	b.n	8010216 <_dtoa_r+0xf6>
 8010330:	9b00      	ldr	r3, [sp, #0]
 8010332:	f1c0 0020 	rsb	r0, r0, #32
 8010336:	fa03 f000 	lsl.w	r0, r3, r0
 801033a:	e7f0      	b.n	801031e <_dtoa_r+0x1fe>
 801033c:	2301      	movs	r3, #1
 801033e:	e7b1      	b.n	80102a4 <_dtoa_r+0x184>
 8010340:	900f      	str	r0, [sp, #60]	; 0x3c
 8010342:	e7b0      	b.n	80102a6 <_dtoa_r+0x186>
 8010344:	9b05      	ldr	r3, [sp, #20]
 8010346:	eba3 030a 	sub.w	r3, r3, sl
 801034a:	9305      	str	r3, [sp, #20]
 801034c:	f1ca 0300 	rsb	r3, sl, #0
 8010350:	9307      	str	r3, [sp, #28]
 8010352:	2300      	movs	r3, #0
 8010354:	930e      	str	r3, [sp, #56]	; 0x38
 8010356:	e7bb      	b.n	80102d0 <_dtoa_r+0x1b0>
 8010358:	2301      	movs	r3, #1
 801035a:	930a      	str	r3, [sp, #40]	; 0x28
 801035c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801035e:	2b00      	cmp	r3, #0
 8010360:	dd59      	ble.n	8010416 <_dtoa_r+0x2f6>
 8010362:	9302      	str	r3, [sp, #8]
 8010364:	4699      	mov	r9, r3
 8010366:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010368:	2200      	movs	r2, #0
 801036a:	6072      	str	r2, [r6, #4]
 801036c:	2204      	movs	r2, #4
 801036e:	f102 0014 	add.w	r0, r2, #20
 8010372:	4298      	cmp	r0, r3
 8010374:	6871      	ldr	r1, [r6, #4]
 8010376:	d953      	bls.n	8010420 <_dtoa_r+0x300>
 8010378:	4620      	mov	r0, r4
 801037a:	f000 fe88 	bl	801108e <_Balloc>
 801037e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010380:	6030      	str	r0, [r6, #0]
 8010382:	f1b9 0f0e 	cmp.w	r9, #14
 8010386:	f8d3 b000 	ldr.w	fp, [r3]
 801038a:	f200 80e6 	bhi.w	801055a <_dtoa_r+0x43a>
 801038e:	2d00      	cmp	r5, #0
 8010390:	f000 80e3 	beq.w	801055a <_dtoa_r+0x43a>
 8010394:	ed9d 7b00 	vldr	d7, [sp]
 8010398:	f1ba 0f00 	cmp.w	sl, #0
 801039c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80103a0:	dd74      	ble.n	801048c <_dtoa_r+0x36c>
 80103a2:	4a2a      	ldr	r2, [pc, #168]	; (801044c <_dtoa_r+0x32c>)
 80103a4:	f00a 030f 	and.w	r3, sl, #15
 80103a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80103ac:	ed93 7b00 	vldr	d7, [r3]
 80103b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80103b4:	06f0      	lsls	r0, r6, #27
 80103b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80103ba:	d565      	bpl.n	8010488 <_dtoa_r+0x368>
 80103bc:	4b24      	ldr	r3, [pc, #144]	; (8010450 <_dtoa_r+0x330>)
 80103be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80103c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80103c6:	f7f0 fa69 	bl	800089c <__aeabi_ddiv>
 80103ca:	e9cd 0100 	strd	r0, r1, [sp]
 80103ce:	f006 060f 	and.w	r6, r6, #15
 80103d2:	2503      	movs	r5, #3
 80103d4:	4f1e      	ldr	r7, [pc, #120]	; (8010450 <_dtoa_r+0x330>)
 80103d6:	e04c      	b.n	8010472 <_dtoa_r+0x352>
 80103d8:	2301      	movs	r3, #1
 80103da:	930a      	str	r3, [sp, #40]	; 0x28
 80103dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103de:	4453      	add	r3, sl
 80103e0:	f103 0901 	add.w	r9, r3, #1
 80103e4:	9302      	str	r3, [sp, #8]
 80103e6:	464b      	mov	r3, r9
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	bfb8      	it	lt
 80103ec:	2301      	movlt	r3, #1
 80103ee:	e7ba      	b.n	8010366 <_dtoa_r+0x246>
 80103f0:	2300      	movs	r3, #0
 80103f2:	e7b2      	b.n	801035a <_dtoa_r+0x23a>
 80103f4:	2300      	movs	r3, #0
 80103f6:	e7f0      	b.n	80103da <_dtoa_r+0x2ba>
 80103f8:	2501      	movs	r5, #1
 80103fa:	2300      	movs	r3, #0
 80103fc:	9306      	str	r3, [sp, #24]
 80103fe:	950a      	str	r5, [sp, #40]	; 0x28
 8010400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010404:	9302      	str	r3, [sp, #8]
 8010406:	4699      	mov	r9, r3
 8010408:	2200      	movs	r2, #0
 801040a:	2312      	movs	r3, #18
 801040c:	920b      	str	r2, [sp, #44]	; 0x2c
 801040e:	e7aa      	b.n	8010366 <_dtoa_r+0x246>
 8010410:	2301      	movs	r3, #1
 8010412:	930a      	str	r3, [sp, #40]	; 0x28
 8010414:	e7f4      	b.n	8010400 <_dtoa_r+0x2e0>
 8010416:	2301      	movs	r3, #1
 8010418:	9302      	str	r3, [sp, #8]
 801041a:	4699      	mov	r9, r3
 801041c:	461a      	mov	r2, r3
 801041e:	e7f5      	b.n	801040c <_dtoa_r+0x2ec>
 8010420:	3101      	adds	r1, #1
 8010422:	6071      	str	r1, [r6, #4]
 8010424:	0052      	lsls	r2, r2, #1
 8010426:	e7a2      	b.n	801036e <_dtoa_r+0x24e>
 8010428:	636f4361 	.word	0x636f4361
 801042c:	3fd287a7 	.word	0x3fd287a7
 8010430:	8b60c8b3 	.word	0x8b60c8b3
 8010434:	3fc68a28 	.word	0x3fc68a28
 8010438:	509f79fb 	.word	0x509f79fb
 801043c:	3fd34413 	.word	0x3fd34413
 8010440:	7ff00000 	.word	0x7ff00000
 8010444:	080148dd 	.word	0x080148dd
 8010448:	3ff80000 	.word	0x3ff80000
 801044c:	080146e8 	.word	0x080146e8
 8010450:	080146c0 	.word	0x080146c0
 8010454:	08014657 	.word	0x08014657
 8010458:	07f1      	lsls	r1, r6, #31
 801045a:	d508      	bpl.n	801046e <_dtoa_r+0x34e>
 801045c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010464:	f7f0 f8f0 	bl	8000648 <__aeabi_dmul>
 8010468:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801046c:	3501      	adds	r5, #1
 801046e:	1076      	asrs	r6, r6, #1
 8010470:	3708      	adds	r7, #8
 8010472:	2e00      	cmp	r6, #0
 8010474:	d1f0      	bne.n	8010458 <_dtoa_r+0x338>
 8010476:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801047a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801047e:	f7f0 fa0d 	bl	800089c <__aeabi_ddiv>
 8010482:	e9cd 0100 	strd	r0, r1, [sp]
 8010486:	e01a      	b.n	80104be <_dtoa_r+0x39e>
 8010488:	2502      	movs	r5, #2
 801048a:	e7a3      	b.n	80103d4 <_dtoa_r+0x2b4>
 801048c:	f000 80a0 	beq.w	80105d0 <_dtoa_r+0x4b0>
 8010490:	f1ca 0600 	rsb	r6, sl, #0
 8010494:	4b9f      	ldr	r3, [pc, #636]	; (8010714 <_dtoa_r+0x5f4>)
 8010496:	4fa0      	ldr	r7, [pc, #640]	; (8010718 <_dtoa_r+0x5f8>)
 8010498:	f006 020f 	and.w	r2, r6, #15
 801049c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80104a8:	f7f0 f8ce 	bl	8000648 <__aeabi_dmul>
 80104ac:	e9cd 0100 	strd	r0, r1, [sp]
 80104b0:	1136      	asrs	r6, r6, #4
 80104b2:	2300      	movs	r3, #0
 80104b4:	2502      	movs	r5, #2
 80104b6:	2e00      	cmp	r6, #0
 80104b8:	d17f      	bne.n	80105ba <_dtoa_r+0x49a>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1e1      	bne.n	8010482 <_dtoa_r+0x362>
 80104be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 8087 	beq.w	80105d4 <_dtoa_r+0x4b4>
 80104c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80104ca:	2200      	movs	r2, #0
 80104cc:	4b93      	ldr	r3, [pc, #588]	; (801071c <_dtoa_r+0x5fc>)
 80104ce:	4630      	mov	r0, r6
 80104d0:	4639      	mov	r1, r7
 80104d2:	f7f0 fb2b 	bl	8000b2c <__aeabi_dcmplt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d07c      	beq.n	80105d4 <_dtoa_r+0x4b4>
 80104da:	f1b9 0f00 	cmp.w	r9, #0
 80104de:	d079      	beq.n	80105d4 <_dtoa_r+0x4b4>
 80104e0:	9b02      	ldr	r3, [sp, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	dd35      	ble.n	8010552 <_dtoa_r+0x432>
 80104e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80104ea:	9308      	str	r3, [sp, #32]
 80104ec:	4639      	mov	r1, r7
 80104ee:	2200      	movs	r2, #0
 80104f0:	4b8b      	ldr	r3, [pc, #556]	; (8010720 <_dtoa_r+0x600>)
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7f0 f8a8 	bl	8000648 <__aeabi_dmul>
 80104f8:	e9cd 0100 	strd	r0, r1, [sp]
 80104fc:	9f02      	ldr	r7, [sp, #8]
 80104fe:	3501      	adds	r5, #1
 8010500:	4628      	mov	r0, r5
 8010502:	f7f0 f837 	bl	8000574 <__aeabi_i2d>
 8010506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050a:	f7f0 f89d 	bl	8000648 <__aeabi_dmul>
 801050e:	2200      	movs	r2, #0
 8010510:	4b84      	ldr	r3, [pc, #528]	; (8010724 <_dtoa_r+0x604>)
 8010512:	f7ef fee3 	bl	80002dc <__adddf3>
 8010516:	4605      	mov	r5, r0
 8010518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801051c:	2f00      	cmp	r7, #0
 801051e:	d15d      	bne.n	80105dc <_dtoa_r+0x4bc>
 8010520:	2200      	movs	r2, #0
 8010522:	4b81      	ldr	r3, [pc, #516]	; (8010728 <_dtoa_r+0x608>)
 8010524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010528:	f7ef fed6 	bl	80002d8 <__aeabi_dsub>
 801052c:	462a      	mov	r2, r5
 801052e:	4633      	mov	r3, r6
 8010530:	e9cd 0100 	strd	r0, r1, [sp]
 8010534:	f7f0 fb18 	bl	8000b68 <__aeabi_dcmpgt>
 8010538:	2800      	cmp	r0, #0
 801053a:	f040 8288 	bne.w	8010a4e <_dtoa_r+0x92e>
 801053e:	462a      	mov	r2, r5
 8010540:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010548:	f7f0 faf0 	bl	8000b2c <__aeabi_dcmplt>
 801054c:	2800      	cmp	r0, #0
 801054e:	f040 827c 	bne.w	8010a4a <_dtoa_r+0x92a>
 8010552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010556:	e9cd 2300 	strd	r2, r3, [sp]
 801055a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801055c:	2b00      	cmp	r3, #0
 801055e:	f2c0 8150 	blt.w	8010802 <_dtoa_r+0x6e2>
 8010562:	f1ba 0f0e 	cmp.w	sl, #14
 8010566:	f300 814c 	bgt.w	8010802 <_dtoa_r+0x6e2>
 801056a:	4b6a      	ldr	r3, [pc, #424]	; (8010714 <_dtoa_r+0x5f4>)
 801056c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010570:	ed93 7b00 	vldr	d7, [r3]
 8010574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010576:	2b00      	cmp	r3, #0
 8010578:	ed8d 7b02 	vstr	d7, [sp, #8]
 801057c:	f280 80d8 	bge.w	8010730 <_dtoa_r+0x610>
 8010580:	f1b9 0f00 	cmp.w	r9, #0
 8010584:	f300 80d4 	bgt.w	8010730 <_dtoa_r+0x610>
 8010588:	f040 825e 	bne.w	8010a48 <_dtoa_r+0x928>
 801058c:	2200      	movs	r2, #0
 801058e:	4b66      	ldr	r3, [pc, #408]	; (8010728 <_dtoa_r+0x608>)
 8010590:	ec51 0b17 	vmov	r0, r1, d7
 8010594:	f7f0 f858 	bl	8000648 <__aeabi_dmul>
 8010598:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059c:	f7f0 fada 	bl	8000b54 <__aeabi_dcmpge>
 80105a0:	464f      	mov	r7, r9
 80105a2:	464e      	mov	r6, r9
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f040 8234 	bne.w	8010a12 <_dtoa_r+0x8f2>
 80105aa:	2331      	movs	r3, #49	; 0x31
 80105ac:	f10b 0501 	add.w	r5, fp, #1
 80105b0:	f88b 3000 	strb.w	r3, [fp]
 80105b4:	f10a 0a01 	add.w	sl, sl, #1
 80105b8:	e22f      	b.n	8010a1a <_dtoa_r+0x8fa>
 80105ba:	07f2      	lsls	r2, r6, #31
 80105bc:	d505      	bpl.n	80105ca <_dtoa_r+0x4aa>
 80105be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105c2:	f7f0 f841 	bl	8000648 <__aeabi_dmul>
 80105c6:	3501      	adds	r5, #1
 80105c8:	2301      	movs	r3, #1
 80105ca:	1076      	asrs	r6, r6, #1
 80105cc:	3708      	adds	r7, #8
 80105ce:	e772      	b.n	80104b6 <_dtoa_r+0x396>
 80105d0:	2502      	movs	r5, #2
 80105d2:	e774      	b.n	80104be <_dtoa_r+0x39e>
 80105d4:	f8cd a020 	str.w	sl, [sp, #32]
 80105d8:	464f      	mov	r7, r9
 80105da:	e791      	b.n	8010500 <_dtoa_r+0x3e0>
 80105dc:	4b4d      	ldr	r3, [pc, #308]	; (8010714 <_dtoa_r+0x5f4>)
 80105de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80105e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80105e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d047      	beq.n	801067c <_dtoa_r+0x55c>
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	2000      	movs	r0, #0
 80105f2:	494e      	ldr	r1, [pc, #312]	; (801072c <_dtoa_r+0x60c>)
 80105f4:	f7f0 f952 	bl	800089c <__aeabi_ddiv>
 80105f8:	462a      	mov	r2, r5
 80105fa:	4633      	mov	r3, r6
 80105fc:	f7ef fe6c 	bl	80002d8 <__aeabi_dsub>
 8010600:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010604:	465d      	mov	r5, fp
 8010606:	e9dd 0100 	ldrd	r0, r1, [sp]
 801060a:	f7f0 facd 	bl	8000ba8 <__aeabi_d2iz>
 801060e:	4606      	mov	r6, r0
 8010610:	f7ef ffb0 	bl	8000574 <__aeabi_i2d>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801061c:	f7ef fe5c 	bl	80002d8 <__aeabi_dsub>
 8010620:	3630      	adds	r6, #48	; 0x30
 8010622:	f805 6b01 	strb.w	r6, [r5], #1
 8010626:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801062a:	e9cd 0100 	strd	r0, r1, [sp]
 801062e:	f7f0 fa7d 	bl	8000b2c <__aeabi_dcmplt>
 8010632:	2800      	cmp	r0, #0
 8010634:	d163      	bne.n	80106fe <_dtoa_r+0x5de>
 8010636:	e9dd 2300 	ldrd	r2, r3, [sp]
 801063a:	2000      	movs	r0, #0
 801063c:	4937      	ldr	r1, [pc, #220]	; (801071c <_dtoa_r+0x5fc>)
 801063e:	f7ef fe4b 	bl	80002d8 <__aeabi_dsub>
 8010642:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010646:	f7f0 fa71 	bl	8000b2c <__aeabi_dcmplt>
 801064a:	2800      	cmp	r0, #0
 801064c:	f040 80b7 	bne.w	80107be <_dtoa_r+0x69e>
 8010650:	eba5 030b 	sub.w	r3, r5, fp
 8010654:	429f      	cmp	r7, r3
 8010656:	f77f af7c 	ble.w	8010552 <_dtoa_r+0x432>
 801065a:	2200      	movs	r2, #0
 801065c:	4b30      	ldr	r3, [pc, #192]	; (8010720 <_dtoa_r+0x600>)
 801065e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010662:	f7ef fff1 	bl	8000648 <__aeabi_dmul>
 8010666:	2200      	movs	r2, #0
 8010668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801066c:	4b2c      	ldr	r3, [pc, #176]	; (8010720 <_dtoa_r+0x600>)
 801066e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010672:	f7ef ffe9 	bl	8000648 <__aeabi_dmul>
 8010676:	e9cd 0100 	strd	r0, r1, [sp]
 801067a:	e7c4      	b.n	8010606 <_dtoa_r+0x4e6>
 801067c:	462a      	mov	r2, r5
 801067e:	4633      	mov	r3, r6
 8010680:	f7ef ffe2 	bl	8000648 <__aeabi_dmul>
 8010684:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010688:	eb0b 0507 	add.w	r5, fp, r7
 801068c:	465e      	mov	r6, fp
 801068e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010692:	f7f0 fa89 	bl	8000ba8 <__aeabi_d2iz>
 8010696:	4607      	mov	r7, r0
 8010698:	f7ef ff6c 	bl	8000574 <__aeabi_i2d>
 801069c:	3730      	adds	r7, #48	; 0x30
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106a6:	f7ef fe17 	bl	80002d8 <__aeabi_dsub>
 80106aa:	f806 7b01 	strb.w	r7, [r6], #1
 80106ae:	42ae      	cmp	r6, r5
 80106b0:	e9cd 0100 	strd	r0, r1, [sp]
 80106b4:	f04f 0200 	mov.w	r2, #0
 80106b8:	d126      	bne.n	8010708 <_dtoa_r+0x5e8>
 80106ba:	4b1c      	ldr	r3, [pc, #112]	; (801072c <_dtoa_r+0x60c>)
 80106bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106c0:	f7ef fe0c 	bl	80002dc <__adddf3>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106cc:	f7f0 fa4c 	bl	8000b68 <__aeabi_dcmpgt>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d174      	bne.n	80107be <_dtoa_r+0x69e>
 80106d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80106d8:	2000      	movs	r0, #0
 80106da:	4914      	ldr	r1, [pc, #80]	; (801072c <_dtoa_r+0x60c>)
 80106dc:	f7ef fdfc 	bl	80002d8 <__aeabi_dsub>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106e8:	f7f0 fa20 	bl	8000b2c <__aeabi_dcmplt>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	f43f af30 	beq.w	8010552 <_dtoa_r+0x432>
 80106f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80106f6:	2b30      	cmp	r3, #48	; 0x30
 80106f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80106fc:	d002      	beq.n	8010704 <_dtoa_r+0x5e4>
 80106fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010702:	e04a      	b.n	801079a <_dtoa_r+0x67a>
 8010704:	4615      	mov	r5, r2
 8010706:	e7f4      	b.n	80106f2 <_dtoa_r+0x5d2>
 8010708:	4b05      	ldr	r3, [pc, #20]	; (8010720 <_dtoa_r+0x600>)
 801070a:	f7ef ff9d 	bl	8000648 <__aeabi_dmul>
 801070e:	e9cd 0100 	strd	r0, r1, [sp]
 8010712:	e7bc      	b.n	801068e <_dtoa_r+0x56e>
 8010714:	080146e8 	.word	0x080146e8
 8010718:	080146c0 	.word	0x080146c0
 801071c:	3ff00000 	.word	0x3ff00000
 8010720:	40240000 	.word	0x40240000
 8010724:	401c0000 	.word	0x401c0000
 8010728:	40140000 	.word	0x40140000
 801072c:	3fe00000 	.word	0x3fe00000
 8010730:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010734:	465d      	mov	r5, fp
 8010736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801073a:	4630      	mov	r0, r6
 801073c:	4639      	mov	r1, r7
 801073e:	f7f0 f8ad 	bl	800089c <__aeabi_ddiv>
 8010742:	f7f0 fa31 	bl	8000ba8 <__aeabi_d2iz>
 8010746:	4680      	mov	r8, r0
 8010748:	f7ef ff14 	bl	8000574 <__aeabi_i2d>
 801074c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010750:	f7ef ff7a 	bl	8000648 <__aeabi_dmul>
 8010754:	4602      	mov	r2, r0
 8010756:	460b      	mov	r3, r1
 8010758:	4630      	mov	r0, r6
 801075a:	4639      	mov	r1, r7
 801075c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010760:	f7ef fdba 	bl	80002d8 <__aeabi_dsub>
 8010764:	f805 6b01 	strb.w	r6, [r5], #1
 8010768:	eba5 060b 	sub.w	r6, r5, fp
 801076c:	45b1      	cmp	r9, r6
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	d139      	bne.n	80107e8 <_dtoa_r+0x6c8>
 8010774:	f7ef fdb2 	bl	80002dc <__adddf3>
 8010778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801077c:	4606      	mov	r6, r0
 801077e:	460f      	mov	r7, r1
 8010780:	f7f0 f9f2 	bl	8000b68 <__aeabi_dcmpgt>
 8010784:	b9c8      	cbnz	r0, 80107ba <_dtoa_r+0x69a>
 8010786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801078a:	4630      	mov	r0, r6
 801078c:	4639      	mov	r1, r7
 801078e:	f7f0 f9c3 	bl	8000b18 <__aeabi_dcmpeq>
 8010792:	b110      	cbz	r0, 801079a <_dtoa_r+0x67a>
 8010794:	f018 0f01 	tst.w	r8, #1
 8010798:	d10f      	bne.n	80107ba <_dtoa_r+0x69a>
 801079a:	9904      	ldr	r1, [sp, #16]
 801079c:	4620      	mov	r0, r4
 801079e:	f000 fcaa 	bl	80110f6 <_Bfree>
 80107a2:	2300      	movs	r3, #0
 80107a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107a6:	702b      	strb	r3, [r5, #0]
 80107a8:	f10a 0301 	add.w	r3, sl, #1
 80107ac:	6013      	str	r3, [r2, #0]
 80107ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 8241 	beq.w	8010c38 <_dtoa_r+0xb18>
 80107b6:	601d      	str	r5, [r3, #0]
 80107b8:	e23e      	b.n	8010c38 <_dtoa_r+0xb18>
 80107ba:	f8cd a020 	str.w	sl, [sp, #32]
 80107be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107c2:	2a39      	cmp	r2, #57	; 0x39
 80107c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80107c8:	d108      	bne.n	80107dc <_dtoa_r+0x6bc>
 80107ca:	459b      	cmp	fp, r3
 80107cc:	d10a      	bne.n	80107e4 <_dtoa_r+0x6c4>
 80107ce:	9b08      	ldr	r3, [sp, #32]
 80107d0:	3301      	adds	r3, #1
 80107d2:	9308      	str	r3, [sp, #32]
 80107d4:	2330      	movs	r3, #48	; 0x30
 80107d6:	f88b 3000 	strb.w	r3, [fp]
 80107da:	465b      	mov	r3, fp
 80107dc:	781a      	ldrb	r2, [r3, #0]
 80107de:	3201      	adds	r2, #1
 80107e0:	701a      	strb	r2, [r3, #0]
 80107e2:	e78c      	b.n	80106fe <_dtoa_r+0x5de>
 80107e4:	461d      	mov	r5, r3
 80107e6:	e7ea      	b.n	80107be <_dtoa_r+0x69e>
 80107e8:	2200      	movs	r2, #0
 80107ea:	4b9b      	ldr	r3, [pc, #620]	; (8010a58 <_dtoa_r+0x938>)
 80107ec:	f7ef ff2c 	bl	8000648 <__aeabi_dmul>
 80107f0:	2200      	movs	r2, #0
 80107f2:	2300      	movs	r3, #0
 80107f4:	4606      	mov	r6, r0
 80107f6:	460f      	mov	r7, r1
 80107f8:	f7f0 f98e 	bl	8000b18 <__aeabi_dcmpeq>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d09a      	beq.n	8010736 <_dtoa_r+0x616>
 8010800:	e7cb      	b.n	801079a <_dtoa_r+0x67a>
 8010802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010804:	2a00      	cmp	r2, #0
 8010806:	f000 808b 	beq.w	8010920 <_dtoa_r+0x800>
 801080a:	9a06      	ldr	r2, [sp, #24]
 801080c:	2a01      	cmp	r2, #1
 801080e:	dc6e      	bgt.n	80108ee <_dtoa_r+0x7ce>
 8010810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010812:	2a00      	cmp	r2, #0
 8010814:	d067      	beq.n	80108e6 <_dtoa_r+0x7c6>
 8010816:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801081a:	9f07      	ldr	r7, [sp, #28]
 801081c:	9d05      	ldr	r5, [sp, #20]
 801081e:	9a05      	ldr	r2, [sp, #20]
 8010820:	2101      	movs	r1, #1
 8010822:	441a      	add	r2, r3
 8010824:	4620      	mov	r0, r4
 8010826:	9205      	str	r2, [sp, #20]
 8010828:	4498      	add	r8, r3
 801082a:	f000 fd04 	bl	8011236 <__i2b>
 801082e:	4606      	mov	r6, r0
 8010830:	2d00      	cmp	r5, #0
 8010832:	dd0c      	ble.n	801084e <_dtoa_r+0x72e>
 8010834:	f1b8 0f00 	cmp.w	r8, #0
 8010838:	dd09      	ble.n	801084e <_dtoa_r+0x72e>
 801083a:	4545      	cmp	r5, r8
 801083c:	9a05      	ldr	r2, [sp, #20]
 801083e:	462b      	mov	r3, r5
 8010840:	bfa8      	it	ge
 8010842:	4643      	movge	r3, r8
 8010844:	1ad2      	subs	r2, r2, r3
 8010846:	9205      	str	r2, [sp, #20]
 8010848:	1aed      	subs	r5, r5, r3
 801084a:	eba8 0803 	sub.w	r8, r8, r3
 801084e:	9b07      	ldr	r3, [sp, #28]
 8010850:	b1eb      	cbz	r3, 801088e <_dtoa_r+0x76e>
 8010852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010854:	2b00      	cmp	r3, #0
 8010856:	d067      	beq.n	8010928 <_dtoa_r+0x808>
 8010858:	b18f      	cbz	r7, 801087e <_dtoa_r+0x75e>
 801085a:	4631      	mov	r1, r6
 801085c:	463a      	mov	r2, r7
 801085e:	4620      	mov	r0, r4
 8010860:	f000 fd88 	bl	8011374 <__pow5mult>
 8010864:	9a04      	ldr	r2, [sp, #16]
 8010866:	4601      	mov	r1, r0
 8010868:	4606      	mov	r6, r0
 801086a:	4620      	mov	r0, r4
 801086c:	f000 fcec 	bl	8011248 <__multiply>
 8010870:	9904      	ldr	r1, [sp, #16]
 8010872:	9008      	str	r0, [sp, #32]
 8010874:	4620      	mov	r0, r4
 8010876:	f000 fc3e 	bl	80110f6 <_Bfree>
 801087a:	9b08      	ldr	r3, [sp, #32]
 801087c:	9304      	str	r3, [sp, #16]
 801087e:	9b07      	ldr	r3, [sp, #28]
 8010880:	1bda      	subs	r2, r3, r7
 8010882:	d004      	beq.n	801088e <_dtoa_r+0x76e>
 8010884:	9904      	ldr	r1, [sp, #16]
 8010886:	4620      	mov	r0, r4
 8010888:	f000 fd74 	bl	8011374 <__pow5mult>
 801088c:	9004      	str	r0, [sp, #16]
 801088e:	2101      	movs	r1, #1
 8010890:	4620      	mov	r0, r4
 8010892:	f000 fcd0 	bl	8011236 <__i2b>
 8010896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010898:	4607      	mov	r7, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 81d0 	beq.w	8010c40 <_dtoa_r+0xb20>
 80108a0:	461a      	mov	r2, r3
 80108a2:	4601      	mov	r1, r0
 80108a4:	4620      	mov	r0, r4
 80108a6:	f000 fd65 	bl	8011374 <__pow5mult>
 80108aa:	9b06      	ldr	r3, [sp, #24]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	4607      	mov	r7, r0
 80108b0:	dc40      	bgt.n	8010934 <_dtoa_r+0x814>
 80108b2:	9b00      	ldr	r3, [sp, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d139      	bne.n	801092c <_dtoa_r+0x80c>
 80108b8:	9b01      	ldr	r3, [sp, #4]
 80108ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d136      	bne.n	8010930 <_dtoa_r+0x810>
 80108c2:	9b01      	ldr	r3, [sp, #4]
 80108c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108c8:	0d1b      	lsrs	r3, r3, #20
 80108ca:	051b      	lsls	r3, r3, #20
 80108cc:	b12b      	cbz	r3, 80108da <_dtoa_r+0x7ba>
 80108ce:	9b05      	ldr	r3, [sp, #20]
 80108d0:	3301      	adds	r3, #1
 80108d2:	9305      	str	r3, [sp, #20]
 80108d4:	f108 0801 	add.w	r8, r8, #1
 80108d8:	2301      	movs	r3, #1
 80108da:	9307      	str	r3, [sp, #28]
 80108dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d12a      	bne.n	8010938 <_dtoa_r+0x818>
 80108e2:	2001      	movs	r0, #1
 80108e4:	e030      	b.n	8010948 <_dtoa_r+0x828>
 80108e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80108ec:	e795      	b.n	801081a <_dtoa_r+0x6fa>
 80108ee:	9b07      	ldr	r3, [sp, #28]
 80108f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80108f4:	42bb      	cmp	r3, r7
 80108f6:	bfbf      	itttt	lt
 80108f8:	9b07      	ldrlt	r3, [sp, #28]
 80108fa:	9707      	strlt	r7, [sp, #28]
 80108fc:	1afa      	sublt	r2, r7, r3
 80108fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010900:	bfbb      	ittet	lt
 8010902:	189b      	addlt	r3, r3, r2
 8010904:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010906:	1bdf      	subge	r7, r3, r7
 8010908:	2700      	movlt	r7, #0
 801090a:	f1b9 0f00 	cmp.w	r9, #0
 801090e:	bfb5      	itete	lt
 8010910:	9b05      	ldrlt	r3, [sp, #20]
 8010912:	9d05      	ldrge	r5, [sp, #20]
 8010914:	eba3 0509 	sublt.w	r5, r3, r9
 8010918:	464b      	movge	r3, r9
 801091a:	bfb8      	it	lt
 801091c:	2300      	movlt	r3, #0
 801091e:	e77e      	b.n	801081e <_dtoa_r+0x6fe>
 8010920:	9f07      	ldr	r7, [sp, #28]
 8010922:	9d05      	ldr	r5, [sp, #20]
 8010924:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010926:	e783      	b.n	8010830 <_dtoa_r+0x710>
 8010928:	9a07      	ldr	r2, [sp, #28]
 801092a:	e7ab      	b.n	8010884 <_dtoa_r+0x764>
 801092c:	2300      	movs	r3, #0
 801092e:	e7d4      	b.n	80108da <_dtoa_r+0x7ba>
 8010930:	9b00      	ldr	r3, [sp, #0]
 8010932:	e7d2      	b.n	80108da <_dtoa_r+0x7ba>
 8010934:	2300      	movs	r3, #0
 8010936:	9307      	str	r3, [sp, #28]
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801093e:	6918      	ldr	r0, [r3, #16]
 8010940:	f000 fc2b 	bl	801119a <__hi0bits>
 8010944:	f1c0 0020 	rsb	r0, r0, #32
 8010948:	4440      	add	r0, r8
 801094a:	f010 001f 	ands.w	r0, r0, #31
 801094e:	d047      	beq.n	80109e0 <_dtoa_r+0x8c0>
 8010950:	f1c0 0320 	rsb	r3, r0, #32
 8010954:	2b04      	cmp	r3, #4
 8010956:	dd3b      	ble.n	80109d0 <_dtoa_r+0x8b0>
 8010958:	9b05      	ldr	r3, [sp, #20]
 801095a:	f1c0 001c 	rsb	r0, r0, #28
 801095e:	4403      	add	r3, r0
 8010960:	9305      	str	r3, [sp, #20]
 8010962:	4405      	add	r5, r0
 8010964:	4480      	add	r8, r0
 8010966:	9b05      	ldr	r3, [sp, #20]
 8010968:	2b00      	cmp	r3, #0
 801096a:	dd05      	ble.n	8010978 <_dtoa_r+0x858>
 801096c:	461a      	mov	r2, r3
 801096e:	9904      	ldr	r1, [sp, #16]
 8010970:	4620      	mov	r0, r4
 8010972:	f000 fd4d 	bl	8011410 <__lshift>
 8010976:	9004      	str	r0, [sp, #16]
 8010978:	f1b8 0f00 	cmp.w	r8, #0
 801097c:	dd05      	ble.n	801098a <_dtoa_r+0x86a>
 801097e:	4639      	mov	r1, r7
 8010980:	4642      	mov	r2, r8
 8010982:	4620      	mov	r0, r4
 8010984:	f000 fd44 	bl	8011410 <__lshift>
 8010988:	4607      	mov	r7, r0
 801098a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801098c:	b353      	cbz	r3, 80109e4 <_dtoa_r+0x8c4>
 801098e:	4639      	mov	r1, r7
 8010990:	9804      	ldr	r0, [sp, #16]
 8010992:	f000 fd91 	bl	80114b8 <__mcmp>
 8010996:	2800      	cmp	r0, #0
 8010998:	da24      	bge.n	80109e4 <_dtoa_r+0x8c4>
 801099a:	2300      	movs	r3, #0
 801099c:	220a      	movs	r2, #10
 801099e:	9904      	ldr	r1, [sp, #16]
 80109a0:	4620      	mov	r0, r4
 80109a2:	f000 fbbf 	bl	8011124 <__multadd>
 80109a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a8:	9004      	str	r0, [sp, #16]
 80109aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 814d 	beq.w	8010c4e <_dtoa_r+0xb2e>
 80109b4:	2300      	movs	r3, #0
 80109b6:	4631      	mov	r1, r6
 80109b8:	220a      	movs	r2, #10
 80109ba:	4620      	mov	r0, r4
 80109bc:	f000 fbb2 	bl	8011124 <__multadd>
 80109c0:	9b02      	ldr	r3, [sp, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	4606      	mov	r6, r0
 80109c6:	dc4f      	bgt.n	8010a68 <_dtoa_r+0x948>
 80109c8:	9b06      	ldr	r3, [sp, #24]
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	dd4c      	ble.n	8010a68 <_dtoa_r+0x948>
 80109ce:	e011      	b.n	80109f4 <_dtoa_r+0x8d4>
 80109d0:	d0c9      	beq.n	8010966 <_dtoa_r+0x846>
 80109d2:	9a05      	ldr	r2, [sp, #20]
 80109d4:	331c      	adds	r3, #28
 80109d6:	441a      	add	r2, r3
 80109d8:	9205      	str	r2, [sp, #20]
 80109da:	441d      	add	r5, r3
 80109dc:	4498      	add	r8, r3
 80109de:	e7c2      	b.n	8010966 <_dtoa_r+0x846>
 80109e0:	4603      	mov	r3, r0
 80109e2:	e7f6      	b.n	80109d2 <_dtoa_r+0x8b2>
 80109e4:	f1b9 0f00 	cmp.w	r9, #0
 80109e8:	dc38      	bgt.n	8010a5c <_dtoa_r+0x93c>
 80109ea:	9b06      	ldr	r3, [sp, #24]
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	dd35      	ble.n	8010a5c <_dtoa_r+0x93c>
 80109f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80109f4:	9b02      	ldr	r3, [sp, #8]
 80109f6:	b963      	cbnz	r3, 8010a12 <_dtoa_r+0x8f2>
 80109f8:	4639      	mov	r1, r7
 80109fa:	2205      	movs	r2, #5
 80109fc:	4620      	mov	r0, r4
 80109fe:	f000 fb91 	bl	8011124 <__multadd>
 8010a02:	4601      	mov	r1, r0
 8010a04:	4607      	mov	r7, r0
 8010a06:	9804      	ldr	r0, [sp, #16]
 8010a08:	f000 fd56 	bl	80114b8 <__mcmp>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	f73f adcc 	bgt.w	80105aa <_dtoa_r+0x48a>
 8010a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a14:	465d      	mov	r5, fp
 8010a16:	ea6f 0a03 	mvn.w	sl, r3
 8010a1a:	f04f 0900 	mov.w	r9, #0
 8010a1e:	4639      	mov	r1, r7
 8010a20:	4620      	mov	r0, r4
 8010a22:	f000 fb68 	bl	80110f6 <_Bfree>
 8010a26:	2e00      	cmp	r6, #0
 8010a28:	f43f aeb7 	beq.w	801079a <_dtoa_r+0x67a>
 8010a2c:	f1b9 0f00 	cmp.w	r9, #0
 8010a30:	d005      	beq.n	8010a3e <_dtoa_r+0x91e>
 8010a32:	45b1      	cmp	r9, r6
 8010a34:	d003      	beq.n	8010a3e <_dtoa_r+0x91e>
 8010a36:	4649      	mov	r1, r9
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f000 fb5c 	bl	80110f6 <_Bfree>
 8010a3e:	4631      	mov	r1, r6
 8010a40:	4620      	mov	r0, r4
 8010a42:	f000 fb58 	bl	80110f6 <_Bfree>
 8010a46:	e6a8      	b.n	801079a <_dtoa_r+0x67a>
 8010a48:	2700      	movs	r7, #0
 8010a4a:	463e      	mov	r6, r7
 8010a4c:	e7e1      	b.n	8010a12 <_dtoa_r+0x8f2>
 8010a4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010a52:	463e      	mov	r6, r7
 8010a54:	e5a9      	b.n	80105aa <_dtoa_r+0x48a>
 8010a56:	bf00      	nop
 8010a58:	40240000 	.word	0x40240000
 8010a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 80fa 	beq.w	8010c5c <_dtoa_r+0xb3c>
 8010a68:	2d00      	cmp	r5, #0
 8010a6a:	dd05      	ble.n	8010a78 <_dtoa_r+0x958>
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	462a      	mov	r2, r5
 8010a70:	4620      	mov	r0, r4
 8010a72:	f000 fccd 	bl	8011410 <__lshift>
 8010a76:	4606      	mov	r6, r0
 8010a78:	9b07      	ldr	r3, [sp, #28]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d04c      	beq.n	8010b18 <_dtoa_r+0x9f8>
 8010a7e:	6871      	ldr	r1, [r6, #4]
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fb04 	bl	801108e <_Balloc>
 8010a86:	6932      	ldr	r2, [r6, #16]
 8010a88:	3202      	adds	r2, #2
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	0092      	lsls	r2, r2, #2
 8010a8e:	f106 010c 	add.w	r1, r6, #12
 8010a92:	300c      	adds	r0, #12
 8010a94:	f000 faf0 	bl	8011078 <memcpy>
 8010a98:	2201      	movs	r2, #1
 8010a9a:	4629      	mov	r1, r5
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f000 fcb7 	bl	8011410 <__lshift>
 8010aa2:	9b00      	ldr	r3, [sp, #0]
 8010aa4:	f8cd b014 	str.w	fp, [sp, #20]
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	46b1      	mov	r9, r6
 8010aae:	9307      	str	r3, [sp, #28]
 8010ab0:	4606      	mov	r6, r0
 8010ab2:	4639      	mov	r1, r7
 8010ab4:	9804      	ldr	r0, [sp, #16]
 8010ab6:	f7ff faa7 	bl	8010008 <quorem>
 8010aba:	4649      	mov	r1, r9
 8010abc:	4605      	mov	r5, r0
 8010abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010ac2:	9804      	ldr	r0, [sp, #16]
 8010ac4:	f000 fcf8 	bl	80114b8 <__mcmp>
 8010ac8:	4632      	mov	r2, r6
 8010aca:	9000      	str	r0, [sp, #0]
 8010acc:	4639      	mov	r1, r7
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f000 fd0c 	bl	80114ec <__mdiff>
 8010ad4:	68c3      	ldr	r3, [r0, #12]
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	bb03      	cbnz	r3, 8010b1c <_dtoa_r+0x9fc>
 8010ada:	4601      	mov	r1, r0
 8010adc:	9008      	str	r0, [sp, #32]
 8010ade:	9804      	ldr	r0, [sp, #16]
 8010ae0:	f000 fcea 	bl	80114b8 <__mcmp>
 8010ae4:	9a08      	ldr	r2, [sp, #32]
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4620      	mov	r0, r4
 8010aec:	9308      	str	r3, [sp, #32]
 8010aee:	f000 fb02 	bl	80110f6 <_Bfree>
 8010af2:	9b08      	ldr	r3, [sp, #32]
 8010af4:	b9a3      	cbnz	r3, 8010b20 <_dtoa_r+0xa00>
 8010af6:	9a06      	ldr	r2, [sp, #24]
 8010af8:	b992      	cbnz	r2, 8010b20 <_dtoa_r+0xa00>
 8010afa:	9a07      	ldr	r2, [sp, #28]
 8010afc:	b982      	cbnz	r2, 8010b20 <_dtoa_r+0xa00>
 8010afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b02:	d029      	beq.n	8010b58 <_dtoa_r+0xa38>
 8010b04:	9b00      	ldr	r3, [sp, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	dd01      	ble.n	8010b0e <_dtoa_r+0x9ee>
 8010b0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010b0e:	9b05      	ldr	r3, [sp, #20]
 8010b10:	1c5d      	adds	r5, r3, #1
 8010b12:	f883 8000 	strb.w	r8, [r3]
 8010b16:	e782      	b.n	8010a1e <_dtoa_r+0x8fe>
 8010b18:	4630      	mov	r0, r6
 8010b1a:	e7c2      	b.n	8010aa2 <_dtoa_r+0x982>
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e7e3      	b.n	8010ae8 <_dtoa_r+0x9c8>
 8010b20:	9a00      	ldr	r2, [sp, #0]
 8010b22:	2a00      	cmp	r2, #0
 8010b24:	db04      	blt.n	8010b30 <_dtoa_r+0xa10>
 8010b26:	d125      	bne.n	8010b74 <_dtoa_r+0xa54>
 8010b28:	9a06      	ldr	r2, [sp, #24]
 8010b2a:	bb1a      	cbnz	r2, 8010b74 <_dtoa_r+0xa54>
 8010b2c:	9a07      	ldr	r2, [sp, #28]
 8010b2e:	bb0a      	cbnz	r2, 8010b74 <_dtoa_r+0xa54>
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	ddec      	ble.n	8010b0e <_dtoa_r+0x9ee>
 8010b34:	2201      	movs	r2, #1
 8010b36:	9904      	ldr	r1, [sp, #16]
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f000 fc69 	bl	8011410 <__lshift>
 8010b3e:	4639      	mov	r1, r7
 8010b40:	9004      	str	r0, [sp, #16]
 8010b42:	f000 fcb9 	bl	80114b8 <__mcmp>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	dc03      	bgt.n	8010b52 <_dtoa_r+0xa32>
 8010b4a:	d1e0      	bne.n	8010b0e <_dtoa_r+0x9ee>
 8010b4c:	f018 0f01 	tst.w	r8, #1
 8010b50:	d0dd      	beq.n	8010b0e <_dtoa_r+0x9ee>
 8010b52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b56:	d1d8      	bne.n	8010b0a <_dtoa_r+0x9ea>
 8010b58:	9b05      	ldr	r3, [sp, #20]
 8010b5a:	9a05      	ldr	r2, [sp, #20]
 8010b5c:	1c5d      	adds	r5, r3, #1
 8010b5e:	2339      	movs	r3, #57	; 0x39
 8010b60:	7013      	strb	r3, [r2, #0]
 8010b62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b66:	2b39      	cmp	r3, #57	; 0x39
 8010b68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010b6c:	d04f      	beq.n	8010c0e <_dtoa_r+0xaee>
 8010b6e:	3301      	adds	r3, #1
 8010b70:	7013      	strb	r3, [r2, #0]
 8010b72:	e754      	b.n	8010a1e <_dtoa_r+0x8fe>
 8010b74:	9a05      	ldr	r2, [sp, #20]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	f102 0501 	add.w	r5, r2, #1
 8010b7c:	dd06      	ble.n	8010b8c <_dtoa_r+0xa6c>
 8010b7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b82:	d0e9      	beq.n	8010b58 <_dtoa_r+0xa38>
 8010b84:	f108 0801 	add.w	r8, r8, #1
 8010b88:	9b05      	ldr	r3, [sp, #20]
 8010b8a:	e7c2      	b.n	8010b12 <_dtoa_r+0x9f2>
 8010b8c:	9a02      	ldr	r2, [sp, #8]
 8010b8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010b92:	eba5 030b 	sub.w	r3, r5, fp
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d021      	beq.n	8010bde <_dtoa_r+0xabe>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	220a      	movs	r2, #10
 8010b9e:	9904      	ldr	r1, [sp, #16]
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f000 fabf 	bl	8011124 <__multadd>
 8010ba6:	45b1      	cmp	r9, r6
 8010ba8:	9004      	str	r0, [sp, #16]
 8010baa:	f04f 0300 	mov.w	r3, #0
 8010bae:	f04f 020a 	mov.w	r2, #10
 8010bb2:	4649      	mov	r1, r9
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	d105      	bne.n	8010bc4 <_dtoa_r+0xaa4>
 8010bb8:	f000 fab4 	bl	8011124 <__multadd>
 8010bbc:	4681      	mov	r9, r0
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	9505      	str	r5, [sp, #20]
 8010bc2:	e776      	b.n	8010ab2 <_dtoa_r+0x992>
 8010bc4:	f000 faae 	bl	8011124 <__multadd>
 8010bc8:	4631      	mov	r1, r6
 8010bca:	4681      	mov	r9, r0
 8010bcc:	2300      	movs	r3, #0
 8010bce:	220a      	movs	r2, #10
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f000 faa7 	bl	8011124 <__multadd>
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	e7f2      	b.n	8010bc0 <_dtoa_r+0xaa0>
 8010bda:	f04f 0900 	mov.w	r9, #0
 8010bde:	2201      	movs	r2, #1
 8010be0:	9904      	ldr	r1, [sp, #16]
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 fc14 	bl	8011410 <__lshift>
 8010be8:	4639      	mov	r1, r7
 8010bea:	9004      	str	r0, [sp, #16]
 8010bec:	f000 fc64 	bl	80114b8 <__mcmp>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	dcb6      	bgt.n	8010b62 <_dtoa_r+0xa42>
 8010bf4:	d102      	bne.n	8010bfc <_dtoa_r+0xadc>
 8010bf6:	f018 0f01 	tst.w	r8, #1
 8010bfa:	d1b2      	bne.n	8010b62 <_dtoa_r+0xa42>
 8010bfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010c00:	2b30      	cmp	r3, #48	; 0x30
 8010c02:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010c06:	f47f af0a 	bne.w	8010a1e <_dtoa_r+0x8fe>
 8010c0a:	4615      	mov	r5, r2
 8010c0c:	e7f6      	b.n	8010bfc <_dtoa_r+0xadc>
 8010c0e:	4593      	cmp	fp, r2
 8010c10:	d105      	bne.n	8010c1e <_dtoa_r+0xafe>
 8010c12:	2331      	movs	r3, #49	; 0x31
 8010c14:	f10a 0a01 	add.w	sl, sl, #1
 8010c18:	f88b 3000 	strb.w	r3, [fp]
 8010c1c:	e6ff      	b.n	8010a1e <_dtoa_r+0x8fe>
 8010c1e:	4615      	mov	r5, r2
 8010c20:	e79f      	b.n	8010b62 <_dtoa_r+0xa42>
 8010c22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010c88 <_dtoa_r+0xb68>
 8010c26:	e007      	b.n	8010c38 <_dtoa_r+0xb18>
 8010c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010c8c <_dtoa_r+0xb6c>
 8010c2e:	b11b      	cbz	r3, 8010c38 <_dtoa_r+0xb18>
 8010c30:	f10b 0308 	add.w	r3, fp, #8
 8010c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c36:	6013      	str	r3, [r2, #0]
 8010c38:	4658      	mov	r0, fp
 8010c3a:	b017      	add	sp, #92	; 0x5c
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	9b06      	ldr	r3, [sp, #24]
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	f77f ae35 	ble.w	80108b2 <_dtoa_r+0x792>
 8010c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c4a:	9307      	str	r3, [sp, #28]
 8010c4c:	e649      	b.n	80108e2 <_dtoa_r+0x7c2>
 8010c4e:	9b02      	ldr	r3, [sp, #8]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	dc03      	bgt.n	8010c5c <_dtoa_r+0xb3c>
 8010c54:	9b06      	ldr	r3, [sp, #24]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	f73f aecc 	bgt.w	80109f4 <_dtoa_r+0x8d4>
 8010c5c:	465d      	mov	r5, fp
 8010c5e:	4639      	mov	r1, r7
 8010c60:	9804      	ldr	r0, [sp, #16]
 8010c62:	f7ff f9d1 	bl	8010008 <quorem>
 8010c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010c6a:	f805 8b01 	strb.w	r8, [r5], #1
 8010c6e:	9a02      	ldr	r2, [sp, #8]
 8010c70:	eba5 030b 	sub.w	r3, r5, fp
 8010c74:	429a      	cmp	r2, r3
 8010c76:	ddb0      	ble.n	8010bda <_dtoa_r+0xaba>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	220a      	movs	r2, #10
 8010c7c:	9904      	ldr	r1, [sp, #16]
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f000 fa50 	bl	8011124 <__multadd>
 8010c84:	9004      	str	r0, [sp, #16]
 8010c86:	e7ea      	b.n	8010c5e <_dtoa_r+0xb3e>
 8010c88:	080148dc 	.word	0x080148dc
 8010c8c:	0801464e 	.word	0x0801464e

08010c90 <__sflush_r>:
 8010c90:	898a      	ldrh	r2, [r1, #12]
 8010c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c96:	4605      	mov	r5, r0
 8010c98:	0710      	lsls	r0, r2, #28
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	d458      	bmi.n	8010d50 <__sflush_r+0xc0>
 8010c9e:	684b      	ldr	r3, [r1, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	dc05      	bgt.n	8010cb0 <__sflush_r+0x20>
 8010ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	dc02      	bgt.n	8010cb0 <__sflush_r+0x20>
 8010caa:	2000      	movs	r0, #0
 8010cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cb2:	2e00      	cmp	r6, #0
 8010cb4:	d0f9      	beq.n	8010caa <__sflush_r+0x1a>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cbc:	682f      	ldr	r7, [r5, #0]
 8010cbe:	6a21      	ldr	r1, [r4, #32]
 8010cc0:	602b      	str	r3, [r5, #0]
 8010cc2:	d032      	beq.n	8010d2a <__sflush_r+0x9a>
 8010cc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cc6:	89a3      	ldrh	r3, [r4, #12]
 8010cc8:	075a      	lsls	r2, r3, #29
 8010cca:	d505      	bpl.n	8010cd8 <__sflush_r+0x48>
 8010ccc:	6863      	ldr	r3, [r4, #4]
 8010cce:	1ac0      	subs	r0, r0, r3
 8010cd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cd2:	b10b      	cbz	r3, 8010cd8 <__sflush_r+0x48>
 8010cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cd6:	1ac0      	subs	r0, r0, r3
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4602      	mov	r2, r0
 8010cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cde:	6a21      	ldr	r1, [r4, #32]
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	47b0      	blx	r6
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	d106      	bne.n	8010cf8 <__sflush_r+0x68>
 8010cea:	6829      	ldr	r1, [r5, #0]
 8010cec:	291d      	cmp	r1, #29
 8010cee:	d848      	bhi.n	8010d82 <__sflush_r+0xf2>
 8010cf0:	4a29      	ldr	r2, [pc, #164]	; (8010d98 <__sflush_r+0x108>)
 8010cf2:	40ca      	lsrs	r2, r1
 8010cf4:	07d6      	lsls	r6, r2, #31
 8010cf6:	d544      	bpl.n	8010d82 <__sflush_r+0xf2>
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	6062      	str	r2, [r4, #4]
 8010cfc:	04d9      	lsls	r1, r3, #19
 8010cfe:	6922      	ldr	r2, [r4, #16]
 8010d00:	6022      	str	r2, [r4, #0]
 8010d02:	d504      	bpl.n	8010d0e <__sflush_r+0x7e>
 8010d04:	1c42      	adds	r2, r0, #1
 8010d06:	d101      	bne.n	8010d0c <__sflush_r+0x7c>
 8010d08:	682b      	ldr	r3, [r5, #0]
 8010d0a:	b903      	cbnz	r3, 8010d0e <__sflush_r+0x7e>
 8010d0c:	6560      	str	r0, [r4, #84]	; 0x54
 8010d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d10:	602f      	str	r7, [r5, #0]
 8010d12:	2900      	cmp	r1, #0
 8010d14:	d0c9      	beq.n	8010caa <__sflush_r+0x1a>
 8010d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d1a:	4299      	cmp	r1, r3
 8010d1c:	d002      	beq.n	8010d24 <__sflush_r+0x94>
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f000 fc9e 	bl	8011660 <_free_r>
 8010d24:	2000      	movs	r0, #0
 8010d26:	6360      	str	r0, [r4, #52]	; 0x34
 8010d28:	e7c0      	b.n	8010cac <__sflush_r+0x1c>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	47b0      	blx	r6
 8010d30:	1c41      	adds	r1, r0, #1
 8010d32:	d1c8      	bne.n	8010cc6 <__sflush_r+0x36>
 8010d34:	682b      	ldr	r3, [r5, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d0c5      	beq.n	8010cc6 <__sflush_r+0x36>
 8010d3a:	2b1d      	cmp	r3, #29
 8010d3c:	d001      	beq.n	8010d42 <__sflush_r+0xb2>
 8010d3e:	2b16      	cmp	r3, #22
 8010d40:	d101      	bne.n	8010d46 <__sflush_r+0xb6>
 8010d42:	602f      	str	r7, [r5, #0]
 8010d44:	e7b1      	b.n	8010caa <__sflush_r+0x1a>
 8010d46:	89a3      	ldrh	r3, [r4, #12]
 8010d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d4c:	81a3      	strh	r3, [r4, #12]
 8010d4e:	e7ad      	b.n	8010cac <__sflush_r+0x1c>
 8010d50:	690f      	ldr	r7, [r1, #16]
 8010d52:	2f00      	cmp	r7, #0
 8010d54:	d0a9      	beq.n	8010caa <__sflush_r+0x1a>
 8010d56:	0793      	lsls	r3, r2, #30
 8010d58:	680e      	ldr	r6, [r1, #0]
 8010d5a:	bf08      	it	eq
 8010d5c:	694b      	ldreq	r3, [r1, #20]
 8010d5e:	600f      	str	r7, [r1, #0]
 8010d60:	bf18      	it	ne
 8010d62:	2300      	movne	r3, #0
 8010d64:	eba6 0807 	sub.w	r8, r6, r7
 8010d68:	608b      	str	r3, [r1, #8]
 8010d6a:	f1b8 0f00 	cmp.w	r8, #0
 8010d6e:	dd9c      	ble.n	8010caa <__sflush_r+0x1a>
 8010d70:	4643      	mov	r3, r8
 8010d72:	463a      	mov	r2, r7
 8010d74:	6a21      	ldr	r1, [r4, #32]
 8010d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d78:	4628      	mov	r0, r5
 8010d7a:	47b0      	blx	r6
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	dc06      	bgt.n	8010d8e <__sflush_r+0xfe>
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d86:	81a3      	strh	r3, [r4, #12]
 8010d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d8c:	e78e      	b.n	8010cac <__sflush_r+0x1c>
 8010d8e:	4407      	add	r7, r0
 8010d90:	eba8 0800 	sub.w	r8, r8, r0
 8010d94:	e7e9      	b.n	8010d6a <__sflush_r+0xda>
 8010d96:	bf00      	nop
 8010d98:	20400001 	.word	0x20400001

08010d9c <_fflush_r>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	690b      	ldr	r3, [r1, #16]
 8010da0:	4605      	mov	r5, r0
 8010da2:	460c      	mov	r4, r1
 8010da4:	b1db      	cbz	r3, 8010dde <_fflush_r+0x42>
 8010da6:	b118      	cbz	r0, 8010db0 <_fflush_r+0x14>
 8010da8:	6983      	ldr	r3, [r0, #24]
 8010daa:	b90b      	cbnz	r3, 8010db0 <_fflush_r+0x14>
 8010dac:	f000 f860 	bl	8010e70 <__sinit>
 8010db0:	4b0c      	ldr	r3, [pc, #48]	; (8010de4 <_fflush_r+0x48>)
 8010db2:	429c      	cmp	r4, r3
 8010db4:	d109      	bne.n	8010dca <_fflush_r+0x2e>
 8010db6:	686c      	ldr	r4, [r5, #4]
 8010db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dbc:	b17b      	cbz	r3, 8010dde <_fflush_r+0x42>
 8010dbe:	4621      	mov	r1, r4
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc6:	f7ff bf63 	b.w	8010c90 <__sflush_r>
 8010dca:	4b07      	ldr	r3, [pc, #28]	; (8010de8 <_fflush_r+0x4c>)
 8010dcc:	429c      	cmp	r4, r3
 8010dce:	d101      	bne.n	8010dd4 <_fflush_r+0x38>
 8010dd0:	68ac      	ldr	r4, [r5, #8]
 8010dd2:	e7f1      	b.n	8010db8 <_fflush_r+0x1c>
 8010dd4:	4b05      	ldr	r3, [pc, #20]	; (8010dec <_fflush_r+0x50>)
 8010dd6:	429c      	cmp	r4, r3
 8010dd8:	bf08      	it	eq
 8010dda:	68ec      	ldreq	r4, [r5, #12]
 8010ddc:	e7ec      	b.n	8010db8 <_fflush_r+0x1c>
 8010dde:	2000      	movs	r0, #0
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	0801467c 	.word	0x0801467c
 8010de8:	0801469c 	.word	0x0801469c
 8010dec:	0801465c 	.word	0x0801465c

08010df0 <std>:
 8010df0:	2300      	movs	r3, #0
 8010df2:	b510      	push	{r4, lr}
 8010df4:	4604      	mov	r4, r0
 8010df6:	e9c0 3300 	strd	r3, r3, [r0]
 8010dfa:	6083      	str	r3, [r0, #8]
 8010dfc:	8181      	strh	r1, [r0, #12]
 8010dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8010e00:	81c2      	strh	r2, [r0, #14]
 8010e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e06:	6183      	str	r3, [r0, #24]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	2208      	movs	r2, #8
 8010e0c:	305c      	adds	r0, #92	; 0x5c
 8010e0e:	f7fe fb17 	bl	800f440 <memset>
 8010e12:	4b05      	ldr	r3, [pc, #20]	; (8010e28 <std+0x38>)
 8010e14:	6263      	str	r3, [r4, #36]	; 0x24
 8010e16:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <std+0x3c>)
 8010e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e1a:	4b05      	ldr	r3, [pc, #20]	; (8010e30 <std+0x40>)
 8010e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e1e:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <std+0x44>)
 8010e20:	6224      	str	r4, [r4, #32]
 8010e22:	6323      	str	r3, [r4, #48]	; 0x30
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	bf00      	nop
 8010e28:	08011cf5 	.word	0x08011cf5
 8010e2c:	08011d17 	.word	0x08011d17
 8010e30:	08011d4f 	.word	0x08011d4f
 8010e34:	08011d73 	.word	0x08011d73

08010e38 <_cleanup_r>:
 8010e38:	4901      	ldr	r1, [pc, #4]	; (8010e40 <_cleanup_r+0x8>)
 8010e3a:	f000 b885 	b.w	8010f48 <_fwalk_reent>
 8010e3e:	bf00      	nop
 8010e40:	08010d9d 	.word	0x08010d9d

08010e44 <__sfmoreglue>:
 8010e44:	b570      	push	{r4, r5, r6, lr}
 8010e46:	1e4a      	subs	r2, r1, #1
 8010e48:	2568      	movs	r5, #104	; 0x68
 8010e4a:	4355      	muls	r5, r2
 8010e4c:	460e      	mov	r6, r1
 8010e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e52:	f000 fc53 	bl	80116fc <_malloc_r>
 8010e56:	4604      	mov	r4, r0
 8010e58:	b140      	cbz	r0, 8010e6c <__sfmoreglue+0x28>
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8010e60:	300c      	adds	r0, #12
 8010e62:	60a0      	str	r0, [r4, #8]
 8010e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e68:	f7fe faea 	bl	800f440 <memset>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}

08010e70 <__sinit>:
 8010e70:	6983      	ldr	r3, [r0, #24]
 8010e72:	b510      	push	{r4, lr}
 8010e74:	4604      	mov	r4, r0
 8010e76:	bb33      	cbnz	r3, 8010ec6 <__sinit+0x56>
 8010e78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010e7c:	6503      	str	r3, [r0, #80]	; 0x50
 8010e7e:	4b12      	ldr	r3, [pc, #72]	; (8010ec8 <__sinit+0x58>)
 8010e80:	4a12      	ldr	r2, [pc, #72]	; (8010ecc <__sinit+0x5c>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	6282      	str	r2, [r0, #40]	; 0x28
 8010e86:	4298      	cmp	r0, r3
 8010e88:	bf04      	itt	eq
 8010e8a:	2301      	moveq	r3, #1
 8010e8c:	6183      	streq	r3, [r0, #24]
 8010e8e:	f000 f81f 	bl	8010ed0 <__sfp>
 8010e92:	6060      	str	r0, [r4, #4]
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 f81b 	bl	8010ed0 <__sfp>
 8010e9a:	60a0      	str	r0, [r4, #8]
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 f817 	bl	8010ed0 <__sfp>
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	60e0      	str	r0, [r4, #12]
 8010ea6:	2104      	movs	r1, #4
 8010ea8:	6860      	ldr	r0, [r4, #4]
 8010eaa:	f7ff ffa1 	bl	8010df0 <std>
 8010eae:	2201      	movs	r2, #1
 8010eb0:	2109      	movs	r1, #9
 8010eb2:	68a0      	ldr	r0, [r4, #8]
 8010eb4:	f7ff ff9c 	bl	8010df0 <std>
 8010eb8:	2202      	movs	r2, #2
 8010eba:	2112      	movs	r1, #18
 8010ebc:	68e0      	ldr	r0, [r4, #12]
 8010ebe:	f7ff ff97 	bl	8010df0 <std>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	61a3      	str	r3, [r4, #24]
 8010ec6:	bd10      	pop	{r4, pc}
 8010ec8:	08014618 	.word	0x08014618
 8010ecc:	08010e39 	.word	0x08010e39

08010ed0 <__sfp>:
 8010ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed2:	4b1b      	ldr	r3, [pc, #108]	; (8010f40 <__sfp+0x70>)
 8010ed4:	681e      	ldr	r6, [r3, #0]
 8010ed6:	69b3      	ldr	r3, [r6, #24]
 8010ed8:	4607      	mov	r7, r0
 8010eda:	b913      	cbnz	r3, 8010ee2 <__sfp+0x12>
 8010edc:	4630      	mov	r0, r6
 8010ede:	f7ff ffc7 	bl	8010e70 <__sinit>
 8010ee2:	3648      	adds	r6, #72	; 0x48
 8010ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	d503      	bpl.n	8010ef4 <__sfp+0x24>
 8010eec:	6833      	ldr	r3, [r6, #0]
 8010eee:	b133      	cbz	r3, 8010efe <__sfp+0x2e>
 8010ef0:	6836      	ldr	r6, [r6, #0]
 8010ef2:	e7f7      	b.n	8010ee4 <__sfp+0x14>
 8010ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ef8:	b16d      	cbz	r5, 8010f16 <__sfp+0x46>
 8010efa:	3468      	adds	r4, #104	; 0x68
 8010efc:	e7f4      	b.n	8010ee8 <__sfp+0x18>
 8010efe:	2104      	movs	r1, #4
 8010f00:	4638      	mov	r0, r7
 8010f02:	f7ff ff9f 	bl	8010e44 <__sfmoreglue>
 8010f06:	6030      	str	r0, [r6, #0]
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d1f1      	bne.n	8010ef0 <__sfp+0x20>
 8010f0c:	230c      	movs	r3, #12
 8010f0e:	603b      	str	r3, [r7, #0]
 8010f10:	4604      	mov	r4, r0
 8010f12:	4620      	mov	r0, r4
 8010f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f16:	4b0b      	ldr	r3, [pc, #44]	; (8010f44 <__sfp+0x74>)
 8010f18:	6665      	str	r5, [r4, #100]	; 0x64
 8010f1a:	e9c4 5500 	strd	r5, r5, [r4]
 8010f1e:	60a5      	str	r5, [r4, #8]
 8010f20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010f24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010f28:	2208      	movs	r2, #8
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f30:	f7fe fa86 	bl	800f440 <memset>
 8010f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f3c:	e7e9      	b.n	8010f12 <__sfp+0x42>
 8010f3e:	bf00      	nop
 8010f40:	08014618 	.word	0x08014618
 8010f44:	ffff0001 	.word	0xffff0001

08010f48 <_fwalk_reent>:
 8010f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	4689      	mov	r9, r1
 8010f50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f54:	2600      	movs	r6, #0
 8010f56:	b914      	cbnz	r4, 8010f5e <_fwalk_reent+0x16>
 8010f58:	4630      	mov	r0, r6
 8010f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010f62:	3f01      	subs	r7, #1
 8010f64:	d501      	bpl.n	8010f6a <_fwalk_reent+0x22>
 8010f66:	6824      	ldr	r4, [r4, #0]
 8010f68:	e7f5      	b.n	8010f56 <_fwalk_reent+0xe>
 8010f6a:	89ab      	ldrh	r3, [r5, #12]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d907      	bls.n	8010f80 <_fwalk_reent+0x38>
 8010f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f74:	3301      	adds	r3, #1
 8010f76:	d003      	beq.n	8010f80 <_fwalk_reent+0x38>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	47c8      	blx	r9
 8010f7e:	4306      	orrs	r6, r0
 8010f80:	3568      	adds	r5, #104	; 0x68
 8010f82:	e7ee      	b.n	8010f62 <_fwalk_reent+0x1a>

08010f84 <_localeconv_r>:
 8010f84:	4b04      	ldr	r3, [pc, #16]	; (8010f98 <_localeconv_r+0x14>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	6a18      	ldr	r0, [r3, #32]
 8010f8a:	4b04      	ldr	r3, [pc, #16]	; (8010f9c <_localeconv_r+0x18>)
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	bf08      	it	eq
 8010f90:	4618      	moveq	r0, r3
 8010f92:	30f0      	adds	r0, #240	; 0xf0
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	20001c34 	.word	0x20001c34
 8010f9c:	20001c98 	.word	0x20001c98

08010fa0 <__swhatbuf_r>:
 8010fa0:	b570      	push	{r4, r5, r6, lr}
 8010fa2:	460e      	mov	r6, r1
 8010fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fa8:	2900      	cmp	r1, #0
 8010faa:	b096      	sub	sp, #88	; 0x58
 8010fac:	4614      	mov	r4, r2
 8010fae:	461d      	mov	r5, r3
 8010fb0:	da07      	bge.n	8010fc2 <__swhatbuf_r+0x22>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	89b3      	ldrh	r3, [r6, #12]
 8010fb8:	061a      	lsls	r2, r3, #24
 8010fba:	d410      	bmi.n	8010fde <__swhatbuf_r+0x3e>
 8010fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fc0:	e00e      	b.n	8010fe0 <__swhatbuf_r+0x40>
 8010fc2:	466a      	mov	r2, sp
 8010fc4:	f000 fefc 	bl	8011dc0 <_fstat_r>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	dbf2      	blt.n	8010fb2 <__swhatbuf_r+0x12>
 8010fcc:	9a01      	ldr	r2, [sp, #4]
 8010fce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010fd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fd6:	425a      	negs	r2, r3
 8010fd8:	415a      	adcs	r2, r3
 8010fda:	602a      	str	r2, [r5, #0]
 8010fdc:	e7ee      	b.n	8010fbc <__swhatbuf_r+0x1c>
 8010fde:	2340      	movs	r3, #64	; 0x40
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	6023      	str	r3, [r4, #0]
 8010fe4:	b016      	add	sp, #88	; 0x58
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}

08010fe8 <__smakebuf_r>:
 8010fe8:	898b      	ldrh	r3, [r1, #12]
 8010fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fec:	079d      	lsls	r5, r3, #30
 8010fee:	4606      	mov	r6, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	d507      	bpl.n	8011004 <__smakebuf_r+0x1c>
 8010ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	6123      	str	r3, [r4, #16]
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	6163      	str	r3, [r4, #20]
 8011000:	b002      	add	sp, #8
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	ab01      	add	r3, sp, #4
 8011006:	466a      	mov	r2, sp
 8011008:	f7ff ffca 	bl	8010fa0 <__swhatbuf_r>
 801100c:	9900      	ldr	r1, [sp, #0]
 801100e:	4605      	mov	r5, r0
 8011010:	4630      	mov	r0, r6
 8011012:	f000 fb73 	bl	80116fc <_malloc_r>
 8011016:	b948      	cbnz	r0, 801102c <__smakebuf_r+0x44>
 8011018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801101c:	059a      	lsls	r2, r3, #22
 801101e:	d4ef      	bmi.n	8011000 <__smakebuf_r+0x18>
 8011020:	f023 0303 	bic.w	r3, r3, #3
 8011024:	f043 0302 	orr.w	r3, r3, #2
 8011028:	81a3      	strh	r3, [r4, #12]
 801102a:	e7e3      	b.n	8010ff4 <__smakebuf_r+0xc>
 801102c:	4b0d      	ldr	r3, [pc, #52]	; (8011064 <__smakebuf_r+0x7c>)
 801102e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	6020      	str	r0, [r4, #0]
 8011034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011038:	81a3      	strh	r3, [r4, #12]
 801103a:	9b00      	ldr	r3, [sp, #0]
 801103c:	6163      	str	r3, [r4, #20]
 801103e:	9b01      	ldr	r3, [sp, #4]
 8011040:	6120      	str	r0, [r4, #16]
 8011042:	b15b      	cbz	r3, 801105c <__smakebuf_r+0x74>
 8011044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011048:	4630      	mov	r0, r6
 801104a:	f000 fecb 	bl	8011de4 <_isatty_r>
 801104e:	b128      	cbz	r0, 801105c <__smakebuf_r+0x74>
 8011050:	89a3      	ldrh	r3, [r4, #12]
 8011052:	f023 0303 	bic.w	r3, r3, #3
 8011056:	f043 0301 	orr.w	r3, r3, #1
 801105a:	81a3      	strh	r3, [r4, #12]
 801105c:	89a3      	ldrh	r3, [r4, #12]
 801105e:	431d      	orrs	r5, r3
 8011060:	81a5      	strh	r5, [r4, #12]
 8011062:	e7cd      	b.n	8011000 <__smakebuf_r+0x18>
 8011064:	08010e39 	.word	0x08010e39

08011068 <malloc>:
 8011068:	4b02      	ldr	r3, [pc, #8]	; (8011074 <malloc+0xc>)
 801106a:	4601      	mov	r1, r0
 801106c:	6818      	ldr	r0, [r3, #0]
 801106e:	f000 bb45 	b.w	80116fc <_malloc_r>
 8011072:	bf00      	nop
 8011074:	20001c34 	.word	0x20001c34

08011078 <memcpy>:
 8011078:	b510      	push	{r4, lr}
 801107a:	1e43      	subs	r3, r0, #1
 801107c:	440a      	add	r2, r1
 801107e:	4291      	cmp	r1, r2
 8011080:	d100      	bne.n	8011084 <memcpy+0xc>
 8011082:	bd10      	pop	{r4, pc}
 8011084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011088:	f803 4f01 	strb.w	r4, [r3, #1]!
 801108c:	e7f7      	b.n	801107e <memcpy+0x6>

0801108e <_Balloc>:
 801108e:	b570      	push	{r4, r5, r6, lr}
 8011090:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011092:	4604      	mov	r4, r0
 8011094:	460e      	mov	r6, r1
 8011096:	b93d      	cbnz	r5, 80110a8 <_Balloc+0x1a>
 8011098:	2010      	movs	r0, #16
 801109a:	f7ff ffe5 	bl	8011068 <malloc>
 801109e:	6260      	str	r0, [r4, #36]	; 0x24
 80110a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110a4:	6005      	str	r5, [r0, #0]
 80110a6:	60c5      	str	r5, [r0, #12]
 80110a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80110aa:	68eb      	ldr	r3, [r5, #12]
 80110ac:	b183      	cbz	r3, 80110d0 <_Balloc+0x42>
 80110ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80110b6:	b9b8      	cbnz	r0, 80110e8 <_Balloc+0x5a>
 80110b8:	2101      	movs	r1, #1
 80110ba:	fa01 f506 	lsl.w	r5, r1, r6
 80110be:	1d6a      	adds	r2, r5, #5
 80110c0:	0092      	lsls	r2, r2, #2
 80110c2:	4620      	mov	r0, r4
 80110c4:	f000 fabe 	bl	8011644 <_calloc_r>
 80110c8:	b160      	cbz	r0, 80110e4 <_Balloc+0x56>
 80110ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80110ce:	e00e      	b.n	80110ee <_Balloc+0x60>
 80110d0:	2221      	movs	r2, #33	; 0x21
 80110d2:	2104      	movs	r1, #4
 80110d4:	4620      	mov	r0, r4
 80110d6:	f000 fab5 	bl	8011644 <_calloc_r>
 80110da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110dc:	60e8      	str	r0, [r5, #12]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1e4      	bne.n	80110ae <_Balloc+0x20>
 80110e4:	2000      	movs	r0, #0
 80110e6:	bd70      	pop	{r4, r5, r6, pc}
 80110e8:	6802      	ldr	r2, [r0, #0]
 80110ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80110ee:	2300      	movs	r3, #0
 80110f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80110f4:	e7f7      	b.n	80110e6 <_Balloc+0x58>

080110f6 <_Bfree>:
 80110f6:	b570      	push	{r4, r5, r6, lr}
 80110f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80110fa:	4606      	mov	r6, r0
 80110fc:	460d      	mov	r5, r1
 80110fe:	b93c      	cbnz	r4, 8011110 <_Bfree+0x1a>
 8011100:	2010      	movs	r0, #16
 8011102:	f7ff ffb1 	bl	8011068 <malloc>
 8011106:	6270      	str	r0, [r6, #36]	; 0x24
 8011108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801110c:	6004      	str	r4, [r0, #0]
 801110e:	60c4      	str	r4, [r0, #12]
 8011110:	b13d      	cbz	r5, 8011122 <_Bfree+0x2c>
 8011112:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011114:	686a      	ldr	r2, [r5, #4]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801111c:	6029      	str	r1, [r5, #0]
 801111e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011122:	bd70      	pop	{r4, r5, r6, pc}

08011124 <__multadd>:
 8011124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011128:	690d      	ldr	r5, [r1, #16]
 801112a:	461f      	mov	r7, r3
 801112c:	4606      	mov	r6, r0
 801112e:	460c      	mov	r4, r1
 8011130:	f101 0c14 	add.w	ip, r1, #20
 8011134:	2300      	movs	r3, #0
 8011136:	f8dc 0000 	ldr.w	r0, [ip]
 801113a:	b281      	uxth	r1, r0
 801113c:	fb02 7101 	mla	r1, r2, r1, r7
 8011140:	0c0f      	lsrs	r7, r1, #16
 8011142:	0c00      	lsrs	r0, r0, #16
 8011144:	fb02 7000 	mla	r0, r2, r0, r7
 8011148:	b289      	uxth	r1, r1
 801114a:	3301      	adds	r3, #1
 801114c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011150:	429d      	cmp	r5, r3
 8011152:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011156:	f84c 1b04 	str.w	r1, [ip], #4
 801115a:	dcec      	bgt.n	8011136 <__multadd+0x12>
 801115c:	b1d7      	cbz	r7, 8011194 <__multadd+0x70>
 801115e:	68a3      	ldr	r3, [r4, #8]
 8011160:	42ab      	cmp	r3, r5
 8011162:	dc12      	bgt.n	801118a <__multadd+0x66>
 8011164:	6861      	ldr	r1, [r4, #4]
 8011166:	4630      	mov	r0, r6
 8011168:	3101      	adds	r1, #1
 801116a:	f7ff ff90 	bl	801108e <_Balloc>
 801116e:	6922      	ldr	r2, [r4, #16]
 8011170:	3202      	adds	r2, #2
 8011172:	f104 010c 	add.w	r1, r4, #12
 8011176:	4680      	mov	r8, r0
 8011178:	0092      	lsls	r2, r2, #2
 801117a:	300c      	adds	r0, #12
 801117c:	f7ff ff7c 	bl	8011078 <memcpy>
 8011180:	4621      	mov	r1, r4
 8011182:	4630      	mov	r0, r6
 8011184:	f7ff ffb7 	bl	80110f6 <_Bfree>
 8011188:	4644      	mov	r4, r8
 801118a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801118e:	3501      	adds	r5, #1
 8011190:	615f      	str	r7, [r3, #20]
 8011192:	6125      	str	r5, [r4, #16]
 8011194:	4620      	mov	r0, r4
 8011196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801119a <__hi0bits>:
 801119a:	0c02      	lsrs	r2, r0, #16
 801119c:	0412      	lsls	r2, r2, #16
 801119e:	4603      	mov	r3, r0
 80111a0:	b9b2      	cbnz	r2, 80111d0 <__hi0bits+0x36>
 80111a2:	0403      	lsls	r3, r0, #16
 80111a4:	2010      	movs	r0, #16
 80111a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80111aa:	bf04      	itt	eq
 80111ac:	021b      	lsleq	r3, r3, #8
 80111ae:	3008      	addeq	r0, #8
 80111b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80111b4:	bf04      	itt	eq
 80111b6:	011b      	lsleq	r3, r3, #4
 80111b8:	3004      	addeq	r0, #4
 80111ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80111be:	bf04      	itt	eq
 80111c0:	009b      	lsleq	r3, r3, #2
 80111c2:	3002      	addeq	r0, #2
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	db06      	blt.n	80111d6 <__hi0bits+0x3c>
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	d503      	bpl.n	80111d4 <__hi0bits+0x3a>
 80111cc:	3001      	adds	r0, #1
 80111ce:	4770      	bx	lr
 80111d0:	2000      	movs	r0, #0
 80111d2:	e7e8      	b.n	80111a6 <__hi0bits+0xc>
 80111d4:	2020      	movs	r0, #32
 80111d6:	4770      	bx	lr

080111d8 <__lo0bits>:
 80111d8:	6803      	ldr	r3, [r0, #0]
 80111da:	f013 0207 	ands.w	r2, r3, #7
 80111de:	4601      	mov	r1, r0
 80111e0:	d00b      	beq.n	80111fa <__lo0bits+0x22>
 80111e2:	07da      	lsls	r2, r3, #31
 80111e4:	d423      	bmi.n	801122e <__lo0bits+0x56>
 80111e6:	0798      	lsls	r0, r3, #30
 80111e8:	bf49      	itett	mi
 80111ea:	085b      	lsrmi	r3, r3, #1
 80111ec:	089b      	lsrpl	r3, r3, #2
 80111ee:	2001      	movmi	r0, #1
 80111f0:	600b      	strmi	r3, [r1, #0]
 80111f2:	bf5c      	itt	pl
 80111f4:	600b      	strpl	r3, [r1, #0]
 80111f6:	2002      	movpl	r0, #2
 80111f8:	4770      	bx	lr
 80111fa:	b298      	uxth	r0, r3
 80111fc:	b9a8      	cbnz	r0, 801122a <__lo0bits+0x52>
 80111fe:	0c1b      	lsrs	r3, r3, #16
 8011200:	2010      	movs	r0, #16
 8011202:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011206:	bf04      	itt	eq
 8011208:	0a1b      	lsreq	r3, r3, #8
 801120a:	3008      	addeq	r0, #8
 801120c:	071a      	lsls	r2, r3, #28
 801120e:	bf04      	itt	eq
 8011210:	091b      	lsreq	r3, r3, #4
 8011212:	3004      	addeq	r0, #4
 8011214:	079a      	lsls	r2, r3, #30
 8011216:	bf04      	itt	eq
 8011218:	089b      	lsreq	r3, r3, #2
 801121a:	3002      	addeq	r0, #2
 801121c:	07da      	lsls	r2, r3, #31
 801121e:	d402      	bmi.n	8011226 <__lo0bits+0x4e>
 8011220:	085b      	lsrs	r3, r3, #1
 8011222:	d006      	beq.n	8011232 <__lo0bits+0x5a>
 8011224:	3001      	adds	r0, #1
 8011226:	600b      	str	r3, [r1, #0]
 8011228:	4770      	bx	lr
 801122a:	4610      	mov	r0, r2
 801122c:	e7e9      	b.n	8011202 <__lo0bits+0x2a>
 801122e:	2000      	movs	r0, #0
 8011230:	4770      	bx	lr
 8011232:	2020      	movs	r0, #32
 8011234:	4770      	bx	lr

08011236 <__i2b>:
 8011236:	b510      	push	{r4, lr}
 8011238:	460c      	mov	r4, r1
 801123a:	2101      	movs	r1, #1
 801123c:	f7ff ff27 	bl	801108e <_Balloc>
 8011240:	2201      	movs	r2, #1
 8011242:	6144      	str	r4, [r0, #20]
 8011244:	6102      	str	r2, [r0, #16]
 8011246:	bd10      	pop	{r4, pc}

08011248 <__multiply>:
 8011248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	4614      	mov	r4, r2
 801124e:	690a      	ldr	r2, [r1, #16]
 8011250:	6923      	ldr	r3, [r4, #16]
 8011252:	429a      	cmp	r2, r3
 8011254:	bfb8      	it	lt
 8011256:	460b      	movlt	r3, r1
 8011258:	4688      	mov	r8, r1
 801125a:	bfbc      	itt	lt
 801125c:	46a0      	movlt	r8, r4
 801125e:	461c      	movlt	r4, r3
 8011260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011264:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011268:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801126c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011270:	eb07 0609 	add.w	r6, r7, r9
 8011274:	42b3      	cmp	r3, r6
 8011276:	bfb8      	it	lt
 8011278:	3101      	addlt	r1, #1
 801127a:	f7ff ff08 	bl	801108e <_Balloc>
 801127e:	f100 0514 	add.w	r5, r0, #20
 8011282:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011286:	462b      	mov	r3, r5
 8011288:	2200      	movs	r2, #0
 801128a:	4573      	cmp	r3, lr
 801128c:	d316      	bcc.n	80112bc <__multiply+0x74>
 801128e:	f104 0214 	add.w	r2, r4, #20
 8011292:	f108 0114 	add.w	r1, r8, #20
 8011296:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801129a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	9b00      	ldr	r3, [sp, #0]
 80112a2:	9201      	str	r2, [sp, #4]
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d80c      	bhi.n	80112c2 <__multiply+0x7a>
 80112a8:	2e00      	cmp	r6, #0
 80112aa:	dd03      	ble.n	80112b4 <__multiply+0x6c>
 80112ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d05d      	beq.n	8011370 <__multiply+0x128>
 80112b4:	6106      	str	r6, [r0, #16]
 80112b6:	b003      	add	sp, #12
 80112b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112bc:	f843 2b04 	str.w	r2, [r3], #4
 80112c0:	e7e3      	b.n	801128a <__multiply+0x42>
 80112c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80112c6:	f1bb 0f00 	cmp.w	fp, #0
 80112ca:	d023      	beq.n	8011314 <__multiply+0xcc>
 80112cc:	4689      	mov	r9, r1
 80112ce:	46ac      	mov	ip, r5
 80112d0:	f04f 0800 	mov.w	r8, #0
 80112d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80112d8:	f8dc a000 	ldr.w	sl, [ip]
 80112dc:	b2a3      	uxth	r3, r4
 80112de:	fa1f fa8a 	uxth.w	sl, sl
 80112e2:	fb0b a303 	mla	r3, fp, r3, sl
 80112e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80112ea:	f8dc 4000 	ldr.w	r4, [ip]
 80112ee:	4443      	add	r3, r8
 80112f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80112f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80112f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80112fc:	46e2      	mov	sl, ip
 80112fe:	b29b      	uxth	r3, r3
 8011300:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011304:	454f      	cmp	r7, r9
 8011306:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801130a:	f84a 3b04 	str.w	r3, [sl], #4
 801130e:	d82b      	bhi.n	8011368 <__multiply+0x120>
 8011310:	f8cc 8004 	str.w	r8, [ip, #4]
 8011314:	9b01      	ldr	r3, [sp, #4]
 8011316:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801131a:	3204      	adds	r2, #4
 801131c:	f1ba 0f00 	cmp.w	sl, #0
 8011320:	d020      	beq.n	8011364 <__multiply+0x11c>
 8011322:	682b      	ldr	r3, [r5, #0]
 8011324:	4689      	mov	r9, r1
 8011326:	46a8      	mov	r8, r5
 8011328:	f04f 0b00 	mov.w	fp, #0
 801132c:	f8b9 c000 	ldrh.w	ip, [r9]
 8011330:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011334:	fb0a 440c 	mla	r4, sl, ip, r4
 8011338:	445c      	add	r4, fp
 801133a:	46c4      	mov	ip, r8
 801133c:	b29b      	uxth	r3, r3
 801133e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011342:	f84c 3b04 	str.w	r3, [ip], #4
 8011346:	f859 3b04 	ldr.w	r3, [r9], #4
 801134a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801134e:	0c1b      	lsrs	r3, r3, #16
 8011350:	fb0a b303 	mla	r3, sl, r3, fp
 8011354:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011358:	454f      	cmp	r7, r9
 801135a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801135e:	d805      	bhi.n	801136c <__multiply+0x124>
 8011360:	f8c8 3004 	str.w	r3, [r8, #4]
 8011364:	3504      	adds	r5, #4
 8011366:	e79b      	b.n	80112a0 <__multiply+0x58>
 8011368:	46d4      	mov	ip, sl
 801136a:	e7b3      	b.n	80112d4 <__multiply+0x8c>
 801136c:	46e0      	mov	r8, ip
 801136e:	e7dd      	b.n	801132c <__multiply+0xe4>
 8011370:	3e01      	subs	r6, #1
 8011372:	e799      	b.n	80112a8 <__multiply+0x60>

08011374 <__pow5mult>:
 8011374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011378:	4615      	mov	r5, r2
 801137a:	f012 0203 	ands.w	r2, r2, #3
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	d007      	beq.n	8011394 <__pow5mult+0x20>
 8011384:	3a01      	subs	r2, #1
 8011386:	4c21      	ldr	r4, [pc, #132]	; (801140c <__pow5mult+0x98>)
 8011388:	2300      	movs	r3, #0
 801138a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801138e:	f7ff fec9 	bl	8011124 <__multadd>
 8011392:	4607      	mov	r7, r0
 8011394:	10ad      	asrs	r5, r5, #2
 8011396:	d035      	beq.n	8011404 <__pow5mult+0x90>
 8011398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801139a:	b93c      	cbnz	r4, 80113ac <__pow5mult+0x38>
 801139c:	2010      	movs	r0, #16
 801139e:	f7ff fe63 	bl	8011068 <malloc>
 80113a2:	6270      	str	r0, [r6, #36]	; 0x24
 80113a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113a8:	6004      	str	r4, [r0, #0]
 80113aa:	60c4      	str	r4, [r0, #12]
 80113ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113b4:	b94c      	cbnz	r4, 80113ca <__pow5mult+0x56>
 80113b6:	f240 2171 	movw	r1, #625	; 0x271
 80113ba:	4630      	mov	r0, r6
 80113bc:	f7ff ff3b 	bl	8011236 <__i2b>
 80113c0:	2300      	movs	r3, #0
 80113c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80113c6:	4604      	mov	r4, r0
 80113c8:	6003      	str	r3, [r0, #0]
 80113ca:	f04f 0800 	mov.w	r8, #0
 80113ce:	07eb      	lsls	r3, r5, #31
 80113d0:	d50a      	bpl.n	80113e8 <__pow5mult+0x74>
 80113d2:	4639      	mov	r1, r7
 80113d4:	4622      	mov	r2, r4
 80113d6:	4630      	mov	r0, r6
 80113d8:	f7ff ff36 	bl	8011248 <__multiply>
 80113dc:	4639      	mov	r1, r7
 80113de:	4681      	mov	r9, r0
 80113e0:	4630      	mov	r0, r6
 80113e2:	f7ff fe88 	bl	80110f6 <_Bfree>
 80113e6:	464f      	mov	r7, r9
 80113e8:	106d      	asrs	r5, r5, #1
 80113ea:	d00b      	beq.n	8011404 <__pow5mult+0x90>
 80113ec:	6820      	ldr	r0, [r4, #0]
 80113ee:	b938      	cbnz	r0, 8011400 <__pow5mult+0x8c>
 80113f0:	4622      	mov	r2, r4
 80113f2:	4621      	mov	r1, r4
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7ff ff27 	bl	8011248 <__multiply>
 80113fa:	6020      	str	r0, [r4, #0]
 80113fc:	f8c0 8000 	str.w	r8, [r0]
 8011400:	4604      	mov	r4, r0
 8011402:	e7e4      	b.n	80113ce <__pow5mult+0x5a>
 8011404:	4638      	mov	r0, r7
 8011406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801140a:	bf00      	nop
 801140c:	080147b0 	.word	0x080147b0

08011410 <__lshift>:
 8011410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011414:	460c      	mov	r4, r1
 8011416:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801141a:	6923      	ldr	r3, [r4, #16]
 801141c:	6849      	ldr	r1, [r1, #4]
 801141e:	eb0a 0903 	add.w	r9, sl, r3
 8011422:	68a3      	ldr	r3, [r4, #8]
 8011424:	4607      	mov	r7, r0
 8011426:	4616      	mov	r6, r2
 8011428:	f109 0501 	add.w	r5, r9, #1
 801142c:	42ab      	cmp	r3, r5
 801142e:	db32      	blt.n	8011496 <__lshift+0x86>
 8011430:	4638      	mov	r0, r7
 8011432:	f7ff fe2c 	bl	801108e <_Balloc>
 8011436:	2300      	movs	r3, #0
 8011438:	4680      	mov	r8, r0
 801143a:	f100 0114 	add.w	r1, r0, #20
 801143e:	461a      	mov	r2, r3
 8011440:	4553      	cmp	r3, sl
 8011442:	db2b      	blt.n	801149c <__lshift+0x8c>
 8011444:	6920      	ldr	r0, [r4, #16]
 8011446:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801144a:	f104 0314 	add.w	r3, r4, #20
 801144e:	f016 021f 	ands.w	r2, r6, #31
 8011452:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011456:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801145a:	d025      	beq.n	80114a8 <__lshift+0x98>
 801145c:	f1c2 0e20 	rsb	lr, r2, #32
 8011460:	2000      	movs	r0, #0
 8011462:	681e      	ldr	r6, [r3, #0]
 8011464:	468a      	mov	sl, r1
 8011466:	4096      	lsls	r6, r2
 8011468:	4330      	orrs	r0, r6
 801146a:	f84a 0b04 	str.w	r0, [sl], #4
 801146e:	f853 0b04 	ldr.w	r0, [r3], #4
 8011472:	459c      	cmp	ip, r3
 8011474:	fa20 f00e 	lsr.w	r0, r0, lr
 8011478:	d814      	bhi.n	80114a4 <__lshift+0x94>
 801147a:	6048      	str	r0, [r1, #4]
 801147c:	b108      	cbz	r0, 8011482 <__lshift+0x72>
 801147e:	f109 0502 	add.w	r5, r9, #2
 8011482:	3d01      	subs	r5, #1
 8011484:	4638      	mov	r0, r7
 8011486:	f8c8 5010 	str.w	r5, [r8, #16]
 801148a:	4621      	mov	r1, r4
 801148c:	f7ff fe33 	bl	80110f6 <_Bfree>
 8011490:	4640      	mov	r0, r8
 8011492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011496:	3101      	adds	r1, #1
 8011498:	005b      	lsls	r3, r3, #1
 801149a:	e7c7      	b.n	801142c <__lshift+0x1c>
 801149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80114a0:	3301      	adds	r3, #1
 80114a2:	e7cd      	b.n	8011440 <__lshift+0x30>
 80114a4:	4651      	mov	r1, sl
 80114a6:	e7dc      	b.n	8011462 <__lshift+0x52>
 80114a8:	3904      	subs	r1, #4
 80114aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80114b2:	459c      	cmp	ip, r3
 80114b4:	d8f9      	bhi.n	80114aa <__lshift+0x9a>
 80114b6:	e7e4      	b.n	8011482 <__lshift+0x72>

080114b8 <__mcmp>:
 80114b8:	6903      	ldr	r3, [r0, #16]
 80114ba:	690a      	ldr	r2, [r1, #16]
 80114bc:	1a9b      	subs	r3, r3, r2
 80114be:	b530      	push	{r4, r5, lr}
 80114c0:	d10c      	bne.n	80114dc <__mcmp+0x24>
 80114c2:	0092      	lsls	r2, r2, #2
 80114c4:	3014      	adds	r0, #20
 80114c6:	3114      	adds	r1, #20
 80114c8:	1884      	adds	r4, r0, r2
 80114ca:	4411      	add	r1, r2
 80114cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114d4:	4295      	cmp	r5, r2
 80114d6:	d003      	beq.n	80114e0 <__mcmp+0x28>
 80114d8:	d305      	bcc.n	80114e6 <__mcmp+0x2e>
 80114da:	2301      	movs	r3, #1
 80114dc:	4618      	mov	r0, r3
 80114de:	bd30      	pop	{r4, r5, pc}
 80114e0:	42a0      	cmp	r0, r4
 80114e2:	d3f3      	bcc.n	80114cc <__mcmp+0x14>
 80114e4:	e7fa      	b.n	80114dc <__mcmp+0x24>
 80114e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ea:	e7f7      	b.n	80114dc <__mcmp+0x24>

080114ec <__mdiff>:
 80114ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114f0:	460d      	mov	r5, r1
 80114f2:	4607      	mov	r7, r0
 80114f4:	4611      	mov	r1, r2
 80114f6:	4628      	mov	r0, r5
 80114f8:	4614      	mov	r4, r2
 80114fa:	f7ff ffdd 	bl	80114b8 <__mcmp>
 80114fe:	1e06      	subs	r6, r0, #0
 8011500:	d108      	bne.n	8011514 <__mdiff+0x28>
 8011502:	4631      	mov	r1, r6
 8011504:	4638      	mov	r0, r7
 8011506:	f7ff fdc2 	bl	801108e <_Balloc>
 801150a:	2301      	movs	r3, #1
 801150c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011514:	bfa4      	itt	ge
 8011516:	4623      	movge	r3, r4
 8011518:	462c      	movge	r4, r5
 801151a:	4638      	mov	r0, r7
 801151c:	6861      	ldr	r1, [r4, #4]
 801151e:	bfa6      	itte	ge
 8011520:	461d      	movge	r5, r3
 8011522:	2600      	movge	r6, #0
 8011524:	2601      	movlt	r6, #1
 8011526:	f7ff fdb2 	bl	801108e <_Balloc>
 801152a:	692b      	ldr	r3, [r5, #16]
 801152c:	60c6      	str	r6, [r0, #12]
 801152e:	6926      	ldr	r6, [r4, #16]
 8011530:	f105 0914 	add.w	r9, r5, #20
 8011534:	f104 0214 	add.w	r2, r4, #20
 8011538:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801153c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011540:	f100 0514 	add.w	r5, r0, #20
 8011544:	f04f 0e00 	mov.w	lr, #0
 8011548:	f852 ab04 	ldr.w	sl, [r2], #4
 801154c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011550:	fa1e f18a 	uxtah	r1, lr, sl
 8011554:	b2a3      	uxth	r3, r4
 8011556:	1ac9      	subs	r1, r1, r3
 8011558:	0c23      	lsrs	r3, r4, #16
 801155a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801155e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011562:	b289      	uxth	r1, r1
 8011564:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011568:	45c8      	cmp	r8, r9
 801156a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801156e:	4694      	mov	ip, r2
 8011570:	f845 3b04 	str.w	r3, [r5], #4
 8011574:	d8e8      	bhi.n	8011548 <__mdiff+0x5c>
 8011576:	45bc      	cmp	ip, r7
 8011578:	d304      	bcc.n	8011584 <__mdiff+0x98>
 801157a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801157e:	b183      	cbz	r3, 80115a2 <__mdiff+0xb6>
 8011580:	6106      	str	r6, [r0, #16]
 8011582:	e7c5      	b.n	8011510 <__mdiff+0x24>
 8011584:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011588:	fa1e f381 	uxtah	r3, lr, r1
 801158c:	141a      	asrs	r2, r3, #16
 801158e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011592:	b29b      	uxth	r3, r3
 8011594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011598:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801159c:	f845 3b04 	str.w	r3, [r5], #4
 80115a0:	e7e9      	b.n	8011576 <__mdiff+0x8a>
 80115a2:	3e01      	subs	r6, #1
 80115a4:	e7e9      	b.n	801157a <__mdiff+0x8e>

080115a6 <__d2b>:
 80115a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115aa:	460e      	mov	r6, r1
 80115ac:	2101      	movs	r1, #1
 80115ae:	ec59 8b10 	vmov	r8, r9, d0
 80115b2:	4615      	mov	r5, r2
 80115b4:	f7ff fd6b 	bl	801108e <_Balloc>
 80115b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80115bc:	4607      	mov	r7, r0
 80115be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115c2:	bb34      	cbnz	r4, 8011612 <__d2b+0x6c>
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	f1b8 0300 	subs.w	r3, r8, #0
 80115ca:	d027      	beq.n	801161c <__d2b+0x76>
 80115cc:	a802      	add	r0, sp, #8
 80115ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80115d2:	f7ff fe01 	bl	80111d8 <__lo0bits>
 80115d6:	9900      	ldr	r1, [sp, #0]
 80115d8:	b1f0      	cbz	r0, 8011618 <__d2b+0x72>
 80115da:	9a01      	ldr	r2, [sp, #4]
 80115dc:	f1c0 0320 	rsb	r3, r0, #32
 80115e0:	fa02 f303 	lsl.w	r3, r2, r3
 80115e4:	430b      	orrs	r3, r1
 80115e6:	40c2      	lsrs	r2, r0
 80115e8:	617b      	str	r3, [r7, #20]
 80115ea:	9201      	str	r2, [sp, #4]
 80115ec:	9b01      	ldr	r3, [sp, #4]
 80115ee:	61bb      	str	r3, [r7, #24]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	bf14      	ite	ne
 80115f4:	2102      	movne	r1, #2
 80115f6:	2101      	moveq	r1, #1
 80115f8:	6139      	str	r1, [r7, #16]
 80115fa:	b1c4      	cbz	r4, 801162e <__d2b+0x88>
 80115fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011600:	4404      	add	r4, r0
 8011602:	6034      	str	r4, [r6, #0]
 8011604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011608:	6028      	str	r0, [r5, #0]
 801160a:	4638      	mov	r0, r7
 801160c:	b003      	add	sp, #12
 801160e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011616:	e7d5      	b.n	80115c4 <__d2b+0x1e>
 8011618:	6179      	str	r1, [r7, #20]
 801161a:	e7e7      	b.n	80115ec <__d2b+0x46>
 801161c:	a801      	add	r0, sp, #4
 801161e:	f7ff fddb 	bl	80111d8 <__lo0bits>
 8011622:	9b01      	ldr	r3, [sp, #4]
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	2101      	movs	r1, #1
 8011628:	6139      	str	r1, [r7, #16]
 801162a:	3020      	adds	r0, #32
 801162c:	e7e5      	b.n	80115fa <__d2b+0x54>
 801162e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011632:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011636:	6030      	str	r0, [r6, #0]
 8011638:	6918      	ldr	r0, [r3, #16]
 801163a:	f7ff fdae 	bl	801119a <__hi0bits>
 801163e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011642:	e7e1      	b.n	8011608 <__d2b+0x62>

08011644 <_calloc_r>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	fb02 f401 	mul.w	r4, r2, r1
 801164a:	4621      	mov	r1, r4
 801164c:	f000 f856 	bl	80116fc <_malloc_r>
 8011650:	4605      	mov	r5, r0
 8011652:	b118      	cbz	r0, 801165c <_calloc_r+0x18>
 8011654:	4622      	mov	r2, r4
 8011656:	2100      	movs	r1, #0
 8011658:	f7fd fef2 	bl	800f440 <memset>
 801165c:	4628      	mov	r0, r5
 801165e:	bd38      	pop	{r3, r4, r5, pc}

08011660 <_free_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	4605      	mov	r5, r0
 8011664:	2900      	cmp	r1, #0
 8011666:	d045      	beq.n	80116f4 <_free_r+0x94>
 8011668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801166c:	1f0c      	subs	r4, r1, #4
 801166e:	2b00      	cmp	r3, #0
 8011670:	bfb8      	it	lt
 8011672:	18e4      	addlt	r4, r4, r3
 8011674:	f000 fc03 	bl	8011e7e <__malloc_lock>
 8011678:	4a1f      	ldr	r2, [pc, #124]	; (80116f8 <_free_r+0x98>)
 801167a:	6813      	ldr	r3, [r2, #0]
 801167c:	4610      	mov	r0, r2
 801167e:	b933      	cbnz	r3, 801168e <_free_r+0x2e>
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	6014      	str	r4, [r2, #0]
 8011684:	4628      	mov	r0, r5
 8011686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801168a:	f000 bbf9 	b.w	8011e80 <__malloc_unlock>
 801168e:	42a3      	cmp	r3, r4
 8011690:	d90c      	bls.n	80116ac <_free_r+0x4c>
 8011692:	6821      	ldr	r1, [r4, #0]
 8011694:	1862      	adds	r2, r4, r1
 8011696:	4293      	cmp	r3, r2
 8011698:	bf04      	itt	eq
 801169a:	681a      	ldreq	r2, [r3, #0]
 801169c:	685b      	ldreq	r3, [r3, #4]
 801169e:	6063      	str	r3, [r4, #4]
 80116a0:	bf04      	itt	eq
 80116a2:	1852      	addeq	r2, r2, r1
 80116a4:	6022      	streq	r2, [r4, #0]
 80116a6:	6004      	str	r4, [r0, #0]
 80116a8:	e7ec      	b.n	8011684 <_free_r+0x24>
 80116aa:	4613      	mov	r3, r2
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	b10a      	cbz	r2, 80116b4 <_free_r+0x54>
 80116b0:	42a2      	cmp	r2, r4
 80116b2:	d9fa      	bls.n	80116aa <_free_r+0x4a>
 80116b4:	6819      	ldr	r1, [r3, #0]
 80116b6:	1858      	adds	r0, r3, r1
 80116b8:	42a0      	cmp	r0, r4
 80116ba:	d10b      	bne.n	80116d4 <_free_r+0x74>
 80116bc:	6820      	ldr	r0, [r4, #0]
 80116be:	4401      	add	r1, r0
 80116c0:	1858      	adds	r0, r3, r1
 80116c2:	4282      	cmp	r2, r0
 80116c4:	6019      	str	r1, [r3, #0]
 80116c6:	d1dd      	bne.n	8011684 <_free_r+0x24>
 80116c8:	6810      	ldr	r0, [r2, #0]
 80116ca:	6852      	ldr	r2, [r2, #4]
 80116cc:	605a      	str	r2, [r3, #4]
 80116ce:	4401      	add	r1, r0
 80116d0:	6019      	str	r1, [r3, #0]
 80116d2:	e7d7      	b.n	8011684 <_free_r+0x24>
 80116d4:	d902      	bls.n	80116dc <_free_r+0x7c>
 80116d6:	230c      	movs	r3, #12
 80116d8:	602b      	str	r3, [r5, #0]
 80116da:	e7d3      	b.n	8011684 <_free_r+0x24>
 80116dc:	6820      	ldr	r0, [r4, #0]
 80116de:	1821      	adds	r1, r4, r0
 80116e0:	428a      	cmp	r2, r1
 80116e2:	bf04      	itt	eq
 80116e4:	6811      	ldreq	r1, [r2, #0]
 80116e6:	6852      	ldreq	r2, [r2, #4]
 80116e8:	6062      	str	r2, [r4, #4]
 80116ea:	bf04      	itt	eq
 80116ec:	1809      	addeq	r1, r1, r0
 80116ee:	6021      	streq	r1, [r4, #0]
 80116f0:	605c      	str	r4, [r3, #4]
 80116f2:	e7c7      	b.n	8011684 <_free_r+0x24>
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	bf00      	nop
 80116f8:	20001ea4 	.word	0x20001ea4

080116fc <_malloc_r>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	1ccd      	adds	r5, r1, #3
 8011700:	f025 0503 	bic.w	r5, r5, #3
 8011704:	3508      	adds	r5, #8
 8011706:	2d0c      	cmp	r5, #12
 8011708:	bf38      	it	cc
 801170a:	250c      	movcc	r5, #12
 801170c:	2d00      	cmp	r5, #0
 801170e:	4606      	mov	r6, r0
 8011710:	db01      	blt.n	8011716 <_malloc_r+0x1a>
 8011712:	42a9      	cmp	r1, r5
 8011714:	d903      	bls.n	801171e <_malloc_r+0x22>
 8011716:	230c      	movs	r3, #12
 8011718:	6033      	str	r3, [r6, #0]
 801171a:	2000      	movs	r0, #0
 801171c:	bd70      	pop	{r4, r5, r6, pc}
 801171e:	f000 fbae 	bl	8011e7e <__malloc_lock>
 8011722:	4a21      	ldr	r2, [pc, #132]	; (80117a8 <_malloc_r+0xac>)
 8011724:	6814      	ldr	r4, [r2, #0]
 8011726:	4621      	mov	r1, r4
 8011728:	b991      	cbnz	r1, 8011750 <_malloc_r+0x54>
 801172a:	4c20      	ldr	r4, [pc, #128]	; (80117ac <_malloc_r+0xb0>)
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	b91b      	cbnz	r3, 8011738 <_malloc_r+0x3c>
 8011730:	4630      	mov	r0, r6
 8011732:	f000 facf 	bl	8011cd4 <_sbrk_r>
 8011736:	6020      	str	r0, [r4, #0]
 8011738:	4629      	mov	r1, r5
 801173a:	4630      	mov	r0, r6
 801173c:	f000 faca 	bl	8011cd4 <_sbrk_r>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	d124      	bne.n	801178e <_malloc_r+0x92>
 8011744:	230c      	movs	r3, #12
 8011746:	6033      	str	r3, [r6, #0]
 8011748:	4630      	mov	r0, r6
 801174a:	f000 fb99 	bl	8011e80 <__malloc_unlock>
 801174e:	e7e4      	b.n	801171a <_malloc_r+0x1e>
 8011750:	680b      	ldr	r3, [r1, #0]
 8011752:	1b5b      	subs	r3, r3, r5
 8011754:	d418      	bmi.n	8011788 <_malloc_r+0x8c>
 8011756:	2b0b      	cmp	r3, #11
 8011758:	d90f      	bls.n	801177a <_malloc_r+0x7e>
 801175a:	600b      	str	r3, [r1, #0]
 801175c:	50cd      	str	r5, [r1, r3]
 801175e:	18cc      	adds	r4, r1, r3
 8011760:	4630      	mov	r0, r6
 8011762:	f000 fb8d 	bl	8011e80 <__malloc_unlock>
 8011766:	f104 000b 	add.w	r0, r4, #11
 801176a:	1d23      	adds	r3, r4, #4
 801176c:	f020 0007 	bic.w	r0, r0, #7
 8011770:	1ac3      	subs	r3, r0, r3
 8011772:	d0d3      	beq.n	801171c <_malloc_r+0x20>
 8011774:	425a      	negs	r2, r3
 8011776:	50e2      	str	r2, [r4, r3]
 8011778:	e7d0      	b.n	801171c <_malloc_r+0x20>
 801177a:	428c      	cmp	r4, r1
 801177c:	684b      	ldr	r3, [r1, #4]
 801177e:	bf16      	itet	ne
 8011780:	6063      	strne	r3, [r4, #4]
 8011782:	6013      	streq	r3, [r2, #0]
 8011784:	460c      	movne	r4, r1
 8011786:	e7eb      	b.n	8011760 <_malloc_r+0x64>
 8011788:	460c      	mov	r4, r1
 801178a:	6849      	ldr	r1, [r1, #4]
 801178c:	e7cc      	b.n	8011728 <_malloc_r+0x2c>
 801178e:	1cc4      	adds	r4, r0, #3
 8011790:	f024 0403 	bic.w	r4, r4, #3
 8011794:	42a0      	cmp	r0, r4
 8011796:	d005      	beq.n	80117a4 <_malloc_r+0xa8>
 8011798:	1a21      	subs	r1, r4, r0
 801179a:	4630      	mov	r0, r6
 801179c:	f000 fa9a 	bl	8011cd4 <_sbrk_r>
 80117a0:	3001      	adds	r0, #1
 80117a2:	d0cf      	beq.n	8011744 <_malloc_r+0x48>
 80117a4:	6025      	str	r5, [r4, #0]
 80117a6:	e7db      	b.n	8011760 <_malloc_r+0x64>
 80117a8:	20001ea4 	.word	0x20001ea4
 80117ac:	20001ea8 	.word	0x20001ea8

080117b0 <__ssputs_r>:
 80117b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b4:	688e      	ldr	r6, [r1, #8]
 80117b6:	429e      	cmp	r6, r3
 80117b8:	4682      	mov	sl, r0
 80117ba:	460c      	mov	r4, r1
 80117bc:	4690      	mov	r8, r2
 80117be:	4699      	mov	r9, r3
 80117c0:	d837      	bhi.n	8011832 <__ssputs_r+0x82>
 80117c2:	898a      	ldrh	r2, [r1, #12]
 80117c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80117c8:	d031      	beq.n	801182e <__ssputs_r+0x7e>
 80117ca:	6825      	ldr	r5, [r4, #0]
 80117cc:	6909      	ldr	r1, [r1, #16]
 80117ce:	1a6f      	subs	r7, r5, r1
 80117d0:	6965      	ldr	r5, [r4, #20]
 80117d2:	2302      	movs	r3, #2
 80117d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80117dc:	f109 0301 	add.w	r3, r9, #1
 80117e0:	443b      	add	r3, r7
 80117e2:	429d      	cmp	r5, r3
 80117e4:	bf38      	it	cc
 80117e6:	461d      	movcc	r5, r3
 80117e8:	0553      	lsls	r3, r2, #21
 80117ea:	d530      	bpl.n	801184e <__ssputs_r+0x9e>
 80117ec:	4629      	mov	r1, r5
 80117ee:	f7ff ff85 	bl	80116fc <_malloc_r>
 80117f2:	4606      	mov	r6, r0
 80117f4:	b950      	cbnz	r0, 801180c <__ssputs_r+0x5c>
 80117f6:	230c      	movs	r3, #12
 80117f8:	f8ca 3000 	str.w	r3, [sl]
 80117fc:	89a3      	ldrh	r3, [r4, #12]
 80117fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011802:	81a3      	strh	r3, [r4, #12]
 8011804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801180c:	463a      	mov	r2, r7
 801180e:	6921      	ldr	r1, [r4, #16]
 8011810:	f7ff fc32 	bl	8011078 <memcpy>
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801181a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801181e:	81a3      	strh	r3, [r4, #12]
 8011820:	6126      	str	r6, [r4, #16]
 8011822:	6165      	str	r5, [r4, #20]
 8011824:	443e      	add	r6, r7
 8011826:	1bed      	subs	r5, r5, r7
 8011828:	6026      	str	r6, [r4, #0]
 801182a:	60a5      	str	r5, [r4, #8]
 801182c:	464e      	mov	r6, r9
 801182e:	454e      	cmp	r6, r9
 8011830:	d900      	bls.n	8011834 <__ssputs_r+0x84>
 8011832:	464e      	mov	r6, r9
 8011834:	4632      	mov	r2, r6
 8011836:	4641      	mov	r1, r8
 8011838:	6820      	ldr	r0, [r4, #0]
 801183a:	f000 fb07 	bl	8011e4c <memmove>
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	1b9b      	subs	r3, r3, r6
 8011842:	60a3      	str	r3, [r4, #8]
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	441e      	add	r6, r3
 8011848:	6026      	str	r6, [r4, #0]
 801184a:	2000      	movs	r0, #0
 801184c:	e7dc      	b.n	8011808 <__ssputs_r+0x58>
 801184e:	462a      	mov	r2, r5
 8011850:	f000 fb17 	bl	8011e82 <_realloc_r>
 8011854:	4606      	mov	r6, r0
 8011856:	2800      	cmp	r0, #0
 8011858:	d1e2      	bne.n	8011820 <__ssputs_r+0x70>
 801185a:	6921      	ldr	r1, [r4, #16]
 801185c:	4650      	mov	r0, sl
 801185e:	f7ff feff 	bl	8011660 <_free_r>
 8011862:	e7c8      	b.n	80117f6 <__ssputs_r+0x46>

08011864 <_svfiprintf_r>:
 8011864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011868:	461d      	mov	r5, r3
 801186a:	898b      	ldrh	r3, [r1, #12]
 801186c:	061f      	lsls	r7, r3, #24
 801186e:	b09d      	sub	sp, #116	; 0x74
 8011870:	4680      	mov	r8, r0
 8011872:	460c      	mov	r4, r1
 8011874:	4616      	mov	r6, r2
 8011876:	d50f      	bpl.n	8011898 <_svfiprintf_r+0x34>
 8011878:	690b      	ldr	r3, [r1, #16]
 801187a:	b96b      	cbnz	r3, 8011898 <_svfiprintf_r+0x34>
 801187c:	2140      	movs	r1, #64	; 0x40
 801187e:	f7ff ff3d 	bl	80116fc <_malloc_r>
 8011882:	6020      	str	r0, [r4, #0]
 8011884:	6120      	str	r0, [r4, #16]
 8011886:	b928      	cbnz	r0, 8011894 <_svfiprintf_r+0x30>
 8011888:	230c      	movs	r3, #12
 801188a:	f8c8 3000 	str.w	r3, [r8]
 801188e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011892:	e0c8      	b.n	8011a26 <_svfiprintf_r+0x1c2>
 8011894:	2340      	movs	r3, #64	; 0x40
 8011896:	6163      	str	r3, [r4, #20]
 8011898:	2300      	movs	r3, #0
 801189a:	9309      	str	r3, [sp, #36]	; 0x24
 801189c:	2320      	movs	r3, #32
 801189e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118a2:	2330      	movs	r3, #48	; 0x30
 80118a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118a8:	9503      	str	r5, [sp, #12]
 80118aa:	f04f 0b01 	mov.w	fp, #1
 80118ae:	4637      	mov	r7, r6
 80118b0:	463d      	mov	r5, r7
 80118b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118b6:	b10b      	cbz	r3, 80118bc <_svfiprintf_r+0x58>
 80118b8:	2b25      	cmp	r3, #37	; 0x25
 80118ba:	d13e      	bne.n	801193a <_svfiprintf_r+0xd6>
 80118bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80118c0:	d00b      	beq.n	80118da <_svfiprintf_r+0x76>
 80118c2:	4653      	mov	r3, sl
 80118c4:	4632      	mov	r2, r6
 80118c6:	4621      	mov	r1, r4
 80118c8:	4640      	mov	r0, r8
 80118ca:	f7ff ff71 	bl	80117b0 <__ssputs_r>
 80118ce:	3001      	adds	r0, #1
 80118d0:	f000 80a4 	beq.w	8011a1c <_svfiprintf_r+0x1b8>
 80118d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d6:	4453      	add	r3, sl
 80118d8:	9309      	str	r3, [sp, #36]	; 0x24
 80118da:	783b      	ldrb	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 809d 	beq.w	8011a1c <_svfiprintf_r+0x1b8>
 80118e2:	2300      	movs	r3, #0
 80118e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	9307      	str	r3, [sp, #28]
 80118f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118f4:	931a      	str	r3, [sp, #104]	; 0x68
 80118f6:	462f      	mov	r7, r5
 80118f8:	2205      	movs	r2, #5
 80118fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80118fe:	4850      	ldr	r0, [pc, #320]	; (8011a40 <_svfiprintf_r+0x1dc>)
 8011900:	f7ee fc96 	bl	8000230 <memchr>
 8011904:	9b04      	ldr	r3, [sp, #16]
 8011906:	b9d0      	cbnz	r0, 801193e <_svfiprintf_r+0xda>
 8011908:	06d9      	lsls	r1, r3, #27
 801190a:	bf44      	itt	mi
 801190c:	2220      	movmi	r2, #32
 801190e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011912:	071a      	lsls	r2, r3, #28
 8011914:	bf44      	itt	mi
 8011916:	222b      	movmi	r2, #43	; 0x2b
 8011918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801191c:	782a      	ldrb	r2, [r5, #0]
 801191e:	2a2a      	cmp	r2, #42	; 0x2a
 8011920:	d015      	beq.n	801194e <_svfiprintf_r+0xea>
 8011922:	9a07      	ldr	r2, [sp, #28]
 8011924:	462f      	mov	r7, r5
 8011926:	2000      	movs	r0, #0
 8011928:	250a      	movs	r5, #10
 801192a:	4639      	mov	r1, r7
 801192c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011930:	3b30      	subs	r3, #48	; 0x30
 8011932:	2b09      	cmp	r3, #9
 8011934:	d94d      	bls.n	80119d2 <_svfiprintf_r+0x16e>
 8011936:	b1b8      	cbz	r0, 8011968 <_svfiprintf_r+0x104>
 8011938:	e00f      	b.n	801195a <_svfiprintf_r+0xf6>
 801193a:	462f      	mov	r7, r5
 801193c:	e7b8      	b.n	80118b0 <_svfiprintf_r+0x4c>
 801193e:	4a40      	ldr	r2, [pc, #256]	; (8011a40 <_svfiprintf_r+0x1dc>)
 8011940:	1a80      	subs	r0, r0, r2
 8011942:	fa0b f000 	lsl.w	r0, fp, r0
 8011946:	4318      	orrs	r0, r3
 8011948:	9004      	str	r0, [sp, #16]
 801194a:	463d      	mov	r5, r7
 801194c:	e7d3      	b.n	80118f6 <_svfiprintf_r+0x92>
 801194e:	9a03      	ldr	r2, [sp, #12]
 8011950:	1d11      	adds	r1, r2, #4
 8011952:	6812      	ldr	r2, [r2, #0]
 8011954:	9103      	str	r1, [sp, #12]
 8011956:	2a00      	cmp	r2, #0
 8011958:	db01      	blt.n	801195e <_svfiprintf_r+0xfa>
 801195a:	9207      	str	r2, [sp, #28]
 801195c:	e004      	b.n	8011968 <_svfiprintf_r+0x104>
 801195e:	4252      	negs	r2, r2
 8011960:	f043 0302 	orr.w	r3, r3, #2
 8011964:	9207      	str	r2, [sp, #28]
 8011966:	9304      	str	r3, [sp, #16]
 8011968:	783b      	ldrb	r3, [r7, #0]
 801196a:	2b2e      	cmp	r3, #46	; 0x2e
 801196c:	d10c      	bne.n	8011988 <_svfiprintf_r+0x124>
 801196e:	787b      	ldrb	r3, [r7, #1]
 8011970:	2b2a      	cmp	r3, #42	; 0x2a
 8011972:	d133      	bne.n	80119dc <_svfiprintf_r+0x178>
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	1d1a      	adds	r2, r3, #4
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	9203      	str	r2, [sp, #12]
 801197c:	2b00      	cmp	r3, #0
 801197e:	bfb8      	it	lt
 8011980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011984:	3702      	adds	r7, #2
 8011986:	9305      	str	r3, [sp, #20]
 8011988:	4d2e      	ldr	r5, [pc, #184]	; (8011a44 <_svfiprintf_r+0x1e0>)
 801198a:	7839      	ldrb	r1, [r7, #0]
 801198c:	2203      	movs	r2, #3
 801198e:	4628      	mov	r0, r5
 8011990:	f7ee fc4e 	bl	8000230 <memchr>
 8011994:	b138      	cbz	r0, 80119a6 <_svfiprintf_r+0x142>
 8011996:	2340      	movs	r3, #64	; 0x40
 8011998:	1b40      	subs	r0, r0, r5
 801199a:	fa03 f000 	lsl.w	r0, r3, r0
 801199e:	9b04      	ldr	r3, [sp, #16]
 80119a0:	4303      	orrs	r3, r0
 80119a2:	3701      	adds	r7, #1
 80119a4:	9304      	str	r3, [sp, #16]
 80119a6:	7839      	ldrb	r1, [r7, #0]
 80119a8:	4827      	ldr	r0, [pc, #156]	; (8011a48 <_svfiprintf_r+0x1e4>)
 80119aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119ae:	2206      	movs	r2, #6
 80119b0:	1c7e      	adds	r6, r7, #1
 80119b2:	f7ee fc3d 	bl	8000230 <memchr>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d038      	beq.n	8011a2c <_svfiprintf_r+0x1c8>
 80119ba:	4b24      	ldr	r3, [pc, #144]	; (8011a4c <_svfiprintf_r+0x1e8>)
 80119bc:	bb13      	cbnz	r3, 8011a04 <_svfiprintf_r+0x1a0>
 80119be:	9b03      	ldr	r3, [sp, #12]
 80119c0:	3307      	adds	r3, #7
 80119c2:	f023 0307 	bic.w	r3, r3, #7
 80119c6:	3308      	adds	r3, #8
 80119c8:	9303      	str	r3, [sp, #12]
 80119ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119cc:	444b      	add	r3, r9
 80119ce:	9309      	str	r3, [sp, #36]	; 0x24
 80119d0:	e76d      	b.n	80118ae <_svfiprintf_r+0x4a>
 80119d2:	fb05 3202 	mla	r2, r5, r2, r3
 80119d6:	2001      	movs	r0, #1
 80119d8:	460f      	mov	r7, r1
 80119da:	e7a6      	b.n	801192a <_svfiprintf_r+0xc6>
 80119dc:	2300      	movs	r3, #0
 80119de:	3701      	adds	r7, #1
 80119e0:	9305      	str	r3, [sp, #20]
 80119e2:	4619      	mov	r1, r3
 80119e4:	250a      	movs	r5, #10
 80119e6:	4638      	mov	r0, r7
 80119e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119ec:	3a30      	subs	r2, #48	; 0x30
 80119ee:	2a09      	cmp	r2, #9
 80119f0:	d903      	bls.n	80119fa <_svfiprintf_r+0x196>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d0c8      	beq.n	8011988 <_svfiprintf_r+0x124>
 80119f6:	9105      	str	r1, [sp, #20]
 80119f8:	e7c6      	b.n	8011988 <_svfiprintf_r+0x124>
 80119fa:	fb05 2101 	mla	r1, r5, r1, r2
 80119fe:	2301      	movs	r3, #1
 8011a00:	4607      	mov	r7, r0
 8011a02:	e7f0      	b.n	80119e6 <_svfiprintf_r+0x182>
 8011a04:	ab03      	add	r3, sp, #12
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	4622      	mov	r2, r4
 8011a0a:	4b11      	ldr	r3, [pc, #68]	; (8011a50 <_svfiprintf_r+0x1ec>)
 8011a0c:	a904      	add	r1, sp, #16
 8011a0e:	4640      	mov	r0, r8
 8011a10:	f7fd fdb2 	bl	800f578 <_printf_float>
 8011a14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011a18:	4681      	mov	r9, r0
 8011a1a:	d1d6      	bne.n	80119ca <_svfiprintf_r+0x166>
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	065b      	lsls	r3, r3, #25
 8011a20:	f53f af35 	bmi.w	801188e <_svfiprintf_r+0x2a>
 8011a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a26:	b01d      	add	sp, #116	; 0x74
 8011a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2c:	ab03      	add	r3, sp, #12
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	4622      	mov	r2, r4
 8011a32:	4b07      	ldr	r3, [pc, #28]	; (8011a50 <_svfiprintf_r+0x1ec>)
 8011a34:	a904      	add	r1, sp, #16
 8011a36:	4640      	mov	r0, r8
 8011a38:	f7fe f854 	bl	800fae4 <_printf_i>
 8011a3c:	e7ea      	b.n	8011a14 <_svfiprintf_r+0x1b0>
 8011a3e:	bf00      	nop
 8011a40:	080147bc 	.word	0x080147bc
 8011a44:	080147c2 	.word	0x080147c2
 8011a48:	080147c6 	.word	0x080147c6
 8011a4c:	0800f579 	.word	0x0800f579
 8011a50:	080117b1 	.word	0x080117b1

08011a54 <__sfputc_r>:
 8011a54:	6893      	ldr	r3, [r2, #8]
 8011a56:	3b01      	subs	r3, #1
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	b410      	push	{r4}
 8011a5c:	6093      	str	r3, [r2, #8]
 8011a5e:	da08      	bge.n	8011a72 <__sfputc_r+0x1e>
 8011a60:	6994      	ldr	r4, [r2, #24]
 8011a62:	42a3      	cmp	r3, r4
 8011a64:	db01      	blt.n	8011a6a <__sfputc_r+0x16>
 8011a66:	290a      	cmp	r1, #10
 8011a68:	d103      	bne.n	8011a72 <__sfputc_r+0x1e>
 8011a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a6e:	f7fe ba0b 	b.w	800fe88 <__swbuf_r>
 8011a72:	6813      	ldr	r3, [r2, #0]
 8011a74:	1c58      	adds	r0, r3, #1
 8011a76:	6010      	str	r0, [r2, #0]
 8011a78:	7019      	strb	r1, [r3, #0]
 8011a7a:	4608      	mov	r0, r1
 8011a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <__sfputs_r>:
 8011a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a84:	4606      	mov	r6, r0
 8011a86:	460f      	mov	r7, r1
 8011a88:	4614      	mov	r4, r2
 8011a8a:	18d5      	adds	r5, r2, r3
 8011a8c:	42ac      	cmp	r4, r5
 8011a8e:	d101      	bne.n	8011a94 <__sfputs_r+0x12>
 8011a90:	2000      	movs	r0, #0
 8011a92:	e007      	b.n	8011aa4 <__sfputs_r+0x22>
 8011a94:	463a      	mov	r2, r7
 8011a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	f7ff ffda 	bl	8011a54 <__sfputc_r>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	d1f3      	bne.n	8011a8c <__sfputs_r+0xa>
 8011aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011aa8 <_vfiprintf_r>:
 8011aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aac:	460c      	mov	r4, r1
 8011aae:	b09d      	sub	sp, #116	; 0x74
 8011ab0:	4617      	mov	r7, r2
 8011ab2:	461d      	mov	r5, r3
 8011ab4:	4606      	mov	r6, r0
 8011ab6:	b118      	cbz	r0, 8011ac0 <_vfiprintf_r+0x18>
 8011ab8:	6983      	ldr	r3, [r0, #24]
 8011aba:	b90b      	cbnz	r3, 8011ac0 <_vfiprintf_r+0x18>
 8011abc:	f7ff f9d8 	bl	8010e70 <__sinit>
 8011ac0:	4b7c      	ldr	r3, [pc, #496]	; (8011cb4 <_vfiprintf_r+0x20c>)
 8011ac2:	429c      	cmp	r4, r3
 8011ac4:	d158      	bne.n	8011b78 <_vfiprintf_r+0xd0>
 8011ac6:	6874      	ldr	r4, [r6, #4]
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	0718      	lsls	r0, r3, #28
 8011acc:	d55e      	bpl.n	8011b8c <_vfiprintf_r+0xe4>
 8011ace:	6923      	ldr	r3, [r4, #16]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d05b      	beq.n	8011b8c <_vfiprintf_r+0xe4>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ad8:	2320      	movs	r3, #32
 8011ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ade:	2330      	movs	r3, #48	; 0x30
 8011ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ae4:	9503      	str	r5, [sp, #12]
 8011ae6:	f04f 0b01 	mov.w	fp, #1
 8011aea:	46b8      	mov	r8, r7
 8011aec:	4645      	mov	r5, r8
 8011aee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011af2:	b10b      	cbz	r3, 8011af8 <_vfiprintf_r+0x50>
 8011af4:	2b25      	cmp	r3, #37	; 0x25
 8011af6:	d154      	bne.n	8011ba2 <_vfiprintf_r+0xfa>
 8011af8:	ebb8 0a07 	subs.w	sl, r8, r7
 8011afc:	d00b      	beq.n	8011b16 <_vfiprintf_r+0x6e>
 8011afe:	4653      	mov	r3, sl
 8011b00:	463a      	mov	r2, r7
 8011b02:	4621      	mov	r1, r4
 8011b04:	4630      	mov	r0, r6
 8011b06:	f7ff ffbc 	bl	8011a82 <__sfputs_r>
 8011b0a:	3001      	adds	r0, #1
 8011b0c:	f000 80c2 	beq.w	8011c94 <_vfiprintf_r+0x1ec>
 8011b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b12:	4453      	add	r3, sl
 8011b14:	9309      	str	r3, [sp, #36]	; 0x24
 8011b16:	f898 3000 	ldrb.w	r3, [r8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f000 80ba 	beq.w	8011c94 <_vfiprintf_r+0x1ec>
 8011b20:	2300      	movs	r3, #0
 8011b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b32:	931a      	str	r3, [sp, #104]	; 0x68
 8011b34:	46a8      	mov	r8, r5
 8011b36:	2205      	movs	r2, #5
 8011b38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011b3c:	485e      	ldr	r0, [pc, #376]	; (8011cb8 <_vfiprintf_r+0x210>)
 8011b3e:	f7ee fb77 	bl	8000230 <memchr>
 8011b42:	9b04      	ldr	r3, [sp, #16]
 8011b44:	bb78      	cbnz	r0, 8011ba6 <_vfiprintf_r+0xfe>
 8011b46:	06d9      	lsls	r1, r3, #27
 8011b48:	bf44      	itt	mi
 8011b4a:	2220      	movmi	r2, #32
 8011b4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b50:	071a      	lsls	r2, r3, #28
 8011b52:	bf44      	itt	mi
 8011b54:	222b      	movmi	r2, #43	; 0x2b
 8011b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b5a:	782a      	ldrb	r2, [r5, #0]
 8011b5c:	2a2a      	cmp	r2, #42	; 0x2a
 8011b5e:	d02a      	beq.n	8011bb6 <_vfiprintf_r+0x10e>
 8011b60:	9a07      	ldr	r2, [sp, #28]
 8011b62:	46a8      	mov	r8, r5
 8011b64:	2000      	movs	r0, #0
 8011b66:	250a      	movs	r5, #10
 8011b68:	4641      	mov	r1, r8
 8011b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b6e:	3b30      	subs	r3, #48	; 0x30
 8011b70:	2b09      	cmp	r3, #9
 8011b72:	d969      	bls.n	8011c48 <_vfiprintf_r+0x1a0>
 8011b74:	b360      	cbz	r0, 8011bd0 <_vfiprintf_r+0x128>
 8011b76:	e024      	b.n	8011bc2 <_vfiprintf_r+0x11a>
 8011b78:	4b50      	ldr	r3, [pc, #320]	; (8011cbc <_vfiprintf_r+0x214>)
 8011b7a:	429c      	cmp	r4, r3
 8011b7c:	d101      	bne.n	8011b82 <_vfiprintf_r+0xda>
 8011b7e:	68b4      	ldr	r4, [r6, #8]
 8011b80:	e7a2      	b.n	8011ac8 <_vfiprintf_r+0x20>
 8011b82:	4b4f      	ldr	r3, [pc, #316]	; (8011cc0 <_vfiprintf_r+0x218>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	bf08      	it	eq
 8011b88:	68f4      	ldreq	r4, [r6, #12]
 8011b8a:	e79d      	b.n	8011ac8 <_vfiprintf_r+0x20>
 8011b8c:	4621      	mov	r1, r4
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f7fe f9cc 	bl	800ff2c <__swsetup_r>
 8011b94:	2800      	cmp	r0, #0
 8011b96:	d09d      	beq.n	8011ad4 <_vfiprintf_r+0x2c>
 8011b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9c:	b01d      	add	sp, #116	; 0x74
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba2:	46a8      	mov	r8, r5
 8011ba4:	e7a2      	b.n	8011aec <_vfiprintf_r+0x44>
 8011ba6:	4a44      	ldr	r2, [pc, #272]	; (8011cb8 <_vfiprintf_r+0x210>)
 8011ba8:	1a80      	subs	r0, r0, r2
 8011baa:	fa0b f000 	lsl.w	r0, fp, r0
 8011bae:	4318      	orrs	r0, r3
 8011bb0:	9004      	str	r0, [sp, #16]
 8011bb2:	4645      	mov	r5, r8
 8011bb4:	e7be      	b.n	8011b34 <_vfiprintf_r+0x8c>
 8011bb6:	9a03      	ldr	r2, [sp, #12]
 8011bb8:	1d11      	adds	r1, r2, #4
 8011bba:	6812      	ldr	r2, [r2, #0]
 8011bbc:	9103      	str	r1, [sp, #12]
 8011bbe:	2a00      	cmp	r2, #0
 8011bc0:	db01      	blt.n	8011bc6 <_vfiprintf_r+0x11e>
 8011bc2:	9207      	str	r2, [sp, #28]
 8011bc4:	e004      	b.n	8011bd0 <_vfiprintf_r+0x128>
 8011bc6:	4252      	negs	r2, r2
 8011bc8:	f043 0302 	orr.w	r3, r3, #2
 8011bcc:	9207      	str	r2, [sp, #28]
 8011bce:	9304      	str	r3, [sp, #16]
 8011bd0:	f898 3000 	ldrb.w	r3, [r8]
 8011bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8011bd6:	d10e      	bne.n	8011bf6 <_vfiprintf_r+0x14e>
 8011bd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8011bde:	d138      	bne.n	8011c52 <_vfiprintf_r+0x1aa>
 8011be0:	9b03      	ldr	r3, [sp, #12]
 8011be2:	1d1a      	adds	r2, r3, #4
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	9203      	str	r2, [sp, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	bfb8      	it	lt
 8011bec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011bf0:	f108 0802 	add.w	r8, r8, #2
 8011bf4:	9305      	str	r3, [sp, #20]
 8011bf6:	4d33      	ldr	r5, [pc, #204]	; (8011cc4 <_vfiprintf_r+0x21c>)
 8011bf8:	f898 1000 	ldrb.w	r1, [r8]
 8011bfc:	2203      	movs	r2, #3
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f7ee fb16 	bl	8000230 <memchr>
 8011c04:	b140      	cbz	r0, 8011c18 <_vfiprintf_r+0x170>
 8011c06:	2340      	movs	r3, #64	; 0x40
 8011c08:	1b40      	subs	r0, r0, r5
 8011c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8011c0e:	9b04      	ldr	r3, [sp, #16]
 8011c10:	4303      	orrs	r3, r0
 8011c12:	f108 0801 	add.w	r8, r8, #1
 8011c16:	9304      	str	r3, [sp, #16]
 8011c18:	f898 1000 	ldrb.w	r1, [r8]
 8011c1c:	482a      	ldr	r0, [pc, #168]	; (8011cc8 <_vfiprintf_r+0x220>)
 8011c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c22:	2206      	movs	r2, #6
 8011c24:	f108 0701 	add.w	r7, r8, #1
 8011c28:	f7ee fb02 	bl	8000230 <memchr>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d037      	beq.n	8011ca0 <_vfiprintf_r+0x1f8>
 8011c30:	4b26      	ldr	r3, [pc, #152]	; (8011ccc <_vfiprintf_r+0x224>)
 8011c32:	bb1b      	cbnz	r3, 8011c7c <_vfiprintf_r+0x1d4>
 8011c34:	9b03      	ldr	r3, [sp, #12]
 8011c36:	3307      	adds	r3, #7
 8011c38:	f023 0307 	bic.w	r3, r3, #7
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	9303      	str	r3, [sp, #12]
 8011c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c42:	444b      	add	r3, r9
 8011c44:	9309      	str	r3, [sp, #36]	; 0x24
 8011c46:	e750      	b.n	8011aea <_vfiprintf_r+0x42>
 8011c48:	fb05 3202 	mla	r2, r5, r2, r3
 8011c4c:	2001      	movs	r0, #1
 8011c4e:	4688      	mov	r8, r1
 8011c50:	e78a      	b.n	8011b68 <_vfiprintf_r+0xc0>
 8011c52:	2300      	movs	r3, #0
 8011c54:	f108 0801 	add.w	r8, r8, #1
 8011c58:	9305      	str	r3, [sp, #20]
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	250a      	movs	r5, #10
 8011c5e:	4640      	mov	r0, r8
 8011c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c64:	3a30      	subs	r2, #48	; 0x30
 8011c66:	2a09      	cmp	r2, #9
 8011c68:	d903      	bls.n	8011c72 <_vfiprintf_r+0x1ca>
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d0c3      	beq.n	8011bf6 <_vfiprintf_r+0x14e>
 8011c6e:	9105      	str	r1, [sp, #20]
 8011c70:	e7c1      	b.n	8011bf6 <_vfiprintf_r+0x14e>
 8011c72:	fb05 2101 	mla	r1, r5, r1, r2
 8011c76:	2301      	movs	r3, #1
 8011c78:	4680      	mov	r8, r0
 8011c7a:	e7f0      	b.n	8011c5e <_vfiprintf_r+0x1b6>
 8011c7c:	ab03      	add	r3, sp, #12
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	4622      	mov	r2, r4
 8011c82:	4b13      	ldr	r3, [pc, #76]	; (8011cd0 <_vfiprintf_r+0x228>)
 8011c84:	a904      	add	r1, sp, #16
 8011c86:	4630      	mov	r0, r6
 8011c88:	f7fd fc76 	bl	800f578 <_printf_float>
 8011c8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011c90:	4681      	mov	r9, r0
 8011c92:	d1d5      	bne.n	8011c40 <_vfiprintf_r+0x198>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	065b      	lsls	r3, r3, #25
 8011c98:	f53f af7e 	bmi.w	8011b98 <_vfiprintf_r+0xf0>
 8011c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c9e:	e77d      	b.n	8011b9c <_vfiprintf_r+0xf4>
 8011ca0:	ab03      	add	r3, sp, #12
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	4b0a      	ldr	r3, [pc, #40]	; (8011cd0 <_vfiprintf_r+0x228>)
 8011ca8:	a904      	add	r1, sp, #16
 8011caa:	4630      	mov	r0, r6
 8011cac:	f7fd ff1a 	bl	800fae4 <_printf_i>
 8011cb0:	e7ec      	b.n	8011c8c <_vfiprintf_r+0x1e4>
 8011cb2:	bf00      	nop
 8011cb4:	0801467c 	.word	0x0801467c
 8011cb8:	080147bc 	.word	0x080147bc
 8011cbc:	0801469c 	.word	0x0801469c
 8011cc0:	0801465c 	.word	0x0801465c
 8011cc4:	080147c2 	.word	0x080147c2
 8011cc8:	080147c6 	.word	0x080147c6
 8011ccc:	0800f579 	.word	0x0800f579
 8011cd0:	08011a83 	.word	0x08011a83

08011cd4 <_sbrk_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4c06      	ldr	r4, [pc, #24]	; (8011cf0 <_sbrk_r+0x1c>)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4605      	mov	r5, r0
 8011cdc:	4608      	mov	r0, r1
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	f7f5 ff46 	bl	8007b70 <_sbrk>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	d102      	bne.n	8011cee <_sbrk_r+0x1a>
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	b103      	cbz	r3, 8011cee <_sbrk_r+0x1a>
 8011cec:	602b      	str	r3, [r5, #0]
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	2000292c 	.word	0x2000292c

08011cf4 <__sread>:
 8011cf4:	b510      	push	{r4, lr}
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cfc:	f000 f8e8 	bl	8011ed0 <_read_r>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	bfab      	itete	ge
 8011d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d06:	89a3      	ldrhlt	r3, [r4, #12]
 8011d08:	181b      	addge	r3, r3, r0
 8011d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d0e:	bfac      	ite	ge
 8011d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d12:	81a3      	strhlt	r3, [r4, #12]
 8011d14:	bd10      	pop	{r4, pc}

08011d16 <__swrite>:
 8011d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1a:	461f      	mov	r7, r3
 8011d1c:	898b      	ldrh	r3, [r1, #12]
 8011d1e:	05db      	lsls	r3, r3, #23
 8011d20:	4605      	mov	r5, r0
 8011d22:	460c      	mov	r4, r1
 8011d24:	4616      	mov	r6, r2
 8011d26:	d505      	bpl.n	8011d34 <__swrite+0x1e>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d30:	f000 f868 	bl	8011e04 <_lseek_r>
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d3e:	81a3      	strh	r3, [r4, #12]
 8011d40:	4632      	mov	r2, r6
 8011d42:	463b      	mov	r3, r7
 8011d44:	4628      	mov	r0, r5
 8011d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4a:	f000 b817 	b.w	8011d7c <_write_r>

08011d4e <__sseek>:
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	460c      	mov	r4, r1
 8011d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d56:	f000 f855 	bl	8011e04 <_lseek_r>
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	bf15      	itete	ne
 8011d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d6a:	81a3      	strheq	r3, [r4, #12]
 8011d6c:	bf18      	it	ne
 8011d6e:	81a3      	strhne	r3, [r4, #12]
 8011d70:	bd10      	pop	{r4, pc}

08011d72 <__sclose>:
 8011d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d76:	f000 b813 	b.w	8011da0 <_close_r>
	...

08011d7c <_write_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	4c07      	ldr	r4, [pc, #28]	; (8011d9c <_write_r+0x20>)
 8011d80:	4605      	mov	r5, r0
 8011d82:	4608      	mov	r0, r1
 8011d84:	4611      	mov	r1, r2
 8011d86:	2200      	movs	r2, #0
 8011d88:	6022      	str	r2, [r4, #0]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	f7f5 fbb1 	bl	80074f2 <_write>
 8011d90:	1c43      	adds	r3, r0, #1
 8011d92:	d102      	bne.n	8011d9a <_write_r+0x1e>
 8011d94:	6823      	ldr	r3, [r4, #0]
 8011d96:	b103      	cbz	r3, 8011d9a <_write_r+0x1e>
 8011d98:	602b      	str	r3, [r5, #0]
 8011d9a:	bd38      	pop	{r3, r4, r5, pc}
 8011d9c:	2000292c 	.word	0x2000292c

08011da0 <_close_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4c06      	ldr	r4, [pc, #24]	; (8011dbc <_close_r+0x1c>)
 8011da4:	2300      	movs	r3, #0
 8011da6:	4605      	mov	r5, r0
 8011da8:	4608      	mov	r0, r1
 8011daa:	6023      	str	r3, [r4, #0]
 8011dac:	f7f5 feab 	bl	8007b06 <_close>
 8011db0:	1c43      	adds	r3, r0, #1
 8011db2:	d102      	bne.n	8011dba <_close_r+0x1a>
 8011db4:	6823      	ldr	r3, [r4, #0]
 8011db6:	b103      	cbz	r3, 8011dba <_close_r+0x1a>
 8011db8:	602b      	str	r3, [r5, #0]
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	2000292c 	.word	0x2000292c

08011dc0 <_fstat_r>:
 8011dc0:	b538      	push	{r3, r4, r5, lr}
 8011dc2:	4c07      	ldr	r4, [pc, #28]	; (8011de0 <_fstat_r+0x20>)
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	4608      	mov	r0, r1
 8011dca:	4611      	mov	r1, r2
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	f7f5 fea6 	bl	8007b1e <_fstat>
 8011dd2:	1c43      	adds	r3, r0, #1
 8011dd4:	d102      	bne.n	8011ddc <_fstat_r+0x1c>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	b103      	cbz	r3, 8011ddc <_fstat_r+0x1c>
 8011dda:	602b      	str	r3, [r5, #0]
 8011ddc:	bd38      	pop	{r3, r4, r5, pc}
 8011dde:	bf00      	nop
 8011de0:	2000292c 	.word	0x2000292c

08011de4 <_isatty_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4c06      	ldr	r4, [pc, #24]	; (8011e00 <_isatty_r+0x1c>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4605      	mov	r5, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	6023      	str	r3, [r4, #0]
 8011df0:	f7f5 fea5 	bl	8007b3e <_isatty>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_isatty_r+0x1a>
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_isatty_r+0x1a>
 8011dfc:	602b      	str	r3, [r5, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	2000292c 	.word	0x2000292c

08011e04 <_lseek_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4c07      	ldr	r4, [pc, #28]	; (8011e24 <_lseek_r+0x20>)
 8011e08:	4605      	mov	r5, r0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	6022      	str	r2, [r4, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	f7f5 fe9e 	bl	8007b54 <_lseek>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_lseek_r+0x1e>
 8011e1c:	6823      	ldr	r3, [r4, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_lseek_r+0x1e>
 8011e20:	602b      	str	r3, [r5, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	2000292c 	.word	0x2000292c

08011e28 <__ascii_mbtowc>:
 8011e28:	b082      	sub	sp, #8
 8011e2a:	b901      	cbnz	r1, 8011e2e <__ascii_mbtowc+0x6>
 8011e2c:	a901      	add	r1, sp, #4
 8011e2e:	b142      	cbz	r2, 8011e42 <__ascii_mbtowc+0x1a>
 8011e30:	b14b      	cbz	r3, 8011e46 <__ascii_mbtowc+0x1e>
 8011e32:	7813      	ldrb	r3, [r2, #0]
 8011e34:	600b      	str	r3, [r1, #0]
 8011e36:	7812      	ldrb	r2, [r2, #0]
 8011e38:	1c10      	adds	r0, r2, #0
 8011e3a:	bf18      	it	ne
 8011e3c:	2001      	movne	r0, #1
 8011e3e:	b002      	add	sp, #8
 8011e40:	4770      	bx	lr
 8011e42:	4610      	mov	r0, r2
 8011e44:	e7fb      	b.n	8011e3e <__ascii_mbtowc+0x16>
 8011e46:	f06f 0001 	mvn.w	r0, #1
 8011e4a:	e7f8      	b.n	8011e3e <__ascii_mbtowc+0x16>

08011e4c <memmove>:
 8011e4c:	4288      	cmp	r0, r1
 8011e4e:	b510      	push	{r4, lr}
 8011e50:	eb01 0302 	add.w	r3, r1, r2
 8011e54:	d807      	bhi.n	8011e66 <memmove+0x1a>
 8011e56:	1e42      	subs	r2, r0, #1
 8011e58:	4299      	cmp	r1, r3
 8011e5a:	d00a      	beq.n	8011e72 <memmove+0x26>
 8011e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011e64:	e7f8      	b.n	8011e58 <memmove+0xc>
 8011e66:	4283      	cmp	r3, r0
 8011e68:	d9f5      	bls.n	8011e56 <memmove+0xa>
 8011e6a:	1881      	adds	r1, r0, r2
 8011e6c:	1ad2      	subs	r2, r2, r3
 8011e6e:	42d3      	cmn	r3, r2
 8011e70:	d100      	bne.n	8011e74 <memmove+0x28>
 8011e72:	bd10      	pop	{r4, pc}
 8011e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011e7c:	e7f7      	b.n	8011e6e <memmove+0x22>

08011e7e <__malloc_lock>:
 8011e7e:	4770      	bx	lr

08011e80 <__malloc_unlock>:
 8011e80:	4770      	bx	lr

08011e82 <_realloc_r>:
 8011e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e84:	4607      	mov	r7, r0
 8011e86:	4614      	mov	r4, r2
 8011e88:	460e      	mov	r6, r1
 8011e8a:	b921      	cbnz	r1, 8011e96 <_realloc_r+0x14>
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e92:	f7ff bc33 	b.w	80116fc <_malloc_r>
 8011e96:	b922      	cbnz	r2, 8011ea2 <_realloc_r+0x20>
 8011e98:	f7ff fbe2 	bl	8011660 <_free_r>
 8011e9c:	4625      	mov	r5, r4
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ea2:	f000 f834 	bl	8011f0e <_malloc_usable_size_r>
 8011ea6:	42a0      	cmp	r0, r4
 8011ea8:	d20f      	bcs.n	8011eca <_realloc_r+0x48>
 8011eaa:	4621      	mov	r1, r4
 8011eac:	4638      	mov	r0, r7
 8011eae:	f7ff fc25 	bl	80116fc <_malloc_r>
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d0f2      	beq.n	8011e9e <_realloc_r+0x1c>
 8011eb8:	4631      	mov	r1, r6
 8011eba:	4622      	mov	r2, r4
 8011ebc:	f7ff f8dc 	bl	8011078 <memcpy>
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	4638      	mov	r0, r7
 8011ec4:	f7ff fbcc 	bl	8011660 <_free_r>
 8011ec8:	e7e9      	b.n	8011e9e <_realloc_r+0x1c>
 8011eca:	4635      	mov	r5, r6
 8011ecc:	e7e7      	b.n	8011e9e <_realloc_r+0x1c>
	...

08011ed0 <_read_r>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	4c07      	ldr	r4, [pc, #28]	; (8011ef0 <_read_r+0x20>)
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	4608      	mov	r0, r1
 8011ed8:	4611      	mov	r1, r2
 8011eda:	2200      	movs	r2, #0
 8011edc:	6022      	str	r2, [r4, #0]
 8011ede:	461a      	mov	r2, r3
 8011ee0:	f7f5 fdf4 	bl	8007acc <_read>
 8011ee4:	1c43      	adds	r3, r0, #1
 8011ee6:	d102      	bne.n	8011eee <_read_r+0x1e>
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	b103      	cbz	r3, 8011eee <_read_r+0x1e>
 8011eec:	602b      	str	r3, [r5, #0]
 8011eee:	bd38      	pop	{r3, r4, r5, pc}
 8011ef0:	2000292c 	.word	0x2000292c

08011ef4 <__ascii_wctomb>:
 8011ef4:	b149      	cbz	r1, 8011f0a <__ascii_wctomb+0x16>
 8011ef6:	2aff      	cmp	r2, #255	; 0xff
 8011ef8:	bf85      	ittet	hi
 8011efa:	238a      	movhi	r3, #138	; 0x8a
 8011efc:	6003      	strhi	r3, [r0, #0]
 8011efe:	700a      	strbls	r2, [r1, #0]
 8011f00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011f04:	bf98      	it	ls
 8011f06:	2001      	movls	r0, #1
 8011f08:	4770      	bx	lr
 8011f0a:	4608      	mov	r0, r1
 8011f0c:	4770      	bx	lr

08011f0e <_malloc_usable_size_r>:
 8011f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f12:	1f18      	subs	r0, r3, #4
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	bfbc      	itt	lt
 8011f18:	580b      	ldrlt	r3, [r1, r0]
 8011f1a:	18c0      	addlt	r0, r0, r3
 8011f1c:	4770      	bx	lr
	...

08011f20 <log10>:
 8011f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f22:	ed2d 8b02 	vpush	{d8}
 8011f26:	b08b      	sub	sp, #44	; 0x2c
 8011f28:	ec55 4b10 	vmov	r4, r5, d0
 8011f2c:	f000 f9e8 	bl	8012300 <__ieee754_log10>
 8011f30:	4b36      	ldr	r3, [pc, #216]	; (801200c <log10+0xec>)
 8011f32:	eeb0 8a40 	vmov.f32	s16, s0
 8011f36:	eef0 8a60 	vmov.f32	s17, s1
 8011f3a:	f993 6000 	ldrsb.w	r6, [r3]
 8011f3e:	1c73      	adds	r3, r6, #1
 8011f40:	d05c      	beq.n	8011ffc <log10+0xdc>
 8011f42:	4622      	mov	r2, r4
 8011f44:	462b      	mov	r3, r5
 8011f46:	4620      	mov	r0, r4
 8011f48:	4629      	mov	r1, r5
 8011f4a:	f7ee fe17 	bl	8000b7c <__aeabi_dcmpun>
 8011f4e:	4607      	mov	r7, r0
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d153      	bne.n	8011ffc <log10+0xdc>
 8011f54:	2200      	movs	r2, #0
 8011f56:	2300      	movs	r3, #0
 8011f58:	4620      	mov	r0, r4
 8011f5a:	4629      	mov	r1, r5
 8011f5c:	f7ee fdf0 	bl	8000b40 <__aeabi_dcmple>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d04b      	beq.n	8011ffc <log10+0xdc>
 8011f64:	4b2a      	ldr	r3, [pc, #168]	; (8012010 <log10+0xf0>)
 8011f66:	9301      	str	r3, [sp, #4]
 8011f68:	9708      	str	r7, [sp, #32]
 8011f6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011f6e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011f72:	b9a6      	cbnz	r6, 8011f9e <log10+0x7e>
 8011f74:	4b27      	ldr	r3, [pc, #156]	; (8012014 <log10+0xf4>)
 8011f76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f7e:	4620      	mov	r0, r4
 8011f80:	2200      	movs	r2, #0
 8011f82:	2300      	movs	r3, #0
 8011f84:	4629      	mov	r1, r5
 8011f86:	f7ee fdc7 	bl	8000b18 <__aeabi_dcmpeq>
 8011f8a:	bb40      	cbnz	r0, 8011fde <log10+0xbe>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	2e02      	cmp	r6, #2
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	d119      	bne.n	8011fc8 <log10+0xa8>
 8011f94:	f7fd fa2a 	bl	800f3ec <__errno>
 8011f98:	2321      	movs	r3, #33	; 0x21
 8011f9a:	6003      	str	r3, [r0, #0]
 8011f9c:	e019      	b.n	8011fd2 <log10+0xb2>
 8011f9e:	4b1e      	ldr	r3, [pc, #120]	; (8012018 <log10+0xf8>)
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2300      	movs	r3, #0
 8011fac:	4629      	mov	r1, r5
 8011fae:	f7ee fdb3 	bl	8000b18 <__aeabi_dcmpeq>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	d0ea      	beq.n	8011f8c <log10+0x6c>
 8011fb6:	2302      	movs	r3, #2
 8011fb8:	429e      	cmp	r6, r3
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	d111      	bne.n	8011fe2 <log10+0xc2>
 8011fbe:	f7fd fa15 	bl	800f3ec <__errno>
 8011fc2:	2322      	movs	r3, #34	; 0x22
 8011fc4:	6003      	str	r3, [r0, #0]
 8011fc6:	e011      	b.n	8011fec <log10+0xcc>
 8011fc8:	4668      	mov	r0, sp
 8011fca:	f000 fff4 	bl	8012fb6 <matherr>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d0e0      	beq.n	8011f94 <log10+0x74>
 8011fd2:	4812      	ldr	r0, [pc, #72]	; (801201c <log10+0xfc>)
 8011fd4:	f000 fff4 	bl	8012fc0 <nan>
 8011fd8:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011fdc:	e006      	b.n	8011fec <log10+0xcc>
 8011fde:	2302      	movs	r3, #2
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4668      	mov	r0, sp
 8011fe4:	f000 ffe7 	bl	8012fb6 <matherr>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0e8      	beq.n	8011fbe <log10+0x9e>
 8011fec:	9b08      	ldr	r3, [sp, #32]
 8011fee:	b11b      	cbz	r3, 8011ff8 <log10+0xd8>
 8011ff0:	f7fd f9fc 	bl	800f3ec <__errno>
 8011ff4:	9b08      	ldr	r3, [sp, #32]
 8011ff6:	6003      	str	r3, [r0, #0]
 8011ff8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8012000:	eef0 0a68 	vmov.f32	s1, s17
 8012004:	b00b      	add	sp, #44	; 0x2c
 8012006:	ecbd 8b02 	vpop	{d8}
 801200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801200c:	20001e04 	.word	0x20001e04
 8012010:	080148d8 	.word	0x080148d8
 8012014:	c7efffff 	.word	0xc7efffff
 8012018:	fff00000 	.word	0xfff00000
 801201c:	080147c1 	.word	0x080147c1

08012020 <pow>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	ed2d 8b04 	vpush	{d8-d9}
 8012028:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80122fc <pow+0x2dc>
 801202c:	b08d      	sub	sp, #52	; 0x34
 801202e:	ec57 6b10 	vmov	r6, r7, d0
 8012032:	ec55 4b11 	vmov	r4, r5, d1
 8012036:	f000 f9ef 	bl	8012418 <__ieee754_pow>
 801203a:	f999 3000 	ldrsb.w	r3, [r9]
 801203e:	9300      	str	r3, [sp, #0]
 8012040:	3301      	adds	r3, #1
 8012042:	eeb0 8a40 	vmov.f32	s16, s0
 8012046:	eef0 8a60 	vmov.f32	s17, s1
 801204a:	46c8      	mov	r8, r9
 801204c:	d05f      	beq.n	801210e <pow+0xee>
 801204e:	4622      	mov	r2, r4
 8012050:	462b      	mov	r3, r5
 8012052:	4620      	mov	r0, r4
 8012054:	4629      	mov	r1, r5
 8012056:	f7ee fd91 	bl	8000b7c <__aeabi_dcmpun>
 801205a:	4683      	mov	fp, r0
 801205c:	2800      	cmp	r0, #0
 801205e:	d156      	bne.n	801210e <pow+0xee>
 8012060:	4632      	mov	r2, r6
 8012062:	463b      	mov	r3, r7
 8012064:	4630      	mov	r0, r6
 8012066:	4639      	mov	r1, r7
 8012068:	f7ee fd88 	bl	8000b7c <__aeabi_dcmpun>
 801206c:	9001      	str	r0, [sp, #4]
 801206e:	b1e8      	cbz	r0, 80120ac <pow+0x8c>
 8012070:	2200      	movs	r2, #0
 8012072:	2300      	movs	r3, #0
 8012074:	4620      	mov	r0, r4
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee fd4e 	bl	8000b18 <__aeabi_dcmpeq>
 801207c:	2800      	cmp	r0, #0
 801207e:	d046      	beq.n	801210e <pow+0xee>
 8012080:	2301      	movs	r3, #1
 8012082:	9302      	str	r3, [sp, #8]
 8012084:	4b96      	ldr	r3, [pc, #600]	; (80122e0 <pow+0x2c0>)
 8012086:	9303      	str	r3, [sp, #12]
 8012088:	4b96      	ldr	r3, [pc, #600]	; (80122e4 <pow+0x2c4>)
 801208a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801208e:	2200      	movs	r2, #0
 8012090:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012094:	9b00      	ldr	r3, [sp, #0]
 8012096:	2b02      	cmp	r3, #2
 8012098:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801209c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120a0:	d033      	beq.n	801210a <pow+0xea>
 80120a2:	a802      	add	r0, sp, #8
 80120a4:	f000 ff87 	bl	8012fb6 <matherr>
 80120a8:	bb48      	cbnz	r0, 80120fe <pow+0xde>
 80120aa:	e05d      	b.n	8012168 <pow+0x148>
 80120ac:	f04f 0a00 	mov.w	sl, #0
 80120b0:	f04f 0b00 	mov.w	fp, #0
 80120b4:	4652      	mov	r2, sl
 80120b6:	465b      	mov	r3, fp
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee fd2c 	bl	8000b18 <__aeabi_dcmpeq>
 80120c0:	ec4b ab19 	vmov	d9, sl, fp
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d054      	beq.n	8012172 <pow+0x152>
 80120c8:	4652      	mov	r2, sl
 80120ca:	465b      	mov	r3, fp
 80120cc:	4620      	mov	r0, r4
 80120ce:	4629      	mov	r1, r5
 80120d0:	f7ee fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80120d4:	4680      	mov	r8, r0
 80120d6:	b318      	cbz	r0, 8012120 <pow+0x100>
 80120d8:	2301      	movs	r3, #1
 80120da:	9302      	str	r3, [sp, #8]
 80120dc:	4b80      	ldr	r3, [pc, #512]	; (80122e0 <pow+0x2c0>)
 80120de:	9303      	str	r3, [sp, #12]
 80120e0:	9b01      	ldr	r3, [sp, #4]
 80120e2:	930a      	str	r3, [sp, #40]	; 0x28
 80120e4:	9b00      	ldr	r3, [sp, #0]
 80120e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80120ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0d5      	beq.n	80120a2 <pow+0x82>
 80120f6:	4b7b      	ldr	r3, [pc, #492]	; (80122e4 <pow+0x2c4>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012100:	b11b      	cbz	r3, 801210a <pow+0xea>
 8012102:	f7fd f973 	bl	800f3ec <__errno>
 8012106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012108:	6003      	str	r3, [r0, #0]
 801210a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801210e:	eeb0 0a48 	vmov.f32	s0, s16
 8012112:	eef0 0a68 	vmov.f32	s1, s17
 8012116:	b00d      	add	sp, #52	; 0x34
 8012118:	ecbd 8b04 	vpop	{d8-d9}
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	ec45 4b10 	vmov	d0, r4, r5
 8012124:	f000 ff3f 	bl	8012fa6 <finite>
 8012128:	2800      	cmp	r0, #0
 801212a:	d0f0      	beq.n	801210e <pow+0xee>
 801212c:	4652      	mov	r2, sl
 801212e:	465b      	mov	r3, fp
 8012130:	4620      	mov	r0, r4
 8012132:	4629      	mov	r1, r5
 8012134:	f7ee fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8012138:	2800      	cmp	r0, #0
 801213a:	d0e8      	beq.n	801210e <pow+0xee>
 801213c:	2301      	movs	r3, #1
 801213e:	9302      	str	r3, [sp, #8]
 8012140:	4b67      	ldr	r3, [pc, #412]	; (80122e0 <pow+0x2c0>)
 8012142:	9303      	str	r3, [sp, #12]
 8012144:	f999 3000 	ldrsb.w	r3, [r9]
 8012148:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801214c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012150:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012154:	b913      	cbnz	r3, 801215c <pow+0x13c>
 8012156:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801215a:	e7a2      	b.n	80120a2 <pow+0x82>
 801215c:	4962      	ldr	r1, [pc, #392]	; (80122e8 <pow+0x2c8>)
 801215e:	2000      	movs	r0, #0
 8012160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012164:	2b02      	cmp	r3, #2
 8012166:	d19c      	bne.n	80120a2 <pow+0x82>
 8012168:	f7fd f940 	bl	800f3ec <__errno>
 801216c:	2321      	movs	r3, #33	; 0x21
 801216e:	6003      	str	r3, [r0, #0]
 8012170:	e7c5      	b.n	80120fe <pow+0xde>
 8012172:	eeb0 0a48 	vmov.f32	s0, s16
 8012176:	eef0 0a68 	vmov.f32	s1, s17
 801217a:	f000 ff14 	bl	8012fa6 <finite>
 801217e:	9000      	str	r0, [sp, #0]
 8012180:	2800      	cmp	r0, #0
 8012182:	f040 8081 	bne.w	8012288 <pow+0x268>
 8012186:	ec47 6b10 	vmov	d0, r6, r7
 801218a:	f000 ff0c 	bl	8012fa6 <finite>
 801218e:	2800      	cmp	r0, #0
 8012190:	d07a      	beq.n	8012288 <pow+0x268>
 8012192:	ec45 4b10 	vmov	d0, r4, r5
 8012196:	f000 ff06 	bl	8012fa6 <finite>
 801219a:	2800      	cmp	r0, #0
 801219c:	d074      	beq.n	8012288 <pow+0x268>
 801219e:	ec53 2b18 	vmov	r2, r3, d8
 80121a2:	ee18 0a10 	vmov	r0, s16
 80121a6:	4619      	mov	r1, r3
 80121a8:	f7ee fce8 	bl	8000b7c <__aeabi_dcmpun>
 80121ac:	f999 9000 	ldrsb.w	r9, [r9]
 80121b0:	4b4b      	ldr	r3, [pc, #300]	; (80122e0 <pow+0x2c0>)
 80121b2:	b1b0      	cbz	r0, 80121e2 <pow+0x1c2>
 80121b4:	2201      	movs	r2, #1
 80121b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121ba:	9b00      	ldr	r3, [sp, #0]
 80121bc:	930a      	str	r3, [sp, #40]	; 0x28
 80121be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121c6:	f1b9 0f00 	cmp.w	r9, #0
 80121ca:	d0c4      	beq.n	8012156 <pow+0x136>
 80121cc:	4652      	mov	r2, sl
 80121ce:	465b      	mov	r3, fp
 80121d0:	4650      	mov	r0, sl
 80121d2:	4659      	mov	r1, fp
 80121d4:	f7ee fb62 	bl	800089c <__aeabi_ddiv>
 80121d8:	f1b9 0f02 	cmp.w	r9, #2
 80121dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121e0:	e7c1      	b.n	8012166 <pow+0x146>
 80121e2:	2203      	movs	r2, #3
 80121e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121e8:	900a      	str	r0, [sp, #40]	; 0x28
 80121ea:	4629      	mov	r1, r5
 80121ec:	4620      	mov	r0, r4
 80121ee:	2200      	movs	r2, #0
 80121f0:	4b3e      	ldr	r3, [pc, #248]	; (80122ec <pow+0x2cc>)
 80121f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121fa:	f7ee fa25 	bl	8000648 <__aeabi_dmul>
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	f1b9 0f00 	cmp.w	r9, #0
 8012206:	d124      	bne.n	8012252 <pow+0x232>
 8012208:	4b39      	ldr	r3, [pc, #228]	; (80122f0 <pow+0x2d0>)
 801220a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801220e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012212:	4630      	mov	r0, r6
 8012214:	4652      	mov	r2, sl
 8012216:	465b      	mov	r3, fp
 8012218:	4639      	mov	r1, r7
 801221a:	f7ee fc87 	bl	8000b2c <__aeabi_dcmplt>
 801221e:	2800      	cmp	r0, #0
 8012220:	d056      	beq.n	80122d0 <pow+0x2b0>
 8012222:	ec45 4b10 	vmov	d0, r4, r5
 8012226:	f000 fed3 	bl	8012fd0 <rint>
 801222a:	4622      	mov	r2, r4
 801222c:	462b      	mov	r3, r5
 801222e:	ec51 0b10 	vmov	r0, r1, d0
 8012232:	f7ee fc71 	bl	8000b18 <__aeabi_dcmpeq>
 8012236:	b920      	cbnz	r0, 8012242 <pow+0x222>
 8012238:	4b2e      	ldr	r3, [pc, #184]	; (80122f4 <pow+0x2d4>)
 801223a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801223e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012242:	f998 3000 	ldrsb.w	r3, [r8]
 8012246:	2b02      	cmp	r3, #2
 8012248:	d142      	bne.n	80122d0 <pow+0x2b0>
 801224a:	f7fd f8cf 	bl	800f3ec <__errno>
 801224e:	2322      	movs	r3, #34	; 0x22
 8012250:	e78d      	b.n	801216e <pow+0x14e>
 8012252:	4b29      	ldr	r3, [pc, #164]	; (80122f8 <pow+0x2d8>)
 8012254:	2200      	movs	r2, #0
 8012256:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801225a:	4630      	mov	r0, r6
 801225c:	4652      	mov	r2, sl
 801225e:	465b      	mov	r3, fp
 8012260:	4639      	mov	r1, r7
 8012262:	f7ee fc63 	bl	8000b2c <__aeabi_dcmplt>
 8012266:	2800      	cmp	r0, #0
 8012268:	d0eb      	beq.n	8012242 <pow+0x222>
 801226a:	ec45 4b10 	vmov	d0, r4, r5
 801226e:	f000 feaf 	bl	8012fd0 <rint>
 8012272:	4622      	mov	r2, r4
 8012274:	462b      	mov	r3, r5
 8012276:	ec51 0b10 	vmov	r0, r1, d0
 801227a:	f7ee fc4d 	bl	8000b18 <__aeabi_dcmpeq>
 801227e:	2800      	cmp	r0, #0
 8012280:	d1df      	bne.n	8012242 <pow+0x222>
 8012282:	2200      	movs	r2, #0
 8012284:	4b18      	ldr	r3, [pc, #96]	; (80122e8 <pow+0x2c8>)
 8012286:	e7da      	b.n	801223e <pow+0x21e>
 8012288:	2200      	movs	r2, #0
 801228a:	2300      	movs	r3, #0
 801228c:	ec51 0b18 	vmov	r0, r1, d8
 8012290:	f7ee fc42 	bl	8000b18 <__aeabi_dcmpeq>
 8012294:	2800      	cmp	r0, #0
 8012296:	f43f af3a 	beq.w	801210e <pow+0xee>
 801229a:	ec47 6b10 	vmov	d0, r6, r7
 801229e:	f000 fe82 	bl	8012fa6 <finite>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	f43f af33 	beq.w	801210e <pow+0xee>
 80122a8:	ec45 4b10 	vmov	d0, r4, r5
 80122ac:	f000 fe7b 	bl	8012fa6 <finite>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	f43f af2c 	beq.w	801210e <pow+0xee>
 80122b6:	2304      	movs	r3, #4
 80122b8:	9302      	str	r3, [sp, #8]
 80122ba:	4b09      	ldr	r3, [pc, #36]	; (80122e0 <pow+0x2c0>)
 80122bc:	9303      	str	r3, [sp, #12]
 80122be:	2300      	movs	r3, #0
 80122c0:	930a      	str	r3, [sp, #40]	; 0x28
 80122c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80122c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80122ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 80122ce:	e7b8      	b.n	8012242 <pow+0x222>
 80122d0:	a802      	add	r0, sp, #8
 80122d2:	f000 fe70 	bl	8012fb6 <matherr>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	f47f af11 	bne.w	80120fe <pow+0xde>
 80122dc:	e7b5      	b.n	801224a <pow+0x22a>
 80122de:	bf00      	nop
 80122e0:	080148de 	.word	0x080148de
 80122e4:	3ff00000 	.word	0x3ff00000
 80122e8:	fff00000 	.word	0xfff00000
 80122ec:	3fe00000 	.word	0x3fe00000
 80122f0:	47efffff 	.word	0x47efffff
 80122f4:	c7efffff 	.word	0xc7efffff
 80122f8:	7ff00000 	.word	0x7ff00000
 80122fc:	20001e04 	.word	0x20001e04

08012300 <__ieee754_log10>:
 8012300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012304:	ec55 4b10 	vmov	r4, r5, d0
 8012308:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801230c:	462b      	mov	r3, r5
 801230e:	da2f      	bge.n	8012370 <__ieee754_log10+0x70>
 8012310:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8012314:	4322      	orrs	r2, r4
 8012316:	d10a      	bne.n	801232e <__ieee754_log10+0x2e>
 8012318:	493b      	ldr	r1, [pc, #236]	; (8012408 <__ieee754_log10+0x108>)
 801231a:	2200      	movs	r2, #0
 801231c:	2300      	movs	r3, #0
 801231e:	2000      	movs	r0, #0
 8012320:	f7ee fabc 	bl	800089c <__aeabi_ddiv>
 8012324:	ec41 0b10 	vmov	d0, r0, r1
 8012328:	b003      	add	sp, #12
 801232a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801232e:	2d00      	cmp	r5, #0
 8012330:	da08      	bge.n	8012344 <__ieee754_log10+0x44>
 8012332:	ee10 2a10 	vmov	r2, s0
 8012336:	4620      	mov	r0, r4
 8012338:	4629      	mov	r1, r5
 801233a:	f7ed ffcd 	bl	80002d8 <__aeabi_dsub>
 801233e:	2200      	movs	r2, #0
 8012340:	2300      	movs	r3, #0
 8012342:	e7ed      	b.n	8012320 <__ieee754_log10+0x20>
 8012344:	2200      	movs	r2, #0
 8012346:	4b31      	ldr	r3, [pc, #196]	; (801240c <__ieee754_log10+0x10c>)
 8012348:	4629      	mov	r1, r5
 801234a:	ee10 0a10 	vmov	r0, s0
 801234e:	f7ee f97b 	bl	8000648 <__aeabi_dmul>
 8012352:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012356:	4604      	mov	r4, r0
 8012358:	460d      	mov	r5, r1
 801235a:	460b      	mov	r3, r1
 801235c:	492c      	ldr	r1, [pc, #176]	; (8012410 <__ieee754_log10+0x110>)
 801235e:	428b      	cmp	r3, r1
 8012360:	dd08      	ble.n	8012374 <__ieee754_log10+0x74>
 8012362:	4622      	mov	r2, r4
 8012364:	462b      	mov	r3, r5
 8012366:	4620      	mov	r0, r4
 8012368:	4629      	mov	r1, r5
 801236a:	f7ed ffb7 	bl	80002dc <__adddf3>
 801236e:	e7d9      	b.n	8012324 <__ieee754_log10+0x24>
 8012370:	2200      	movs	r2, #0
 8012372:	e7f3      	b.n	801235c <__ieee754_log10+0x5c>
 8012374:	1518      	asrs	r0, r3, #20
 8012376:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801237a:	4410      	add	r0, r2
 801237c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8012380:	4448      	add	r0, r9
 8012382:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8012386:	f7ee f8f5 	bl	8000574 <__aeabi_i2d>
 801238a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801238e:	3303      	adds	r3, #3
 8012390:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8012394:	ec45 4b10 	vmov	d0, r4, r5
 8012398:	4606      	mov	r6, r0
 801239a:	460f      	mov	r7, r1
 801239c:	f000 ff14 	bl	80131c8 <__ieee754_log>
 80123a0:	a313      	add	r3, pc, #76	; (adr r3, 80123f0 <__ieee754_log10+0xf0>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	4630      	mov	r0, r6
 80123a8:	4639      	mov	r1, r7
 80123aa:	ed8d 0b00 	vstr	d0, [sp]
 80123ae:	f7ee f94b 	bl	8000648 <__aeabi_dmul>
 80123b2:	ed9d 0b00 	vldr	d0, [sp]
 80123b6:	4604      	mov	r4, r0
 80123b8:	460d      	mov	r5, r1
 80123ba:	a30f      	add	r3, pc, #60	; (adr r3, 80123f8 <__ieee754_log10+0xf8>)
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	ec51 0b10 	vmov	r0, r1, d0
 80123c4:	f7ee f940 	bl	8000648 <__aeabi_dmul>
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	4620      	mov	r0, r4
 80123ce:	4629      	mov	r1, r5
 80123d0:	f7ed ff84 	bl	80002dc <__adddf3>
 80123d4:	a30a      	add	r3, pc, #40	; (adr r3, 8012400 <__ieee754_log10+0x100>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	4604      	mov	r4, r0
 80123dc:	460d      	mov	r5, r1
 80123de:	4630      	mov	r0, r6
 80123e0:	4639      	mov	r1, r7
 80123e2:	f7ee f931 	bl	8000648 <__aeabi_dmul>
 80123e6:	4602      	mov	r2, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	4620      	mov	r0, r4
 80123ec:	4629      	mov	r1, r5
 80123ee:	e7bc      	b.n	801236a <__ieee754_log10+0x6a>
 80123f0:	11f12b36 	.word	0x11f12b36
 80123f4:	3d59fef3 	.word	0x3d59fef3
 80123f8:	1526e50e 	.word	0x1526e50e
 80123fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8012400:	509f6000 	.word	0x509f6000
 8012404:	3fd34413 	.word	0x3fd34413
 8012408:	c3500000 	.word	0xc3500000
 801240c:	43500000 	.word	0x43500000
 8012410:	7fefffff 	.word	0x7fefffff
 8012414:	00000000 	.word	0x00000000

08012418 <__ieee754_pow>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	b091      	sub	sp, #68	; 0x44
 801241e:	ed8d 1b00 	vstr	d1, [sp]
 8012422:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012426:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801242a:	ea58 0302 	orrs.w	r3, r8, r2
 801242e:	ec57 6b10 	vmov	r6, r7, d0
 8012432:	f000 84be 	beq.w	8012db2 <__ieee754_pow+0x99a>
 8012436:	4b7a      	ldr	r3, [pc, #488]	; (8012620 <__ieee754_pow+0x208>)
 8012438:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801243c:	429c      	cmp	r4, r3
 801243e:	463d      	mov	r5, r7
 8012440:	ee10 aa10 	vmov	sl, s0
 8012444:	dc09      	bgt.n	801245a <__ieee754_pow+0x42>
 8012446:	d103      	bne.n	8012450 <__ieee754_pow+0x38>
 8012448:	b93e      	cbnz	r6, 801245a <__ieee754_pow+0x42>
 801244a:	45a0      	cmp	r8, r4
 801244c:	dc0d      	bgt.n	801246a <__ieee754_pow+0x52>
 801244e:	e001      	b.n	8012454 <__ieee754_pow+0x3c>
 8012450:	4598      	cmp	r8, r3
 8012452:	dc02      	bgt.n	801245a <__ieee754_pow+0x42>
 8012454:	4598      	cmp	r8, r3
 8012456:	d10e      	bne.n	8012476 <__ieee754_pow+0x5e>
 8012458:	b16a      	cbz	r2, 8012476 <__ieee754_pow+0x5e>
 801245a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801245e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012462:	ea54 030a 	orrs.w	r3, r4, sl
 8012466:	f000 84a4 	beq.w	8012db2 <__ieee754_pow+0x99a>
 801246a:	486e      	ldr	r0, [pc, #440]	; (8012624 <__ieee754_pow+0x20c>)
 801246c:	b011      	add	sp, #68	; 0x44
 801246e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012472:	f000 bda5 	b.w	8012fc0 <nan>
 8012476:	2d00      	cmp	r5, #0
 8012478:	da53      	bge.n	8012522 <__ieee754_pow+0x10a>
 801247a:	4b6b      	ldr	r3, [pc, #428]	; (8012628 <__ieee754_pow+0x210>)
 801247c:	4598      	cmp	r8, r3
 801247e:	dc4d      	bgt.n	801251c <__ieee754_pow+0x104>
 8012480:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012484:	4598      	cmp	r8, r3
 8012486:	dd4c      	ble.n	8012522 <__ieee754_pow+0x10a>
 8012488:	ea4f 5328 	mov.w	r3, r8, asr #20
 801248c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012490:	2b14      	cmp	r3, #20
 8012492:	dd26      	ble.n	80124e2 <__ieee754_pow+0xca>
 8012494:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012498:	fa22 f103 	lsr.w	r1, r2, r3
 801249c:	fa01 f303 	lsl.w	r3, r1, r3
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d13e      	bne.n	8012522 <__ieee754_pow+0x10a>
 80124a4:	f001 0101 	and.w	r1, r1, #1
 80124a8:	f1c1 0b02 	rsb	fp, r1, #2
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	d15b      	bne.n	8012568 <__ieee754_pow+0x150>
 80124b0:	4b5b      	ldr	r3, [pc, #364]	; (8012620 <__ieee754_pow+0x208>)
 80124b2:	4598      	cmp	r8, r3
 80124b4:	d124      	bne.n	8012500 <__ieee754_pow+0xe8>
 80124b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80124ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80124be:	ea53 030a 	orrs.w	r3, r3, sl
 80124c2:	f000 8476 	beq.w	8012db2 <__ieee754_pow+0x99a>
 80124c6:	4b59      	ldr	r3, [pc, #356]	; (801262c <__ieee754_pow+0x214>)
 80124c8:	429c      	cmp	r4, r3
 80124ca:	dd2d      	ble.n	8012528 <__ieee754_pow+0x110>
 80124cc:	f1b9 0f00 	cmp.w	r9, #0
 80124d0:	f280 8473 	bge.w	8012dba <__ieee754_pow+0x9a2>
 80124d4:	2000      	movs	r0, #0
 80124d6:	2100      	movs	r1, #0
 80124d8:	ec41 0b10 	vmov	d0, r0, r1
 80124dc:	b011      	add	sp, #68	; 0x44
 80124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e2:	2a00      	cmp	r2, #0
 80124e4:	d13e      	bne.n	8012564 <__ieee754_pow+0x14c>
 80124e6:	f1c3 0314 	rsb	r3, r3, #20
 80124ea:	fa48 f103 	asr.w	r1, r8, r3
 80124ee:	fa01 f303 	lsl.w	r3, r1, r3
 80124f2:	4543      	cmp	r3, r8
 80124f4:	f040 8469 	bne.w	8012dca <__ieee754_pow+0x9b2>
 80124f8:	f001 0101 	and.w	r1, r1, #1
 80124fc:	f1c1 0b02 	rsb	fp, r1, #2
 8012500:	4b4b      	ldr	r3, [pc, #300]	; (8012630 <__ieee754_pow+0x218>)
 8012502:	4598      	cmp	r8, r3
 8012504:	d118      	bne.n	8012538 <__ieee754_pow+0x120>
 8012506:	f1b9 0f00 	cmp.w	r9, #0
 801250a:	f280 845a 	bge.w	8012dc2 <__ieee754_pow+0x9aa>
 801250e:	4948      	ldr	r1, [pc, #288]	; (8012630 <__ieee754_pow+0x218>)
 8012510:	4632      	mov	r2, r6
 8012512:	463b      	mov	r3, r7
 8012514:	2000      	movs	r0, #0
 8012516:	f7ee f9c1 	bl	800089c <__aeabi_ddiv>
 801251a:	e7dd      	b.n	80124d8 <__ieee754_pow+0xc0>
 801251c:	f04f 0b02 	mov.w	fp, #2
 8012520:	e7c4      	b.n	80124ac <__ieee754_pow+0x94>
 8012522:	f04f 0b00 	mov.w	fp, #0
 8012526:	e7c1      	b.n	80124ac <__ieee754_pow+0x94>
 8012528:	f1b9 0f00 	cmp.w	r9, #0
 801252c:	dad2      	bge.n	80124d4 <__ieee754_pow+0xbc>
 801252e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012532:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012536:	e7cf      	b.n	80124d8 <__ieee754_pow+0xc0>
 8012538:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801253c:	d106      	bne.n	801254c <__ieee754_pow+0x134>
 801253e:	4632      	mov	r2, r6
 8012540:	463b      	mov	r3, r7
 8012542:	4610      	mov	r0, r2
 8012544:	4619      	mov	r1, r3
 8012546:	f7ee f87f 	bl	8000648 <__aeabi_dmul>
 801254a:	e7c5      	b.n	80124d8 <__ieee754_pow+0xc0>
 801254c:	4b39      	ldr	r3, [pc, #228]	; (8012634 <__ieee754_pow+0x21c>)
 801254e:	4599      	cmp	r9, r3
 8012550:	d10a      	bne.n	8012568 <__ieee754_pow+0x150>
 8012552:	2d00      	cmp	r5, #0
 8012554:	db08      	blt.n	8012568 <__ieee754_pow+0x150>
 8012556:	ec47 6b10 	vmov	d0, r6, r7
 801255a:	b011      	add	sp, #68	; 0x44
 801255c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012560:	f000 bc68 	b.w	8012e34 <__ieee754_sqrt>
 8012564:	f04f 0b00 	mov.w	fp, #0
 8012568:	ec47 6b10 	vmov	d0, r6, r7
 801256c:	f000 fd12 	bl	8012f94 <fabs>
 8012570:	ec51 0b10 	vmov	r0, r1, d0
 8012574:	f1ba 0f00 	cmp.w	sl, #0
 8012578:	d127      	bne.n	80125ca <__ieee754_pow+0x1b2>
 801257a:	b124      	cbz	r4, 8012586 <__ieee754_pow+0x16e>
 801257c:	4b2c      	ldr	r3, [pc, #176]	; (8012630 <__ieee754_pow+0x218>)
 801257e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012582:	429a      	cmp	r2, r3
 8012584:	d121      	bne.n	80125ca <__ieee754_pow+0x1b2>
 8012586:	f1b9 0f00 	cmp.w	r9, #0
 801258a:	da05      	bge.n	8012598 <__ieee754_pow+0x180>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	2000      	movs	r0, #0
 8012592:	4927      	ldr	r1, [pc, #156]	; (8012630 <__ieee754_pow+0x218>)
 8012594:	f7ee f982 	bl	800089c <__aeabi_ddiv>
 8012598:	2d00      	cmp	r5, #0
 801259a:	da9d      	bge.n	80124d8 <__ieee754_pow+0xc0>
 801259c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80125a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80125a4:	ea54 030b 	orrs.w	r3, r4, fp
 80125a8:	d108      	bne.n	80125bc <__ieee754_pow+0x1a4>
 80125aa:	4602      	mov	r2, r0
 80125ac:	460b      	mov	r3, r1
 80125ae:	4610      	mov	r0, r2
 80125b0:	4619      	mov	r1, r3
 80125b2:	f7ed fe91 	bl	80002d8 <__aeabi_dsub>
 80125b6:	4602      	mov	r2, r0
 80125b8:	460b      	mov	r3, r1
 80125ba:	e7ac      	b.n	8012516 <__ieee754_pow+0xfe>
 80125bc:	f1bb 0f01 	cmp.w	fp, #1
 80125c0:	d18a      	bne.n	80124d8 <__ieee754_pow+0xc0>
 80125c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125c6:	4619      	mov	r1, r3
 80125c8:	e786      	b.n	80124d8 <__ieee754_pow+0xc0>
 80125ca:	0fed      	lsrs	r5, r5, #31
 80125cc:	1e6b      	subs	r3, r5, #1
 80125ce:	930d      	str	r3, [sp, #52]	; 0x34
 80125d0:	ea5b 0303 	orrs.w	r3, fp, r3
 80125d4:	d102      	bne.n	80125dc <__ieee754_pow+0x1c4>
 80125d6:	4632      	mov	r2, r6
 80125d8:	463b      	mov	r3, r7
 80125da:	e7e8      	b.n	80125ae <__ieee754_pow+0x196>
 80125dc:	4b16      	ldr	r3, [pc, #88]	; (8012638 <__ieee754_pow+0x220>)
 80125de:	4598      	cmp	r8, r3
 80125e0:	f340 80fe 	ble.w	80127e0 <__ieee754_pow+0x3c8>
 80125e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80125e8:	4598      	cmp	r8, r3
 80125ea:	dd0a      	ble.n	8012602 <__ieee754_pow+0x1ea>
 80125ec:	4b0f      	ldr	r3, [pc, #60]	; (801262c <__ieee754_pow+0x214>)
 80125ee:	429c      	cmp	r4, r3
 80125f0:	dc0d      	bgt.n	801260e <__ieee754_pow+0x1f6>
 80125f2:	f1b9 0f00 	cmp.w	r9, #0
 80125f6:	f6bf af6d 	bge.w	80124d4 <__ieee754_pow+0xbc>
 80125fa:	a307      	add	r3, pc, #28	; (adr r3, 8012618 <__ieee754_pow+0x200>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	e79f      	b.n	8012542 <__ieee754_pow+0x12a>
 8012602:	4b0e      	ldr	r3, [pc, #56]	; (801263c <__ieee754_pow+0x224>)
 8012604:	429c      	cmp	r4, r3
 8012606:	ddf4      	ble.n	80125f2 <__ieee754_pow+0x1da>
 8012608:	4b09      	ldr	r3, [pc, #36]	; (8012630 <__ieee754_pow+0x218>)
 801260a:	429c      	cmp	r4, r3
 801260c:	dd18      	ble.n	8012640 <__ieee754_pow+0x228>
 801260e:	f1b9 0f00 	cmp.w	r9, #0
 8012612:	dcf2      	bgt.n	80125fa <__ieee754_pow+0x1e2>
 8012614:	e75e      	b.n	80124d4 <__ieee754_pow+0xbc>
 8012616:	bf00      	nop
 8012618:	8800759c 	.word	0x8800759c
 801261c:	7e37e43c 	.word	0x7e37e43c
 8012620:	7ff00000 	.word	0x7ff00000
 8012624:	080147c1 	.word	0x080147c1
 8012628:	433fffff 	.word	0x433fffff
 801262c:	3fefffff 	.word	0x3fefffff
 8012630:	3ff00000 	.word	0x3ff00000
 8012634:	3fe00000 	.word	0x3fe00000
 8012638:	41e00000 	.word	0x41e00000
 801263c:	3feffffe 	.word	0x3feffffe
 8012640:	2200      	movs	r2, #0
 8012642:	4b63      	ldr	r3, [pc, #396]	; (80127d0 <__ieee754_pow+0x3b8>)
 8012644:	f7ed fe48 	bl	80002d8 <__aeabi_dsub>
 8012648:	a355      	add	r3, pc, #340	; (adr r3, 80127a0 <__ieee754_pow+0x388>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	4604      	mov	r4, r0
 8012650:	460d      	mov	r5, r1
 8012652:	f7ed fff9 	bl	8000648 <__aeabi_dmul>
 8012656:	a354      	add	r3, pc, #336	; (adr r3, 80127a8 <__ieee754_pow+0x390>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	4606      	mov	r6, r0
 801265e:	460f      	mov	r7, r1
 8012660:	4620      	mov	r0, r4
 8012662:	4629      	mov	r1, r5
 8012664:	f7ed fff0 	bl	8000648 <__aeabi_dmul>
 8012668:	2200      	movs	r2, #0
 801266a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801266e:	4b59      	ldr	r3, [pc, #356]	; (80127d4 <__ieee754_pow+0x3bc>)
 8012670:	4620      	mov	r0, r4
 8012672:	4629      	mov	r1, r5
 8012674:	f7ed ffe8 	bl	8000648 <__aeabi_dmul>
 8012678:	4602      	mov	r2, r0
 801267a:	460b      	mov	r3, r1
 801267c:	a14c      	add	r1, pc, #304	; (adr r1, 80127b0 <__ieee754_pow+0x398>)
 801267e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012682:	f7ed fe29 	bl	80002d8 <__aeabi_dsub>
 8012686:	4622      	mov	r2, r4
 8012688:	462b      	mov	r3, r5
 801268a:	f7ed ffdd 	bl	8000648 <__aeabi_dmul>
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	2000      	movs	r0, #0
 8012694:	4950      	ldr	r1, [pc, #320]	; (80127d8 <__ieee754_pow+0x3c0>)
 8012696:	f7ed fe1f 	bl	80002d8 <__aeabi_dsub>
 801269a:	4622      	mov	r2, r4
 801269c:	462b      	mov	r3, r5
 801269e:	4680      	mov	r8, r0
 80126a0:	4689      	mov	r9, r1
 80126a2:	4620      	mov	r0, r4
 80126a4:	4629      	mov	r1, r5
 80126a6:	f7ed ffcf 	bl	8000648 <__aeabi_dmul>
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	4640      	mov	r0, r8
 80126b0:	4649      	mov	r1, r9
 80126b2:	f7ed ffc9 	bl	8000648 <__aeabi_dmul>
 80126b6:	a340      	add	r3, pc, #256	; (adr r3, 80127b8 <__ieee754_pow+0x3a0>)
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f7ed ffc4 	bl	8000648 <__aeabi_dmul>
 80126c0:	4602      	mov	r2, r0
 80126c2:	460b      	mov	r3, r1
 80126c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126c8:	f7ed fe06 	bl	80002d8 <__aeabi_dsub>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4604      	mov	r4, r0
 80126d2:	460d      	mov	r5, r1
 80126d4:	4630      	mov	r0, r6
 80126d6:	4639      	mov	r1, r7
 80126d8:	f7ed fe00 	bl	80002dc <__adddf3>
 80126dc:	2000      	movs	r0, #0
 80126de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126e2:	4632      	mov	r2, r6
 80126e4:	463b      	mov	r3, r7
 80126e6:	f7ed fdf7 	bl	80002d8 <__aeabi_dsub>
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	4620      	mov	r0, r4
 80126f0:	4629      	mov	r1, r5
 80126f2:	f7ed fdf1 	bl	80002d8 <__aeabi_dsub>
 80126f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126f8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80126fc:	4313      	orrs	r3, r2
 80126fe:	4606      	mov	r6, r0
 8012700:	460f      	mov	r7, r1
 8012702:	f040 81eb 	bne.w	8012adc <__ieee754_pow+0x6c4>
 8012706:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80127c0 <__ieee754_pow+0x3a8>
 801270a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801270e:	2400      	movs	r4, #0
 8012710:	4622      	mov	r2, r4
 8012712:	462b      	mov	r3, r5
 8012714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012718:	ed8d 7b02 	vstr	d7, [sp, #8]
 801271c:	f7ed fddc 	bl	80002d8 <__aeabi_dsub>
 8012720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012724:	f7ed ff90 	bl	8000648 <__aeabi_dmul>
 8012728:	e9dd 2300 	ldrd	r2, r3, [sp]
 801272c:	4680      	mov	r8, r0
 801272e:	4689      	mov	r9, r1
 8012730:	4630      	mov	r0, r6
 8012732:	4639      	mov	r1, r7
 8012734:	f7ed ff88 	bl	8000648 <__aeabi_dmul>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4640      	mov	r0, r8
 801273e:	4649      	mov	r1, r9
 8012740:	f7ed fdcc 	bl	80002dc <__adddf3>
 8012744:	4622      	mov	r2, r4
 8012746:	462b      	mov	r3, r5
 8012748:	4680      	mov	r8, r0
 801274a:	4689      	mov	r9, r1
 801274c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012750:	f7ed ff7a 	bl	8000648 <__aeabi_dmul>
 8012754:	460b      	mov	r3, r1
 8012756:	4604      	mov	r4, r0
 8012758:	460d      	mov	r5, r1
 801275a:	4602      	mov	r2, r0
 801275c:	4649      	mov	r1, r9
 801275e:	4640      	mov	r0, r8
 8012760:	e9cd 4500 	strd	r4, r5, [sp]
 8012764:	f7ed fdba 	bl	80002dc <__adddf3>
 8012768:	4b1c      	ldr	r3, [pc, #112]	; (80127dc <__ieee754_pow+0x3c4>)
 801276a:	4299      	cmp	r1, r3
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	468b      	mov	fp, r1
 8012772:	f340 82f7 	ble.w	8012d64 <__ieee754_pow+0x94c>
 8012776:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801277a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801277e:	4303      	orrs	r3, r0
 8012780:	f000 81ea 	beq.w	8012b58 <__ieee754_pow+0x740>
 8012784:	a310      	add	r3, pc, #64	; (adr r3, 80127c8 <__ieee754_pow+0x3b0>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801278e:	f7ed ff5b 	bl	8000648 <__aeabi_dmul>
 8012792:	a30d      	add	r3, pc, #52	; (adr r3, 80127c8 <__ieee754_pow+0x3b0>)
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	e6d5      	b.n	8012546 <__ieee754_pow+0x12e>
 801279a:	bf00      	nop
 801279c:	f3af 8000 	nop.w
 80127a0:	60000000 	.word	0x60000000
 80127a4:	3ff71547 	.word	0x3ff71547
 80127a8:	f85ddf44 	.word	0xf85ddf44
 80127ac:	3e54ae0b 	.word	0x3e54ae0b
 80127b0:	55555555 	.word	0x55555555
 80127b4:	3fd55555 	.word	0x3fd55555
 80127b8:	652b82fe 	.word	0x652b82fe
 80127bc:	3ff71547 	.word	0x3ff71547
 80127c0:	00000000 	.word	0x00000000
 80127c4:	bff00000 	.word	0xbff00000
 80127c8:	8800759c 	.word	0x8800759c
 80127cc:	7e37e43c 	.word	0x7e37e43c
 80127d0:	3ff00000 	.word	0x3ff00000
 80127d4:	3fd00000 	.word	0x3fd00000
 80127d8:	3fe00000 	.word	0x3fe00000
 80127dc:	408fffff 	.word	0x408fffff
 80127e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80127e4:	f04f 0200 	mov.w	r2, #0
 80127e8:	da05      	bge.n	80127f6 <__ieee754_pow+0x3de>
 80127ea:	4bd3      	ldr	r3, [pc, #844]	; (8012b38 <__ieee754_pow+0x720>)
 80127ec:	f7ed ff2c 	bl	8000648 <__aeabi_dmul>
 80127f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80127f4:	460c      	mov	r4, r1
 80127f6:	1523      	asrs	r3, r4, #20
 80127f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80127fc:	4413      	add	r3, r2
 80127fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012800:	4bce      	ldr	r3, [pc, #824]	; (8012b3c <__ieee754_pow+0x724>)
 8012802:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012806:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801280a:	429c      	cmp	r4, r3
 801280c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012810:	dd08      	ble.n	8012824 <__ieee754_pow+0x40c>
 8012812:	4bcb      	ldr	r3, [pc, #812]	; (8012b40 <__ieee754_pow+0x728>)
 8012814:	429c      	cmp	r4, r3
 8012816:	f340 815e 	ble.w	8012ad6 <__ieee754_pow+0x6be>
 801281a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801281c:	3301      	adds	r3, #1
 801281e:	9309      	str	r3, [sp, #36]	; 0x24
 8012820:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012824:	f04f 0a00 	mov.w	sl, #0
 8012828:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801282c:	930c      	str	r3, [sp, #48]	; 0x30
 801282e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012830:	4bc4      	ldr	r3, [pc, #784]	; (8012b44 <__ieee754_pow+0x72c>)
 8012832:	4413      	add	r3, r2
 8012834:	ed93 7b00 	vldr	d7, [r3]
 8012838:	4629      	mov	r1, r5
 801283a:	ec53 2b17 	vmov	r2, r3, d7
 801283e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012846:	f7ed fd47 	bl	80002d8 <__aeabi_dsub>
 801284a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801284e:	4606      	mov	r6, r0
 8012850:	460f      	mov	r7, r1
 8012852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012856:	f7ed fd41 	bl	80002dc <__adddf3>
 801285a:	4602      	mov	r2, r0
 801285c:	460b      	mov	r3, r1
 801285e:	2000      	movs	r0, #0
 8012860:	49b9      	ldr	r1, [pc, #740]	; (8012b48 <__ieee754_pow+0x730>)
 8012862:	f7ee f81b 	bl	800089c <__aeabi_ddiv>
 8012866:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	4630      	mov	r0, r6
 8012870:	4639      	mov	r1, r7
 8012872:	f7ed fee9 	bl	8000648 <__aeabi_dmul>
 8012876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801287a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801287e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012882:	2300      	movs	r3, #0
 8012884:	9302      	str	r3, [sp, #8]
 8012886:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801288a:	106d      	asrs	r5, r5, #1
 801288c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012890:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012894:	2200      	movs	r2, #0
 8012896:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801289a:	4640      	mov	r0, r8
 801289c:	4649      	mov	r1, r9
 801289e:	4614      	mov	r4, r2
 80128a0:	461d      	mov	r5, r3
 80128a2:	f7ed fed1 	bl	8000648 <__aeabi_dmul>
 80128a6:	4602      	mov	r2, r0
 80128a8:	460b      	mov	r3, r1
 80128aa:	4630      	mov	r0, r6
 80128ac:	4639      	mov	r1, r7
 80128ae:	f7ed fd13 	bl	80002d8 <__aeabi_dsub>
 80128b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128b6:	4606      	mov	r6, r0
 80128b8:	460f      	mov	r7, r1
 80128ba:	4620      	mov	r0, r4
 80128bc:	4629      	mov	r1, r5
 80128be:	f7ed fd0b 	bl	80002d8 <__aeabi_dsub>
 80128c2:	4602      	mov	r2, r0
 80128c4:	460b      	mov	r3, r1
 80128c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80128ca:	f7ed fd05 	bl	80002d8 <__aeabi_dsub>
 80128ce:	4642      	mov	r2, r8
 80128d0:	464b      	mov	r3, r9
 80128d2:	f7ed feb9 	bl	8000648 <__aeabi_dmul>
 80128d6:	4602      	mov	r2, r0
 80128d8:	460b      	mov	r3, r1
 80128da:	4630      	mov	r0, r6
 80128dc:	4639      	mov	r1, r7
 80128de:	f7ed fcfb 	bl	80002d8 <__aeabi_dsub>
 80128e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80128e6:	f7ed feaf 	bl	8000648 <__aeabi_dmul>
 80128ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80128f2:	4610      	mov	r0, r2
 80128f4:	4619      	mov	r1, r3
 80128f6:	f7ed fea7 	bl	8000648 <__aeabi_dmul>
 80128fa:	a37b      	add	r3, pc, #492	; (adr r3, 8012ae8 <__ieee754_pow+0x6d0>)
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	4604      	mov	r4, r0
 8012902:	460d      	mov	r5, r1
 8012904:	f7ed fea0 	bl	8000648 <__aeabi_dmul>
 8012908:	a379      	add	r3, pc, #484	; (adr r3, 8012af0 <__ieee754_pow+0x6d8>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f7ed fce5 	bl	80002dc <__adddf3>
 8012912:	4622      	mov	r2, r4
 8012914:	462b      	mov	r3, r5
 8012916:	f7ed fe97 	bl	8000648 <__aeabi_dmul>
 801291a:	a377      	add	r3, pc, #476	; (adr r3, 8012af8 <__ieee754_pow+0x6e0>)
 801291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012920:	f7ed fcdc 	bl	80002dc <__adddf3>
 8012924:	4622      	mov	r2, r4
 8012926:	462b      	mov	r3, r5
 8012928:	f7ed fe8e 	bl	8000648 <__aeabi_dmul>
 801292c:	a374      	add	r3, pc, #464	; (adr r3, 8012b00 <__ieee754_pow+0x6e8>)
 801292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012932:	f7ed fcd3 	bl	80002dc <__adddf3>
 8012936:	4622      	mov	r2, r4
 8012938:	462b      	mov	r3, r5
 801293a:	f7ed fe85 	bl	8000648 <__aeabi_dmul>
 801293e:	a372      	add	r3, pc, #456	; (adr r3, 8012b08 <__ieee754_pow+0x6f0>)
 8012940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012944:	f7ed fcca 	bl	80002dc <__adddf3>
 8012948:	4622      	mov	r2, r4
 801294a:	462b      	mov	r3, r5
 801294c:	f7ed fe7c 	bl	8000648 <__aeabi_dmul>
 8012950:	a36f      	add	r3, pc, #444	; (adr r3, 8012b10 <__ieee754_pow+0x6f8>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	f7ed fcc1 	bl	80002dc <__adddf3>
 801295a:	4622      	mov	r2, r4
 801295c:	4606      	mov	r6, r0
 801295e:	460f      	mov	r7, r1
 8012960:	462b      	mov	r3, r5
 8012962:	4620      	mov	r0, r4
 8012964:	4629      	mov	r1, r5
 8012966:	f7ed fe6f 	bl	8000648 <__aeabi_dmul>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4630      	mov	r0, r6
 8012970:	4639      	mov	r1, r7
 8012972:	f7ed fe69 	bl	8000648 <__aeabi_dmul>
 8012976:	4642      	mov	r2, r8
 8012978:	4604      	mov	r4, r0
 801297a:	460d      	mov	r5, r1
 801297c:	464b      	mov	r3, r9
 801297e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012982:	f7ed fcab 	bl	80002dc <__adddf3>
 8012986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801298a:	f7ed fe5d 	bl	8000648 <__aeabi_dmul>
 801298e:	4622      	mov	r2, r4
 8012990:	462b      	mov	r3, r5
 8012992:	f7ed fca3 	bl	80002dc <__adddf3>
 8012996:	4642      	mov	r2, r8
 8012998:	4606      	mov	r6, r0
 801299a:	460f      	mov	r7, r1
 801299c:	464b      	mov	r3, r9
 801299e:	4640      	mov	r0, r8
 80129a0:	4649      	mov	r1, r9
 80129a2:	f7ed fe51 	bl	8000648 <__aeabi_dmul>
 80129a6:	2200      	movs	r2, #0
 80129a8:	4b68      	ldr	r3, [pc, #416]	; (8012b4c <__ieee754_pow+0x734>)
 80129aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80129ae:	f7ed fc95 	bl	80002dc <__adddf3>
 80129b2:	4632      	mov	r2, r6
 80129b4:	463b      	mov	r3, r7
 80129b6:	f7ed fc91 	bl	80002dc <__adddf3>
 80129ba:	9802      	ldr	r0, [sp, #8]
 80129bc:	460d      	mov	r5, r1
 80129be:	4604      	mov	r4, r0
 80129c0:	4602      	mov	r2, r0
 80129c2:	460b      	mov	r3, r1
 80129c4:	4640      	mov	r0, r8
 80129c6:	4649      	mov	r1, r9
 80129c8:	f7ed fe3e 	bl	8000648 <__aeabi_dmul>
 80129cc:	2200      	movs	r2, #0
 80129ce:	4680      	mov	r8, r0
 80129d0:	4689      	mov	r9, r1
 80129d2:	4b5e      	ldr	r3, [pc, #376]	; (8012b4c <__ieee754_pow+0x734>)
 80129d4:	4620      	mov	r0, r4
 80129d6:	4629      	mov	r1, r5
 80129d8:	f7ed fc7e 	bl	80002d8 <__aeabi_dsub>
 80129dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129e0:	f7ed fc7a 	bl	80002d8 <__aeabi_dsub>
 80129e4:	4602      	mov	r2, r0
 80129e6:	460b      	mov	r3, r1
 80129e8:	4630      	mov	r0, r6
 80129ea:	4639      	mov	r1, r7
 80129ec:	f7ed fc74 	bl	80002d8 <__aeabi_dsub>
 80129f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129f4:	f7ed fe28 	bl	8000648 <__aeabi_dmul>
 80129f8:	4622      	mov	r2, r4
 80129fa:	4606      	mov	r6, r0
 80129fc:	460f      	mov	r7, r1
 80129fe:	462b      	mov	r3, r5
 8012a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a04:	f7ed fe20 	bl	8000648 <__aeabi_dmul>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	4639      	mov	r1, r7
 8012a10:	f7ed fc64 	bl	80002dc <__adddf3>
 8012a14:	4606      	mov	r6, r0
 8012a16:	460f      	mov	r7, r1
 8012a18:	4602      	mov	r2, r0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	4640      	mov	r0, r8
 8012a1e:	4649      	mov	r1, r9
 8012a20:	f7ed fc5c 	bl	80002dc <__adddf3>
 8012a24:	9802      	ldr	r0, [sp, #8]
 8012a26:	a33c      	add	r3, pc, #240	; (adr r3, 8012b18 <__ieee754_pow+0x700>)
 8012a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	460d      	mov	r5, r1
 8012a30:	f7ed fe0a 	bl	8000648 <__aeabi_dmul>
 8012a34:	4642      	mov	r2, r8
 8012a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a3a:	464b      	mov	r3, r9
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	4629      	mov	r1, r5
 8012a40:	f7ed fc4a 	bl	80002d8 <__aeabi_dsub>
 8012a44:	4602      	mov	r2, r0
 8012a46:	460b      	mov	r3, r1
 8012a48:	4630      	mov	r0, r6
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	f7ed fc44 	bl	80002d8 <__aeabi_dsub>
 8012a50:	a333      	add	r3, pc, #204	; (adr r3, 8012b20 <__ieee754_pow+0x708>)
 8012a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a56:	f7ed fdf7 	bl	8000648 <__aeabi_dmul>
 8012a5a:	a333      	add	r3, pc, #204	; (adr r3, 8012b28 <__ieee754_pow+0x710>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	4606      	mov	r6, r0
 8012a62:	460f      	mov	r7, r1
 8012a64:	4620      	mov	r0, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	f7ed fdee 	bl	8000648 <__aeabi_dmul>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4630      	mov	r0, r6
 8012a72:	4639      	mov	r1, r7
 8012a74:	f7ed fc32 	bl	80002dc <__adddf3>
 8012a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a7a:	4b35      	ldr	r3, [pc, #212]	; (8012b50 <__ieee754_pow+0x738>)
 8012a7c:	4413      	add	r3, r2
 8012a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a82:	f7ed fc2b 	bl	80002dc <__adddf3>
 8012a86:	4604      	mov	r4, r0
 8012a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a8a:	460d      	mov	r5, r1
 8012a8c:	f7ed fd72 	bl	8000574 <__aeabi_i2d>
 8012a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a92:	4b30      	ldr	r3, [pc, #192]	; (8012b54 <__ieee754_pow+0x73c>)
 8012a94:	4413      	add	r3, r2
 8012a96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	460f      	mov	r7, r1
 8012a9e:	4622      	mov	r2, r4
 8012aa0:	462b      	mov	r3, r5
 8012aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aa6:	f7ed fc19 	bl	80002dc <__adddf3>
 8012aaa:	4642      	mov	r2, r8
 8012aac:	464b      	mov	r3, r9
 8012aae:	f7ed fc15 	bl	80002dc <__adddf3>
 8012ab2:	4632      	mov	r2, r6
 8012ab4:	463b      	mov	r3, r7
 8012ab6:	f7ed fc11 	bl	80002dc <__adddf3>
 8012aba:	9802      	ldr	r0, [sp, #8]
 8012abc:	4632      	mov	r2, r6
 8012abe:	463b      	mov	r3, r7
 8012ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ac4:	f7ed fc08 	bl	80002d8 <__aeabi_dsub>
 8012ac8:	4642      	mov	r2, r8
 8012aca:	464b      	mov	r3, r9
 8012acc:	f7ed fc04 	bl	80002d8 <__aeabi_dsub>
 8012ad0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ad4:	e607      	b.n	80126e6 <__ieee754_pow+0x2ce>
 8012ad6:	f04f 0a01 	mov.w	sl, #1
 8012ada:	e6a5      	b.n	8012828 <__ieee754_pow+0x410>
 8012adc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012b30 <__ieee754_pow+0x718>
 8012ae0:	e613      	b.n	801270a <__ieee754_pow+0x2f2>
 8012ae2:	bf00      	nop
 8012ae4:	f3af 8000 	nop.w
 8012ae8:	4a454eef 	.word	0x4a454eef
 8012aec:	3fca7e28 	.word	0x3fca7e28
 8012af0:	93c9db65 	.word	0x93c9db65
 8012af4:	3fcd864a 	.word	0x3fcd864a
 8012af8:	a91d4101 	.word	0xa91d4101
 8012afc:	3fd17460 	.word	0x3fd17460
 8012b00:	518f264d 	.word	0x518f264d
 8012b04:	3fd55555 	.word	0x3fd55555
 8012b08:	db6fabff 	.word	0xdb6fabff
 8012b0c:	3fdb6db6 	.word	0x3fdb6db6
 8012b10:	33333303 	.word	0x33333303
 8012b14:	3fe33333 	.word	0x3fe33333
 8012b18:	e0000000 	.word	0xe0000000
 8012b1c:	3feec709 	.word	0x3feec709
 8012b20:	dc3a03fd 	.word	0xdc3a03fd
 8012b24:	3feec709 	.word	0x3feec709
 8012b28:	145b01f5 	.word	0x145b01f5
 8012b2c:	be3e2fe0 	.word	0xbe3e2fe0
 8012b30:	00000000 	.word	0x00000000
 8012b34:	3ff00000 	.word	0x3ff00000
 8012b38:	43400000 	.word	0x43400000
 8012b3c:	0003988e 	.word	0x0003988e
 8012b40:	000bb679 	.word	0x000bb679
 8012b44:	080148e8 	.word	0x080148e8
 8012b48:	3ff00000 	.word	0x3ff00000
 8012b4c:	40080000 	.word	0x40080000
 8012b50:	08014908 	.word	0x08014908
 8012b54:	080148f8 	.word	0x080148f8
 8012b58:	a3b4      	add	r3, pc, #720	; (adr r3, 8012e2c <__ieee754_pow+0xa14>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	4640      	mov	r0, r8
 8012b60:	4649      	mov	r1, r9
 8012b62:	f7ed fbbb 	bl	80002dc <__adddf3>
 8012b66:	4622      	mov	r2, r4
 8012b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b6c:	462b      	mov	r3, r5
 8012b6e:	4630      	mov	r0, r6
 8012b70:	4639      	mov	r1, r7
 8012b72:	f7ed fbb1 	bl	80002d8 <__aeabi_dsub>
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b7e:	f7ed fff3 	bl	8000b68 <__aeabi_dcmpgt>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	f47f adfe 	bne.w	8012784 <__ieee754_pow+0x36c>
 8012b88:	4aa3      	ldr	r2, [pc, #652]	; (8012e18 <__ieee754_pow+0xa00>)
 8012b8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	f340 810a 	ble.w	8012da8 <__ieee754_pow+0x990>
 8012b94:	151b      	asrs	r3, r3, #20
 8012b96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012b9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012b9e:	fa4a f303 	asr.w	r3, sl, r3
 8012ba2:	445b      	add	r3, fp
 8012ba4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012ba8:	4e9c      	ldr	r6, [pc, #624]	; (8012e1c <__ieee754_pow+0xa04>)
 8012baa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012bae:	4116      	asrs	r6, r2
 8012bb0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012bb4:	2000      	movs	r0, #0
 8012bb6:	ea23 0106 	bic.w	r1, r3, r6
 8012bba:	f1c2 0214 	rsb	r2, r2, #20
 8012bbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012bc2:	fa4a fa02 	asr.w	sl, sl, r2
 8012bc6:	f1bb 0f00 	cmp.w	fp, #0
 8012bca:	4602      	mov	r2, r0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4620      	mov	r0, r4
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	bfb8      	it	lt
 8012bd4:	f1ca 0a00 	rsblt	sl, sl, #0
 8012bd8:	f7ed fb7e 	bl	80002d8 <__aeabi_dsub>
 8012bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8012be0:	4642      	mov	r2, r8
 8012be2:	464b      	mov	r3, r9
 8012be4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012be8:	f7ed fb78 	bl	80002dc <__adddf3>
 8012bec:	2000      	movs	r0, #0
 8012bee:	a378      	add	r3, pc, #480	; (adr r3, 8012dd0 <__ieee754_pow+0x9b8>)
 8012bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	460d      	mov	r5, r1
 8012bf8:	f7ed fd26 	bl	8000648 <__aeabi_dmul>
 8012bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c00:	4606      	mov	r6, r0
 8012c02:	460f      	mov	r7, r1
 8012c04:	4620      	mov	r0, r4
 8012c06:	4629      	mov	r1, r5
 8012c08:	f7ed fb66 	bl	80002d8 <__aeabi_dsub>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	460b      	mov	r3, r1
 8012c10:	4640      	mov	r0, r8
 8012c12:	4649      	mov	r1, r9
 8012c14:	f7ed fb60 	bl	80002d8 <__aeabi_dsub>
 8012c18:	a36f      	add	r3, pc, #444	; (adr r3, 8012dd8 <__ieee754_pow+0x9c0>)
 8012c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c1e:	f7ed fd13 	bl	8000648 <__aeabi_dmul>
 8012c22:	a36f      	add	r3, pc, #444	; (adr r3, 8012de0 <__ieee754_pow+0x9c8>)
 8012c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c28:	4680      	mov	r8, r0
 8012c2a:	4689      	mov	r9, r1
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	4629      	mov	r1, r5
 8012c30:	f7ed fd0a 	bl	8000648 <__aeabi_dmul>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	4640      	mov	r0, r8
 8012c3a:	4649      	mov	r1, r9
 8012c3c:	f7ed fb4e 	bl	80002dc <__adddf3>
 8012c40:	4604      	mov	r4, r0
 8012c42:	460d      	mov	r5, r1
 8012c44:	4602      	mov	r2, r0
 8012c46:	460b      	mov	r3, r1
 8012c48:	4630      	mov	r0, r6
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	f7ed fb46 	bl	80002dc <__adddf3>
 8012c50:	4632      	mov	r2, r6
 8012c52:	463b      	mov	r3, r7
 8012c54:	4680      	mov	r8, r0
 8012c56:	4689      	mov	r9, r1
 8012c58:	f7ed fb3e 	bl	80002d8 <__aeabi_dsub>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4620      	mov	r0, r4
 8012c62:	4629      	mov	r1, r5
 8012c64:	f7ed fb38 	bl	80002d8 <__aeabi_dsub>
 8012c68:	4642      	mov	r2, r8
 8012c6a:	4606      	mov	r6, r0
 8012c6c:	460f      	mov	r7, r1
 8012c6e:	464b      	mov	r3, r9
 8012c70:	4640      	mov	r0, r8
 8012c72:	4649      	mov	r1, r9
 8012c74:	f7ed fce8 	bl	8000648 <__aeabi_dmul>
 8012c78:	a35b      	add	r3, pc, #364	; (adr r3, 8012de8 <__ieee754_pow+0x9d0>)
 8012c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7e:	4604      	mov	r4, r0
 8012c80:	460d      	mov	r5, r1
 8012c82:	f7ed fce1 	bl	8000648 <__aeabi_dmul>
 8012c86:	a35a      	add	r3, pc, #360	; (adr r3, 8012df0 <__ieee754_pow+0x9d8>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ed fb24 	bl	80002d8 <__aeabi_dsub>
 8012c90:	4622      	mov	r2, r4
 8012c92:	462b      	mov	r3, r5
 8012c94:	f7ed fcd8 	bl	8000648 <__aeabi_dmul>
 8012c98:	a357      	add	r3, pc, #348	; (adr r3, 8012df8 <__ieee754_pow+0x9e0>)
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	f7ed fb1d 	bl	80002dc <__adddf3>
 8012ca2:	4622      	mov	r2, r4
 8012ca4:	462b      	mov	r3, r5
 8012ca6:	f7ed fccf 	bl	8000648 <__aeabi_dmul>
 8012caa:	a355      	add	r3, pc, #340	; (adr r3, 8012e00 <__ieee754_pow+0x9e8>)
 8012cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb0:	f7ed fb12 	bl	80002d8 <__aeabi_dsub>
 8012cb4:	4622      	mov	r2, r4
 8012cb6:	462b      	mov	r3, r5
 8012cb8:	f7ed fcc6 	bl	8000648 <__aeabi_dmul>
 8012cbc:	a352      	add	r3, pc, #328	; (adr r3, 8012e08 <__ieee754_pow+0x9f0>)
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	f7ed fb0b 	bl	80002dc <__adddf3>
 8012cc6:	4622      	mov	r2, r4
 8012cc8:	462b      	mov	r3, r5
 8012cca:	f7ed fcbd 	bl	8000648 <__aeabi_dmul>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4640      	mov	r0, r8
 8012cd4:	4649      	mov	r1, r9
 8012cd6:	f7ed faff 	bl	80002d8 <__aeabi_dsub>
 8012cda:	4604      	mov	r4, r0
 8012cdc:	460d      	mov	r5, r1
 8012cde:	4602      	mov	r2, r0
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	4640      	mov	r0, r8
 8012ce4:	4649      	mov	r1, r9
 8012ce6:	f7ed fcaf 	bl	8000648 <__aeabi_dmul>
 8012cea:	2200      	movs	r2, #0
 8012cec:	e9cd 0100 	strd	r0, r1, [sp]
 8012cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	f7ed faee 	bl	80002d8 <__aeabi_dsub>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	460b      	mov	r3, r1
 8012d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d04:	f7ed fdca 	bl	800089c <__aeabi_ddiv>
 8012d08:	4632      	mov	r2, r6
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	460d      	mov	r5, r1
 8012d0e:	463b      	mov	r3, r7
 8012d10:	4640      	mov	r0, r8
 8012d12:	4649      	mov	r1, r9
 8012d14:	f7ed fc98 	bl	8000648 <__aeabi_dmul>
 8012d18:	4632      	mov	r2, r6
 8012d1a:	463b      	mov	r3, r7
 8012d1c:	f7ed fade 	bl	80002dc <__adddf3>
 8012d20:	4602      	mov	r2, r0
 8012d22:	460b      	mov	r3, r1
 8012d24:	4620      	mov	r0, r4
 8012d26:	4629      	mov	r1, r5
 8012d28:	f7ed fad6 	bl	80002d8 <__aeabi_dsub>
 8012d2c:	4642      	mov	r2, r8
 8012d2e:	464b      	mov	r3, r9
 8012d30:	f7ed fad2 	bl	80002d8 <__aeabi_dsub>
 8012d34:	4602      	mov	r2, r0
 8012d36:	460b      	mov	r3, r1
 8012d38:	2000      	movs	r0, #0
 8012d3a:	4939      	ldr	r1, [pc, #228]	; (8012e20 <__ieee754_pow+0xa08>)
 8012d3c:	f7ed facc 	bl	80002d8 <__aeabi_dsub>
 8012d40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012d44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	da2f      	bge.n	8012dae <__ieee754_pow+0x996>
 8012d4e:	4650      	mov	r0, sl
 8012d50:	ec43 2b10 	vmov	d0, r2, r3
 8012d54:	f000 f9c0 	bl	80130d8 <scalbn>
 8012d58:	ec51 0b10 	vmov	r0, r1, d0
 8012d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d60:	f7ff bbf1 	b.w	8012546 <__ieee754_pow+0x12e>
 8012d64:	4b2f      	ldr	r3, [pc, #188]	; (8012e24 <__ieee754_pow+0xa0c>)
 8012d66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012d6a:	429e      	cmp	r6, r3
 8012d6c:	f77f af0c 	ble.w	8012b88 <__ieee754_pow+0x770>
 8012d70:	4b2d      	ldr	r3, [pc, #180]	; (8012e28 <__ieee754_pow+0xa10>)
 8012d72:	440b      	add	r3, r1
 8012d74:	4303      	orrs	r3, r0
 8012d76:	d00b      	beq.n	8012d90 <__ieee754_pow+0x978>
 8012d78:	a325      	add	r3, pc, #148	; (adr r3, 8012e10 <__ieee754_pow+0x9f8>)
 8012d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d82:	f7ed fc61 	bl	8000648 <__aeabi_dmul>
 8012d86:	a322      	add	r3, pc, #136	; (adr r3, 8012e10 <__ieee754_pow+0x9f8>)
 8012d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8c:	f7ff bbdb 	b.w	8012546 <__ieee754_pow+0x12e>
 8012d90:	4622      	mov	r2, r4
 8012d92:	462b      	mov	r3, r5
 8012d94:	f7ed faa0 	bl	80002d8 <__aeabi_dsub>
 8012d98:	4642      	mov	r2, r8
 8012d9a:	464b      	mov	r3, r9
 8012d9c:	f7ed feda 	bl	8000b54 <__aeabi_dcmpge>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	f43f aef1 	beq.w	8012b88 <__ieee754_pow+0x770>
 8012da6:	e7e7      	b.n	8012d78 <__ieee754_pow+0x960>
 8012da8:	f04f 0a00 	mov.w	sl, #0
 8012dac:	e718      	b.n	8012be0 <__ieee754_pow+0x7c8>
 8012dae:	4621      	mov	r1, r4
 8012db0:	e7d4      	b.n	8012d5c <__ieee754_pow+0x944>
 8012db2:	2000      	movs	r0, #0
 8012db4:	491a      	ldr	r1, [pc, #104]	; (8012e20 <__ieee754_pow+0xa08>)
 8012db6:	f7ff bb8f 	b.w	80124d8 <__ieee754_pow+0xc0>
 8012dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012dbe:	f7ff bb8b 	b.w	80124d8 <__ieee754_pow+0xc0>
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	4639      	mov	r1, r7
 8012dc6:	f7ff bb87 	b.w	80124d8 <__ieee754_pow+0xc0>
 8012dca:	4693      	mov	fp, r2
 8012dcc:	f7ff bb98 	b.w	8012500 <__ieee754_pow+0xe8>
 8012dd0:	00000000 	.word	0x00000000
 8012dd4:	3fe62e43 	.word	0x3fe62e43
 8012dd8:	fefa39ef 	.word	0xfefa39ef
 8012ddc:	3fe62e42 	.word	0x3fe62e42
 8012de0:	0ca86c39 	.word	0x0ca86c39
 8012de4:	be205c61 	.word	0xbe205c61
 8012de8:	72bea4d0 	.word	0x72bea4d0
 8012dec:	3e663769 	.word	0x3e663769
 8012df0:	c5d26bf1 	.word	0xc5d26bf1
 8012df4:	3ebbbd41 	.word	0x3ebbbd41
 8012df8:	af25de2c 	.word	0xaf25de2c
 8012dfc:	3f11566a 	.word	0x3f11566a
 8012e00:	16bebd93 	.word	0x16bebd93
 8012e04:	3f66c16c 	.word	0x3f66c16c
 8012e08:	5555553e 	.word	0x5555553e
 8012e0c:	3fc55555 	.word	0x3fc55555
 8012e10:	c2f8f359 	.word	0xc2f8f359
 8012e14:	01a56e1f 	.word	0x01a56e1f
 8012e18:	3fe00000 	.word	0x3fe00000
 8012e1c:	000fffff 	.word	0x000fffff
 8012e20:	3ff00000 	.word	0x3ff00000
 8012e24:	4090cbff 	.word	0x4090cbff
 8012e28:	3f6f3400 	.word	0x3f6f3400
 8012e2c:	652b82fe 	.word	0x652b82fe
 8012e30:	3c971547 	.word	0x3c971547

08012e34 <__ieee754_sqrt>:
 8012e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e38:	4955      	ldr	r1, [pc, #340]	; (8012f90 <__ieee754_sqrt+0x15c>)
 8012e3a:	ec55 4b10 	vmov	r4, r5, d0
 8012e3e:	43a9      	bics	r1, r5
 8012e40:	462b      	mov	r3, r5
 8012e42:	462a      	mov	r2, r5
 8012e44:	d112      	bne.n	8012e6c <__ieee754_sqrt+0x38>
 8012e46:	ee10 2a10 	vmov	r2, s0
 8012e4a:	ee10 0a10 	vmov	r0, s0
 8012e4e:	4629      	mov	r1, r5
 8012e50:	f7ed fbfa 	bl	8000648 <__aeabi_dmul>
 8012e54:	4602      	mov	r2, r0
 8012e56:	460b      	mov	r3, r1
 8012e58:	4620      	mov	r0, r4
 8012e5a:	4629      	mov	r1, r5
 8012e5c:	f7ed fa3e 	bl	80002dc <__adddf3>
 8012e60:	4604      	mov	r4, r0
 8012e62:	460d      	mov	r5, r1
 8012e64:	ec45 4b10 	vmov	d0, r4, r5
 8012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6c:	2d00      	cmp	r5, #0
 8012e6e:	ee10 0a10 	vmov	r0, s0
 8012e72:	4621      	mov	r1, r4
 8012e74:	dc0f      	bgt.n	8012e96 <__ieee754_sqrt+0x62>
 8012e76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012e7a:	4330      	orrs	r0, r6
 8012e7c:	d0f2      	beq.n	8012e64 <__ieee754_sqrt+0x30>
 8012e7e:	b155      	cbz	r5, 8012e96 <__ieee754_sqrt+0x62>
 8012e80:	ee10 2a10 	vmov	r2, s0
 8012e84:	4620      	mov	r0, r4
 8012e86:	4629      	mov	r1, r5
 8012e88:	f7ed fa26 	bl	80002d8 <__aeabi_dsub>
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	460b      	mov	r3, r1
 8012e90:	f7ed fd04 	bl	800089c <__aeabi_ddiv>
 8012e94:	e7e4      	b.n	8012e60 <__ieee754_sqrt+0x2c>
 8012e96:	151b      	asrs	r3, r3, #20
 8012e98:	d073      	beq.n	8012f82 <__ieee754_sqrt+0x14e>
 8012e9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012e9e:	07dd      	lsls	r5, r3, #31
 8012ea0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012ea4:	bf48      	it	mi
 8012ea6:	0fc8      	lsrmi	r0, r1, #31
 8012ea8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012eac:	bf44      	itt	mi
 8012eae:	0049      	lslmi	r1, r1, #1
 8012eb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012eb4:	2500      	movs	r5, #0
 8012eb6:	1058      	asrs	r0, r3, #1
 8012eb8:	0fcb      	lsrs	r3, r1, #31
 8012eba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012ebe:	0049      	lsls	r1, r1, #1
 8012ec0:	2316      	movs	r3, #22
 8012ec2:	462c      	mov	r4, r5
 8012ec4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012ec8:	19a7      	adds	r7, r4, r6
 8012eca:	4297      	cmp	r7, r2
 8012ecc:	bfde      	ittt	le
 8012ece:	19bc      	addle	r4, r7, r6
 8012ed0:	1bd2      	suble	r2, r2, r7
 8012ed2:	19ad      	addle	r5, r5, r6
 8012ed4:	0fcf      	lsrs	r7, r1, #31
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012edc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ee0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012ee4:	d1f0      	bne.n	8012ec8 <__ieee754_sqrt+0x94>
 8012ee6:	f04f 0c20 	mov.w	ip, #32
 8012eea:	469e      	mov	lr, r3
 8012eec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012ef0:	42a2      	cmp	r2, r4
 8012ef2:	eb06 070e 	add.w	r7, r6, lr
 8012ef6:	dc02      	bgt.n	8012efe <__ieee754_sqrt+0xca>
 8012ef8:	d112      	bne.n	8012f20 <__ieee754_sqrt+0xec>
 8012efa:	428f      	cmp	r7, r1
 8012efc:	d810      	bhi.n	8012f20 <__ieee754_sqrt+0xec>
 8012efe:	2f00      	cmp	r7, #0
 8012f00:	eb07 0e06 	add.w	lr, r7, r6
 8012f04:	da42      	bge.n	8012f8c <__ieee754_sqrt+0x158>
 8012f06:	f1be 0f00 	cmp.w	lr, #0
 8012f0a:	db3f      	blt.n	8012f8c <__ieee754_sqrt+0x158>
 8012f0c:	f104 0801 	add.w	r8, r4, #1
 8012f10:	1b12      	subs	r2, r2, r4
 8012f12:	428f      	cmp	r7, r1
 8012f14:	bf88      	it	hi
 8012f16:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012f1a:	1bc9      	subs	r1, r1, r7
 8012f1c:	4433      	add	r3, r6
 8012f1e:	4644      	mov	r4, r8
 8012f20:	0052      	lsls	r2, r2, #1
 8012f22:	f1bc 0c01 	subs.w	ip, ip, #1
 8012f26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012f2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012f2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f32:	d1dd      	bne.n	8012ef0 <__ieee754_sqrt+0xbc>
 8012f34:	430a      	orrs	r2, r1
 8012f36:	d006      	beq.n	8012f46 <__ieee754_sqrt+0x112>
 8012f38:	1c5c      	adds	r4, r3, #1
 8012f3a:	bf13      	iteet	ne
 8012f3c:	3301      	addne	r3, #1
 8012f3e:	3501      	addeq	r5, #1
 8012f40:	4663      	moveq	r3, ip
 8012f42:	f023 0301 	bicne.w	r3, r3, #1
 8012f46:	106a      	asrs	r2, r5, #1
 8012f48:	085b      	lsrs	r3, r3, #1
 8012f4a:	07e9      	lsls	r1, r5, #31
 8012f4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012f50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012f54:	bf48      	it	mi
 8012f56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012f5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012f5e:	461c      	mov	r4, r3
 8012f60:	e780      	b.n	8012e64 <__ieee754_sqrt+0x30>
 8012f62:	0aca      	lsrs	r2, r1, #11
 8012f64:	3815      	subs	r0, #21
 8012f66:	0549      	lsls	r1, r1, #21
 8012f68:	2a00      	cmp	r2, #0
 8012f6a:	d0fa      	beq.n	8012f62 <__ieee754_sqrt+0x12e>
 8012f6c:	02d6      	lsls	r6, r2, #11
 8012f6e:	d50a      	bpl.n	8012f86 <__ieee754_sqrt+0x152>
 8012f70:	f1c3 0420 	rsb	r4, r3, #32
 8012f74:	fa21 f404 	lsr.w	r4, r1, r4
 8012f78:	1e5d      	subs	r5, r3, #1
 8012f7a:	4099      	lsls	r1, r3
 8012f7c:	4322      	orrs	r2, r4
 8012f7e:	1b43      	subs	r3, r0, r5
 8012f80:	e78b      	b.n	8012e9a <__ieee754_sqrt+0x66>
 8012f82:	4618      	mov	r0, r3
 8012f84:	e7f0      	b.n	8012f68 <__ieee754_sqrt+0x134>
 8012f86:	0052      	lsls	r2, r2, #1
 8012f88:	3301      	adds	r3, #1
 8012f8a:	e7ef      	b.n	8012f6c <__ieee754_sqrt+0x138>
 8012f8c:	46a0      	mov	r8, r4
 8012f8e:	e7bf      	b.n	8012f10 <__ieee754_sqrt+0xdc>
 8012f90:	7ff00000 	.word	0x7ff00000

08012f94 <fabs>:
 8012f94:	ec51 0b10 	vmov	r0, r1, d0
 8012f98:	ee10 2a10 	vmov	r2, s0
 8012f9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fa0:	ec43 2b10 	vmov	d0, r2, r3
 8012fa4:	4770      	bx	lr

08012fa6 <finite>:
 8012fa6:	ee10 3a90 	vmov	r3, s1
 8012faa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012fae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012fb2:	0fc0      	lsrs	r0, r0, #31
 8012fb4:	4770      	bx	lr

08012fb6 <matherr>:
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	4770      	bx	lr
 8012fba:	0000      	movs	r0, r0
 8012fbc:	0000      	movs	r0, r0
	...

08012fc0 <nan>:
 8012fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012fc8 <nan+0x8>
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	00000000 	.word	0x00000000
 8012fcc:	7ff80000 	.word	0x7ff80000

08012fd0 <rint>:
 8012fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fd2:	ec51 0b10 	vmov	r0, r1, d0
 8012fd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012fda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012fde:	2e13      	cmp	r6, #19
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	ee10 4a10 	vmov	r4, s0
 8012fe6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012fea:	dc56      	bgt.n	801309a <rint+0xca>
 8012fec:	2e00      	cmp	r6, #0
 8012fee:	da2b      	bge.n	8013048 <rint+0x78>
 8012ff0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012ff4:	4302      	orrs	r2, r0
 8012ff6:	d023      	beq.n	8013040 <rint+0x70>
 8012ff8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012ffc:	4302      	orrs	r2, r0
 8012ffe:	4254      	negs	r4, r2
 8013000:	4314      	orrs	r4, r2
 8013002:	0c4b      	lsrs	r3, r1, #17
 8013004:	0b24      	lsrs	r4, r4, #12
 8013006:	045b      	lsls	r3, r3, #17
 8013008:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801300c:	ea44 0103 	orr.w	r1, r4, r3
 8013010:	460b      	mov	r3, r1
 8013012:	492f      	ldr	r1, [pc, #188]	; (80130d0 <rint+0x100>)
 8013014:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013018:	e9d1 6700 	ldrd	r6, r7, [r1]
 801301c:	4602      	mov	r2, r0
 801301e:	4639      	mov	r1, r7
 8013020:	4630      	mov	r0, r6
 8013022:	f7ed f95b 	bl	80002dc <__adddf3>
 8013026:	e9cd 0100 	strd	r0, r1, [sp]
 801302a:	463b      	mov	r3, r7
 801302c:	4632      	mov	r2, r6
 801302e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013032:	f7ed f951 	bl	80002d8 <__aeabi_dsub>
 8013036:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801303a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801303e:	4639      	mov	r1, r7
 8013040:	ec41 0b10 	vmov	d0, r0, r1
 8013044:	b003      	add	sp, #12
 8013046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013048:	4a22      	ldr	r2, [pc, #136]	; (80130d4 <rint+0x104>)
 801304a:	4132      	asrs	r2, r6
 801304c:	ea01 0702 	and.w	r7, r1, r2
 8013050:	4307      	orrs	r7, r0
 8013052:	d0f5      	beq.n	8013040 <rint+0x70>
 8013054:	0852      	lsrs	r2, r2, #1
 8013056:	4011      	ands	r1, r2
 8013058:	430c      	orrs	r4, r1
 801305a:	d00b      	beq.n	8013074 <rint+0xa4>
 801305c:	ea23 0202 	bic.w	r2, r3, r2
 8013060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013064:	2e13      	cmp	r6, #19
 8013066:	fa43 f306 	asr.w	r3, r3, r6
 801306a:	bf0c      	ite	eq
 801306c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013070:	2400      	movne	r4, #0
 8013072:	4313      	orrs	r3, r2
 8013074:	4916      	ldr	r1, [pc, #88]	; (80130d0 <rint+0x100>)
 8013076:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801307a:	4622      	mov	r2, r4
 801307c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013080:	4620      	mov	r0, r4
 8013082:	4629      	mov	r1, r5
 8013084:	f7ed f92a 	bl	80002dc <__adddf3>
 8013088:	e9cd 0100 	strd	r0, r1, [sp]
 801308c:	4622      	mov	r2, r4
 801308e:	462b      	mov	r3, r5
 8013090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013094:	f7ed f920 	bl	80002d8 <__aeabi_dsub>
 8013098:	e7d2      	b.n	8013040 <rint+0x70>
 801309a:	2e33      	cmp	r6, #51	; 0x33
 801309c:	dd07      	ble.n	80130ae <rint+0xde>
 801309e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80130a2:	d1cd      	bne.n	8013040 <rint+0x70>
 80130a4:	ee10 2a10 	vmov	r2, s0
 80130a8:	f7ed f918 	bl	80002dc <__adddf3>
 80130ac:	e7c8      	b.n	8013040 <rint+0x70>
 80130ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80130b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130b6:	40f2      	lsrs	r2, r6
 80130b8:	4210      	tst	r0, r2
 80130ba:	d0c1      	beq.n	8013040 <rint+0x70>
 80130bc:	0852      	lsrs	r2, r2, #1
 80130be:	4210      	tst	r0, r2
 80130c0:	bf1f      	itttt	ne
 80130c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80130c6:	ea20 0202 	bicne.w	r2, r0, r2
 80130ca:	4134      	asrne	r4, r6
 80130cc:	4314      	orrne	r4, r2
 80130ce:	e7d1      	b.n	8013074 <rint+0xa4>
 80130d0:	08014918 	.word	0x08014918
 80130d4:	000fffff 	.word	0x000fffff

080130d8 <scalbn>:
 80130d8:	b570      	push	{r4, r5, r6, lr}
 80130da:	ec55 4b10 	vmov	r4, r5, d0
 80130de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80130e2:	4606      	mov	r6, r0
 80130e4:	462b      	mov	r3, r5
 80130e6:	b9aa      	cbnz	r2, 8013114 <scalbn+0x3c>
 80130e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80130ec:	4323      	orrs	r3, r4
 80130ee:	d03b      	beq.n	8013168 <scalbn+0x90>
 80130f0:	4b31      	ldr	r3, [pc, #196]	; (80131b8 <scalbn+0xe0>)
 80130f2:	4629      	mov	r1, r5
 80130f4:	2200      	movs	r2, #0
 80130f6:	ee10 0a10 	vmov	r0, s0
 80130fa:	f7ed faa5 	bl	8000648 <__aeabi_dmul>
 80130fe:	4b2f      	ldr	r3, [pc, #188]	; (80131bc <scalbn+0xe4>)
 8013100:	429e      	cmp	r6, r3
 8013102:	4604      	mov	r4, r0
 8013104:	460d      	mov	r5, r1
 8013106:	da12      	bge.n	801312e <scalbn+0x56>
 8013108:	a327      	add	r3, pc, #156	; (adr r3, 80131a8 <scalbn+0xd0>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	f7ed fa9b 	bl	8000648 <__aeabi_dmul>
 8013112:	e009      	b.n	8013128 <scalbn+0x50>
 8013114:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013118:	428a      	cmp	r2, r1
 801311a:	d10c      	bne.n	8013136 <scalbn+0x5e>
 801311c:	ee10 2a10 	vmov	r2, s0
 8013120:	4620      	mov	r0, r4
 8013122:	4629      	mov	r1, r5
 8013124:	f7ed f8da 	bl	80002dc <__adddf3>
 8013128:	4604      	mov	r4, r0
 801312a:	460d      	mov	r5, r1
 801312c:	e01c      	b.n	8013168 <scalbn+0x90>
 801312e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013132:	460b      	mov	r3, r1
 8013134:	3a36      	subs	r2, #54	; 0x36
 8013136:	4432      	add	r2, r6
 8013138:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801313c:	428a      	cmp	r2, r1
 801313e:	dd0b      	ble.n	8013158 <scalbn+0x80>
 8013140:	ec45 4b11 	vmov	d1, r4, r5
 8013144:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80131b0 <scalbn+0xd8>
 8013148:	f000 f9f0 	bl	801352c <copysign>
 801314c:	a318      	add	r3, pc, #96	; (adr r3, 80131b0 <scalbn+0xd8>)
 801314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013152:	ec51 0b10 	vmov	r0, r1, d0
 8013156:	e7da      	b.n	801310e <scalbn+0x36>
 8013158:	2a00      	cmp	r2, #0
 801315a:	dd08      	ble.n	801316e <scalbn+0x96>
 801315c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013160:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013164:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013168:	ec45 4b10 	vmov	d0, r4, r5
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013172:	da0d      	bge.n	8013190 <scalbn+0xb8>
 8013174:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013178:	429e      	cmp	r6, r3
 801317a:	ec45 4b11 	vmov	d1, r4, r5
 801317e:	dce1      	bgt.n	8013144 <scalbn+0x6c>
 8013180:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80131a8 <scalbn+0xd0>
 8013184:	f000 f9d2 	bl	801352c <copysign>
 8013188:	a307      	add	r3, pc, #28	; (adr r3, 80131a8 <scalbn+0xd0>)
 801318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318e:	e7e0      	b.n	8013152 <scalbn+0x7a>
 8013190:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013194:	3236      	adds	r2, #54	; 0x36
 8013196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801319a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801319e:	4620      	mov	r0, r4
 80131a0:	4629      	mov	r1, r5
 80131a2:	2200      	movs	r2, #0
 80131a4:	4b06      	ldr	r3, [pc, #24]	; (80131c0 <scalbn+0xe8>)
 80131a6:	e7b2      	b.n	801310e <scalbn+0x36>
 80131a8:	c2f8f359 	.word	0xc2f8f359
 80131ac:	01a56e1f 	.word	0x01a56e1f
 80131b0:	8800759c 	.word	0x8800759c
 80131b4:	7e37e43c 	.word	0x7e37e43c
 80131b8:	43500000 	.word	0x43500000
 80131bc:	ffff3cb0 	.word	0xffff3cb0
 80131c0:	3c900000 	.word	0x3c900000
 80131c4:	00000000 	.word	0x00000000

080131c8 <__ieee754_log>:
 80131c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	ec51 0b10 	vmov	r0, r1, d0
 80131d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80131d4:	b087      	sub	sp, #28
 80131d6:	460d      	mov	r5, r1
 80131d8:	da27      	bge.n	801322a <__ieee754_log+0x62>
 80131da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80131de:	4303      	orrs	r3, r0
 80131e0:	ee10 2a10 	vmov	r2, s0
 80131e4:	d10a      	bne.n	80131fc <__ieee754_log+0x34>
 80131e6:	49cc      	ldr	r1, [pc, #816]	; (8013518 <__ieee754_log+0x350>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	2300      	movs	r3, #0
 80131ec:	2000      	movs	r0, #0
 80131ee:	f7ed fb55 	bl	800089c <__aeabi_ddiv>
 80131f2:	ec41 0b10 	vmov	d0, r0, r1
 80131f6:	b007      	add	sp, #28
 80131f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fc:	2900      	cmp	r1, #0
 80131fe:	da05      	bge.n	801320c <__ieee754_log+0x44>
 8013200:	460b      	mov	r3, r1
 8013202:	f7ed f869 	bl	80002d8 <__aeabi_dsub>
 8013206:	2200      	movs	r2, #0
 8013208:	2300      	movs	r3, #0
 801320a:	e7f0      	b.n	80131ee <__ieee754_log+0x26>
 801320c:	4bc3      	ldr	r3, [pc, #780]	; (801351c <__ieee754_log+0x354>)
 801320e:	2200      	movs	r2, #0
 8013210:	f7ed fa1a 	bl	8000648 <__aeabi_dmul>
 8013214:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013218:	460d      	mov	r5, r1
 801321a:	4ac1      	ldr	r2, [pc, #772]	; (8013520 <__ieee754_log+0x358>)
 801321c:	4295      	cmp	r5, r2
 801321e:	dd06      	ble.n	801322e <__ieee754_log+0x66>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	f7ed f85a 	bl	80002dc <__adddf3>
 8013228:	e7e3      	b.n	80131f2 <__ieee754_log+0x2a>
 801322a:	2300      	movs	r3, #0
 801322c:	e7f5      	b.n	801321a <__ieee754_log+0x52>
 801322e:	152c      	asrs	r4, r5, #20
 8013230:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013234:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013238:	441c      	add	r4, r3
 801323a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801323e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8013242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013246:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801324a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801324e:	ea42 0105 	orr.w	r1, r2, r5
 8013252:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013256:	2200      	movs	r2, #0
 8013258:	4bb2      	ldr	r3, [pc, #712]	; (8013524 <__ieee754_log+0x35c>)
 801325a:	f7ed f83d 	bl	80002d8 <__aeabi_dsub>
 801325e:	1cab      	adds	r3, r5, #2
 8013260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013264:	2b02      	cmp	r3, #2
 8013266:	4682      	mov	sl, r0
 8013268:	468b      	mov	fp, r1
 801326a:	f04f 0200 	mov.w	r2, #0
 801326e:	dc53      	bgt.n	8013318 <__ieee754_log+0x150>
 8013270:	2300      	movs	r3, #0
 8013272:	f7ed fc51 	bl	8000b18 <__aeabi_dcmpeq>
 8013276:	b1d0      	cbz	r0, 80132ae <__ieee754_log+0xe6>
 8013278:	2c00      	cmp	r4, #0
 801327a:	f000 8120 	beq.w	80134be <__ieee754_log+0x2f6>
 801327e:	4620      	mov	r0, r4
 8013280:	f7ed f978 	bl	8000574 <__aeabi_i2d>
 8013284:	a390      	add	r3, pc, #576	; (adr r3, 80134c8 <__ieee754_log+0x300>)
 8013286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328a:	4606      	mov	r6, r0
 801328c:	460f      	mov	r7, r1
 801328e:	f7ed f9db 	bl	8000648 <__aeabi_dmul>
 8013292:	a38f      	add	r3, pc, #572	; (adr r3, 80134d0 <__ieee754_log+0x308>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	4604      	mov	r4, r0
 801329a:	460d      	mov	r5, r1
 801329c:	4630      	mov	r0, r6
 801329e:	4639      	mov	r1, r7
 80132a0:	f7ed f9d2 	bl	8000648 <__aeabi_dmul>
 80132a4:	4602      	mov	r2, r0
 80132a6:	460b      	mov	r3, r1
 80132a8:	4620      	mov	r0, r4
 80132aa:	4629      	mov	r1, r5
 80132ac:	e7ba      	b.n	8013224 <__ieee754_log+0x5c>
 80132ae:	a38a      	add	r3, pc, #552	; (adr r3, 80134d8 <__ieee754_log+0x310>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	4650      	mov	r0, sl
 80132b6:	4659      	mov	r1, fp
 80132b8:	f7ed f9c6 	bl	8000648 <__aeabi_dmul>
 80132bc:	4602      	mov	r2, r0
 80132be:	460b      	mov	r3, r1
 80132c0:	2000      	movs	r0, #0
 80132c2:	4999      	ldr	r1, [pc, #612]	; (8013528 <__ieee754_log+0x360>)
 80132c4:	f7ed f808 	bl	80002d8 <__aeabi_dsub>
 80132c8:	4652      	mov	r2, sl
 80132ca:	4606      	mov	r6, r0
 80132cc:	460f      	mov	r7, r1
 80132ce:	465b      	mov	r3, fp
 80132d0:	4650      	mov	r0, sl
 80132d2:	4659      	mov	r1, fp
 80132d4:	f7ed f9b8 	bl	8000648 <__aeabi_dmul>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	4630      	mov	r0, r6
 80132de:	4639      	mov	r1, r7
 80132e0:	f7ed f9b2 	bl	8000648 <__aeabi_dmul>
 80132e4:	4606      	mov	r6, r0
 80132e6:	460f      	mov	r7, r1
 80132e8:	b914      	cbnz	r4, 80132f0 <__ieee754_log+0x128>
 80132ea:	4632      	mov	r2, r6
 80132ec:	463b      	mov	r3, r7
 80132ee:	e0a0      	b.n	8013432 <__ieee754_log+0x26a>
 80132f0:	4620      	mov	r0, r4
 80132f2:	f7ed f93f 	bl	8000574 <__aeabi_i2d>
 80132f6:	a374      	add	r3, pc, #464	; (adr r3, 80134c8 <__ieee754_log+0x300>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	4680      	mov	r8, r0
 80132fe:	4689      	mov	r9, r1
 8013300:	f7ed f9a2 	bl	8000648 <__aeabi_dmul>
 8013304:	a372      	add	r3, pc, #456	; (adr r3, 80134d0 <__ieee754_log+0x308>)
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	4604      	mov	r4, r0
 801330c:	460d      	mov	r5, r1
 801330e:	4640      	mov	r0, r8
 8013310:	4649      	mov	r1, r9
 8013312:	f7ed f999 	bl	8000648 <__aeabi_dmul>
 8013316:	e0a5      	b.n	8013464 <__ieee754_log+0x29c>
 8013318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801331c:	f7ec ffde 	bl	80002dc <__adddf3>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4650      	mov	r0, sl
 8013326:	4659      	mov	r1, fp
 8013328:	f7ed fab8 	bl	800089c <__aeabi_ddiv>
 801332c:	e9cd 0100 	strd	r0, r1, [sp]
 8013330:	4620      	mov	r0, r4
 8013332:	f7ed f91f 	bl	8000574 <__aeabi_i2d>
 8013336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801333a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801333e:	4610      	mov	r0, r2
 8013340:	4619      	mov	r1, r3
 8013342:	f7ed f981 	bl	8000648 <__aeabi_dmul>
 8013346:	4602      	mov	r2, r0
 8013348:	460b      	mov	r3, r1
 801334a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801334e:	f7ed f97b 	bl	8000648 <__aeabi_dmul>
 8013352:	a363      	add	r3, pc, #396	; (adr r3, 80134e0 <__ieee754_log+0x318>)
 8013354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013358:	4680      	mov	r8, r0
 801335a:	4689      	mov	r9, r1
 801335c:	f7ed f974 	bl	8000648 <__aeabi_dmul>
 8013360:	a361      	add	r3, pc, #388	; (adr r3, 80134e8 <__ieee754_log+0x320>)
 8013362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013366:	f7ec ffb9 	bl	80002dc <__adddf3>
 801336a:	4642      	mov	r2, r8
 801336c:	464b      	mov	r3, r9
 801336e:	f7ed f96b 	bl	8000648 <__aeabi_dmul>
 8013372:	a35f      	add	r3, pc, #380	; (adr r3, 80134f0 <__ieee754_log+0x328>)
 8013374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013378:	f7ec ffb0 	bl	80002dc <__adddf3>
 801337c:	4642      	mov	r2, r8
 801337e:	464b      	mov	r3, r9
 8013380:	f7ed f962 	bl	8000648 <__aeabi_dmul>
 8013384:	a35c      	add	r3, pc, #368	; (adr r3, 80134f8 <__ieee754_log+0x330>)
 8013386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338a:	f7ec ffa7 	bl	80002dc <__adddf3>
 801338e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013392:	f7ed f959 	bl	8000648 <__aeabi_dmul>
 8013396:	a35a      	add	r3, pc, #360	; (adr r3, 8013500 <__ieee754_log+0x338>)
 8013398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80133a0:	4640      	mov	r0, r8
 80133a2:	4649      	mov	r1, r9
 80133a4:	f7ed f950 	bl	8000648 <__aeabi_dmul>
 80133a8:	a357      	add	r3, pc, #348	; (adr r3, 8013508 <__ieee754_log+0x340>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	f7ec ff95 	bl	80002dc <__adddf3>
 80133b2:	4642      	mov	r2, r8
 80133b4:	464b      	mov	r3, r9
 80133b6:	f7ed f947 	bl	8000648 <__aeabi_dmul>
 80133ba:	a355      	add	r3, pc, #340	; (adr r3, 8013510 <__ieee754_log+0x348>)
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	f7ec ff8c 	bl	80002dc <__adddf3>
 80133c4:	4642      	mov	r2, r8
 80133c6:	464b      	mov	r3, r9
 80133c8:	f7ed f93e 	bl	8000648 <__aeabi_dmul>
 80133cc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80133d0:	4602      	mov	r2, r0
 80133d2:	460b      	mov	r3, r1
 80133d4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80133d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80133dc:	f7ec ff7e 	bl	80002dc <__adddf3>
 80133e0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80133e4:	3551      	adds	r5, #81	; 0x51
 80133e6:	4335      	orrs	r5, r6
 80133e8:	2d00      	cmp	r5, #0
 80133ea:	4680      	mov	r8, r0
 80133ec:	4689      	mov	r9, r1
 80133ee:	dd48      	ble.n	8013482 <__ieee754_log+0x2ba>
 80133f0:	2200      	movs	r2, #0
 80133f2:	4b4d      	ldr	r3, [pc, #308]	; (8013528 <__ieee754_log+0x360>)
 80133f4:	4650      	mov	r0, sl
 80133f6:	4659      	mov	r1, fp
 80133f8:	f7ed f926 	bl	8000648 <__aeabi_dmul>
 80133fc:	4652      	mov	r2, sl
 80133fe:	465b      	mov	r3, fp
 8013400:	f7ed f922 	bl	8000648 <__aeabi_dmul>
 8013404:	4602      	mov	r2, r0
 8013406:	460b      	mov	r3, r1
 8013408:	4606      	mov	r6, r0
 801340a:	460f      	mov	r7, r1
 801340c:	4640      	mov	r0, r8
 801340e:	4649      	mov	r1, r9
 8013410:	f7ec ff64 	bl	80002dc <__adddf3>
 8013414:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013418:	f7ed f916 	bl	8000648 <__aeabi_dmul>
 801341c:	4680      	mov	r8, r0
 801341e:	4689      	mov	r9, r1
 8013420:	b964      	cbnz	r4, 801343c <__ieee754_log+0x274>
 8013422:	4602      	mov	r2, r0
 8013424:	460b      	mov	r3, r1
 8013426:	4630      	mov	r0, r6
 8013428:	4639      	mov	r1, r7
 801342a:	f7ec ff55 	bl	80002d8 <__aeabi_dsub>
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	4650      	mov	r0, sl
 8013434:	4659      	mov	r1, fp
 8013436:	f7ec ff4f 	bl	80002d8 <__aeabi_dsub>
 801343a:	e6da      	b.n	80131f2 <__ieee754_log+0x2a>
 801343c:	a322      	add	r3, pc, #136	; (adr r3, 80134c8 <__ieee754_log+0x300>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013446:	f7ed f8ff 	bl	8000648 <__aeabi_dmul>
 801344a:	a321      	add	r3, pc, #132	; (adr r3, 80134d0 <__ieee754_log+0x308>)
 801344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013458:	f7ed f8f6 	bl	8000648 <__aeabi_dmul>
 801345c:	4642      	mov	r2, r8
 801345e:	464b      	mov	r3, r9
 8013460:	f7ec ff3c 	bl	80002dc <__adddf3>
 8013464:	4602      	mov	r2, r0
 8013466:	460b      	mov	r3, r1
 8013468:	4630      	mov	r0, r6
 801346a:	4639      	mov	r1, r7
 801346c:	f7ec ff34 	bl	80002d8 <__aeabi_dsub>
 8013470:	4652      	mov	r2, sl
 8013472:	465b      	mov	r3, fp
 8013474:	f7ec ff30 	bl	80002d8 <__aeabi_dsub>
 8013478:	4602      	mov	r2, r0
 801347a:	460b      	mov	r3, r1
 801347c:	4620      	mov	r0, r4
 801347e:	4629      	mov	r1, r5
 8013480:	e7d9      	b.n	8013436 <__ieee754_log+0x26e>
 8013482:	4602      	mov	r2, r0
 8013484:	460b      	mov	r3, r1
 8013486:	4650      	mov	r0, sl
 8013488:	4659      	mov	r1, fp
 801348a:	f7ec ff25 	bl	80002d8 <__aeabi_dsub>
 801348e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013492:	f7ed f8d9 	bl	8000648 <__aeabi_dmul>
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	2c00      	cmp	r4, #0
 801349c:	f43f af25 	beq.w	80132ea <__ieee754_log+0x122>
 80134a0:	a309      	add	r3, pc, #36	; (adr r3, 80134c8 <__ieee754_log+0x300>)
 80134a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134aa:	f7ed f8cd 	bl	8000648 <__aeabi_dmul>
 80134ae:	a308      	add	r3, pc, #32	; (adr r3, 80134d0 <__ieee754_log+0x308>)
 80134b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b4:	4604      	mov	r4, r0
 80134b6:	460d      	mov	r5, r1
 80134b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134bc:	e729      	b.n	8013312 <__ieee754_log+0x14a>
 80134be:	2000      	movs	r0, #0
 80134c0:	2100      	movs	r1, #0
 80134c2:	e696      	b.n	80131f2 <__ieee754_log+0x2a>
 80134c4:	f3af 8000 	nop.w
 80134c8:	fee00000 	.word	0xfee00000
 80134cc:	3fe62e42 	.word	0x3fe62e42
 80134d0:	35793c76 	.word	0x35793c76
 80134d4:	3dea39ef 	.word	0x3dea39ef
 80134d8:	55555555 	.word	0x55555555
 80134dc:	3fd55555 	.word	0x3fd55555
 80134e0:	df3e5244 	.word	0xdf3e5244
 80134e4:	3fc2f112 	.word	0x3fc2f112
 80134e8:	96cb03de 	.word	0x96cb03de
 80134ec:	3fc74664 	.word	0x3fc74664
 80134f0:	94229359 	.word	0x94229359
 80134f4:	3fd24924 	.word	0x3fd24924
 80134f8:	55555593 	.word	0x55555593
 80134fc:	3fe55555 	.word	0x3fe55555
 8013500:	d078c69f 	.word	0xd078c69f
 8013504:	3fc39a09 	.word	0x3fc39a09
 8013508:	1d8e78af 	.word	0x1d8e78af
 801350c:	3fcc71c5 	.word	0x3fcc71c5
 8013510:	9997fa04 	.word	0x9997fa04
 8013514:	3fd99999 	.word	0x3fd99999
 8013518:	c3500000 	.word	0xc3500000
 801351c:	43500000 	.word	0x43500000
 8013520:	7fefffff 	.word	0x7fefffff
 8013524:	3ff00000 	.word	0x3ff00000
 8013528:	3fe00000 	.word	0x3fe00000

0801352c <copysign>:
 801352c:	ec51 0b10 	vmov	r0, r1, d0
 8013530:	ee11 0a90 	vmov	r0, s3
 8013534:	ee10 2a10 	vmov	r2, s0
 8013538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801353c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013540:	ea41 0300 	orr.w	r3, r1, r0
 8013544:	ec43 2b10 	vmov	d0, r2, r3
 8013548:	4770      	bx	lr
	...

0801354c <_init>:
 801354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354e:	bf00      	nop
 8013550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013552:	bc08      	pop	{r3}
 8013554:	469e      	mov	lr, r3
 8013556:	4770      	bx	lr

08013558 <_fini>:
 8013558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801355a:	bf00      	nop
 801355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801355e:	bc08      	pop	{r3}
 8013560:	469e      	mov	lr, r3
 8013562:	4770      	bx	lr
